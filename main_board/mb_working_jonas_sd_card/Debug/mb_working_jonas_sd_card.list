
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  08019d58  08019d58  00029d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a5d0  0801a5d0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a5d0  0801a5d0  0002a5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a5d8  0801a5d8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a5d8  0801a5d8  0002a5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a5dc  0801a5dc  0002a5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801a5e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016e00  200001fc  0801a7dc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20016ffc  0801a7dc  00036ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c61d  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007588  00000000  00000000  0006c849  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002780  00000000  00000000  00073dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002428  00000000  00000000  00076558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000dc73  00000000  00000000  00078980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028659  00000000  00000000  000865f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105457  00000000  00000000  000aec4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b40a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2fc  00000000  00000000  001b4120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019d40 	.word	0x08019d40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08019d40 	.word	0x08019d40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <init_env>:
#include <Helper_Functions/env.h>

void init_env(env *env) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/* init constants */
	env->p_g = PRESSURE_REFERENCE; // ISA reference pressure at sea level [Pa]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <init_env+0x20>)
 8000f84:	601a      	str	r2, [r3, #0]
	env->T_g = 15.0 + T_0; // ISA reference temperature at sea level [K]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <init_env+0x24>)
 8000f8a:	605a      	str	r2, [r3, #4]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	47c5e680 	.word	0x47c5e680
 8000f9c:	43901333 	.word	0x43901333

08000fa0 <update_env>:
void calibrate_env(env *env, float p_g, float T_g) {
	env->T_g = T_g + T_0; // input is temperature in °C
	env->p_g = p_g; //
}

void update_env(env *env, float T) {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f7ff faeb 	bl	8000588 <__aeabi_f2d>
 8000fb2:	a317      	add	r3, pc, #92	; (adr r3, 8001010 <update_env+0x70>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff f988 	bl	80002cc <__adddf3>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	f7ff fe08 	bl	8000bd8 <__aeabi_d2f>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fad8 	bl	8000588 <__aeabi_f2d>
 8000fd8:	a30f      	add	r3, pc, #60	; (adr r3, 8001018 <update_env+0x78>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb2b 	bl	8000638 <__aeabi_dmul>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f7ff fdf5 	bl	8000bd8 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000ff4:	ee00 3a10 	vmov	s0, r3
 8000ff8:	f017 faba 	bl	8018570 <powf>
 8000ffc:	eef0 7a40 	vmov.f32	s15, s0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	bf00      	nop
 8001010:	66666666 	.word	0x66666666
 8001014:	40711266 	.word	0x40711266
 8001018:	2f9873ff 	.word	0x2f9873ff
 800101c:	40791e2f 	.word	0x40791e2f

08001020 <mach_number>:

float mach_number(env *env, float V_x) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 800102c:	edd7 7a00 	vldr	s15, [r7]
 8001030:	eef0 6ae7 	vabs.f32	s13, s15
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	ed93 7a03 	vldr	s14, [r3, #12]
 800103a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800103e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	ee07 3a90 	vmov	s15, r3
}
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e043      	b.n	80010f4 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d03a      	beq.n	80010ee <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa83 	bl	8000588 <__aeabi_f2d>
 8001082:	a322      	add	r3, pc, #136	; (adr r3, 800110c <pressure2altitudeAGL+0xb4>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fc00 	bl	800088c <__aeabi_ddiv>
 800108c:	4603      	mov	r3, r0
 800108e:	460c      	mov	r4, r1
 8001090:	4625      	mov	r5, r4
 8001092:	461c      	mov	r4, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010aa:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001108 <pressure2altitudeAGL+0xb0>
 80010ae:	eeb0 0a66 	vmov.f32	s0, s13
 80010b2:	f017 fa5d 	bl	8018570 <powf>
 80010b6:	eeb0 7a40 	vmov.f32	s14, s0
 80010ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80010be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff fa5f 	bl	8000588 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4620      	mov	r0, r4
 80010d0:	4629      	mov	r1, r5
 80010d2:	f7ff fab1 	bl	8000638 <__aeabi_dmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	460c      	mov	r4, r1
 80010da:	4618      	mov	r0, r3
 80010dc:	4621      	mov	r1, r4
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010e4:	18d4      	adds	r4, r2, r3
 80010e6:	f7ff fd77 	bl	8000bd8 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbb7      	blt.n	800106c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bdb0      	pop	{r4, r5, r7, pc}
 8001104:	f3af 8000 	nop.w
 8001108:	3e42d5e2 	.word	0x3e42d5e2
 800110c:	76c8b439 	.word	0x76c8b439
 8001110:	3f7a9fbe 	.word	0x3f7a9fbe
 8001114:	00000000 	.word	0x00000000

08001118 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	ed2d 8b02 	vpush	{d8}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e047      	b.n	80011c0 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d03e      	beq.n	80011ba <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	ed93 8a00 	vldr	s16, [r3]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa1b 	bl	8000588 <__aeabi_f2d>
 8001152:	a323      	add	r3, pc, #140	; (adr r3, 80011e0 <altitudeAGL2pressure+0xc8>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fa6e 	bl	8000638 <__aeabi_dmul>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	4625      	mov	r5, r4
 8001162:	461c      	mov	r4, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fa0d 	bl	8000588 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fb89 	bl	800088c <__aeabi_ddiv>
 800117a:	4603      	mov	r3, r0
 800117c:	460c      	mov	r4, r1
 800117e:	461a      	mov	r2, r3
 8001180:	4623      	mov	r3, r4
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4914      	ldr	r1, [pc, #80]	; (80011d8 <altitudeAGL2pressure+0xc0>)
 8001188:	f7ff f89e 	bl	80002c8 <__aeabi_dsub>
 800118c:	4603      	mov	r3, r0
 800118e:	460c      	mov	r4, r1
 8001190:	4618      	mov	r0, r3
 8001192:	4621      	mov	r1, r4
 8001194:	f7ff fd20 	bl	8000bd8 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80011dc <altitudeAGL2pressure+0xc4>
 800119e:	ee00 3a10 	vmov	s0, r3
 80011a2:	f017 f9e5 	bl	8018570 <powf>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b0:	4413      	add	r3, r2
 80011b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011b6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbb3      	blt.n	8001130 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	ecbd 8b02 	vpop	{d8}
 80011d2:	bdb0      	pop	{r4, r5, r7, pc}
 80011d4:	f3af 8000 	nop.w
 80011d8:	3ff00000 	.word	0x3ff00000
 80011dc:	40a82ed4 	.word	0x40a82ed4
 80011e0:	76c8b439 	.word	0x76c8b439
 80011e4:	3f7a9fbe 	.word	0x3f7a9fbe

080011e8 <altitude_gradient>:

float altitude_gradient(env *env, float p) {
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * T_GRAD / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / R_0 - 1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9c5 	bl	8000588 <__aeabi_f2d>
 80011fe:	a31f      	add	r3, pc, #124	; (adr r3, 800127c <altitude_gradient+0x94>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa18 	bl	8000638 <__aeabi_dmul>
 8001208:	4603      	mov	r3, r0
 800120a:	460c      	mov	r4, r1
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	a11c      	add	r1, pc, #112	; (adr r1, 8001284 <altitude_gradient+0x9c>)
 8001212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001216:	f7ff fb39 	bl	800088c <__aeabi_ddiv>
 800121a:	4603      	mov	r3, r0
 800121c:	460c      	mov	r4, r1
 800121e:	4625      	mov	r5, r4
 8001220:	461c      	mov	r4, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ed97 7a00 	vldr	s14, [r7]
 800122c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001230:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001278 <altitude_gradient+0x90>
 8001234:	eeb0 0a66 	vmov.f32	s0, s13
 8001238:	f017 f99a 	bl	8018570 <powf>
 800123c:	ee10 3a10 	vmov	r3, s0
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f9a1 	bl	8000588 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	f7ff f9f3 	bl	8000638 <__aeabi_dmul>
 8001252:	4603      	mov	r3, r0
 8001254:	460c      	mov	r4, r1
 8001256:	4618      	mov	r0, r3
 8001258:	4621      	mov	r1, r4
 800125a:	f7ff fcbd 	bl	8000bd8 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - env->R * env->T_g / (env->g * env->p_g) * expf(logf(p / env->p_g) * (env->R * env->T_grad / env->R - 1));
	return h_grad;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bdb0      	pop	{r4, r5, r7, pc}
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	bf7e5604 	.word	0xbf7e5604
 800127c:	3a92a305 	.word	0x3a92a305
 8001280:	40239d01 	.word	0x40239d01
 8001284:	bdb0d017 	.word	0xbdb0d017
 8001288:	bffddabb 	.word	0xbffddabb

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b09d      	sub	sp, #116	; 0x74
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001292:	f003 ff72 	bl	800517a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001296:	f000 f915 	bl	80014c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <main+0x194>)
 800129c:	4a61      	ldr	r2, [pc, #388]	; (8001424 <main+0x198>)
 800129e:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 80012a0:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <main+0x194>)
 80012a2:	4a61      	ldr	r2, [pc, #388]	; (8001428 <main+0x19c>)
 80012a4:	60da      	str	r2, [r3, #12]
  init_env(&global_env);
 80012a6:	4861      	ldr	r0, [pc, #388]	; (800142c <main+0x1a0>)
 80012a8:	f7ff fe66 	bl	8000f78 <init_env>
  reset_flight_phase_detection(&global_flight_phase_detection);
 80012ac:	4860      	ldr	r0, [pc, #384]	; (8001430 <main+0x1a4>)
 80012ae:	f002 fa59 	bl	8003764 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b2:	f000 fabf 	bl	8001834 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b6:	f000 fa97 	bl	80017e8 <MX_DMA_Init>
  MX_SPI3_Init();
 80012ba:	f000 fa25 	bl	8001708 <MX_SPI3_Init>
  MX_SPI1_Init();
 80012be:	f000 f9b3 	bl	8001628 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 80012c2:	f000 f991 	bl	80015e8 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 80012c6:	f000 f9e7 	bl	8001698 <MX_SPI2_Init>
  MX_FATFS_Init();
 80012ca:	f00c fbbb 	bl	800da44 <MX_FATFS_Init>
  MX_UART7_Init();
 80012ce:	f000 fa53 	bl	8001778 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80012d2:	f015 f9bb 	bl	801664c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012d6:	f011 f977 	bl	80125c8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Sensor Board 1 Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <main+0x1a8>)
 80012dc:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80012e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 80012e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ea:	4618      	mov	r0, r3
 80012ec:	f011 fb3e 	bl	801296c <osMutexNew>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b51      	ldr	r3, [pc, #324]	; (8001438 <main+0x1ac>)
 80012f4:	601a      	str	r2, [r3, #0]

   /* Sensor Board 2 Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <main+0x1b0>)
 80012f8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8001302:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001306:	4618      	mov	r0, r3
 8001308:	f011 fb30 	bl	801296c <osMutexNew>
 800130c:	4602      	mov	r2, r0
 800130e:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <main+0x1b4>)
 8001310:	601a      	str	r2, [r3, #0]

    /* Sensor Board 3 Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <main+0x1b8>)
 8001314:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 800131e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001322:	4618      	mov	r0, r3
 8001324:	f011 fb22 	bl	801296c <osMutexNew>
 8001328:	4602      	mov	r2, r0
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <main+0x1bc>)
 800132c:	601a      	str	r2, [r3, #0]

     /* State Estimation Output Mutex */
      const osMutexAttr_t state_est_mutex_attr = {
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <main+0x1c0>)
 8001330:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        osMutexPrioInherit,    					 // attr_bits
        NULL,                                     // memory for control block
        0U                                        // size for control block
      };

      state_est_mutex = osMutexNew(&state_est_mutex_attr);
 800133a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133e:	4618      	mov	r0, r3
 8001340:	f011 fb14 	bl	801296c <osMutexNew>
 8001344:	4602      	mov	r2, r0
 8001346:	4b42      	ldr	r3, [pc, #264]	; (8001450 <main+0x1c4>)
 8001348:	601a      	str	r2, [r3, #0]

      /* Controller Output Mutex */
       const osMutexAttr_t controller_mutex_attr = {
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <main+0x1c8>)
 800134c:	f107 0420 	add.w	r4, r7, #32
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         osMutexPrioInherit,    					 // attr_bits
         NULL,                                     // memory for control block
         0U                                        // size for control block
       };

       controller_mutex = osMutexNew(&controller_mutex_attr);
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4618      	mov	r0, r3
 800135c:	f011 fb06 	bl	801296c <osMutexNew>
 8001360:	4602      	mov	r2, r0
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <main+0x1cc>)
 8001364:	601a      	str	r2, [r3, #0]

      /* FSM Output Mutex */
       const osMutexAttr_t fsm_mutex_attr = {
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <main+0x1d0>)
 8001368:	f107 0410 	add.w	r4, r7, #16
 800136c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         osMutexPrioInherit,    					 // attr_bits
         NULL,                                     // memory for control block
         0U                                        // size for control block
       };

       fsm_mutex = osMutexNew(&fsm_mutex_attr);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4618      	mov	r0, r3
 8001378:	f011 faf8 	bl	801296c <osMutexNew>
 800137c:	4602      	mov	r2, r0
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <main+0x1d4>)
 8001380:	601a      	str	r2, [r3, #0]

       /* Environment Mutex */
        const osMutexAttr_t environment_mutex_attr = {
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <main+0x1d8>)
 8001384:	463c      	mov	r4, r7
 8001386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          osMutexPrioInherit,    					 // attr_bits
          NULL,                                     // memory for control block
          0U                                        // size for control block
        };

        environment_mutex = osMutexNew(&environment_mutex_attr);
 800138c:	463b      	mov	r3, r7
 800138e:	4618      	mov	r0, r3
 8001390:	f011 faec 	bl	801296c <osMutexNew>
 8001394:	4602      	mov	r2, r0
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <main+0x1dc>)
 8001398:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800139a:	2200      	movs	r2, #0
 800139c:	2196      	movs	r1, #150	; 0x96
 800139e:	2080      	movs	r0, #128	; 0x80
 80013a0:	f011 fdee 	bl	8012f80 <osMessageQueueNew>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <main+0x1e0>)
 80013a8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013aa:	4a31      	ldr	r2, [pc, #196]	; (8001470 <main+0x1e4>)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4831      	ldr	r0, [pc, #196]	; (8001474 <main+0x1e8>)
 80013b0:	f011 f9c8 	bl	8012744 <osThreadNew>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <main+0x1ec>)
 80013b8:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 80013ba:	4a30      	ldr	r2, [pc, #192]	; (800147c <main+0x1f0>)
 80013bc:	2100      	movs	r1, #0
 80013be:	4830      	ldr	r0, [pc, #192]	; (8001480 <main+0x1f4>)
 80013c0:	f011 f9c0 	bl	8012744 <osThreadNew>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <main+0x1f8>)
 80013c8:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80013ca:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <main+0x1fc>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	482f      	ldr	r0, [pc, #188]	; (800148c <main+0x200>)
 80013d0:	f011 f9b8 	bl	8012744 <osThreadNew>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <main+0x204>)
 80013d8:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80013da:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <main+0x208>)
 80013dc:	2100      	movs	r1, #0
 80013de:	482e      	ldr	r0, [pc, #184]	; (8001498 <main+0x20c>)
 80013e0:	f011 f9b0 	bl	8012744 <osThreadNew>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <main+0x210>)
 80013e8:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80013ea:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <main+0x214>)
 80013ec:	2100      	movs	r1, #0
 80013ee:	482d      	ldr	r0, [pc, #180]	; (80014a4 <main+0x218>)
 80013f0:	f011 f9a8 	bl	8012744 <osThreadNew>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <main+0x21c>)
 80013f8:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <main+0x220>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	482c      	ldr	r0, [pc, #176]	; (80014b0 <main+0x224>)
 8001400:	f011 f9a0 	bl	8012744 <osThreadNew>
 8001404:	4602      	mov	r2, r0
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <main+0x228>)
 8001408:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <main+0x22c>)
 800140c:	2100      	movs	r1, #0
 800140e:	482b      	ldr	r0, [pc, #172]	; (80014bc <main+0x230>)
 8001410:	f011 f998 	bl	8012744 <osThreadNew>
 8001414:	4602      	mov	r2, r0
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <main+0x234>)
 8001418:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800141a:	f011 f92b 	bl	8012674 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800141e:	e7fe      	b.n	800141e <main+0x192>
 8001420:	e0042000 	.word	0xe0042000
 8001424:	07e01bff 	.word	0x07e01bff
 8001428:	00070003 	.word	0x00070003
 800142c:	2000030c 	.word	0x2000030c
 8001430:	2000031c 	.word	0x2000031c
 8001434:	08019dc8 	.word	0x08019dc8
 8001438:	2000aac0 	.word	0x2000aac0
 800143c:	08019de4 	.word	0x08019de4
 8001440:	20014dc8 	.word	0x20014dc8
 8001444:	08019e00 	.word	0x08019e00
 8001448:	2000ab24 	.word	0x2000ab24
 800144c:	08019e20 	.word	0x08019e20
 8001450:	2000ab28 	.word	0x2000ab28
 8001454:	08019e44 	.word	0x08019e44
 8001458:	2000aab4 	.word	0x2000aab4
 800145c:	08019e60 	.word	0x08019e60
 8001460:	2000887c 	.word	0x2000887c
 8001464:	08019e84 	.word	0x08019e84
 8001468:	200089c4 	.word	0x200089c4
 800146c:	20010ca8 	.word	0x20010ca8
 8001470:	0801a314 	.word	0x0801a314
 8001474:	08001911 	.word	0x08001911
 8001478:	20008878 	.word	0x20008878
 800147c:	0801a338 	.word	0x0801a338
 8001480:	08004169 	.word	0x08004169
 8001484:	2000aabc 	.word	0x2000aabc
 8001488:	0801a35c 	.word	0x0801a35c
 800148c:	08003061 	.word	0x08003061
 8001490:	20014dc4 	.word	0x20014dc4
 8001494:	0801a380 	.word	0x0801a380
 8001498:	08003fb5 	.word	0x08003fb5
 800149c:	20008a4c 	.word	0x20008a4c
 80014a0:	0801a3a4 	.word	0x0801a3a4
 80014a4:	08003c21 	.word	0x08003c21
 80014a8:	20008964 	.word	0x20008964
 80014ac:	0801a3c8 	.word	0x0801a3c8
 80014b0:	08003795 	.word	0x08003795
 80014b4:	2000aab8 	.word	0x2000aab8
 80014b8:	0801a3ec 	.word	0x0801a3ec
 80014bc:	080033f1 	.word	0x080033f1
 80014c0:	2000aac4 	.word	0x2000aac4

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0b4      	sub	sp, #208	; 0xd0
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f015 fe41 	bl	801715a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2284      	movs	r2, #132	; 0x84
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f015 fe32 	bl	801715a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <SystemClock_Config+0x118>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a38      	ldr	r2, [pc, #224]	; (80015dc <SystemClock_Config+0x118>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <SystemClock_Config+0x118>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <SystemClock_Config+0x11c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <SystemClock_Config+0x11c>)
 8001518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <SystemClock_Config+0x11c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152a:	2301      	movs	r3, #1
 800152c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001546:	2304      	movs	r3, #4
 8001548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 800154c:	23a8      	movs	r3, #168	; 0xa8
 800154e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001558:	2307      	movs	r3, #7
 800155a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fe7a 	bl	800725c <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800156e:	f000 f9eb 	bl	8001948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001594:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001598:	2105      	movs	r1, #5
 800159a:	4618      	mov	r0, r3
 800159c:	f006 f902 	bl	80077a4 <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80015a6:	f000 f9cf 	bl	8001948 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <SystemClock_Config+0x120>)
 80015ac:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fb18 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80015ce:	f000 f9bb 	bl	8001948 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	37d0      	adds	r7, #208	; 0xd0
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000
 80015e4:	00a01000 	.word	0x00a01000

080015e8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <MX_SDMMC1_SD_Init+0x3c>)
 80015f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <MX_SDMMC1_SD_Init+0x38>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	200089c8 	.word	0x200089c8
 8001624:	40012c00 	.word	0x40012c00

08001628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_SPI1_Init+0x68>)
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <MX_SPI1_Init+0x6c>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_SPI1_Init+0x68>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_SPI1_Init+0x68>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_SPI1_Init+0x68>)
 8001640:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_SPI1_Init+0x68>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_SPI1_Init+0x68>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_SPI1_Init+0x68>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <MX_SPI1_Init+0x68>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI1_Init+0x68>)
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <MX_SPI1_Init+0x68>)
 8001666:	2200      	movs	r2, #0
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI1_Init+0x68>)
 800166c:	2207      	movs	r2, #7
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <MX_SPI1_Init+0x68>)
 8001672:	2200      	movs	r2, #0
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI1_Init+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_SPI1_Init+0x68>)
 800167e:	f008 f967 	bl	8009950 <HAL_SPI_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001688:	f000 f95e 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20010c44 	.word	0x20010c44
 8001694:	40013000 	.word	0x40013000

08001698 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_SPI2_Init+0x68>)
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <MX_SPI2_Init+0x6c>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_SPI2_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_SPI2_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI2_Init+0x68>)
 80016b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_SPI2_Init+0x68>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_SPI2_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI2_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <MX_SPI2_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI2_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_SPI2_Init+0x68>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI2_Init+0x68>)
 80016dc:	2207      	movs	r2, #7
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_SPI2_Init+0x68>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI2_Init+0x68>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_SPI2_Init+0x68>)
 80016ee:	f008 f92f 	bl	8009950 <HAL_SPI_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80016f8:	f000 f926 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20008880 	.word	0x20008880
 8001704:	40003800 	.word	0x40003800

08001708 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_SPI3_Init+0x68>)
 800170e:	4a19      	ldr	r2, [pc, #100]	; (8001774 <MX_SPI3_Init+0x6c>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_SPI3_Init+0x68>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_SPI3_Init+0x68>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_SPI3_Init+0x68>)
 8001720:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001724:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_SPI3_Init+0x68>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_SPI3_Init+0x68>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_SPI3_Init+0x68>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_SPI3_Init+0x68>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_SPI3_Init+0x68>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_SPI3_Init+0x68>)
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_SPI3_Init+0x68>)
 800174c:	2207      	movs	r2, #7
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_SPI3_Init+0x68>)
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_SPI3_Init+0x68>)
 8001758:	2200      	movs	r2, #0
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_SPI3_Init+0x68>)
 800175e:	f008 f8f7 	bl	8009950 <HAL_SPI_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001768:	f000 f8ee 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000aa50 	.word	0x2000aa50
 8001774:	40003c00 	.word	0x40003c00

08001778 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_UART7_Init+0x68>)
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <MX_UART7_Init+0x6c>)
 8001780:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_UART7_Init+0x68>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_UART7_Init+0x68>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_UART7_Init+0x68>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_UART7_Init+0x68>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_UART7_Init+0x68>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_UART7_Init+0x68>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <MX_UART7_Init+0x68>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_UART7_Init+0x68>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_UART7_Init+0x68>)
 80017b6:	2230      	movs	r2, #48	; 0x30
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_UART7_Init+0x68>)
 80017bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
  huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_UART7_Init+0x68>)
 80017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_UART7_Init+0x68>)
 80017cc:	f009 f978 	bl	800aac0 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_UART7_Init+0x62>
  {
    Error_Handler();
 80017d6:	f000 f8b7 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200088e4 	.word	0x200088e4
 80017e4:	40007800 	.word	0x40007800

080017e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_DMA_Init+0x48>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <MX_DMA_Init+0x48>)
 80017f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_DMA_Init+0x48>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	203b      	movs	r0, #59	; 0x3b
 800180c:	f003 fdbc 	bl	8005388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001810:	203b      	movs	r0, #59	; 0x3b
 8001812:	f003 fdd5 	bl	80053c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2105      	movs	r1, #5
 800181a:	2045      	movs	r0, #69	; 0x45
 800181c:	f003 fdb4 	bl	8005388 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001820:	2045      	movs	r0, #69	; 0x45
 8001822:	f003 fdcd 	bl	80053c0 <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <MX_GPIO_Init+0xd4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a2e      	ldr	r2, [pc, #184]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a28      	ldr	r2, [pc, #160]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <MX_GPIO_Init+0xd4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a22      	ldr	r2, [pc, #136]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <MX_GPIO_Init+0xd4>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_GPIO_Init+0xd4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_GPIO_Init+0xd4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a16      	ldr	r2, [pc, #88]	; (8001908 <MX_GPIO_Init+0xd4>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_GPIO_Init+0xd4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_GPIO_Init+0xd4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <MX_GPIO_Init+0xd4>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_GPIO_Init+0xd4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2108      	movs	r1, #8
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <MX_GPIO_Init+0xd8>)
 80018e0:	f004 faca 	bl	8005e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018e4:	2308      	movs	r3, #8
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_GPIO_Init+0xd8>)
 80018fc:	f004 f912 	bl	8005b24 <HAL_GPIO_Init>

}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40020800 	.word	0x40020800

08001910 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001918:	f014 fe98 	bl	801664c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800191c:	2001      	movs	r0, #1
 800191e:	f010 ffb7 	bl	8012890 <osDelay>
 8001922:	e7fb      	b.n	800191c <StartDefaultTask+0xc>

08001924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001936:	f003 fc2d 	bl	8005194 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40010000 	.word	0x40010000

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <eye>:
#include "math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8001956:	b490      	push	{r4, r7}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	1e43      	subs	r3, r0, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	f04f 0400 	mov.w	r4, #0
 8001976:	0154      	lsls	r4, r2, #5
 8001978:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800197c:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e02b      	b.n	80019dc <eye+0x86>
        for(int j = 0; j < dim; j++){
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e021      	b.n	80019ce <eye+0x78>
            if (i == j){
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	429a      	cmp	r2, r3
 8001990:	d10d      	bne.n	80019ae <eye+0x58>
				A[i][j] = 1;
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	fb03 f302 	mul.w	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	441a      	add	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e00c      	b.n	80019c8 <eye+0x72>
			} else {
				A[i][j] = 0;
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	fb03 f302 	mul.w	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	441a      	add	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dbd9      	blt.n	800198a <eye+0x34>
	for(int i = 0; i < dim; i++){
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	3301      	adds	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbcf      	blt.n	8001984 <eye+0x2e>
			}
        }
    }
}
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc90      	pop	{r4, r7}
 80019ec:	4770      	bx	lr

080019ee <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 80019ee:	b4b0      	push	{r4, r5, r7}
 80019f0:	b089      	sub	sp, #36	; 0x24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	1e43      	subs	r3, r0, #1
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4603      	mov	r3, r0
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	f04f 0400 	mov.w	r4, #0
 8001a12:	0154      	lsls	r4, r2, #5
 8001a14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a18:	014b      	lsls	r3, r1, #5
 8001a1a:	68fd      	ldr	r5, [r7, #12]
 8001a1c:	1e6b      	subs	r3, r5, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	462b      	mov	r3, r5
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	f04f 0400 	mov.w	r4, #0
 8001a30:	0154      	lsls	r4, r2, #5
 8001a32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a36:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	e022      	b.n	8001a84 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e018      	b.n	8001a76 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8001a44:	4602      	mov	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	fb03 f302 	mul.w	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	441a      	add	r2, r3
 8001a52:	4629      	mov	r1, r5
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	fb03 f301 	mul.w	r3, r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	4419      	add	r1, r3
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3301      	adds	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbe2      	blt.n	8001a44 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbd8      	blt.n	8001a3e <transpose+0x50>
		}
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3724      	adds	r7, #36	; 0x24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bcb0      	pop	{r4, r5, r7}
 8001a94:	4770      	bx	lr

08001a96 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e016      	b.n	8001ad8 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	ed93 7a00 	vldr	s14, [r3]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbe4      	blt.n	8001aaa <vecadd+0x14>
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e016      	b.n	8001b2e <vecsub+0x42>
		c[i] = a[i] - b[i];
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b24:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbe4      	blt.n	8001b00 <vecsub+0x14>
	}
}
 8001b36:	bf00      	nop
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <matadd>:

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8001b42:	b4f0      	push	{r4, r5, r6, r7}
 8001b44:	b08a      	sub	sp, #40	; 0x28
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	1e43      	subs	r3, r0, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	4603      	mov	r3, r0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f04f 0400 	mov.w	r4, #0
 8001b66:	0154      	lsls	r4, r2, #5
 8001b68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b6c:	014b      	lsls	r3, r1, #5
 8001b6e:	68bd      	ldr	r5, [r7, #8]
 8001b70:	1e6b      	subs	r3, r5, #1
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	462b      	mov	r3, r5
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	f04f 0400 	mov.w	r4, #0
 8001b84:	0154      	lsls	r4, r2, #5
 8001b86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b8a:	014b      	lsls	r3, r1, #5
 8001b8c:	68be      	ldr	r6, [r7, #8]
 8001b8e:	1e73      	subs	r3, r6, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	4633      	mov	r3, r6
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	0154      	lsls	r4, r2, #5
 8001ba4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ba8:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e032      	b.n	8001c16 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	e028      	b.n	8001c08 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	fb03 f302 	mul.w	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	ed93 7a00 	vldr	s14, [r3]
 8001bce:	462a      	mov	r2, r5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	fb03 f302 	mul.w	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	441a      	add	r2, r3
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	4632      	mov	r2, r6
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	fb03 f302 	mul.w	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bf2:	441a      	add	r2, r3
 8001bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	3301      	adds	r3, #1
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	6a3a      	ldr	r2, [r7, #32]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbd2      	blt.n	8001bb6 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	3301      	adds	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbc8      	blt.n	8001bb0 <matadd+0x6e>
        }
    }
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bcf0      	pop	{r4, r5, r6, r7}
 8001c26:	4770      	bx	lr

08001c28 <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8001c28:	b4f0      	push	{r4, r5, r6, r7}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	68b8      	ldr	r0, [r7, #8]
 8001c38:	1e43      	subs	r3, r0, #1
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	f04f 0400 	mov.w	r4, #0
 8001c4c:	0154      	lsls	r4, r2, #5
 8001c4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c52:	014b      	lsls	r3, r1, #5
 8001c54:	68bd      	ldr	r5, [r7, #8]
 8001c56:	1e6b      	subs	r3, r5, #1
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	f04f 0400 	mov.w	r4, #0
 8001c6a:	0154      	lsls	r4, r2, #5
 8001c6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c70:	014b      	lsls	r3, r1, #5
 8001c72:	68be      	ldr	r6, [r7, #8]
 8001c74:	1e73      	subs	r3, r6, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	4633      	mov	r3, r6
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	f04f 0400 	mov.w	r4, #0
 8001c88:	0154      	lsls	r4, r2, #5
 8001c8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c8e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	e032      	b.n	8001cfc <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	e028      	b.n	8001cee <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fb03 f302 	mul.w	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	441a      	add	r2, r3
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fb03 f302 	mul.w	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	4632      	mov	r2, r6
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fb03 f302 	mul.w	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd8:	441a      	add	r2, r3
 8001cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	3301      	adds	r3, #1
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	6a3a      	ldr	r2, [r7, #32]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbd2      	blt.n	8001c9c <matsub+0x74>
	for(int i = 0; i < m; i++){
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbc8      	blt.n	8001c96 <matsub+0x6e>
        }
    }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d0c:	4770      	bx	lr

08001d0e <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8001d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d10:	b08d      	sub	sp, #52	; 0x34
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6178      	str	r0, [r7, #20]
 8001d16:	6139      	str	r1, [r7, #16]
 8001d18:	60fa      	str	r2, [r7, #12]
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	693e      	ldr	r6, [r7, #16]
 8001d1e:	1e73      	subs	r3, r6, #1
 8001d20:	623b      	str	r3, [r7, #32]
 8001d22:	4633      	mov	r3, r6
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	f04f 0400 	mov.w	r4, #0
 8001d32:	0154      	lsls	r4, r2, #5
 8001d34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d38:	014b      	lsls	r3, r1, #5
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	3b01      	subs	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	4613      	mov	r3, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	f04f 0400 	mov.w	r4, #0
 8001d54:	0154      	lsls	r4, r2, #5
 8001d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d5a:	014b      	lsls	r3, r1, #5
 8001d5c:	68fd      	ldr	r5, [r7, #12]
 8001d5e:	1e6b      	subs	r3, r5, #1
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	462b      	mov	r3, r5
 8001d64:	4619      	mov	r1, r3
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f04f 0400 	mov.w	r4, #0
 8001d72:	0154      	lsls	r4, r2, #5
 8001d74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d78:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001d7a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2100      	movs	r1, #0
 8001d90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d92:	f015 f9e2 	bl	801715a <memset>
	}
	for(int i = 0; i < m; i++){
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	e04a      	b.n	8001e32 <matmul+0x124>
        for(int j = 0; j < o; j++){
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da0:	e040      	b.n	8001e24 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	e036      	b.n	8001e16 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8001da8:	4632      	mov	r2, r6
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	fb03 f302 	mul.w	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	441a      	add	r2, r3
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	ed93 7a00 	vldr	s14, [r3]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc4:	fb03 f302 	mul.w	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dcc:	441a      	add	r2, r3
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	462a      	mov	r2, r5
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fb03 f302 	mul.w	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001de8:	441a      	add	r2, r3
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	462a      	mov	r2, r5
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	fb03 f302 	mul.w	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e00:	441a      	add	r2, r3
 8001e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	3301      	adds	r3, #1
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dbc4      	blt.n	8001da8 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	3301      	adds	r3, #1
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbba      	blt.n	8001da2 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3301      	adds	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dbb0      	blt.n	8001d9c <matmul+0x8e>
            }
        }
    }
}
 8001e3a:	bf00      	nop
 8001e3c:	3734      	adds	r7, #52	; 0x34
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e42 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8001e42:	b5b0      	push	{r4, r5, r7, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	68bd      	ldr	r5, [r7, #8]
 8001e52:	1e6b      	subs	r3, r5, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	462b      	mov	r3, r5
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	f04f 0400 	mov.w	r4, #0
 8001e66:	0154      	lsls	r4, r2, #5
 8001e68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e6c:	014b      	lsls	r3, r1, #5
	if (reset) {
 8001e6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e80:	f015 f96b 	bl	801715a <memset>
	}
	for(int i = 0; i < m; i++){
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	e02e      	b.n	8001ee8 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e024      	b.n	8001eda <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8001e90:	462a      	mov	r2, r5
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	fb03 f302 	mul.w	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ebe:	4413      	add	r3, r2
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eca:	4413      	add	r3, r2
 8001ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	dbd6      	blt.n	8001e90 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbcc      	blt.n	8001e8a <matvecprod+0x48>
        }
    }
}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdb0      	pop	{r4, r5, r7, pc}

08001ef8 <scalarmatprod>:

void scalarmatprod(int m, int n, float scalar, float A[m][n], float B[m][n]) {
 8001ef8:	b4b0      	push	{r4, r5, r7}
 8001efa:	b08b      	sub	sp, #44	; 0x2c
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6178      	str	r0, [r7, #20]
 8001f00:	6139      	str	r1, [r7, #16]
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	6938      	ldr	r0, [r7, #16]
 8001f0c:	1e43      	subs	r3, r0, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	4603      	mov	r3, r0
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	f04f 0400 	mov.w	r4, #0
 8001f20:	0154      	lsls	r4, r2, #5
 8001f22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f26:	014b      	lsls	r3, r1, #5
 8001f28:	693d      	ldr	r5, [r7, #16]
 8001f2a:	1e6b      	subs	r3, r5, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	462b      	mov	r3, r5
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	f04f 0400 	mov.w	r4, #0
 8001f3e:	0154      	lsls	r4, r2, #5
 8001f40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f44:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	e028      	b.n	8001f9e <scalarmatprod+0xa6>
        for(int j = 0; j < n; j++){
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	e01e      	b.n	8001f90 <scalarmatprod+0x98>
            B[i][j] = scalar * A[i][j];
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	fb03 f302 	mul.w	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	441a      	add	r2, r3
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	ed93 7a00 	vldr	s14, [r3]
 8001f6a:	462a      	mov	r2, r5
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	fb03 f302 	mul.w	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	441a      	add	r2, r3
 8001f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	dbdc      	blt.n	8001f52 <scalarmatprod+0x5a>
	for(int i = 0; i < m; i++){
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbd2      	blt.n	8001f4c <scalarmatprod+0x54>
        }
    }
}
 8001fa6:	bf00      	nop
 8001fa8:	372c      	adds	r7, #44	; 0x2c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bcb0      	pop	{r4, r5, r7}
 8001fae:	4770      	bx	lr

08001fb0 <cofactor>:
}

/* Function to get cofactor of A[p][q] in temp[][]. n is current dimension of A[][] */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
void cofactor(int dim, float A[dim][dim], float temp[dim][dim], int p, int q, int n)
{
 8001fb0:	b4b0      	push	{r4, r5, r7}
 8001fb2:	b08b      	sub	sp, #44	; 0x2c
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
void cofactor(int dim, float A[dim][dim], float temp[dim][dim], int p, int q, int n)
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	1e43      	subs	r3, r0, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	f04f 0400 	mov.w	r4, #0
 8001fd4:	0154      	lsls	r4, r2, #5
 8001fd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fda:	014b      	lsls	r3, r1, #5
 8001fdc:	68fd      	ldr	r5, [r7, #12]
 8001fde:	1e6b      	subs	r3, r5, #1
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	f04f 0400 	mov.w	r4, #0
 8001ff2:	0154      	lsls	r4, r2, #5
 8001ff4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ff8:	014b      	lsls	r3, r1, #5
    int i = 0, j = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24

    // Looping for each element of the matrix
    for (int row = 0; row < n; row++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e036      	b.n	8002076 <cofactor+0xc6>
    {
        for (int col = 0; col < n; col++)
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e02c      	b.n	8002068 <cofactor+0xb8>
        {
            //  Copying into temporary matrix only those element
            //  which are not in given row and column
            if (row != p && col != q)
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d025      	beq.n	8002062 <cofactor+0xb2>
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201a:	429a      	cmp	r2, r3
 800201c:	d021      	beq.n	8002062 <cofactor+0xb2>
            {
                temp[i][j++] = A[row][col];
 800201e:	4602      	mov	r2, r0
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	fb03 f302 	mul.w	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	18d4      	adds	r4, r2, r3
 800202c:	462a      	mov	r2, r5
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	fb03 f302 	mul.w	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	18d1      	adds	r1, r2, r3
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	627a      	str	r2, [r7, #36]	; 0x24
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4422      	add	r2, r4
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	601a      	str	r2, [r3, #0]

                // Row is filled, so increase row index and
                // reset col index
                if (j == n - 1)
 800204e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002050:	3b01      	subs	r3, #1
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	429a      	cmp	r2, r3
 8002056:	d104      	bne.n	8002062 <cofactor+0xb2>
                {
                    j = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
                    i++;
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	3301      	adds	r3, #1
 8002060:	623b      	str	r3, [r7, #32]
        for (int col = 0; col < n; col++)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	3301      	adds	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206c:	429a      	cmp	r2, r3
 800206e:	dbce      	blt.n	800200e <cofactor+0x5e>
    for (int row = 0; row < n; row++)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3301      	adds	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	429a      	cmp	r2, r3
 800207c:	dbc4      	blt.n	8002008 <cofactor+0x58>
                }
            }
        }
    }
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bcb0      	pop	{r4, r5, r7}
 8002086:	4770      	bx	lr

08002088 <determinant>:

/* Recursive function for finding determinant of matrix. n is current dimension of A[][]. */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
float determinant(int dim, float A[dim][dim], int n)
{
 8002088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800208c:	ed2d 8b02 	vpush	{d8}
 8002090:	b08e      	sub	sp, #56	; 0x38
 8002092:	af02      	add	r7, sp, #8
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
float determinant(int dim, float A[dim][dim], int n)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e5a      	subs	r2, r3, #1
 800209e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f04f 0400 	mov.w	r4, #0
 80020ae:	0154      	lsls	r4, r2, #5
 80020b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020b4:	014b      	lsls	r3, r1, #5
{
 80020b6:	466b      	mov	r3, sp
 80020b8:	4698      	mov	r8, r3
    float D = 0; // Initialize result
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	623b      	str	r3, [r7, #32]

    //  Base case : if matrix contains single element
    if (n == 1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <determinant+0x44>
        return A[0][0];
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e089      	b.n	80021e0 <determinant+0x158>

    float temp[dim][dim]; // To store cofactors
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	68fd      	ldr	r5, [r7, #12]
 80020d0:	1e43      	subs	r3, r0, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	4603      	mov	r3, r0
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	f04f 0400 	mov.w	r4, #0
 80020e4:	0154      	lsls	r4, r2, #5
 80020e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020ea:	014b      	lsls	r3, r1, #5
 80020ec:	1e6b      	subs	r3, r5, #1
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	4603      	mov	r3, r0
 80020f2:	4619      	mov	r1, r3
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	462b      	mov	r3, r5
 80020fa:	f04f 0400 	mov.w	r4, #0
 80020fe:	fb03 fc02 	mul.w	ip, r3, r2
 8002102:	fb01 f604 	mul.w	r6, r1, r4
 8002106:	4466      	add	r6, ip
 8002108:	fba1 3403 	umull	r3, r4, r1, r3
 800210c:	1932      	adds	r2, r6, r4
 800210e:	4614      	mov	r4, r2
 8002110:	f04f 0100 	mov.w	r1, #0
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	0162      	lsls	r2, r4, #5
 800211a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	4603      	mov	r3, r0
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	462b      	mov	r3, r5
 800212a:	f04f 0400 	mov.w	r4, #0
 800212e:	fb03 fc02 	mul.w	ip, r3, r2
 8002132:	fb01 f604 	mul.w	r6, r1, r4
 8002136:	4466      	add	r6, ip
 8002138:	fba1 3403 	umull	r3, r4, r1, r3
 800213c:	1932      	adds	r2, r6, r4
 800213e:	4614      	mov	r4, r2
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	0162      	lsls	r2, r4, #5
 800214a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800214e:	0159      	lsls	r1, r3, #5
 8002150:	4603      	mov	r3, r0
 8002152:	462a      	mov	r2, r5
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	3303      	adds	r3, #3
 800215c:	3307      	adds	r3, #7
 800215e:	08db      	lsrs	r3, r3, #3
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	ebad 0d03 	sub.w	sp, sp, r3
 8002166:	ab02      	add	r3, sp, #8
 8002168:	3303      	adds	r3, #3
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	617b      	str	r3, [r7, #20]

    int sign = 1;  // To store sign multiplier
 8002170:	2301      	movs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

     // Iterate for each element of first row
    for (int f = 0; f < n; f++)
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
 8002178:	e02d      	b.n	80021d6 <determinant+0x14e>
    {
        // Getting Cofactor of A[0][f]
        cofactor(dim, A, temp, 0, f, n);
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2300      	movs	r3, #0
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff ff11 	bl	8001fb0 <cofactor>
        D += sign * A[0][f] * determinant(dim, temp, n - 1);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	461a      	mov	r2, r3
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7ff ff69 	bl	8002088 <determinant>
 80021b6:	eef0 7a40 	vmov.f32	s15, s0
 80021ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80021be:	ed97 7a08 	vldr	s14, [r7, #32]
 80021c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c6:	edc7 7a08 	vstr	s15, [r7, #32]

        // terms are to be added with alternate sign
        sign = -sign;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	425b      	negs	r3, r3
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    for (int f = 0; f < n; f++)
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	3301      	adds	r3, #1
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbcd      	blt.n	800217a <determinant+0xf2>
    }

    return D;
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	46c5      	mov	sp, r8
 80021e2:	ee07 3a90 	vmov	s15, r3
}
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	ecbd 8b02 	vpop	{d8}
 80021f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021f6 <adjoint>:

/* Function to get adjoint of A[dim][dim] in adj[dim][dim]. */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
void adjoint(int dim, float A[dim][dim], float adj[dim][dim])
{
 80021f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fa:	ed2d 8b02 	vpush	{d8}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
void adjoint(int dim, float A[dim][dim], float adj[dim][dim])
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	62ba      	str	r2, [r7, #40]	; 0x28
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	0154      	lsls	r4, r2, #5
 800221e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002222:	014b      	lsls	r3, r1, #5
 8002224:	68fe      	ldr	r6, [r7, #12]
 8002226:	1e73      	subs	r3, r6, #1
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	4633      	mov	r3, r6
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f04f 0400 	mov.w	r4, #0
 800223a:	0154      	lsls	r4, r2, #5
 800223c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002240:	014b      	lsls	r3, r1, #5
{
 8002242:	466b      	mov	r3, sp
 8002244:	4698      	mov	r8, r3
    if (dim == 1)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <adjoint+0x64>
    {
        adj[0][0] = 1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002252:	601a      	str	r2, [r3, #0]
        return;
 8002254:	bf00      	nop
 8002256:	46c5      	mov	sp, r8
 8002258:	e09c      	b.n	8002394 <adjoint+0x19e>
    }

    // temp is used to store cofactors of A[][]
    int sign = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
	float temp[dim][dim];
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	68fd      	ldr	r5, [r7, #12]
 8002262:	1e43      	subs	r3, r0, #1
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	4603      	mov	r3, r0
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	f04f 0400 	mov.w	r4, #0
 8002276:	0154      	lsls	r4, r2, #5
 8002278:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800227c:	014b      	lsls	r3, r1, #5
 800227e:	1e6b      	subs	r3, r5, #1
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	4603      	mov	r3, r0
 8002284:	4619      	mov	r1, r3
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	462b      	mov	r3, r5
 800228c:	f04f 0400 	mov.w	r4, #0
 8002290:	fb03 fe02 	mul.w	lr, r3, r2
 8002294:	fb01 fc04 	mul.w	ip, r1, r4
 8002298:	44f4      	add	ip, lr
 800229a:	fba1 3403 	umull	r3, r4, r1, r3
 800229e:	eb0c 0204 	add.w	r2, ip, r4
 80022a2:	4614      	mov	r4, r2
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	0162      	lsls	r2, r4, #5
 80022ae:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	4603      	mov	r3, r0
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	462b      	mov	r3, r5
 80022be:	f04f 0400 	mov.w	r4, #0
 80022c2:	fb03 fe02 	mul.w	lr, r3, r2
 80022c6:	fb01 fc04 	mul.w	ip, r1, r4
 80022ca:	44f4      	add	ip, lr
 80022cc:	fba1 3403 	umull	r3, r4, r1, r3
 80022d0:	eb0c 0204 	add.w	r2, ip, r4
 80022d4:	4614      	mov	r4, r2
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	0162      	lsls	r2, r4, #5
 80022e0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80022e4:	0159      	lsls	r1, r3, #5
 80022e6:	4603      	mov	r3, r0
 80022e8:	462a      	mov	r2, r5
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3303      	adds	r3, #3
 80022f2:	3307      	adds	r3, #7
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	ebad 0d03 	sub.w	sp, sp, r3
 80022fc:	ab02      	add	r3, sp, #8
 80022fe:	3303      	adds	r3, #3
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	613b      	str	r3, [r7, #16]

    for (int i=0; i<dim; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	e03e      	b.n	800238a <adjoint+0x194>
    {
        for (int j=0; j<dim; j++)
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	e034      	b.n	800237c <adjoint+0x186>
        {
            // Get cofactor of A[i][j]
            cofactor(dim, A, temp, i, j, dim);
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff fe45 	bl	8001fb0 <cofactor>

            // sign of adj[j][i] positive if sum of row
            // and column indexes is even.
            sign = ((i+j)%2==0)? 1: -1;
 8002326:	6a3a      	ldr	r2, [r7, #32]
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	4413      	add	r3, r2
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <adjoint+0x142>
 8002334:	2301      	movs	r3, #1
 8002336:	e001      	b.n	800233c <adjoint+0x146>
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	61fb      	str	r3, [r7, #28]

            // Interchanging rows and columns to get the
            // transpose of the cofactor matrix
            adj[j][i] = (sign)*(determinant(dim, temp, dim-1));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002348:	6939      	ldr	r1, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3b01      	subs	r3, #1
 800234e:	461a      	mov	r2, r3
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff fe99 	bl	8002088 <determinant>
 8002356:	eef0 7a40 	vmov.f32	s15, s0
 800235a:	4632      	mov	r2, r6
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	fb03 f302 	mul.w	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	441a      	add	r2, r3
 8002368:	ee68 7a27 	vmul.f32	s15, s16, s15
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<dim; j++)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	3301      	adds	r3, #1
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbc6      	blt.n	8002312 <adjoint+0x11c>
    for (int i=0; i<dim; i++)
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	3301      	adds	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
 800238a:	6a3a      	ldr	r2, [r7, #32]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	dbbc      	blt.n	800230c <adjoint+0x116>
 8002392:	46c5      	mov	sp, r8
        }
    }
}
 8002394:	3730      	adds	r7, #48	; 0x30
 8002396:	46bd      	mov	sp, r7
 8002398:	ecbd 8b02 	vpop	{d8}
 800239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080023a0 <inverse>:

/* Function to calculate and store inverse, returns false if matrix is singular */
/* https://www.geeksforgeeks.org/adjoint-inverse-matrix/ */
bool inverse(int dim, float A[dim][dim], float A_inv[dim][dim], float lambda)
{
 80023a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023a4:	b095      	sub	sp, #84	; 0x54
 80023a6:	af02      	add	r7, sp, #8
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	ed87 0a00 	vstr	s0, [r7]
bool inverse(int dim, float A[dim][dim], float A_inv[dim][dim], float lambda)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80023b8:	4619      	mov	r1, r3
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	f04f 0400 	mov.w	r4, #0
 80023c6:	0154      	lsls	r4, r2, #5
 80023c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023cc:	014b      	lsls	r3, r1, #5
 80023ce:	68fe      	ldr	r6, [r7, #12]
 80023d0:	1e73      	subs	r3, r6, #1
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d4:	4633      	mov	r3, r6
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	0154      	lsls	r4, r2, #5
 80023e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023ea:	014b      	lsls	r3, r1, #5
{
 80023ec:	466b      	mov	r3, sp
 80023ee:	4699      	mov	r9, r3
	/* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[dim][dim];
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	68fd      	ldr	r5, [r7, #12]
 80023f4:	1e43      	subs	r3, r0, #1
 80023f6:	643b      	str	r3, [r7, #64]	; 0x40
 80023f8:	4603      	mov	r3, r0
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	f04f 0400 	mov.w	r4, #0
 8002408:	0154      	lsls	r4, r2, #5
 800240a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800240e:	014b      	lsls	r3, r1, #5
 8002410:	1e6b      	subs	r3, r5, #1
 8002412:	647b      	str	r3, [r7, #68]	; 0x44
 8002414:	4603      	mov	r3, r0
 8002416:	4619      	mov	r1, r3
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	462b      	mov	r3, r5
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	fb03 fe02 	mul.w	lr, r3, r2
 8002426:	fb01 fc04 	mul.w	ip, r1, r4
 800242a:	44f4      	add	ip, lr
 800242c:	fba1 3403 	umull	r3, r4, r1, r3
 8002430:	eb0c 0204 	add.w	r2, ip, r4
 8002434:	4614      	mov	r4, r2
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	0162      	lsls	r2, r4, #5
 8002440:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002444:	0159      	lsls	r1, r3, #5
 8002446:	4603      	mov	r3, r0
 8002448:	4619      	mov	r1, r3
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	462b      	mov	r3, r5
 8002450:	f04f 0400 	mov.w	r4, #0
 8002454:	fb03 fe02 	mul.w	lr, r3, r2
 8002458:	fb01 fc04 	mul.w	ip, r1, r4
 800245c:	44f4      	add	ip, lr
 800245e:	fba1 3403 	umull	r3, r4, r1, r3
 8002462:	eb0c 0204 	add.w	r2, ip, r4
 8002466:	4614      	mov	r4, r2
 8002468:	f04f 0100 	mov.w	r1, #0
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	0162      	lsls	r2, r4, #5
 8002472:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	4603      	mov	r3, r0
 800247a:	462a      	mov	r2, r5
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	3303      	adds	r3, #3
 8002484:	3307      	adds	r3, #7
 8002486:	08db      	lsrs	r3, r3, #3
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	ebad 0d03 	sub.w	sp, sp, r3
 800248e:	ab02      	add	r3, sp, #8
 8002490:	3303      	adds	r3, #3
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lambda_diag[dim][dim];
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	68fd      	ldr	r5, [r7, #12]
 800249c:	1e43      	subs	r3, r0, #1
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	f04f 0400 	mov.w	r4, #0
 80024b0:	0154      	lsls	r4, r2, #5
 80024b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024b6:	014b      	lsls	r3, r1, #5
 80024b8:	1e6b      	subs	r3, r5, #1
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
 80024bc:	4603      	mov	r3, r0
 80024be:	4619      	mov	r1, r3
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	462b      	mov	r3, r5
 80024c6:	f04f 0400 	mov.w	r4, #0
 80024ca:	fb03 fe02 	mul.w	lr, r3, r2
 80024ce:	fb01 fc04 	mul.w	ip, r1, r4
 80024d2:	44f4      	add	ip, lr
 80024d4:	fba1 3403 	umull	r3, r4, r1, r3
 80024d8:	eb0c 0204 	add.w	r2, ip, r4
 80024dc:	4614      	mov	r4, r2
 80024de:	f04f 0100 	mov.w	r1, #0
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	0162      	lsls	r2, r4, #5
 80024e8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80024ec:	0159      	lsls	r1, r3, #5
 80024ee:	4603      	mov	r3, r0
 80024f0:	4619      	mov	r1, r3
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	462b      	mov	r3, r5
 80024f8:	f04f 0400 	mov.w	r4, #0
 80024fc:	fb03 fe02 	mul.w	lr, r3, r2
 8002500:	fb01 fc04 	mul.w	ip, r1, r4
 8002504:	44f4      	add	ip, lr
 8002506:	fba1 3403 	umull	r3, r4, r1, r3
 800250a:	eb0c 0204 	add.w	r2, ip, r4
 800250e:	4614      	mov	r4, r2
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	0162      	lsls	r2, r4, #5
 800251a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	4603      	mov	r3, r0
 8002522:	462a      	mov	r2, r5
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	3303      	adds	r3, #3
 800252c:	3307      	adds	r3, #7
 800252e:	08db      	lsrs	r3, r3, #3
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	ebad 0d03 	sub.w	sp, sp, r3
 8002536:	ab02      	add	r3, sp, #8
 8002538:	3303      	adds	r3, #3
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	623b      	str	r3, [r7, #32]
	eye(dim, lambda_diag);
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	4619      	mov	r1, r3
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7ff fa06 	bl	8001956 <eye>
	scalarmatprod(dim, dim, lambda, lambda_diag, lambda_diag);
 800254a:	6a3a      	ldr	r2, [r7, #32]
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	ed97 0a00 	vldr	s0, [r7]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff fccf 	bl	8001ef8 <scalarmatprod>
	matadd(dim, dim, A, lambda_diag, A_dash);
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff faeb 	bl	8001b42 <matadd>

    // Find determinant of A[][]
    float det = determinant(dim, A_dash, dim);
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4619      	mov	r1, r3
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fd88 	bl	8002088 <determinant>
 8002578:	ed87 0a07 	vstr	s0, [r7, #28]

    if (det == 0)
 800257c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002580:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d104      	bne.n	8002594 <inverse+0x1f4>
    {
        printf("Singular matrix, can't find its inverse\n");
 800258a:	484c      	ldr	r0, [pc, #304]	; (80026bc <inverse+0x31c>)
 800258c:	f014 fef2 	bl	8017374 <puts>
        return false;
 8002590:	2300      	movs	r3, #0
 8002592:	e08d      	b.n	80026b0 <inverse+0x310>
    }

    // Find adjoint
    float adj[dim][dim];
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	68fd      	ldr	r5, [r7, #12]
 8002598:	1e43      	subs	r3, r0, #1
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	f04f 0400 	mov.w	r4, #0
 80025ac:	0154      	lsls	r4, r2, #5
 80025ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025b2:	014b      	lsls	r3, r1, #5
 80025b4:	4603      	mov	r3, r0
 80025b6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80025ba:	1e6b      	subs	r3, r5, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	4603      	mov	r3, r0
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	462b      	mov	r3, r5
 80025c8:	f04f 0400 	mov.w	r4, #0
 80025cc:	fb03 fe02 	mul.w	lr, r3, r2
 80025d0:	fb01 fc04 	mul.w	ip, r1, r4
 80025d4:	44f4      	add	ip, lr
 80025d6:	fba1 3403 	umull	r3, r4, r1, r3
 80025da:	eb0c 0204 	add.w	r2, ip, r4
 80025de:	4614      	mov	r4, r2
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	0162      	lsls	r2, r4, #5
 80025ea:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	4603      	mov	r3, r0
 80025f2:	4619      	mov	r1, r3
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	462b      	mov	r3, r5
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	fb03 fe02 	mul.w	lr, r3, r2
 8002602:	fb01 fc04 	mul.w	ip, r1, r4
 8002606:	44f4      	add	ip, lr
 8002608:	fba1 3403 	umull	r3, r4, r1, r3
 800260c:	eb0c 0204 	add.w	r2, ip, r4
 8002610:	4614      	mov	r4, r2
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	0162      	lsls	r2, r4, #5
 800261c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002620:	0159      	lsls	r1, r3, #5
 8002622:	4603      	mov	r3, r0
 8002624:	462a      	mov	r2, r5
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	3303      	adds	r3, #3
 800262e:	3307      	adds	r3, #7
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	ebad 0d03 	sub.w	sp, sp, r3
 8002638:	ab02      	add	r3, sp, #8
 800263a:	3303      	adds	r3, #3
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	613b      	str	r3, [r7, #16]
    adjoint(dim, A_dash, adj);
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4619      	mov	r1, r3
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff fdd4 	bl	80021f6 <adjoint>

    // Find Inverse using formula "inverse(A) = adj(A)/det(A)"
    for (int i=0; i<dim; i++) {
 800264e:	2300      	movs	r3, #0
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
 8002652:	e028      	b.n	80026a6 <inverse+0x306>
        for (int j=0; j<dim; j++) {
 8002654:	2300      	movs	r3, #0
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
 8002658:	e01e      	b.n	8002698 <inverse+0x2f8>
            A_inv[i][j] = adj[i][j] / ((float) det);
 800265a:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002662:	fb01 f103 	mul.w	r1, r1, r3
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	440b      	add	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	edd3 6a00 	vldr	s13, [r3]
 8002672:	4632      	mov	r2, r6
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	fb03 f302 	mul.w	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	441a      	add	r2, r3
 8002680:	ed97 7a07 	vldr	s14, [r7, #28]
 8002684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<dim; j++) {
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	3301      	adds	r3, #1
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
 8002698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbdc      	blt.n	800265a <inverse+0x2ba>
    for (int i=0; i<dim; i++) {
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	3301      	adds	r3, #1
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
 80026a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dbd2      	blt.n	8002654 <inverse+0x2b4>
		}
	}

    return true;
 80026ae:	2301      	movs	r3, #1
 80026b0:	46cd      	mov	sp, r9
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	374c      	adds	r7, #76	; 0x4c
 80026b6:	46bd      	mov	sp, r7
 80026b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026bc:	08019e94 	.word	0x08019e94

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_MspInit+0x4c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <HAL_MspInit+0x4c>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <HAL_MspInit+0x4c>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_MspInit+0x4c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_MspInit+0x4c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	210f      	movs	r1, #15
 80026fa:	f06f 0001 	mvn.w	r0, #1
 80026fe:	f002 fe43 	bl	8005388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	; (80028c4 <HAL_SD_MspInit+0x1b4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f040 80c3 	bne.w	80028ba <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 800273a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800273e:	6453      	str	r3, [r2, #68]	; 0x44
 8002740:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800274c:	4b5e      	ldr	r3, [pc, #376]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4a5d      	ldr	r2, [pc, #372]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6313      	str	r3, [r2, #48]	; 0x30
 8002758:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002764:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 800276a:	f043 0308 	orr.w	r3, r3, #8
 800276e:	6313      	str	r3, [r2, #48]	; 0x30
 8002770:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <HAL_SD_MspInit+0x1b8>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800277c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002780:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800278e:	230c      	movs	r3, #12
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	484c      	ldr	r0, [pc, #304]	; (80028cc <HAL_SD_MspInit+0x1bc>)
 800279a:	f003 f9c3 	bl	8005b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800279e:	2304      	movs	r3, #4
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80027ae:	230c      	movs	r3, #12
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4845      	ldr	r0, [pc, #276]	; (80028d0 <HAL_SD_MspInit+0x1c0>)
 80027ba:	f003 f9b3 	bl	8005b24 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80027be:	4b45      	ldr	r3, [pc, #276]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027c0:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <HAL_SD_MspInit+0x1c8>)
 80027c2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027ca:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027cc:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027de:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027e0:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027e8:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ee:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027f2:	2220      	movs	r2, #32
 80027f4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 80027fe:	2204      	movs	r2, #4
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 8002804:	2203      	movs	r2, #3
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002808:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 800280a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002810:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 8002812:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002818:	482e      	ldr	r0, [pc, #184]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 800281a:	f002 fddf 	bl	80053dc <HAL_DMA_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8002824:	f7ff f890 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
 800282e:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <HAL_SD_MspInit+0x1c4>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002836:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_SD_MspInit+0x1d0>)
 8002838:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 800283c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002840:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800285c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800285e:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002860:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002864:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002868:	2220      	movs	r2, #32
 800286a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002874:	2204      	movs	r2, #4
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 800287a:	2203      	movs	r2, #3
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002880:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002888:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800288e:	4813      	ldr	r0, [pc, #76]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 8002890:	f002 fda4 	bl	80053dc <HAL_DMA_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800289a:	f7ff f855 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a4:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <HAL_SD_MspInit+0x1cc>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2105      	movs	r1, #5
 80028ae:	2031      	movs	r0, #49	; 0x31
 80028b0:	f002 fd6a 	bl	8005388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80028b4:	2031      	movs	r0, #49	; 0x31
 80028b6:	f002 fd83 	bl	80053c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	2000cbe4 	.word	0x2000cbe4
 80028d8:	40026458 	.word	0x40026458
 80028dc:	20014d64 	.word	0x20014d64
 80028e0:	400264a0 	.word	0x400264a0

080028e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08e      	sub	sp, #56	; 0x38
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a68      	ldr	r2, [pc, #416]	; (8002aa4 <HAL_SPI_MspInit+0x1c0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d131      	bne.n	800296a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002906:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 800290c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b5f      	ldr	r3, [pc, #380]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8002936:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002948:	2305      	movs	r3, #5
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4856      	ldr	r0, [pc, #344]	; (8002aac <HAL_SPI_MspInit+0x1c8>)
 8002954:	f003 f8e6 	bl	8005b24 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2105      	movs	r1, #5
 800295c:	2023      	movs	r0, #35	; 0x23
 800295e:	f002 fd13 	bl	8005388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002962:	2023      	movs	r0, #35	; 0x23
 8002964:	f002 fd2c 	bl	80053c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002968:	e097      	b.n	8002a9a <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_SPI_MspInit+0x1cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d131      	bne.n	80029d8 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002974:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 800297a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298c:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	4a45      	ldr	r2, [pc, #276]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	6313      	str	r3, [r2, #48]	; 0x30
 8002998:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029b6:	2305      	movs	r3, #5
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029be:	4619      	mov	r1, r3
 80029c0:	483c      	ldr	r0, [pc, #240]	; (8002ab4 <HAL_SPI_MspInit+0x1d0>)
 80029c2:	f003 f8af 	bl	8005b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2105      	movs	r1, #5
 80029ca:	2024      	movs	r0, #36	; 0x24
 80029cc:	f002 fcdc 	bl	8005388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80029d0:	2024      	movs	r0, #36	; 0x24
 80029d2:	f002 fcf5 	bl	80053c0 <HAL_NVIC_EnableIRQ>
}
 80029d6:	e060      	b.n	8002a9a <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a36      	ldr	r2, [pc, #216]	; (8002ab8 <HAL_SPI_MspInit+0x1d4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d15b      	bne.n	8002a9a <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029e2:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_SPI_MspInit+0x1c4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a42:	4619      	mov	r1, r3
 8002a44:	4819      	ldr	r0, [pc, #100]	; (8002aac <HAL_SPI_MspInit+0x1c8>)
 8002a46:	f003 f86d 	bl	8005b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002a5a:	2307      	movs	r3, #7
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a62:	4619      	mov	r1, r3
 8002a64:	4813      	ldr	r0, [pc, #76]	; (8002ab4 <HAL_SPI_MspInit+0x1d0>)
 8002a66:	f003 f85d 	bl	8005b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a6a:	2318      	movs	r3, #24
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a7a:	2306      	movs	r3, #6
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a82:	4619      	mov	r1, r3
 8002a84:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <HAL_SPI_MspInit+0x1d0>)
 8002a86:	f003 f84d 	bl	8005b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	2033      	movs	r0, #51	; 0x33
 8002a90:	f002 fc7a 	bl	8005388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002a94:	2033      	movs	r0, #51	; 0x33
 8002a96:	f002 fc93 	bl	80053c0 <HAL_NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3738      	adds	r7, #56	; 0x38
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40013000 	.word	0x40013000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40003800 	.word	0x40003800
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40003c00 	.word	0x40003c00

08002abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_UART_MspInit+0x8c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d130      	bne.n	8002b40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_UART_MspInit+0x90>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_UART_MspInit+0x90>)
 8002ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_UART_MspInit+0x90>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_UART_MspInit+0x90>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <HAL_UART_MspInit+0x90>)
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_UART_MspInit+0x90>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b0e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002b20:	2308      	movs	r3, #8
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4809      	ldr	r0, [pc, #36]	; (8002b50 <HAL_UART_MspInit+0x94>)
 8002b2c:	f002 fffa 	bl	8005b24 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2105      	movs	r1, #5
 8002b34:	2052      	movs	r0, #82	; 0x52
 8002b36:	f002 fc27 	bl	8005388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002b3a:	2052      	movs	r0, #82	; 0x52
 8002b3c:	f002 fc40 	bl	80053c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40007800 	.word	0x40007800
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40021000 	.word	0x40021000

08002b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	; 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002b64:	2200      	movs	r2, #0
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	2019      	movs	r0, #25
 8002b6a:	f002 fc0d 	bl	8005388 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002b6e:	2019      	movs	r0, #25
 8002b70:	f002 fc26 	bl	80053c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b74:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <HAL_InitTick+0xa0>)
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <HAL_InitTick+0xa0>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_InitTick+0xa0>)
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b8c:	f107 0210 	add.w	r2, r7, #16
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 fffc 	bl	8007b94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002b9c:	f004 ffe6 	bl	8007b6c <HAL_RCC_GetPCLK2Freq>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <HAL_InitTick+0xa4>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9b      	lsrs	r3, r3, #18
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_InitTick+0xa8>)
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_InitTick+0xac>)
 8002bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_InitTick+0xa8>)
 8002bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_InitTick+0xa8>)
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_InitTick+0xa8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_InitTick+0xa8>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002bd4:	4809      	ldr	r0, [pc, #36]	; (8002bfc <HAL_InitTick+0xa8>)
 8002bd6:	f007 fd0e 	bl	800a5f6 <HAL_TIM_Base_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002be0:	4806      	ldr	r0, [pc, #24]	; (8002bfc <HAL_InitTick+0xa8>)
 8002be2:	f007 fd3d 	bl	800a660 <HAL_TIM_Base_Start_IT>
 8002be6:	4603      	mov	r3, r0
 8002be8:	e000      	b.n	8002bec <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3730      	adds	r7, #48	; 0x30
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	431bde83 	.word	0x431bde83
 8002bfc:	20014dcc 	.word	0x20014dcc
 8002c00:	40010000 	.word	0x40010000

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <MemManage_Handler+0x4>

08002c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c3e:	f007 fd39 	bl	800a6b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20014dcc 	.word	0x20014dcc

08002c4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <SPI1_IRQHandler+0x10>)
 8002c52:	f007 f867 	bl	8009d24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20010c44 	.word	0x20010c44

08002c60 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <SPI2_IRQHandler+0x10>)
 8002c66:	f007 f85d 	bl	8009d24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20008880 	.word	0x20008880

08002c74 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <SDMMC1_IRQHandler+0x10>)
 8002c7a:	f005 fde5 	bl	8008848 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200089c8 	.word	0x200089c8

08002c88 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <SPI3_IRQHandler+0x10>)
 8002c8e:	f007 f849 	bl	8009d24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	2000aa50 	.word	0x2000aa50

08002c9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA2_Stream3_IRQHandler+0x10>)
 8002ca2:	f002 fccb 	bl	800563c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000cbe4 	.word	0x2000cbe4

08002cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <OTG_FS_IRQHandler+0x10>)
 8002cb6:	f003 fa58 	bl	800616a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20016bf4 	.word	0x20016bf4

08002cc4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <DMA2_Stream6_IRQHandler+0x10>)
 8002cca:	f002 fcb7 	bl	800563c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20014d64 	.word	0x20014d64

08002cd8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <UART7_IRQHandler+0x10>)
 8002cde:	f008 f89b 	bl	800ae18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200088e4 	.word	0x200088e4

08002cec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e00a      	b.n	8002d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cfe:	f3af 8000 	nop.w
 8002d02:	4601      	mov	r1, r0
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	60ba      	str	r2, [r7, #8]
 8002d0a:	b2ca      	uxtb	r2, r1
 8002d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbf0      	blt.n	8002cfe <_read+0x12>
	}

return len;
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e009      	b.n	8002d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbf1      	blt.n	8002d38 <_write+0x12>
	}
	return len;
 8002d54:	687b      	ldr	r3, [r7, #4]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_close>:

int _close(int file)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
	return -1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d86:	605a      	str	r2, [r3, #4]
	return 0;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <_isatty>:

int _isatty(int file)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <_sbrk+0x50>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <_sbrk+0x16>
		heap_end = &end;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <_sbrk+0x50>)
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <_sbrk+0x54>)
 8002ddc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <_sbrk+0x50>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <_sbrk+0x50>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	466a      	mov	r2, sp
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d907      	bls.n	8002e02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002df2:	f014 f96d 	bl	80170d0 <__errno>
 8002df6:	4602      	mov	r2, r0
 8002df8:	230c      	movs	r3, #12
 8002dfa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002e00:	e006      	b.n	8002e10 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <_sbrk+0x50>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <_sbrk+0x50>)
 8002e0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000328 	.word	0x20000328
 8002e1c:	20017000 	.word	0x20017000

08002e20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <SystemInit+0x5c>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <SystemInit+0x5c>)
 8002e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <SystemInit+0x60>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <SystemInit+0x60>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <SystemInit+0x60>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <SystemInit+0x60>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	490d      	ldr	r1, [pc, #52]	; (8002e80 <SystemInit+0x60>)
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <SystemInit+0x64>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <SystemInit+0x60>)
 8002e54:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <SystemInit+0x68>)
 8002e56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <SystemInit+0x60>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <SystemInit+0x60>)
 8002e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <SystemInit+0x60>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <SystemInit+0x5c>)
 8002e6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e70:	609a      	str	r2, [r3, #8]
#endif
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	fef6ffff 	.word	0xfef6ffff
 8002e88:	24003010 	.word	0x24003010

08002e8c <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8002e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8e:	b0b3      	sub	sp, #204	; 0xcc
 8002e90:	af06      	add	r7, sp, #24
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	72fb      	strb	r3, [r7, #11]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8002e9e:	f107 0310 	add.w	r3, r7, #16
 8002ea2:	2296      	movs	r2, #150	; 0x96
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f014 f957 	bl	801715a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	7aba      	ldrb	r2, [r7, #10]
 8002eb0:	f107 0010 	add.w	r0, r7, #16
 8002eb4:	9202      	str	r2, [sp, #8]
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2301      	movs	r3, #1
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a41      	ldr	r2, [pc, #260]	; (8002fc4 <logSensor+0x138>)
 8002ec0:	2196      	movs	r1, #150	; 0x96
 8002ec2:	f014 fa6f 	bl	80173a4 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8002ec6:	7abb      	ldrb	r3, [r7, #10]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d002      	beq.n	8002ed2 <logSensor+0x46>
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d01d      	beq.n	8002f0c <logSensor+0x80>
 8002ed0:	e055      	b.n	8002f7e <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd f997 	bl	8000210 <strlen>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	1898      	adds	r0, r3, r2
 8002eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	9201      	str	r2, [sp, #4]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	460b      	mov	r3, r1
 8002f02:	4a31      	ldr	r2, [pc, #196]	; (8002fc8 <logSensor+0x13c>)
 8002f04:	2196      	movs	r1, #150	; 0x96
 8002f06:	f014 fa4d 	bl	80173a4 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8002f0a:	e04e      	b.n	8002faa <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f12:	f107 0310 	add.w	r3, r7, #16
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd f97a 	bl	8000210 <strlen>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8002f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f2c:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f36:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f40:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8002f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f46:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f4a:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f54:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8002f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f5e:	461e      	mov	r6, r3
 8002f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	9305      	str	r3, [sp, #20]
 8002f68:	9604      	str	r6, [sp, #16]
 8002f6a:	9503      	str	r5, [sp, #12]
 8002f6c:	9402      	str	r4, [sp, #8]
 8002f6e:	9101      	str	r1, [sp, #4]
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	4663      	mov	r3, ip
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <logSensor+0x140>)
 8002f76:	2196      	movs	r1, #150	; 0x96
 8002f78:	f014 fa14 	bl	80173a4 <sniprintf>
	}
		break;
 8002f7c:	e015      	b.n	8002faa <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd f944 	bl	8000210 <strlen>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <logSensor+0x144>)
 8002f92:	461d      	mov	r5, r3
 8002f94:	4614      	mov	r4, r2
 8002f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f98:	6028      	str	r0, [r5, #0]
 8002f9a:	6069      	str	r1, [r5, #4]
 8002f9c:	60aa      	str	r2, [r5, #8]
 8002f9e:	60eb      	str	r3, [r5, #12]
 8002fa0:	6820      	ldr	r0, [r4, #0]
 8002fa2:	6128      	str	r0, [r5, #16]
 8002fa4:	7923      	ldrb	r3, [r4, #4]
 8002fa6:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8002fa8:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <logSensor+0x148>)
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	f107 0110 	add.w	r1, r7, #16
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f010 f869 	bl	801308c <osMessageQueuePut>
 8002fba:	4603      	mov	r3, r0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	37b4      	adds	r7, #180	; 0xb4
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc4:	08019ebc 	.word	0x08019ebc
 8002fc8:	08019ecc 	.word	0x08019ecc
 8002fcc:	08019edc 	.word	0x08019edc
 8002fd0:	08019efc 	.word	0x08019efc
 8002fd4:	20010ca8 	.word	0x20010ca8

08002fd8 <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002fd8:	b084      	sub	sp, #16
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b0ac      	sub	sp, #176	; 0xb0
 8002fde:	af04      	add	r7, sp, #16
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002fea:	f107 0308 	add.w	r3, r7, #8
 8002fee:	2296      	movs	r2, #150	; 0x96
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f014 f8b1 	bl	801715a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 8002ff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ffc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003000:	f107 0008 	add.w	r0, r7, #8
 8003004:	9202      	str	r2, [sp, #8]
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	2303      	movs	r3, #3
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <logEstimatorVar+0x60>)
 8003010:	2196      	movs	r1, #150	; 0x96
 8003012:	f014 f9c7 	bl	80173a4 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <logEstimatorVar+0x64>)
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	f107 0108 	add.w	r1, r7, #8
 800301e:	2300      	movs	r3, #0
 8003020:	2200      	movs	r2, #0
 8003022:	f010 f833 	bl	801308c <osMessageQueuePut>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	37a0      	adds	r7, #160	; 0xa0
 800302c:	46bd      	mov	sp, r7
 800302e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003032:	b004      	add	sp, #16
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	08019f20 	.word	0x08019f20
 800303c:	20010ca8 	.word	0x20010ca8

08003040 <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8003040:	b40f      	push	{r0, r1, r2, r3}
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 800304c:	79fb      	ldrb	r3, [r7, #7]
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	b004      	add	sp, #16
 800305a:	4770      	bx	lr
 800305c:	0000      	movs	r0, r0
	...

08003060 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8003066:	af00      	add	r7, sp, #0
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 800306c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003070:	4618      	mov	r0, r3
 8003072:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003076:	461a      	mov	r2, r3
 8003078:	2100      	movs	r1, #0
 800307a:	f014 f86e 	bl	801715a <memset>

	state_est_data_t state_placeholder;

	/* State Estimation Values */
	float sf_velocity = 0;
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	float sf_height = 0;
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	461a      	mov	r2, r3
 8003094:	2300      	movs	r3, #0
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	6053      	str	r3, [r2, #4]
 800309a:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 800309c:	f107 0308 	add.w	r3, r7, #8
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	float control_input = 0;
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	float integrated_error = 0;
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	float previous_control_input = 0;
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 80030c6:	2301      	movs	r3, #1
 80030c8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80030cc:	f00f fb08 	bl	80126e0 <osKernelGetTickCount>
 80030d0:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80030d4:	f00f fb2c 	bl	8012730 <osKernelGetTickFreq>
 80030d8:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80030dc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80030e0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80030e4:	4413      	add	r3, r2
 80030e6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

		/* Update Sensor Fusion Variables */

		if (osMutexGetOwner(state_est_mutex) == NULL) {
 80030ea:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <vTaskController+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f00f fd84 	bl	8012bfc <osMutexGetOwner>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d12b      	bne.n	8003152 <vTaskController+0xf2>
			state_placeholder.position_world[2] = state_est_data.position_world[2];
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <vTaskController+0x274>)
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	f107 0318 	add.w	r3, r7, #24
 8003102:	609a      	str	r2, [r3, #8]
			state_placeholder.velocity_world[2] = state_est_data.velocity_world[2];
 8003104:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <vTaskController+0x274>)
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	f107 0318 	add.w	r3, r7, #24
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (osMutexGetOwner(state_est_mutex) == NULL) {
 800310e:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <vTaskController+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f00f fd72 	bl	8012bfc <osMutexGetOwner>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d119      	bne.n	8003152 <vTaskController+0xf2>
				sf_velocity = ((float) state_placeholder.velocity_world[2]) / 1000;
 800311e:	f107 0318 	add.w	r3, r7, #24
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312c:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80032d8 <vTaskController+0x278>
 8003130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003134:	edc7 7a94 	vstr	s15, [r7, #592]	; 0x250
				sf_height = ((float) state_placeholder.velocity_world[2]) / 1000;
 8003138:	f107 0318 	add.w	r3, r7, #24
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003146:	eddf 6a64 	vldr	s13, [pc, #400]	; 80032d8 <vTaskController+0x278>
 800314a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800314e:	edc7 7a93 	vstr	s15, [r7, #588]	; 0x24c
			}
		}

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 8003152:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003156:	f107 010c 	add.w	r1, r7, #12
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	4618      	mov	r0, r3
 8003160:	ed97 0a93 	vldr	s0, [r7, #588]	; 0x24c
 8003164:	f000 f8be 	bl	80032e4 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ed97 7a94 	vldr	s14, [r7, #592]	; 0x250
 8003174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003178:	edc7 7a90 	vstr	s15, [r7, #576]	; 0x240

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 800317c:	f107 030c 	add.w	r3, r7, #12
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	eeb1 7a67 	vneg.f32	s14, s15
 8003188:	edd7 7a90 	vldr	s15, [r7, #576]	; 0x240
 800318c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	edd3 6a01 	vldr	s13, [r3, #4]
 8003198:	edd7 7a92 	vldr	s15, [r7, #584]	; 0x248
 800319c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a0:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80031ac:	edd7 7a91 	vldr	s15, [r7, #580]	; 0x244
 80031b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b4:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 80031b8:	ed97 7a91 	vldr	s14, [r7, #580]	; 0x244
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	edc7 7a8f 	vstr	s15, [r7, #572]	; 0x23c
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 80031c4:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 80031c8:	f7fd f9de 	bl	8000588 <__aeabi_f2d>
 80031cc:	4603      	mov	r3, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80032b0 <vTaskController+0x250>
 80031d4:	ec44 3b10 	vmov	d0, r3, r4
 80031d8:	f014 ffad 	bl	8018136 <fmin>
 80031dc:	eeb0 7a40 	vmov.f32	s14, s0
 80031e0:	eef0 7a60 	vmov.f32	s15, s1
 80031e4:	eeb0 1a47 	vmov.f32	s2, s14
 80031e8:	eef0 1a67 	vmov.f32	s3, s15
 80031ec:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80032b8 <vTaskController+0x258>
 80031f0:	f014 ff7a 	bl	80180e8 <fmax>
 80031f4:	ec54 3b10 	vmov	r3, r4, d0
 80031f8:	4618      	mov	r0, r3
 80031fa:	4621      	mov	r1, r4
 80031fc:	f7fd fcec 	bl	8000bd8 <__aeabi_d2f>
 8003200:	4603      	mov	r3, r0
 8003202:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

		/* Write Control Input into Global Variable */
		if (osMutexAcquire(controller_mutex, 10) == osOK) {
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <vTaskController+0x27c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	210a      	movs	r1, #10
 800320c:	4618      	mov	r0, r3
 800320e:	f00f fc47 	bl	8012aa0 <osMutexAcquire>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d110      	bne.n	800323a <vTaskController+0x1da>
			controller_output = (int32_t) (control_input*1000);
 8003218:	edd7 7a8f 	vldr	s15, [r7, #572]	; 0x23c
 800321c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80032d8 <vTaskController+0x278>
 8003220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003228:	ee17 2a90 	vmov	r2, s15
 800322c:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <vTaskController+0x280>)
 800322e:	601a      	str	r2, [r3, #0]
			osMutexRelease(controller_mutex);
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <vTaskController+0x27c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f00f fc91 	bl	8012b5c <osMutexRelease>
		}

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 800323a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003246:	edd7 7a90 	vldr	s15, [r7, #576]	; 0x240
 800324a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800324e:	edd7 7a92 	vldr	s15, [r7, #584]	; 0x248
 8003252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003256:	ee17 0a90 	vmov	r0, s15
 800325a:	f7fd f995 	bl	8000588 <__aeabi_f2d>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80032c0 <vTaskController+0x260>
 8003266:	ec44 3b10 	vmov	d0, r3, r4
 800326a:	f014 ff64 	bl	8018136 <fmin>
 800326e:	eeb0 7a40 	vmov.f32	s14, s0
 8003272:	eef0 7a60 	vmov.f32	s15, s1
 8003276:	eeb0 1a47 	vmov.f32	s2, s14
 800327a:	eef0 1a67 	vmov.f32	s3, s15
 800327e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80032c8 <vTaskController+0x268>
 8003282:	f014 ff31 	bl	80180e8 <fmax>
 8003286:	ec54 3b10 	vmov	r3, r4, d0
 800328a:	4618      	mov	r0, r3
 800328c:	4621      	mov	r1, r4
 800328e:	f7fd fca3 	bl	8000bd8 <__aeabi_d2f>
 8003292:	4603      	mov	r3, r0
 8003294:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8003298:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800329c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

		/* Sleep */
		osDelayUntil(tick_count);
 80032a0:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 80032a4:	f00f fb22 	bl	80128ec <osDelayUntil>
		tick_count += tick_update;
 80032a8:	e718      	b.n	80030dc <vTaskController+0x7c>
 80032aa:	bf00      	nop
 80032ac:	f3af 8000 	nop.w
 80032b0:	00000000 	.word	0x00000000
 80032b4:	3ff00000 	.word	0x3ff00000
	...
 80032c4:	40240000 	.word	0x40240000
 80032c8:	00000000 	.word	0x00000000
 80032cc:	c0240000 	.word	0xc0240000
 80032d0:	2000ab28 	.word	0x2000ab28
 80032d4:	200002cc 	.word	0x200002cc
 80032d8:	447a0000 	.word	0x447a0000
 80032dc:	2000aab4 	.word	0x2000aab4
 80032e0:	20000308 	.word	0x20000308

080032e4 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80032ee:	60b8      	str	r0, [r7, #8]
 80032f0:	6079      	str	r1, [r7, #4]
 80032f2:	603a      	str	r2, [r7, #0]
	/* For Speed */
	float x_placeholder = 0;
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e06f      	b.n	80033e0 <CalcPolynomial+0xfc>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7fd f941 	bl	8000588 <__aeabi_f2d>
 8003306:	4604      	mov	r4, r0
 8003308:	460d      	mov	r5, r1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f1c3 031d 	rsb	r3, r3, #29
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f927 	bl	8000564 <__aeabi_i2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	ec43 2b11 	vmov	d1, r2, r3
 800331e:	ec45 4b10 	vmov	d0, r4, r5
 8003322:	f014 ff5b 	bl	80181dc <pow>
 8003326:	ec54 3b10 	vmov	r3, r4, d0
 800332a:	4618      	mov	r0, r3
 800332c:	4621      	mov	r1, r4
 800332e:	f7fd fc53 	bl	8000bd8 <__aeabi_d2f>
 8003332:	4603      	mov	r3, r0
 8003334:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	ed93 7a00 	vldr	s14, [r3]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	edd3 6a00 	vldr	s13, [r3]
 8003348:	edd7 7a04 	vldr	s15, [r7, #16]
 800334c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	ed93 7a00 	vldr	s14, [r3]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	edd3 6a00 	vldr	s13, [r3]
 8003372:	edd7 7a04 	vldr	s15, [r7, #16]
 8003376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3308      	adds	r3, #8
 800338a:	ed93 7a00 	vldr	s14, [r3]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	edd3 6a00 	vldr	s13, [r3]
 800339e:	edd7 7a04 	vldr	s15, [r7, #16]
 80033a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3308      	adds	r3, #8
 80033aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ae:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	ed93 7a00 	vldr	s14, [r3]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	edd3 6a00 	vldr	s13, [r3]
 80033c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80033cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3301      	adds	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b1d      	cmp	r3, #29
 80033e4:	dd8c      	ble.n	8003300 <CalcPolynomial+0x1c>
	}

}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033f0 <vTaskFSM>:
void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *env);

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection);


void vTaskFSM(void *argument) {
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	b0ae      	sub	sp, #184	; 0xb8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80033f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8003404:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f9ab 	bl	8003764 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 800340e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003412:	223c      	movs	r2, #60	; 0x3c
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f013 fe9f 	bl	801715a <memset>
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 800341c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003420:	223c      	movs	r2, #60	; 0x3c
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f013 fe98 	bl	801715a <memset>

	/* environment data */
	env environment;
	env dummy_env;
	init_env(&dummy_env);
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fda2 	bl	8000f78 <init_env>
	init_env(&environment);
 8003434:	f107 031c 	add.w	r3, r7, #28
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fd9d 	bl	8000f78 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800343e:	f00f f94f 	bl	80126e0 <osKernelGetTickCount>
 8003442:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8003446:	f00f f973 	bl	8012730 <osKernelGetTickFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <vTaskFSM+0x150>)
 800344e:	fba3 2302 	umull	r2, r3, r3, r2
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8003458:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800345c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003460:	4413      	add	r3, r2
 8003462:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <vTaskFSM+0x154>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f00f fbc6 	bl	8012bfc <osMutexGetOwner>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d123      	bne.n	80034be <vTaskFSM+0xce>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data;
 8003476:	4b34      	ldr	r3, [pc, #208]	; (8003548 <vTaskFSM+0x158>)
 8003478:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800347c:	461d      	mov	r5, r3
 800347e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800348a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800348e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <vTaskFSM+0x154>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f00f fbb0 	bl	8012bfc <osMutexGetOwner>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <vTaskFSM+0xce>
				state_est_data_fsm = state_est_data_fsm_dummy;
 80034a2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80034a6:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80034aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}
		/* Update Environment */
		if(osMutexGetOwner(environment_mutex) == NULL){
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <vTaskFSM+0x15c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f00f fb9a 	bl	8012bfc <osMutexGetOwner>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d114      	bne.n	80034f8 <vTaskFSM+0x108>
			dummy_env = global_env;
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <vTaskFSM+0x160>)
 80034d0:	f107 040c 	add.w	r4, r7, #12
 80034d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <vTaskFSM+0x154>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f00f fb8c 	bl	8012bfc <osMutexGetOwner>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <vTaskFSM+0x108>
				environment = dummy_env;
 80034ea:	f107 041c 	add.w	r4, r7, #28
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 80034f8:	f107 021c 	add.w	r2, r7, #28
 80034fc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003500:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f82b 	bl	8003560 <detect_flight_phase>

		/* TODO Write NEW State in GLobal Variable */
		if(osMutexAcquire(fsm_mutex, 10) == osOK){
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <vTaskFSM+0x164>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	210a      	movs	r1, #10
 8003510:	4618      	mov	r0, r3
 8003512:	f00f fac5 	bl	8012aa0 <osMutexAcquire>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10c      	bne.n	8003536 <vTaskFSM+0x146>
			global_flight_phase_detection = flight_phase_detection;
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <vTaskFSM+0x168>)
 800351e:	461c      	mov	r4, r3
 8003520:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003524:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003528:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(fsm_mutex);
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <vTaskFSM+0x164>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f00f fb13 	bl	8012b5c <osMutexRelease>
		}

		/* Sleep */
		osDelayUntil(tick_count);
 8003536:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800353a:	f00f f9d7 	bl	80128ec <osDelayUntil>
		tick_count += tick_update;
 800353e:	e78b      	b.n	8003458 <vTaskFSM+0x68>
 8003540:	51eb851f 	.word	0x51eb851f
 8003544:	2000ab28 	.word	0x2000ab28
 8003548:	200002cc 	.word	0x200002cc
 800354c:	200089c4 	.word	0x200089c4
 8003550:	2000030c 	.word	0x2000030c
 8003554:	2000887c 	.word	0x2000887c
 8003558:	2000031c 	.word	0x2000031c
 800355c:	00000000 	.word	0x00000000

08003560 <detect_flight_phase>:
}


void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env *environment)

{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	2b04      	cmp	r3, #4
 8003574:	f200 80a6 	bhi.w	80036c4 <detect_flight_phase+0x164>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <detect_flight_phase+0x20>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	08003595 	.word	0x08003595
 8003584:	080036c5 	.word	0x080036c5
 8003588:	080035e3 	.word	0x080035e3
 800358c:	0800362d 	.word	0x0800362d
 8003590:	08003677 	.word	0x08003677
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 > 20) {
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a0:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003760 <detect_flight_phase+0x200>
 80035a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80035ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	dc00      	bgt.n	80035b8 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80035b6:	e087      	b.n	80036c8 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	b25a      	sxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	dd79      	ble.n	80036c8 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2203      	movs	r2, #3
 80035d8:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	721a      	strb	r2, [r3, #8]
        break;
 80035e0:	e072      	b.n	80036c8 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0]))/1000 < 0) {
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ee:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003760 <detect_flight_phase+0x200>
 80035f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fe:	d400      	bmi.n	8003602 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003600:	e064      	b.n	80036cc <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3301      	adds	r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	b25a      	sxtb	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800361a:	2b03      	cmp	r3, #3
 800361c:	dd56      	ble.n	80036cc <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2204      	movs	r2, #4
 8003622:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	721a      	strb	r2, [r3, #8]
        break;
 800362a:	e04f      	b.n	80036cc <detect_flight_phase+0x16c>

        case COASTING:
            if (((float)(state_est_data->velocity_world[2]))/1000 < 0) {
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003638:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003760 <detect_flight_phase+0x200>
 800363c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003640:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	d400      	bmi.n	800364c <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800364a:	e041      	b.n	80036d0 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3301      	adds	r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	b25a      	sxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003664:	2b03      	cmp	r3, #3
 8003666:	dd33      	ble.n	80036d0 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2205      	movs	r2, #5
 800366c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	721a      	strb	r2, [r3, #8]
        break;
 8003674:	e02c      	b.n	80036d0 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2]))/1000 < 20) {
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003682:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003760 <detect_flight_phase+0x200>
 8003686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800368a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800368e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d400      	bmi.n	800369a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8003698:	e01c      	b.n	80036d4 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	b25a      	sxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	dd0e      	ble.n	80036d4 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2206      	movs	r2, #6
 80036ba:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	721a      	strb	r2, [r3, #8]
        break;
 80036c2:	e007      	b.n	80036d4 <detect_flight_phase+0x174>

        default:
        break;
 80036c4:	bf00      	nop
 80036c6:	e006      	b.n	80036d6 <detect_flight_phase+0x176>
        break;
 80036c8:	bf00      	nop
 80036ca:	e004      	b.n	80036d6 <detect_flight_phase+0x176>
        break;
 80036cc:	bf00      	nop
 80036ce:	e002      	b.n	80036d6 <detect_flight_phase+0x176>
        break;
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <detect_flight_phase+0x176>
        break;
 80036d4:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(environment, ((float)state_est_data->velocity_rocket[0])/1000);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003760 <detect_flight_phase+0x200>
 80036e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036ea:	eeb0 0a66 	vmov.f32	s0, s13
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fc96 	bl	8001020 <mach_number>
 80036f4:	eef0 7a40 	vmov.f32	s15, s0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc ff40 	bl	8000588 <__aeabi_f2d>
 8003708:	a311      	add	r3, pc, #68	; (adr r3, 8003750 <detect_flight_phase+0x1f0>)
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f7fd fa19 	bl	8000b44 <__aeabi_dcmpge>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2203      	movs	r2, #3
 800371c:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }


}
 800371e:	e013      	b.n	8003748 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fc ff2f 	bl	8000588 <__aeabi_f2d>
 800372a:	a30b      	add	r3, pc, #44	; (adr r3, 8003758 <detect_flight_phase+0x1f8>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f7fd fa08 	bl	8000b44 <__aeabi_dcmpge>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2202      	movs	r2, #2
 800373e:	705a      	strb	r2, [r3, #1]
}
 8003740:	e002      	b.n	8003748 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	705a      	strb	r2, [r3, #1]
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	cccccccd 	.word	0xcccccccd
 8003754:	3ff4cccc 	.word	0x3ff4cccc
 8003758:	9999999a 	.word	0x9999999a
 800375c:	3fe99999 	.word	0x3fe99999
 8003760:	447a0000 	.word	0x447a0000

08003764 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	721a      	strb	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <vTaskMotorCont>:
osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer);
osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer);
osStatus_t MoveToPosition(uint32_t position);
osStatus_t GetPosition(int32_t *position);

void vTaskMotorCont(void *argument) {
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

	uint32_t desired_position = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
	int32_t measured_position = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

	while(EnableMotor() != osOK){};
 80037a8:	bf00      	nop
 80037aa:	f000 f891 	bl	80038d0 <EnableMotor>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1fa      	bne.n	80037aa <vTaskMotorCont+0x16>

	while(SetPositionMode() != osOK){};
 80037b4:	bf00      	nop
 80037b6:	f000 f8dc 	bl	8003972 <SetPositionMode>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1fa      	bne.n	80037b6 <vTaskMotorCont+0x22>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80037c0:	f00e ff8e 	bl	80126e0 <osKernelGetTickCount>
 80037c4:	61f8      	str	r0, [r7, #28]
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 80037c6:	f00e ffb3 	bl	8012730 <osKernelGetTickFreq>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc feb9 	bl	8000544 <__aeabi_ui2d>
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <vTaskMotorCont+0x90>)
 80037d8:	f7fd f858 	bl	800088c <__aeabi_ddiv>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4618      	mov	r0, r3
 80037e2:	4621      	mov	r1, r4
 80037e4:	f7fd f9d8 	bl	8000b98 <__aeabi_d2uiz>
 80037e8:	4603      	mov	r3, r0
 80037ea:	613b      	str	r3, [r7, #16]

	for (;;) {
		tick_count += tick_update;
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	61fb      	str	r3, [r7, #28]
		motor_status = GetPosition(&measured_position);
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f903 	bl	8003a04 <GetPosition>
 80037fe:	6178      	str	r0, [r7, #20]
		motor_status = MoveToPosition(desired_position);
 8003800:	69b8      	ldr	r0, [r7, #24]
 8003802:	f000 f8d6 	bl	80039b2 <MoveToPosition>
 8003806:	6178      	str	r0, [r7, #20]
		desired_position = desired_position + 50;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	3332      	adds	r3, #50	; 0x32
 800380c:	61bb      	str	r3, [r7, #24]
		if(desired_position > 500){
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003814:	d901      	bls.n	800381a <vTaskMotorCont+0x86>
			desired_position = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
		}

		osDelayUntil(tick_count);
 800381a:	69f8      	ldr	r0, [r7, #28]
 800381c:	f00f f866 	bl	80128ec <osDelayUntil>
		tick_count += tick_update;
 8003820:	e7e4      	b.n	80037ec <vTaskMotorCont+0x58>
 8003822:	bf00      	nop
 8003824:	3fe00000 	.word	0x3fe00000

08003828 <calculateCRC>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
//	HAL_UART_Receive_IT(&huart7, rx_data, sizeof(rx_data));
//}


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e03c      	b.n	80038b8 <calculateCRC+0x90>
    shifter = 0x8000;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d102      	bne.n	8003852 <calculateCRC+0x2a>
      c = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	82bb      	strh	r3, [r7, #20]
 8003850:	e00e      	b.n	8003870 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3301      	adds	r3, #1
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	b21a      	sxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	440b      	add	r3, r1
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b21b      	sxth	r3, r3
 800386a:	4313      	orrs	r3, r2
 800386c:	b21b      	sxth	r3, r3
 800386e:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8003870:	8a7b      	ldrh	r3, [r7, #18]
 8003872:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800387a:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 800387c:	8a7b      	ldrh	r3, [r7, #18]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8003882:	8aba      	ldrh	r2, [r7, #20]
 8003884:	8afb      	ldrh	r3, [r7, #22]
 8003886:	4013      	ands	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <calculateCRC+0x6c>
 800388e:	8a7b      	ldrh	r3, [r7, #18]
 8003890:	3301      	adds	r3, #1
 8003892:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8003894:	897b      	ldrh	r3, [r7, #10]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <calculateCRC+0x7e>
 800389a:	8a7b      	ldrh	r3, [r7, #18]
 800389c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80038a0:	f083 0301 	eor.w	r3, r3, #1
 80038a4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 80038a6:	8afb      	ldrh	r3, [r7, #22]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 80038ac:	8afb      	ldrh	r3, [r7, #22]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1de      	bne.n	8003870 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3302      	adds	r3, #2
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	3302      	adds	r3, #2
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	429a      	cmp	r2, r3
 80038c0:	dbbd      	blt.n	800383e <calculateCRC+0x16>
  }
  return crc;
 80038c2:	8a7b      	ldrh	r3, [r7, #18]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <EnableMotor>:

osStatus_t EnableMotor(){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[10];

	/* Register for Motor Control */
	command[0] = 0x60;
 80038dc:	2360      	movs	r3, #96	; 0x60
 80038de:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 80038e2:	2340      	movs	r3, #64	; 0x40
 80038e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80038e8:	2300      	movs	r3, #0
 80038ea:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80038ec:	2300      	movs	r3, #0
 80038ee:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80038f0:	2300      	movs	r3, #0
 80038f2:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x06;
 80038f4:	2306      	movs	r3, #6
 80038f6:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80038f8:	f107 0210 	add.w	r2, r7, #16
 80038fc:	f107 011c 	add.w	r1, r7, #28
 8003900:	f107 0320 	add.w	r3, r7, #32
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f8a3 	bl	8003a50 <WriteCommand>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24

	/* Register for Motor Control */
	command[0] = 0x60;
 800390c:	2360      	movs	r3, #96	; 0x60
 800390e:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 8003912:	2340      	movs	r3, #64	; 0x40
 8003914:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	/* Fully Enable Controller */
	data[0] = 0x00;
 8003918:	2300      	movs	r3, #0
 800391a:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 800391c:	2300      	movs	r3, #0
 800391e:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 8003920:	2300      	movs	r3, #0
 8003922:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 8003924:	230f      	movs	r3, #15
 8003926:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 8003928:	f107 0210 	add.w	r2, r7, #16
 800392c:	f107 011c 	add.w	r1, r7, #28
 8003930:	f107 0320 	add.w	r3, r7, #32
 8003934:	4618      	mov	r0, r3
 8003936:	f000 f88b 	bl	8003a50 <WriteCommand>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[14];

	command[0] = 0x60;
 800393c:	2360      	movs	r3, #96	; 0x60
 800393e:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x41;
 8003942:	2341      	movs	r3, #65	; 0x41
 8003944:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 8003948:	463a      	mov	r2, r7
 800394a:	f107 0320 	add.w	r3, r7, #32
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f901 	bl	8003b58 <ReadCommand>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 8003958:	7a3b      	ldrb	r3, [r7, #8]
 800395a:	2b37      	cmp	r3, #55	; 0x37
 800395c:	d104      	bne.n	8003968 <EnableMotor+0x98>
 800395e:	7a7b      	ldrb	r3, [r7, #9]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d101      	bne.n	8003968 <EnableMotor+0x98>
		status = osOK;
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
	}

	return status;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800396a:	4618      	mov	r0, r3
 800396c:	3728      	adds	r7, #40	; 0x28
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <SetPositionMode>:

osStatus_t SetPositionMode(){
 8003972:	b580      	push	{r7, lr}
 8003974:	b086      	sub	sp, #24
 8003976:	af00      	add	r7, sp, #0
	osStatus_t status = osError;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	617b      	str	r3, [r7, #20]

	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[10];

	command[0] = 0x60;
 800397e:	2360      	movs	r3, #96	; 0x60
 8003980:	743b      	strb	r3, [r7, #16]
	command[1] = 0x60;
 8003982:	2360      	movs	r3, #96	; 0x60
 8003984:	747b      	strb	r3, [r7, #17]

	data[0] = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;
 800398a:	2300      	movs	r3, #0
 800398c:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;
 800398e:	2300      	movs	r3, #0
 8003990:	73bb      	strb	r3, [r7, #14]
	data[3] = 0x08;
 8003992:	2308      	movs	r3, #8
 8003994:	73fb      	strb	r3, [r7, #15]

	status = WriteCommand(command, data, rx_buffer_write);
 8003996:	463a      	mov	r2, r7
 8003998:	f107 010c 	add.w	r1, r7, #12
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f855 	bl	8003a50 <WriteCommand>
 80039a6:	6178      	str	r0, [r7, #20]

	return status;
 80039a8:	697b      	ldr	r3, [r7, #20]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <MoveToPosition>:

osStatus_t MoveToPosition(uint32_t position){
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	61fb      	str	r3, [r7, #28]
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[10];

	/* Register for Motor Control */
	command[0] = 0x60;
 80039c0:	2360      	movs	r3, #96	; 0x60
 80039c2:	763b      	strb	r3, [r7, #24]
	command[1] = 0x7A;
 80039c4:	237a      	movs	r3, #122	; 0x7a
 80039c6:	767b      	strb	r3, [r7, #25]

	data[0] = (position >> 24) & 0xFF;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0e1b      	lsrs	r3, r3, #24
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	753b      	strb	r3, [r7, #20]
	data[1] = (position >> 16) & 0xFF;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	757b      	strb	r3, [r7, #21]
	data[2] = (position >> 8) & 0xFF;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	75bb      	strb	r3, [r7, #22]
	data[3] = position & 0xFF;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	75fb      	strb	r3, [r7, #23]

	status = WriteCommand(command, data, rx_buffer_write);
 80039e6:	f107 0208 	add.w	r2, r7, #8
 80039ea:	f107 0114 	add.w	r1, r7, #20
 80039ee:	f107 0318 	add.w	r3, r7, #24
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f82c 	bl	8003a50 <WriteCommand>
 80039f8:	61f8      	str	r0, [r7, #28]

	return status;
 80039fa:	69fb      	ldr	r3, [r7, #28]

}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	61fb      	str	r3, [r7, #28]

	uint8_t command[2];
	uint8_t rx_buffer_read[14];

	/* Register for Motor Control */
	command[0] = 0x60;
 8003a12:	2360      	movs	r3, #96	; 0x60
 8003a14:	763b      	strb	r3, [r7, #24]
	command[1] = 0x64;
 8003a16:	2364      	movs	r3, #100	; 0x64
 8003a18:	767b      	strb	r3, [r7, #25]

	status = ReadCommand(command, rx_buffer_read);
 8003a1a:	f107 0208 	add.w	r2, r7, #8
 8003a1e:	f107 0318 	add.w	r3, r7, #24
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f897 	bl	8003b58 <ReadCommand>
 8003a2a:	61f8      	str	r0, [r7, #28]

	*position = rx_buffer_read[8] +
 8003a2c:	7c3b      	ldrb	r3, [r7, #16]
 8003a2e:	461a      	mov	r2, r3
			(rx_buffer_read[9] << 8) +
 8003a30:	7c7b      	ldrb	r3, [r7, #17]
 8003a32:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[8] +
 8003a34:	441a      	add	r2, r3
			(rx_buffer_read[10] << 16) +
 8003a36:	7cbb      	ldrb	r3, [r7, #18]
 8003a38:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[9] << 8) +
 8003a3a:	441a      	add	r2, r3
			(rx_buffer_read[11] << 24);
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[10] << 16) +
 8003a40:	441a      	add	r2, r3
	*position = rx_buffer_read[8] +
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	601a      	str	r2, [r3, #0]

	return status;
 8003a46:	69fb      	ldr	r3, [r7, #28]


}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08c      	sub	sp, #48	; 0x30
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Enable Voltage */
	uint8_t byte_stream_write[14] = { 0 };
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;		// DLE
 8003a70:	2390      	movs	r3, #144	; 0x90
 8003a72:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;		// STX
 8003a74:	2302      	movs	r3, #2
 8003a76:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;		// Write Object
 8003a78:	2368      	movs	r3, #104	; 0x68
 8003a7a:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;		// Length of Data in Words
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;		// Node ID
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte -> Set Coontrolword
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;		// Subindex of object
 8003a96:	2300      	movs	r3, #0
 8003a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];		// Data - low byte
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	78db      	ldrb	r3, [r3, #3]
 8003aa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];		// Data
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	789b      	ldrb	r3, [r3, #2]
 8003aa8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 8003abc:	f107 0310 	add.w	r3, r7, #16
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	f107 021e 	add.w	r2, r7, #30
 8003ad0:	6810      	ldr	r0, [r2, #0]
 8003ad2:	6851      	ldr	r1, [r2, #4]
 8003ad4:	c303      	stmia	r3!, {r0, r1}
 8003ad6:	8912      	ldrh	r2, [r2, #8]
 8003ad8:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	210a      	movs	r1, #10
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fe9f 	bl	8003828 <calculateCRC>
 8003aea:	4603      	mov	r3, r0
 8003aec:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 8003aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8003af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8003b02:	f107 011c 	add.w	r1, r7, #28
 8003b06:	230a      	movs	r3, #10
 8003b08:	220e      	movs	r2, #14
 8003b0a:	4812      	ldr	r0, [pc, #72]	; (8003b54 <WriteCommand+0x104>)
 8003b0c:	f007 f826 	bl	800ab5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 10, 10);
 8003b10:	230a      	movs	r3, #10
 8003b12:	220a      	movs	r2, #10
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	480f      	ldr	r0, [pc, #60]	; (8003b54 <WriteCommand+0x104>)
 8003b18:	f007 f8b1 	bl	800ac7e <HAL_UART_Receive>

	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3307      	adds	r3, #7
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3306      	adds	r3, #6
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3305      	adds	r3, #5
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <WriteCommand+0xf8>
		status = osOK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3730      	adds	r7, #48	; 0x30
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200088e4 	.word	0x200088e4

08003b58 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	61fb      	str	r3, [r7, #28]

	/* Check if Motor is enabled */
	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;		// DLE
 8003b68:	2390      	movs	r3, #144	; 0x90
 8003b6a:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;		// STX
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;		// Read Object
 8003b70:	2360      	movs	r3, #96	; 0x60
 8003b72:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;		// Length of stuff sent
 8003b74:	2302      	movs	r3, #2
 8003b76:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;		// Node ID
 8003b78:	2301      	movs	r3, #1
 8003b7a:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;		// Subindex of object
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 8003b8c:	f107 0308 	add.w	r3, r7, #8
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8003b96:	f107 0308 	add.w	r3, r7, #8
 8003b9a:	f107 0212 	add.w	r2, r7, #18
 8003b9e:	6810      	ldr	r0, [r2, #0]
 8003ba0:	6018      	str	r0, [r3, #0]
 8003ba2:	8892      	ldrh	r2, [r2, #4]
 8003ba4:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	2106      	movs	r1, #6
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fe39 	bl	8003828 <calculateCRC>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;		// CRC low byte
 8003bba:	8b7b      	ldrh	r3, [r7, #26]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8003bc0:	8b7b      	ldrh	r3, [r7, #26]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 8003bca:	f107 0110 	add.w	r1, r7, #16
 8003bce:	230a      	movs	r3, #10
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	4812      	ldr	r0, [pc, #72]	; (8003c1c <ReadCommand+0xc4>)
 8003bd4:	f006 ffc2 	bl	800ab5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 14, 10);
 8003bd8:	230a      	movs	r3, #10
 8003bda:	220e      	movs	r2, #14
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	480f      	ldr	r0, [pc, #60]	; (8003c1c <ReadCommand+0xc4>)
 8003be0:	f007 f84d 	bl	800ac7e <HAL_UART_Receive>

	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3307      	adds	r3, #7
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	3306      	adds	r3, #6
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3305      	adds	r3, #5
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <ReadCommand+0xb8>
		status = osOK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
	}
	return status;
 8003c10:	69fb      	ldr	r3, [r7, #28]

}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200088e4 	.word	0x200088e4

08003c20 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8003c20:	b5b0      	push	{r4, r5, r7, lr}
 8003c22:	b0cc      	sub	sp, #304	; 0x130
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003c30:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8003c3c:	48c3      	ldr	r0, [pc, #780]	; (8003f4c <vTaskSdCard+0x32c>)
 8003c3e:	f7ff f9ff 	bl	8003040 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8003c42:	48c3      	ldr	r0, [pc, #780]	; (8003f50 <vTaskSdCard+0x330>)
 8003c44:	f7ff f9fc 	bl	8003040 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8003c48:	2201      	movs	r2, #1
 8003c4a:	49c2      	ldr	r1, [pc, #776]	; (8003f54 <vTaskSdCard+0x334>)
 8003c4c:	48c2      	ldr	r0, [pc, #776]	; (8003f58 <vTaskSdCard+0x338>)
 8003c4e:	f00d fc3b 	bl	80114c8 <f_mount>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003c58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8003c60:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c64:	4619      	mov	r1, r3
 8003c66:	48bd      	ldr	r0, [pc, #756]	; (8003f5c <vTaskSdCard+0x33c>)
 8003c68:	f7ff f9ea 	bl	8003040 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8003c6c:	4bbc      	ldr	r3, [pc, #752]	; (8003f60 <vTaskSdCard+0x340>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8003c72:	2064      	movs	r0, #100	; 0x64
 8003c74:	f00e fe0c 	bl	8012890 <osDelay>
		}
	} while (res != FR_OK);
 8003c78:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e3      	bne.n	8003c48 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8003c80:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f040 80a9 	bne.w	8003ddc <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8003c8a:	48b6      	ldr	r0, [pc, #728]	; (8003f64 <vTaskSdCard+0x344>)
 8003c8c:	f7ff f9d8 	bl	8003040 <UsbPrint>

		unsigned int file_number = 1;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8003c96:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003c9a:	f107 0008 	add.w	r0, r7, #8
 8003c9e:	4bb2      	ldr	r3, [pc, #712]	; (8003f68 <vTaskSdCard+0x348>)
 8003ca0:	4aac      	ldr	r2, [pc, #688]	; (8003f54 <vTaskSdCard+0x334>)
 8003ca2:	f00e fbc9 	bl	8012438 <f_findfirst>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003cac:	e02b      	b.n	8003d06 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003cae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003cb2:	3b30      	subs	r3, #48	; 0x30
 8003cb4:	2264      	movs	r2, #100	; 0x64
 8003cb6:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8003cba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003cbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	18ca      	adds	r2, r1, r3
 8003ccc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003cd0:	3b30      	subs	r3, #48	; 0x30
 8003cd2:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8003cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8003cd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cdc:	3301      	adds	r3, #1
 8003cde:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d204      	bcs.n	8003cf0 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8003ce6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cea:	3301      	adds	r3, #1
 8003cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8003cf0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00e fb74 	bl	80123e8 <f_findnext>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8003d06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <vTaskSdCard+0xf6>
 8003d0e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1cb      	bne.n	8003cae <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8003d16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8003d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d22:	4619      	mov	r1, r3
 8003d24:	4891      	ldr	r0, [pc, #580]	; (8003f6c <vTaskSdCard+0x34c>)
 8003d26:	f7ff f98b 	bl	8003040 <UsbPrint>
					res);
			goto resetSDCard;
 8003d2a:	e78a      	b.n	8003c42 <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8003d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d30:	4a8f      	ldr	r2, [pc, #572]	; (8003f70 <vTaskSdCard+0x350>)
 8003d32:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8003d38:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003d3c:	4b8d      	ldr	r3, [pc, #564]	; (8003f74 <vTaskSdCard+0x354>)
 8003d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d42:	08da      	lsrs	r2, r3, #3
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	1aca      	subs	r2, r1, r3
 8003d4e:	b2d3      	uxtb	r3, r2
 8003d50:	3330      	adds	r3, #48	; 0x30
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8003d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d5c:	4a85      	ldr	r2, [pc, #532]	; (8003f74 <vTaskSdCard+0x354>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	08d9      	lsrs	r1, r3, #3
 8003d64:	4b83      	ldr	r3, [pc, #524]	; (8003f74 <vTaskSdCard+0x354>)
 8003d66:	fba3 2301 	umull	r2, r3, r3, r1
 8003d6a:	08da      	lsrs	r2, r3, #3
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	1aca      	subs	r2, r1, r3
 8003d76:	b2d3      	uxtb	r3, r2
 8003d78:	3330      	adds	r3, #48	; 0x30
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8003d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d84:	4a7c      	ldr	r2, [pc, #496]	; (8003f78 <vTaskSdCard+0x358>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0959      	lsrs	r1, r3, #5
 8003d8c:	4b79      	ldr	r3, [pc, #484]	; (8003f74 <vTaskSdCard+0x354>)
 8003d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d92:	08da      	lsrs	r2, r3, #3
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	1aca      	subs	r2, r1, r3
 8003d9e:	b2d3      	uxtb	r3, r2
 8003da0:	3330      	adds	r3, #48	; 0x30
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8003da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003dac:	4619      	mov	r1, r3
 8003dae:	4873      	ldr	r0, [pc, #460]	; (8003f7c <vTaskSdCard+0x35c>)
 8003db0:	f7ff f946 	bl	8003040 <UsbPrint>

		res = f_closedir(&dj);
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	4618      	mov	r0, r3
 8003dba:	f00e faa7 	bl	801230c <f_closedir>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8003dc4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8003dcc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	486b      	ldr	r0, [pc, #428]	; (8003f80 <vTaskSdCard+0x360>)
 8003dd4:	f7ff f934 	bl	8003040 <UsbPrint>
			goto resetSDCard;
 8003dd8:	bf00      	nop
 8003dda:	e732      	b.n	8003c42 <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8003ddc:	4869      	ldr	r0, [pc, #420]	; (8003f84 <vTaskSdCard+0x364>)
 8003dde:	f7ff f92f 	bl	8003040 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8003de2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003de6:	2212      	movs	r2, #18
 8003de8:	4619      	mov	r1, r3
 8003dea:	4867      	ldr	r0, [pc, #412]	; (8003f88 <vTaskSdCard+0x368>)
 8003dec:	f00d fbd0 	bl	8011590 <f_open>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8003df6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8003dfe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e02:	4619      	mov	r1, r3
 8003e04:	4861      	ldr	r0, [pc, #388]	; (8003f8c <vTaskSdCard+0x36c>)
 8003e06:	f7ff f91b 	bl	8003040 <UsbPrint>
		goto resetSDCard;
 8003e0a:	e71a      	b.n	8003c42 <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8003e0c:	4860      	ldr	r0, [pc, #384]	; (8003f90 <vTaskSdCard+0x370>)
 8003e0e:	f7ff f917 	bl	8003040 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8003e12:	4b5d      	ldr	r3, [pc, #372]	; (8003f88 <vTaskSdCard+0x368>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	4619      	mov	r1, r3
 8003e18:	485b      	ldr	r0, [pc, #364]	; (8003f88 <vTaskSdCard+0x368>)
 8003e1a:	f00d ffab 	bl	8011d74 <f_lseek>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8003e24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8003e2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e30:	4619      	mov	r1, r3
 8003e32:	4858      	ldr	r0, [pc, #352]	; (8003f94 <vTaskSdCard+0x374>)
 8003e34:	f7ff f904 	bl	8003040 <UsbPrint>
		goto resetSDCard;
 8003e38:	e703      	b.n	8003c42 <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8003e40:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <vTaskSdCard+0x378>)
 8003e42:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8003e46:	461d      	mov	r5, r3
 8003e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e50:	c407      	stmia	r4!, {r0, r1, r2}
 8003e52:	8023      	strh	r3, [r4, #0]
 8003e54:	3402      	adds	r4, #2
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	7023      	strb	r3, [r4, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8003e66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc f9d0 	bl	8000210 <strlen>
 8003e70:	4602      	mov	r2, r0
 8003e72:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <vTaskSdCard+0x37c>)
 8003e78:	4843      	ldr	r0, [pc, #268]	; (8003f88 <vTaskSdCard+0x368>)
 8003e7a:	f00d fd4e 	bl	801191a <f_write>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8003e84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8003e8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e90:	4619      	mov	r1, r3
 8003e92:	4843      	ldr	r0, [pc, #268]	; (8003fa0 <vTaskSdCard+0x380>)
 8003e94:	f7ff f8d4 	bl	8003040 <UsbPrint>
		goto resetSDCard;
 8003e98:	e6d3      	b.n	8003c42 <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8003e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e9e:	2296      	movs	r2, #150	; 0x96
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f013 f959 	bl	801715a <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <vTaskSdCard+0x384>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f00f f95d 	bl	8013174 <osMessageQueueGet>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f3      	bne.n	8003ea8 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8003ec0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fc f9a3 	bl	8000210 <strlen>
 8003eca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 8003ece:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d015      	beq.n	8003f02 <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8003ed6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <vTaskSdCard+0x37c>)
 8003edc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003ee0:	4829      	ldr	r0, [pc, #164]	; (8003f88 <vTaskSdCard+0x368>)
 8003ee2:	f00d fd1a 	bl	801191a <f_write>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8003eec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8003ef4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4829      	ldr	r0, [pc, #164]	; (8003fa0 <vTaskSdCard+0x380>)
 8003efc:	f7ff f8a0 	bl	8003040 <UsbPrint>
							res);
					goto resetSDCard;
 8003f00:	e69f      	b.n	8003c42 <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f06:	3301      	adds	r3, #1
 8003f08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f10:	2b7f      	cmp	r3, #127	; 0x7f
 8003f12:	ddc9      	ble.n	8003ea8 <vTaskSdCard+0x288>
				msgCounter = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8003f1a:	4823      	ldr	r0, [pc, #140]	; (8003fa8 <vTaskSdCard+0x388>)
 8003f1c:	f7ff f890 	bl	8003040 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003f20:	2108      	movs	r1, #8
 8003f22:	4822      	ldr	r0, [pc, #136]	; (8003fac <vTaskSdCard+0x38c>)
 8003f24:	f001 ffc1 	bl	8005eaa <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8003f28:	4817      	ldr	r0, [pc, #92]	; (8003f88 <vTaskSdCard+0x368>)
 8003f2a:	f00d fe9a 	bl	8011c62 <f_sync>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8003f34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0b5      	beq.n	8003ea8 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8003f3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f40:	4619      	mov	r1, r3
 8003f42:	481b      	ldr	r0, [pc, #108]	; (8003fb0 <vTaskSdCard+0x390>)
 8003f44:	f7ff f87c 	bl	8003040 <UsbPrint>
					goto resetSDCard;
 8003f48:	e67b      	b.n	8003c42 <vTaskSdCard+0x22>
 8003f4a:	bf00      	nop
 8003f4c:	08019f3c 	.word	0x08019f3c
 8003f50:	08019f64 	.word	0x08019f64
 8003f54:	08019f88 	.word	0x08019f88
 8003f58:	2001503c 	.word	0x2001503c
 8003f5c:	08019f8c 	.word	0x08019f8c
 8003f60:	2000035c 	.word	0x2000035c
 8003f64:	08019fb8 	.word	0x08019fb8
 8003f68:	08019fdc 	.word	0x08019fdc
 8003f6c:	08019fe8 	.word	0x08019fe8
 8003f70:	0801a020 	.word	0x0801a020
 8003f74:	cccccccd 	.word	0xcccccccd
 8003f78:	51eb851f 	.word	0x51eb851f
 8003f7c:	0801a02c 	.word	0x0801a02c
 8003f80:	0801a050 	.word	0x0801a050
 8003f84:	0801a080 	.word	0x0801a080
 8003f88:	20014e0c 	.word	0x20014e0c
 8003f8c:	0801a0a4 	.word	0x0801a0a4
 8003f90:	0801a0d0 	.word	0x0801a0d0
 8003f94:	0801a0f8 	.word	0x0801a0f8
 8003f98:	0801a19c 	.word	0x0801a19c
 8003f9c:	20015270 	.word	0x20015270
 8003fa0:	0801a128 	.word	0x0801a128
 8003fa4:	20010ca8 	.word	0x20010ca8
 8003fa8:	0801a154 	.word	0x0801a154
 8003fac:	40020800 	.word	0x40020800
 8003fb0:	0801a174 	.word	0x0801a174

08003fb4 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb6:	b08b      	sub	sp, #44	; 0x2c
 8003fb8:	af04      	add	r7, sp, #16
 8003fba:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8003fbc:	f00e fb90 	bl	80126e0 <osKernelGetTickCount>
 8003fc0:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8003fc2:	f00e fbb5 	bl	8012730 <osKernelGetTickFreq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <vTaskSensRead+0x158>)
 8003fca:	fba3 2302 	umull	r2, r3, r3, r2
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 8003fde:	2220      	movs	r2, #32
 8003fe0:	494b      	ldr	r1, [pc, #300]	; (8004110 <vTaskSensRead+0x15c>)
 8003fe2:	484c      	ldr	r0, [pc, #304]	; (8004114 <vTaskSensRead+0x160>)
 8003fe4:	f005 fd46 	bl	8009a74 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8003fe8:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <vTaskSensRead+0x164>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	211e      	movs	r1, #30
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f00e fd56 	bl	8012aa0 <osMutexAcquire>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d113      	bne.n	8004022 <vTaskSensRead+0x6e>
			sb3_baro = sb3_data.baro;
 8003ffa:	4b48      	ldr	r3, [pc, #288]	; (800411c <vTaskSensRead+0x168>)
 8003ffc:	4a44      	ldr	r2, [pc, #272]	; (8004110 <vTaskSensRead+0x15c>)
 8003ffe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 8004004:	4a46      	ldr	r2, [pc, #280]	; (8004120 <vTaskSensRead+0x16c>)
 8004006:	4b42      	ldr	r3, [pc, #264]	; (8004110 <vTaskSensRead+0x15c>)
 8004008:	4614      	mov	r4, r2
 800400a:	330c      	adds	r3, #12
 800400c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800400e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			checksum = sb3_data.checksum;
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <vTaskSensRead+0x15c>)
 8004014:	7f1b      	ldrb	r3, [r3, #28]
 8004016:	73fb      	strb	r3, [r7, #15]

//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 8004018:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <vTaskSensRead+0x164>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f00e fd9d 	bl	8012b5c <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8004022:	4b40      	ldr	r3, [pc, #256]	; (8004124 <vTaskSensRead+0x170>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	211e      	movs	r1, #30
 8004028:	4618      	mov	r0, r3
 800402a:	f00e fd39 	bl	8012aa0 <osMutexAcquire>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d113      	bne.n	800405c <vTaskSensRead+0xa8>
			sb2_baro = sb3_data.baro;
 8004034:	4b3c      	ldr	r3, [pc, #240]	; (8004128 <vTaskSensRead+0x174>)
 8004036:	4a36      	ldr	r2, [pc, #216]	; (8004110 <vTaskSensRead+0x15c>)
 8004038:	ca07      	ldmia	r2, {r0, r1, r2}
 800403a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 800403e:	4a3b      	ldr	r2, [pc, #236]	; (800412c <vTaskSensRead+0x178>)
 8004040:	4b33      	ldr	r3, [pc, #204]	; (8004110 <vTaskSensRead+0x15c>)
 8004042:	4614      	mov	r4, r2
 8004044:	330c      	adds	r3, #12
 8004046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			checksum = sb3_data.checksum;
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <vTaskSensRead+0x15c>)
 800404e:	7f1b      	ldrb	r3, [r3, #28]
 8004050:	73fb      	strb	r3, [r7, #15]
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 8004052:	4b34      	ldr	r3, [pc, #208]	; (8004124 <vTaskSensRead+0x170>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f00e fd80 	bl	8012b5c <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 800405c:	4b34      	ldr	r3, [pc, #208]	; (8004130 <vTaskSensRead+0x17c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	211e      	movs	r1, #30
 8004062:	4618      	mov	r0, r3
 8004064:	f00e fd1c 	bl	8012aa0 <osMutexAcquire>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d113      	bne.n	8004096 <vTaskSensRead+0xe2>
			sb1_baro = sb3_data.baro;
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <vTaskSensRead+0x180>)
 8004070:	4a27      	ldr	r2, [pc, #156]	; (8004110 <vTaskSensRead+0x15c>)
 8004072:	ca07      	ldmia	r2, {r0, r1, r2}
 8004074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8004078:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <vTaskSensRead+0x184>)
 800407a:	4b25      	ldr	r3, [pc, #148]	; (8004110 <vTaskSensRead+0x15c>)
 800407c:	4614      	mov	r4, r2
 800407e:	330c      	adds	r3, #12
 8004080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			checksum = sb3_data.checksum;
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <vTaskSensRead+0x15c>)
 8004088:	7f1b      	ldrb	r3, [r3, #28]
 800408a:	73fb      	strb	r3, [r7, #15]
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 800408c:	4b28      	ldr	r3, [pc, #160]	; (8004130 <vTaskSensRead+0x17c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f00e fd63 	bl	8012b5c <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8004096:	4b21      	ldr	r3, [pc, #132]	; (800411c <vTaskSensRead+0x168>)
 8004098:	6819      	ldr	r1, [r3, #0]
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <vTaskSensRead+0x168>)
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4826      	ldr	r0, [pc, #152]	; (800413c <vTaskSensRead+0x188>)
 80040a2:	f7fe ffcd 	bl	8003040 <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <vTaskSensRead+0x16c>)
 80040a8:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 80040ac:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <vTaskSensRead+0x16c>)
 80040b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 80040b4:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 80040b6:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <vTaskSensRead+0x16c>)
 80040b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 80040bc:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <vTaskSensRead+0x16c>)
 80040c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 80040c4:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <vTaskSensRead+0x16c>)
 80040c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 80040cc:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <vTaskSensRead+0x16c>)
 80040d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 80040d4:	4618      	mov	r0, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	9303      	str	r3, [sp, #12]
 80040da:	9002      	str	r0, [sp, #8]
 80040dc:	9101      	str	r1, [sp, #4]
 80040de:	9200      	str	r2, [sp, #0]
 80040e0:	4633      	mov	r3, r6
 80040e2:	462a      	mov	r2, r5
 80040e4:	4621      	mov	r1, r4
 80040e6:	4816      	ldr	r0, [pc, #88]	; (8004140 <vTaskSensRead+0x18c>)
 80040e8:	f7fe ffaa 	bl	8003040 <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <vTaskSensRead+0x168>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	2103      	movs	r1, #3
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7fe feca 	bl	8002e8c <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <vTaskSensRead+0x16c>)
 80040fa:	2202      	movs	r2, #2
 80040fc:	2103      	movs	r1, #3
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f7fe fec4 	bl	8002e8c <logSensor>

		osDelayUntil(tick_count);
 8004104:	6978      	ldr	r0, [r7, #20]
 8004106:	f00e fbf1 	bl	80128ec <osDelayUntil>
		tick_count += tick_update;
 800410a:	e764      	b.n	8003fd6 <vTaskSensRead+0x22>
 800410c:	10624dd3 	.word	0x10624dd3
 8004110:	200002ac 	.word	0x200002ac
 8004114:	2000aa50 	.word	0x2000aa50
 8004118:	2000ab24 	.word	0x2000ab24
 800411c:	20000290 	.word	0x20000290
 8004120:	2000029c 	.word	0x2000029c
 8004124:	20014dc8 	.word	0x20014dc8
 8004128:	20000254 	.word	0x20000254
 800412c:	20000260 	.word	0x20000260
 8004130:	2000aac0 	.word	0x2000aac0
 8004134:	20000218 	.word	0x20000218
 8004138:	20000224 	.word	0x20000224
 800413c:	0801a1bc 	.word	0x0801a1bc
 8004140:	0801a1dc 	.word	0x0801a1dc

08004144 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 800414c:	2220      	movs	r2, #32
 800414e:	4904      	ldr	r1, [pc, #16]	; (8004160 <HAL_SPI_RxCpltCallback+0x1c>)
 8004150:	4804      	ldr	r0, [pc, #16]	; (8004164 <HAL_SPI_RxCpltCallback+0x20>)
 8004152:	f005 fc8f 	bl	8009a74 <HAL_SPI_Receive_IT>

}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200002ac 	.word	0x200002ac
 8004164:	2000aa50 	.word	0x2000aa50

08004168 <vTaskStateEst>:
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]);




void vTaskStateEst(void *argument) {
 8004168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416a:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800416e:	af0c      	add	r7, sp, #48	; 0x30
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env environment;
	init_env(&environment);
 8004174:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc fefd 	bl	8000f78 <init_env>

	flight_phase_detection_t dummy_flight_phase_detection = { 0 };
 800417e:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	609a      	str	r2, [r3, #8]
	flight_phase_detection_t flight_phase_detection = { 0 };
 800418a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004196:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fae2 	bl	8003764 <reset_flight_phase_detection>
	reset_flight_phase_detection(&dummy_flight_phase_detection);
 80041a0:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fadd 	bl	8003764 <reset_flight_phase_detection>
	state_est_meas_t state_est_meas = { 0 };
 80041aa:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80041ae:	2278      	movs	r2, #120	; 0x78
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f012 ffd1 	bl	801715a <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 80041b8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80041bc:	4618      	mov	r0, r3
 80041be:	2378      	movs	r3, #120	; 0x78
 80041c0:	461a      	mov	r2, r3
 80041c2:	2100      	movs	r1, #0
 80041c4:	f012 ffc9 	bl	801715a <memset>

	/* Initialise States */
	ekf_state_t ekf_state = { 0 };
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	4618      	mov	r0, r3
 80041ce:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 80041d2:	461a      	mov	r2, r3
 80041d4:	2100      	movs	r1, #0
 80041d6:	f012 ffc0 	bl	801715a <memset>
	reset_ekf_state(&ekf_state);
 80041da:	f107 031c 	add.w	r3, r7, #28
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fa16 	bl	8004610 <reset_ekf_state>

	/* Initialise placeholder variables for sensor reading */
	float Placeholder_measurement[3] = { 0 };
 80041e4:	f107 0310 	add.w	r3, r7, #16
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	6053      	str	r3, [r2, #4]
 80041f0:	6093      	str	r3, [r2, #8]
	uint32_t Placeholder_timestamps[2] = { 0 };
 80041f2:	f107 0308 	add.w	r3, r7, #8
 80041f6:	461a      	mov	r2, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	6053      	str	r3, [r2, #4]



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80041fe:	f00e fa6f 	bl	80126e0 <osKernelGetTickCount>
 8004202:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8004206:	f00e fa93 	bl	8012730 <osKernelGetTickFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4bc8      	ldr	r3, [pc, #800]	; (8004530 <vTaskStateEst+0x3c8>)
 800420e:	fba3 2302 	umull	r2, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
	for (;;) {
		tick_count += tick_update;
 8004218:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 800421c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004220:	4413      	add	r3, r2
 8004222:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

		/* Acquire the Sensor data */
		/* Sensor Board 1 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004226:	4bc3      	ldr	r3, [pc, #780]	; (8004534 <vTaskStateEst+0x3cc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f00e fce6 	bl	8012bfc <osMutexGetOwner>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d160      	bne.n	80042f8 <vTaskStateEst+0x190>
			Placeholder_measurement[0] = (float) (sb1_data.baro.pressure);
 8004236:	4bc0      	ldr	r3, [pc, #768]	; (8004538 <vTaskStateEst+0x3d0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004242:	f107 0310 	add.w	r3, r7, #16
 8004246:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb1_data.baro.ts;
 800424a:	4bbb      	ldr	r3, [pc, #748]	; (8004538 <vTaskStateEst+0x3d0>)
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb1_data.imu.acc_z)) / 1024;
 8004254:	4bb8      	ldr	r3, [pc, #736]	; (8004538 <vTaskStateEst+0x3d0>)
 8004256:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004262:	eddf 6ab6 	vldr	s13, [pc, #728]	; 800453c <vTaskStateEst+0x3d4>
 8004266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800426a:	f107 0310 	add.w	r3, r7, #16
 800426e:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb1_data.imu.ts;
 8004272:	4bb1      	ldr	r3, [pc, #708]	; (8004538 <vTaskStateEst+0x3d0>)
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	f107 0308 	add.w	r3, r7, #8
 800427a:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb1_data.baro.temperature)) / 100;
 800427c:	4bae      	ldr	r3, [pc, #696]	; (8004538 <vTaskStateEst+0x3d0>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004288:	eddf 6aad 	vldr	s13, [pc, #692]	; 8004540 <vTaskStateEst+0x3d8>
 800428c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8004298:	4ba6      	ldr	r3, [pc, #664]	; (8004534 <vTaskStateEst+0x3cc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f00e fcad 	bl	8012bfc <osMutexGetOwner>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d127      	bne.n	80042f8 <vTaskStateEst+0x190>
				state_est_meas.baro_state_est[0].pressure = Placeholder_measurement[0];
 80042a8:	f107 0310 	add.w	r3, r7, #16
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
				state_est_meas.baro_state_est[0].temperature = Placeholder_measurement[2];
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
				state_est_meas.baro_state_est[0].ts = Placeholder_timestamps[0];
 80042bc:	f107 0308 	add.w	r3, r7, #8
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348

				state_est_meas.imu_state_est[0].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80042c6:	f107 0310 	add.w	r3, r7, #16
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fc f95b 	bl	8000588 <__aeabi_f2d>
 80042d2:	a395      	add	r3, pc, #596	; (adr r3, 8004528 <vTaskStateEst+0x3c0>)
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f7fc f9ae 	bl	8000638 <__aeabi_dmul>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	4618      	mov	r0, r3
 80042e2:	4621      	mov	r1, r4
 80042e4:	f7fc fc78 	bl	8000bd8 <__aeabi_d2f>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
				state_est_meas.imu_state_est[0].ts = Placeholder_timestamps[1];
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
			}
		}

		/* Sensor Board 2 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 80042f8:	4b8e      	ldr	r3, [pc, #568]	; (8004534 <vTaskStateEst+0x3cc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f00e fc7d 	bl	8012bfc <osMutexGetOwner>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d160      	bne.n	80043ca <vTaskStateEst+0x262>
			Placeholder_measurement[0] = (float) (sb2_data.baro.pressure);
 8004308:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <vTaskStateEst+0x3dc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb2_data.baro.ts;
 800431c:	4b89      	ldr	r3, [pc, #548]	; (8004544 <vTaskStateEst+0x3dc>)
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	f107 0308 	add.w	r3, r7, #8
 8004324:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb2_data.imu.acc_z)) / 1024;
 8004326:	4b87      	ldr	r3, [pc, #540]	; (8004544 <vTaskStateEst+0x3dc>)
 8004328:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004334:	eddf 6a81 	vldr	s13, [pc, #516]	; 800453c <vTaskStateEst+0x3d4>
 8004338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800433c:	f107 0310 	add.w	r3, r7, #16
 8004340:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb2_data.imu.ts;
 8004344:	4b7f      	ldr	r3, [pc, #508]	; (8004544 <vTaskStateEst+0x3dc>)
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	f107 0308 	add.w	r3, r7, #8
 800434c:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb2_data.baro.temperature)) / 100;
 800434e:	4b7d      	ldr	r3, [pc, #500]	; (8004544 <vTaskStateEst+0x3dc>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800435a:	eddf 6a79 	vldr	s13, [pc, #484]	; 8004540 <vTaskStateEst+0x3d8>
 800435e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004362:	f107 0310 	add.w	r3, r7, #16
 8004366:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 800436a:	4b72      	ldr	r3, [pc, #456]	; (8004534 <vTaskStateEst+0x3cc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f00e fc44 	bl	8012bfc <osMutexGetOwner>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d127      	bne.n	80043ca <vTaskStateEst+0x262>
				state_est_meas.baro_state_est[1].pressure = Placeholder_measurement[0];
 800437a:	f107 0310 	add.w	r3, r7, #16
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
				state_est_meas.baro_state_est[1].temperature = Placeholder_measurement[2];
 8004384:	f107 0310 	add.w	r3, r7, #16
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
				state_est_meas.baro_state_est[1].ts = Placeholder_timestamps[0];
 800438e:	f107 0308 	add.w	r3, r7, #8
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354

				state_est_meas.imu_state_est[1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8004398:	f107 0310 	add.w	r3, r7, #16
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc f8f2 	bl	8000588 <__aeabi_f2d>
 80043a4:	a360      	add	r3, pc, #384	; (adr r3, 8004528 <vTaskStateEst+0x3c0>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f7fc f945 	bl	8000638 <__aeabi_dmul>
 80043ae:	4603      	mov	r3, r0
 80043b0:	460c      	mov	r4, r1
 80043b2:	4618      	mov	r0, r3
 80043b4:	4621      	mov	r1, r4
 80043b6:	f7fc fc0f 	bl	8000bd8 <__aeabi_d2f>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
				state_est_meas.imu_state_est[1].ts = Placeholder_timestamps[1];
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
			}
		}

		/* Sensor Board 3 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 80043ca:	4b5a      	ldr	r3, [pc, #360]	; (8004534 <vTaskStateEst+0x3cc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f00e fc14 	bl	8012bfc <osMutexGetOwner>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d160      	bne.n	800449c <vTaskStateEst+0x334>
			Placeholder_measurement[0] = (float)(sb3_data.baro.pressure);
 80043da:	4b5b      	ldr	r3, [pc, #364]	; (8004548 <vTaskStateEst+0x3e0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e6:	f107 0310 	add.w	r3, r7, #16
 80043ea:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb3_data.baro.ts;
 80043ee:	4b56      	ldr	r3, [pc, #344]	; (8004548 <vTaskStateEst+0x3e0>)
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float)(sb3_data.imu.acc_z)) / 1024;
 80043f8:	4b53      	ldr	r3, [pc, #332]	; (8004548 <vTaskStateEst+0x3e0>)
 80043fa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004406:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800453c <vTaskStateEst+0x3d4>
 800440a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800440e:	f107 0310 	add.w	r3, r7, #16
 8004412:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb3_data.imu.ts;
 8004416:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <vTaskStateEst+0x3e0>)
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	f107 0308 	add.w	r3, r7, #8
 800441e:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float)(sb3_data.baro.temperature)) / 100;
 8004420:	4b49      	ldr	r3, [pc, #292]	; (8004548 <vTaskStateEst+0x3e0>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800442c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004540 <vTaskStateEst+0x3d8>
 8004430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004434:	f107 0310 	add.w	r3, r7, #16
 8004438:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 800443c:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <vTaskStateEst+0x3cc>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f00e fbdb 	bl	8012bfc <osMutexGetOwner>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d127      	bne.n	800449c <vTaskStateEst+0x334>
				state_est_meas.baro_state_est[2].pressure = Placeholder_measurement[0];
 800444c:	f107 0310 	add.w	r3, r7, #16
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
				state_est_meas.baro_state_est[2].temperature = Placeholder_measurement[2];
 8004456:	f107 0310 	add.w	r3, r7, #16
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
				state_est_meas.baro_state_est[2].ts = Placeholder_timestamps[0];
 8004460:	f107 0308 	add.w	r3, r7, #8
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

				state_est_meas.imu_state_est[2].acc_x = Placeholder_measurement[1] * GRAVITATION;
 800446a:	f107 0310 	add.w	r3, r7, #16
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc f889 	bl	8000588 <__aeabi_f2d>
 8004476:	a32c      	add	r3, pc, #176	; (adr r3, 8004528 <vTaskStateEst+0x3c0>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc f8dc 	bl	8000638 <__aeabi_dmul>
 8004480:	4603      	mov	r3, r0
 8004482:	460c      	mov	r4, r1
 8004484:	4618      	mov	r0, r3
 8004486:	4621      	mov	r1, r4
 8004488:	f7fc fba6 	bl	8000bd8 <__aeabi_d2f>
 800448c:	4603      	mov	r3, r0
 800448e:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
				state_est_meas.imu_state_est[2].ts = Placeholder_timestamps[1];
 8004492:	f107 0308 	add.w	r3, r7, #8
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
			}
		}

		/* get new Phase Detection*/
		if(osMutexGetOwner(fsm_mutex) == NULL){
 800449c:	4b2b      	ldr	r3, [pc, #172]	; (800454c <vTaskStateEst+0x3e4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f00e fbab 	bl	8012bfc <osMutexGetOwner>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d114      	bne.n	80044d6 <vTaskStateEst+0x36e>
			dummy_flight_phase_detection = global_flight_phase_detection;
 80044ac:	4a28      	ldr	r2, [pc, #160]	; (8004550 <vTaskStateEst+0x3e8>)
 80044ae:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80044b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80044b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(fsm_mutex) == NULL){
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <vTaskStateEst+0x3e4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f00e fb9d 	bl	8012bfc <osMutexGetOwner>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <vTaskStateEst+0x36e>
				flight_phase_detection = dummy_flight_phase_detection;
 80044c8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80044cc:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 80044d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80044d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			}
		}

		/* process measurements */
		process_measurements(&ekf_state, &state_est_meas, &state_est_meas_prior, &environment);
 80044d6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80044da:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 80044de:	f507 7150 	add.w	r1, r7, #832	; 0x340
 80044e2:	f107 001c 	add.w	r0, r7, #28
 80044e6:	f000 fb0f 	bl	8004b08 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&ekf_state, &flight_phase_detection, &environment);
 80044ea:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80044ee:	f507 716e 	add.w	r1, r7, #952	; 0x3b8
 80044f2:	f107 031c 	add.w	r3, r7, #28
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fc92 	bl	8004e20 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		ekf_prediction(&ekf_state);
 80044fc:	f107 031c 	add.w	r3, r7, #28
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f919 	bl	8004738 <ekf_prediction>

		/* update Step */
		if (ekf_state.num_z_active > 0) {
 8004506:	f107 031c 	add.w	r3, r7, #28
 800450a:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d020      	beq.n	8004554 <vTaskStateEst+0x3ec>
			select_ekf_observation_matrices(&ekf_state);
 8004512:	f107 031c 	add.w	r3, r7, #28
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f97e 	bl	8004818 <select_ekf_observation_matrices>
			ekf_update(&ekf_state);
 800451c:	f107 031c 	add.w	r3, r7, #28
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f9b7 	bl	8004894 <ekf_update>
 8004526:	e01f      	b.n	8004568 <vTaskStateEst+0x400>
 8004528:	3a92a305 	.word	0x3a92a305
 800452c:	40239d01 	.word	0x40239d01
 8004530:	51eb851f 	.word	0x51eb851f
 8004534:	2000aac0 	.word	0x2000aac0
 8004538:	20000234 	.word	0x20000234
 800453c:	44800000 	.word	0x44800000
 8004540:	42c80000 	.word	0x42c80000
 8004544:	20000270 	.word	0x20000270
 8004548:	200002ac 	.word	0x200002ac
 800454c:	2000887c 	.word	0x2000887c
 8004550:	2000031c 	.word	0x2000031c
		}
		else
		{
			memcpy(ekf_state.x_est, ekf_state.x_priori, sizeof(ekf_state.x_priori));
 8004554:	f107 031c 	add.w	r3, r7, #28
 8004558:	f107 021c 	add.w	r2, r7, #28
 800455c:	33e0      	adds	r3, #224	; 0xe0
 800455e:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8004562:	ca07      	ldmia	r2, {r0, r1, r2}
 8004564:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8004568:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800456c:	4618      	mov	r0, r3
 800456e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004572:	2278      	movs	r2, #120	; 0x78
 8004574:	4619      	mov	r1, r3
 8004576:	f012 fde5 	bl	8017144 <memcpy>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <vTaskStateEst+0x498>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	210a      	movs	r1, #10
 8004580:	4618      	mov	r0, r3
 8004582:	f00e fa8d 	bl	8012aa0 <osMutexAcquire>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <vTaskStateEst+0x43a>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			update_state_est_data(&state_est_data, &ekf_state);
 800458c:	f107 031c 	add.w	r3, r7, #28
 8004590:	4619      	mov	r1, r3
 8004592:	481c      	ldr	r0, [pc, #112]	; (8004604 <vTaskStateEst+0x49c>)
 8004594:	f000 fa6a 	bl	8004a6c <update_state_est_data>
			osMutexRelease(state_est_mutex);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <vTaskStateEst+0x498>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f00e fadd 	bl	8012b5c <osMutexRelease>
		}

		/* Update Environment for FSM */
		if(osMutexAcquire(environment_mutex, 10) == osOK){
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <vTaskStateEst+0x4a0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	210a      	movs	r1, #10
 80045a8:	4618      	mov	r0, r3
 80045aa:	f00e fa79 	bl	8012aa0 <osMutexAcquire>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <vTaskStateEst+0x464>
			global_env = environment;
 80045b4:	4b15      	ldr	r3, [pc, #84]	; (800460c <vTaskStateEst+0x4a4>)
 80045b6:	461c      	mov	r4, r3
 80045b8:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80045bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(environment_mutex);
 80045c2:	4b11      	ldr	r3, [pc, #68]	; (8004608 <vTaskStateEst+0x4a0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f00e fac8 	bl	8012b5c <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data);
 80045cc:	f00e f888 	bl	80126e0 <osKernelGetTickCount>
 80045d0:	4684      	mov	ip, r0
 80045d2:	4e0c      	ldr	r6, [pc, #48]	; (8004604 <vTaskStateEst+0x49c>)
 80045d4:	466d      	mov	r5, sp
 80045d6:	f106 040c 	add.w	r4, r6, #12
 80045da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80045ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80045ee:	4660      	mov	r0, ip
 80045f0:	f7fe fcf2 	bl	8002fd8 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 80045f4:	f8d7 03e4 	ldr.w	r0, [r7, #996]	; 0x3e4
 80045f8:	f00e f978 	bl	80128ec <osDelayUntil>
		tick_count += tick_update;
 80045fc:	e60c      	b.n	8004218 <vTaskStateEst+0xb0>
 80045fe:	bf00      	nop
 8004600:	2000ab28 	.word	0x2000ab28
 8004604:	200002cc 	.word	0x200002cc
 8004608:	200089c4 	.word	0x200089c4
 800460c:	2000030c 	.word	0x2000030c

08004610 <reset_ekf_state>:
	}
}


void reset_ekf_state(ekf_state_t *ekf_state){
 8004610:	b5b0      	push	{r4, r5, r7, lr}
 8004612:	b0b0      	sub	sp, #192	; 0xc0
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
        memcpy(ekf_state->Ad, A_init, sizeof(ekf_state->Ad));
        memcpy(ekf_state->Bd, B_init, sizeof(ekf_state->Bd));
        memcpy(ekf_state->Gd, G_init, sizeof(ekf_state->Gd));
    }
    else if (STATE_ESTIMATION_FREQUENCY == 100) {
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8004618:	4b44      	ldr	r3, [pc, #272]	; (800472c <reset_ekf_state+0x11c>)
 800461a:	f107 040c 	add.w	r4, r7, #12
 800461e:	461d      	mov	r5, r3
 8004620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800462c:	4a40      	ldr	r2, [pc, #256]	; (8004730 <reset_ekf_state+0x120>)
 800462e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004632:	ca07      	ldmia	r2, {r0, r1, r2}
 8004634:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8004638:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <reset_ekf_state+0x120>)
 800463a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800463e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(ekf_state->Ad, A_init, sizeof(ekf_state->Ad));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f107 010c 	add.w	r1, r7, #12
 800464a:	2224      	movs	r2, #36	; 0x24
 800464c:	4618      	mov	r0, r3
 800464e:	f012 fd79 	bl	8017144 <memcpy>
        memcpy(ekf_state->Bd, B_init, sizeof(ekf_state->Bd));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3348      	adds	r3, #72	; 0x48
 8004656:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800465a:	220c      	movs	r2, #12
 800465c:	4618      	mov	r0, r3
 800465e:	f012 fd71 	bl	8017144 <memcpy>
        memcpy(ekf_state->Gd, G_init, sizeof(ekf_state->Gd));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3354      	adds	r3, #84	; 0x54
 8004666:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800466a:	220c      	movs	r2, #12
 800466c:	4618      	mov	r0, r3
 800466e:	f012 fd69 	bl	8017144 <memcpy>
        memset(ekf_state->Ad, 0, sizeof(ekf_state->Ad));
        memset(ekf_state->Bd, 0, sizeof(ekf_state->Bd));
        memset(ekf_state->Gd, 0, sizeof(ekf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <reset_ekf_state+0x124>)
 800468c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8004690:	461d      	mov	r5, r3
 8004692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	6023      	str	r3, [r4, #0]

    memcpy(ekf_state->x_est, x_est_init, sizeof(x_est_init));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	33e0      	adds	r3, #224	; 0xe0
 80046a2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80046a6:	220c      	movs	r2, #12
 80046a8:	4618      	mov	r0, r3
 80046aa:	f012 fd4b 	bl	8017144 <memcpy>
    memcpy(ekf_state->P_est, P_est_init, sizeof(P_est_init));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	33ec      	adds	r3, #236	; 0xec
 80046b2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	4618      	mov	r0, r3
 80046ba:	f012 fd43 	bl	8017144 <memcpy>

    memset(ekf_state->Q, 0, NUMBER_NOISE*NUMBER_NOISE*sizeof(ekf_state->Q[0][0]));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	33b4      	adds	r3, #180	; 0xb4
 80046c2:	2204      	movs	r2, #4
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f012 fd47 	bl	801715a <memset>
    memset(ekf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(ekf_state->R[0][0]));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	33b8      	adds	r3, #184	; 0xb8
 80046d0:	2224      	movs	r2, #36	; 0x24
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f012 fd40 	bl	801715a <memset>

    memset(ekf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(ekf_state->z[0]));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80046e0:	220c      	movs	r2, #12
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f012 fd38 	bl	801715a <memset>
    memset(ekf_state->z_active, 0, NUMBER_MEASUREMENTS*sizeof(ekf_state->z_active[0]));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80046f0:	2203      	movs	r2, #3
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f012 fd30 	bl	801715a <memset>
    ekf_state->num_z_active = 0;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7

    transpose(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->Ad_T);
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	2103      	movs	r1, #3
 800470a:	2003      	movs	r0, #3
 800470c:	f7fd f96f 	bl	80019ee <transpose>
    transpose(NUMBER_STATES, NUMBER_NOISE, ekf_state->Gd, ekf_state->Gd_T);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3360      	adds	r3, #96	; 0x60
 800471a:	2101      	movs	r1, #1
 800471c:	2003      	movs	r0, #3
 800471e:	f7fd f966 	bl	80019ee <transpose>
}
 8004722:	bf00      	nop
 8004724:	37c0      	adds	r7, #192	; 0xc0
 8004726:	46bd      	mov	sp, r7
 8004728:	bdb0      	pop	{r4, r5, r7, pc}
 800472a:	bf00      	nop
 800472c:	0801a21c 	.word	0x0801a21c
 8004730:	0801a240 	.word	0x0801a240
 8004734:	0801a24c 	.word	0x0801a24c

08004738 <ekf_prediction>:

void ekf_prediction(ekf_state_t *ekf_state){
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af04      	add	r7, sp, #16
 800473e:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->x_est, ekf_state->x_priori, true);
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800474e:	2201      	movs	r2, #1
 8004750:	9201      	str	r2, [sp, #4]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4603      	mov	r3, r0
 8004756:	460a      	mov	r2, r1
 8004758:	2103      	movs	r1, #3
 800475a:	2003      	movs	r0, #3
 800475c:	f7fd fb71 	bl	8001e42 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, ekf_state->Bd, ekf_state->u, ekf_state->x_priori, false);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004772:	2200      	movs	r2, #0
 8004774:	9201      	str	r2, [sp, #4]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	4603      	mov	r3, r0
 800477a:	460a      	mov	r2, r1
 800477c:	2101      	movs	r1, #1
 800477e:	2003      	movs	r0, #3
 8004780:	f7fd fb5f 	bl	8001e42 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Ad, ekf_state->P_est, ekf_state->Placeholder_Ad_mult_P_est, true);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	33ec      	adds	r3, #236	; 0xec
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8004790:	2101      	movs	r1, #1
 8004792:	9102      	str	r1, [sp, #8]
 8004794:	9201      	str	r2, [sp, #4]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	4603      	mov	r3, r0
 800479a:	2203      	movs	r2, #3
 800479c:	2103      	movs	r1, #3
 800479e:	2003      	movs	r0, #3
 80047a0:	f7fd fab5 	bl	8001d0e <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_NOISE, ekf_state->Gd, ekf_state->Q, ekf_state->Placeholder_Gd_mult_Q, true);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	33b4      	adds	r3, #180	; 0xb4
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
 80047b4:	2101      	movs	r1, #1
 80047b6:	9102      	str	r1, [sp, #8]
 80047b8:	9201      	str	r2, [sp, #4]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4603      	mov	r3, r0
 80047be:	2201      	movs	r2, #1
 80047c0:	2101      	movs	r1, #1
 80047c2:	2003      	movs	r0, #3
 80047c4:	f7fd faa3 	bl	8001d0e <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_Ad_mult_P_est, ekf_state->Ad_T, ekf_state->P_priori, true);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3324      	adds	r3, #36	; 0x24
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 80047d8:	2101      	movs	r1, #1
 80047da:	9102      	str	r1, [sp, #8]
 80047dc:	9201      	str	r2, [sp, #4]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	4603      	mov	r3, r0
 80047e2:	2203      	movs	r2, #3
 80047e4:	2103      	movs	r1, #3
 80047e6:	2003      	movs	r0, #3
 80047e8:	f7fd fa91 	bl	8001d0e <matmul>
    matmul(NUMBER_STATES, NUMBER_NOISE, NUMBER_STATES, ekf_state->Placeholder_Gd_mult_Q, ekf_state->Gd_T, ekf_state->P_priori, false);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 70f6 	add.w	r0, r3, #492	; 0x1ec
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3360      	adds	r3, #96	; 0x60
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 80047fc:	2100      	movs	r1, #0
 80047fe:	9102      	str	r1, [sp, #8]
 8004800:	9201      	str	r2, [sp, #4]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	4603      	mov	r3, r0
 8004806:	2203      	movs	r2, #3
 8004808:	2101      	movs	r1, #1
 800480a:	2003      	movs	r0, #3
 800480c:	f7fd fa7f 	bl	8001d0e <matmul>
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <select_ekf_observation_matrices>:

void select_ekf_observation_matrices(ekf_state_t *ekf_state){
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
    memset(ekf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(ekf_state->H[0][0]));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	336c      	adds	r3, #108	; 0x6c
 8004824:	2224      	movs	r2, #36	; 0x24
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f012 fc96 	bl	801715a <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e01e      	b.n	8004872 <select_ekf_observation_matrices+0x5a>
        if (ekf_state->z_active[i]) {
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <select_ekf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            ekf_state->H[i][0] = 1;
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	336c      	adds	r3, #108	; 0x6c
 8004854:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <select_ekf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            ekf_state->R[i][i] = 0;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	4413      	add	r3, r2
 8004864:	33b8      	adds	r3, #184	; 0xb8
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b02      	cmp	r3, #2
 8004876:	dddd      	ble.n	8004834 <select_ekf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->H, ekf_state->H_T);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3390      	adds	r3, #144	; 0x90
 8004882:	2103      	movs	r1, #3
 8004884:	2003      	movs	r0, #3
 8004886:	f7fd f8b2 	bl	80019ee <transpose>
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <ekf_update>:

void ekf_update(ekf_state_t *ekf_state) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af04      	add	r7, sp, #16
 800489a:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->H, ekf_state->x_priori, ekf_state->y, true);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f503 7088 	add.w	r0, r3, #272	; 0x110
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80048ae:	2201      	movs	r2, #1
 80048b0:	9201      	str	r2, [sp, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	4603      	mov	r3, r0
 80048b6:	460a      	mov	r2, r1
 80048b8:	2103      	movs	r1, #3
 80048ba:	2003      	movs	r0, #3
 80048bc:	f7fd fac1 	bl	8001e42 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->y, ekf_state->y);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80048d2:	2003      	movs	r0, #3
 80048d4:	f7fd f90a 	bl	8001aec <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, ekf_state->H, ekf_state->P_priori, ekf_state->Placeholder_H_mult_P_priori, true);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 80048ea:	2101      	movs	r1, #1
 80048ec:	9102      	str	r1, [sp, #8]
 80048ee:	9201      	str	r2, [sp, #4]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	4603      	mov	r3, r0
 80048f4:	2203      	movs	r2, #3
 80048f6:	2103      	movs	r1, #3
 80048f8:	2003      	movs	r0, #3
 80048fa:	f7fd fa08 	bl	8001d0e <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->Placeholder_H_mult_P_priori, ekf_state->H_T, ekf_state->S, true);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3390      	adds	r3, #144	; 0x90
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 800490e:	2101      	movs	r1, #1
 8004910:	9102      	str	r1, [sp, #8]
 8004912:	9201      	str	r2, [sp, #4]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4603      	mov	r3, r0
 8004918:	2203      	movs	r2, #3
 800491a:	2103      	movs	r1, #3
 800491c:	2003      	movs	r0, #3
 800491e:	f7fd f9f6 	bl	8001d0e <matmul>
    matadd(NUMBER_MEASUREMENTS,  NUMBER_MEASUREMENTS, ekf_state->S, ekf_state->R, ekf_state->S);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	460b      	mov	r3, r1
 8004938:	2103      	movs	r1, #3
 800493a:	2003      	movs	r0, #3
 800493c:	f7fd f901 	bl	8001b42 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(ekf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(ekf_state->S_inv[0][0]));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f012 fc05 	bl	801715a <memset>
    inverse(NUMBER_MEASUREMENTS, ekf_state->S, ekf_state->S_inv, LAMBDA);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800495c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8004a68 <ekf_update+0x1d4>
 8004960:	461a      	mov	r2, r3
 8004962:	2003      	movs	r0, #3
 8004964:	f7fd fd1c 	bl	80023a0 <inverse>

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->P_priori, ekf_state->H_T, ekf_state->Placeholder_P_priori_mult_H_T, true);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3390      	adds	r3, #144	; 0x90
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 8004978:	2101      	movs	r1, #1
 800497a:	9102      	str	r1, [sp, #8]
 800497c:	9201      	str	r2, [sp, #4]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	4603      	mov	r3, r0
 8004982:	2203      	movs	r2, #3
 8004984:	2103      	movs	r1, #3
 8004986:	2003      	movs	r0, #3
 8004988:	f7fd f9c1 	bl	8001d0e <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, ekf_state->Placeholder_P_priori_mult_H_T, ekf_state->S_inv, ekf_state->K, true);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 800499e:	2101      	movs	r1, #1
 80049a0:	9102      	str	r1, [sp, #8]
 80049a2:	9201      	str	r2, [sp, #4]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4603      	mov	r3, r0
 80049a8:	2203      	movs	r2, #3
 80049aa:	2103      	movs	r1, #3
 80049ac:	2003      	movs	r0, #3
 80049ae:	f7fd f9ae 	bl	8001d0e <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, ekf_state->K, ekf_state->y, ekf_state->x_est, true);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 70a6 	add.w	r0, r3, #332	; 0x14c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	33e0      	adds	r3, #224	; 0xe0
 80049c2:	2201      	movs	r2, #1
 80049c4:	9201      	str	r2, [sp, #4]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4603      	mov	r3, r0
 80049ca:	460a      	mov	r2, r1
 80049cc:	2103      	movs	r1, #3
 80049ce:	2003      	movs	r0, #3
 80049d0:	f7fd fa37 	bl	8001e42 <matvecprod>
    vecadd(NUMBER_STATES, ekf_state->x_priori, ekf_state->x_est, ekf_state->x_est);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f503 7188 	add.w	r1, r3, #272	; 0x110
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	33e0      	adds	r3, #224	; 0xe0
 80049e4:	2003      	movs	r0, #3
 80049e6:	f7fd f856 	bl	8001a96 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, ekf_state->Placeholder_eye);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80049f0:	4619      	mov	r1, r3
 80049f2:	2003      	movs	r0, #3
 80049f4:	f7fc ffaf 	bl	8001956 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, ekf_state->K, ekf_state->H, ekf_state->Placeholder_K_mult_H, true);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	336c      	adds	r3, #108	; 0x6c
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	f502 7222 	add.w	r2, r2, #648	; 0x288
 8004a08:	2101      	movs	r1, #1
 8004a0a:	9102      	str	r1, [sp, #8]
 8004a0c:	9201      	str	r2, [sp, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	4603      	mov	r3, r0
 8004a12:	2203      	movs	r2, #3
 8004a14:	2103      	movs	r1, #3
 8004a16:	2003      	movs	r0, #3
 8004a18:	f7fd f979 	bl	8001d0e <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, ekf_state->Placeholder_eye, ekf_state->Placeholder_K_mult_H, ekf_state->Placeholder_P_est);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f503 7219 	add.w	r2, r3, #612	; 0x264
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f503 7122 	add.w	r1, r3, #648	; 0x288
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	460b      	mov	r3, r1
 8004a32:	2103      	movs	r1, #3
 8004a34:	2003      	movs	r0, #3
 8004a36:	f7fd f8f7 	bl	8001c28 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, ekf_state->Placeholder_P_est, ekf_state->P_priori, ekf_state->P_est, true);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f503 7010 	add.w	r0, r3, #576	; 0x240
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	32ec      	adds	r2, #236	; 0xec
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	9102      	str	r1, [sp, #8]
 8004a4e:	9201      	str	r2, [sp, #4]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4603      	mov	r3, r0
 8004a54:	2203      	movs	r2, #3
 8004a56:	2103      	movs	r1, #3
 8004a58:	2003      	movs	r0, #3
 8004a5a:	f7fd f958 	bl	8001d0e <matmul>
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	38d1b717 	.word	0x38d1b717

08004a6c <update_state_est_data>:

void update_state_est_data(state_est_data_t *state_est_data, ekf_state_t *ekf_state) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(ekf_state->x_est[0] * 1000);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8004a7c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004b04 <update_state_est_data+0x98>
 8004a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a88:	ee17 2a90 	vmov	r2, s15
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(ekf_state->x_est[1] * 1000);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004a96:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004b04 <update_state_est_data+0x98>
 8004a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa2:	ee17 2a90 	vmov	r2, s15
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(ekf_state->x_est[1] * 1000);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004ab0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b04 <update_state_est_data+0x98>
 8004ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004abc:	ee17 2a90 	vmov	r2, s15
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(ekf_state->u[0] * 1000);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8004aca:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004b04 <update_state_est_data+0x98>
 8004ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad6:	ee17 2a90 	vmov	r2, s15
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(ekf_state->u[0] * 1000);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8004ae4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004b04 <update_state_est_data+0x98>
 8004ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af0:	ee17 2a90 	vmov	r2, s15
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	447a0000 	.word	0x447a0000

08004b08 <process_measurements>:

void process_measurements(ekf_state_t *ekf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior, env *env) {
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b095      	sub	sp, #84	; 0x54
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
    float temp_meas[NUMBER_SENSORBOARDS];
    bool temp_meas_active[NUMBER_SENSORBOARDS];
    float acc_x_meas[NUMBER_SENSORBOARDS];
    bool acc_x_meas_active[NUMBER_SENSORBOARDS];

    for (int i = 0; i < NUMBER_SENSORBOARDS; i++){
 8004b16:	2300      	movs	r3, #0
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
 8004b1a:	e0b0      	b.n	8004c7e <process_measurements+0x176>
        /* barometer */
        if (state_est_meas->baro_state_est[i].ts > state_est_meas_prior->baro_state_est[i].ts || state_est_meas->baro_state_est[i].ts == 0) {
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b20:	4613      	mov	r3, r2
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	6819      	ldr	r1, [r3, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4403      	add	r3, r0
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d80a      	bhi.n	8004b5a <process_measurements+0x52>
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b48:	4613      	mov	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	3308      	adds	r3, #8
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d12b      	bne.n	8004bb2 <process_measurements+0xaa>
            ekf_state->z[i] = state_est_meas->baro_state_est[i].pressure;
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b5e:	4613      	mov	r3, r2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b6e:	3350      	adds	r3, #80	; 0x50
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	601a      	str	r2, [r3, #0]
            ekf_state->z_active[i] = true;
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004b80:	2201      	movs	r2, #1
 8004b82:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_state_est[i].temperature;
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b88:	4613      	mov	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	3304      	adds	r3, #4
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004b9e:	440b      	add	r3, r1
 8004ba0:	3b20      	subs	r3, #32
 8004ba2:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8004ba4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	4413      	add	r3, r2
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e01d      	b.n	8004bee <process_measurements+0xe6>
        } else {
            ekf_state->z[i] = 0;
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb6:	3350      	adds	r3, #80	; 0x50
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
            ekf_state->z_active[i] = false;
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8004bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bd8:	4413      	add	r3, r2
 8004bda:	3b20      	subs	r3, #32
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8004be2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be8:	4413      	add	r3, r2
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_state_est[i].ts > state_est_meas_prior->imu_state_est[i].ts || state_est_meas->imu_state_est[i].ts == 0) {
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	333c      	adds	r3, #60	; 0x3c
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4403      	add	r3, r0
 8004c0e:	333c      	adds	r3, #60	; 0x3c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4299      	cmp	r1, r3
 8004c14:	d80a      	bhi.n	8004c2c <process_measurements+0x124>
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	333c      	adds	r3, #60	; 0x3c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d116      	bne.n	8004c5a <process_measurements+0x152>
            acc_x_meas[i] = state_est_meas->imu_state_est[i].acc_x;
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3330      	adds	r3, #48	; 0x30
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004c46:	440b      	add	r3, r1
 8004c48:	3b30      	subs	r3, #48	; 0x30
 8004c4a:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8004c4c:	f107 0214 	add.w	r2, r7, #20
 8004c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c52:	4413      	add	r3, r2
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e00e      	b.n	8004c78 <process_measurements+0x170>
        } else {
            acc_x_meas[i] = 0;
 8004c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c62:	4413      	add	r3, r2
 8004c64:	3b30      	subs	r3, #48	; 0x30
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8004c6c:	f107 0214 	add.w	r2, r7, #20
 8004c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c72:	4413      	add	r3, r2
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUMBER_SENSORBOARDS; i++){
 8004c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f77f af4b 	ble.w	8004b1c <process_measurements+0x14>
        }
    }

    /* eliminate barometer measurements */
    /* TODO @maxi: Replace with sensor elimination by extrapolation */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->z_active);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004c92:	461a      	mov	r2, r3
 8004c94:	2003      	movs	r0, #3
 8004c96:	f000 f973 	bl	8004f80 <sensor_elimination_by_stdev>

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8004c9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	2003      	movs	r0, #3
 8004ca6:	f000 f96b 	bl	8004f80 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8004caa:	f107 0214 	add.w	r2, r7, #20
 8004cae:	f107 0318 	add.w	r3, r7, #24
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	2003      	movs	r0, #3
 8004cb6:	f000 f963 	bl	8004f80 <sensor_elimination_by_stdev>

    /* update num_z_active */
    ekf_state->num_z_active = 0;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    ekf_state->u[0] = 0;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    int32_t num_acc_x_meas_active = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	643b      	str	r3, [r7, #64]	; 0x40
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t num_temp_meas_active = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cde:	e04a      	b.n	8004d76 <process_measurements+0x26e>
        if (ekf_state->z_active[i]){
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <process_measurements+0x1f8>
            ekf_state->num_z_active += 1;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 31c7 	ldrb.w	r3, [r3, #455]	; 0x1c7
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
        }
        if (acc_x_meas_active[i]) {
 8004d00:	f107 0214 	add.w	r2, r7, #20
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d012      	beq.n	8004d34 <process_measurements+0x22c>
            ekf_state->u[0] += acc_x_meas[i];
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3b30      	subs	r3, #48	; 0x30
 8004d20:	edd3 7a00 	vldr	s15, [r3]
 8004d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
            num_acc_x_meas_active += 1;
 8004d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d30:	3301      	adds	r3, #1
 8004d32:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3b20      	subs	r3, #32
 8004d40:	edd3 7a00 	vldr	s15, [r3]
 8004d44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4c:	d010      	beq.n	8004d70 <process_measurements+0x268>
            temp_meas_mean += temp_meas[i];
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d56:	4413      	add	r3, r2
 8004d58:	3b20      	subs	r3, #32
 8004d5a:	edd3 7a00 	vldr	s15, [r3]
 8004d5e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d66:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_temp_meas_active += 1;
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	3301      	adds	r3, #1
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	ddb1      	ble.n	8004ce0 <process_measurements+0x1d8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, ekf_state->z, ekf_state->z_active, ekf_state->z);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 71e2 	add.w	r1, r3, #452	; 0x1c4
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	460b      	mov	r3, r1
 8004d92:	2103      	movs	r1, #3
 8004d94:	6838      	ldr	r0, [r7, #0]
 8004d96:	f7fc f95f 	bl	8001058 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 8004d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	dd21      	ble.n	8004de4 <process_measurements+0x2dc>
        ekf_state->u[0] /= num_acc_x_meas_active;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8004da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
        /* gravity compensation for accelerometer */
        ekf_state->u[0] -= GRAVITATION;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fb fbe1 	bl	8000588 <__aeabi_f2d>
 8004dc6:	a314      	add	r3, pc, #80	; (adr r3, 8004e18 <process_measurements+0x310>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fa7c 	bl	80002c8 <__aeabi_dsub>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	f7fb fefe 	bl	8000bd8 <__aeabi_d2f>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }
    if (num_temp_meas_active > 0){
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	dd0f      	ble.n	8004e0a <process_measurements+0x302>
        temp_meas_mean /= num_temp_meas_active;
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004df4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8004df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        update_env(env, temp_meas_mean);
 8004e00:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004e04:	6838      	ldr	r0, [r7, #0]
 8004e06:	f7fc f8cb 	bl	8000fa0 <update_env>
    }
}
 8004e0a:	bf00      	nop
 8004e0c:	374c      	adds	r7, #76	; 0x4c
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd90      	pop	{r4, r7, pc}
 8004e12:	bf00      	nop
 8004e14:	f3af 8000 	nop.w
 8004e18:	3a92a305 	.word	0x3a92a305
 8004e1c:	40239d01 	.word	0x40239d01

08004e20 <select_noise_models>:

void select_noise_models(ekf_state_t *ekf_state, flight_phase_detection_t *flight_phase_detection, env *env){
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b091      	sub	sp, #68	; 0x44
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d822      	bhi.n	8004e7c <select_noise_models+0x5c>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <select_noise_models+0x1c>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e55 	.word	0x08004e55
 8004e44:	08004e5f 	.word	0x08004e5f
 8004e48:	08004e69 	.word	0x08004e69
 8004e4c:	08004e73 	.word	0x08004e73
 8004e50:	08004e55 	.word	0x08004e55
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8004e54:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <select_noise_models+0x140>)
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <select_noise_models+0x144>)
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004e5c:	e00e      	b.n	8004e7c <select_noise_models+0x5c>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8004e5e:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <select_noise_models+0x148>)
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8004e62:	4b42      	ldr	r3, [pc, #264]	; (8004f6c <select_noise_models+0x14c>)
 8004e64:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004e66:	e009      	b.n	8004e7c <select_noise_models+0x5c>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8004e68:	4b41      	ldr	r3, [pc, #260]	; (8004f70 <select_noise_models+0x150>)
 8004e6a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8004e6c:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <select_noise_models+0x154>)
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004e70:	e004      	b.n	8004e7c <select_noise_models+0x5c>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8004e72:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <select_noise_models+0x158>)
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8004e76:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <select_noise_models+0x15c>)
 8004e78:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8004e7a:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_NOISE; i++){
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e80:	e01b      	b.n	8004eba <select_noise_models+0x9a>
        ekf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8004e82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e84:	f7fb fb80 	bl	8000588 <__aeabi_f2d>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8004f58 <select_noise_models+0x138>
 8004e90:	ec44 3b10 	vmov	d0, r3, r4
 8004e94:	f013 f9a2 	bl	80181dc <pow>
 8004e98:	ec54 3b10 	vmov	r3, r4, d0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	f7fb fe9a 	bl	8000bd8 <__aeabi_d2f>
 8004ea4:	4601      	mov	r1, r0
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	3316      	adds	r3, #22
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_NOISE; i++){
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	dde0      	ble.n	8004e82 <select_noise_models+0x62>
    }

    float p[1];
    float h[1] = {ekf_state->x_est[0]};
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ec6:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8004ec8:	2301      	movs	r3, #1
 8004eca:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8004ecc:	f107 0114 	add.w	r1, r7, #20
 8004ed0:	f107 0218 	add.w	r2, r7, #24
 8004ed4:	f107 031c 	add.w	r3, r7, #28
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	460b      	mov	r3, r1
 8004edc:	2101      	movs	r1, #1
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fc f91a 	bl	8001118 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8004ee4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc f97b 	bl	80011e8 <altitude_gradient>
 8004ef2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8004ef6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004efa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	eef0 7ae7 	vabs.f32	s15, s15
 8004f06:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f0e:	e01a      	b.n	8004f46 <select_noise_models+0x126>
        ekf_state->R[i][i] = pow(altitude_stdev, 2);
 8004f10:	6a38      	ldr	r0, [r7, #32]
 8004f12:	f7fb fb39 	bl	8000588 <__aeabi_f2d>
 8004f16:	4603      	mov	r3, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8004f58 <select_noise_models+0x138>
 8004f1e:	ec44 3b10 	vmov	d0, r3, r4
 8004f22:	f013 f95b 	bl	80181dc <pow>
 8004f26:	ec54 3b10 	vmov	r3, r4, d0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f7fb fe53 	bl	8000bd8 <__aeabi_d2f>
 8004f32:	4601      	mov	r1, r0
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	4413      	add	r3, r2
 8004f3c:	33b8      	adds	r3, #184	; 0xb8
 8004f3e:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	3301      	adds	r3, #1
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	dde1      	ble.n	8004f10 <select_noise_models+0xf0>
    }
}
 8004f4c:	bf00      	nop
 8004f4e:	373c      	adds	r7, #60	; 0x3c
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd90      	pop	{r4, r7, pc}
 8004f54:	f3af 8000 	nop.w
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	40000000 	.word	0x40000000
 8004f60:	3c97e316 	.word	0x3c97e316
 8004f64:	3fef3b64 	.word	0x3fef3b64
 8004f68:	3fa01965 	.word	0x3fa01965
 8004f6c:	41500000 	.word	0x41500000
 8004f70:	3f1e3737 	.word	0x3f1e3737
 8004f74:	40ec28f6 	.word	0x40ec28f6
 8004f78:	3ffa41cc 	.word	0x3ffa41cc
 8004f7c:	40795810 	.word	0x40795810

08004f80 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8004f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f82:	b08b      	sub	sp, #44	; 0x2c
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e017      	b.n	8004fcc <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00e      	beq.n	8004fc6 <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	3301      	adds	r3, #1
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	edd3 7a00 	vldr	s15, [r3]
 8004fba:	ed97 7a08 	vldr	s14, [r7, #32]
 8004fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc2:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	dbe3      	blt.n	8004f9c <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dd0a      	ble.n	8004ff0 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	ee07 3a90 	vmov	s15, r3
 8004fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fe4:	edd7 6a08 	vldr	s13, [r7, #32]
 8004fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fec:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	e033      	b.n	8005064 <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4413      	add	r3, r2
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02a      	beq.n	800505e <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4413      	add	r3, r2
 8005010:	ed93 7a00 	vldr	s14, [r3]
 8005014:	edd7 7a08 	vldr	s15, [r7, #32]
 8005018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800501c:	ee17 0a90 	vmov	r0, s15
 8005020:	f7fb fab2 	bl	8000588 <__aeabi_f2d>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8005120 <sensor_elimination_by_stdev+0x1a0>
 800502c:	ec44 3b10 	vmov	d0, r3, r4
 8005030:	f013 f8d4 	bl	80181dc <pow>
 8005034:	ec56 5b10 	vmov	r5, r6, d0
 8005038:	69b8      	ldr	r0, [r7, #24]
 800503a:	f7fb faa5 	bl	8000588 <__aeabi_f2d>
 800503e:	4603      	mov	r3, r0
 8005040:	460c      	mov	r4, r1
 8005042:	461a      	mov	r2, r3
 8005044:	4623      	mov	r3, r4
 8005046:	4628      	mov	r0, r5
 8005048:	4631      	mov	r1, r6
 800504a:	f7fb f93f 	bl	80002cc <__adddf3>
 800504e:	4603      	mov	r3, r0
 8005050:	460c      	mov	r4, r1
 8005052:	4618      	mov	r0, r3
 8005054:	4621      	mov	r1, r4
 8005056:	f7fb fdbf 	bl	8000bd8 <__aeabi_d2f>
 800505a:	4603      	mov	r3, r0
 800505c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	3301      	adds	r3, #1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	429a      	cmp	r2, r3
 800506a:	dbc7      	blt.n	8004ffc <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd1a      	ble.n	80050a8 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	ee07 3a90 	vmov	s15, r3
 8005078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800507c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005080:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005084:	ee16 0a90 	vmov	r0, s13
 8005088:	f7fb fa7e 	bl	8000588 <__aeabi_f2d>
 800508c:	4603      	mov	r3, r0
 800508e:	460c      	mov	r4, r1
 8005090:	ec44 3b10 	vmov	d0, r3, r4
 8005094:	f013 fa12 	bl	80184bc <sqrt>
 8005098:	ec54 3b10 	vmov	r3, r4, d0
 800509c:	4618      	mov	r0, r3
 800509e:	4621      	mov	r1, r4
 80050a0:	f7fb fd9a 	bl	8000bd8 <__aeabi_d2f>
 80050a4:	4603      	mov	r3, r0
 80050a6:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e02f      	b.n	800510e <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	4413      	add	r3, r2
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d026      	beq.n	8005108 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	ed93 7a00 	vldr	s14, [r3]
 80050c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80050ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ce:	eef0 7ae7 	vabs.f32	s15, s15
 80050d2:	ee17 0a90 	vmov	r0, s15
 80050d6:	f7fb fa57 	bl	8000588 <__aeabi_f2d>
 80050da:	4604      	mov	r4, r0
 80050dc:	460d      	mov	r5, r1
 80050de:	69b8      	ldr	r0, [r7, #24]
 80050e0:	f7fb fa52 	bl	8000588 <__aeabi_f2d>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	f7fb f8f0 	bl	80002cc <__adddf3>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb fd30 	bl	8000b58 <__aeabi_dcmpgt>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	3301      	adds	r3, #1
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	429a      	cmp	r2, r3
 8005114:	dbcb      	blt.n	80050ae <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8005116:	bf00      	nop
 8005118:	372c      	adds	r7, #44	; 0x2c
 800511a:	46bd      	mov	sp, r7
 800511c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800511e:	bf00      	nop
 8005120:	00000000 	.word	0x00000000
 8005124:	40000000 	.word	0x40000000

08005128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800512c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800512e:	e003      	b.n	8005138 <LoopCopyDataInit>

08005130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005136:	3104      	adds	r1, #4

08005138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005138:	480b      	ldr	r0, [pc, #44]	; (8005168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800513c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800513e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005140:	d3f6      	bcc.n	8005130 <CopyDataInit>
  ldr  r2, =_sbss
 8005142:	4a0b      	ldr	r2, [pc, #44]	; (8005170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005144:	e002      	b.n	800514c <LoopFillZerobss>

08005146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005148:	f842 3b04 	str.w	r3, [r2], #4

0800514c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800514e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005150:	d3f9      	bcc.n	8005146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005152:	f7fd fe65 	bl	8002e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005156:	f011 ffc1 	bl	80170dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800515a:	f7fc f897 	bl	800128c <main>
  bx  lr    
 800515e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005160:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005164:	0801a5e0 	.word	0x0801a5e0
  ldr  r0, =_sdata
 8005168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800516c:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8005170:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8005174:	20016ffc 	.word	0x20016ffc

08005178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005178:	e7fe      	b.n	8005178 <ADC_IRQHandler>

0800517a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800517e:	2003      	movs	r0, #3
 8005180:	f000 f8f7 	bl	8005372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005184:	2000      	movs	r0, #0
 8005186:	f7fd fce5 	bl	8002b54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800518a:	f7fd fa99 	bl	80026c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_IncTick+0x20>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_IncTick+0x24>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <HAL_IncTick+0x24>)
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000008 	.word	0x20000008
 80051b8:	20015274 	.word	0x20015274

080051bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return uwTick;
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_GetTick+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20015274 	.word	0x20015274

080051d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7ff ffee 	bl	80051bc <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d005      	beq.n	80051fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <HAL_Delay+0x40>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051fa:	bf00      	nop
 80051fc:	f7ff ffde 	bl	80051bc <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d8f7      	bhi.n	80051fc <HAL_Delay+0x28>
  {
  }
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000008 	.word	0x20000008

08005218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <__NVIC_SetPriorityGrouping+0x40>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005234:	4013      	ands	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <__NVIC_SetPriorityGrouping+0x44>)
 8005242:	4313      	orrs	r3, r2
 8005244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005246:	4a04      	ldr	r2, [pc, #16]	; (8005258 <__NVIC_SetPriorityGrouping+0x40>)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	60d3      	str	r3, [r2, #12]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000ed00 	.word	0xe000ed00
 800525c:	05fa0000 	.word	0x05fa0000

08005260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <__NVIC_GetPriorityGrouping+0x18>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	f003 0307 	and.w	r3, r3, #7
}
 800526e:	4618      	mov	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	e000ed00 	.word	0xe000ed00

0800527c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528a:	2b00      	cmp	r3, #0
 800528c:	db0b      	blt.n	80052a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	f003 021f 	and.w	r2, r3, #31
 8005294:	4907      	ldr	r1, [pc, #28]	; (80052b4 <__NVIC_EnableIRQ+0x38>)
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2001      	movs	r0, #1
 800529e:	fa00 f202 	lsl.w	r2, r0, r2
 80052a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	e000e100 	.word	0xe000e100

080052b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	6039      	str	r1, [r7, #0]
 80052c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db0a      	blt.n	80052e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	490c      	ldr	r1, [pc, #48]	; (8005304 <__NVIC_SetPriority+0x4c>)
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	440b      	add	r3, r1
 80052dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052e0:	e00a      	b.n	80052f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4908      	ldr	r1, [pc, #32]	; (8005308 <__NVIC_SetPriority+0x50>)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	3b04      	subs	r3, #4
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	440b      	add	r3, r1
 80052f6:	761a      	strb	r2, [r3, #24]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000e100 	.word	0xe000e100
 8005308:	e000ed00 	.word	0xe000ed00

0800530c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f1c3 0307 	rsb	r3, r3, #7
 8005326:	2b04      	cmp	r3, #4
 8005328:	bf28      	it	cs
 800532a:	2304      	movcs	r3, #4
 800532c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3304      	adds	r3, #4
 8005332:	2b06      	cmp	r3, #6
 8005334:	d902      	bls.n	800533c <NVIC_EncodePriority+0x30>
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	3b03      	subs	r3, #3
 800533a:	e000      	b.n	800533e <NVIC_EncodePriority+0x32>
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43da      	mvns	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	401a      	ands	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005354:	f04f 31ff 	mov.w	r1, #4294967295
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	43d9      	mvns	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005364:	4313      	orrs	r3, r2
         );
}
 8005366:	4618      	mov	r0, r3
 8005368:	3724      	adds	r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff ff4c 	bl	8005218 <__NVIC_SetPriorityGrouping>
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800539a:	f7ff ff61 	bl	8005260 <__NVIC_GetPriorityGrouping>
 800539e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	6978      	ldr	r0, [r7, #20]
 80053a6:	f7ff ffb1 	bl	800530c <NVIC_EncodePriority>
 80053aa:	4602      	mov	r2, r0
 80053ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ff80 	bl	80052b8 <__NVIC_SetPriority>
}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff ff54 	bl	800527c <__NVIC_EnableIRQ>
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053e8:	f7ff fee8 	bl	80051bc <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e099      	b.n	800552c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005418:	e00f      	b.n	800543a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800541a:	f7ff fecf 	bl	80051bc <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b05      	cmp	r3, #5
 8005426:	d908      	bls.n	800543a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2203      	movs	r2, #3
 8005432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e078      	b.n	800552c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e8      	bne.n	800541a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4b38      	ldr	r3, [pc, #224]	; (8005534 <HAL_DMA_Init+0x158>)
 8005454:	4013      	ands	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800547e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b04      	cmp	r3, #4
 8005492:	d107      	bne.n	80054a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	4313      	orrs	r3, r2
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d117      	bne.n	80054fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00e      	beq.n	80054fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 faa5 	bl	8005a30 <DMA_CheckFifoParam>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2240      	movs	r2, #64	; 0x40
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054fa:	2301      	movs	r3, #1
 80054fc:	e016      	b.n	800552c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa5c 	bl	80059c4 <DMA_CalcBaseAndBitshift>
 800550c:	4603      	mov	r3, r0
 800550e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005514:	223f      	movs	r2, #63	; 0x3f
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	f010803f 	.word	0xf010803f

08005538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_DMA_Start_IT+0x26>
 800555a:	2302      	movs	r3, #2
 800555c:	e048      	b.n	80055f0 <HAL_DMA_Start_IT+0xb8>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d137      	bne.n	80055e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f9ee 	bl	8005968 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005590:	223f      	movs	r2, #63	; 0x3f
 8005592:	409a      	lsls	r2, r3
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0216 	orr.w	r2, r2, #22
 80055a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0208 	orr.w	r2, r2, #8
 80055ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e005      	b.n	80055ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
 80055ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d004      	beq.n	8005616 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e00c      	b.n	8005630 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2205      	movs	r2, #5
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005648:	4b92      	ldr	r3, [pc, #584]	; (8005894 <HAL_DMA_IRQHandler+0x258>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a92      	ldr	r2, [pc, #584]	; (8005898 <HAL_DMA_IRQHandler+0x25c>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0a9b      	lsrs	r3, r3, #10
 8005654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	2208      	movs	r2, #8
 8005668:	409a      	lsls	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01a      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	2208      	movs	r2, #8
 8005696:	409a      	lsls	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	2201      	movs	r2, #1
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ca:	2201      	movs	r2, #1
 80056cc:	409a      	lsls	r2, r3
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f043 0202 	orr.w	r2, r3, #2
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e2:	2204      	movs	r2, #4
 80056e4:	409a      	lsls	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d012      	beq.n	8005714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	2204      	movs	r2, #4
 8005702:	409a      	lsls	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	f043 0204 	orr.w	r2, r3, #4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	2210      	movs	r2, #16
 800571a:	409a      	lsls	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d043      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d03c      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	2210      	movs	r2, #16
 8005738:	409a      	lsls	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d018      	beq.n	800577e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d108      	bne.n	800576c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d024      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
 800576a:	e01f      	b.n	80057ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01b      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
 800577c:	e016      	b.n	80057ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d107      	bne.n	800579c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0208 	bic.w	r2, r2, #8
 800579a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	2220      	movs	r2, #32
 80057b2:	409a      	lsls	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 808e 	beq.w	80058da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8086 	beq.w	80058da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	2220      	movs	r2, #32
 80057d4:	409a      	lsls	r2, r3
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d136      	bne.n	8005854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0216 	bic.w	r2, r2, #22
 80057f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_DMA_IRQHandler+0x1da>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0208 	bic.w	r2, r2, #8
 8005824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	223f      	movs	r2, #63	; 0x3f
 800582c:	409a      	lsls	r2, r3
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d07d      	beq.n	8005946 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
        }
        return;
 8005852:	e078      	b.n	8005946 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01c      	beq.n	800589c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	2b00      	cmp	r3, #0
 8005876:	d030      	beq.n	80058da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	e02b      	b.n	80058da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d027      	beq.n	80058da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
 8005892:	e022      	b.n	80058da <HAL_DMA_IRQHandler+0x29e>
 8005894:	20000000 	.word	0x20000000
 8005898:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0210 	bic.w	r2, r2, #16
 80058b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d032      	beq.n	8005948 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d022      	beq.n	8005934 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2205      	movs	r2, #5
 80058f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	3301      	adds	r3, #1
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	429a      	cmp	r2, r3
 8005910:	d307      	bcc.n	8005922 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f2      	bne.n	8005906 <HAL_DMA_IRQHandler+0x2ca>
 8005920:	e000      	b.n	8005924 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005922:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	4798      	blx	r3
 8005944:	e000      	b.n	8005948 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005946:	bf00      	nop
    }
  }
}
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop

08005950 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005984:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d108      	bne.n	80059a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059a6:	e007      	b.n	80059b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	60da      	str	r2, [r3, #12]
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	3b10      	subs	r3, #16
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <DMA_CalcBaseAndBitshift+0x60>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059de:	4a12      	ldr	r2, [pc, #72]	; (8005a28 <DMA_CalcBaseAndBitshift+0x64>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d908      	bls.n	8005a04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <DMA_CalcBaseAndBitshift+0x68>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	1d1a      	adds	r2, r3, #4
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	659a      	str	r2, [r3, #88]	; 0x58
 8005a02:	e006      	b.n	8005a12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <DMA_CalcBaseAndBitshift+0x68>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	aaaaaaab 	.word	0xaaaaaaab
 8005a28:	0801a428 	.word	0x0801a428
 8005a2c:	fffffc00 	.word	0xfffffc00

08005a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11f      	bne.n	8005a8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d855      	bhi.n	8005afc <DMA_CheckFifoParam+0xcc>
 8005a50:	a201      	add	r2, pc, #4	; (adr r2, 8005a58 <DMA_CheckFifoParam+0x28>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a7b 	.word	0x08005a7b
 8005a60:	08005a69 	.word	0x08005a69
 8005a64:	08005afd 	.word	0x08005afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d045      	beq.n	8005b00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a78:	e042      	b.n	8005b00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a82:	d13f      	bne.n	8005b04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a88:	e03c      	b.n	8005b04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a92:	d121      	bne.n	8005ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d836      	bhi.n	8005b08 <DMA_CheckFifoParam+0xd8>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <DMA_CheckFifoParam+0x70>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ab1 	.word	0x08005ab1
 8005aa4:	08005ab7 	.word	0x08005ab7
 8005aa8:	08005ab1 	.word	0x08005ab1
 8005aac:	08005ac9 	.word	0x08005ac9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab4:	e02f      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d024      	beq.n	8005b0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac6:	e021      	b.n	8005b0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ad0:	d11e      	bne.n	8005b10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ad6:	e01b      	b.n	8005b10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d902      	bls.n	8005ae4 <DMA_CheckFifoParam+0xb4>
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d003      	beq.n	8005aea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ae2:	e018      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae8:	e015      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
      break;
 8005afa:	e00b      	b.n	8005b14 <DMA_CheckFifoParam+0xe4>
      break;
 8005afc:	bf00      	nop
 8005afe:	e00a      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      break;
 8005b00:	bf00      	nop
 8005b02:	e008      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      break;
 8005b04:	bf00      	nop
 8005b06:	e006      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      break;
 8005b08:	bf00      	nop
 8005b0a:	e004      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      break;
 8005b0c:	bf00      	nop
 8005b0e:	e002      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      break;   
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <DMA_CheckFifoParam+0xe6>
      break;
 8005b14:	bf00      	nop
    }
  } 
  
  return status; 
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b089      	sub	sp, #36	; 0x24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e175      	b.n	8005e30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b44:	2201      	movs	r2, #1
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4013      	ands	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	f040 8164 	bne.w	8005e2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d00b      	beq.n	8005b82 <HAL_GPIO_Init+0x5e>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d007      	beq.n	8005b82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b76:	2b11      	cmp	r3, #17
 8005b78:	d003      	beq.n	8005b82 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b12      	cmp	r3, #18
 8005b80:	d130      	bne.n	8005be4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bb8:	2201      	movs	r2, #1
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 0201 	and.w	r2, r3, #1
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	2203      	movs	r2, #3
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d003      	beq.n	8005c24 <HAL_GPIO_Init+0x100>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b12      	cmp	r3, #18
 8005c22:	d123      	bne.n	8005c6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	08da      	lsrs	r2, r3, #3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3208      	adds	r2, #8
 8005c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	220f      	movs	r2, #15
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	08da      	lsrs	r2, r3, #3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3208      	adds	r2, #8
 8005c66:	69b9      	ldr	r1, [r7, #24]
 8005c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	2203      	movs	r2, #3
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4013      	ands	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 0203 	and.w	r2, r3, #3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80be 	beq.w	8005e2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cae:	4b65      	ldr	r3, [pc, #404]	; (8005e44 <HAL_GPIO_Init+0x320>)
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb2:	4a64      	ldr	r2, [pc, #400]	; (8005e44 <HAL_GPIO_Init+0x320>)
 8005cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cba:	4b62      	ldr	r3, [pc, #392]	; (8005e44 <HAL_GPIO_Init+0x320>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005cc6:	4a60      	ldr	r2, [pc, #384]	; (8005e48 <HAL_GPIO_Init+0x324>)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	089b      	lsrs	r3, r3, #2
 8005ccc:	3302      	adds	r3, #2
 8005cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	220f      	movs	r2, #15
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a57      	ldr	r2, [pc, #348]	; (8005e4c <HAL_GPIO_Init+0x328>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d037      	beq.n	8005d62 <HAL_GPIO_Init+0x23e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a56      	ldr	r2, [pc, #344]	; (8005e50 <HAL_GPIO_Init+0x32c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d031      	beq.n	8005d5e <HAL_GPIO_Init+0x23a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a55      	ldr	r2, [pc, #340]	; (8005e54 <HAL_GPIO_Init+0x330>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02b      	beq.n	8005d5a <HAL_GPIO_Init+0x236>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a54      	ldr	r2, [pc, #336]	; (8005e58 <HAL_GPIO_Init+0x334>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d025      	beq.n	8005d56 <HAL_GPIO_Init+0x232>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a53      	ldr	r2, [pc, #332]	; (8005e5c <HAL_GPIO_Init+0x338>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01f      	beq.n	8005d52 <HAL_GPIO_Init+0x22e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a52      	ldr	r2, [pc, #328]	; (8005e60 <HAL_GPIO_Init+0x33c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d019      	beq.n	8005d4e <HAL_GPIO_Init+0x22a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a51      	ldr	r2, [pc, #324]	; (8005e64 <HAL_GPIO_Init+0x340>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <HAL_GPIO_Init+0x226>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a50      	ldr	r2, [pc, #320]	; (8005e68 <HAL_GPIO_Init+0x344>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00d      	beq.n	8005d46 <HAL_GPIO_Init+0x222>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a4f      	ldr	r2, [pc, #316]	; (8005e6c <HAL_GPIO_Init+0x348>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <HAL_GPIO_Init+0x21e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a4e      	ldr	r2, [pc, #312]	; (8005e70 <HAL_GPIO_Init+0x34c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d101      	bne.n	8005d3e <HAL_GPIO_Init+0x21a>
 8005d3a:	2309      	movs	r3, #9
 8005d3c:	e012      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d3e:	230a      	movs	r3, #10
 8005d40:	e010      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d42:	2308      	movs	r3, #8
 8005d44:	e00e      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d46:	2307      	movs	r3, #7
 8005d48:	e00c      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d4a:	2306      	movs	r3, #6
 8005d4c:	e00a      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d4e:	2305      	movs	r3, #5
 8005d50:	e008      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d52:	2304      	movs	r3, #4
 8005d54:	e006      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d56:	2303      	movs	r3, #3
 8005d58:	e004      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e002      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_GPIO_Init+0x240>
 8005d62:	2300      	movs	r3, #0
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	f002 0203 	and.w	r2, r2, #3
 8005d6a:	0092      	lsls	r2, r2, #2
 8005d6c:	4093      	lsls	r3, r2
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005d74:	4934      	ldr	r1, [pc, #208]	; (8005e48 <HAL_GPIO_Init+0x324>)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	089b      	lsrs	r3, r3, #2
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d82:	4b3c      	ldr	r3, [pc, #240]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005da6:	4a33      	ldr	r2, [pc, #204]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005dac:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	4013      	ands	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dd0:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dd6:	4b27      	ldr	r3, [pc, #156]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e00:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e24:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <HAL_GPIO_Init+0x350>)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b0f      	cmp	r3, #15
 8005e34:	f67f ae86 	bls.w	8005b44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005e38:	bf00      	nop
 8005e3a:	3724      	adds	r7, #36	; 0x24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	40023800 	.word	0x40023800
 8005e48:	40013800 	.word	0x40013800
 8005e4c:	40020000 	.word	0x40020000
 8005e50:	40020400 	.word	0x40020400
 8005e54:	40020800 	.word	0x40020800
 8005e58:	40020c00 	.word	0x40020c00
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40021400 	.word	0x40021400
 8005e64:	40021800 	.word	0x40021800
 8005e68:	40021c00 	.word	0x40021c00
 8005e6c:	40022000 	.word	0x40022000
 8005e70:	40022400 	.word	0x40022400
 8005e74:	40013c00 	.word	0x40013c00

08005e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
 8005e84:	4613      	mov	r3, r2
 8005e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e88:	787b      	ldrb	r3, [r7, #1]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e8e:	887a      	ldrh	r2, [r7, #2]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e94:	e003      	b.n	8005e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e96:	887b      	ldrh	r3, [r7, #2]
 8005e98:	041a      	lsls	r2, r3, #16
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	619a      	str	r2, [r3, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695a      	ldr	r2, [r3, #20]
 8005eba:	887b      	ldrh	r3, [r7, #2]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d004      	beq.n	8005ecc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ec2:	887b      	ldrh	r3, [r7, #2]
 8005ec4:	041a      	lsls	r2, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005eca:	e002      	b.n	8005ed2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ecc:	887a      	ldrh	r2, [r7, #2]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	619a      	str	r2, [r3, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ede:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee0:	b08f      	sub	sp, #60	; 0x3c
 8005ee2:	af0a      	add	r7, sp, #40	; 0x28
 8005ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e116      	b.n	800611e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f010 fd8e 	bl	8016a2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2203      	movs	r2, #3
 8005f14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f006 fb71 	bl	800c616 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	687e      	ldr	r6, [r7, #4]
 8005f3c:	466d      	mov	r5, sp
 8005f3e:	f106 0410 	add.w	r4, r6, #16
 8005f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f52:	1d33      	adds	r3, r6, #4
 8005f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f56:	6838      	ldr	r0, [r7, #0]
 8005f58:	f006 fa52 	bl	800c400 <USB_CoreInit>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0d7      	b.n	800611e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f006 fb5f 	bl	800c638 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73fb      	strb	r3, [r7, #15]
 8005f7e:	e04a      	b.n	8006016 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f80:	7bfa      	ldrb	r2, [r7, #15]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	333d      	adds	r3, #61	; 0x3d
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f94:	7bfa      	ldrb	r2, [r7, #15]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	333c      	adds	r3, #60	; 0x3c
 8005fa4:	7bfa      	ldrb	r2, [r7, #15]
 8005fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	b298      	uxth	r0, r3
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	3342      	adds	r3, #66	; 0x42
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fc0:	7bfa      	ldrb	r2, [r7, #15]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	333f      	adds	r3, #63	; 0x3f
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fd4:	7bfa      	ldrb	r2, [r7, #15]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	3344      	adds	r3, #68	; 0x44
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fe8:	7bfa      	ldrb	r2, [r7, #15]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3348      	adds	r3, #72	; 0x48
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ffc:	7bfa      	ldrb	r2, [r7, #15]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	3350      	adds	r3, #80	; 0x50
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	3301      	adds	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	7bfa      	ldrb	r2, [r7, #15]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d3af      	bcc.n	8005f80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006020:	2300      	movs	r3, #0
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	e044      	b.n	80060b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006026:	7bfa      	ldrb	r2, [r7, #15]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800603c:	7bfa      	ldrb	r2, [r7, #15]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800604e:	7bfa      	ldrb	r2, [r7, #15]
 8006050:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006052:	7bfa      	ldrb	r2, [r7, #15]
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	440b      	add	r3, r1
 8006060:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006094:	7bfa      	ldrb	r2, [r7, #15]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	3301      	adds	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
 80060b0:	7bfa      	ldrb	r2, [r7, #15]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d3b5      	bcc.n	8006026 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	687e      	ldr	r6, [r7, #4]
 80060c2:	466d      	mov	r5, sp
 80060c4:	f106 0410 	add.w	r4, r6, #16
 80060c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80060d8:	1d33      	adds	r3, r6, #4
 80060da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060dc:	6838      	ldr	r0, [r7, #0]
 80060de:	f006 fad5 	bl	800c68c <USB_DevInit>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e014      	b.n	800611e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b01      	cmp	r3, #1
 800610a:	d102      	bne.n	8006112 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 f881 	bl	8007214 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f007 fb24 	bl	800d764 <USB_DevDisconnect>

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006126 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_PCD_Start+0x16>
 8006138:	2302      	movs	r3, #2
 800613a:	e012      	b.n	8006162 <HAL_PCD_Start+0x3c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f007 faf3 	bl	800d734 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f006 fa4e 	bl	800c5f4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800616a:	b590      	push	{r4, r7, lr}
 800616c:	b08d      	sub	sp, #52	; 0x34
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f007 fb9a 	bl	800d8ba <USB_GetMode>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 83ca 	bne.w	8006922 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f007 fafe 	bl	800d794 <USB_ReadInterrupts>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 83c0 	beq.w	8006920 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f007 faf5 	bl	800d794 <USB_ReadInterrupts>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d107      	bne.n	80061c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f002 0202 	and.w	r2, r2, #2
 80061c2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f007 fae3 	bl	800d794 <USB_ReadInterrupts>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d161      	bne.n	800629c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0210 	bic.w	r2, r2, #16
 80061e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f003 020f 	and.w	r2, r3, #15
 80061f4:	4613      	mov	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	1a9b      	subs	r3, r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	3304      	adds	r3, #4
 8006206:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	0c5b      	lsrs	r3, r3, #17
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	2b02      	cmp	r3, #2
 8006212:	d124      	bne.n	800625e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d035      	beq.n	800628c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800622a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800622e:	b29b      	uxth	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	6a38      	ldr	r0, [r7, #32]
 8006234:	f007 f95b 	bl	800d4ee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	091b      	lsrs	r3, r3, #4
 8006240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006244:	441a      	add	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	091b      	lsrs	r3, r3, #4
 8006252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006256:	441a      	add	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	619a      	str	r2, [r3, #24]
 800625c:	e016      	b.n	800628c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	0c5b      	lsrs	r3, r3, #17
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	2b06      	cmp	r3, #6
 8006268:	d110      	bne.n	800628c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006270:	2208      	movs	r2, #8
 8006272:	4619      	mov	r1, r3
 8006274:	6a38      	ldr	r0, [r7, #32]
 8006276:	f007 f93a 	bl	800d4ee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006286:	441a      	add	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0210 	orr.w	r2, r2, #16
 800629a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f007 fa77 	bl	800d794 <USB_ReadInterrupts>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062b0:	d16e      	bne.n	8006390 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f007 fa7d 	bl	800d7ba <USB_ReadDevAllOutEpInterrupt>
 80062c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80062c2:	e062      	b.n	800638a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d057      	beq.n	800637e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f007 faa2 	bl	800d822 <USB_ReadDevOutEPInterrupt>
 80062de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f6:	461a      	mov	r2, r3
 80062f8:	2301      	movs	r3, #1
 80062fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80062fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fdde 	bl	8006ec0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	461a      	mov	r2, r3
 800631c:	2308      	movs	r3, #8
 800631e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fed8 	bl	80070d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	461a      	mov	r2, r3
 8006340:	2310      	movs	r3, #16
 8006342:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	461a      	mov	r2, r3
 800635c:	2320      	movs	r3, #32
 800635e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006376:	461a      	mov	r2, r3
 8006378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800637c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	3301      	adds	r3, #1
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	2b00      	cmp	r3, #0
 800638e:	d199      	bne.n	80062c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f007 f9fd 	bl	800d794 <USB_ReadInterrupts>
 800639a:	4603      	mov	r3, r0
 800639c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063a4:	f040 80c0 	bne.w	8006528 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f007 fa1e 	bl	800d7ee <USB_ReadDevAllInEpInterrupt>
 80063b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80063b8:	e0b2      	b.n	8006520 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a7 	beq.w	8006514 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f007 fa44 	bl	800d85e <USB_ReadDevInEPInterrupt>
 80063d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d057      	beq.n	8006492 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	2201      	movs	r2, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	69f9      	ldr	r1, [r7, #28]
 80063fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006402:	4013      	ands	r3, r2
 8006404:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	461a      	mov	r2, r3
 8006414:	2301      	movs	r3, #1
 8006416:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d132      	bne.n	8006486 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	3348      	adds	r3, #72	; 0x48
 8006430:	6819      	ldr	r1, [r3, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006436:	4613      	mov	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4403      	add	r3, r0
 8006440:	3344      	adds	r3, #68	; 0x44
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4419      	add	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644a:	4613      	mov	r3, r2
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	1a9b      	subs	r3, r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4403      	add	r3, r0
 8006454:	3348      	adds	r3, #72	; 0x48
 8006456:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	2b00      	cmp	r3, #0
 800645c:	d113      	bne.n	8006486 <HAL_PCD_IRQHandler+0x31c>
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	4613      	mov	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	1a9b      	subs	r3, r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	3350      	adds	r3, #80	; 0x50
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d108      	bne.n	8006486 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800647e:	461a      	mov	r2, r3
 8006480:	2101      	movs	r1, #1
 8006482:	f007 fa4d 	bl	800d920 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	b2db      	uxtb	r3, r3
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f010 fb50 	bl	8016b32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	461a      	mov	r2, r3
 80064aa:	2308      	movs	r3, #8
 80064ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	461a      	mov	r2, r3
 80064c6:	2310      	movs	r3, #16
 80064c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	461a      	mov	r2, r3
 80064e2:	2340      	movs	r3, #64	; 0x40
 80064e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	461a      	mov	r2, r3
 80064fe:	2302      	movs	r3, #2
 8006500:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800650c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fc48 	bl	8006da4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	3301      	adds	r3, #1
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	f47f af49 	bne.w	80063ba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f007 f931 	bl	800d794 <USB_ReadInterrupts>
 8006532:	4603      	mov	r3, r0
 8006534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653c:	d122      	bne.n	8006584 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006558:	2b01      	cmp	r3, #1
 800655a:	d108      	bne.n	800656e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006564:	2100      	movs	r1, #0
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f010 fd32 	bl	8016fd0 <HAL_PCDEx_LPM_Callback>
 800656c:	e002      	b.n	8006574 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f010 fb56 	bl	8016c20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4618      	mov	r0, r3
 800658a:	f007 f903 	bl	800d794 <USB_ReadInterrupts>
 800658e:	4603      	mov	r3, r0
 8006590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006598:	d112      	bne.n	80065c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d102      	bne.n	80065b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f010 fb12 	bl	8016bd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695a      	ldr	r2, [r3, #20]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065be:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f007 f8e5 	bl	800d794 <USB_ReadInterrupts>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d4:	d121      	bne.n	800661a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695a      	ldr	r2, [r3, #20]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80065e4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d111      	bne.n	8006614 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	089b      	lsrs	r3, r3, #2
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800660a:	2101      	movs	r1, #1
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f010 fcdf 	bl	8016fd0 <HAL_PCDEx_LPM_Callback>
 8006612:	e002      	b.n	800661a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f010 fadd 	bl	8016bd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f007 f8b8 	bl	800d794 <USB_ReadInterrupts>
 8006624:	4603      	mov	r3, r0
 8006626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	f040 80c7 	bne.w	80067c0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2110      	movs	r1, #16
 800664c:	4618      	mov	r0, r3
 800664e:	f006 f98b 	bl	800c968 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006652:	2300      	movs	r3, #0
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006656:	e056      	b.n	8006706 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	461a      	mov	r2, r3
 8006666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800666a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800668a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	461a      	mov	r2, r3
 80066ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	3301      	adds	r3, #1
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670c:	429a      	cmp	r2, r3
 800670e:	d3a3      	bcc.n	8006658 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006722:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	2b00      	cmp	r3, #0
 800672a:	d016      	beq.n	800675a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673c:	f043 030b 	orr.w	r3, r3, #11
 8006740:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006752:	f043 030b 	orr.w	r3, r3, #11
 8006756:	6453      	str	r3, [r2, #68]	; 0x44
 8006758:	e015      	b.n	8006786 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006768:	4619      	mov	r1, r3
 800676a:	f242 032b 	movw	r3, #8235	; 0x202b
 800676e:	4313      	orrs	r3, r2
 8006770:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006780:	f043 030b 	orr.w	r3, r3, #11
 8006784:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006794:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006798:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067aa:	461a      	mov	r2, r3
 80067ac:	f007 f8b8 	bl	800d920 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f006 ffe5 	bl	800d794 <USB_ReadInterrupts>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d4:	d124      	bne.n	8006820 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f007 f87c 	bl	800d8d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f006 f920 	bl	800ca2a <USB_GetDevSpeed>
 80067ea:	4603      	mov	r3, r0
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681c      	ldr	r4, [r3, #0]
 80067f6:	f001 f999 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 80067fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006800:	b2db      	uxtb	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	4620      	mov	r0, r4
 8006806:	f005 fe53 	bl	800c4b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f010 f9b9 	bl	8016b82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800681e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f006 ffb5 	bl	800d794 <USB_ReadInterrupts>
 800682a:	4603      	mov	r3, r0
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d10a      	bne.n	800684a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f010 f996 	bl	8016b66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f002 0208 	and.w	r2, r2, #8
 8006848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f006 ffa0 	bl	800d794 <USB_ReadInterrupts>
 8006854:	4603      	mov	r3, r0
 8006856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800685a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685e:	d10f      	bne.n	8006880 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	b2db      	uxtb	r3, r3
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f010 f9f8 	bl	8016c60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800687e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f006 ff85 	bl	800d794 <USB_ReadInterrupts>
 800688a:	4603      	mov	r3, r0
 800688c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006894:	d10f      	bne.n	80068b6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	b2db      	uxtb	r3, r3
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f010 f9cb 	bl	8016c3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80068b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f006 ff6a 	bl	800d794 <USB_ReadInterrupts>
 80068c0:	4603      	mov	r3, r0
 80068c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ca:	d10a      	bne.n	80068e2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f010 f9d9 	bl	8016c84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80068e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f006 ff54 	bl	800d794 <USB_ReadInterrupts>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d115      	bne.n	8006922 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f010 f9c9 	bl	8016ca0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	e000      	b.n	8006922 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006920:	bf00      	nop
    }
  }
}
 8006922:	3734      	adds	r7, #52	; 0x34
 8006924:	46bd      	mov	sp, r7
 8006926:	bd90      	pop	{r4, r7, pc}

08006928 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_PCD_SetAddress+0x1a>
 800693e:	2302      	movs	r3, #2
 8006940:	e013      	b.n	800696a <HAL_PCD_SetAddress+0x42>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	4611      	mov	r1, r2
 800695a:	4618      	mov	r0, r3
 800695c:	f006 fec4 	bl	800d6e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	4608      	mov	r0, r1
 800697c:	4611      	mov	r1, r2
 800697e:	461a      	mov	r2, r3
 8006980:	4603      	mov	r3, r0
 8006982:	70fb      	strb	r3, [r7, #3]
 8006984:	460b      	mov	r3, r1
 8006986:	803b      	strh	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006994:	2b00      	cmp	r3, #0
 8006996:	da0f      	bge.n	80069b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	4613      	mov	r3, r2
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	1a9b      	subs	r3, r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	3338      	adds	r3, #56	; 0x38
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	3304      	adds	r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	705a      	strb	r2, [r3, #1]
 80069b6:	e00f      	b.n	80069d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80069e4:	883a      	ldrh	r2, [r7, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	78ba      	ldrb	r2, [r7, #2]
 80069ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a02:	78bb      	ldrb	r3, [r7, #2]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d102      	bne.n	8006a0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_PCD_EP_Open+0xaa>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e00e      	b.n	8006a3a <HAL_PCD_EP_Open+0xc8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68f9      	ldr	r1, [r7, #12]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f006 f822 	bl	800ca74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da0f      	bge.n	8006a76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	3338      	adds	r3, #56	; 0x38
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	705a      	strb	r2, [r3, #1]
 8006a74:	e00f      	b.n	8006a96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	f003 020f 	and.w	r2, r3, #15
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_PCD_EP_Close+0x6e>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e00e      	b.n	8006ace <HAL_PCD_EP_Close+0x8c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f006 f860 	bl	800cb84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
 8006ae8:	f003 020f 	and.w	r2, r3, #15
 8006aec:	4613      	mov	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	3304      	adds	r3, #4
 8006afe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d102      	bne.n	8006b32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	6979      	ldr	r1, [r7, #20]
 8006b4a:	f006 fb43 	bl	800d1d4 <USB_EP0StartXfer>
 8006b4e:	e008      	b.n	8006b62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6979      	ldr	r1, [r7, #20]
 8006b5e:	f006 f8ed 	bl	800cd3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	f003 020f 	and.w	r2, r3, #15
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b8e:	681b      	ldr	r3, [r3, #0]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	f003 020f 	and.w	r2, r3, #15
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	3338      	adds	r3, #56	; 0x38
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d102      	bne.n	8006bf6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	f006 fae1 	bl	800d1d4 <USB_EP0StartXfer>
 8006c12:	e008      	b.n	8006c26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	f006 f88b 	bl	800cd3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	f003 020f 	and.w	r2, r3, #15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d901      	bls.n	8006c4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e050      	b.n	8006cf0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da0f      	bge.n	8006c76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	3338      	adds	r3, #56	; 0x38
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	705a      	strb	r2, [r3, #1]
 8006c74:	e00d      	b.n	8006c92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c76:	78fa      	ldrb	r2, [r7, #3]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	3304      	adds	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_PCD_EP_SetStall+0x82>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e01e      	b.n	8006cf0 <HAL_PCD_EP_SetStall+0xc0>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f006 fc3d 	bl	800d540 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	b2d9      	uxtb	r1, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f006 fe1d 	bl	800d920 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d901      	bls.n	8006d16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e042      	b.n	8006d9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da0f      	bge.n	8006d3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	4613      	mov	r3, r2
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	3338      	adds	r3, #56	; 0x38
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	3304      	adds	r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	705a      	strb	r2, [r3, #1]
 8006d3c:	e00f      	b.n	8006d5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	4613      	mov	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4413      	add	r3, r2
 8006d54:	3304      	adds	r3, #4
 8006d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_PCD_EP_ClrStall+0x86>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e00e      	b.n	8006d9c <HAL_PCD_EP_ClrStall+0xa4>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f006 fc45 	bl	800d61c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08a      	sub	sp, #40	; 0x28
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	3338      	adds	r3, #56	; 0x38
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3304      	adds	r3, #4
 8006dca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d901      	bls.n	8006ddc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e06c      	b.n	8006eb6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d902      	bls.n	8006df8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3303      	adds	r3, #3
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e00:	e02b      	b.n	8006e5a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d902      	bls.n	8006e1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3303      	adds	r3, #3
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68d9      	ldr	r1, [r3, #12]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	6978      	ldr	r0, [r7, #20]
 8006e3e:	f006 fb21 	bl	800d484 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	441a      	add	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d809      	bhi.n	8006e84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	699a      	ldr	r2, [r3, #24]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d203      	bcs.n	8006e84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1be      	bne.n	8006e02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	695a      	ldr	r2, [r3, #20]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d811      	bhi.n	8006eb4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	2201      	movs	r2, #1
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	6939      	ldr	r1, [r7, #16]
 8006eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3720      	adds	r7, #32
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	333c      	adds	r3, #60	; 0x3c
 8006ed8:	3304      	adds	r3, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	f040 80a0 	bne.w	8007038 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d015      	beq.n	8006f2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a72      	ldr	r2, [pc, #456]	; (80070d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	f240 80dd 	bls.w	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80d7 	beq.w	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	461a      	mov	r2, r3
 8006f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2a:	6093      	str	r3, [r2, #8]
 8006f2c:	e0cb      	b.n	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d009      	beq.n	8006f4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	461a      	mov	r2, r3
 8006f46:	2320      	movs	r3, #32
 8006f48:	6093      	str	r3, [r2, #8]
 8006f4a:	e0bc      	b.n	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 80b7 	bne.w	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4a5d      	ldr	r2, [pc, #372]	; (80070d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d90f      	bls.n	8006f80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	461a      	mov	r2, r3
 8006f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7c:	6093      	str	r3, [r2, #8]
 8006f7e:	e0a2      	b.n	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	1a9b      	subs	r3, r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	0159      	lsls	r1, r3, #5
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006fa6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	4613      	mov	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4403      	add	r3, r0
 8006fb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006fba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4403      	add	r3, r0
 8006fde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4419      	add	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4403      	add	r3, r0
 8006ff4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ff8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d114      	bne.n	800702a <PCD_EP_OutXfrComplete_int+0x16a>
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4613      	mov	r3, r2
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d108      	bne.n	800702a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007022:	461a      	mov	r2, r3
 8007024:	2101      	movs	r1, #1
 8007026:	f006 fc7b 	bl	800d920 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f00f fd63 	bl	8016afc <HAL_PCD_DataOutStageCallback>
 8007036:	e046      	b.n	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4a26      	ldr	r2, [pc, #152]	; (80070d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d124      	bne.n	800708a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	461a      	mov	r2, r3
 8007058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705c:	6093      	str	r3, [r2, #8]
 800705e:	e032      	b.n	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	461a      	mov	r2, r3
 8007078:	2320      	movs	r3, #32
 800707a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f00f fd3a 	bl	8016afc <HAL_PCD_DataOutStageCallback>
 8007088:	e01d      	b.n	80070c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d114      	bne.n	80070ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070b2:	461a      	mov	r2, r3
 80070b4:	2100      	movs	r1, #0
 80070b6:	f006 fc33 	bl	800d920 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f00f fd1b 	bl	8016afc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	4f54300a 	.word	0x4f54300a
 80070d4:	4f54310a 	.word	0x4f54310a

080070d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	333c      	adds	r3, #60	; 0x3c
 80070f0:	3304      	adds	r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4a15      	ldr	r2, [pc, #84]	; (8007160 <PCD_EP_OutSetupPacket_int+0x88>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d90e      	bls.n	800712c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	461a      	mov	r2, r3
 8007126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800712a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f00f fcd3 	bl	8016ad8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4a0a      	ldr	r2, [pc, #40]	; (8007160 <PCD_EP_OutSetupPacket_int+0x88>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d90c      	bls.n	8007154 <PCD_EP_OutSetupPacket_int+0x7c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d108      	bne.n	8007154 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800714c:	461a      	mov	r2, r3
 800714e:	2101      	movs	r1, #1
 8007150:	f006 fbe6 	bl	800d920 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	4f54300a 	.word	0x4f54300a

08007164 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
 8007170:	4613      	mov	r3, r2
 8007172:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d107      	bne.n	8007192 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007182:	883b      	ldrh	r3, [r7, #0]
 8007184:	0419      	lsls	r1, r3, #16
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	430a      	orrs	r2, r1
 800718e:	629a      	str	r2, [r3, #40]	; 0x28
 8007190:	e028      	b.n	80071e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
 80071a4:	e00d      	b.n	80071c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	3340      	adds	r3, #64	; 0x40
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4413      	add	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	3301      	adds	r3, #1
 80071c0:	73fb      	strb	r3, [r7, #15]
 80071c2:	7bfa      	ldrb	r2, [r7, #15]
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d3ec      	bcc.n	80071a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80071cc:	883b      	ldrh	r3, [r7, #0]
 80071ce:	0418      	lsls	r0, r3, #16
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6819      	ldr	r1, [r3, #0]
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	4302      	orrs	r2, r0
 80071dc:	3340      	adds	r3, #64	; 0x40
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	887a      	ldrh	r2, [r7, #2]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_PCDEx_ActivateLPM+0x44>)
 8007244:	4313      	orrs	r3, r2
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	10000003 	.word	0x10000003

0800725c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007264:	2300      	movs	r3, #0
 8007266:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e291      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8087 	beq.w	800738e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007280:	4b96      	ldr	r3, [pc, #600]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 030c 	and.w	r3, r3, #12
 8007288:	2b04      	cmp	r3, #4
 800728a:	d00c      	beq.n	80072a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800728c:	4b93      	ldr	r3, [pc, #588]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 030c 	and.w	r3, r3, #12
 8007294:	2b08      	cmp	r3, #8
 8007296:	d112      	bne.n	80072be <HAL_RCC_OscConfig+0x62>
 8007298:	4b90      	ldr	r3, [pc, #576]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a4:	d10b      	bne.n	80072be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072a6:	4b8d      	ldr	r3, [pc, #564]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d06c      	beq.n	800738c <HAL_RCC_OscConfig+0x130>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d168      	bne.n	800738c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e26b      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c6:	d106      	bne.n	80072d6 <HAL_RCC_OscConfig+0x7a>
 80072c8:	4b84      	ldr	r3, [pc, #528]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a83      	ldr	r2, [pc, #524]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	e02e      	b.n	8007334 <HAL_RCC_OscConfig+0xd8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10c      	bne.n	80072f8 <HAL_RCC_OscConfig+0x9c>
 80072de:	4b7f      	ldr	r3, [pc, #508]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a7e      	ldr	r2, [pc, #504]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	4b7c      	ldr	r3, [pc, #496]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a7b      	ldr	r2, [pc, #492]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80072f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e01d      	b.n	8007334 <HAL_RCC_OscConfig+0xd8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0xc0>
 8007302:	4b76      	ldr	r3, [pc, #472]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a75      	ldr	r2, [pc, #468]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4b73      	ldr	r3, [pc, #460]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a72      	ldr	r2, [pc, #456]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e00b      	b.n	8007334 <HAL_RCC_OscConfig+0xd8>
 800731c:	4b6f      	ldr	r3, [pc, #444]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a6e      	ldr	r2, [pc, #440]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	4b6c      	ldr	r3, [pc, #432]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6b      	ldr	r2, [pc, #428]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800732e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fd ff3e 	bl	80051bc <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007344:	f7fd ff3a 	bl	80051bc <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b64      	cmp	r3, #100	; 0x64
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e21f      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007356:	4b61      	ldr	r3, [pc, #388]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0xe8>
 8007362:	e014      	b.n	800738e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fd ff2a 	bl	80051bc <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800736c:	f7fd ff26 	bl	80051bc <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b64      	cmp	r3, #100	; 0x64
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e20b      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800737e:	4b57      	ldr	r3, [pc, #348]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f0      	bne.n	800736c <HAL_RCC_OscConfig+0x110>
 800738a:	e000      	b.n	800738e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800738c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d069      	beq.n	800746e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800739a:	4b50      	ldr	r3, [pc, #320]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 030c 	and.w	r3, r3, #12
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073a6:	4b4d      	ldr	r3, [pc, #308]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 030c 	and.w	r3, r3, #12
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d11c      	bne.n	80073ec <HAL_RCC_OscConfig+0x190>
 80073b2:	4b4a      	ldr	r3, [pc, #296]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d116      	bne.n	80073ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073be:	4b47      	ldr	r3, [pc, #284]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <HAL_RCC_OscConfig+0x17a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d001      	beq.n	80073d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e1df      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d6:	4b41      	ldr	r3, [pc, #260]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	493d      	ldr	r1, [pc, #244]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ea:	e040      	b.n	800746e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d023      	beq.n	800743c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073f4:	4b39      	ldr	r3, [pc, #228]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a38      	ldr	r2, [pc, #224]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7fd fedc 	bl	80051bc <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007408:	f7fd fed8 	bl	80051bc <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e1bd      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800741a:	4b30      	ldr	r3, [pc, #192]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0f0      	beq.n	8007408 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007426:	4b2d      	ldr	r3, [pc, #180]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	4929      	ldr	r1, [pc, #164]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007436:	4313      	orrs	r3, r2
 8007438:	600b      	str	r3, [r1, #0]
 800743a:	e018      	b.n	800746e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800743c:	4b27      	ldr	r3, [pc, #156]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a26      	ldr	r2, [pc, #152]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007442:	f023 0301 	bic.w	r3, r3, #1
 8007446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fd feb8 	bl	80051bc <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007450:	f7fd feb4 	bl	80051bc <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e199      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007462:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f0      	bne.n	8007450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d038      	beq.n	80074ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d019      	beq.n	80074b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007482:	4b16      	ldr	r3, [pc, #88]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748e:	f7fd fe95 	bl	80051bc <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007496:	f7fd fe91 	bl	80051bc <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e176      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80074aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <HAL_RCC_OscConfig+0x23a>
 80074b4:	e01a      	b.n	80074ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80074b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ba:	4a08      	ldr	r2, [pc, #32]	; (80074dc <HAL_RCC_OscConfig+0x280>)
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c2:	f7fd fe7b 	bl	80051bc <HAL_GetTick>
 80074c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ca:	f7fd fe77 	bl	80051bc <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d903      	bls.n	80074e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e15c      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
 80074dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e0:	4b91      	ldr	r3, [pc, #580]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80074e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1ee      	bne.n	80074ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80a4 	beq.w	8007642 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074fa:	4b8b      	ldr	r3, [pc, #556]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10d      	bne.n	8007522 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007506:	4b88      	ldr	r3, [pc, #544]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	4a87      	ldr	r2, [pc, #540]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 800750c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007510:	6413      	str	r3, [r2, #64]	; 0x40
 8007512:	4b85      	ldr	r3, [pc, #532]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751a:	60bb      	str	r3, [r7, #8]
 800751c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007522:	4b82      	ldr	r3, [pc, #520]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d118      	bne.n	8007560 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800752e:	4b7f      	ldr	r3, [pc, #508]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7e      	ldr	r2, [pc, #504]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800753a:	f7fd fe3f 	bl	80051bc <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007540:	e008      	b.n	8007554 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007542:	f7fd fe3b 	bl	80051bc <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b64      	cmp	r3, #100	; 0x64
 800754e:	d901      	bls.n	8007554 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e120      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007554:	4b75      	ldr	r3, [pc, #468]	; (800772c <HAL_RCC_OscConfig+0x4d0>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0f0      	beq.n	8007542 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d106      	bne.n	8007576 <HAL_RCC_OscConfig+0x31a>
 8007568:	4b6f      	ldr	r3, [pc, #444]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 800756a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756c:	4a6e      	ldr	r2, [pc, #440]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6713      	str	r3, [r2, #112]	; 0x70
 8007574:	e02d      	b.n	80075d2 <HAL_RCC_OscConfig+0x376>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10c      	bne.n	8007598 <HAL_RCC_OscConfig+0x33c>
 800757e:	4b6a      	ldr	r3, [pc, #424]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	4a69      	ldr	r2, [pc, #420]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	6713      	str	r3, [r2, #112]	; 0x70
 800758a:	4b67      	ldr	r3, [pc, #412]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 800758c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758e:	4a66      	ldr	r2, [pc, #408]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007590:	f023 0304 	bic.w	r3, r3, #4
 8007594:	6713      	str	r3, [r2, #112]	; 0x70
 8007596:	e01c      	b.n	80075d2 <HAL_RCC_OscConfig+0x376>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b05      	cmp	r3, #5
 800759e:	d10c      	bne.n	80075ba <HAL_RCC_OscConfig+0x35e>
 80075a0:	4b61      	ldr	r3, [pc, #388]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a60      	ldr	r2, [pc, #384]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075a6:	f043 0304 	orr.w	r3, r3, #4
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
 80075ac:	4b5e      	ldr	r3, [pc, #376]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	4a5d      	ldr	r2, [pc, #372]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	; 0x70
 80075b8:	e00b      	b.n	80075d2 <HAL_RCC_OscConfig+0x376>
 80075ba:	4b5b      	ldr	r3, [pc, #364]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4a5a      	ldr	r2, [pc, #360]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
 80075c6:	4b58      	ldr	r3, [pc, #352]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a57      	ldr	r2, [pc, #348]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075cc:	f023 0304 	bic.w	r3, r3, #4
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d015      	beq.n	8007606 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075da:	f7fd fdef 	bl	80051bc <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e2:	f7fd fdeb 	bl	80051bc <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e0ce      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f8:	4b4b      	ldr	r3, [pc, #300]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0ee      	beq.n	80075e2 <HAL_RCC_OscConfig+0x386>
 8007604:	e014      	b.n	8007630 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007606:	f7fd fdd9 	bl	80051bc <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800760c:	e00a      	b.n	8007624 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800760e:	f7fd fdd5 	bl	80051bc <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f241 3288 	movw	r2, #5000	; 0x1388
 800761c:	4293      	cmp	r3, r2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e0b8      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007624:	4b40      	ldr	r3, [pc, #256]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ee      	bne.n	800760e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d105      	bne.n	8007642 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007636:	4b3c      	ldr	r3, [pc, #240]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	4a3b      	ldr	r2, [pc, #236]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 800763c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80a4 	beq.w	8007794 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800764c:	4b36      	ldr	r3, [pc, #216]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b08      	cmp	r3, #8
 8007656:	d06b      	beq.n	8007730 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d149      	bne.n	80076f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007660:	4b31      	ldr	r3, [pc, #196]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a30      	ldr	r2, [pc, #192]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800766a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766c:	f7fd fda6 	bl	80051bc <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007674:	f7fd fda2 	bl	80051bc <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e087      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007686:	4b28      	ldr	r3, [pc, #160]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f0      	bne.n	8007674 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	019b      	lsls	r3, r3, #6
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	3b01      	subs	r3, #1
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	061b      	lsls	r3, r3, #24
 80076b6:	4313      	orrs	r3, r2
 80076b8:	4a1b      	ldr	r2, [pc, #108]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80076ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a18      	ldr	r2, [pc, #96]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80076c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076cc:	f7fd fd76 	bl	80051bc <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d4:	f7fd fd72 	bl	80051bc <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e057      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e6:	4b10      	ldr	r3, [pc, #64]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f0      	beq.n	80076d4 <HAL_RCC_OscConfig+0x478>
 80076f2:	e04f      	b.n	8007794 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f4:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a0b      	ldr	r2, [pc, #44]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 80076fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fd fd5c 	bl	80051bc <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007708:	f7fd fd58 	bl	80051bc <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e03d      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800771a:	4b03      	ldr	r3, [pc, #12]	; (8007728 <HAL_RCC_OscConfig+0x4cc>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f0      	bne.n	8007708 <HAL_RCC_OscConfig+0x4ac>
 8007726:	e035      	b.n	8007794 <HAL_RCC_OscConfig+0x538>
 8007728:	40023800 	.word	0x40023800
 800772c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007730:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <HAL_RCC_OscConfig+0x544>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d028      	beq.n	8007790 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007748:	429a      	cmp	r2, r3
 800774a:	d121      	bne.n	8007790 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007756:	429a      	cmp	r2, r3
 8007758:	d11a      	bne.n	8007790 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007766:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007768:	4293      	cmp	r3, r2
 800776a:	d111      	bne.n	8007790 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	3b01      	subs	r3, #1
 800777a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800777c:	429a      	cmp	r2, r3
 800777e:	d107      	bne.n	8007790 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40023800 	.word	0x40023800

080077a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0d0      	b.n	800795e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077bc:	4b6a      	ldr	r3, [pc, #424]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d910      	bls.n	80077ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ca:	4b67      	ldr	r3, [pc, #412]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f023 020f 	bic.w	r2, r3, #15
 80077d2:	4965      	ldr	r1, [pc, #404]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077da:	4b63      	ldr	r3, [pc, #396]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d001      	beq.n	80077ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0b8      	b.n	800795e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d020      	beq.n	800783a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007804:	4b59      	ldr	r3, [pc, #356]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4a58      	ldr	r2, [pc, #352]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 800780a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800780e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800781c:	4b53      	ldr	r3, [pc, #332]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4a52      	ldr	r2, [pc, #328]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007826:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007828:	4b50      	ldr	r3, [pc, #320]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	494d      	ldr	r1, [pc, #308]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d040      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d107      	bne.n	800785e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800784e:	4b47      	ldr	r3, [pc, #284]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d115      	bne.n	8007886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e07f      	b.n	800795e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d107      	bne.n	8007876 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007866:	4b41      	ldr	r3, [pc, #260]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e073      	b.n	800795e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007876:	4b3d      	ldr	r3, [pc, #244]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e06b      	b.n	800795e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007886:	4b39      	ldr	r3, [pc, #228]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f023 0203 	bic.w	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	4936      	ldr	r1, [pc, #216]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007894:	4313      	orrs	r3, r2
 8007896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007898:	f7fd fc90 	bl	80051bc <HAL_GetTick>
 800789c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078a0:	f7fd fc8c 	bl	80051bc <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e053      	b.n	800795e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b6:	4b2d      	ldr	r3, [pc, #180]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 020c 	and.w	r2, r3, #12
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d1eb      	bne.n	80078a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078c8:	4b27      	ldr	r3, [pc, #156]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d210      	bcs.n	80078f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d6:	4b24      	ldr	r3, [pc, #144]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f023 020f 	bic.w	r2, r3, #15
 80078de:	4922      	ldr	r1, [pc, #136]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e6:	4b20      	ldr	r3, [pc, #128]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d001      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e032      	b.n	800795e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007904:	4b19      	ldr	r3, [pc, #100]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4916      	ldr	r1, [pc, #88]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007912:	4313      	orrs	r3, r2
 8007914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	490e      	ldr	r1, [pc, #56]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007932:	4313      	orrs	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007936:	f000 f821 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800793a:	4601      	mov	r1, r0
 800793c:	4b0b      	ldr	r3, [pc, #44]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	091b      	lsrs	r3, r3, #4
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <HAL_RCC_ClockConfig+0x1cc>)
 8007948:	5cd3      	ldrb	r3, [r2, r3]
 800794a:	fa21 f303 	lsr.w	r3, r1, r3
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <HAL_RCC_ClockConfig+0x1d0>)
 8007950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007952:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCC_ClockConfig+0x1d4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fb f8fc 	bl	8002b54 <HAL_InitTick>

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40023c00 	.word	0x40023c00
 800796c:	40023800 	.word	0x40023800
 8007970:	0801a410 	.word	0x0801a410
 8007974:	20000000 	.word	0x20000000
 8007978:	20000004 	.word	0x20000004

0800797c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	2300      	movs	r3, #0
 800798c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007992:	4b63      	ldr	r3, [pc, #396]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 030c 	and.w	r3, r3, #12
 800799a:	2b04      	cmp	r3, #4
 800799c:	d007      	beq.n	80079ae <HAL_RCC_GetSysClockFreq+0x32>
 800799e:	2b08      	cmp	r3, #8
 80079a0:	d008      	beq.n	80079b4 <HAL_RCC_GetSysClockFreq+0x38>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 80b4 	bne.w	8007b10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079a8:	4b5e      	ldr	r3, [pc, #376]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80079aa:	60bb      	str	r3, [r7, #8]
      break;
 80079ac:	e0b3      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079ae:	4b5e      	ldr	r3, [pc, #376]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80079b0:	60bb      	str	r3, [r7, #8]
      break;
 80079b2:	e0b0      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079b4:	4b5a      	ldr	r3, [pc, #360]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079be:	4b58      	ldr	r3, [pc, #352]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d04a      	beq.n	8007a60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ca:	4b55      	ldr	r3, [pc, #340]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	099b      	lsrs	r3, r3, #6
 80079d0:	f04f 0400 	mov.w	r4, #0
 80079d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	ea03 0501 	and.w	r5, r3, r1
 80079e0:	ea04 0602 	and.w	r6, r4, r2
 80079e4:	4629      	mov	r1, r5
 80079e6:	4632      	mov	r2, r6
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	f04f 0400 	mov.w	r4, #0
 80079f0:	0154      	lsls	r4, r2, #5
 80079f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079f6:	014b      	lsls	r3, r1, #5
 80079f8:	4619      	mov	r1, r3
 80079fa:	4622      	mov	r2, r4
 80079fc:	1b49      	subs	r1, r1, r5
 80079fe:	eb62 0206 	sbc.w	r2, r2, r6
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	f04f 0400 	mov.w	r4, #0
 8007a0a:	0194      	lsls	r4, r2, #6
 8007a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a10:	018b      	lsls	r3, r1, #6
 8007a12:	1a5b      	subs	r3, r3, r1
 8007a14:	eb64 0402 	sbc.w	r4, r4, r2
 8007a18:	f04f 0100 	mov.w	r1, #0
 8007a1c:	f04f 0200 	mov.w	r2, #0
 8007a20:	00e2      	lsls	r2, r4, #3
 8007a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a26:	00d9      	lsls	r1, r3, #3
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	195b      	adds	r3, r3, r5
 8007a2e:	eb44 0406 	adc.w	r4, r4, r6
 8007a32:	f04f 0100 	mov.w	r1, #0
 8007a36:	f04f 0200 	mov.w	r2, #0
 8007a3a:	0262      	lsls	r2, r4, #9
 8007a3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007a40:	0259      	lsls	r1, r3, #9
 8007a42:	460b      	mov	r3, r1
 8007a44:	4614      	mov	r4, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	4621      	mov	r1, r4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f04f 0400 	mov.w	r4, #0
 8007a50:	461a      	mov	r2, r3
 8007a52:	4623      	mov	r3, r4
 8007a54:	f7f9 f910 	bl	8000c78 <__aeabi_uldivmod>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	e049      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a60:	4b2f      	ldr	r3, [pc, #188]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	099b      	lsrs	r3, r3, #6
 8007a66:	f04f 0400 	mov.w	r4, #0
 8007a6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	ea03 0501 	and.w	r5, r3, r1
 8007a76:	ea04 0602 	and.w	r6, r4, r2
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	f04f 0400 	mov.w	r4, #0
 8007a86:	0154      	lsls	r4, r2, #5
 8007a88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007a8c:	014b      	lsls	r3, r1, #5
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4622      	mov	r2, r4
 8007a92:	1b49      	subs	r1, r1, r5
 8007a94:	eb62 0206 	sbc.w	r2, r2, r6
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	f04f 0400 	mov.w	r4, #0
 8007aa0:	0194      	lsls	r4, r2, #6
 8007aa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007aa6:	018b      	lsls	r3, r1, #6
 8007aa8:	1a5b      	subs	r3, r3, r1
 8007aaa:	eb64 0402 	sbc.w	r4, r4, r2
 8007aae:	f04f 0100 	mov.w	r1, #0
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	00e2      	lsls	r2, r4, #3
 8007ab8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007abc:	00d9      	lsls	r1, r3, #3
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	195b      	adds	r3, r3, r5
 8007ac4:	eb44 0406 	adc.w	r4, r4, r6
 8007ac8:	f04f 0100 	mov.w	r1, #0
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	02a2      	lsls	r2, r4, #10
 8007ad2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007ad6:	0299      	lsls	r1, r3, #10
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4614      	mov	r4, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	4621      	mov	r1, r4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f04f 0400 	mov.w	r4, #0
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4623      	mov	r3, r4
 8007aea:	f7f9 f8c5 	bl	8000c78 <__aeabi_uldivmod>
 8007aee:	4603      	mov	r3, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	0c1b      	lsrs	r3, r3, #16
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	3301      	adds	r3, #1
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0c:	60bb      	str	r3, [r7, #8]
      break;
 8007b0e:	e002      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007b12:	60bb      	str	r3, [r7, #8]
      break;
 8007b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b16:	68bb      	ldr	r3, [r7, #8]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b20:	40023800 	.word	0x40023800
 8007b24:	00f42400 	.word	0x00f42400
 8007b28:	007a1200 	.word	0x007a1200

08007b2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b32:	681b      	ldr	r3, [r3, #0]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000000 	.word	0x20000000

08007b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b48:	f7ff fff0 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0a9b      	lsrs	r3, r3, #10
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	4a03      	ldr	r2, [pc, #12]	; (8007b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b5a:	5cd3      	ldrb	r3, [r2, r3]
 8007b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40023800 	.word	0x40023800
 8007b68:	0801a420 	.word	0x0801a420

08007b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b70:	f7ff ffdc 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 8007b74:	4601      	mov	r1, r0
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	0b5b      	lsrs	r3, r3, #13
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	4a03      	ldr	r2, [pc, #12]	; (8007b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b82:	5cd3      	ldrb	r3, [r2, r3]
 8007b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	0801a420 	.word	0x0801a420

08007b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	220f      	movs	r2, #15
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0203 	and.w	r2, r3, #3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007bc8:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	08db      	lsrs	r3, r3, #3
 8007bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <HAL_RCC_GetClockConfig+0x60>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 020f 	and.w	r2, r3, #15
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	40023c00 	.word	0x40023c00

08007bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d012      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c20:	4b69      	ldr	r3, [pc, #420]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	4a68      	ldr	r2, [pc, #416]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c2a:	6093      	str	r3, [r2, #8]
 8007c2c:	4b66      	ldr	r3, [pc, #408]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c34:	4964      	ldr	r1, [pc, #400]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c42:	2301      	movs	r3, #1
 8007c44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d017      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c52:	4b5d      	ldr	r3, [pc, #372]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c60:	4959      	ldr	r1, [pc, #356]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c70:	d101      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c72:	2301      	movs	r3, #1
 8007c74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d017      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007c8e:	4b4e      	ldr	r3, [pc, #312]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	494a      	ldr	r1, [pc, #296]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cac:	d101      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 808b 	beq.w	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cdc:	4b3a      	ldr	r3, [pc, #232]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	4a39      	ldr	r2, [pc, #228]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8007ce8:	4b37      	ldr	r3, [pc, #220]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cf4:	4b35      	ldr	r3, [pc, #212]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a34      	ldr	r2, [pc, #208]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d00:	f7fd fa5c 	bl	80051bc <HAL_GetTick>
 8007d04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d06:	e008      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d08:	f7fd fa58 	bl	80051bc <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b64      	cmp	r3, #100	; 0x64
 8007d14:	d901      	bls.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e31e      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d1a:	4b2c      	ldr	r3, [pc, #176]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0f0      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d26:	4b28      	ldr	r3, [pc, #160]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d035      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d02e      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d44:	4b20      	ldr	r3, [pc, #128]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5e:	4a1a      	ldr	r2, [pc, #104]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d114      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fd fa20 	bl	80051bc <HAL_GetTick>
 8007d7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d7e:	e00a      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d80:	f7fd fa1c 	bl	80051bc <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e2e0      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0ee      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dae:	d111      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007db0:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007dbe:	400b      	ands	r3, r1
 8007dc0:	4901      	ldr	r1, [pc, #4]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	608b      	str	r3, [r1, #8]
 8007dc6:	e00b      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	40007000 	.word	0x40007000
 8007dd0:	0ffffcff 	.word	0x0ffffcff
 8007dd4:	4bac      	ldr	r3, [pc, #688]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	4aab      	ldr	r2, [pc, #684]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dde:	6093      	str	r3, [r2, #8]
 8007de0:	4ba9      	ldr	r3, [pc, #676]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dec:	49a6      	ldr	r1, [pc, #664]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007dfe:	4ba2      	ldr	r3, [pc, #648]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e04:	4aa0      	ldr	r2, [pc, #640]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e0e:	4b9e      	ldr	r3, [pc, #632]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	499b      	ldr	r1, [pc, #620]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e2c:	4b96      	ldr	r3, [pc, #600]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e3a:	4993      	ldr	r1, [pc, #588]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e4e:	4b8e      	ldr	r3, [pc, #568]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e5c:	498a      	ldr	r1, [pc, #552]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e70:	4b85      	ldr	r3, [pc, #532]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e7e:	4982      	ldr	r1, [pc, #520]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e92:	4b7d      	ldr	r3, [pc, #500]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	4979      	ldr	r1, [pc, #484]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007eb4:	4b74      	ldr	r3, [pc, #464]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eba:	f023 0203 	bic.w	r2, r3, #3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	4971      	ldr	r1, [pc, #452]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ed6:	4b6c      	ldr	r3, [pc, #432]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007edc:	f023 020c 	bic.w	r2, r3, #12
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee4:	4968      	ldr	r1, [pc, #416]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ef8:	4b63      	ldr	r3, [pc, #396]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	4960      	ldr	r1, [pc, #384]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f1a:	4b5b      	ldr	r3, [pc, #364]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	4957      	ldr	r1, [pc, #348]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f3c:	4b52      	ldr	r3, [pc, #328]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	494f      	ldr	r1, [pc, #316]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f5e:	4b4a      	ldr	r3, [pc, #296]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	4946      	ldr	r1, [pc, #280]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f80:	4b41      	ldr	r3, [pc, #260]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8e:	493e      	ldr	r1, [pc, #248]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007fa2:	4b39      	ldr	r3, [pc, #228]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb0:	4935      	ldr	r1, [pc, #212]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fc4:	4b30      	ldr	r3, [pc, #192]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fd2:	492d      	ldr	r1, [pc, #180]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d011      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007fe6:	4b28      	ldr	r3, [pc, #160]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff4:	4924      	ldr	r1, [pc, #144]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008004:	d101      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008006:	2301      	movs	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008016:	4b1c      	ldr	r3, [pc, #112]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008024:	4918      	ldr	r1, [pc, #96]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008026:	4313      	orrs	r3, r2
 8008028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008048:	490f      	ldr	r1, [pc, #60]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d005      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800805e:	f040 80d8 	bne.w	8008212 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a08      	ldr	r2, [pc, #32]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008068:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800806c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800806e:	f7fd f8a5 	bl	80051bc <HAL_GetTick>
 8008072:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008074:	e00a      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008076:	f7fd f8a1 	bl	80051bc <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b64      	cmp	r3, #100	; 0x64
 8008082:	d903      	bls.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e167      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008088:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800808c:	4bad      	ldr	r3, [pc, #692]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1ee      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d021      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d11d      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080ac:	4ba5      	ldr	r3, [pc, #660]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080ba:	4ba2      	ldr	r3, [pc, #648]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c0:	0e1b      	lsrs	r3, r3, #24
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	019a      	lsls	r2, r3, #6
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	431a      	orrs	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	061b      	lsls	r3, r3, #24
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	071b      	lsls	r3, r3, #28
 80080e0:	4998      	ldr	r1, [pc, #608]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fc:	d00a      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008106:	2b00      	cmp	r3, #0
 8008108:	d02e      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008112:	d129      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008114:	4b8b      	ldr	r3, [pc, #556]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800811a:	0c1b      	lsrs	r3, r3, #16
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008122:	4b88      	ldr	r3, [pc, #544]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008128:	0f1b      	lsrs	r3, r3, #28
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	019a      	lsls	r2, r3, #6
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	041b      	lsls	r3, r3, #16
 800813a:	431a      	orrs	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	061b      	lsls	r3, r3, #24
 8008142:	431a      	orrs	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	071b      	lsls	r3, r3, #28
 8008148:	497e      	ldr	r1, [pc, #504]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008150:	4b7c      	ldr	r3, [pc, #496]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008156:	f023 021f 	bic.w	r2, r3, #31
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	3b01      	subs	r3, #1
 8008160:	4978      	ldr	r1, [pc, #480]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01d      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008174:	4b73      	ldr	r3, [pc, #460]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800817a:	0e1b      	lsrs	r3, r3, #24
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008182:	4b70      	ldr	r3, [pc, #448]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008188:	0f1b      	lsrs	r3, r3, #28
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	019a      	lsls	r2, r3, #6
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	041b      	lsls	r3, r3, #16
 800819c:	431a      	orrs	r2, r3
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	061b      	lsls	r3, r3, #24
 80081a2:	431a      	orrs	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	071b      	lsls	r3, r3, #28
 80081a8:	4966      	ldr	r1, [pc, #408]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d011      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	019a      	lsls	r2, r3, #6
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	431a      	orrs	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	061b      	lsls	r3, r3, #24
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	071b      	lsls	r3, r3, #28
 80081d8:	495a      	ldr	r1, [pc, #360]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80081e0:	4b58      	ldr	r3, [pc, #352]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a57      	ldr	r2, [pc, #348]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80081e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ec:	f7fc ffe6 	bl	80051bc <HAL_GetTick>
 80081f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081f2:	e008      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80081f4:	f7fc ffe2 	bl	80051bc <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b64      	cmp	r3, #100	; 0x64
 8008200:	d901      	bls.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e0a8      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008206:	4b4f      	ldr	r3, [pc, #316]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b01      	cmp	r3, #1
 8008216:	f040 809e 	bne.w	8008356 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800821a:	4b4a      	ldr	r3, [pc, #296]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a49      	ldr	r2, [pc, #292]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008226:	f7fc ffc9 	bl	80051bc <HAL_GetTick>
 800822a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800822c:	e008      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800822e:	f7fc ffc5 	bl	80051bc <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b64      	cmp	r3, #100	; 0x64
 800823a:	d901      	bls.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e08b      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008240:	4b40      	ldr	r3, [pc, #256]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800824c:	d0ef      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800826a:	2b00      	cmp	r3, #0
 800826c:	d02e      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d12a      	bne.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008276:	4b33      	ldr	r3, [pc, #204]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008284:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828a:	0f1b      	lsrs	r3, r3, #28
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	019a      	lsls	r2, r3, #6
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	431a      	orrs	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	061b      	lsls	r3, r3, #24
 80082a4:	431a      	orrs	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	071b      	lsls	r3, r3, #28
 80082aa:	4926      	ldr	r1, [pc, #152]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80082b2:	4b24      	ldr	r3, [pc, #144]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	3b01      	subs	r3, #1
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	491f      	ldr	r1, [pc, #124]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d022      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x726>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082e0:	d11d      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082e2:	4b18      	ldr	r3, [pc, #96]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082f0:	4b14      	ldr	r3, [pc, #80]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80082f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f6:	0f1b      	lsrs	r3, r3, #28
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	019a      	lsls	r2, r3, #6
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	431a      	orrs	r2, r3
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	061b      	lsls	r3, r3, #24
 8008310:	431a      	orrs	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	071b      	lsls	r3, r3, #28
 8008316:	490b      	ldr	r1, [pc, #44]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008318:	4313      	orrs	r3, r2
 800831a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a08      	ldr	r2, [pc, #32]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832a:	f7fc ff47 	bl	80051bc <HAL_GetTick>
 800832e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008330:	e00a      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008332:	f7fc ff43 	bl	80051bc <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b64      	cmp	r3, #100	; 0x64
 800833e:	d903      	bls.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e009      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008344:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008354:	d1ed      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3720      	adds	r7, #32
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40023800 	.word	0x40023800

08008364 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e022      	b.n	80083bc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d105      	bne.n	800838e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fa f9c1 	bl	8002710 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2203      	movs	r2, #3
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f814 	bl	80083c4 <HAL_SD_InitCard>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e00a      	b.n	80083bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083c4:	b5b0      	push	{r4, r5, r7, lr}
 80083c6:	b08e      	sub	sp, #56	; 0x38
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80083dc:	2300      	movs	r3, #0
 80083de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80083e0:	2376      	movs	r3, #118	; 0x76
 80083e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681d      	ldr	r5, [r3, #0]
 80083e8:	466c      	mov	r4, sp
 80083ea:	f107 0314 	add.w	r3, r7, #20
 80083ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083f6:	f107 0308 	add.w	r3, r7, #8
 80083fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083fc:	4628      	mov	r0, r5
 80083fe:	f003 fa97 	bl	800b930 <SDMMC_Init>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e03b      	b.n	800848c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008422:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f003 facb 	bl	800b9c4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800843c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 ffca 	bl	80093d8 <SD_PowerON>
 8008444:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e013      	b.n	800848c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fee9 	bl	800923c <SD_InitCard>
 800846a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00b      	beq.n	800848a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	431a      	orrs	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3728      	adds	r7, #40	; 0x28
 8008490:	46bd      	mov	sp, r7
 8008492:	bdb0      	pop	{r4, r5, r7, pc}

08008494 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08c      	sub	sp, #48	; 0x30
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d107      	bne.n	80084bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e0cc      	b.n	8008656 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	f040 80c5 	bne.w	8008654 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80084d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	441a      	add	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084da:	429a      	cmp	r2, r3
 80084dc:	d907      	bls.n	80084ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e0b3      	b.n	8008656 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2203      	movs	r2, #3
 80084f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800850c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	4a53      	ldr	r2, [pc, #332]	; (8008660 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	4a52      	ldr	r2, [pc, #328]	; (8008664 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800851c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	2200      	movs	r2, #0
 8008524:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3380      	adds	r3, #128	; 0x80
 8008530:	4619      	mov	r1, r3
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	025b      	lsls	r3, r3, #9
 8008538:	089b      	lsrs	r3, r3, #2
 800853a:	f7fc fffd 	bl	8005538 <HAL_DMA_Start_IT>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d017      	beq.n	8008574 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008552:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a43      	ldr	r2, [pc, #268]	; (8008668 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800855a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e070      	b.n	8008656 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0208 	orr.w	r2, r2, #8
 8008582:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008588:	2b01      	cmp	r3, #1
 800858a:	d002      	beq.n	8008592 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	025b      	lsls	r3, r3, #9
 8008590:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800859a:	4618      	mov	r0, r3
 800859c:	f003 faa6 	bl	800baec <SDMMC_CmdBlockLength>
 80085a0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00f      	beq.n	80085c8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a2e      	ldr	r2, [pc, #184]	; (8008668 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	431a      	orrs	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e046      	b.n	8008656 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085c8:	f04f 33ff 	mov.w	r3, #4294967295
 80085cc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	025b      	lsls	r3, r3, #9
 80085d2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085d4:	2390      	movs	r3, #144	; 0x90
 80085d6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085d8:	2302      	movs	r3, #2
 80085da:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085dc:	2300      	movs	r3, #0
 80085de:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f107 0210 	add.w	r2, r7, #16
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f003 fa50 	bl	800ba94 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d90a      	bls.n	8008610 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2282      	movs	r2, #130	; 0x82
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008606:	4618      	mov	r0, r3
 8008608:	f003 fab4 	bl	800bb74 <SDMMC_CmdReadMultiBlock>
 800860c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800860e:	e009      	b.n	8008624 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2281      	movs	r2, #129	; 0x81
 8008614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800861c:	4618      	mov	r0, r3
 800861e:	f003 fa87 	bl	800bb30 <SDMMC_CmdReadSingleBlock>
 8008622:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d012      	beq.n	8008650 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a0e      	ldr	r2, [pc, #56]	; (8008668 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008630:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008638:	431a      	orrs	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e002      	b.n	8008656 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	e000      	b.n	8008656 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008654:	2302      	movs	r3, #2
  }
}
 8008656:	4618      	mov	r0, r3
 8008658:	3730      	adds	r7, #48	; 0x30
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	0800904b 	.word	0x0800904b
 8008664:	080090bd 	.word	0x080090bd
 8008668:	004005ff 	.word	0x004005ff

0800866c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08c      	sub	sp, #48	; 0x30
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d107      	bne.n	8008694 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0cf      	b.n	8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b01      	cmp	r3, #1
 800869e:	f040 80c8 	bne.w	8008832 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80086a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	441a      	add	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d907      	bls.n	80086c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e0b6      	b.n	8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2203      	movs	r2, #3
 80086ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 021a 	orr.w	r2, r2, #26
 80086e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	4a54      	ldr	r2, [pc, #336]	; (800883c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80086ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	4a53      	ldr	r2, [pc, #332]	; (8008840 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80086f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	2200      	movs	r2, #0
 80086fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	2b01      	cmp	r3, #1
 8008704:	d002      	beq.n	800870c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	025b      	lsls	r3, r3, #9
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008714:	4618      	mov	r0, r3
 8008716:	f003 f9e9 	bl	800baec <SDMMC_CmdBlockLength>
 800871a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a47      	ldr	r2, [pc, #284]	; (8008844 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	431a      	orrs	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e078      	b.n	8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d90a      	bls.n	800875e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	22a0      	movs	r2, #160	; 0xa0
 800874c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008754:	4618      	mov	r0, r3
 8008756:	f003 fa51 	bl	800bbfc <SDMMC_CmdWriteMultiBlock>
 800875a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800875c:	e009      	b.n	8008772 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2290      	movs	r2, #144	; 0x90
 8008762:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800876a:	4618      	mov	r0, r3
 800876c:	f003 fa24 	bl	800bbb8 <SDMMC_CmdWriteSingleBlock>
 8008770:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d012      	beq.n	800879e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a31      	ldr	r2, [pc, #196]	; (8008844 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800877e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	431a      	orrs	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e04a      	b.n	8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0208 	orr.w	r2, r2, #8
 80087ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3380      	adds	r3, #128	; 0x80
 80087ba:	461a      	mov	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	025b      	lsls	r3, r3, #9
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	f7fc feb9 	bl	8005538 <HAL_DMA_Start_IT>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01a      	beq.n	8008802 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 021a 	bic.w	r2, r2, #26
 80087da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a18      	ldr	r2, [pc, #96]	; (8008844 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e018      	b.n	8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	025b      	lsls	r3, r3, #9
 800880c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800880e:	2390      	movs	r3, #144	; 0x90
 8008810:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008816:	2300      	movs	r3, #0
 8008818:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800881a:	2301      	movs	r3, #1
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f107 0210 	add.w	r2, r7, #16
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f003 f933 	bl	800ba94 <SDMMC_ConfigData>

      return HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	e000      	b.n	8008834 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008832:	2302      	movs	r3, #2
  }
}
 8008834:	4618      	mov	r0, r3
 8008836:	3730      	adds	r7, #48	; 0x30
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	08009021 	.word	0x08009021
 8008840:	080090bd 	.word	0x080090bd
 8008844:	004005ff 	.word	0x004005ff

08008848 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d008      	beq.n	8008876 <HAL_SD_IRQHandler+0x2e>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 ffc8 	bl	8009804 <SD_Read_IT>
 8008874:	e153      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 808d 	beq.w	80089a0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800888e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	4ba3      	ldr	r3, [pc, #652]	; (8008b28 <HAL_SD_IRQHandler+0x2e0>)
 800889c:	400b      	ands	r3, r1
 800889e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0201 	bic.w	r2, r2, #1
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d039      	beq.n	800892e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <HAL_SD_IRQHandler+0x86>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d011      	beq.n	80088f2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f003 f9b4 	bl	800bc40 <SDMMC_CmdStopTransfer>
 80088d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d008      	beq.n	80088f2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f921 	bl	8008b34 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <HAL_SD_IRQHandler+0xd6>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f005 f936 	bl	800db90 <HAL_SD_RxCpltCallback>
 8008924:	e0fb      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f005 f928 	bl	800db7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800892c:	e0f7      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 80f2 	beq.w	8008b1e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d011      	beq.n	8008968 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f003 f979 	bl	800bc40 <SDMMC_CmdStopTransfer>
 800894e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d008      	beq.n	8008968 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	431a      	orrs	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f8e6 	bl	8008b34 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 80d5 	bne.w	8008b1e <HAL_SD_IRQHandler+0x2d6>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 80cf 	bne.w	8008b1e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0208 	bic.w	r2, r2, #8
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f005 f8ef 	bl	800db7c <HAL_SD_TxCpltCallback>
}
 800899e:	e0be      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <HAL_SD_IRQHandler+0x178>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 ff74 	bl	80098a6 <SD_Write_IT>
 80089be:	e0ae      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80a7 	beq.w	8008b1e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	f043 0202 	orr.w	r2, r3, #2
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	f003 0308 	and.w	r3, r3, #8
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	f043 0208 	orr.w	r2, r3, #8
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a24:	f003 0310 	and.w	r3, r3, #16
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	f043 0210 	orr.w	r2, r3, #16
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a40:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008a50:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f003 f8f2 	bl	800bc40 <SDMMC_CmdStopTransfer>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f857 	bl	8008b34 <HAL_SD_ErrorCallback>
}
 8008a86:	e04a      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d045      	beq.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <HAL_SD_IRQHandler+0x25e>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d011      	beq.n	8008aca <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	4a20      	ldr	r2, [pc, #128]	; (8008b2c <HAL_SD_IRQHandler+0x2e4>)
 8008aac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fc fda0 	bl	80055f8 <HAL_DMA_Abort_IT>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d02f      	beq.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fb4c 	bl	8009160 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008ac8:	e029      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <HAL_SD_IRQHandler+0x296>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d011      	beq.n	8008b02 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	4a13      	ldr	r2, [pc, #76]	; (8008b30 <HAL_SD_IRQHandler+0x2e8>)
 8008ae4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fc fd84 	bl	80055f8 <HAL_DMA_Abort_IT>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d013      	beq.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fb67 	bl	80091ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008b00:	e00d      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f005 f826 	bl	800db68 <HAL_SD_AbortCallback>
}
 8008b1c:	e7ff      	b.n	8008b1e <HAL_SD_IRQHandler+0x2d6>
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	ffff3ec5 	.word	0xffff3ec5
 8008b2c:	08009161 	.word	0x08009161
 8008b30:	080091cf 	.word	0x080091cf

08008b34 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b56:	0f9b      	lsrs	r3, r3, #30
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b62:	0e9b      	lsrs	r3, r3, #26
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b74:	0e1b      	lsrs	r3, r3, #24
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba8:	0d1b      	lsrs	r3, r3, #20
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb4:	0c1b      	lsrs	r3, r3, #16
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc6:	0bdb      	lsrs	r3, r3, #15
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bd8:	0b9b      	lsrs	r3, r3, #14
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bea:	0b5b      	lsrs	r3, r3, #13
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bfc:	0b1b      	lsrs	r3, r3, #12
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d163      	bne.n	8008ce0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c1c:	009a      	lsls	r2, r3, #2
 8008c1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c22:	4013      	ands	r3, r2
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c28:	0f92      	lsrs	r2, r2, #30
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c34:	0edb      	lsrs	r3, r3, #27
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c46:	0e1b      	lsrs	r3, r3, #24
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c58:	0d5b      	lsrs	r3, r3, #21
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6a:	0c9b      	lsrs	r3, r3, #18
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7c:	0bdb      	lsrs	r3, r3, #15
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f003 0307 	and.w	r3, r3, #7
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	7e1b      	ldrb	r3, [r3, #24]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	3302      	adds	r3, #2
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008caa:	fb02 f203 	mul.w	r2, r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	7a1b      	ldrb	r3, [r3, #8]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 030f 	and.w	r3, r3, #15
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	409a      	lsls	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008ccc:	0a52      	lsrs	r2, r2, #9
 8008cce:	fb02 f203 	mul.w	r2, r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cdc:	661a      	str	r2, [r3, #96]	; 0x60
 8008cde:	e031      	b.n	8008d44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d11d      	bne.n	8008d24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	3301      	adds	r3, #1
 8008d04:	029a      	lsls	r2, r3, #10
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	661a      	str	r2, [r3, #96]	; 0x60
 8008d22:	e00f      	b.n	8008d44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a58      	ldr	r2, [pc, #352]	; (8008e8c <HAL_SD_GetCardCSD+0x344>)
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e09d      	b.n	8008e80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d48:	0b9b      	lsrs	r3, r3, #14
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d5a:	09db      	lsrs	r3, r3, #7
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7c:	0fdb      	lsrs	r3, r3, #31
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d88:	0f5b      	lsrs	r3, r3, #29
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 0303 	and.w	r3, r3, #3
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9a:	0e9b      	lsrs	r3, r3, #26
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	0d9b      	lsrs	r3, r3, #22
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbe:	0d5b      	lsrs	r3, r3, #21
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dda:	0c1b      	lsrs	r3, r3, #16
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	0bdb      	lsrs	r3, r3, #15
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e02:	0b9b      	lsrs	r3, r3, #14
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	0b5b      	lsrs	r3, r3, #13
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2a:	0b1b      	lsrs	r3, r3, #12
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3e:	0a9b      	lsrs	r3, r3, #10
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e52:	0a1b      	lsrs	r3, r3, #8
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	004005ff 	.word	0x004005ff

08008e90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ee8:	b5b0      	push	{r4, r5, r7, lr}
 8008eea:	b08e      	sub	sp, #56	; 0x38
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2203      	movs	r2, #3
 8008ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d02e      	beq.n	8008f60 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f08:	d106      	bne.n	8008f18 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	639a      	str	r2, [r3, #56]	; 0x38
 8008f16:	e029      	b.n	8008f6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f1e:	d10a      	bne.n	8008f36 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fb0f 	bl	8009544 <SD_WideBus_Enable>
 8008f26:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38
 8008f34:	e01a      	b.n	8008f6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fb4c 	bl	80095da <SD_WideBus_Disable>
 8008f42:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	639a      	str	r2, [r3, #56]	; 0x38
 8008f50:	e00c      	b.n	8008f6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f5e:	e005      	b.n	8008f6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d009      	beq.n	8008f88 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e024      	b.n	8008fd2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681d      	ldr	r5, [r3, #0]
 8008fae:	466c      	mov	r4, sp
 8008fb0:	f107 0318 	add.w	r3, r7, #24
 8008fb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f002 fcb4 	bl	800b930 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3728      	adds	r7, #40	; 0x28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	004005ff 	.word	0x004005ff

08008fe0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008fec:	f107 030c 	add.w	r3, r7, #12
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa7e 	bl	80094f4 <SD_SendStatus>
 8008ff8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	0a5b      	lsrs	r3, r3, #9
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009016:	693b      	ldr	r3, [r7, #16]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800903c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b084      	sub	sp, #16
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009056:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	2b82      	cmp	r3, #130	; 0x82
 800905e:	d111      	bne.n	8009084 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4618      	mov	r0, r3
 8009066:	f002 fdeb 	bl	800bc40 <SDMMC_CmdStopTransfer>
 800906a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	431a      	orrs	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fd58 	bl	8008b34 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0208 	bic.w	r2, r2, #8
 8009092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f240 523a 	movw	r2, #1338	; 0x53a
 800909c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f004 fd6f 	bl	800db90 <HAL_SD_RxCpltCallback>
#endif
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7fc fc40 	bl	8005950 <HAL_DMA_GetError>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d03e      	beq.n	8009154 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d002      	beq.n	80090f2 <SD_DMAError+0x36>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d12d      	bne.n	800914e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a19      	ldr	r2, [pc, #100]	; (800915c <SD_DMAError+0xa0>)
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009108:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7ff ff62 	bl	8008fe0 <HAL_SD_GetCardState>
 800911c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b06      	cmp	r3, #6
 8009122:	d002      	beq.n	800912a <SD_DMAError+0x6e>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b05      	cmp	r3, #5
 8009128:	d10a      	bne.n	8009140 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4618      	mov	r0, r3
 8009130:	f002 fd86 	bl	800bc40 <SDMMC_CmdStopTransfer>
 8009134:	4602      	mov	r2, r0
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	431a      	orrs	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2200      	movs	r2, #0
 800914c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800914e:	6978      	ldr	r0, [r7, #20]
 8009150:	f7ff fcf0 	bl	8008b34 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009154:	bf00      	nop
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	004005ff 	.word	0x004005ff

08009160 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f240 523a 	movw	r2, #1338	; 0x53a
 8009176:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff ff31 	bl	8008fe0 <HAL_SD_GetCardState>
 800917e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b06      	cmp	r3, #6
 8009192:	d002      	beq.n	800919a <SD_DMATxAbort+0x3a>
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b05      	cmp	r3, #5
 8009198:	d10a      	bne.n	80091b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4618      	mov	r0, r3
 80091a0:	f002 fd4e 	bl	800bc40 <SDMMC_CmdStopTransfer>
 80091a4:	4602      	mov	r2, r0
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	431a      	orrs	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d103      	bne.n	80091c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f004 fcd5 	bl	800db68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80091be:	e002      	b.n	80091c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff fcb7 	bl	8008b34 <HAL_SD_ErrorCallback>
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80091e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fefa 	bl	8008fe0 <HAL_SD_GetCardState>
 80091ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b06      	cmp	r3, #6
 8009200:	d002      	beq.n	8009208 <SD_DMARxAbort+0x3a>
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b05      	cmp	r3, #5
 8009206:	d10a      	bne.n	800921e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f002 fd17 	bl	800bc40 <SDMMC_CmdStopTransfer>
 8009212:	4602      	mov	r2, r0
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	431a      	orrs	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	2b00      	cmp	r3, #0
 8009224:	d103      	bne.n	800922e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f004 fc9e 	bl	800db68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800922c:	e002      	b.n	8009234 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fc80 	bl	8008b34 <HAL_SD_ErrorCallback>
}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800923c:	b5b0      	push	{r4, r5, r7, lr}
 800923e:	b094      	sub	sp, #80	; 0x50
 8009240:	af04      	add	r7, sp, #16
 8009242:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009244:	2301      	movs	r3, #1
 8009246:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4618      	mov	r0, r3
 800924e:	f002 fbc8 	bl	800b9e2 <SDMMC_GetPowerState>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009258:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800925c:	e0b7      	b.n	80093ce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009262:	2b03      	cmp	r3, #3
 8009264:	d02f      	beq.n	80092c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f002 fdf3 	bl	800be56 <SDMMC_CmdSendCID>
 8009270:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <SD_InitCard+0x40>
    {
      return errorstate;
 8009278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927a:	e0a8      	b.n	80093ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f002 fbf3 	bl	800ba6e <SDMMC_GetResponse>
 8009288:	4602      	mov	r2, r0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2104      	movs	r1, #4
 8009294:	4618      	mov	r0, r3
 8009296:	f002 fbea 	bl	800ba6e <SDMMC_GetResponse>
 800929a:	4602      	mov	r2, r0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2108      	movs	r1, #8
 80092a6:	4618      	mov	r0, r3
 80092a8:	f002 fbe1 	bl	800ba6e <SDMMC_GetResponse>
 80092ac:	4602      	mov	r2, r0
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	210c      	movs	r1, #12
 80092b8:	4618      	mov	r0, r3
 80092ba:	f002 fbd8 	bl	800ba6e <SDMMC_GetResponse>
 80092be:	4602      	mov	r2, r0
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d00d      	beq.n	80092ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f107 020e 	add.w	r2, r7, #14
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f002 fdf9 	bl	800bed0 <SDMMC_CmdSetRelAdd>
 80092de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <SD_InitCard+0xae>
    {
      return errorstate;
 80092e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e8:	e071      	b.n	80093ce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d036      	beq.n	8009360 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009302:	041b      	lsls	r3, r3, #16
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f002 fdc3 	bl	800be92 <SDMMC_CmdSendCSD>
 800930c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800930e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	e05a      	b.n	80093ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2100      	movs	r1, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f002 fba5 	bl	800ba6e <SDMMC_GetResponse>
 8009324:	4602      	mov	r2, r0
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2104      	movs	r1, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f002 fb9c 	bl	800ba6e <SDMMC_GetResponse>
 8009336:	4602      	mov	r2, r0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2108      	movs	r1, #8
 8009342:	4618      	mov	r0, r3
 8009344:	f002 fb93 	bl	800ba6e <SDMMC_GetResponse>
 8009348:	4602      	mov	r2, r0
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	210c      	movs	r1, #12
 8009354:	4618      	mov	r0, r3
 8009356:	f002 fb8a 	bl	800ba6e <SDMMC_GetResponse>
 800935a:	4602      	mov	r2, r0
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2104      	movs	r1, #4
 8009366:	4618      	mov	r0, r3
 8009368:	f002 fb81 	bl	800ba6e <SDMMC_GetResponse>
 800936c:	4603      	mov	r3, r0
 800936e:	0d1a      	lsrs	r2, r3, #20
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009374:	f107 0310 	add.w	r3, r7, #16
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fbe4 	bl	8008b48 <HAL_SD_GetCardCSD>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800938a:	e020      	b.n	80093ce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6819      	ldr	r1, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	f04f 0400 	mov.w	r4, #0
 800939a:	461a      	mov	r2, r3
 800939c:	4623      	mov	r3, r4
 800939e:	4608      	mov	r0, r1
 80093a0:	f002 fc70 	bl	800bc84 <SDMMC_CmdSelDesel>
 80093a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80093a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <SD_InitCard+0x174>
  {
    return errorstate;
 80093ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ae:	e00e      	b.n	80093ce <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681d      	ldr	r5, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	466c      	mov	r4, sp
 80093b8:	f103 0210 	add.w	r2, r3, #16
 80093bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80093be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093c2:	3304      	adds	r3, #4
 80093c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093c6:	4628      	mov	r0, r5
 80093c8:	f002 fab2 	bl	800b930 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3740      	adds	r7, #64	; 0x40
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080093d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	2300      	movs	r3, #0
 80093ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f002 fc6a 	bl	800bcca <SDMMC_CmdGoIdleState>
 80093f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <SD_PowerON+0x2a>
  {
    return errorstate;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	e072      	b.n	80094e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f002 fc7d 	bl	800bd06 <SDMMC_CmdOperCond>
 800940c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00d      	beq.n	8009430 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4618      	mov	r0, r3
 8009420:	f002 fc53 	bl	800bcca <SDMMC_CmdGoIdleState>
 8009424:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d004      	beq.n	8009436 <SD_PowerON+0x5e>
    {
      return errorstate;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	e05b      	b.n	80094e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800943a:	2b01      	cmp	r3, #1
 800943c:	d137      	bne.n	80094ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2100      	movs	r1, #0
 8009444:	4618      	mov	r0, r3
 8009446:	f002 fc7d 	bl	800bd44 <SDMMC_CmdAppCommand>
 800944a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d02d      	beq.n	80094ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009452:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009456:	e047      	b.n	80094e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f002 fc70 	bl	800bd44 <SDMMC_CmdAppCommand>
 8009464:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <SD_PowerON+0x98>
    {
      return errorstate;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	e03b      	b.n	80094e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	491e      	ldr	r1, [pc, #120]	; (80094f0 <SD_PowerON+0x118>)
 8009476:	4618      	mov	r0, r3
 8009478:	f002 fc86 	bl	800bd88 <SDMMC_CmdAppOperCommand>
 800947c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009484:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009488:	e02e      	b.n	80094e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2100      	movs	r1, #0
 8009490:	4618      	mov	r0, r3
 8009492:	f002 faec 	bl	800ba6e <SDMMC_GetResponse>
 8009496:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	0fdb      	lsrs	r3, r3, #31
 800949c:	2b01      	cmp	r3, #1
 800949e:	d101      	bne.n	80094a4 <SD_PowerON+0xcc>
 80094a0:	2301      	movs	r3, #1
 80094a2:	e000      	b.n	80094a6 <SD_PowerON+0xce>
 80094a4:	2300      	movs	r3, #0
 80094a6:	613b      	str	r3, [r7, #16]

    count++;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d802      	bhi.n	80094be <SD_PowerON+0xe6>
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0cc      	beq.n	8009458 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d902      	bls.n	80094ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094cc:	e00c      	b.n	80094e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d003      	beq.n	80094e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	645a      	str	r2, [r3, #68]	; 0x44
 80094de:	e002      	b.n	80094e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	c1100000 	.word	0xc1100000

080094f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d102      	bne.n	800950a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009508:	e018      	b.n	800953c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	4619      	mov	r1, r3
 8009516:	4610      	mov	r0, r2
 8009518:	f002 fcfb 	bl	800bf12 <SDMMC_CmdSendStatus>
 800951c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	e009      	b.n	800953c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f002 fa9d 	bl	800ba6e <SDMMC_GetResponse>
 8009534:	4602      	mov	r2, r0
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	2300      	movs	r3, #0
 8009552:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2100      	movs	r1, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f002 fa87 	bl	800ba6e <SDMMC_GetResponse>
 8009560:	4603      	mov	r3, r0
 8009562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800956a:	d102      	bne.n	8009572 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800956c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009570:	e02f      	b.n	80095d2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009572:	f107 030c 	add.w	r3, r7, #12
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f879 	bl	8009670 <SD_FindSCR>
 800957e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	e023      	b.n	80095d2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d01c      	beq.n	80095ce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959c:	041b      	lsls	r3, r3, #16
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f002 fbcf 	bl	800bd44 <SDMMC_CmdAppCommand>
 80095a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	e00f      	b.n	80095d2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2102      	movs	r1, #2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f002 fc09 	bl	800bdd0 <SDMMC_CmdBusWidth>
 80095be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	e003      	b.n	80095d2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e001      	b.n	80095d2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	2300      	movs	r3, #0
 80095e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2100      	movs	r1, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f002 fa3c 	bl	800ba6e <SDMMC_GetResponse>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009600:	d102      	bne.n	8009608 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009606:	e02f      	b.n	8009668 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009608:	f107 030c 	add.w	r3, r7, #12
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f82e 	bl	8009670 <SD_FindSCR>
 8009614:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	e023      	b.n	8009668 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d01c      	beq.n	8009664 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009632:	041b      	lsls	r3, r3, #16
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f002 fb84 	bl	800bd44 <SDMMC_CmdAppCommand>
 800963c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	e00f      	b.n	8009668 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f002 fbbe 	bl	800bdd0 <SDMMC_CmdBusWidth>
 8009654:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	e003      	b.n	8009668 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009660:	2300      	movs	r3, #0
 8009662:	e001      	b.n	8009668 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009664:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009668:	4618      	mov	r0, r3
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b08f      	sub	sp, #60	; 0x3c
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800967a:	f7fb fd9f 	bl	80051bc <HAL_GetTick>
 800967e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009684:	2300      	movs	r3, #0
 8009686:	60bb      	str	r3, [r7, #8]
 8009688:	2300      	movs	r3, #0
 800968a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2108      	movs	r1, #8
 8009696:	4618      	mov	r0, r3
 8009698:	f002 fa28 	bl	800baec <SDMMC_CmdBlockLength>
 800969c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	e0a9      	b.n	80097fc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b0:	041b      	lsls	r3, r3, #16
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f002 fb45 	bl	800bd44 <SDMMC_CmdAppCommand>
 80096ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	e09a      	b.n	80097fc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096c6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80096cc:	2308      	movs	r3, #8
 80096ce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80096d0:	2330      	movs	r3, #48	; 0x30
 80096d2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096d4:	2302      	movs	r3, #2
 80096d6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096d8:	2300      	movs	r3, #0
 80096da:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80096dc:	2301      	movs	r3, #1
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f107 0210 	add.w	r2, r7, #16
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f002 f9d2 	bl	800ba94 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f002 fb8d 	bl	800be14 <SDMMC_CmdSendSCR>
 80096fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d022      	beq.n	8009748 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	e07a      	b.n	80097fc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00e      	beq.n	8009732 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6819      	ldr	r1, [r3, #0]
 8009718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	f107 0208 	add.w	r2, r7, #8
 8009720:	18d4      	adds	r4, r2, r3
 8009722:	4608      	mov	r0, r1
 8009724:	f002 f930 	bl	800b988 <SDMMC_ReadFIFO>
 8009728:	4603      	mov	r3, r0
 800972a:	6023      	str	r3, [r4, #0]
      index++;
 800972c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972e:	3301      	adds	r3, #1
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009732:	f7fb fd43 	bl	80051bc <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009740:	d102      	bne.n	8009748 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009742:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009746:	e059      	b.n	80097fc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800974e:	f240 432a 	movw	r3, #1066	; 0x42a
 8009752:	4013      	ands	r3, r2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0d6      	beq.n	8009706 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975e:	f003 0308 	and.w	r3, r3, #8
 8009762:	2b00      	cmp	r3, #0
 8009764:	d005      	beq.n	8009772 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2208      	movs	r2, #8
 800976c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800976e:	2308      	movs	r3, #8
 8009770:	e044      	b.n	80097fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2202      	movs	r2, #2
 8009786:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009788:	2302      	movs	r3, #2
 800978a:	e037      	b.n	80097fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d005      	beq.n	80097a6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2220      	movs	r2, #32
 80097a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80097a2:	2320      	movs	r3, #32
 80097a4:	e02a      	b.n	80097fc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	061a      	lsls	r2, r3, #24
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	021b      	lsls	r3, r3, #8
 80097b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	0a1b      	lsrs	r3, r3, #8
 80097c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	0e1b      	lsrs	r3, r3, #24
 80097cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	601a      	str	r2, [r3, #0]
    scr++;
 80097d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d4:	3304      	adds	r3, #4
 80097d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	061a      	lsls	r2, r3, #24
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	021b      	lsls	r3, r3, #8
 80097e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	0e1b      	lsrs	r3, r3, #24
 80097f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	373c      	adds	r7, #60	; 0x3c
 8009800:	46bd      	mov	sp, r7
 8009802:	bd90      	pop	{r4, r7, pc}

08009804 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009810:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d03f      	beq.n	800989e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	e033      	b.n	800988c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f002 f8ad 	bl	800b988 <SDMMC_ReadFIFO>
 800982e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	b2da      	uxtb	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3301      	adds	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	3b01      	subs	r3, #1
 8009842:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	0a1b      	lsrs	r3, r3, #8
 8009848:	b2da      	uxtb	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3301      	adds	r3, #1
 8009852:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	3b01      	subs	r3, #1
 8009858:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	0c1b      	lsrs	r3, r3, #16
 800985e:	b2da      	uxtb	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3301      	adds	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3b01      	subs	r3, #1
 800986e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	0e1b      	lsrs	r3, r3, #24
 8009874:	b2da      	uxtb	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	701a      	strb	r2, [r3, #0]
      tmp++;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3301      	adds	r3, #1
 800987e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	3b01      	subs	r3, #1
 8009884:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	3301      	adds	r3, #1
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b07      	cmp	r3, #7
 8009890:	d9c8      	bls.n	8009824 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800989e:	bf00      	nop
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b086      	sub	sp, #24
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d043      	beq.n	8009948 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80098c0:	2300      	movs	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	e037      	b.n	8009936 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	021a      	lsls	r2, r3, #8
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	041a      	lsls	r2, r3, #16
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	3b01      	subs	r3, #1
 8009906:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	061a      	lsls	r2, r3, #24
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4313      	orrs	r3, r2
 8009912:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3301      	adds	r3, #1
 8009918:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	3b01      	subs	r3, #1
 800991e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f107 0208 	add.w	r2, r7, #8
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f002 f839 	bl	800b9a2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	3301      	adds	r3, #1
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b07      	cmp	r3, #7
 800993a:	d9c4      	bls.n	80098c6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009948:	bf00      	nop
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e084      	b.n	8009a6c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d106      	bne.n	8009982 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7f8 ffb1 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009998:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099a2:	d902      	bls.n	80099aa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	e002      	b.n	80099b0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80099aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80099b8:	d007      	beq.n	80099ca <HAL_SPI_Init+0x7a>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099c2:	d002      	beq.n	80099ca <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10b      	bne.n	80099ea <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099da:	d903      	bls.n	80099e4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	631a      	str	r2, [r3, #48]	; 0x30
 80099e2:	e002      	b.n	80099ea <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	ea42 0103 	orr.w	r1, r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	0c1b      	lsrs	r3, r3, #16
 8009a2a:	f003 0204 	and.w	r2, r3, #4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	431a      	orrs	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	ea42 0103 	orr.w	r1, r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	69da      	ldr	r2, [r3, #28]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d110      	bne.n	8009ab0 <HAL_SPI_Receive_IT+0x3c>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a96:	d10b      	bne.n	8009ab0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8009aa0:	88fb      	ldrh	r3, [r7, #6]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f88c 	bl	8009bc4 <HAL_SPI_TransmitReceive_IT>
 8009aac:	4603      	mov	r3, r0
 8009aae:	e081      	b.n	8009bb4 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d101      	bne.n	8009abe <HAL_SPI_Receive_IT+0x4a>
 8009aba:	2302      	movs	r3, #2
 8009abc:	e07a      	b.n	8009bb4 <HAL_SPI_Receive_IT+0x140>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d002      	beq.n	8009ad8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ad6:	e068      	b.n	8009baa <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <HAL_SPI_Receive_IT+0x70>
 8009ade:	88fb      	ldrh	r3, [r7, #6]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009ae8:	e05f      	b.n	8009baa <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2204      	movs	r2, #4
 8009aee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	88fa      	ldrh	r2, [r7, #6]
 8009b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	88fa      	ldrh	r2, [r7, #6]
 8009b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b2e:	d90b      	bls.n	8009b48 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b3e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a1e      	ldr	r2, [pc, #120]	; (8009bbc <HAL_SPI_Receive_IT+0x148>)
 8009b44:	64da      	str	r2, [r3, #76]	; 0x4c
 8009b46:	e00a      	b.n	8009b5e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b56:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4a19      	ldr	r2, [pc, #100]	; (8009bc0 <HAL_SPI_Receive_IT+0x14c>)
 8009b5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b66:	d107      	bne.n	8009b78 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b76:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009b86:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b92:	2b40      	cmp	r3, #64	; 0x40
 8009b94:	d008      	beq.n	8009ba8 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e000      	b.n	8009baa <HAL_SPI_Receive_IT+0x136>
  }

error :
 8009ba8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	0800a1dd 	.word	0x0800a1dd
 8009bc0:	0800a18d 	.word	0x0800a18d

08009bc4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d101      	bne.n	8009be4 <HAL_SPI_TransmitReceive_IT+0x20>
 8009be0:	2302      	movs	r3, #2
 8009be2:	e091      	b.n	8009d08 <HAL_SPI_TransmitReceive_IT+0x144>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009bf2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009bfa:	7dbb      	ldrb	r3, [r7, #22]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d00d      	beq.n	8009c1c <HAL_SPI_TransmitReceive_IT+0x58>
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c06:	d106      	bne.n	8009c16 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <HAL_SPI_TransmitReceive_IT+0x52>
 8009c10:	7dbb      	ldrb	r3, [r7, #22]
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d002      	beq.n	8009c1c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009c16:	2302      	movs	r3, #2
 8009c18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c1a:	e070      	b.n	8009cfe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d005      	beq.n	8009c2e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <HAL_SPI_TransmitReceive_IT+0x6a>
 8009c28:	887b      	ldrh	r3, [r7, #2]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c32:	e064      	b.n	8009cfe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d003      	beq.n	8009c48 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2205      	movs	r2, #5
 8009c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	887a      	ldrh	r2, [r7, #2]
 8009c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	887a      	ldrh	r2, [r7, #2]
 8009c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	887a      	ldrh	r2, [r7, #2]
 8009c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	887a      	ldrh	r2, [r7, #2]
 8009c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c7e:	d906      	bls.n	8009c8e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4a24      	ldr	r2, [pc, #144]	; (8009d14 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009c84:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4a23      	ldr	r2, [pc, #140]	; (8009d18 <HAL_SPI_TransmitReceive_IT+0x154>)
 8009c8a:	651a      	str	r2, [r3, #80]	; 0x50
 8009c8c:	e005      	b.n	8009c9a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4a22      	ldr	r2, [pc, #136]	; (8009d1c <HAL_SPI_TransmitReceive_IT+0x158>)
 8009c92:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4a22      	ldr	r2, [pc, #136]	; (8009d20 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009c98:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ca2:	d802      	bhi.n	8009caa <HAL_SPI_TransmitReceive_IT+0xe6>
 8009ca4:	887b      	ldrh	r3, [r7, #2]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d908      	bls.n	8009cbc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cb8:	605a      	str	r2, [r3, #4]
 8009cba:	e007      	b.n	8009ccc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009cca:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009cda:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce6:	2b40      	cmp	r3, #64	; 0x40
 8009ce8:	d008      	beq.n	8009cfc <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	e000      	b.n	8009cfe <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009cfc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	0800a0c7 	.word	0x0800a0c7
 8009d18:	0800a12d 	.word	0x0800a12d
 8009d1c:	08009f77 	.word	0x08009f77
 8009d20:	0800a035 	.word	0x0800a035

08009d24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b088      	sub	sp, #32
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	099b      	lsrs	r3, r3, #6
 8009d40:	f003 0301 	and.w	r3, r3, #1
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10f      	bne.n	8009d68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	099b      	lsrs	r3, r3, #6
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
    return;
 8009d66:	e0d8      	b.n	8009f1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <HAL_SPI_IRQHandler+0x66>
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	09db      	lsrs	r3, r3, #7
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d004      	beq.n	8009d8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	4798      	blx	r3
    return;
 8009d88:	e0c7      	b.n	8009f1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	095b      	lsrs	r3, r3, #5
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10c      	bne.n	8009db0 <HAL_SPI_IRQHandler+0x8c>
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	099b      	lsrs	r3, r3, #6
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d106      	bne.n	8009db0 <HAL_SPI_IRQHandler+0x8c>
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	0a1b      	lsrs	r3, r3, #8
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 80b5 	beq.w	8009f1a <HAL_SPI_IRQHandler+0x1f6>
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80ae 	beq.w	8009f1a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	099b      	lsrs	r3, r3, #6
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d023      	beq.n	8009e12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d011      	beq.n	8009dfa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dda:	f043 0204 	orr.w	r2, r3, #4
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	617b      	str	r3, [r7, #20]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	e00b      	b.n	8009e12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	613b      	str	r3, [r7, #16]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	613b      	str	r3, [r7, #16]
 8009e0e:	693b      	ldr	r3, [r7, #16]
        return;
 8009e10:	e083      	b.n	8009f1a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	095b      	lsrs	r3, r3, #5
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d014      	beq.n	8009e48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e22:	f043 0201 	orr.w	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	0a1b      	lsrs	r3, r3, #8
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00c      	beq.n	8009e6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e58:	f043 0208 	orr.w	r2, r3, #8
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e60:	2300      	movs	r3, #0
 8009e62:	60bb      	str	r3, [r7, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	60bb      	str	r3, [r7, #8]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d050      	beq.n	8009f18 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <HAL_SPI_IRQHandler+0x17e>
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d034      	beq.n	8009f0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f022 0203 	bic.w	r2, r2, #3
 8009eb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d011      	beq.n	8009ede <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebe:	4a18      	ldr	r2, [pc, #96]	; (8009f20 <HAL_SPI_IRQHandler+0x1fc>)
 8009ec0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fb fb96 	bl	80055f8 <HAL_DMA_Abort_IT>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d005      	beq.n	8009ede <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d016      	beq.n	8009f14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eea:	4a0d      	ldr	r2, [pc, #52]	; (8009f20 <HAL_SPI_IRQHandler+0x1fc>)
 8009eec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fb fb80 	bl	80055f8 <HAL_DMA_Abort_IT>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00a      	beq.n	8009f14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009f0a:	e003      	b.n	8009f14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f813 	bl	8009f38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009f12:	e000      	b.n	8009f16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009f14:	bf00      	nop
    return;
 8009f16:	bf00      	nop
 8009f18:	bf00      	nop
  }
}
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	08009f4d 	.word	0x08009f4d

08009f24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7ff ffe5 	bl	8009f38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d923      	bls.n	8009fd2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68da      	ldr	r2, [r3, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	b292      	uxth	r2, r2
 8009f96:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9c:	1c9a      	adds	r2, r3, #2
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	3b02      	subs	r3, #2
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d11f      	bne.n	800a000 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009fce:	605a      	str	r2, [r3, #4]
 8009fd0:	e016      	b.n	800a000 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f103 020c 	add.w	r2, r3, #12
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a006:	b29b      	uxth	r3, r3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10f      	bne.n	800a02c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a01a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a020:	b29b      	uxth	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d102      	bne.n	800a02c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa73 	bl	800a512 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b01      	cmp	r3, #1
 800a044:	d912      	bls.n	800a06c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04a:	881a      	ldrh	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a056:	1c9a      	adds	r2, r3, #2
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a060:	b29b      	uxth	r3, r3
 800a062:	3b02      	subs	r3, #2
 800a064:	b29a      	uxth	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a06a:	e012      	b.n	800a092 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	330c      	adds	r3, #12
 800a076:	7812      	ldrb	r2, [r2, #0]
 800a078:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a096:	b29b      	uxth	r3, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d110      	bne.n	800a0be <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0aa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fa2a 	bl	800a512 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68da      	ldr	r2, [r3, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d8:	b292      	uxth	r2, r2
 800a0da:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e0:	1c9a      	adds	r2, r3, #2
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10f      	bne.n	800a124 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a112:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a118:	b29b      	uxth	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d102      	bne.n	800a124 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f9f7 	bl	800a512 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	881a      	ldrh	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	1c9a      	adds	r2, r3, #2
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d110      	bne.n	800a184 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a170:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a178:	b29b      	uxth	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f9c7 	bl	800a512 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f103 020c 	add.w	r2, r3, #12
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a0:	7812      	ldrb	r2, [r2, #0]
 800a1a2:	b2d2      	uxtb	r2, r2
 800a1a4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1aa:	1c5a      	adds	r2, r3, #1
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f9e1 	bl	800a596 <SPI_CloseRx_ISR>
  }
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ee:	b292      	uxth	r2, r2
 800a1f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	1c9a      	adds	r2, r3, #2
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a214:	b29b      	uxth	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d102      	bne.n	800a220 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f9bb 	bl	800a596 <SPI_CloseRx_ISR>
  }
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	4613      	mov	r3, r2
 800a236:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a238:	e04c      	b.n	800a2d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a240:	d048      	beq.n	800a2d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a242:	f7fa ffbb 	bl	80051bc <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d902      	bls.n	800a258 <SPI_WaitFlagStateUntilTimeout+0x30>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d13d      	bne.n	800a2d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a266:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a270:	d111      	bne.n	800a296 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a27a:	d004      	beq.n	800a286 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a284:	d107      	bne.n	800a296 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a294:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a29e:	d10f      	bne.n	800a2c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e00f      	b.n	800a2f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	bf0c      	ite	eq
 800a2e4:	2301      	moveq	r3, #1
 800a2e6:	2300      	movne	r3, #0
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	79fb      	ldrb	r3, [r7, #7]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d1a3      	bne.n	800a23a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800a30a:	e057      	b.n	800a3bc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a312:	d106      	bne.n	800a322 <SPI_WaitFifoStateUntilTimeout+0x26>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d103      	bne.n	800a322 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	330c      	adds	r3, #12
 800a320:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a328:	d048      	beq.n	800a3bc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a32a:	f7fa ff47 	bl	80051bc <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d902      	bls.n	800a340 <SPI_WaitFifoStateUntilTimeout+0x44>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d13d      	bne.n	800a3bc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a34e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a358:	d111      	bne.n	800a37e <SPI_WaitFifoStateUntilTimeout+0x82>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a362:	d004      	beq.n	800a36e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a36c:	d107      	bne.n	800a37e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a37c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a386:	d10f      	bne.n	800a3a8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e008      	b.n	800a3ce <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d19f      	bne.n	800a30c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b086      	sub	sp, #24
 800a3da:	af02      	add	r7, sp, #8
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3ea:	d111      	bne.n	800a410 <SPI_EndRxTransaction+0x3a>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f4:	d004      	beq.n	800a400 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3fe:	d107      	bne.n	800a410 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a40e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	2180      	movs	r1, #128	; 0x80
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff ff04 	bl	800a228 <SPI_WaitFlagStateUntilTimeout>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d007      	beq.n	800a436 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a42a:	f043 0220 	orr.w	r2, r3, #32
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e023      	b.n	800a47e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a43e:	d11d      	bne.n	800a47c <SPI_EndRxTransaction+0xa6>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a448:	d004      	beq.n	800a454 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a452:	d113      	bne.n	800a47c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f7ff ff4b 	bl	800a2fc <SPI_WaitFifoStateUntilTimeout>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d007      	beq.n	800a47c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a470:	f043 0220 	orr.w	r2, r3, #32
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e000      	b.n	800a47e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b086      	sub	sp, #24
 800a48a:	af02      	add	r7, sp, #8
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2200      	movs	r2, #0
 800a49a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff ff2c 	bl	800a2fc <SPI_WaitFifoStateUntilTimeout>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ae:	f043 0220 	orr.w	r2, r3, #32
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e027      	b.n	800a50a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2180      	movs	r1, #128	; 0x80
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff feaf 	bl	800a228 <SPI_WaitFlagStateUntilTimeout>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d007      	beq.n	800a4e0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e014      	b.n	800a50a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff ff05 	bl	800a2fc <SPI_WaitFifoStateUntilTimeout>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d007      	beq.n	800a508 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4fc:	f043 0220 	orr.w	r2, r3, #32
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a504:	2303      	movs	r3, #3
 800a506:	e000      	b.n	800a50a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a51a:	f7fa fe4f 	bl	80051bc <HAL_GetTick>
 800a51e:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0220 	bic.w	r2, r2, #32
 800a52e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	2164      	movs	r1, #100	; 0x64
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ffa6 	bl	800a486 <SPI_EndRxTxTransaction>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d005      	beq.n	800a54c <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a544:	f043 0220 	orr.w	r2, r3, #32
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a550:	2b00      	cmp	r3, #0
 800a552:	d115      	bne.n	800a580 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d107      	bne.n	800a570 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7f9 fdeb 	bl	8004144 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a56e:	e00e      	b.n	800a58e <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fcd3 	bl	8009f24 <HAL_SPI_TxRxCpltCallback>
}
 800a57e:	e006      	b.n	800a58e <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff fcd5 	bl	8009f38 <HAL_SPI_ErrorCallback>
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a5ac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a5ae:	f7fa fe05 	bl	80051bc <HAL_GetTick>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	2164      	movs	r1, #100	; 0x64
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff ff0c 	bl	800a3d6 <SPI_EndRxTransaction>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d005      	beq.n	800a5d0 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5c8:	f043 0220 	orr.w	r2, r3, #32
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7f9 fdaf 	bl	8004144 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a5e6:	e002      	b.n	800a5ee <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff fca5 	bl	8009f38 <HAL_SPI_ErrorCallback>
}
 800a5ee:	bf00      	nop
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e01d      	b.n	800a644 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	d106      	bne.n	800a622 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f815 	bl	800a64c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2202      	movs	r2, #2
 800a626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3304      	adds	r3, #4
 800a632:	4619      	mov	r1, r3
 800a634:	4610      	mov	r0, r2
 800a636:	f000 f985 	bl	800a944 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	4b0c      	ldr	r3, [pc, #48]	; (800a6b0 <HAL_TIM_Base_Start_IT+0x50>)
 800a680:	4013      	ands	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b06      	cmp	r3, #6
 800a688:	d00b      	beq.n	800a6a2 <HAL_TIM_Base_Start_IT+0x42>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a690:	d007      	beq.n	800a6a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0201 	orr.w	r2, r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	00010007 	.word	0x00010007

0800a6b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d122      	bne.n	800a710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f003 0302 	and.w	r3, r3, #2
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d11b      	bne.n	800a710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f06f 0202 	mvn.w	r2, #2
 800a6e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	699b      	ldr	r3, [r3, #24]
 800a6ee:	f003 0303 	and.w	r3, r3, #3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d003      	beq.n	800a6fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f905 	bl	800a906 <HAL_TIM_IC_CaptureCallback>
 800a6fc:	e005      	b.n	800a70a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f8f7 	bl	800a8f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f908 	bl	800a91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	f003 0304 	and.w	r3, r3, #4
 800a71a:	2b04      	cmp	r3, #4
 800a71c:	d122      	bne.n	800a764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d11b      	bne.n	800a764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f06f 0204 	mvn.w	r2, #4
 800a734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2202      	movs	r2, #2
 800a73a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f8db 	bl	800a906 <HAL_TIM_IC_CaptureCallback>
 800a750:	e005      	b.n	800a75e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f8cd 	bl	800a8f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f8de 	bl	800a91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	f003 0308 	and.w	r3, r3, #8
 800a76e:	2b08      	cmp	r3, #8
 800a770:	d122      	bne.n	800a7b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f003 0308 	and.w	r3, r3, #8
 800a77c:	2b08      	cmp	r3, #8
 800a77e:	d11b      	bne.n	800a7b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f06f 0208 	mvn.w	r2, #8
 800a788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2204      	movs	r2, #4
 800a78e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f8b1 	bl	800a906 <HAL_TIM_IC_CaptureCallback>
 800a7a4:	e005      	b.n	800a7b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f8a3 	bl	800a8f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f8b4 	bl	800a91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f003 0310 	and.w	r3, r3, #16
 800a7c2:	2b10      	cmp	r3, #16
 800a7c4:	d122      	bne.n	800a80c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f003 0310 	and.w	r3, r3, #16
 800a7d0:	2b10      	cmp	r3, #16
 800a7d2:	d11b      	bne.n	800a80c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0210 	mvn.w	r2, #16
 800a7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f887 	bl	800a906 <HAL_TIM_IC_CaptureCallback>
 800a7f8:	e005      	b.n	800a806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f879 	bl	800a8f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f88a 	bl	800a91a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b01      	cmp	r3, #1
 800a818:	d10e      	bne.n	800a838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	2b01      	cmp	r3, #1
 800a826:	d107      	bne.n	800a838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f06f 0201 	mvn.w	r2, #1
 800a830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7f7 f876 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a842:	2b80      	cmp	r3, #128	; 0x80
 800a844:	d10e      	bne.n	800a864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a850:	2b80      	cmp	r3, #128	; 0x80
 800a852:	d107      	bne.n	800a864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a85c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f91a 	bl	800aa98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a872:	d10e      	bne.n	800a892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87e:	2b80      	cmp	r3, #128	; 0x80
 800a880:	d107      	bne.n	800a892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f90d 	bl	800aaac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	d10e      	bne.n	800a8be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8aa:	2b40      	cmp	r3, #64	; 0x40
 800a8ac:	d107      	bne.n	800a8be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f838 	bl	800a92e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	f003 0320 	and.w	r3, r3, #32
 800a8c8:	2b20      	cmp	r3, #32
 800a8ca:	d10e      	bne.n	800a8ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f003 0320 	and.w	r3, r3, #32
 800a8d6:	2b20      	cmp	r3, #32
 800a8d8:	d107      	bne.n	800a8ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f06f 0220 	mvn.w	r2, #32
 800a8e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f8cd 	bl	800aa84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a90e:	bf00      	nop
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
	...

0800a944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a40      	ldr	r2, [pc, #256]	; (800aa58 <TIM_Base_SetConfig+0x114>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d013      	beq.n	800a984 <TIM_Base_SetConfig+0x40>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a962:	d00f      	beq.n	800a984 <TIM_Base_SetConfig+0x40>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a3d      	ldr	r2, [pc, #244]	; (800aa5c <TIM_Base_SetConfig+0x118>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00b      	beq.n	800a984 <TIM_Base_SetConfig+0x40>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a3c      	ldr	r2, [pc, #240]	; (800aa60 <TIM_Base_SetConfig+0x11c>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d007      	beq.n	800a984 <TIM_Base_SetConfig+0x40>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a3b      	ldr	r2, [pc, #236]	; (800aa64 <TIM_Base_SetConfig+0x120>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d003      	beq.n	800a984 <TIM_Base_SetConfig+0x40>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a3a      	ldr	r2, [pc, #232]	; (800aa68 <TIM_Base_SetConfig+0x124>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d108      	bne.n	800a996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a98a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a2f      	ldr	r2, [pc, #188]	; (800aa58 <TIM_Base_SetConfig+0x114>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d02b      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a4:	d027      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a2c      	ldr	r2, [pc, #176]	; (800aa5c <TIM_Base_SetConfig+0x118>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d023      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a2b      	ldr	r2, [pc, #172]	; (800aa60 <TIM_Base_SetConfig+0x11c>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d01f      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a2a      	ldr	r2, [pc, #168]	; (800aa64 <TIM_Base_SetConfig+0x120>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d01b      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a29      	ldr	r2, [pc, #164]	; (800aa68 <TIM_Base_SetConfig+0x124>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d017      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a28      	ldr	r2, [pc, #160]	; (800aa6c <TIM_Base_SetConfig+0x128>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d013      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a27      	ldr	r2, [pc, #156]	; (800aa70 <TIM_Base_SetConfig+0x12c>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00f      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a26      	ldr	r2, [pc, #152]	; (800aa74 <TIM_Base_SetConfig+0x130>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00b      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a25      	ldr	r2, [pc, #148]	; (800aa78 <TIM_Base_SetConfig+0x134>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d007      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a24      	ldr	r2, [pc, #144]	; (800aa7c <TIM_Base_SetConfig+0x138>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d003      	beq.n	800a9f6 <TIM_Base_SetConfig+0xb2>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a23      	ldr	r2, [pc, #140]	; (800aa80 <TIM_Base_SetConfig+0x13c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d108      	bne.n	800aa08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a0a      	ldr	r2, [pc, #40]	; (800aa58 <TIM_Base_SetConfig+0x114>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d003      	beq.n	800aa3c <TIM_Base_SetConfig+0xf8>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a0c      	ldr	r2, [pc, #48]	; (800aa68 <TIM_Base_SetConfig+0x124>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d103      	bne.n	800aa44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	691a      	ldr	r2, [r3, #16]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	615a      	str	r2, [r3, #20]
}
 800aa4a:	bf00      	nop
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	40010000 	.word	0x40010000
 800aa5c:	40000400 	.word	0x40000400
 800aa60:	40000800 	.word	0x40000800
 800aa64:	40000c00 	.word	0x40000c00
 800aa68:	40010400 	.word	0x40010400
 800aa6c:	40014000 	.word	0x40014000
 800aa70:	40014400 	.word	0x40014400
 800aa74:	40014800 	.word	0x40014800
 800aa78:	40001800 	.word	0x40001800
 800aa7c:	40001c00 	.word	0x40001c00
 800aa80:	40002000 	.word	0x40002000

0800aa84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e040      	b.n	800ab54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7f7 ffea 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2224      	movs	r2, #36	; 0x24
 800aaec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0201 	bic.w	r2, r2, #1
 800aafc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fad0 	bl	800b0a4 <UART_SetConfig>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d101      	bne.n	800ab0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e022      	b.n	800ab54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d002      	beq.n	800ab1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fd6e 	bl	800b5f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689a      	ldr	r2, [r3, #8]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0201 	orr.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fdf5 	bl	800b73c <UART_CheckIdleState>
 800ab52:	4603      	mov	r3, r0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08a      	sub	sp, #40	; 0x28
 800ab60:	af02      	add	r7, sp, #8
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	603b      	str	r3, [r7, #0]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab70:	2b20      	cmp	r3, #32
 800ab72:	d17f      	bne.n	800ac74 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <HAL_UART_Transmit+0x24>
 800ab7a:	88fb      	ldrh	r3, [r7, #6]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e078      	b.n	800ac76 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d101      	bne.n	800ab92 <HAL_UART_Transmit+0x36>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	e071      	b.n	800ac76 <HAL_UART_Transmit+0x11a>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2221      	movs	r2, #33	; 0x21
 800aba4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800aba6:	f7fa fb09 	bl	80051bc <HAL_GetTick>
 800abaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	88fa      	ldrh	r2, [r7, #6]
 800abb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	88fa      	ldrh	r2, [r7, #6]
 800abb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc4:	d108      	bne.n	800abd8 <HAL_UART_Transmit+0x7c>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d104      	bne.n	800abd8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	61bb      	str	r3, [r7, #24]
 800abd6:	e003      	b.n	800abe0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abdc:	2300      	movs	r3, #0
 800abde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800abe8:	e02c      	b.n	800ac44 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2200      	movs	r2, #0
 800abf2:	2180      	movs	r1, #128	; 0x80
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 fdd0 	bl	800b79a <UART_WaitOnFlagUntilTimeout>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e038      	b.n	800ac76 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10b      	bne.n	800ac22 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	61bb      	str	r3, [r7, #24]
 800ac20:	e007      	b.n	800ac32 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1cc      	bne.n	800abea <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2200      	movs	r2, #0
 800ac58:	2140      	movs	r1, #64	; 0x40
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 fd9d 	bl	800b79a <UART_WaitOnFlagUntilTimeout>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e005      	b.n	800ac76 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	e000      	b.n	800ac76 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800ac74:	2302      	movs	r3, #2
  }
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b08a      	sub	sp, #40	; 0x28
 800ac82:	af02      	add	r7, sp, #8
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	603b      	str	r3, [r7, #0]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	f040 80ba 	bne.w	800ae0c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <HAL_UART_Receive+0x26>
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e0b2      	b.n	800ae0e <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <HAL_UART_Receive+0x38>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e0ab      	b.n	800ae0e <HAL_UART_Receive+0x190>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2222      	movs	r2, #34	; 0x22
 800acc8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800acca:	f7fa fa77 	bl	80051bc <HAL_GetTick>
 800acce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	88fa      	ldrh	r2, [r7, #6]
 800acd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	88fa      	ldrh	r2, [r7, #6]
 800acdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace8:	d10e      	bne.n	800ad08 <HAL_UART_Receive+0x8a>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d105      	bne.n	800acfe <HAL_UART_Receive+0x80>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800acf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800acfc:	e02d      	b.n	800ad5a <HAL_UART_Receive+0xdc>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	22ff      	movs	r2, #255	; 0xff
 800ad02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ad06:	e028      	b.n	800ad5a <HAL_UART_Receive+0xdc>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10d      	bne.n	800ad2c <HAL_UART_Receive+0xae>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <HAL_UART_Receive+0xa4>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	22ff      	movs	r2, #255	; 0xff
 800ad1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ad20:	e01b      	b.n	800ad5a <HAL_UART_Receive+0xdc>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	227f      	movs	r2, #127	; 0x7f
 800ad26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ad2a:	e016      	b.n	800ad5a <HAL_UART_Receive+0xdc>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad34:	d10d      	bne.n	800ad52 <HAL_UART_Receive+0xd4>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d104      	bne.n	800ad48 <HAL_UART_Receive+0xca>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	227f      	movs	r2, #127	; 0x7f
 800ad42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ad46:	e008      	b.n	800ad5a <HAL_UART_Receive+0xdc>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	223f      	movs	r2, #63	; 0x3f
 800ad4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ad50:	e003      	b.n	800ad5a <HAL_UART_Receive+0xdc>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad60:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad6a:	d108      	bne.n	800ad7e <HAL_UART_Receive+0x100>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d104      	bne.n	800ad7e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	61bb      	str	r3, [r7, #24]
 800ad7c:	e003      	b.n	800ad86 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ad8e:	e032      	b.n	800adf6 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2200      	movs	r2, #0
 800ad98:	2120      	movs	r1, #32
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 fcfd 	bl	800b79a <UART_WaitOnFlagUntilTimeout>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e031      	b.n	800ae0e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10c      	bne.n	800adca <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	8a7b      	ldrh	r3, [r7, #18]
 800adba:	4013      	ands	r3, r2
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	3302      	adds	r3, #2
 800adc6:	61bb      	str	r3, [r7, #24]
 800adc8:	e00c      	b.n	800ade4 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	b2da      	uxtb	r2, r3
 800add2:	8a7b      	ldrh	r3, [r7, #18]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	4013      	ands	r3, r2
 800add8:	b2da      	uxtb	r2, r3
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	3301      	adds	r3, #1
 800ade2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adea:	b29b      	uxth	r3, r3
 800adec:	3b01      	subs	r3, #1
 800adee:	b29a      	uxth	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1c6      	bne.n	800ad90 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2220      	movs	r2, #32
 800ae06:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	e000      	b.n	800ae0e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800ae0c:	2302      	movs	r3, #2
  }
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b088      	sub	sp, #32
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae3e:	4013      	ands	r3, r2
 800ae40:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d113      	bne.n	800ae70 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00e      	beq.n	800ae70 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	f003 0320 	and.w	r3, r3, #32
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d009      	beq.n	800ae70 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8100 	beq.w	800b066 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3
      }
      return;
 800ae6e:	e0fa      	b.n	800b066 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 80d5 	beq.w	800b022 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d105      	bne.n	800ae8e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 80ca 	beq.w	800b022 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00e      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x9e>
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d009      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2201      	movs	r2, #1
 800aea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeae:	f043 0201 	orr.w	r2, r3, #1
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00e      	beq.n	800aede <HAL_UART_IRQHandler+0xc6>
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d009      	beq.n	800aede <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2202      	movs	r2, #2
 800aed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aed6:	f043 0204 	orr.w	r2, r3, #4
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00e      	beq.n	800af06 <HAL_UART_IRQHandler+0xee>
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d009      	beq.n	800af06 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2204      	movs	r2, #4
 800aef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aefe:	f043 0202 	orr.w	r2, r3, #2
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	f003 0308 	and.w	r3, r3, #8
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d013      	beq.n	800af38 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	f003 0320 	and.w	r3, r3, #32
 800af16:	2b00      	cmp	r3, #0
 800af18:	d104      	bne.n	800af24 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af20:	2b00      	cmp	r3, #0
 800af22:	d009      	beq.n	800af38 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2208      	movs	r2, #8
 800af2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af30:	f043 0208 	orr.w	r2, r3, #8
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00f      	beq.n	800af62 <HAL_UART_IRQHandler+0x14a>
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af5a:	f043 0220 	orr.w	r2, r3, #32
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af66:	2b00      	cmp	r3, #0
 800af68:	d07f      	beq.n	800b06a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	f003 0320 	and.w	r3, r3, #32
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00c      	beq.n	800af8e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d007      	beq.n	800af8e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af92:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9e:	2b40      	cmp	r3, #64	; 0x40
 800afa0:	d004      	beq.n	800afac <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d031      	beq.n	800b010 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fc6f 	bl	800b890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbc:	2b40      	cmp	r3, #64	; 0x40
 800afbe:	d123      	bne.n	800b008 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689a      	ldr	r2, [r3, #8]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afce:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d013      	beq.n	800b000 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afdc:	4a26      	ldr	r2, [pc, #152]	; (800b078 <HAL_UART_IRQHandler+0x260>)
 800afde:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fa fb07 	bl	80055f8 <HAL_DMA_Abort_IT>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d016      	beq.n	800b01e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800affa:	4610      	mov	r0, r2
 800affc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affe:	e00e      	b.n	800b01e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f845 	bl	800b090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b006:	e00a      	b.n	800b01e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f841 	bl	800b090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00e:	e006      	b.n	800b01e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f83d 	bl	800b090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b01c:	e025      	b.n	800b06a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b01e:	bf00      	nop
    return;
 800b020:	e023      	b.n	800b06a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00d      	beq.n	800b048 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b00      	cmp	r3, #0
 800b034:	d008      	beq.n	800b048 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d017      	beq.n	800b06e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	4798      	blx	r3
    }
    return;
 800b046:	e012      	b.n	800b06e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00e      	beq.n	800b070 <HAL_UART_IRQHandler+0x258>
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fc4d 	bl	800b8fc <UART_EndTransmit_IT>
    return;
 800b062:	bf00      	nop
 800b064:	e004      	b.n	800b070 <HAL_UART_IRQHandler+0x258>
      return;
 800b066:	bf00      	nop
 800b068:	e002      	b.n	800b070 <HAL_UART_IRQHandler+0x258>
    return;
 800b06a:	bf00      	nop
 800b06c:	e000      	b.n	800b070 <HAL_UART_IRQHandler+0x258>
    return;
 800b06e:	bf00      	nop
  }

}
 800b070:	3720      	adds	r7, #32
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	0800b8d1 	.word	0x0800b8d1

0800b07c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4bb1      	ldr	r3, [pc, #708]	; (800b398 <UART_SetConfig+0x2f4>)
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6812      	ldr	r2, [r2, #0]
 800b0da:	6939      	ldr	r1, [r7, #16]
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68da      	ldr	r2, [r3, #12]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	430a      	orrs	r2, r1
 800b118:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a9f      	ldr	r2, [pc, #636]	; (800b39c <UART_SetConfig+0x2f8>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d121      	bne.n	800b168 <UART_SetConfig+0xc4>
 800b124:	4b9e      	ldr	r3, [pc, #632]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12a:	f003 0303 	and.w	r3, r3, #3
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d816      	bhi.n	800b160 <UART_SetConfig+0xbc>
 800b132:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <UART_SetConfig+0x94>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b149 	.word	0x0800b149
 800b13c:	0800b155 	.word	0x0800b155
 800b140:	0800b14f 	.word	0x0800b14f
 800b144:	0800b15b 	.word	0x0800b15b
 800b148:	2301      	movs	r3, #1
 800b14a:	77fb      	strb	r3, [r7, #31]
 800b14c:	e151      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b14e:	2302      	movs	r3, #2
 800b150:	77fb      	strb	r3, [r7, #31]
 800b152:	e14e      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b154:	2304      	movs	r3, #4
 800b156:	77fb      	strb	r3, [r7, #31]
 800b158:	e14b      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b15a:	2308      	movs	r3, #8
 800b15c:	77fb      	strb	r3, [r7, #31]
 800b15e:	e148      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b160:	2310      	movs	r3, #16
 800b162:	77fb      	strb	r3, [r7, #31]
 800b164:	bf00      	nop
 800b166:	e144      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a8d      	ldr	r2, [pc, #564]	; (800b3a4 <UART_SetConfig+0x300>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d134      	bne.n	800b1dc <UART_SetConfig+0x138>
 800b172:	4b8b      	ldr	r3, [pc, #556]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b178:	f003 030c 	and.w	r3, r3, #12
 800b17c:	2b0c      	cmp	r3, #12
 800b17e:	d829      	bhi.n	800b1d4 <UART_SetConfig+0x130>
 800b180:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <UART_SetConfig+0xe4>)
 800b182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b186:	bf00      	nop
 800b188:	0800b1bd 	.word	0x0800b1bd
 800b18c:	0800b1d5 	.word	0x0800b1d5
 800b190:	0800b1d5 	.word	0x0800b1d5
 800b194:	0800b1d5 	.word	0x0800b1d5
 800b198:	0800b1c9 	.word	0x0800b1c9
 800b19c:	0800b1d5 	.word	0x0800b1d5
 800b1a0:	0800b1d5 	.word	0x0800b1d5
 800b1a4:	0800b1d5 	.word	0x0800b1d5
 800b1a8:	0800b1c3 	.word	0x0800b1c3
 800b1ac:	0800b1d5 	.word	0x0800b1d5
 800b1b0:	0800b1d5 	.word	0x0800b1d5
 800b1b4:	0800b1d5 	.word	0x0800b1d5
 800b1b8:	0800b1cf 	.word	0x0800b1cf
 800b1bc:	2300      	movs	r3, #0
 800b1be:	77fb      	strb	r3, [r7, #31]
 800b1c0:	e117      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	77fb      	strb	r3, [r7, #31]
 800b1c6:	e114      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b1c8:	2304      	movs	r3, #4
 800b1ca:	77fb      	strb	r3, [r7, #31]
 800b1cc:	e111      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b1ce:	2308      	movs	r3, #8
 800b1d0:	77fb      	strb	r3, [r7, #31]
 800b1d2:	e10e      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	77fb      	strb	r3, [r7, #31]
 800b1d8:	bf00      	nop
 800b1da:	e10a      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a71      	ldr	r2, [pc, #452]	; (800b3a8 <UART_SetConfig+0x304>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d120      	bne.n	800b228 <UART_SetConfig+0x184>
 800b1e6:	4b6e      	ldr	r3, [pc, #440]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b1f0:	2b10      	cmp	r3, #16
 800b1f2:	d00f      	beq.n	800b214 <UART_SetConfig+0x170>
 800b1f4:	2b10      	cmp	r3, #16
 800b1f6:	d802      	bhi.n	800b1fe <UART_SetConfig+0x15a>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <UART_SetConfig+0x164>
 800b1fc:	e010      	b.n	800b220 <UART_SetConfig+0x17c>
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d005      	beq.n	800b20e <UART_SetConfig+0x16a>
 800b202:	2b30      	cmp	r3, #48	; 0x30
 800b204:	d009      	beq.n	800b21a <UART_SetConfig+0x176>
 800b206:	e00b      	b.n	800b220 <UART_SetConfig+0x17c>
 800b208:	2300      	movs	r3, #0
 800b20a:	77fb      	strb	r3, [r7, #31]
 800b20c:	e0f1      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b20e:	2302      	movs	r3, #2
 800b210:	77fb      	strb	r3, [r7, #31]
 800b212:	e0ee      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b214:	2304      	movs	r3, #4
 800b216:	77fb      	strb	r3, [r7, #31]
 800b218:	e0eb      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b21a:	2308      	movs	r3, #8
 800b21c:	77fb      	strb	r3, [r7, #31]
 800b21e:	e0e8      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b220:	2310      	movs	r3, #16
 800b222:	77fb      	strb	r3, [r7, #31]
 800b224:	bf00      	nop
 800b226:	e0e4      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a5f      	ldr	r2, [pc, #380]	; (800b3ac <UART_SetConfig+0x308>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d120      	bne.n	800b274 <UART_SetConfig+0x1d0>
 800b232:	4b5b      	ldr	r3, [pc, #364]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b238:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b23c:	2b40      	cmp	r3, #64	; 0x40
 800b23e:	d00f      	beq.n	800b260 <UART_SetConfig+0x1bc>
 800b240:	2b40      	cmp	r3, #64	; 0x40
 800b242:	d802      	bhi.n	800b24a <UART_SetConfig+0x1a6>
 800b244:	2b00      	cmp	r3, #0
 800b246:	d005      	beq.n	800b254 <UART_SetConfig+0x1b0>
 800b248:	e010      	b.n	800b26c <UART_SetConfig+0x1c8>
 800b24a:	2b80      	cmp	r3, #128	; 0x80
 800b24c:	d005      	beq.n	800b25a <UART_SetConfig+0x1b6>
 800b24e:	2bc0      	cmp	r3, #192	; 0xc0
 800b250:	d009      	beq.n	800b266 <UART_SetConfig+0x1c2>
 800b252:	e00b      	b.n	800b26c <UART_SetConfig+0x1c8>
 800b254:	2300      	movs	r3, #0
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e0cb      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b25a:	2302      	movs	r3, #2
 800b25c:	77fb      	strb	r3, [r7, #31]
 800b25e:	e0c8      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b260:	2304      	movs	r3, #4
 800b262:	77fb      	strb	r3, [r7, #31]
 800b264:	e0c5      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b266:	2308      	movs	r3, #8
 800b268:	77fb      	strb	r3, [r7, #31]
 800b26a:	e0c2      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b26c:	2310      	movs	r3, #16
 800b26e:	77fb      	strb	r3, [r7, #31]
 800b270:	bf00      	nop
 800b272:	e0be      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a4d      	ldr	r2, [pc, #308]	; (800b3b0 <UART_SetConfig+0x30c>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d124      	bne.n	800b2c8 <UART_SetConfig+0x224>
 800b27e:	4b48      	ldr	r3, [pc, #288]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b28c:	d012      	beq.n	800b2b4 <UART_SetConfig+0x210>
 800b28e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b292:	d802      	bhi.n	800b29a <UART_SetConfig+0x1f6>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d007      	beq.n	800b2a8 <UART_SetConfig+0x204>
 800b298:	e012      	b.n	800b2c0 <UART_SetConfig+0x21c>
 800b29a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b29e:	d006      	beq.n	800b2ae <UART_SetConfig+0x20a>
 800b2a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2a4:	d009      	beq.n	800b2ba <UART_SetConfig+0x216>
 800b2a6:	e00b      	b.n	800b2c0 <UART_SetConfig+0x21c>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	77fb      	strb	r3, [r7, #31]
 800b2ac:	e0a1      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	77fb      	strb	r3, [r7, #31]
 800b2b2:	e09e      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b2b4:	2304      	movs	r3, #4
 800b2b6:	77fb      	strb	r3, [r7, #31]
 800b2b8:	e09b      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b2ba:	2308      	movs	r3, #8
 800b2bc:	77fb      	strb	r3, [r7, #31]
 800b2be:	e098      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b2c0:	2310      	movs	r3, #16
 800b2c2:	77fb      	strb	r3, [r7, #31]
 800b2c4:	bf00      	nop
 800b2c6:	e094      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a39      	ldr	r2, [pc, #228]	; (800b3b4 <UART_SetConfig+0x310>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d124      	bne.n	800b31c <UART_SetConfig+0x278>
 800b2d2:	4b33      	ldr	r3, [pc, #204]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e0:	d012      	beq.n	800b308 <UART_SetConfig+0x264>
 800b2e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e6:	d802      	bhi.n	800b2ee <UART_SetConfig+0x24a>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d007      	beq.n	800b2fc <UART_SetConfig+0x258>
 800b2ec:	e012      	b.n	800b314 <UART_SetConfig+0x270>
 800b2ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2f2:	d006      	beq.n	800b302 <UART_SetConfig+0x25e>
 800b2f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2f8:	d009      	beq.n	800b30e <UART_SetConfig+0x26a>
 800b2fa:	e00b      	b.n	800b314 <UART_SetConfig+0x270>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	77fb      	strb	r3, [r7, #31]
 800b300:	e077      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b302:	2302      	movs	r3, #2
 800b304:	77fb      	strb	r3, [r7, #31]
 800b306:	e074      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b308:	2304      	movs	r3, #4
 800b30a:	77fb      	strb	r3, [r7, #31]
 800b30c:	e071      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b30e:	2308      	movs	r3, #8
 800b310:	77fb      	strb	r3, [r7, #31]
 800b312:	e06e      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b314:	2310      	movs	r3, #16
 800b316:	77fb      	strb	r3, [r7, #31]
 800b318:	bf00      	nop
 800b31a:	e06a      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a25      	ldr	r2, [pc, #148]	; (800b3b8 <UART_SetConfig+0x314>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d124      	bne.n	800b370 <UART_SetConfig+0x2cc>
 800b326:	4b1e      	ldr	r3, [pc, #120]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b32c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b334:	d012      	beq.n	800b35c <UART_SetConfig+0x2b8>
 800b336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33a:	d802      	bhi.n	800b342 <UART_SetConfig+0x29e>
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d007      	beq.n	800b350 <UART_SetConfig+0x2ac>
 800b340:	e012      	b.n	800b368 <UART_SetConfig+0x2c4>
 800b342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b346:	d006      	beq.n	800b356 <UART_SetConfig+0x2b2>
 800b348:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b34c:	d009      	beq.n	800b362 <UART_SetConfig+0x2be>
 800b34e:	e00b      	b.n	800b368 <UART_SetConfig+0x2c4>
 800b350:	2300      	movs	r3, #0
 800b352:	77fb      	strb	r3, [r7, #31]
 800b354:	e04d      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b356:	2302      	movs	r3, #2
 800b358:	77fb      	strb	r3, [r7, #31]
 800b35a:	e04a      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b35c:	2304      	movs	r3, #4
 800b35e:	77fb      	strb	r3, [r7, #31]
 800b360:	e047      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b362:	2308      	movs	r3, #8
 800b364:	77fb      	strb	r3, [r7, #31]
 800b366:	e044      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b368:	2310      	movs	r3, #16
 800b36a:	77fb      	strb	r3, [r7, #31]
 800b36c:	bf00      	nop
 800b36e:	e040      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a11      	ldr	r2, [pc, #68]	; (800b3bc <UART_SetConfig+0x318>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d139      	bne.n	800b3ee <UART_SetConfig+0x34a>
 800b37a:	4b09      	ldr	r3, [pc, #36]	; (800b3a0 <UART_SetConfig+0x2fc>)
 800b37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b388:	d027      	beq.n	800b3da <UART_SetConfig+0x336>
 800b38a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b38e:	d817      	bhi.n	800b3c0 <UART_SetConfig+0x31c>
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01c      	beq.n	800b3ce <UART_SetConfig+0x32a>
 800b394:	e027      	b.n	800b3e6 <UART_SetConfig+0x342>
 800b396:	bf00      	nop
 800b398:	efff69f3 	.word	0xefff69f3
 800b39c:	40011000 	.word	0x40011000
 800b3a0:	40023800 	.word	0x40023800
 800b3a4:	40004400 	.word	0x40004400
 800b3a8:	40004800 	.word	0x40004800
 800b3ac:	40004c00 	.word	0x40004c00
 800b3b0:	40005000 	.word	0x40005000
 800b3b4:	40011400 	.word	0x40011400
 800b3b8:	40007800 	.word	0x40007800
 800b3bc:	40007c00 	.word	0x40007c00
 800b3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3c4:	d006      	beq.n	800b3d4 <UART_SetConfig+0x330>
 800b3c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b3ca:	d009      	beq.n	800b3e0 <UART_SetConfig+0x33c>
 800b3cc:	e00b      	b.n	800b3e6 <UART_SetConfig+0x342>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	77fb      	strb	r3, [r7, #31]
 800b3d2:	e00e      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	77fb      	strb	r3, [r7, #31]
 800b3d8:	e00b      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b3da:	2304      	movs	r3, #4
 800b3dc:	77fb      	strb	r3, [r7, #31]
 800b3de:	e008      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b3e0:	2308      	movs	r3, #8
 800b3e2:	77fb      	strb	r3, [r7, #31]
 800b3e4:	e005      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b3e6:	2310      	movs	r3, #16
 800b3e8:	77fb      	strb	r3, [r7, #31]
 800b3ea:	bf00      	nop
 800b3ec:	e001      	b.n	800b3f2 <UART_SetConfig+0x34e>
 800b3ee:	2310      	movs	r3, #16
 800b3f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3fa:	d17f      	bne.n	800b4fc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b3fc:	7ffb      	ldrb	r3, [r7, #31]
 800b3fe:	2b08      	cmp	r3, #8
 800b400:	d85c      	bhi.n	800b4bc <UART_SetConfig+0x418>
 800b402:	a201      	add	r2, pc, #4	; (adr r2, 800b408 <UART_SetConfig+0x364>)
 800b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b408:	0800b42d 	.word	0x0800b42d
 800b40c:	0800b44d 	.word	0x0800b44d
 800b410:	0800b46d 	.word	0x0800b46d
 800b414:	0800b4bd 	.word	0x0800b4bd
 800b418:	0800b485 	.word	0x0800b485
 800b41c:	0800b4bd 	.word	0x0800b4bd
 800b420:	0800b4bd 	.word	0x0800b4bd
 800b424:	0800b4bd 	.word	0x0800b4bd
 800b428:	0800b4a5 	.word	0x0800b4a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b42c:	f7fc fb8a 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800b430:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	005a      	lsls	r2, r3, #1
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	085b      	lsrs	r3, r3, #1
 800b43c:	441a      	add	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	fbb2 f3f3 	udiv	r3, r2, r3
 800b446:	b29b      	uxth	r3, r3
 800b448:	61bb      	str	r3, [r7, #24]
        break;
 800b44a:	e03a      	b.n	800b4c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b44c:	f7fc fb8e 	bl	8007b6c <HAL_RCC_GetPCLK2Freq>
 800b450:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	005a      	lsls	r2, r3, #1
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	085b      	lsrs	r3, r3, #1
 800b45c:	441a      	add	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	fbb2 f3f3 	udiv	r3, r2, r3
 800b466:	b29b      	uxth	r3, r3
 800b468:	61bb      	str	r3, [r7, #24]
        break;
 800b46a:	e02a      	b.n	800b4c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	085a      	lsrs	r2, r3, #1
 800b472:	4b5f      	ldr	r3, [pc, #380]	; (800b5f0 <UART_SetConfig+0x54c>)
 800b474:	4413      	add	r3, r2
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	6852      	ldr	r2, [r2, #4]
 800b47a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b47e:	b29b      	uxth	r3, r3
 800b480:	61bb      	str	r3, [r7, #24]
        break;
 800b482:	e01e      	b.n	800b4c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b484:	f7fc fa7a 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800b488:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	005a      	lsls	r2, r3, #1
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	085b      	lsrs	r3, r3, #1
 800b494:	441a      	add	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	61bb      	str	r3, [r7, #24]
        break;
 800b4a2:	e00e      	b.n	800b4c2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	085b      	lsrs	r3, r3, #1
 800b4aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	61bb      	str	r3, [r7, #24]
        break;
 800b4ba:	e002      	b.n	800b4c2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	75fb      	strb	r3, [r7, #23]
        break;
 800b4c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	2b0f      	cmp	r3, #15
 800b4c6:	d916      	bls.n	800b4f6 <UART_SetConfig+0x452>
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ce:	d212      	bcs.n	800b4f6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	f023 030f 	bic.w	r3, r3, #15
 800b4d8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	085b      	lsrs	r3, r3, #1
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	897b      	ldrh	r3, [r7, #10]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	897a      	ldrh	r2, [r7, #10]
 800b4f2:	60da      	str	r2, [r3, #12]
 800b4f4:	e070      	b.n	800b5d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	75fb      	strb	r3, [r7, #23]
 800b4fa:	e06d      	b.n	800b5d8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b4fc:	7ffb      	ldrb	r3, [r7, #31]
 800b4fe:	2b08      	cmp	r3, #8
 800b500:	d859      	bhi.n	800b5b6 <UART_SetConfig+0x512>
 800b502:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <UART_SetConfig+0x464>)
 800b504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b508:	0800b52d 	.word	0x0800b52d
 800b50c:	0800b54b 	.word	0x0800b54b
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b5b7 	.word	0x0800b5b7
 800b518:	0800b581 	.word	0x0800b581
 800b51c:	0800b5b7 	.word	0x0800b5b7
 800b520:	0800b5b7 	.word	0x0800b5b7
 800b524:	0800b5b7 	.word	0x0800b5b7
 800b528:	0800b59f 	.word	0x0800b59f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b52c:	f7fc fb0a 	bl	8007b44 <HAL_RCC_GetPCLK1Freq>
 800b530:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	085a      	lsrs	r2, r3, #1
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	441a      	add	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	fbb2 f3f3 	udiv	r3, r2, r3
 800b544:	b29b      	uxth	r3, r3
 800b546:	61bb      	str	r3, [r7, #24]
        break;
 800b548:	e038      	b.n	800b5bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b54a:	f7fc fb0f 	bl	8007b6c <HAL_RCC_GetPCLK2Freq>
 800b54e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	085a      	lsrs	r2, r3, #1
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	441a      	add	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b562:	b29b      	uxth	r3, r3
 800b564:	61bb      	str	r3, [r7, #24]
        break;
 800b566:	e029      	b.n	800b5bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	085a      	lsrs	r2, r3, #1
 800b56e:	4b21      	ldr	r3, [pc, #132]	; (800b5f4 <UART_SetConfig+0x550>)
 800b570:	4413      	add	r3, r2
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	6852      	ldr	r2, [r2, #4]
 800b576:	fbb3 f3f2 	udiv	r3, r3, r2
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	61bb      	str	r3, [r7, #24]
        break;
 800b57e:	e01d      	b.n	800b5bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b580:	f7fc f9fc 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800b584:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	085a      	lsrs	r2, r3, #1
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	441a      	add	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	fbb2 f3f3 	udiv	r3, r2, r3
 800b598:	b29b      	uxth	r3, r3
 800b59a:	61bb      	str	r3, [r7, #24]
        break;
 800b59c:	e00e      	b.n	800b5bc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	085b      	lsrs	r3, r3, #1
 800b5a4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	61bb      	str	r3, [r7, #24]
        break;
 800b5b4:	e002      	b.n	800b5bc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	75fb      	strb	r3, [r7, #23]
        break;
 800b5ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	2b0f      	cmp	r3, #15
 800b5c0:	d908      	bls.n	800b5d4 <UART_SetConfig+0x530>
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c8:	d204      	bcs.n	800b5d4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	60da      	str	r2, [r3, #12]
 800b5d2:	e001      	b.n	800b5d8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3720      	adds	r7, #32
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	01e84800 	.word	0x01e84800
 800b5f4:	00f42400 	.word	0x00f42400

0800b5f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00a      	beq.n	800b622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	430a      	orrs	r2, r1
 800b642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00a      	beq.n	800b666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	430a      	orrs	r2, r1
 800b664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00a      	beq.n	800b688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	430a      	orrs	r2, r1
 800b686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	f003 0310 	and.w	r3, r3, #16
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00a      	beq.n	800b6aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	f003 0320 	and.w	r3, r3, #32
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01a      	beq.n	800b70e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6f6:	d10a      	bne.n	800b70e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	430a      	orrs	r2, r1
 800b70c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	430a      	orrs	r2, r1
 800b72e:	605a      	str	r2, [r3, #4]
  }
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af02      	add	r7, sp, #8
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b74a:	f7f9 fd37 	bl	80051bc <HAL_GetTick>
 800b74e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0308 	and.w	r3, r3, #8
 800b75a:	2b08      	cmp	r3, #8
 800b75c:	d10e      	bne.n	800b77c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b75e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f814 	bl	800b79a <UART_WaitOnFlagUntilTimeout>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e00a      	b.n	800b792 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2220      	movs	r2, #32
 800b780:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2220      	movs	r2, #32
 800b786:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	60b9      	str	r1, [r7, #8]
 800b7a4:	603b      	str	r3, [r7, #0]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7aa:	e05d      	b.n	800b868 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b2:	d059      	beq.n	800b868 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7b4:	f7f9 fd02 	bl	80051bc <HAL_GetTick>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	69ba      	ldr	r2, [r7, #24]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d302      	bcc.n	800b7ca <UART_WaitOnFlagUntilTimeout+0x30>
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d11b      	bne.n	800b802 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b7d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f022 0201 	bic.w	r2, r2, #1
 800b7e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2220      	movs	r2, #32
 800b7ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e042      	b.n	800b888 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 0304 	and.w	r3, r3, #4
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d02b      	beq.n	800b868 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	69db      	ldr	r3, [r3, #28]
 800b816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b81a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b81e:	d123      	bne.n	800b868 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b828:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b838:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f022 0201 	bic.w	r2, r2, #1
 800b848:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2220      	movs	r2, #32
 800b84e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2220      	movs	r2, #32
 800b854:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2220      	movs	r2, #32
 800b85a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e00f      	b.n	800b888 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	69da      	ldr	r2, [r3, #28]
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4013      	ands	r3, r2
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	429a      	cmp	r2, r3
 800b876:	bf0c      	ite	eq
 800b878:	2301      	moveq	r3, #1
 800b87a:	2300      	movne	r3, #0
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	429a      	cmp	r2, r3
 800b884:	d092      	beq.n	800b7ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b8a6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689a      	ldr	r2, [r3, #8]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f022 0201 	bic.w	r2, r2, #1
 800b8b6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7ff fbce 	bl	800b090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b912:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2220      	movs	r2, #32
 800b918:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7ff fbab 	bl	800b07c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
	...

0800b930 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b930:	b084      	sub	sp, #16
 800b932:	b480      	push	{r7}
 800b934:	b085      	sub	sp, #20
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	f107 001c 	add.w	r0, r7, #28
 800b93e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b946:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b948:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b94a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b94e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b952:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b956:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b95a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	4b07      	ldr	r3, [pc, #28]	; (800b984 <SDMMC_Init+0x54>)
 800b968:	4013      	ands	r3, r2
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	431a      	orrs	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	b004      	add	sp, #16
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	ffff8100 	.word	0xffff8100

0800b988 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b996:	4618      	mov	r0, r3
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b9a2:	b480      	push	{r7}
 800b9a4:	b083      	sub	sp, #12
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2203      	movs	r2, #3
 800b9d0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b9d2:	2002      	movs	r0, #2
 800b9d4:	f7f9 fbfe 	bl	80051d4 <HAL_Delay>
  
  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0303 	and.w	r3, r3, #3
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
	...

0800ba00 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ba1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ba24:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ba2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <SDMMC_SendCommand+0x50>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	68fa      	ldr	r2, [r7, #12]
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	fffff000 	.word	0xfffff000

0800ba54 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	b2db      	uxtb	r3, r3
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3314      	adds	r3, #20
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	4413      	add	r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
}  
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800baba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bac0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bac6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	4313      	orrs	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	431a      	orrs	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bade:	2300      	movs	r3, #0

}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bafa:	2310      	movs	r3, #16
 800bafc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bafe:	2340      	movs	r3, #64	; 0x40
 800bb00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb0c:	f107 0308 	add.w	r3, r7, #8
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff ff74 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bb18:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1c:	2110      	movs	r1, #16
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa42 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bb24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb26:	69fb      	ldr	r3, [r7, #28]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3720      	adds	r7, #32
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bb3e:	2311      	movs	r3, #17
 800bb40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb42:	2340      	movs	r3, #64	; 0x40
 800bb44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb46:	2300      	movs	r3, #0
 800bb48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb50:	f107 0308 	add.w	r3, r7, #8
 800bb54:	4619      	mov	r1, r3
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff ff52 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb60:	2111      	movs	r1, #17
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa20 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bb68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3720      	adds	r7, #32
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb82:	2312      	movs	r3, #18
 800bb84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb86:	2340      	movs	r3, #64	; 0x40
 800bb88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb94:	f107 0308 	add.w	r3, r7, #8
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7ff ff30 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bba0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba4:	2112      	movs	r1, #18
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f9fe 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bbac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbae:	69fb      	ldr	r3, [r7, #28]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3720      	adds	r7, #32
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bbc6:	2318      	movs	r3, #24
 800bbc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbca:	2340      	movs	r3, #64	; 0x40
 800bbcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbd8:	f107 0308 	add.w	r3, r7, #8
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff ff0e 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbe8:	2118      	movs	r1, #24
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f9dc 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bbf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bc0a:	2319      	movs	r3, #25
 800bc0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc0e:	2340      	movs	r3, #64	; 0x40
 800bc10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc1c:	f107 0308 	add.w	r3, r7, #8
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff feec 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bc28:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc2c:	2119      	movs	r1, #25
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f9ba 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bc34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc36:	69fb      	ldr	r3, [r7, #28]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3720      	adds	r7, #32
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b088      	sub	sp, #32
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bc4c:	230c      	movs	r3, #12
 800bc4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc50:	2340      	movs	r3, #64	; 0x40
 800bc52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc54:	2300      	movs	r3, #0
 800bc56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc5e:	f107 0308 	add.w	r3, r7, #8
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff fecb 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc6a:	4a05      	ldr	r2, [pc, #20]	; (800bc80 <SDMMC_CmdStopTransfer+0x40>)
 800bc6c:	210c      	movs	r1, #12
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f99a 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bc74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc76:	69fb      	ldr	r3, [r7, #28]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3720      	adds	r7, #32
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	05f5e100 	.word	0x05f5e100

0800bc84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b08a      	sub	sp, #40	; 0x28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc94:	2307      	movs	r3, #7
 800bc96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc98:	2340      	movs	r3, #64	; 0x40
 800bc9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bca4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bca6:	f107 0310 	add.w	r3, r7, #16
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f7ff fea7 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bcb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb6:	2107      	movs	r1, #7
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 f975 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bcbe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3728      	adds	r7, #40	; 0x28
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b088      	sub	sp, #32
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcde:	2300      	movs	r3, #0
 800bce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bce8:	f107 0308 	add.w	r3, r7, #8
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff fe86 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f92f 	bl	800bf58 <SDMMC_GetCmdError>
 800bcfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3720      	adds	r7, #32
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b088      	sub	sp, #32
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bd0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bd12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bd14:	2308      	movs	r3, #8
 800bd16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd18:	2340      	movs	r3, #64	; 0x40
 800bd1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd26:	f107 0308 	add.w	r3, r7, #8
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7ff fe67 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fb18 	bl	800c368 <SDMMC_GetCmdResp7>
 800bd38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd3a:	69fb      	ldr	r3, [r7, #28]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bd52:	2337      	movs	r3, #55	; 0x37
 800bd54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd56:	2340      	movs	r3, #64	; 0x40
 800bd58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd64:	f107 0308 	add.w	r3, r7, #8
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff fe48 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bd70:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd74:	2137      	movs	r1, #55	; 0x37
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f916 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bd7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd7e:	69fb      	ldr	r3, [r7, #28]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3720      	adds	r7, #32
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4b0d      	ldr	r3, [pc, #52]	; (800bdcc <SDMMC_CmdAppOperCommand+0x44>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd9a:	2329      	movs	r3, #41	; 0x29
 800bd9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd9e:	2340      	movs	r3, #64	; 0x40
 800bda0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bda2:	2300      	movs	r3, #0
 800bda4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bda6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdac:	f107 0308 	add.w	r3, r7, #8
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff fe24 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fa27 	bl	800c20c <SDMMC_GetCmdResp3>
 800bdbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdc0:	69fb      	ldr	r3, [r7, #28]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3720      	adds	r7, #32
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	80100000 	.word	0x80100000

0800bdd0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bdde:	2306      	movs	r3, #6
 800bde0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bde2:	2340      	movs	r3, #64	; 0x40
 800bde4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bde6:	2300      	movs	r3, #0
 800bde8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdf0:	f107 0308 	add.w	r3, r7, #8
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff fe02 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800be00:	2106      	movs	r1, #6
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f8d0 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800be08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be0a:	69fb      	ldr	r3, [r7, #28]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3720      	adds	r7, #32
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800be20:	2333      	movs	r3, #51	; 0x33
 800be22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be24:	2340      	movs	r3, #64	; 0x40
 800be26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be28:	2300      	movs	r3, #0
 800be2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be32:	f107 0308 	add.w	r3, r7, #8
 800be36:	4619      	mov	r1, r3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff fde1 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800be3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800be42:	2133      	movs	r1, #51	; 0x33
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f8af 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800be4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be4c:	69fb      	ldr	r3, [r7, #28]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3720      	adds	r7, #32
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be56:	b580      	push	{r7, lr}
 800be58:	b088      	sub	sp, #32
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be5e:	2300      	movs	r3, #0
 800be60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be62:	2302      	movs	r3, #2
 800be64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be66:	23c0      	movs	r3, #192	; 0xc0
 800be68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be6a:	2300      	movs	r3, #0
 800be6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be74:	f107 0308 	add.w	r3, r7, #8
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff fdc0 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f97d 	bl	800c180 <SDMMC_GetCmdResp2>
 800be86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be88:	69fb      	ldr	r3, [r7, #28]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3720      	adds	r7, #32
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b088      	sub	sp, #32
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bea0:	2309      	movs	r3, #9
 800bea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bea4:	23c0      	movs	r3, #192	; 0xc0
 800bea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beb2:	f107 0308 	add.w	r3, r7, #8
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff fda1 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f95e 	bl	800c180 <SDMMC_GetCmdResp2>
 800bec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bec6:	69fb      	ldr	r3, [r7, #28]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800beda:	2300      	movs	r3, #0
 800bedc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bede:	2303      	movs	r3, #3
 800bee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef0:	f107 0308 	add.w	r3, r7, #8
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff fd82 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	2103      	movs	r1, #3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f9bd 	bl	800c280 <SDMMC_GetCmdResp6>
 800bf06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf08:	69fb      	ldr	r3, [r7, #28]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bf20:	230d      	movs	r3, #13
 800bf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf24:	2340      	movs	r3, #64	; 0x40
 800bf26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff fd61 	bl	800ba00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bf3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf42:	210d      	movs	r1, #13
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f82f 	bl	800bfa8 <SDMMC_GetCmdResp1>
 800bf4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf4c:	69fb      	ldr	r3, [r7, #28]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3720      	adds	r7, #32
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
	...

0800bf58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf58:	b490      	push	{r4, r7}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf60:	4b0f      	ldr	r3, [pc, #60]	; (800bfa0 <SDMMC_GetCmdError+0x48>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a0f      	ldr	r2, [pc, #60]	; (800bfa4 <SDMMC_GetCmdError+0x4c>)
 800bf66:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6a:	0a5b      	lsrs	r3, r3, #9
 800bf6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf74:	4623      	mov	r3, r4
 800bf76:	1e5c      	subs	r4, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf80:	e009      	b.n	800bf96 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0f2      	beq.n	800bf74 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	22c5      	movs	r2, #197	; 0xc5
 800bf92:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bc90      	pop	{r4, r7}
 800bf9e:	4770      	bx	lr
 800bfa0:	20000000 	.word	0x20000000
 800bfa4:	10624dd3 	.word	0x10624dd3

0800bfa8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bfa8:	b590      	push	{r4, r7, lr}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bfb6:	4b6f      	ldr	r3, [pc, #444]	; (800c174 <SDMMC_GetCmdResp1+0x1cc>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a6f      	ldr	r2, [pc, #444]	; (800c178 <SDMMC_GetCmdResp1+0x1d0>)
 800bfbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc0:	0a5b      	lsrs	r3, r3, #9
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bfc8:	4623      	mov	r3, r4
 800bfca:	1e5c      	subs	r4, r3, #1
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfd4:	e0c9      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfda:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d0f0      	beq.n	800bfc8 <SDMMC_GetCmdResp1+0x20>
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1eb      	bne.n	800bfc8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d004      	beq.n	800c006 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2204      	movs	r2, #4
 800c000:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c002:	2304      	movs	r3, #4
 800c004:	e0b1      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d004      	beq.n	800c01c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c018:	2301      	movs	r3, #1
 800c01a:	e0a6      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	22c5      	movs	r2, #197	; 0xc5
 800c020:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff fd16 	bl	800ba54 <SDMMC_GetCommandResponse>
 800c028:	4603      	mov	r3, r0
 800c02a:	461a      	mov	r2, r3
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	4293      	cmp	r3, r2
 800c030:	d001      	beq.n	800c036 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c032:	2301      	movs	r3, #1
 800c034:	e099      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c036:	2100      	movs	r1, #0
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7ff fd18 	bl	800ba6e <SDMMC_GetResponse>
 800c03e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	4b4e      	ldr	r3, [pc, #312]	; (800c17c <SDMMC_GetCmdResp1+0x1d4>)
 800c044:	4013      	ands	r3, r2
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e08d      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	da02      	bge.n	800c05a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c058:	e087      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c060:	2b00      	cmp	r3, #0
 800c062:	d001      	beq.n	800c068 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c064:	2340      	movs	r3, #64	; 0x40
 800c066:	e080      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c072:	2380      	movs	r3, #128	; 0x80
 800c074:	e079      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d002      	beq.n	800c086 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c080:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c084:	e071      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c090:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c094:	e069      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a4:	e061      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c0b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0b4:	e059      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0c4:	e051      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0d4:	e049      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c0e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0e4:	e041      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c0f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0f4:	e039      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c104:	e031      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c110:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c114:	e029      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c120:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c124:	e021      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c130:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c134:	e019      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c140:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c144:	e011      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c150:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c154:	e009      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	f003 0308 	and.w	r3, r3, #8
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c160:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c164:	e001      	b.n	800c16a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd90      	pop	{r4, r7, pc}
 800c172:	bf00      	nop
 800c174:	20000000 	.word	0x20000000
 800c178:	10624dd3 	.word	0x10624dd3
 800c17c:	fdffe008 	.word	0xfdffe008

0800c180 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c180:	b490      	push	{r4, r7}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c188:	4b1e      	ldr	r3, [pc, #120]	; (800c204 <SDMMC_GetCmdResp2+0x84>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a1e      	ldr	r2, [pc, #120]	; (800c208 <SDMMC_GetCmdResp2+0x88>)
 800c18e:	fba2 2303 	umull	r2, r3, r2, r3
 800c192:	0a5b      	lsrs	r3, r3, #9
 800c194:	f241 3288 	movw	r2, #5000	; 0x1388
 800c198:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c19c:	4623      	mov	r3, r4
 800c19e:	1e5c      	subs	r4, r3, #1
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1a8:	e026      	b.n	800c1f8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d0f0      	beq.n	800c19c <SDMMC_GetCmdResp2+0x1c>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1eb      	bne.n	800c19c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c8:	f003 0304 	and.w	r3, r3, #4
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d004      	beq.n	800c1da <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2204      	movs	r2, #4
 800c1d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1d6:	2304      	movs	r3, #4
 800c1d8:	e00e      	b.n	800c1f8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d004      	beq.n	800c1f0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e003      	b.n	800c1f8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	22c5      	movs	r2, #197	; 0xc5
 800c1f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bc90      	pop	{r4, r7}
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	20000000 	.word	0x20000000
 800c208:	10624dd3 	.word	0x10624dd3

0800c20c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c20c:	b490      	push	{r4, r7}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c214:	4b18      	ldr	r3, [pc, #96]	; (800c278 <SDMMC_GetCmdResp3+0x6c>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a18      	ldr	r2, [pc, #96]	; (800c27c <SDMMC_GetCmdResp3+0x70>)
 800c21a:	fba2 2303 	umull	r2, r3, r2, r3
 800c21e:	0a5b      	lsrs	r3, r3, #9
 800c220:	f241 3288 	movw	r2, #5000	; 0x1388
 800c224:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c228:	4623      	mov	r3, r4
 800c22a:	1e5c      	subs	r4, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d102      	bne.n	800c236 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c230:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c234:	e01b      	b.n	800c26e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0f0      	beq.n	800c228 <SDMMC_GetCmdResp3+0x1c>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1eb      	bne.n	800c228 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d004      	beq.n	800c266 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2204      	movs	r2, #4
 800c260:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c262:	2304      	movs	r3, #4
 800c264:	e003      	b.n	800c26e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	22c5      	movs	r2, #197	; 0xc5
 800c26a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bc90      	pop	{r4, r7}
 800c276:	4770      	bx	lr
 800c278:	20000000 	.word	0x20000000
 800c27c:	10624dd3 	.word	0x10624dd3

0800c280 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c280:	b590      	push	{r4, r7, lr}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	460b      	mov	r3, r1
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c28e:	4b34      	ldr	r3, [pc, #208]	; (800c360 <SDMMC_GetCmdResp6+0xe0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a34      	ldr	r2, [pc, #208]	; (800c364 <SDMMC_GetCmdResp6+0xe4>)
 800c294:	fba2 2303 	umull	r2, r3, r2, r3
 800c298:	0a5b      	lsrs	r3, r3, #9
 800c29a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c29e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c2a2:	4623      	mov	r3, r4
 800c2a4:	1e5c      	subs	r4, r3, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d102      	bne.n	800c2b0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2ae:	e052      	b.n	800c356 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d0f0      	beq.n	800c2a2 <SDMMC_GetCmdResp6+0x22>
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1eb      	bne.n	800c2a2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ce:	f003 0304 	and.w	r3, r3, #4
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2204      	movs	r2, #4
 800c2da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2dc:	2304      	movs	r3, #4
 800c2de:	e03a      	b.n	800c356 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d004      	beq.n	800c2f6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e02f      	b.n	800c356 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f7ff fbac 	bl	800ba54 <SDMMC_GetCommandResponse>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	461a      	mov	r2, r3
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	4293      	cmp	r3, r2
 800c304:	d001      	beq.n	800c30a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c306:	2301      	movs	r3, #1
 800c308:	e025      	b.n	800c356 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	22c5      	movs	r2, #197	; 0xc5
 800c30e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c310:	2100      	movs	r1, #0
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f7ff fbab 	bl	800ba6e <SDMMC_GetResponse>
 800c318:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d106      	bne.n	800c332 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	0c1b      	lsrs	r3, r3, #16
 800c328:	b29a      	uxth	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c32e:	2300      	movs	r3, #0
 800c330:	e011      	b.n	800c356 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c33c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c340:	e009      	b.n	800c356 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c34c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c350:	e001      	b.n	800c356 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c356:	4618      	mov	r0, r3
 800c358:	371c      	adds	r7, #28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd90      	pop	{r4, r7, pc}
 800c35e:	bf00      	nop
 800c360:	20000000 	.word	0x20000000
 800c364:	10624dd3 	.word	0x10624dd3

0800c368 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c368:	b490      	push	{r4, r7}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c370:	4b21      	ldr	r3, [pc, #132]	; (800c3f8 <SDMMC_GetCmdResp7+0x90>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a21      	ldr	r2, [pc, #132]	; (800c3fc <SDMMC_GetCmdResp7+0x94>)
 800c376:	fba2 2303 	umull	r2, r3, r2, r3
 800c37a:	0a5b      	lsrs	r3, r3, #9
 800c37c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c380:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c384:	4623      	mov	r3, r4
 800c386:	1e5c      	subs	r4, r3, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c38c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c390:	e02c      	b.n	800c3ec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c396:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f0      	beq.n	800c384 <SDMMC_GetCmdResp7+0x1c>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1eb      	bne.n	800c384 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d004      	beq.n	800c3c2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3be:	2304      	movs	r3, #4
 800c3c0:	e014      	b.n	800c3ec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d004      	beq.n	800c3d8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e009      	b.n	800c3ec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2240      	movs	r2, #64	; 0x40
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c3ea:	2300      	movs	r3, #0
  
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bc90      	pop	{r4, r7}
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	20000000 	.word	0x20000000
 800c3fc:	10624dd3 	.word	0x10624dd3

0800c400 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c400:	b084      	sub	sp, #16
 800c402:	b580      	push	{r7, lr}
 800c404:	b084      	sub	sp, #16
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	f107 001c 	add.w	r0, r7, #28
 800c40e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	2b01      	cmp	r3, #1
 800c416:	d120      	bne.n	800c45a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	4b20      	ldr	r3, [pc, #128]	; (800c4ac <USB_CoreInit+0xac>)
 800c42a:	4013      	ands	r3, r2
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d105      	bne.n	800c44e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f001 fac4 	bl	800d9dc <USB_CoreReset>
 800c454:	4603      	mov	r3, r0
 800c456:	73fb      	strb	r3, [r7, #15]
 800c458:	e010      	b.n	800c47c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f001 fab8 	bl	800d9dc <USB_CoreReset>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c474:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d10b      	bne.n	800c49a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	f043 0206 	orr.w	r2, r3, #6
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	f043 0220 	orr.w	r2, r3, #32
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3710      	adds	r7, #16
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4a6:	b004      	add	sp, #16
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	ffbdffbf 	.word	0xffbdffbf

0800c4b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c4be:	79fb      	ldrb	r3, [r7, #7]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d165      	bne.n	800c590 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	4a41      	ldr	r2, [pc, #260]	; (800c5cc <USB_SetTurnaroundTime+0x11c>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d906      	bls.n	800c4da <USB_SetTurnaroundTime+0x2a>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	4a40      	ldr	r2, [pc, #256]	; (800c5d0 <USB_SetTurnaroundTime+0x120>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d802      	bhi.n	800c4da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c4d4:	230f      	movs	r3, #15
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	e062      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	4a3c      	ldr	r2, [pc, #240]	; (800c5d0 <USB_SetTurnaroundTime+0x120>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d906      	bls.n	800c4f0 <USB_SetTurnaroundTime+0x40>
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	4a3b      	ldr	r2, [pc, #236]	; (800c5d4 <USB_SetTurnaroundTime+0x124>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d802      	bhi.n	800c4f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c4ea:	230e      	movs	r3, #14
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	e057      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	4a38      	ldr	r2, [pc, #224]	; (800c5d4 <USB_SetTurnaroundTime+0x124>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d906      	bls.n	800c506 <USB_SetTurnaroundTime+0x56>
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	4a37      	ldr	r2, [pc, #220]	; (800c5d8 <USB_SetTurnaroundTime+0x128>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d802      	bhi.n	800c506 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c500:	230d      	movs	r3, #13
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	e04c      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	4a33      	ldr	r2, [pc, #204]	; (800c5d8 <USB_SetTurnaroundTime+0x128>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d906      	bls.n	800c51c <USB_SetTurnaroundTime+0x6c>
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	4a32      	ldr	r2, [pc, #200]	; (800c5dc <USB_SetTurnaroundTime+0x12c>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d802      	bhi.n	800c51c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c516:	230c      	movs	r3, #12
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	e041      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	4a2f      	ldr	r2, [pc, #188]	; (800c5dc <USB_SetTurnaroundTime+0x12c>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d906      	bls.n	800c532 <USB_SetTurnaroundTime+0x82>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	4a2e      	ldr	r2, [pc, #184]	; (800c5e0 <USB_SetTurnaroundTime+0x130>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d802      	bhi.n	800c532 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c52c:	230b      	movs	r3, #11
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e036      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	4a2a      	ldr	r2, [pc, #168]	; (800c5e0 <USB_SetTurnaroundTime+0x130>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d906      	bls.n	800c548 <USB_SetTurnaroundTime+0x98>
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	4a29      	ldr	r2, [pc, #164]	; (800c5e4 <USB_SetTurnaroundTime+0x134>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d802      	bhi.n	800c548 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c542:	230a      	movs	r3, #10
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	e02b      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	4a26      	ldr	r2, [pc, #152]	; (800c5e4 <USB_SetTurnaroundTime+0x134>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d906      	bls.n	800c55e <USB_SetTurnaroundTime+0xae>
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	4a25      	ldr	r2, [pc, #148]	; (800c5e8 <USB_SetTurnaroundTime+0x138>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d802      	bhi.n	800c55e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c558:	2309      	movs	r3, #9
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	e020      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	4a21      	ldr	r2, [pc, #132]	; (800c5e8 <USB_SetTurnaroundTime+0x138>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d906      	bls.n	800c574 <USB_SetTurnaroundTime+0xc4>
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	4a20      	ldr	r2, [pc, #128]	; (800c5ec <USB_SetTurnaroundTime+0x13c>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d802      	bhi.n	800c574 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c56e:	2308      	movs	r3, #8
 800c570:	617b      	str	r3, [r7, #20]
 800c572:	e015      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	4a1d      	ldr	r2, [pc, #116]	; (800c5ec <USB_SetTurnaroundTime+0x13c>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d906      	bls.n	800c58a <USB_SetTurnaroundTime+0xda>
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	4a1c      	ldr	r2, [pc, #112]	; (800c5f0 <USB_SetTurnaroundTime+0x140>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d802      	bhi.n	800c58a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c584:	2307      	movs	r3, #7
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	e00a      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c58a:	2306      	movs	r3, #6
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	e007      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c590:	79fb      	ldrb	r3, [r7, #7]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d102      	bne.n	800c59c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c596:	2309      	movs	r3, #9
 800c598:	617b      	str	r3, [r7, #20]
 800c59a:	e001      	b.n	800c5a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c59c:	2309      	movs	r3, #9
 800c59e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	029b      	lsls	r3, r3, #10
 800c5b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	371c      	adds	r7, #28
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	00d8acbf 	.word	0x00d8acbf
 800c5d0:	00e4e1bf 	.word	0x00e4e1bf
 800c5d4:	00f423ff 	.word	0x00f423ff
 800c5d8:	0106737f 	.word	0x0106737f
 800c5dc:	011a499f 	.word	0x011a499f
 800c5e0:	01312cff 	.word	0x01312cff
 800c5e4:	014ca43f 	.word	0x014ca43f
 800c5e8:	016e35ff 	.word	0x016e35ff
 800c5ec:	01a6ab1f 	.word	0x01a6ab1f
 800c5f0:	01e847ff 	.word	0x01e847ff

0800c5f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f043 0201 	orr.w	r2, r3, #1
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	370c      	adds	r7, #12
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c616:	b480      	push	{r7}
 800c618:	b083      	sub	sp, #12
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f023 0201 	bic.w	r2, r3, #1
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d106      	bne.n	800c664 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	60da      	str	r2, [r3, #12]
 800c662:	e00b      	b.n	800c67c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c664:	78fb      	ldrb	r3, [r7, #3]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d106      	bne.n	800c678 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	60da      	str	r2, [r3, #12]
 800c676:	e001      	b.n	800c67c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e003      	b.n	800c684 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c67c:	2032      	movs	r0, #50	; 0x32
 800c67e:	f7f8 fda9 	bl	80051d4 <HAL_Delay>

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c68c:	b084      	sub	sp, #16
 800c68e:	b580      	push	{r7, lr}
 800c690:	b086      	sub	sp, #24
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c69a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	613b      	str	r3, [r7, #16]
 800c6aa:	e009      	b.n	800c6c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	3340      	adds	r3, #64	; 0x40
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	613b      	str	r3, [r7, #16]
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	2b0e      	cmp	r3, #14
 800c6c4:	d9f2      	bls.n	800c6ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d11c      	bne.n	800c706 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6da:	f043 0302 	orr.w	r3, r3, #2
 800c6de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	e005      	b.n	800c712 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c718:	461a      	mov	r2, r3
 800c71a:	2300      	movs	r3, #0
 800c71c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c724:	4619      	mov	r1, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c72c:	461a      	mov	r2, r3
 800c72e:	680b      	ldr	r3, [r1, #0]
 800c730:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c734:	2b01      	cmp	r3, #1
 800c736:	d10c      	bne.n	800c752 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d104      	bne.n	800c748 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c73e:	2100      	movs	r1, #0
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f959 	bl	800c9f8 <USB_SetDevSpeed>
 800c746:	e018      	b.n	800c77a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c748:	2101      	movs	r1, #1
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f954 	bl	800c9f8 <USB_SetDevSpeed>
 800c750:	e013      	b.n	800c77a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c754:	2b03      	cmp	r3, #3
 800c756:	d10c      	bne.n	800c772 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d104      	bne.n	800c768 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c75e:	2100      	movs	r1, #0
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f949 	bl	800c9f8 <USB_SetDevSpeed>
 800c766:	e008      	b.n	800c77a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c768:	2101      	movs	r1, #1
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f944 	bl	800c9f8 <USB_SetDevSpeed>
 800c770:	e003      	b.n	800c77a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c772:	2103      	movs	r1, #3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f93f 	bl	800c9f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c77a:	2110      	movs	r1, #16
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f8f3 	bl	800c968 <USB_FlushTxFifo>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f911 	bl	800c9b4 <USB_FlushRxFifo>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	613b      	str	r3, [r7, #16]
 800c7c4:	e043      	b.n	800c84e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	015a      	lsls	r2, r3, #5
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7dc:	d118      	bne.n	800c810 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10a      	bne.n	800c7fa <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	015a      	lsls	r2, r3, #5
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	e013      	b.n	800c822 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c806:	461a      	mov	r2, r3
 800c808:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	e008      	b.n	800c822 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c81c:	461a      	mov	r2, r3
 800c81e:	2300      	movs	r3, #0
 800c820:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82e:	461a      	mov	r2, r3
 800c830:	2300      	movs	r3, #0
 800c832:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	015a      	lsls	r2, r3, #5
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c840:	461a      	mov	r2, r3
 800c842:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c846:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	3301      	adds	r3, #1
 800c84c:	613b      	str	r3, [r7, #16]
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	429a      	cmp	r2, r3
 800c854:	d3b7      	bcc.n	800c7c6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c856:	2300      	movs	r3, #0
 800c858:	613b      	str	r3, [r7, #16]
 800c85a:	e043      	b.n	800c8e4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c86e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c872:	d118      	bne.n	800c8a6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10a      	bne.n	800c890 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	015a      	lsls	r2, r3, #5
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	4413      	add	r3, r2
 800c882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c886:	461a      	mov	r2, r3
 800c888:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	e013      	b.n	800c8b8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	015a      	lsls	r2, r3, #5
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	4413      	add	r3, r2
 800c898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89c:	461a      	mov	r2, r3
 800c89e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c8a2:	6013      	str	r3, [r2, #0]
 800c8a4:	e008      	b.n	800c8b8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	613b      	str	r3, [r7, #16]
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d3b7      	bcc.n	800c85c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c90c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d105      	bne.n	800c920 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	f043 0210 	orr.w	r2, r3, #16
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	699a      	ldr	r2, [r3, #24]
 800c924:	4b0e      	ldr	r3, [pc, #56]	; (800c960 <USB_DevInit+0x2d4>)
 800c926:	4313      	orrs	r3, r2
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d005      	beq.n	800c93e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	f043 0208 	orr.w	r2, r3, #8
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c940:	2b01      	cmp	r3, #1
 800c942:	d105      	bne.n	800c950 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	699a      	ldr	r2, [r3, #24]
 800c948:	4b06      	ldr	r3, [pc, #24]	; (800c964 <USB_DevInit+0x2d8>)
 800c94a:	4313      	orrs	r3, r2
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c950:	7dfb      	ldrb	r3, [r7, #23]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c95c:	b004      	add	sp, #16
 800c95e:	4770      	bx	lr
 800c960:	803c3800 	.word	0x803c3800
 800c964:	40000004 	.word	0x40000004

0800c968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c972:	2300      	movs	r3, #0
 800c974:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	019b      	lsls	r3, r3, #6
 800c97a:	f043 0220 	orr.w	r2, r3, #32
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	4a09      	ldr	r2, [pc, #36]	; (800c9b0 <USB_FlushTxFifo+0x48>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d901      	bls.n	800c994 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c990:	2303      	movs	r3, #3
 800c992:	e006      	b.n	800c9a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	f003 0320 	and.w	r3, r3, #32
 800c99c:	2b20      	cmp	r3, #32
 800c99e:	d0f0      	beq.n	800c982 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	00030d40 	.word	0x00030d40

0800c9b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2210      	movs	r2, #16
 800c9c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4a09      	ldr	r2, [pc, #36]	; (800c9f4 <USB_FlushRxFifo+0x40>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d901      	bls.n	800c9d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e006      	b.n	800c9e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	f003 0310 	and.w	r3, r3, #16
 800c9e0:	2b10      	cmp	r3, #16
 800c9e2:	d0f0      	beq.n	800c9c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	00030d40 	.word	0x00030d40

0800c9f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	68f9      	ldr	r1, [r7, #12]
 800ca14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b087      	sub	sp, #28
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f003 0306 	and.w	r3, r3, #6
 800ca42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d102      	bne.n	800ca50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	75fb      	strb	r3, [r7, #23]
 800ca4e:	e00a      	b.n	800ca66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d002      	beq.n	800ca5c <USB_GetDevSpeed+0x32>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b06      	cmp	r3, #6
 800ca5a:	d102      	bne.n	800ca62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	75fb      	strb	r3, [r7, #23]
 800ca60:	e001      	b.n	800ca66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ca62:	230f      	movs	r3, #15
 800ca64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	371c      	adds	r7, #28
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d139      	bne.n	800cb04 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca96:	69da      	ldr	r2, [r3, #28]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 030f 	and.w	r3, r3, #15
 800caa0:	2101      	movs	r1, #1
 800caa2:	fa01 f303 	lsl.w	r3, r1, r3
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	68f9      	ldr	r1, [r7, #12]
 800caaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caae:	4313      	orrs	r3, r2
 800cab0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	015a      	lsls	r2, r3, #5
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4413      	add	r3, r2
 800caba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d153      	bne.n	800cb70 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	78db      	ldrb	r3, [r3, #3]
 800cae2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cae4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	059b      	lsls	r3, r3, #22
 800caea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800caec:	431a      	orrs	r2, r3
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	0159      	lsls	r1, r3, #5
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	440b      	add	r3, r1
 800caf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafa:	4619      	mov	r1, r3
 800cafc:	4b20      	ldr	r3, [pc, #128]	; (800cb80 <USB_ActivateEndpoint+0x10c>)
 800cafe:	4313      	orrs	r3, r2
 800cb00:	600b      	str	r3, [r1, #0]
 800cb02:	e035      	b.n	800cb70 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb0a:	69da      	ldr	r2, [r3, #28]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	f003 030f 	and.w	r3, r3, #15
 800cb14:	2101      	movs	r1, #1
 800cb16:	fa01 f303 	lsl.w	r3, r1, r3
 800cb1a:	041b      	lsls	r3, r3, #16
 800cb1c:	68f9      	ldr	r1, [r7, #12]
 800cb1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb22:	4313      	orrs	r3, r2
 800cb24:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d119      	bne.n	800cb70 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	015a      	lsls	r2, r3, #5
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	78db      	ldrb	r3, [r3, #3]
 800cb56:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cb58:	430b      	orrs	r3, r1
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	0159      	lsls	r1, r3, #5
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	440b      	add	r3, r1
 800cb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <USB_ActivateEndpoint+0x10c>)
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	10008000 	.word	0x10008000

0800cb84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	785b      	ldrb	r3, [r3, #1]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d161      	bne.n	800cc64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbb6:	d11f      	bne.n	800cbf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	015a      	lsls	r2, r3, #5
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	0151      	lsls	r1, r2, #5
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	440a      	add	r2, r1
 800cbce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	0151      	lsls	r1, r2, #5
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	440a      	add	r2, r1
 800cbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	f003 030f 	and.w	r3, r3, #15
 800cc08:	2101      	movs	r1, #1
 800cc0a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	43db      	mvns	r3, r3
 800cc12:	68f9      	ldr	r1, [r7, #12]
 800cc14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc18:	4013      	ands	r3, r2
 800cc1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc22:	69da      	ldr	r2, [r3, #28]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	f003 030f 	and.w	r3, r3, #15
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	43db      	mvns	r3, r3
 800cc36:	68f9      	ldr	r1, [r7, #12]
 800cc38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	0159      	lsls	r1, r3, #5
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	440b      	add	r3, r1
 800cc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4b35      	ldr	r3, [pc, #212]	; (800cd34 <USB_DeactivateEndpoint+0x1b0>)
 800cc5e:	4013      	ands	r3, r2
 800cc60:	600b      	str	r3, [r1, #0]
 800cc62:	e060      	b.n	800cd26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	015a      	lsls	r2, r3, #5
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc7a:	d11f      	bne.n	800ccbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	015a      	lsls	r2, r3, #5
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4413      	add	r3, r2
 800cc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	0151      	lsls	r1, r2, #5
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	440a      	add	r2, r1
 800cc92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	015a      	lsls	r2, r3, #5
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	0151      	lsls	r1, r2, #5
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	440a      	add	r2, r1
 800ccb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	f003 030f 	and.w	r3, r3, #15
 800cccc:	2101      	movs	r1, #1
 800ccce:	fa01 f303 	lsl.w	r3, r1, r3
 800ccd2:	041b      	lsls	r3, r3, #16
 800ccd4:	43db      	mvns	r3, r3
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccdc:	4013      	ands	r3, r2
 800ccde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce6:	69da      	ldr	r2, [r3, #28]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	f003 030f 	and.w	r3, r3, #15
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf6:	041b      	lsls	r3, r3, #16
 800ccf8:	43db      	mvns	r3, r3
 800ccfa:	68f9      	ldr	r1, [r7, #12]
 800ccfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd00:	4013      	ands	r3, r2
 800cd02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	0159      	lsls	r1, r3, #5
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	440b      	add	r3, r1
 800cd1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd1e:	4619      	mov	r1, r3
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <USB_DeactivateEndpoint+0x1b4>)
 800cd22:	4013      	ands	r3, r2
 800cd24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	ec337800 	.word	0xec337800
 800cd38:	eff37800 	.word	0xeff37800

0800cd3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af02      	add	r7, sp, #8
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	4613      	mov	r3, r2
 800cd48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	785b      	ldrb	r3, [r3, #1]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	f040 8163 	bne.w	800d024 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d132      	bne.n	800cdcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	015a      	lsls	r2, r3, #5
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd72:	691a      	ldr	r2, [r3, #16]
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	0159      	lsls	r1, r3, #5
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	440b      	add	r3, r1
 800cd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd80:	4619      	mov	r1, r3
 800cd82:	4ba5      	ldr	r3, [pc, #660]	; (800d018 <USB_EPStartXfer+0x2dc>)
 800cd84:	4013      	ands	r3, r2
 800cd86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	015a      	lsls	r2, r3, #5
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	4413      	add	r3, r2
 800cd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	69ba      	ldr	r2, [r7, #24]
 800cd98:	0151      	lsls	r1, r2, #5
 800cd9a:	69fa      	ldr	r2, [r7, #28]
 800cd9c:	440a      	add	r2, r1
 800cd9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cda2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cda6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	015a      	lsls	r2, r3, #5
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	4413      	add	r3, r2
 800cdb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb4:	691a      	ldr	r2, [r3, #16]
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	0159      	lsls	r1, r3, #5
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	440b      	add	r3, r1
 800cdbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	4b95      	ldr	r3, [pc, #596]	; (800d01c <USB_EPStartXfer+0x2e0>)
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	610b      	str	r3, [r1, #16]
 800cdca:	e074      	b.n	800ceb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	015a      	lsls	r2, r3, #5
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd8:	691a      	ldr	r2, [r3, #16]
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	0159      	lsls	r1, r3, #5
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	440b      	add	r3, r1
 800cde2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde6:	4619      	mov	r1, r3
 800cde8:	4b8c      	ldr	r3, [pc, #560]	; (800d01c <USB_EPStartXfer+0x2e0>)
 800cdea:	4013      	ands	r3, r2
 800cdec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	015a      	lsls	r2, r3, #5
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfa:	691a      	ldr	r2, [r3, #16]
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	0159      	lsls	r1, r3, #5
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	440b      	add	r3, r1
 800ce04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4b83      	ldr	r3, [pc, #524]	; (800d018 <USB_EPStartXfer+0x2dc>)
 800ce0c:	4013      	ands	r3, r2
 800ce0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	015a      	lsls	r2, r3, #5
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	4413      	add	r3, r2
 800ce18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce1c:	691a      	ldr	r2, [r3, #16]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	6959      	ldr	r1, [r3, #20]
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	440b      	add	r3, r1
 800ce28:	1e59      	subs	r1, r3, #1
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ce32:	04d9      	lsls	r1, r3, #19
 800ce34:	4b7a      	ldr	r3, [pc, #488]	; (800d020 <USB_EPStartXfer+0x2e4>)
 800ce36:	400b      	ands	r3, r1
 800ce38:	69b9      	ldr	r1, [r7, #24]
 800ce3a:	0148      	lsls	r0, r1, #5
 800ce3c:	69f9      	ldr	r1, [r7, #28]
 800ce3e:	4401      	add	r1, r0
 800ce40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce44:	4313      	orrs	r3, r2
 800ce46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce54:	691a      	ldr	r2, [r3, #16]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	695b      	ldr	r3, [r3, #20]
 800ce5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce5e:	69b9      	ldr	r1, [r7, #24]
 800ce60:	0148      	lsls	r0, r1, #5
 800ce62:	69f9      	ldr	r1, [r7, #28]
 800ce64:	4401      	add	r1, r0
 800ce66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	78db      	ldrb	r3, [r3, #3]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d11f      	bne.n	800ceb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	015a      	lsls	r2, r3, #5
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	0151      	lsls	r1, r2, #5
 800ce88:	69fa      	ldr	r2, [r7, #28]
 800ce8a:	440a      	add	r2, r1
 800ce8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ce94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	015a      	lsls	r2, r3, #5
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	0151      	lsls	r1, r2, #5
 800cea8:	69fa      	ldr	r2, [r7, #28]
 800ceaa:	440a      	add	r2, r1
 800ceac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ceb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ceb6:	79fb      	ldrb	r3, [r7, #7]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d14b      	bne.n	800cf54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d009      	beq.n	800ced8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced0:	461a      	mov	r2, r3
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	78db      	ldrb	r3, [r3, #3]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d128      	bne.n	800cf32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d110      	bne.n	800cf12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	69ba      	ldr	r2, [r7, #24]
 800cf00:	0151      	lsls	r1, r2, #5
 800cf02:	69fa      	ldr	r2, [r7, #28]
 800cf04:	440a      	add	r2, r1
 800cf06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf0e:	6013      	str	r3, [r2, #0]
 800cf10:	e00f      	b.n	800cf32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	015a      	lsls	r2, r3, #5
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	4413      	add	r3, r2
 800cf1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	69ba      	ldr	r2, [r7, #24]
 800cf22:	0151      	lsls	r1, r2, #5
 800cf24:	69fa      	ldr	r2, [r7, #28]
 800cf26:	440a      	add	r2, r1
 800cf28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	015a      	lsls	r2, r3, #5
 800cf36:	69fb      	ldr	r3, [r7, #28]
 800cf38:	4413      	add	r3, r2
 800cf3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	0151      	lsls	r1, r2, #5
 800cf44:	69fa      	ldr	r2, [r7, #28]
 800cf46:	440a      	add	r2, r1
 800cf48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf50:	6013      	str	r3, [r2, #0]
 800cf52:	e133      	b.n	800d1bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	015a      	lsls	r2, r3, #5
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69ba      	ldr	r2, [r7, #24]
 800cf64:	0151      	lsls	r1, r2, #5
 800cf66:	69fa      	ldr	r2, [r7, #28]
 800cf68:	440a      	add	r2, r1
 800cf6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	78db      	ldrb	r3, [r3, #3]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d015      	beq.n	800cfa8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	695b      	ldr	r3, [r3, #20]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f000 811b 	beq.w	800d1bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	f003 030f 	and.w	r3, r3, #15
 800cf96:	2101      	movs	r1, #1
 800cf98:	fa01 f303 	lsl.w	r3, r1, r3
 800cf9c:	69f9      	ldr	r1, [r7, #28]
 800cf9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	634b      	str	r3, [r1, #52]	; 0x34
 800cfa6:	e109      	b.n	800d1bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d110      	bne.n	800cfda <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	69ba      	ldr	r2, [r7, #24]
 800cfc8:	0151      	lsls	r1, r2, #5
 800cfca:	69fa      	ldr	r2, [r7, #28]
 800cfcc:	440a      	add	r2, r1
 800cfce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	e00f      	b.n	800cffa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	015a      	lsls	r2, r3, #5
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	0151      	lsls	r1, r2, #5
 800cfec:	69fa      	ldr	r2, [r7, #28]
 800cfee:	440a      	add	r2, r1
 800cff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	68d9      	ldr	r1, [r3, #12]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	781a      	ldrb	r2, [r3, #0]
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	b298      	uxth	r0, r3
 800d008:	79fb      	ldrb	r3, [r7, #7]
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	4603      	mov	r3, r0
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f000 fa38 	bl	800d484 <USB_WritePacket>
 800d014:	e0d2      	b.n	800d1bc <USB_EPStartXfer+0x480>
 800d016:	bf00      	nop
 800d018:	e007ffff 	.word	0xe007ffff
 800d01c:	fff80000 	.word	0xfff80000
 800d020:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	015a      	lsls	r2, r3, #5
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	4413      	add	r3, r2
 800d02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d030:	691a      	ldr	r2, [r3, #16]
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	0159      	lsls	r1, r3, #5
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	440b      	add	r3, r1
 800d03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03e:	4619      	mov	r1, r3
 800d040:	4b61      	ldr	r3, [pc, #388]	; (800d1c8 <USB_EPStartXfer+0x48c>)
 800d042:	4013      	ands	r3, r2
 800d044:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	015a      	lsls	r2, r3, #5
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d052:	691a      	ldr	r2, [r3, #16]
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	0159      	lsls	r1, r3, #5
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	440b      	add	r3, r1
 800d05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d060:	4619      	mov	r1, r3
 800d062:	4b5a      	ldr	r3, [pc, #360]	; (800d1cc <USB_EPStartXfer+0x490>)
 800d064:	4013      	ands	r3, r2
 800d066:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d123      	bne.n	800d0b8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	015a      	lsls	r2, r3, #5
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	4413      	add	r3, r2
 800d078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d07c:	691a      	ldr	r2, [r3, #16]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d086:	69b9      	ldr	r1, [r7, #24]
 800d088:	0148      	lsls	r0, r1, #5
 800d08a:	69f9      	ldr	r1, [r7, #28]
 800d08c:	4401      	add	r1, r0
 800d08e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d092:	4313      	orrs	r3, r2
 800d094:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	015a      	lsls	r2, r3, #5
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	4413      	add	r3, r2
 800d09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	69ba      	ldr	r2, [r7, #24]
 800d0a6:	0151      	lsls	r1, r2, #5
 800d0a8:	69fa      	ldr	r2, [r7, #28]
 800d0aa:	440a      	add	r2, r1
 800d0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0b4:	6113      	str	r3, [r2, #16]
 800d0b6:	e033      	b.n	800d120 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	695a      	ldr	r2, [r3, #20]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	1e5a      	subs	r2, r3, #1
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	015a      	lsls	r2, r3, #5
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	8afb      	ldrh	r3, [r7, #22]
 800d0de:	04d9      	lsls	r1, r3, #19
 800d0e0:	4b3b      	ldr	r3, [pc, #236]	; (800d1d0 <USB_EPStartXfer+0x494>)
 800d0e2:	400b      	ands	r3, r1
 800d0e4:	69b9      	ldr	r1, [r7, #24]
 800d0e6:	0148      	lsls	r0, r1, #5
 800d0e8:	69f9      	ldr	r1, [r7, #28]
 800d0ea:	4401      	add	r1, r0
 800d0ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	015a      	lsls	r2, r3, #5
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d100:	691a      	ldr	r2, [r3, #16]
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	8af9      	ldrh	r1, [r7, #22]
 800d108:	fb01 f303 	mul.w	r3, r1, r3
 800d10c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d110:	69b9      	ldr	r1, [r7, #24]
 800d112:	0148      	lsls	r0, r1, #5
 800d114:	69f9      	ldr	r1, [r7, #28]
 800d116:	4401      	add	r1, r0
 800d118:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d11c:	4313      	orrs	r3, r2
 800d11e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d120:	79fb      	ldrb	r3, [r7, #7]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d10d      	bne.n	800d142 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d009      	beq.n	800d142 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	68d9      	ldr	r1, [r3, #12]
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	015a      	lsls	r2, r3, #5
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	4413      	add	r3, r2
 800d13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13e:	460a      	mov	r2, r1
 800d140:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	78db      	ldrb	r3, [r3, #3]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d128      	bne.n	800d19c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d156:	2b00      	cmp	r3, #0
 800d158:	d110      	bne.n	800d17c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	015a      	lsls	r2, r3, #5
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	4413      	add	r3, r2
 800d162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	69ba      	ldr	r2, [r7, #24]
 800d16a:	0151      	lsls	r1, r2, #5
 800d16c:	69fa      	ldr	r2, [r7, #28]
 800d16e:	440a      	add	r2, r1
 800d170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	e00f      	b.n	800d19c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	015a      	lsls	r2, r3, #5
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	4413      	add	r3, r2
 800d184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	69ba      	ldr	r2, [r7, #24]
 800d18c:	0151      	lsls	r1, r2, #5
 800d18e:	69fa      	ldr	r2, [r7, #28]
 800d190:	440a      	add	r2, r1
 800d192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d19a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	015a      	lsls	r2, r3, #5
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	69ba      	ldr	r2, [r7, #24]
 800d1ac:	0151      	lsls	r1, r2, #5
 800d1ae:	69fa      	ldr	r2, [r7, #28]
 800d1b0:	440a      	add	r2, r1
 800d1b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3720      	adds	r7, #32
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	fff80000 	.word	0xfff80000
 800d1cc:	e007ffff 	.word	0xe007ffff
 800d1d0:	1ff80000 	.word	0x1ff80000

0800d1d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b087      	sub	sp, #28
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	785b      	ldrb	r3, [r3, #1]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	f040 80cd 	bne.w	800d390 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	695b      	ldr	r3, [r3, #20]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d132      	bne.n	800d264 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	015a      	lsls	r2, r3, #5
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	4413      	add	r3, r2
 800d206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d20a:	691a      	ldr	r2, [r3, #16]
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	0159      	lsls	r1, r3, #5
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	440b      	add	r3, r1
 800d214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d218:	4619      	mov	r1, r3
 800d21a:	4b98      	ldr	r3, [pc, #608]	; (800d47c <USB_EP0StartXfer+0x2a8>)
 800d21c:	4013      	ands	r3, r2
 800d21e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	4413      	add	r3, r2
 800d228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	693a      	ldr	r2, [r7, #16]
 800d230:	0151      	lsls	r1, r2, #5
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	440a      	add	r2, r1
 800d236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d23a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d23e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	015a      	lsls	r2, r3, #5
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	4413      	add	r3, r2
 800d248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d24c:	691a      	ldr	r2, [r3, #16]
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	0159      	lsls	r1, r3, #5
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	440b      	add	r3, r1
 800d256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d25a:	4619      	mov	r1, r3
 800d25c:	4b88      	ldr	r3, [pc, #544]	; (800d480 <USB_EP0StartXfer+0x2ac>)
 800d25e:	4013      	ands	r3, r2
 800d260:	610b      	str	r3, [r1, #16]
 800d262:	e04e      	b.n	800d302 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	015a      	lsls	r2, r3, #5
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	4413      	add	r3, r2
 800d26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d270:	691a      	ldr	r2, [r3, #16]
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	0159      	lsls	r1, r3, #5
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	440b      	add	r3, r1
 800d27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d27e:	4619      	mov	r1, r3
 800d280:	4b7f      	ldr	r3, [pc, #508]	; (800d480 <USB_EP0StartXfer+0x2ac>)
 800d282:	4013      	ands	r3, r2
 800d284:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	015a      	lsls	r2, r3, #5
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	4413      	add	r3, r2
 800d28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d292:	691a      	ldr	r2, [r3, #16]
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	0159      	lsls	r1, r3, #5
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	440b      	add	r3, r1
 800d29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	4b76      	ldr	r3, [pc, #472]	; (800d47c <USB_EP0StartXfer+0x2a8>)
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	695a      	ldr	r2, [r3, #20]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d903      	bls.n	800d2bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	689a      	ldr	r2, [r3, #8]
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	015a      	lsls	r2, r3, #5
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c8:	691b      	ldr	r3, [r3, #16]
 800d2ca:	693a      	ldr	r2, [r7, #16]
 800d2cc:	0151      	lsls	r1, r2, #5
 800d2ce:	697a      	ldr	r2, [r7, #20]
 800d2d0:	440a      	add	r2, r1
 800d2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	015a      	lsls	r2, r3, #5
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e8:	691a      	ldr	r2, [r3, #16]
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	695b      	ldr	r3, [r3, #20]
 800d2ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2f2:	6939      	ldr	r1, [r7, #16]
 800d2f4:	0148      	lsls	r0, r1, #5
 800d2f6:	6979      	ldr	r1, [r7, #20]
 800d2f8:	4401      	add	r1, r0
 800d2fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d2fe:	4313      	orrs	r3, r2
 800d300:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d11e      	bne.n	800d346 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d009      	beq.n	800d324 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	015a      	lsls	r2, r3, #5
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	4413      	add	r3, r2
 800d318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d31c:	461a      	mov	r2, r3
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	015a      	lsls	r2, r3, #5
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	4413      	add	r3, r2
 800d32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	693a      	ldr	r2, [r7, #16]
 800d334:	0151      	lsls	r1, r2, #5
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	440a      	add	r2, r1
 800d33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d33e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d342:	6013      	str	r3, [r2, #0]
 800d344:	e092      	b.n	800d46c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	693a      	ldr	r2, [r7, #16]
 800d356:	0151      	lsls	r1, r2, #5
 800d358:	697a      	ldr	r2, [r7, #20]
 800d35a:	440a      	add	r2, r1
 800d35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d360:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d364:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d07e      	beq.n	800d46c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	f003 030f 	and.w	r3, r3, #15
 800d37e:	2101      	movs	r1, #1
 800d380:	fa01 f303 	lsl.w	r3, r1, r3
 800d384:	6979      	ldr	r1, [r7, #20]
 800d386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d38a:	4313      	orrs	r3, r2
 800d38c:	634b      	str	r3, [r1, #52]	; 0x34
 800d38e:	e06d      	b.n	800d46c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	015a      	lsls	r2, r3, #5
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	4413      	add	r3, r2
 800d398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d39c:	691a      	ldr	r2, [r3, #16]
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	0159      	lsls	r1, r3, #5
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	440b      	add	r3, r1
 800d3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	4b34      	ldr	r3, [pc, #208]	; (800d480 <USB_EP0StartXfer+0x2ac>)
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	015a      	lsls	r2, r3, #5
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3be:	691a      	ldr	r2, [r3, #16]
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	0159      	lsls	r1, r3, #5
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	440b      	add	r3, r1
 800d3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4b2b      	ldr	r3, [pc, #172]	; (800d47c <USB_EP0StartXfer+0x2a8>)
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	689a      	ldr	r2, [r3, #8]
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	0151      	lsls	r1, r2, #5
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	440a      	add	r2, r1
 800d3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d402:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	015a      	lsls	r2, r3, #5
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	4413      	add	r3, r2
 800d40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d410:	691a      	ldr	r2, [r3, #16]
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d41a:	6939      	ldr	r1, [r7, #16]
 800d41c:	0148      	lsls	r0, r1, #5
 800d41e:	6979      	ldr	r1, [r7, #20]
 800d420:	4401      	add	r1, r0
 800d422:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d426:	4313      	orrs	r3, r2
 800d428:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d10d      	bne.n	800d44c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d009      	beq.n	800d44c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	68d9      	ldr	r1, [r3, #12]
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	4413      	add	r3, r2
 800d444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d448:	460a      	mov	r2, r1
 800d44a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	015a      	lsls	r2, r3, #5
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	4413      	add	r3, r2
 800d454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	693a      	ldr	r2, [r7, #16]
 800d45c:	0151      	lsls	r1, r2, #5
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	440a      	add	r2, r1
 800d462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d46a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	371c      	adds	r7, #28
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	e007ffff 	.word	0xe007ffff
 800d480:	fff80000 	.word	0xfff80000

0800d484 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d484:	b480      	push	{r7}
 800d486:	b089      	sub	sp, #36	; 0x24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4611      	mov	r1, r2
 800d490:	461a      	mov	r2, r3
 800d492:	460b      	mov	r3, r1
 800d494:	71fb      	strb	r3, [r7, #7]
 800d496:	4613      	mov	r3, r2
 800d498:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d4a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d11a      	bne.n	800d4e0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d4aa:	88bb      	ldrh	r3, [r7, #4]
 800d4ac:	3303      	adds	r3, #3
 800d4ae:	089b      	lsrs	r3, r3, #2
 800d4b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	61bb      	str	r3, [r7, #24]
 800d4b6:	e00f      	b.n	800d4d8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	031a      	lsls	r2, r3, #12
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	61bb      	str	r3, [r7, #24]
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d3eb      	bcc.n	800d4b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3724      	adds	r7, #36	; 0x24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr

0800d4ee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d4ee:	b480      	push	{r7}
 800d4f0:	b089      	sub	sp, #36	; 0x24
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	60f8      	str	r0, [r7, #12]
 800d4f6:	60b9      	str	r1, [r7, #8]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d504:	88fb      	ldrh	r3, [r7, #6]
 800d506:	3303      	adds	r3, #3
 800d508:	089b      	lsrs	r3, r3, #2
 800d50a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d50c:	2300      	movs	r3, #0
 800d50e:	61bb      	str	r3, [r7, #24]
 800d510:	e00b      	b.n	800d52a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	601a      	str	r2, [r3, #0]
    pDest++;
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	3304      	adds	r3, #4
 800d522:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	3301      	adds	r3, #1
 800d528:	61bb      	str	r3, [r7, #24]
 800d52a:	69ba      	ldr	r2, [r7, #24]
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d3ef      	bcc.n	800d512 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d532:	69fb      	ldr	r3, [r7, #28]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3724      	adds	r7, #36	; 0x24
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	785b      	ldrb	r3, [r3, #1]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d12c      	bne.n	800d5b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	4413      	add	r3, r2
 800d564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	db12      	blt.n	800d594 <USB_EPSetStall+0x54>
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00f      	beq.n	800d594 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	015a      	lsls	r2, r3, #5
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	4413      	add	r3, r2
 800d57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	68ba      	ldr	r2, [r7, #8]
 800d584:	0151      	lsls	r1, r2, #5
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	440a      	add	r2, r1
 800d58a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d58e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d592:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	015a      	lsls	r2, r3, #5
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	4413      	add	r3, r2
 800d59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	0151      	lsls	r1, r2, #5
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	440a      	add	r2, r1
 800d5aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	e02b      	b.n	800d60e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	db12      	blt.n	800d5ee <USB_EPSetStall+0xae>
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00f      	beq.n	800d5ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	015a      	lsls	r2, r3, #5
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	0151      	lsls	r1, r2, #5
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	440a      	add	r2, r1
 800d5e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	015a      	lsls	r2, r3, #5
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	0151      	lsls	r1, r2, #5
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	440a      	add	r2, r1
 800d604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d60c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	785b      	ldrb	r3, [r3, #1]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d128      	bne.n	800d68a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	015a      	lsls	r2, r3, #5
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4413      	add	r3, r2
 800d640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	0151      	lsls	r1, r2, #5
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	440a      	add	r2, r1
 800d64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d656:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	78db      	ldrb	r3, [r3, #3]
 800d65c:	2b03      	cmp	r3, #3
 800d65e:	d003      	beq.n	800d668 <USB_EPClearStall+0x4c>
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	78db      	ldrb	r3, [r3, #3]
 800d664:	2b02      	cmp	r3, #2
 800d666:	d138      	bne.n	800d6da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	015a      	lsls	r2, r3, #5
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	4413      	add	r3, r2
 800d670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	0151      	lsls	r1, r2, #5
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	440a      	add	r2, r1
 800d67e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	e027      	b.n	800d6da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	015a      	lsls	r2, r3, #5
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	4413      	add	r3, r2
 800d692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	0151      	lsls	r1, r2, #5
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	440a      	add	r2, r1
 800d6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	78db      	ldrb	r3, [r3, #3]
 800d6ae:	2b03      	cmp	r3, #3
 800d6b0:	d003      	beq.n	800d6ba <USB_EPClearStall+0x9e>
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	78db      	ldrb	r3, [r3, #3]
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d10f      	bne.n	800d6da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	015a      	lsls	r2, r3, #5
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	0151      	lsls	r1, r2, #5
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	440a      	add	r2, r1
 800d6d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3714      	adds	r7, #20
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d706:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d70a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	78fb      	ldrb	r3, [r7, #3]
 800d716:	011b      	lsls	r3, r3, #4
 800d718:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d71c:	68f9      	ldr	r1, [r7, #12]
 800d71e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d722:	4313      	orrs	r3, r2
 800d724:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d74e:	f023 0302 	bic.w	r3, r3, #2
 800d752:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d754:	2003      	movs	r0, #3
 800d756:	f7f7 fd3d 	bl	80051d4 <HAL_Delay>

  return HAL_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d77e:	f043 0302 	orr.w	r3, r3, #2
 800d782:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d784:	2003      	movs	r0, #3
 800d786:	f7f7 fd25 	bl	80051d4 <HAL_Delay>

  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b085      	sub	sp, #20
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7d6:	69db      	ldr	r3, [r3, #28]
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	4013      	ands	r3, r2
 800d7dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	0c1b      	lsrs	r3, r3, #16
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ee:	b480      	push	{r7}
 800d7f0:	b085      	sub	sp, #20
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d80a:	69db      	ldr	r3, [r3, #28]
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	4013      	ands	r3, r2
 800d810:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	b29b      	uxth	r3, r3
}
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d822:	b480      	push	{r7}
 800d824:	b085      	sub	sp, #20
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	460b      	mov	r3, r1
 800d82c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d832:	78fb      	ldrb	r3, [r7, #3]
 800d834:	015a      	lsls	r2, r3, #5
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4413      	add	r3, r2
 800d83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d848:	695b      	ldr	r3, [r3, #20]
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	4013      	ands	r3, r2
 800d84e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d850:	68bb      	ldr	r3, [r7, #8]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr

0800d85e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d85e:	b480      	push	{r7}
 800d860:	b087      	sub	sp, #28
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	460b      	mov	r3, r1
 800d868:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d880:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d882:	78fb      	ldrb	r3, [r7, #3]
 800d884:	f003 030f 	and.w	r3, r3, #15
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	fa22 f303 	lsr.w	r3, r2, r3
 800d88e:	01db      	lsls	r3, r3, #7
 800d890:	b2db      	uxtb	r3, r3
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	4313      	orrs	r3, r2
 800d896:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d898:	78fb      	ldrb	r3, [r7, #3]
 800d89a:	015a      	lsls	r2, r3, #5
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	4413      	add	r3, r2
 800d8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8ac:	68bb      	ldr	r3, [r7, #8]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	371c      	adds	r7, #28
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr

0800d8ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ba:	b480      	push	{r7}
 800d8bc:	b083      	sub	sp, #12
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	f003 0301 	and.w	r3, r3, #1
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
	...

0800d8d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4b09      	ldr	r3, [pc, #36]	; (800d91c <USB_ActivateSetup+0x44>)
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d90c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	fffff800 	.word	0xfffff800

0800d920 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	460b      	mov	r3, r1
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	333c      	adds	r3, #60	; 0x3c
 800d936:	3304      	adds	r3, #4
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	4a26      	ldr	r2, [pc, #152]	; (800d9d8 <USB_EP0_OutStart+0xb8>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d90a      	bls.n	800d95a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d954:	d101      	bne.n	800d95a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	e037      	b.n	800d9ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d960:	461a      	mov	r2, r3
 800d962:	2300      	movs	r3, #0
 800d964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	697a      	ldr	r2, [r7, #20]
 800d970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	697a      	ldr	r2, [r7, #20]
 800d984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d988:	f043 0318 	orr.w	r3, r3, #24
 800d98c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d99c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d9a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d9a2:	7afb      	ldrb	r3, [r7, #11]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d10f      	bne.n	800d9c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d9c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	371c      	adds	r7, #28
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	4f54300a 	.word	0x4f54300a

0800d9dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	4a13      	ldr	r2, [pc, #76]	; (800da40 <USB_CoreReset+0x64>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d901      	bls.n	800d9fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d9f6:	2303      	movs	r3, #3
 800d9f8:	e01b      	b.n	800da32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	691b      	ldr	r3, [r3, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	daf2      	bge.n	800d9e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da02:	2300      	movs	r3, #0
 800da04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	f043 0201 	orr.w	r2, r3, #1
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	3301      	adds	r3, #1
 800da16:	60fb      	str	r3, [r7, #12]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	4a09      	ldr	r2, [pc, #36]	; (800da40 <USB_CoreReset+0x64>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d901      	bls.n	800da24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da20:	2303      	movs	r3, #3
 800da22:	e006      	b.n	800da32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d0f0      	beq.n	800da12 <USB_CoreReset+0x36>

  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	00030d40 	.word	0x00030d40

0800da44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800da44:	b580      	push	{r7, lr}
 800da46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800da48:	4904      	ldr	r1, [pc, #16]	; (800da5c <MX_FATFS_Init+0x18>)
 800da4a:	4805      	ldr	r0, [pc, #20]	; (800da60 <MX_FATFS_Init+0x1c>)
 800da4c:	f004 fd5e 	bl	801250c <FATFS_LinkDriver>
 800da50:	4603      	mov	r3, r0
 800da52:	461a      	mov	r2, r3
 800da54:	4b03      	ldr	r3, [pc, #12]	; (800da64 <MX_FATFS_Init+0x20>)
 800da56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800da58:	bf00      	nop
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	2001527c 	.word	0x2001527c
 800da60:	0801a430 	.word	0x0801a430
 800da64:	20015278 	.word	0x20015278

0800da68 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800da68:	b480      	push	{r7}
 800da6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800da6c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800da6e:	4618      	mov	r0, r3
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800da82:	f000 f896 	bl	800dbb2 <BSP_SD_IsDetected>
 800da86:	4603      	mov	r3, r0
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d001      	beq.n	800da90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800da8c:	2302      	movs	r3, #2
 800da8e:	e012      	b.n	800dab6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800da90:	480b      	ldr	r0, [pc, #44]	; (800dac0 <BSP_SD_Init+0x48>)
 800da92:	f7fa fc67 	bl	8008364 <HAL_SD_Init>
 800da96:	4603      	mov	r3, r0
 800da98:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d109      	bne.n	800dab4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800daa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800daa4:	4806      	ldr	r0, [pc, #24]	; (800dac0 <BSP_SD_Init+0x48>)
 800daa6:	f7fb fa1f 	bl	8008ee8 <HAL_SD_ConfigWideBusOperation>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800dab4:	79fb      	ldrb	r3, [r7, #7]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	200089c8 	.word	0x200089c8

0800dac4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	68f9      	ldr	r1, [r7, #12]
 800dada:	4806      	ldr	r0, [pc, #24]	; (800daf4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dadc:	f7fa fcda 	bl	8008494 <HAL_SD_ReadBlocks_DMA>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d001      	beq.n	800daea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dae6:	2301      	movs	r3, #1
 800dae8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800daea:	7dfb      	ldrb	r3, [r7, #23]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3718      	adds	r7, #24
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	200089c8 	.word	0x200089c8

0800daf8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	68f9      	ldr	r1, [r7, #12]
 800db0e:	4806      	ldr	r0, [pc, #24]	; (800db28 <BSP_SD_WriteBlocks_DMA+0x30>)
 800db10:	f7fa fdac 	bl	800866c <HAL_SD_WriteBlocks_DMA>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	200089c8 	.word	0x200089c8

0800db2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800db30:	4805      	ldr	r0, [pc, #20]	; (800db48 <BSP_SD_GetCardState+0x1c>)
 800db32:	f7fb fa55 	bl	8008fe0 <HAL_SD_GetCardState>
 800db36:	4603      	mov	r3, r0
 800db38:	2b04      	cmp	r3, #4
 800db3a:	bf14      	ite	ne
 800db3c:	2301      	movne	r3, #1
 800db3e:	2300      	moveq	r3, #0
 800db40:	b2db      	uxtb	r3, r3
}
 800db42:	4618      	mov	r0, r3
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	200089c8 	.word	0x200089c8

0800db4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800db54:	6879      	ldr	r1, [r7, #4]
 800db56:	4803      	ldr	r0, [pc, #12]	; (800db64 <BSP_SD_GetCardInfo+0x18>)
 800db58:	f7fb f99a 	bl	8008e90 <HAL_SD_GetCardInfo>
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	200089c8 	.word	0x200089c8

0800db68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800db70:	f000 f818 	bl	800dba4 <BSP_SD_AbortCallback>
}
 800db74:	bf00      	nop
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800db84:	f000 f998 	bl	800deb8 <BSP_SD_WriteCpltCallback>
}
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800db98:	f000 f9a0 	bl	800dedc <BSP_SD_ReadCpltCallback>
}
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dba4:	b480      	push	{r7}
 800dba6:	af00      	add	r7, sp, #0

}
 800dba8:	bf00      	nop
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b083      	sub	sp, #12
 800dbb6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800dbbc:	79fb      	ldrb	r3, [r7, #7]
 800dbbe:	b2db      	uxtb	r3, r3
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800dbd4:	f004 fd84 	bl	80126e0 <osKernelGetTickCount>
 800dbd8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800dbda:	e006      	b.n	800dbea <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dbdc:	f7ff ffa6 	bl	800db2c <BSP_SD_GetCardState>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e009      	b.n	800dbfe <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800dbea:	f004 fd79 	bl	80126e0 <osKernelGetTickCount>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d8f0      	bhi.n	800dbdc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dbfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dc12:	4b0b      	ldr	r3, [pc, #44]	; (800dc40 <SD_CheckStatus+0x38>)
 800dc14:	2201      	movs	r2, #1
 800dc16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc18:	f7ff ff88 	bl	800db2c <BSP_SD_GetCardState>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d107      	bne.n	800dc32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dc22:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <SD_CheckStatus+0x38>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	f023 0301 	bic.w	r3, r3, #1
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	4b04      	ldr	r3, [pc, #16]	; (800dc40 <SD_CheckStatus+0x38>)
 800dc30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dc32:	4b03      	ldr	r3, [pc, #12]	; (800dc40 <SD_CheckStatus+0x38>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	b2db      	uxtb	r3, r3
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	20000009 	.word	0x20000009

0800dc44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800dc4e:	4b1c      	ldr	r3, [pc, #112]	; (800dcc0 <SD_initialize+0x7c>)
 800dc50:	2201      	movs	r2, #1
 800dc52:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800dc54:	f004 fcec 	bl	8012630 <osKernelGetState>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	d129      	bne.n	800dcb2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dc5e:	f7ff ff0b 	bl	800da78 <BSP_SD_Init>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d107      	bne.n	800dc78 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff ffcc 	bl	800dc08 <SD_CheckStatus>
 800dc70:	4603      	mov	r3, r0
 800dc72:	461a      	mov	r2, r3
 800dc74:	4b12      	ldr	r3, [pc, #72]	; (800dcc0 <SD_initialize+0x7c>)
 800dc76:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dc78:	4b11      	ldr	r3, [pc, #68]	; (800dcc0 <SD_initialize+0x7c>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d017      	beq.n	800dcb2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800dc82:	4b10      	ldr	r3, [pc, #64]	; (800dcc4 <SD_initialize+0x80>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d107      	bne.n	800dc9a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	2102      	movs	r1, #2
 800dc8e:	200a      	movs	r0, #10
 800dc90:	f005 f976 	bl	8012f80 <osMessageQueueNew>
 800dc94:	4602      	mov	r2, r0
 800dc96:	4b0b      	ldr	r3, [pc, #44]	; (800dcc4 <SD_initialize+0x80>)
 800dc98:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800dc9a:	4b0a      	ldr	r3, [pc, #40]	; (800dcc4 <SD_initialize+0x80>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d107      	bne.n	800dcb2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800dca2:	4b07      	ldr	r3, [pc, #28]	; (800dcc0 <SD_initialize+0x7c>)
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	f043 0301 	orr.w	r3, r3, #1
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <SD_initialize+0x7c>)
 800dcb0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800dcb2:	4b03      	ldr	r3, [pc, #12]	; (800dcc0 <SD_initialize+0x7c>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	b2db      	uxtb	r3, r3
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	20000009 	.word	0x20000009
 800dcc4:	2000032c 	.word	0x2000032c

0800dcc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dcd2:	79fb      	ldrb	r3, [r7, #7]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff ff97 	bl	800dc08 <SD_CheckStatus>
 800dcda:	4603      	mov	r3, r0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60b9      	str	r1, [r7, #8]
 800dcec:	607a      	str	r2, [r7, #4]
 800dcee:	603b      	str	r3, [r7, #0]
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dcf8:	f247 5030 	movw	r0, #30000	; 0x7530
 800dcfc:	f7ff ff66 	bl	800dbcc <SD_CheckStatusWithTimeout>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	da01      	bge.n	800dd0a <SD_read+0x26>
  {
    return res;
 800dd06:	7ffb      	ldrb	r3, [r7, #31]
 800dd08:	e02f      	b.n	800dd6a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	68b8      	ldr	r0, [r7, #8]
 800dd10:	f7ff fed8 	bl	800dac4 <BSP_SD_ReadBlocks_DMA>
 800dd14:	4603      	mov	r3, r0
 800dd16:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800dd18:	7fbb      	ldrb	r3, [r7, #30]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d124      	bne.n	800dd68 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800dd1e:	4b15      	ldr	r3, [pc, #84]	; (800dd74 <SD_read+0x90>)
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	f107 0112 	add.w	r1, r7, #18
 800dd26:	f247 5330 	movw	r3, #30000	; 0x7530
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f005 fa22 	bl	8013174 <osMessageQueueGet>
 800dd30:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d117      	bne.n	800dd68 <SD_read+0x84>
 800dd38:	8a7b      	ldrh	r3, [r7, #18]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d114      	bne.n	800dd68 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800dd3e:	f004 fccf 	bl	80126e0 <osKernelGetTickCount>
 800dd42:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800dd44:	e007      	b.n	800dd56 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd46:	f7ff fef1 	bl	800db2c <BSP_SD_GetCardState>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d102      	bne.n	800dd56 <SD_read+0x72>
              {
                res = RES_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800dd54:	e008      	b.n	800dd68 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800dd56:	f004 fcc3 	bl	80126e0 <osKernelGetTickCount>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	f247 522f 	movw	r2, #29999	; 0x752f
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d9ee      	bls.n	800dd46 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800dd68:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3720      	adds	r7, #32
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	2000032c 	.word	0x2000032c

0800dd78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60b9      	str	r1, [r7, #8]
 800dd80:	607a      	str	r2, [r7, #4]
 800dd82:	603b      	str	r3, [r7, #0]
 800dd84:	4603      	mov	r3, r0
 800dd86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd8c:	f247 5030 	movw	r0, #30000	; 0x7530
 800dd90:	f7ff ff1c 	bl	800dbcc <SD_CheckStatusWithTimeout>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	da01      	bge.n	800dd9e <SD_write+0x26>
  {
    return res;
 800dd9a:	7ffb      	ldrb	r3, [r7, #31]
 800dd9c:	e02d      	b.n	800ddfa <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	6879      	ldr	r1, [r7, #4]
 800dda2:	68b8      	ldr	r0, [r7, #8]
 800dda4:	f7ff fea8 	bl	800daf8 <BSP_SD_WriteBlocks_DMA>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d124      	bne.n	800ddf8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ddae:	4b15      	ldr	r3, [pc, #84]	; (800de04 <SD_write+0x8c>)
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f107 0112 	add.w	r1, r7, #18
 800ddb6:	f247 5330 	movw	r3, #30000	; 0x7530
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f005 f9da 	bl	8013174 <osMessageQueueGet>
 800ddc0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d117      	bne.n	800ddf8 <SD_write+0x80>
 800ddc8:	8a7b      	ldrh	r3, [r7, #18]
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	d114      	bne.n	800ddf8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800ddce:	f004 fc87 	bl	80126e0 <osKernelGetTickCount>
 800ddd2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ddd4:	e007      	b.n	800dde6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ddd6:	f7ff fea9 	bl	800db2c <BSP_SD_GetCardState>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d102      	bne.n	800dde6 <SD_write+0x6e>
          {
            res = RES_OK;
 800dde0:	2300      	movs	r3, #0
 800dde2:	77fb      	strb	r3, [r7, #31]
            break;
 800dde4:	e008      	b.n	800ddf8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800dde6:	f004 fc7b 	bl	80126e0 <osKernelGetTickCount>
 800ddea:	4602      	mov	r2, r0
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	f247 522f 	movw	r2, #29999	; 0x752f
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d9ee      	bls.n	800ddd6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800ddf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3720      	adds	r7, #32
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	2000032c 	.word	0x2000032c

0800de08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08c      	sub	sp, #48	; 0x30
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	603a      	str	r2, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
 800de14:	460b      	mov	r3, r1
 800de16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de18:	2301      	movs	r3, #1
 800de1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de1e:	4b25      	ldr	r3, [pc, #148]	; (800deb4 <SD_ioctl+0xac>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	b2db      	uxtb	r3, r3
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d001      	beq.n	800de30 <SD_ioctl+0x28>
 800de2c:	2303      	movs	r3, #3
 800de2e:	e03c      	b.n	800deaa <SD_ioctl+0xa2>

  switch (cmd)
 800de30:	79bb      	ldrb	r3, [r7, #6]
 800de32:	2b03      	cmp	r3, #3
 800de34:	d834      	bhi.n	800dea0 <SD_ioctl+0x98>
 800de36:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <SD_ioctl+0x34>)
 800de38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3c:	0800de4d 	.word	0x0800de4d
 800de40:	0800de55 	.word	0x0800de55
 800de44:	0800de6d 	.word	0x0800de6d
 800de48:	0800de87 	.word	0x0800de87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de52:	e028      	b.n	800dea6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800de54:	f107 030c 	add.w	r3, r7, #12
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fe77 	bl	800db4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de6a:	e01c      	b.n	800dea6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de6c:	f107 030c 	add.w	r3, r7, #12
 800de70:	4618      	mov	r0, r3
 800de72:	f7ff fe6b 	bl	800db4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de78:	b29a      	uxth	r2, r3
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de84:	e00f      	b.n	800dea6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de86:	f107 030c 	add.w	r3, r7, #12
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff fe5e 	bl	800db4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	0a5a      	lsrs	r2, r3, #9
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800de9e:	e002      	b.n	800dea6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dea0:	2304      	movs	r3, #4
 800dea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3730      	adds	r7, #48	; 0x30
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	20000009 	.word	0x20000009

0800deb8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800debe:	2302      	movs	r3, #2
 800dec0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <BSP_SD_WriteCpltCallback+0x20>)
 800dec4:	6818      	ldr	r0, [r3, #0]
 800dec6:	1db9      	adds	r1, r7, #6
 800dec8:	2300      	movs	r3, #0
 800deca:	2200      	movs	r2, #0
 800decc:	f005 f8de 	bl	801308c <osMessageQueuePut>
#endif
}
 800ded0:	bf00      	nop
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	2000032c 	.word	0x2000032c

0800dedc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800dee2:	2301      	movs	r3, #1
 800dee4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800dee6:	4b05      	ldr	r3, [pc, #20]	; (800defc <BSP_SD_ReadCpltCallback+0x20>)
 800dee8:	6818      	ldr	r0, [r3, #0]
 800deea:	1db9      	adds	r1, r7, #6
 800deec:	2300      	movs	r3, #0
 800deee:	2200      	movs	r2, #0
 800def0:	f005 f8cc 	bl	801308c <osMessageQueuePut>
#endif
}
 800def4:	bf00      	nop
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	2000032c 	.word	0x2000032c

0800df00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800df10:	f009 f908 	bl	8017124 <malloc>
 800df14:	4603      	mov	r3, r0
 800df16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d105      	bne.n	800df2a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800df26:	2302      	movs	r3, #2
 800df28:	e066      	b.n	800dff8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7c1b      	ldrb	r3, [r3, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d119      	bne.n	800df6e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df3e:	2202      	movs	r2, #2
 800df40:	2181      	movs	r1, #129	; 0x81
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f008 ff21 	bl	8016d8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df52:	2202      	movs	r2, #2
 800df54:	2101      	movs	r1, #1
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f008 ff17 	bl	8016d8a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2201      	movs	r2, #1
 800df60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2210      	movs	r2, #16
 800df68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800df6c:	e016      	b.n	800df9c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df6e:	2340      	movs	r3, #64	; 0x40
 800df70:	2202      	movs	r2, #2
 800df72:	2181      	movs	r1, #129	; 0x81
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f008 ff08 	bl	8016d8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2201      	movs	r2, #1
 800df7e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df80:	2340      	movs	r3, #64	; 0x40
 800df82:	2202      	movs	r2, #2
 800df84:	2101      	movs	r1, #1
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f008 feff 	bl	8016d8a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2201      	movs	r2, #1
 800df90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2210      	movs	r2, #16
 800df98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df9c:	2308      	movs	r3, #8
 800df9e:	2203      	movs	r2, #3
 800dfa0:	2182      	movs	r1, #130	; 0x82
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f008 fef1 	bl	8016d8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	7c1b      	ldrb	r3, [r3, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d109      	bne.n	800dfe6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfdc:	2101      	movs	r1, #1
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f008 ffc2 	bl	8016f68 <USBD_LL_PrepareReceive>
 800dfe4:	e007      	b.n	800dff6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfec:	2340      	movs	r3, #64	; 0x40
 800dfee:	2101      	movs	r1, #1
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f008 ffb9 	bl	8016f68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	460b      	mov	r3, r1
 800e00a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e00c:	2300      	movs	r3, #0
 800e00e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e010:	2181      	movs	r1, #129	; 0x81
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f008 fedf 	bl	8016dd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e01e:	2101      	movs	r1, #1
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f008 fed8 	bl	8016dd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e02e:	2182      	movs	r1, #130	; 0x82
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f008 fed0 	bl	8016dd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00e      	beq.n	800e06e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e060:	4618      	mov	r0, r3
 800e062:	f009 f867 	bl	8017134 <free>
    pdev->pClassData = NULL;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e088:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e08e:	2300      	movs	r3, #0
 800e090:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e092:	2300      	movs	r3, #0
 800e094:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d03a      	beq.n	800e118 <USBD_CDC_Setup+0xa0>
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	f040 8097 	bne.w	800e1d6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	88db      	ldrh	r3, [r3, #6]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d029      	beq.n	800e104 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	da11      	bge.n	800e0de <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e0c6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	88d2      	ldrh	r2, [r2, #6]
 800e0cc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e0ce:	6939      	ldr	r1, [r7, #16]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	88db      	ldrh	r3, [r3, #6]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f001 fa97 	bl	800f60a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e0dc:	e082      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	785a      	ldrb	r2, [r3, #1]
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	88db      	ldrh	r3, [r3, #6]
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e0f4:	6939      	ldr	r1, [r7, #16]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	88db      	ldrh	r3, [r3, #6]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f001 fab0 	bl	800f662 <USBD_CtlPrepareRx>
    break;
 800e102:	e06f      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	7850      	ldrb	r0, [r2, #1]
 800e110:	2200      	movs	r2, #0
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	4798      	blx	r3
    break;
 800e116:	e065      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	2b0b      	cmp	r3, #11
 800e11e:	d84f      	bhi.n	800e1c0 <USBD_CDC_Setup+0x148>
 800e120:	a201      	add	r2, pc, #4	; (adr r2, 800e128 <USBD_CDC_Setup+0xb0>)
 800e122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e126:	bf00      	nop
 800e128:	0800e159 	.word	0x0800e159
 800e12c:	0800e1cf 	.word	0x0800e1cf
 800e130:	0800e1c1 	.word	0x0800e1c1
 800e134:	0800e1c1 	.word	0x0800e1c1
 800e138:	0800e1c1 	.word	0x0800e1c1
 800e13c:	0800e1c1 	.word	0x0800e1c1
 800e140:	0800e1c1 	.word	0x0800e1c1
 800e144:	0800e1c1 	.word	0x0800e1c1
 800e148:	0800e1c1 	.word	0x0800e1c1
 800e14c:	0800e1c1 	.word	0x0800e1c1
 800e150:	0800e181 	.word	0x0800e181
 800e154:	0800e1a9 	.word	0x0800e1a9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d107      	bne.n	800e172 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e162:	f107 030c 	add.w	r3, r7, #12
 800e166:	2202      	movs	r2, #2
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f001 fa4d 	bl	800f60a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e170:	e030      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f001 f9d7 	bl	800f528 <USBD_CtlError>
        ret = USBD_FAIL;
 800e17a:	2303      	movs	r3, #3
 800e17c:	75fb      	strb	r3, [r7, #23]
      break;
 800e17e:	e029      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e186:	2b03      	cmp	r3, #3
 800e188:	d107      	bne.n	800e19a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e18a:	f107 030f 	add.w	r3, r7, #15
 800e18e:	2201      	movs	r2, #1
 800e190:	4619      	mov	r1, r3
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f001 fa39 	bl	800f60a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e198:	e01c      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f001 f9c3 	bl	800f528 <USBD_CtlError>
        ret = USBD_FAIL;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a6:	e015      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d00f      	beq.n	800e1d2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 f9b7 	bl	800f528 <USBD_CtlError>
        ret = USBD_FAIL;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e1be:	e008      	b.n	800e1d2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e1c0:	6839      	ldr	r1, [r7, #0]
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f001 f9b0 	bl	800f528 <USBD_CtlError>
      ret = USBD_FAIL;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	75fb      	strb	r3, [r7, #23]
      break;
 800e1cc:	e002      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>
      break;
 800e1ce:	bf00      	nop
 800e1d0:	e008      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>
      break;
 800e1d2:	bf00      	nop
    }
    break;
 800e1d4:	e006      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f001 f9a5 	bl	800f528 <USBD_CtlError>
    ret = USBD_FAIL;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	75fb      	strb	r3, [r7, #23]
    break;
 800e1e2:	bf00      	nop
  }

  return (uint8_t)ret;
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3718      	adds	r7, #24
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop

0800e1f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e202:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e20e:	2303      	movs	r3, #3
 800e210:	e049      	b.n	800e2a6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e218:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e21a:	78fa      	ldrb	r2, [r7, #3]
 800e21c:	6879      	ldr	r1, [r7, #4]
 800e21e:	4613      	mov	r3, r2
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	4413      	add	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	440b      	add	r3, r1
 800e228:	3318      	adds	r3, #24
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d029      	beq.n	800e284 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e230:	78fa      	ldrb	r2, [r7, #3]
 800e232:	6879      	ldr	r1, [r7, #4]
 800e234:	4613      	mov	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	440b      	add	r3, r1
 800e23e:	3318      	adds	r3, #24
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	78f9      	ldrb	r1, [r7, #3]
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	460b      	mov	r3, r1
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	1a5b      	subs	r3, r3, r1
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4403      	add	r3, r0
 800e250:	3344      	adds	r3, #68	; 0x44
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	fbb2 f1f3 	udiv	r1, r2, r3
 800e258:	fb03 f301 	mul.w	r3, r3, r1
 800e25c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d110      	bne.n	800e284 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e262:	78fa      	ldrb	r2, [r7, #3]
 800e264:	6879      	ldr	r1, [r7, #4]
 800e266:	4613      	mov	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	440b      	add	r3, r1
 800e270:	3318      	adds	r3, #24
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e276:	78f9      	ldrb	r1, [r7, #3]
 800e278:	2300      	movs	r3, #0
 800e27a:	2200      	movs	r2, #0
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f008 fe52 	bl	8016f26 <USBD_LL_Transmit>
 800e282:	e00f      	b.n	800e2a4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2200      	movs	r2, #0
 800e288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e2a0:	78fa      	ldrb	r2, [r7, #3]
 800e2a2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b084      	sub	sp, #16
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d101      	bne.n	800e2d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2cc:	2303      	movs	r3, #3
 800e2ce:	e015      	b.n	800e2fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f008 fe68 	bl	8016faa <USBD_LL_GetRxDataSize>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e312:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d015      	beq.n	800e34a <USBD_CDC_EP0_RxReady+0x46>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e324:	2bff      	cmp	r3, #255	; 0xff
 800e326:	d010      	beq.n	800e34a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e336:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e33e:	b292      	uxth	r2, r2
 800e340:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	22ff      	movs	r2, #255	; 0xff
 800e346:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2243      	movs	r2, #67	; 0x43
 800e360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e362:	4b03      	ldr	r3, [pc, #12]	; (800e370 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e364:	4618      	mov	r0, r3
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	20000094 	.word	0x20000094

0800e374 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2243      	movs	r2, #67	; 0x43
 800e380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e382:	4b03      	ldr	r3, [pc, #12]	; (800e390 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e384:	4618      	mov	r0, r3
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	20000050 	.word	0x20000050

0800e394 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2243      	movs	r2, #67	; 0x43
 800e3a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e3a2:	4b03      	ldr	r3, [pc, #12]	; (800e3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	200000d8 	.word	0x200000d8

0800e3b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	220a      	movs	r2, #10
 800e3c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e3c2:	4b03      	ldr	r3, [pc, #12]	; (800e3d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	2000000c 	.word	0x2000000c

0800e3d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d101      	bne.n	800e3e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	e004      	b.n	800e3f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	683a      	ldr	r2, [r7, #0]
 800e3ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e3fe:	b480      	push	{r7}
 800e400:	b087      	sub	sp, #28
 800e402:	af00      	add	r7, sp, #0
 800e404:	60f8      	str	r0, [r7, #12]
 800e406:	60b9      	str	r1, [r7, #8]
 800e408:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e410:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e422:	2300      	movs	r3, #0
}
 800e424:	4618      	mov	r0, r3
 800e426:	371c      	adds	r7, #28
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e440:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e466:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e472:	2303      	movs	r3, #3
 800e474:	e016      	b.n	800e4a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	7c1b      	ldrb	r3, [r3, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d109      	bne.n	800e492 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e484:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e488:	2101      	movs	r1, #1
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f008 fd6c 	bl	8016f68 <USBD_LL_PrepareReceive>
 800e490:	e007      	b.n	800e4a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e498:	2340      	movs	r3, #64	; 0x40
 800e49a:	2101      	movs	r1, #1
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f008 fd63 	bl	8016f68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e4a2:	2300      	movs	r3, #0
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b086      	sub	sp, #24
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d101      	bne.n	800e4c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	e025      	b.n	800e510 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d003      	beq.n	800e4e8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d003      	beq.n	800e4f6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	79fa      	ldrb	r2, [r7, #7]
 800e502:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f008 fbd9 	bl	8016cbc <USBD_LL_Init>
 800e50a:	4603      	mov	r3, r0
 800e50c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3718      	adds	r7, #24
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e522:	2300      	movs	r3, #0
 800e524:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d101      	bne.n	800e530 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e52c:	2303      	movs	r3, #3
 800e52e:	e010      	b.n	800e552 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e540:	f107 020e 	add.w	r2, r7, #14
 800e544:	4610      	mov	r0, r2
 800e546:	4798      	blx	r3
 800e548:	4602      	mov	r2, r0
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f008 fbf6 	bl	8016d54 <USBD_LL_Start>
 800e568:	4603      	mov	r3, r0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e572:	b480      	push	{r7}
 800e574:	b083      	sub	sp, #12
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	460b      	mov	r3, r1
 800e592:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e594:	2303      	movs	r3, #3
 800e596:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	78fa      	ldrb	r2, [r7, #3]
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	4798      	blx	r3
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d007      	beq.n	800e5e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	78fa      	ldrb	r2, [r7, #3]
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	4798      	blx	r3
  }

  return USBD_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	4618      	mov	r0, r3
 800e604:	f000 ff56 	bl	800f4b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e616:	461a      	mov	r2, r3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e624:	f003 031f 	and.w	r3, r3, #31
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d00e      	beq.n	800e64a <USBD_LL_SetupStage+0x5a>
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d302      	bcc.n	800e636 <USBD_LL_SetupStage+0x46>
 800e630:	2b02      	cmp	r3, #2
 800e632:	d014      	beq.n	800e65e <USBD_LL_SetupStage+0x6e>
 800e634:	e01d      	b.n	800e672 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e63c:	4619      	mov	r1, r3
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 fa18 	bl	800ea74 <USBD_StdDevReq>
 800e644:	4603      	mov	r3, r0
 800e646:	73fb      	strb	r3, [r7, #15]
      break;
 800e648:	e020      	b.n	800e68c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e650:	4619      	mov	r1, r3
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fa7c 	bl	800eb50 <USBD_StdItfReq>
 800e658:	4603      	mov	r3, r0
 800e65a:	73fb      	strb	r3, [r7, #15]
      break;
 800e65c:	e016      	b.n	800e68c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e664:	4619      	mov	r1, r3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 fab8 	bl	800ebdc <USBD_StdEPReq>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]
      break;
 800e670:	e00c      	b.n	800e68c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	4619      	mov	r1, r3
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f008 fbc7 	bl	8016e14 <USBD_LL_StallEP>
 800e686:	4603      	mov	r3, r0
 800e688:	73fb      	strb	r3, [r7, #15]
      break;
 800e68a:	bf00      	nop
  }

  return ret;
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b086      	sub	sp, #24
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	60f8      	str	r0, [r7, #12]
 800e69e:	460b      	mov	r3, r1
 800e6a0:	607a      	str	r2, [r7, #4]
 800e6a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e6a4:	7afb      	ldrb	r3, [r7, #11]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d137      	bne.n	800e71a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e6b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6b8:	2b03      	cmp	r3, #3
 800e6ba:	d14a      	bne.n	800e752 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	689a      	ldr	r2, [r3, #8]
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d913      	bls.n	800e6f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	689a      	ldr	r2, [r3, #8]
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	1ad2      	subs	r2, r2, r3
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	68da      	ldr	r2, [r3, #12]
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	bf28      	it	cs
 800e6e2:	4613      	movcs	r3, r2
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f000 ffd7 	bl	800f69c <USBD_CtlContinueRx>
 800e6ee:	e030      	b.n	800e752 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00a      	beq.n	800e712 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e702:	2b03      	cmp	r3, #3
 800e704:	d105      	bne.n	800e712 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f000 ffd3 	bl	800f6be <USBD_CtlSendStatus>
 800e718:	e01b      	b.n	800e752 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e720:	699b      	ldr	r3, [r3, #24]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d013      	beq.n	800e74e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e72c:	2b03      	cmp	r3, #3
 800e72e:	d10e      	bne.n	800e74e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e736:	699b      	ldr	r3, [r3, #24]
 800e738:	7afa      	ldrb	r2, [r7, #11]
 800e73a:	4611      	mov	r1, r2
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	4798      	blx	r3
 800e740:	4603      	mov	r3, r0
 800e742:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e744:	7dfb      	ldrb	r3, [r7, #23]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e74a:	7dfb      	ldrb	r3, [r7, #23]
 800e74c:	e002      	b.n	800e754 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e74e:	2303      	movs	r3, #3
 800e750:	e000      	b.n	800e754 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	460b      	mov	r3, r1
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e76a:	7afb      	ldrb	r3, [r7, #11]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d16a      	bne.n	800e846 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	3314      	adds	r3, #20
 800e774:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d155      	bne.n	800e82c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	689a      	ldr	r2, [r3, #8]
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d914      	bls.n	800e7b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	689a      	ldr	r2, [r3, #8]
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	1ad2      	subs	r2, r2, r3
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f000 ff4c 	bl	800f640 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f008 fbda 	bl	8016f68 <USBD_LL_PrepareReceive>
 800e7b4:	e03a      	b.n	800e82c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	68da      	ldr	r2, [r3, #12]
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d11c      	bne.n	800e7fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	685a      	ldr	r2, [r3, #4]
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d316      	bcc.n	800e7fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d20f      	bcs.n	800e7fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e7dc:	2200      	movs	r2, #0
 800e7de:	2100      	movs	r1, #0
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f000 ff2d 	bl	800f640 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f008 fbb7 	bl	8016f68 <USBD_LL_PrepareReceive>
 800e7fa:	e017      	b.n	800e82c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00a      	beq.n	800e81e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e80e:	2b03      	cmp	r3, #3
 800e810:	d105      	bne.n	800e81e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e81e:	2180      	movs	r1, #128	; 0x80
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f008 faf7 	bl	8016e14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f000 ff5c 	bl	800f6e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e832:	2b01      	cmp	r3, #1
 800e834:	d123      	bne.n	800e87e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7ff fe9b 	bl	800e572 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e844:	e01b      	b.n	800e87e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e84c:	695b      	ldr	r3, [r3, #20]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d013      	beq.n	800e87a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d10e      	bne.n	800e87a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e862:	695b      	ldr	r3, [r3, #20]
 800e864:	7afa      	ldrb	r2, [r7, #11]
 800e866:	4611      	mov	r1, r2
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	4798      	blx	r3
 800e86c:	4603      	mov	r3, r0
 800e86e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e870:	7dfb      	ldrb	r3, [r7, #23]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d003      	beq.n	800e87e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e876:	7dfb      	ldrb	r3, [r7, #23]
 800e878:	e002      	b.n	800e880 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e87a:	2303      	movs	r3, #3
 800e87c:	e000      	b.n	800e880 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e87e:	2300      	movs	r3, #0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3718      	adds	r7, #24
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d009      	beq.n	800e8cc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	6852      	ldr	r2, [r2, #4]
 800e8c4:	b2d2      	uxtb	r2, r2
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8cc:	2340      	movs	r3, #64	; 0x40
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f008 fa59 	bl	8016d8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2240      	movs	r2, #64	; 0x40
 800e8e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8e8:	2340      	movs	r3, #64	; 0x40
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	2180      	movs	r1, #128	; 0x80
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f008 fa4b 	bl	8016d8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2240      	movs	r2, #64	; 0x40
 800e8fe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	460b      	mov	r3, r1
 800e914:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	78fa      	ldrb	r2, [r7, #3]
 800e91a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	370c      	adds	r7, #12
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr

0800e92a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e92a:	b480      	push	{r7}
 800e92c:	b083      	sub	sp, #12
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2204      	movs	r2, #4
 800e942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e962:	2b04      	cmp	r3, #4
 800e964:	d105      	bne.n	800e972 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e98e:	2b03      	cmp	r3, #3
 800e990:	d10b      	bne.n	800e9aa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d005      	beq.n	800e9aa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9a4:	69db      	ldr	r3, [r3, #28]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	370c      	adds	r7, #12
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr

0800e9ce <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	b083      	sub	sp, #12
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	370c      	adds	r7, #12
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b082      	sub	sp, #8
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d009      	beq.n	800ea2c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	6852      	ldr	r2, [r2, #4]
 800ea24:	b2d2      	uxtb	r2, r2
 800ea26:	4611      	mov	r1, r2
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	4798      	blx	r3
  }

  return USBD_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b087      	sub	sp, #28
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ea54:	8a3b      	ldrh	r3, [r7, #16]
 800ea56:	021b      	lsls	r3, r3, #8
 800ea58:	b21a      	sxth	r2, r3
 800ea5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	b21b      	sxth	r3, r3
 800ea62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ea64:	89fb      	ldrh	r3, [r7, #14]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	371c      	adds	r7, #28
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
	...

0800ea74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea8a:	2b20      	cmp	r3, #32
 800ea8c:	d004      	beq.n	800ea98 <USBD_StdDevReq+0x24>
 800ea8e:	2b40      	cmp	r3, #64	; 0x40
 800ea90:	d002      	beq.n	800ea98 <USBD_StdDevReq+0x24>
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00a      	beq.n	800eaac <USBD_StdDevReq+0x38>
 800ea96:	e050      	b.n	800eb3a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	4798      	blx	r3
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	73fb      	strb	r3, [r7, #15]
    break;
 800eaaa:	e04b      	b.n	800eb44 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	785b      	ldrb	r3, [r3, #1]
 800eab0:	2b09      	cmp	r3, #9
 800eab2:	d83c      	bhi.n	800eb2e <USBD_StdDevReq+0xba>
 800eab4:	a201      	add	r2, pc, #4	; (adr r2, 800eabc <USBD_StdDevReq+0x48>)
 800eab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaba:	bf00      	nop
 800eabc:	0800eb11 	.word	0x0800eb11
 800eac0:	0800eb25 	.word	0x0800eb25
 800eac4:	0800eb2f 	.word	0x0800eb2f
 800eac8:	0800eb1b 	.word	0x0800eb1b
 800eacc:	0800eb2f 	.word	0x0800eb2f
 800ead0:	0800eaef 	.word	0x0800eaef
 800ead4:	0800eae5 	.word	0x0800eae5
 800ead8:	0800eb2f 	.word	0x0800eb2f
 800eadc:	0800eb07 	.word	0x0800eb07
 800eae0:	0800eaf9 	.word	0x0800eaf9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800eae4:	6839      	ldr	r1, [r7, #0]
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f9ce 	bl	800ee88 <USBD_GetDescriptor>
      break;
 800eaec:	e024      	b.n	800eb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fb5d 	bl	800f1b0 <USBD_SetAddress>
      break;
 800eaf6:	e01f      	b.n	800eb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800eaf8:	6839      	ldr	r1, [r7, #0]
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 fb9a 	bl	800f234 <USBD_SetConfig>
 800eb00:	4603      	mov	r3, r0
 800eb02:	73fb      	strb	r3, [r7, #15]
      break;
 800eb04:	e018      	b.n	800eb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800eb06:	6839      	ldr	r1, [r7, #0]
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 fc37 	bl	800f37c <USBD_GetConfig>
      break;
 800eb0e:	e013      	b.n	800eb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fc66 	bl	800f3e4 <USBD_GetStatus>
      break;
 800eb18:	e00e      	b.n	800eb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 fc94 	bl	800f44a <USBD_SetFeature>
      break;
 800eb22:	e009      	b.n	800eb38 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fca3 	bl	800f472 <USBD_ClrFeature>
      break;
 800eb2c:	e004      	b.n	800eb38 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800eb2e:	6839      	ldr	r1, [r7, #0]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fcf9 	bl	800f528 <USBD_CtlError>
      break;
 800eb36:	bf00      	nop
    }
    break;
 800eb38:	e004      	b.n	800eb44 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 fcf3 	bl	800f528 <USBD_CtlError>
    break;
 800eb42:	bf00      	nop
  }

  return ret;
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop

0800eb50 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb66:	2b20      	cmp	r3, #32
 800eb68:	d003      	beq.n	800eb72 <USBD_StdItfReq+0x22>
 800eb6a:	2b40      	cmp	r3, #64	; 0x40
 800eb6c:	d001      	beq.n	800eb72 <USBD_StdItfReq+0x22>
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d12a      	bne.n	800ebc8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	d81d      	bhi.n	800ebba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	889b      	ldrh	r3, [r3, #4]
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d813      	bhi.n	800ebb0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	4798      	blx	r3
 800eb96:	4603      	mov	r3, r0
 800eb98:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	88db      	ldrh	r3, [r3, #6]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d110      	bne.n	800ebc4 <USBD_StdItfReq+0x74>
 800eba2:	7bfb      	ldrb	r3, [r7, #15]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10d      	bne.n	800ebc4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fd88 	bl	800f6be <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ebae:	e009      	b.n	800ebc4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fcb8 	bl	800f528 <USBD_CtlError>
      break;
 800ebb8:	e004      	b.n	800ebc4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ebba:	6839      	ldr	r1, [r7, #0]
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 fcb3 	bl	800f528 <USBD_CtlError>
      break;
 800ebc2:	e000      	b.n	800ebc6 <USBD_StdItfReq+0x76>
      break;
 800ebc4:	bf00      	nop
    }
    break;
 800ebc6:	e004      	b.n	800ebd2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fcac 	bl	800f528 <USBD_CtlError>
    break;
 800ebd0:	bf00      	nop
  }

  return ret;
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	889b      	ldrh	r3, [r3, #4]
 800ebee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebf8:	2b20      	cmp	r3, #32
 800ebfa:	d004      	beq.n	800ec06 <USBD_StdEPReq+0x2a>
 800ebfc:	2b40      	cmp	r3, #64	; 0x40
 800ebfe:	d002      	beq.n	800ec06 <USBD_StdEPReq+0x2a>
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00a      	beq.n	800ec1a <USBD_StdEPReq+0x3e>
 800ec04:	e135      	b.n	800ee72 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	4798      	blx	r3
 800ec14:	4603      	mov	r3, r0
 800ec16:	73fb      	strb	r3, [r7, #15]
    break;
 800ec18:	e130      	b.n	800ee7c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	785b      	ldrb	r3, [r3, #1]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d03e      	beq.n	800eca0 <USBD_StdEPReq+0xc4>
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	d002      	beq.n	800ec2c <USBD_StdEPReq+0x50>
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d077      	beq.n	800ed1a <USBD_StdEPReq+0x13e>
 800ec2a:	e11c      	b.n	800ee66 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec32:	2b02      	cmp	r3, #2
 800ec34:	d002      	beq.n	800ec3c <USBD_StdEPReq+0x60>
 800ec36:	2b03      	cmp	r3, #3
 800ec38:	d015      	beq.n	800ec66 <USBD_StdEPReq+0x8a>
 800ec3a:	e02b      	b.n	800ec94 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec3c:	7bbb      	ldrb	r3, [r7, #14]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00c      	beq.n	800ec5c <USBD_StdEPReq+0x80>
 800ec42:	7bbb      	ldrb	r3, [r7, #14]
 800ec44:	2b80      	cmp	r3, #128	; 0x80
 800ec46:	d009      	beq.n	800ec5c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec48:	7bbb      	ldrb	r3, [r7, #14]
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f008 f8e1 	bl	8016e14 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec52:	2180      	movs	r1, #128	; 0x80
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f008 f8dd 	bl	8016e14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ec5a:	e020      	b.n	800ec9e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ec5c:	6839      	ldr	r1, [r7, #0]
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 fc62 	bl	800f528 <USBD_CtlError>
        break;
 800ec64:	e01b      	b.n	800ec9e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	885b      	ldrh	r3, [r3, #2]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10e      	bne.n	800ec8c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec6e:	7bbb      	ldrb	r3, [r7, #14]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00b      	beq.n	800ec8c <USBD_StdEPReq+0xb0>
 800ec74:	7bbb      	ldrb	r3, [r7, #14]
 800ec76:	2b80      	cmp	r3, #128	; 0x80
 800ec78:	d008      	beq.n	800ec8c <USBD_StdEPReq+0xb0>
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	88db      	ldrh	r3, [r3, #6]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d104      	bne.n	800ec8c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec82:	7bbb      	ldrb	r3, [r7, #14]
 800ec84:	4619      	mov	r1, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f008 f8c4 	bl	8016e14 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fd16 	bl	800f6be <USBD_CtlSendStatus>

        break;
 800ec92:	e004      	b.n	800ec9e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fc46 	bl	800f528 <USBD_CtlError>
        break;
 800ec9c:	bf00      	nop
      }
      break;
 800ec9e:	e0e7      	b.n	800ee70 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d002      	beq.n	800ecb0 <USBD_StdEPReq+0xd4>
 800ecaa:	2b03      	cmp	r3, #3
 800ecac:	d015      	beq.n	800ecda <USBD_StdEPReq+0xfe>
 800ecae:	e02d      	b.n	800ed0c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecb0:	7bbb      	ldrb	r3, [r7, #14]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00c      	beq.n	800ecd0 <USBD_StdEPReq+0xf4>
 800ecb6:	7bbb      	ldrb	r3, [r7, #14]
 800ecb8:	2b80      	cmp	r3, #128	; 0x80
 800ecba:	d009      	beq.n	800ecd0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecbc:	7bbb      	ldrb	r3, [r7, #14]
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f008 f8a7 	bl	8016e14 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecc6:	2180      	movs	r1, #128	; 0x80
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f008 f8a3 	bl	8016e14 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ecce:	e023      	b.n	800ed18 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ecd0:	6839      	ldr	r1, [r7, #0]
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 fc28 	bl	800f528 <USBD_CtlError>
        break;
 800ecd8:	e01e      	b.n	800ed18 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	885b      	ldrh	r3, [r3, #2]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d119      	bne.n	800ed16 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ece2:	7bbb      	ldrb	r3, [r7, #14]
 800ece4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ecec:	7bbb      	ldrb	r3, [r7, #14]
 800ecee:	4619      	mov	r1, r3
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f008 f8ae 	bl	8016e52 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 fce1 	bl	800f6be <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	4798      	blx	r3
        }
        break;
 800ed0a:	e004      	b.n	800ed16 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ed0c:	6839      	ldr	r1, [r7, #0]
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 fc0a 	bl	800f528 <USBD_CtlError>
        break;
 800ed14:	e000      	b.n	800ed18 <USBD_StdEPReq+0x13c>
        break;
 800ed16:	bf00      	nop
      }
      break;
 800ed18:	e0aa      	b.n	800ee70 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d002      	beq.n	800ed2a <USBD_StdEPReq+0x14e>
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d032      	beq.n	800ed8e <USBD_StdEPReq+0x1b2>
 800ed28:	e097      	b.n	800ee5a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed2a:	7bbb      	ldrb	r3, [r7, #14]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d007      	beq.n	800ed40 <USBD_StdEPReq+0x164>
 800ed30:	7bbb      	ldrb	r3, [r7, #14]
 800ed32:	2b80      	cmp	r3, #128	; 0x80
 800ed34:	d004      	beq.n	800ed40 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ed36:	6839      	ldr	r1, [r7, #0]
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 fbf5 	bl	800f528 <USBD_CtlError>
          break;
 800ed3e:	e091      	b.n	800ee64 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	da0b      	bge.n	800ed60 <USBD_StdEPReq+0x184>
 800ed48:	7bbb      	ldrb	r3, [r7, #14]
 800ed4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed4e:	4613      	mov	r3, r2
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	4413      	add	r3, r2
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	3310      	adds	r3, #16
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	e00b      	b.n	800ed78 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ed60:	7bbb      	ldrb	r3, [r7, #14]
 800ed62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed66:	4613      	mov	r3, r2
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	4413      	add	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	4413      	add	r3, r2
 800ed76:	3304      	adds	r3, #4
 800ed78:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	2202      	movs	r2, #2
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 fc3f 	bl	800f60a <USBD_CtlSendData>
        break;
 800ed8c:	e06a      	b.n	800ee64 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ed8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	da11      	bge.n	800edba <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ed96:	7bbb      	ldrb	r3, [r7, #14]
 800ed98:	f003 020f 	and.w	r2, r3, #15
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4413      	add	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	440b      	add	r3, r1
 800eda8:	3324      	adds	r3, #36	; 0x24
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d117      	bne.n	800ede0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fbb8 	bl	800f528 <USBD_CtlError>
            break;
 800edb8:	e054      	b.n	800ee64 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800edba:	7bbb      	ldrb	r3, [r7, #14]
 800edbc:	f003 020f 	and.w	r2, r3, #15
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	4613      	mov	r3, r2
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	4413      	add	r3, r2
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	440b      	add	r3, r1
 800edcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800edd0:	881b      	ldrh	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d104      	bne.n	800ede0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800edd6:	6839      	ldr	r1, [r7, #0]
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 fba5 	bl	800f528 <USBD_CtlError>
            break;
 800edde:	e041      	b.n	800ee64 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ede0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	da0b      	bge.n	800ee00 <USBD_StdEPReq+0x224>
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
 800edea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edee:	4613      	mov	r3, r2
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	4413      	add	r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	3310      	adds	r3, #16
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	4413      	add	r3, r2
 800edfc:	3304      	adds	r3, #4
 800edfe:	e00b      	b.n	800ee18 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ee00:	7bbb      	ldrb	r3, [r7, #14]
 800ee02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee06:	4613      	mov	r3, r2
 800ee08:	009b      	lsls	r3, r3, #2
 800ee0a:	4413      	add	r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	4413      	add	r3, r2
 800ee16:	3304      	adds	r3, #4
 800ee18:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ee1a:	7bbb      	ldrb	r3, [r7, #14]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d002      	beq.n	800ee26 <USBD_StdEPReq+0x24a>
 800ee20:	7bbb      	ldrb	r3, [r7, #14]
 800ee22:	2b80      	cmp	r3, #128	; 0x80
 800ee24:	d103      	bne.n	800ee2e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	601a      	str	r2, [r3, #0]
 800ee2c:	e00e      	b.n	800ee4c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee2e:	7bbb      	ldrb	r3, [r7, #14]
 800ee30:	4619      	mov	r1, r3
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f008 f82c 	bl	8016e90 <USBD_LL_IsStallEP>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d003      	beq.n	800ee46 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	2201      	movs	r2, #1
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	e002      	b.n	800ee4c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	2202      	movs	r2, #2
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fbd9 	bl	800f60a <USBD_CtlSendData>
          break;
 800ee58:	e004      	b.n	800ee64 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ee5a:	6839      	ldr	r1, [r7, #0]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 fb63 	bl	800f528 <USBD_CtlError>
        break;
 800ee62:	bf00      	nop
      }
      break;
 800ee64:	e004      	b.n	800ee70 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ee66:	6839      	ldr	r1, [r7, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fb5d 	bl	800f528 <USBD_CtlError>
      break;
 800ee6e:	bf00      	nop
    }
    break;
 800ee70:	e004      	b.n	800ee7c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fb57 	bl	800f528 <USBD_CtlError>
    break;
 800ee7a:	bf00      	nop
  }

  return ret;
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
	...

0800ee88 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee92:	2300      	movs	r3, #0
 800ee94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	885b      	ldrh	r3, [r3, #2]
 800eea2:	0a1b      	lsrs	r3, r3, #8
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	3b01      	subs	r3, #1
 800eea8:	2b0e      	cmp	r3, #14
 800eeaa:	f200 8152 	bhi.w	800f152 <USBD_GetDescriptor+0x2ca>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <USBD_GetDescriptor+0x2c>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800ef25 	.word	0x0800ef25
 800eeb8:	0800ef3d 	.word	0x0800ef3d
 800eebc:	0800ef7d 	.word	0x0800ef7d
 800eec0:	0800f153 	.word	0x0800f153
 800eec4:	0800f153 	.word	0x0800f153
 800eec8:	0800f0f3 	.word	0x0800f0f3
 800eecc:	0800f11f 	.word	0x0800f11f
 800eed0:	0800f153 	.word	0x0800f153
 800eed4:	0800f153 	.word	0x0800f153
 800eed8:	0800f153 	.word	0x0800f153
 800eedc:	0800f153 	.word	0x0800f153
 800eee0:	0800f153 	.word	0x0800f153
 800eee4:	0800f153 	.word	0x0800f153
 800eee8:	0800f153 	.word	0x0800f153
 800eeec:	0800eef1 	.word	0x0800eef1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eef6:	69db      	ldr	r3, [r3, #28]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00b      	beq.n	800ef14 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef02:	69db      	ldr	r3, [r3, #28]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	7c12      	ldrb	r2, [r2, #16]
 800ef08:	f107 0108 	add.w	r1, r7, #8
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	4798      	blx	r3
 800ef10:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ef12:	e126      	b.n	800f162 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 fb06 	bl	800f528 <USBD_CtlError>
      err++;
 800ef1c:	7afb      	ldrb	r3, [r7, #11]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	72fb      	strb	r3, [r7, #11]
    break;
 800ef22:	e11e      	b.n	800f162 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	7c12      	ldrb	r2, [r2, #16]
 800ef30:	f107 0108 	add.w	r1, r7, #8
 800ef34:	4610      	mov	r0, r2
 800ef36:	4798      	blx	r3
 800ef38:	60f8      	str	r0, [r7, #12]
    break;
 800ef3a:	e112      	b.n	800f162 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	7c1b      	ldrb	r3, [r3, #16]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10d      	bne.n	800ef60 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef4c:	f107 0208 	add.w	r2, r7, #8
 800ef50:	4610      	mov	r0, r2
 800ef52:	4798      	blx	r3
 800ef54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ef5e:	e100      	b.n	800f162 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef68:	f107 0208 	add.w	r2, r7, #8
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	4798      	blx	r3
 800ef70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3301      	adds	r3, #1
 800ef76:	2202      	movs	r2, #2
 800ef78:	701a      	strb	r2, [r3, #0]
    break;
 800ef7a:	e0f2      	b.n	800f162 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	885b      	ldrh	r3, [r3, #2]
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	f200 80ac 	bhi.w	800f0e0 <USBD_GetDescriptor+0x258>
 800ef88:	a201      	add	r2, pc, #4	; (adr r2, 800ef90 <USBD_GetDescriptor+0x108>)
 800ef8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8e:	bf00      	nop
 800ef90:	0800efa9 	.word	0x0800efa9
 800ef94:	0800efdd 	.word	0x0800efdd
 800ef98:	0800f011 	.word	0x0800f011
 800ef9c:	0800f045 	.word	0x0800f045
 800efa0:	0800f079 	.word	0x0800f079
 800efa4:	0800f0ad 	.word	0x0800f0ad
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00b      	beq.n	800efcc <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	7c12      	ldrb	r2, [r2, #16]
 800efc0:	f107 0108 	add.w	r1, r7, #8
 800efc4:	4610      	mov	r0, r2
 800efc6:	4798      	blx	r3
 800efc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800efca:	e091      	b.n	800f0f0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800efcc:	6839      	ldr	r1, [r7, #0]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 faaa 	bl	800f528 <USBD_CtlError>
        err++;
 800efd4:	7afb      	ldrb	r3, [r7, #11]
 800efd6:	3301      	adds	r3, #1
 800efd8:	72fb      	strb	r3, [r7, #11]
      break;
 800efda:	e089      	b.n	800f0f0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d00b      	beq.n	800f000 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	7c12      	ldrb	r2, [r2, #16]
 800eff4:	f107 0108 	add.w	r1, r7, #8
 800eff8:	4610      	mov	r0, r2
 800effa:	4798      	blx	r3
 800effc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800effe:	e077      	b.n	800f0f0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f000:	6839      	ldr	r1, [r7, #0]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 fa90 	bl	800f528 <USBD_CtlError>
        err++;
 800f008:	7afb      	ldrb	r3, [r7, #11]
 800f00a:	3301      	adds	r3, #1
 800f00c:	72fb      	strb	r3, [r7, #11]
      break;
 800f00e:	e06f      	b.n	800f0f0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d00b      	beq.n	800f034 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	7c12      	ldrb	r2, [r2, #16]
 800f028:	f107 0108 	add.w	r1, r7, #8
 800f02c:	4610      	mov	r0, r2
 800f02e:	4798      	blx	r3
 800f030:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f032:	e05d      	b.n	800f0f0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f034:	6839      	ldr	r1, [r7, #0]
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 fa76 	bl	800f528 <USBD_CtlError>
        err++;
 800f03c:	7afb      	ldrb	r3, [r7, #11]
 800f03e:	3301      	adds	r3, #1
 800f040:	72fb      	strb	r3, [r7, #11]
      break;
 800f042:	e055      	b.n	800f0f0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f04a:	691b      	ldr	r3, [r3, #16]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00b      	beq.n	800f068 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f056:	691b      	ldr	r3, [r3, #16]
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	7c12      	ldrb	r2, [r2, #16]
 800f05c:	f107 0108 	add.w	r1, r7, #8
 800f060:	4610      	mov	r0, r2
 800f062:	4798      	blx	r3
 800f064:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f066:	e043      	b.n	800f0f0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f068:	6839      	ldr	r1, [r7, #0]
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 fa5c 	bl	800f528 <USBD_CtlError>
        err++;
 800f070:	7afb      	ldrb	r3, [r7, #11]
 800f072:	3301      	adds	r3, #1
 800f074:	72fb      	strb	r3, [r7, #11]
      break;
 800f076:	e03b      	b.n	800f0f0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f07e:	695b      	ldr	r3, [r3, #20]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00b      	beq.n	800f09c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f08a:	695b      	ldr	r3, [r3, #20]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	7c12      	ldrb	r2, [r2, #16]
 800f090:	f107 0108 	add.w	r1, r7, #8
 800f094:	4610      	mov	r0, r2
 800f096:	4798      	blx	r3
 800f098:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f09a:	e029      	b.n	800f0f0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fa42 	bl	800f528 <USBD_CtlError>
        err++;
 800f0a4:	7afb      	ldrb	r3, [r7, #11]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	72fb      	strb	r3, [r7, #11]
      break;
 800f0aa:	e021      	b.n	800f0f0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00b      	beq.n	800f0d0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0be:	699b      	ldr	r3, [r3, #24]
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	7c12      	ldrb	r2, [r2, #16]
 800f0c4:	f107 0108 	add.w	r1, r7, #8
 800f0c8:	4610      	mov	r0, r2
 800f0ca:	4798      	blx	r3
 800f0cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0ce:	e00f      	b.n	800f0f0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f0d0:	6839      	ldr	r1, [r7, #0]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 fa28 	bl	800f528 <USBD_CtlError>
        err++;
 800f0d8:	7afb      	ldrb	r3, [r7, #11]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	72fb      	strb	r3, [r7, #11]
      break;
 800f0de:	e007      	b.n	800f0f0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f0e0:	6839      	ldr	r1, [r7, #0]
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 fa20 	bl	800f528 <USBD_CtlError>
      err++;
 800f0e8:	7afb      	ldrb	r3, [r7, #11]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f0ee:	bf00      	nop
    }
    break;
 800f0f0:	e037      	b.n	800f162 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	7c1b      	ldrb	r3, [r3, #16]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d109      	bne.n	800f10e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f102:	f107 0208 	add.w	r2, r7, #8
 800f106:	4610      	mov	r0, r2
 800f108:	4798      	blx	r3
 800f10a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f10c:	e029      	b.n	800f162 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fa09 	bl	800f528 <USBD_CtlError>
      err++;
 800f116:	7afb      	ldrb	r3, [r7, #11]
 800f118:	3301      	adds	r3, #1
 800f11a:	72fb      	strb	r3, [r7, #11]
    break;
 800f11c:	e021      	b.n	800f162 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	7c1b      	ldrb	r3, [r3, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d10d      	bne.n	800f142 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12e:	f107 0208 	add.w	r2, r7, #8
 800f132:	4610      	mov	r0, r2
 800f134:	4798      	blx	r3
 800f136:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	3301      	adds	r3, #1
 800f13c:	2207      	movs	r2, #7
 800f13e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f140:	e00f      	b.n	800f162 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f142:	6839      	ldr	r1, [r7, #0]
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 f9ef 	bl	800f528 <USBD_CtlError>
      err++;
 800f14a:	7afb      	ldrb	r3, [r7, #11]
 800f14c:	3301      	adds	r3, #1
 800f14e:	72fb      	strb	r3, [r7, #11]
    break;
 800f150:	e007      	b.n	800f162 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 f9e7 	bl	800f528 <USBD_CtlError>
    err++;
 800f15a:	7afb      	ldrb	r3, [r7, #11]
 800f15c:	3301      	adds	r3, #1
 800f15e:	72fb      	strb	r3, [r7, #11]
    break;
 800f160:	bf00      	nop
  }

  if (err != 0U)
 800f162:	7afb      	ldrb	r3, [r7, #11]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d11e      	bne.n	800f1a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	88db      	ldrh	r3, [r3, #6]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d016      	beq.n	800f19e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f170:	893b      	ldrh	r3, [r7, #8]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00e      	beq.n	800f194 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	88da      	ldrh	r2, [r3, #6]
 800f17a:	893b      	ldrh	r3, [r7, #8]
 800f17c:	4293      	cmp	r3, r2
 800f17e:	bf28      	it	cs
 800f180:	4613      	movcs	r3, r2
 800f182:	b29b      	uxth	r3, r3
 800f184:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f186:	893b      	ldrh	r3, [r7, #8]
 800f188:	461a      	mov	r2, r3
 800f18a:	68f9      	ldr	r1, [r7, #12]
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 fa3c 	bl	800f60a <USBD_CtlSendData>
 800f192:	e009      	b.n	800f1a8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f194:	6839      	ldr	r1, [r7, #0]
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f9c6 	bl	800f528 <USBD_CtlError>
 800f19c:	e004      	b.n	800f1a8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fa8d 	bl	800f6be <USBD_CtlSendStatus>
 800f1a4:	e000      	b.n	800f1a8 <USBD_GetDescriptor+0x320>
    return;
 800f1a6:	bf00      	nop
    }
  }
}
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop

0800f1b0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	889b      	ldrh	r3, [r3, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d130      	bne.n	800f224 <USBD_SetAddress+0x74>
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	88db      	ldrh	r3, [r3, #6]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d12c      	bne.n	800f224 <USBD_SetAddress+0x74>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	885b      	ldrh	r3, [r3, #2]
 800f1ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f1d0:	d828      	bhi.n	800f224 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	885b      	ldrh	r3, [r3, #2]
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1e4:	2b03      	cmp	r3, #3
 800f1e6:	d104      	bne.n	800f1f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f99c 	bl	800f528 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1f0:	e01c      	b.n	800f22c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	7bfa      	ldrb	r2, [r7, #15]
 800f1f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f1fa:	7bfb      	ldrb	r3, [r7, #15]
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f007 fe72 	bl	8016ee8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 fa5a 	bl	800f6be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d004      	beq.n	800f21a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2202      	movs	r2, #2
 800f214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f218:	e008      	b.n	800f22c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2201      	movs	r2, #1
 800f21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f222:	e003      	b.n	800f22c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f97e 	bl	800f528 <USBD_CtlError>
  }
}
 800f22c:	bf00      	nop
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f23e:	2300      	movs	r3, #0
 800f240:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	885b      	ldrh	r3, [r3, #2]
 800f246:	b2da      	uxtb	r2, r3
 800f248:	4b4b      	ldr	r3, [pc, #300]	; (800f378 <USBD_SetConfig+0x144>)
 800f24a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f24c:	4b4a      	ldr	r3, [pc, #296]	; (800f378 <USBD_SetConfig+0x144>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d905      	bls.n	800f260 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f254:	6839      	ldr	r1, [r7, #0]
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 f966 	bl	800f528 <USBD_CtlError>
    return USBD_FAIL;
 800f25c:	2303      	movs	r3, #3
 800f25e:	e087      	b.n	800f370 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f266:	2b02      	cmp	r3, #2
 800f268:	d002      	beq.n	800f270 <USBD_SetConfig+0x3c>
 800f26a:	2b03      	cmp	r3, #3
 800f26c:	d025      	beq.n	800f2ba <USBD_SetConfig+0x86>
 800f26e:	e071      	b.n	800f354 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f270:	4b41      	ldr	r3, [pc, #260]	; (800f378 <USBD_SetConfig+0x144>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d01c      	beq.n	800f2b2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f278:	4b3f      	ldr	r3, [pc, #252]	; (800f378 <USBD_SetConfig+0x144>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	461a      	mov	r2, r3
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f282:	4b3d      	ldr	r3, [pc, #244]	; (800f378 <USBD_SetConfig+0x144>)
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	4619      	mov	r1, r3
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7ff f97d 	bl	800e588 <USBD_SetClassConfig>
 800f28e:	4603      	mov	r3, r0
 800f290:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f292:	7bfb      	ldrb	r3, [r7, #15]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d004      	beq.n	800f2a2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 f944 	bl	800f528 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f2a0:	e065      	b.n	800f36e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fa0b 	bl	800f6be <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2203      	movs	r2, #3
 800f2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f2b0:	e05d      	b.n	800f36e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fa03 	bl	800f6be <USBD_CtlSendStatus>
    break;
 800f2b8:	e059      	b.n	800f36e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f2ba:	4b2f      	ldr	r3, [pc, #188]	; (800f378 <USBD_SetConfig+0x144>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d112      	bne.n	800f2e8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2202      	movs	r2, #2
 800f2c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f2ca:	4b2b      	ldr	r3, [pc, #172]	; (800f378 <USBD_SetConfig+0x144>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f2d4:	4b28      	ldr	r3, [pc, #160]	; (800f378 <USBD_SetConfig+0x144>)
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7ff f970 	bl	800e5c0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 f9ec 	bl	800f6be <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f2e6:	e042      	b.n	800f36e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f2e8:	4b23      	ldr	r3, [pc, #140]	; (800f378 <USBD_SetConfig+0x144>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d02a      	beq.n	800f34c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7ff f95e 	bl	800e5c0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f304:	4b1c      	ldr	r3, [pc, #112]	; (800f378 <USBD_SetConfig+0x144>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	461a      	mov	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f30e:	4b1a      	ldr	r3, [pc, #104]	; (800f378 <USBD_SetConfig+0x144>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7ff f937 	bl	800e588 <USBD_SetClassConfig>
 800f31a:	4603      	mov	r3, r0
 800f31c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f31e:	7bfb      	ldrb	r3, [r7, #15]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00f      	beq.n	800f344 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 f8fe 	bl	800f528 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	b2db      	uxtb	r3, r3
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff f943 	bl	800e5c0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2202      	movs	r2, #2
 800f33e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f342:	e014      	b.n	800f36e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 f9ba 	bl	800f6be <USBD_CtlSendStatus>
    break;
 800f34a:	e010      	b.n	800f36e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 f9b6 	bl	800f6be <USBD_CtlSendStatus>
    break;
 800f352:	e00c      	b.n	800f36e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f354:	6839      	ldr	r1, [r7, #0]
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f8e6 	bl	800f528 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f35c:	4b06      	ldr	r3, [pc, #24]	; (800f378 <USBD_SetConfig+0x144>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	4619      	mov	r1, r3
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7ff f92c 	bl	800e5c0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f368:	2303      	movs	r3, #3
 800f36a:	73fb      	strb	r3, [r7, #15]
    break;
 800f36c:	bf00      	nop
  }

  return ret;
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	20000330 	.word	0x20000330

0800f37c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	88db      	ldrh	r3, [r3, #6]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d004      	beq.n	800f398 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f38e:	6839      	ldr	r1, [r7, #0]
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 f8c9 	bl	800f528 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f396:	e021      	b.n	800f3dc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	db17      	blt.n	800f3d2 <USBD_GetConfig+0x56>
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	dd02      	ble.n	800f3ac <USBD_GetConfig+0x30>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d00b      	beq.n	800f3c2 <USBD_GetConfig+0x46>
 800f3aa:	e012      	b.n	800f3d2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	3308      	adds	r3, #8
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f925 	bl	800f60a <USBD_CtlSendData>
      break;
 800f3c0:	e00c      	b.n	800f3dc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f91d 	bl	800f60a <USBD_CtlSendData>
      break;
 800f3d0:	e004      	b.n	800f3dc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f8a7 	bl	800f528 <USBD_CtlError>
      break;
 800f3da:	bf00      	nop
}
 800f3dc:	bf00      	nop
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	2b02      	cmp	r3, #2
 800f3f8:	d81e      	bhi.n	800f438 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	88db      	ldrh	r3, [r3, #6]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d004      	beq.n	800f40c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 f88f 	bl	800f528 <USBD_CtlError>
      break;
 800f40a:	e01a      	b.n	800f442 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2201      	movs	r2, #1
 800f410:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	f043 0202 	orr.w	r2, r3, #2
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	330c      	adds	r3, #12
 800f42c:	2202      	movs	r2, #2
 800f42e:	4619      	mov	r1, r3
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f8ea 	bl	800f60a <USBD_CtlSendData>
    break;
 800f436:	e004      	b.n	800f442 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f438:	6839      	ldr	r1, [r7, #0]
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f874 	bl	800f528 <USBD_CtlError>
    break;
 800f440:	bf00      	nop
  }
}
 800f442:	bf00      	nop
 800f444:	3708      	adds	r7, #8
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b082      	sub	sp, #8
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
 800f452:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	885b      	ldrh	r3, [r3, #2]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d106      	bne.n	800f46a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 f92a 	bl	800f6be <USBD_CtlSendStatus>
  }
}
 800f46a:	bf00      	nop
 800f46c:	3708      	adds	r7, #8
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b082      	sub	sp, #8
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f482:	3b01      	subs	r3, #1
 800f484:	2b02      	cmp	r3, #2
 800f486:	d80b      	bhi.n	800f4a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	885b      	ldrh	r3, [r3, #2]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d10c      	bne.n	800f4aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f910 	bl	800f6be <USBD_CtlSendStatus>
      }
      break;
 800f49e:	e004      	b.n	800f4aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f4a0:	6839      	ldr	r1, [r7, #0]
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 f840 	bl	800f528 <USBD_CtlError>
      break;
 800f4a8:	e000      	b.n	800f4ac <USBD_ClrFeature+0x3a>
      break;
 800f4aa:	bf00      	nop
  }
}
 800f4ac:	bf00      	nop
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	781a      	ldrb	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	781a      	ldrb	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f7ff faa9 	bl	800ea36 <SWAPBYTE>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7ff fa9c 	bl	800ea36 <SWAPBYTE>
 800f4fe:	4603      	mov	r3, r0
 800f500:	461a      	mov	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3301      	adds	r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	3301      	adds	r3, #1
 800f510:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f7ff fa8f 	bl	800ea36 <SWAPBYTE>
 800f518:	4603      	mov	r3, r0
 800f51a:	461a      	mov	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	80da      	strh	r2, [r3, #6]
}
 800f520:	bf00      	nop
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f532:	2180      	movs	r1, #128	; 0x80
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f007 fc6d 	bl	8016e14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f53a:	2100      	movs	r1, #0
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f007 fc69 	bl	8016e14 <USBD_LL_StallEP>
}
 800f542:	bf00      	nop
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b086      	sub	sp, #24
 800f54e:	af00      	add	r7, sp, #0
 800f550:	60f8      	str	r0, [r7, #12]
 800f552:	60b9      	str	r1, [r7, #8]
 800f554:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f556:	2300      	movs	r3, #0
 800f558:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d036      	beq.n	800f5ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f564:	6938      	ldr	r0, [r7, #16]
 800f566:	f000 f836 	bl	800f5d6 <USBD_GetLen>
 800f56a:	4603      	mov	r3, r0
 800f56c:	3301      	adds	r3, #1
 800f56e:	b29b      	uxth	r3, r3
 800f570:	005b      	lsls	r3, r3, #1
 800f572:	b29a      	uxth	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f578:	7dfb      	ldrb	r3, [r7, #23]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	4413      	add	r3, r2
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	7812      	ldrb	r2, [r2, #0]
 800f582:	701a      	strb	r2, [r3, #0]
  idx++;
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	3301      	adds	r3, #1
 800f588:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f58a:	7dfb      	ldrb	r3, [r7, #23]
 800f58c:	68ba      	ldr	r2, [r7, #8]
 800f58e:	4413      	add	r3, r2
 800f590:	2203      	movs	r2, #3
 800f592:	701a      	strb	r2, [r3, #0]
  idx++;
 800f594:	7dfb      	ldrb	r3, [r7, #23]
 800f596:	3301      	adds	r3, #1
 800f598:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f59a:	e013      	b.n	800f5c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f59c:	7dfb      	ldrb	r3, [r7, #23]
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	693a      	ldr	r2, [r7, #16]
 800f5a4:	7812      	ldrb	r2, [r2, #0]
 800f5a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	613b      	str	r3, [r7, #16]
    idx++;
 800f5ae:	7dfb      	ldrb	r3, [r7, #23]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f5b4:	7dfb      	ldrb	r3, [r7, #23]
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	701a      	strb	r2, [r3, #0]
    idx++;
 800f5be:	7dfb      	ldrb	r3, [r7, #23]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1e7      	bne.n	800f59c <USBD_GetString+0x52>
 800f5cc:	e000      	b.n	800f5d0 <USBD_GetString+0x86>
    return;
 800f5ce:	bf00      	nop
  }
}
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b085      	sub	sp, #20
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f5e6:	e005      	b.n	800f5f4 <USBD_GetLen+0x1e>
  {
    len++;
 800f5e8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1f5      	bne.n	800f5e8 <USBD_GetLen+0x12>
  }

  return len;
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3714      	adds	r7, #20
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	60b9      	str	r1, [r7, #8]
 800f614:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2202      	movs	r2, #2
 800f61a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	2100      	movs	r1, #0
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f007 fc78 	bl	8016f26 <USBD_LL_Transmit>

  return USBD_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	2100      	movs	r1, #0
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f007 fc67 	bl	8016f26 <USBD_LL_Transmit>

  return USBD_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b084      	sub	sp, #16
 800f666:	af00      	add	r7, sp, #0
 800f668:	60f8      	str	r0, [r7, #12]
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2203      	movs	r2, #3
 800f672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	2100      	movs	r1, #0
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f007 fc6b 	bl	8016f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f692:	2300      	movs	r3, #0
}
 800f694:	4618      	mov	r0, r3
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68ba      	ldr	r2, [r7, #8]
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f007 fc5a 	bl	8016f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b082      	sub	sp, #8
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2204      	movs	r2, #4
 800f6ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f007 fc26 	bl	8016f26 <USBD_LL_Transmit>

  return USBD_OK;
 800f6da:	2300      	movs	r3, #0
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2205      	movs	r2, #5
 800f6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f007 fc34 	bl	8016f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
	...

0800f70c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f716:	79fb      	ldrb	r3, [r7, #7]
 800f718:	4a08      	ldr	r2, [pc, #32]	; (800f73c <disk_status+0x30>)
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	4413      	add	r3, r2
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	79fa      	ldrb	r2, [r7, #7]
 800f724:	4905      	ldr	r1, [pc, #20]	; (800f73c <disk_status+0x30>)
 800f726:	440a      	add	r2, r1
 800f728:	7a12      	ldrb	r2, [r2, #8]
 800f72a:	4610      	mov	r0, r2
 800f72c:	4798      	blx	r3
 800f72e:	4603      	mov	r3, r0
 800f730:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f732:	7bfb      	ldrb	r3, [r7, #15]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3710      	adds	r7, #16
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	2000035c 	.word	0x2000035c

0800f740 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f74a:	2300      	movs	r3, #0
 800f74c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f74e:	79fb      	ldrb	r3, [r7, #7]
 800f750:	4a0d      	ldr	r2, [pc, #52]	; (800f788 <disk_initialize+0x48>)
 800f752:	5cd3      	ldrb	r3, [r2, r3]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d111      	bne.n	800f77c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	4a0b      	ldr	r2, [pc, #44]	; (800f788 <disk_initialize+0x48>)
 800f75c:	2101      	movs	r1, #1
 800f75e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	4a09      	ldr	r2, [pc, #36]	; (800f788 <disk_initialize+0x48>)
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	4413      	add	r3, r2
 800f768:	685b      	ldr	r3, [r3, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	79fa      	ldrb	r2, [r7, #7]
 800f76e:	4906      	ldr	r1, [pc, #24]	; (800f788 <disk_initialize+0x48>)
 800f770:	440a      	add	r2, r1
 800f772:	7a12      	ldrb	r2, [r2, #8]
 800f774:	4610      	mov	r0, r2
 800f776:	4798      	blx	r3
 800f778:	4603      	mov	r3, r0
 800f77a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	2000035c 	.word	0x2000035c

0800f78c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f78c:	b590      	push	{r4, r7, lr}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
 800f792:	60b9      	str	r1, [r7, #8]
 800f794:	607a      	str	r2, [r7, #4]
 800f796:	603b      	str	r3, [r7, #0]
 800f798:	4603      	mov	r3, r0
 800f79a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
 800f79e:	4a0a      	ldr	r2, [pc, #40]	; (800f7c8 <disk_read+0x3c>)
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	4413      	add	r3, r2
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	689c      	ldr	r4, [r3, #8]
 800f7a8:	7bfb      	ldrb	r3, [r7, #15]
 800f7aa:	4a07      	ldr	r2, [pc, #28]	; (800f7c8 <disk_read+0x3c>)
 800f7ac:	4413      	add	r3, r2
 800f7ae:	7a18      	ldrb	r0, [r3, #8]
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	68b9      	ldr	r1, [r7, #8]
 800f7b6:	47a0      	blx	r4
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800f7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	371c      	adds	r7, #28
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd90      	pop	{r4, r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	2000035c 	.word	0x2000035c

0800f7cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f7cc:	b590      	push	{r4, r7, lr}
 800f7ce:	b087      	sub	sp, #28
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60b9      	str	r1, [r7, #8]
 800f7d4:	607a      	str	r2, [r7, #4]
 800f7d6:	603b      	str	r3, [r7, #0]
 800f7d8:	4603      	mov	r3, r0
 800f7da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
 800f7de:	4a0a      	ldr	r2, [pc, #40]	; (800f808 <disk_write+0x3c>)
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4413      	add	r3, r2
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	68dc      	ldr	r4, [r3, #12]
 800f7e8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ea:	4a07      	ldr	r2, [pc, #28]	; (800f808 <disk_write+0x3c>)
 800f7ec:	4413      	add	r3, r2
 800f7ee:	7a18      	ldrb	r0, [r3, #8]
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	68b9      	ldr	r1, [r7, #8]
 800f7f6:	47a0      	blx	r4
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800f7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	371c      	adds	r7, #28
 800f802:	46bd      	mov	sp, r7
 800f804:	bd90      	pop	{r4, r7, pc}
 800f806:	bf00      	nop
 800f808:	2000035c 	.word	0x2000035c

0800f80c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	4603      	mov	r3, r0
 800f814:	603a      	str	r2, [r7, #0]
 800f816:	71fb      	strb	r3, [r7, #7]
 800f818:	460b      	mov	r3, r1
 800f81a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f81c:	79fb      	ldrb	r3, [r7, #7]
 800f81e:	4a09      	ldr	r2, [pc, #36]	; (800f844 <disk_ioctl+0x38>)
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4413      	add	r3, r2
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	691b      	ldr	r3, [r3, #16]
 800f828:	79fa      	ldrb	r2, [r7, #7]
 800f82a:	4906      	ldr	r1, [pc, #24]	; (800f844 <disk_ioctl+0x38>)
 800f82c:	440a      	add	r2, r1
 800f82e:	7a10      	ldrb	r0, [r2, #8]
 800f830:	79b9      	ldrb	r1, [r7, #6]
 800f832:	683a      	ldr	r2, [r7, #0]
 800f834:	4798      	blx	r3
 800f836:	4603      	mov	r3, r0
 800f838:	73fb      	strb	r3, [r7, #15]
  return res;
 800f83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	2000035c 	.word	0x2000035c

0800f848 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	3301      	adds	r3, #1
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f858:	89fb      	ldrh	r3, [r7, #14]
 800f85a:	021b      	lsls	r3, r3, #8
 800f85c:	b21a      	sxth	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	b21b      	sxth	r3, r3
 800f864:	4313      	orrs	r3, r2
 800f866:	b21b      	sxth	r3, r3
 800f868:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f86a:	89fb      	ldrh	r3, [r7, #14]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3714      	adds	r7, #20
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3303      	adds	r3, #3
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	021b      	lsls	r3, r3, #8
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	3202      	adds	r2, #2
 800f890:	7812      	ldrb	r2, [r2, #0]
 800f892:	4313      	orrs	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	021b      	lsls	r3, r3, #8
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	3201      	adds	r2, #1
 800f89e:	7812      	ldrb	r2, [r2, #0]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	021b      	lsls	r3, r3, #8
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	7812      	ldrb	r2, [r2, #0]
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	60fb      	str	r3, [r7, #12]
	return rv;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3714      	adds	r7, #20
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr

0800f8be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f8be:	b480      	push	{r7}
 800f8c0:	b083      	sub	sp, #12
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	1c5a      	adds	r2, r3, #1
 800f8ce:	607a      	str	r2, [r7, #4]
 800f8d0:	887a      	ldrh	r2, [r7, #2]
 800f8d2:	b2d2      	uxtb	r2, r2
 800f8d4:	701a      	strb	r2, [r3, #0]
 800f8d6:	887b      	ldrh	r3, [r7, #2]
 800f8d8:	0a1b      	lsrs	r3, r3, #8
 800f8da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	607a      	str	r2, [r7, #4]
 800f8e2:	887a      	ldrh	r2, [r7, #2]
 800f8e4:	b2d2      	uxtb	r2, r2
 800f8e6:	701a      	strb	r2, [r3, #0]
}
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	1c5a      	adds	r2, r3, #1
 800f902:	607a      	str	r2, [r7, #4]
 800f904:	683a      	ldr	r2, [r7, #0]
 800f906:	b2d2      	uxtb	r2, r2
 800f908:	701a      	strb	r2, [r3, #0]
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	0a1b      	lsrs	r3, r3, #8
 800f90e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	607a      	str	r2, [r7, #4]
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	b2d2      	uxtb	r2, r2
 800f91a:	701a      	strb	r2, [r3, #0]
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	0a1b      	lsrs	r3, r3, #8
 800f920:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	1c5a      	adds	r2, r3, #1
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	b2d2      	uxtb	r2, r2
 800f92c:	701a      	strb	r2, [r3, #0]
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	0a1b      	lsrs	r3, r3, #8
 800f932:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	607a      	str	r2, [r7, #4]
 800f93a:	683a      	ldr	r2, [r7, #0]
 800f93c:	b2d2      	uxtb	r2, r2
 800f93e:	701a      	strb	r2, [r3, #0]
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f94c:	b480      	push	{r7}
 800f94e:	b087      	sub	sp, #28
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00d      	beq.n	800f982 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f966:	693a      	ldr	r2, [r7, #16]
 800f968:	1c53      	adds	r3, r2, #1
 800f96a:	613b      	str	r3, [r7, #16]
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	1c59      	adds	r1, r3, #1
 800f970:	6179      	str	r1, [r7, #20]
 800f972:	7812      	ldrb	r2, [r2, #0]
 800f974:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	3b01      	subs	r3, #1
 800f97a:	607b      	str	r3, [r7, #4]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1f1      	bne.n	800f966 <mem_cpy+0x1a>
	}
}
 800f982:	bf00      	nop
 800f984:	371c      	adds	r7, #28
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f98e:	b480      	push	{r7}
 800f990:	b087      	sub	sp, #28
 800f992:	af00      	add	r7, sp, #0
 800f994:	60f8      	str	r0, [r7, #12]
 800f996:	60b9      	str	r1, [r7, #8]
 800f998:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	1c5a      	adds	r2, r3, #1
 800f9a2:	617a      	str	r2, [r7, #20]
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	b2d2      	uxtb	r2, r2
 800f9a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	607b      	str	r3, [r7, #4]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1f3      	bne.n	800f99e <mem_set+0x10>
}
 800f9b6:	bf00      	nop
 800f9b8:	371c      	adds	r7, #28
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f9c2:	b480      	push	{r7}
 800f9c4:	b089      	sub	sp, #36	; 0x24
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	60f8      	str	r0, [r7, #12]
 800f9ca:	60b9      	str	r1, [r7, #8]
 800f9cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	61fb      	str	r3, [r7, #28]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	1c5a      	adds	r2, r3, #1
 800f9de:	61fa      	str	r2, [r7, #28]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	61ba      	str	r2, [r7, #24]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	1acb      	subs	r3, r1, r3
 800f9ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3b01      	subs	r3, #1
 800f9f4:	607b      	str	r3, [r7, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d002      	beq.n	800fa02 <mem_cmp+0x40>
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d0eb      	beq.n	800f9da <mem_cmp+0x18>

	return r;
 800fa02:	697b      	ldr	r3, [r7, #20]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3724      	adds	r7, #36	; 0x24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fa1a:	e002      	b.n	800fa22 <chk_chr+0x12>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	3301      	adds	r3, #1
 800fa20:	607b      	str	r3, [r7, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d005      	beq.n	800fa36 <chk_chr+0x26>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d1f2      	bne.n	800fa1c <chk_chr+0xc>
	return *str;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	781b      	ldrb	r3, [r3, #0]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	370c      	adds	r7, #12
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800fa46:	b580      	push	{r7, lr}
 800fa48:	b082      	sub	sp, #8
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d009      	beq.n	800fa68 <lock_fs+0x22>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f002 fd8d 	bl	8012578 <ff_req_grant>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <lock_fs+0x22>
 800fa64:	2301      	movs	r3, #1
 800fa66:	e000      	b.n	800fa6a <lock_fs+0x24>
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b082      	sub	sp, #8
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00d      	beq.n	800faa0 <unlock_fs+0x2e>
 800fa84:	78fb      	ldrb	r3, [r7, #3]
 800fa86:	2b0c      	cmp	r3, #12
 800fa88:	d00a      	beq.n	800faa0 <unlock_fs+0x2e>
 800fa8a:	78fb      	ldrb	r3, [r7, #3]
 800fa8c:	2b0b      	cmp	r3, #11
 800fa8e:	d007      	beq.n	800faa0 <unlock_fs+0x2e>
 800fa90:	78fb      	ldrb	r3, [r7, #3]
 800fa92:	2b0f      	cmp	r3, #15
 800fa94:	d004      	beq.n	800faa0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f002 fd81 	bl	80125a2 <ff_rel_grant>
	}
}
 800faa0:	bf00      	nop
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fab2:	2300      	movs	r3, #0
 800fab4:	60bb      	str	r3, [r7, #8]
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	e029      	b.n	800fb10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fabc:	4a27      	ldr	r2, [pc, #156]	; (800fb5c <chk_lock+0xb4>)
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	011b      	lsls	r3, r3, #4
 800fac2:	4413      	add	r3, r2
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d01d      	beq.n	800fb06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800faca:	4a24      	ldr	r2, [pc, #144]	; (800fb5c <chk_lock+0xb4>)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	011b      	lsls	r3, r3, #4
 800fad0:	4413      	add	r3, r2
 800fad2:	681a      	ldr	r2, [r3, #0]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d116      	bne.n	800fb0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fadc:	4a1f      	ldr	r2, [pc, #124]	; (800fb5c <chk_lock+0xb4>)
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	011b      	lsls	r3, r3, #4
 800fae2:	4413      	add	r3, r2
 800fae4:	3304      	adds	r3, #4
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800faec:	429a      	cmp	r2, r3
 800faee:	d10c      	bne.n	800fb0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800faf0:	4a1a      	ldr	r2, [pc, #104]	; (800fb5c <chk_lock+0xb4>)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	011b      	lsls	r3, r3, #4
 800faf6:	4413      	add	r3, r2
 800faf8:	3308      	adds	r3, #8
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d102      	bne.n	800fb0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fb04:	e007      	b.n	800fb16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fb06:	2301      	movs	r3, #1
 800fb08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	60fb      	str	r3, [r7, #12]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d9d2      	bls.n	800fabc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2b02      	cmp	r3, #2
 800fb1a:	d109      	bne.n	800fb30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d102      	bne.n	800fb28 <chk_lock+0x80>
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d101      	bne.n	800fb2c <chk_lock+0x84>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	e010      	b.n	800fb4e <chk_lock+0xa6>
 800fb2c:	2312      	movs	r3, #18
 800fb2e:	e00e      	b.n	800fb4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d108      	bne.n	800fb48 <chk_lock+0xa0>
 800fb36:	4a09      	ldr	r2, [pc, #36]	; (800fb5c <chk_lock+0xb4>)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	011b      	lsls	r3, r3, #4
 800fb3c:	4413      	add	r3, r2
 800fb3e:	330c      	adds	r3, #12
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb46:	d101      	bne.n	800fb4c <chk_lock+0xa4>
 800fb48:	2310      	movs	r3, #16
 800fb4a:	e000      	b.n	800fb4e <chk_lock+0xa6>
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	2000033c 	.word	0x2000033c

0800fb60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb66:	2300      	movs	r3, #0
 800fb68:	607b      	str	r3, [r7, #4]
 800fb6a:	e002      	b.n	800fb72 <enq_lock+0x12>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	607b      	str	r3, [r7, #4]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d806      	bhi.n	800fb86 <enq_lock+0x26>
 800fb78:	4a09      	ldr	r2, [pc, #36]	; (800fba0 <enq_lock+0x40>)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	011b      	lsls	r3, r3, #4
 800fb7e:	4413      	add	r3, r2
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1f2      	bne.n	800fb6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b02      	cmp	r3, #2
 800fb8a:	bf14      	ite	ne
 800fb8c:	2301      	movne	r3, #1
 800fb8e:	2300      	moveq	r3, #0
 800fb90:	b2db      	uxtb	r3, r3
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	370c      	adds	r7, #12
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	2000033c 	.word	0x2000033c

0800fba4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fbae:	2300      	movs	r3, #0
 800fbb0:	60fb      	str	r3, [r7, #12]
 800fbb2:	e01f      	b.n	800fbf4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fbb4:	4a41      	ldr	r2, [pc, #260]	; (800fcbc <inc_lock+0x118>)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	011b      	lsls	r3, r3, #4
 800fbba:	4413      	add	r3, r2
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d113      	bne.n	800fbee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fbc6:	4a3d      	ldr	r2, [pc, #244]	; (800fcbc <inc_lock+0x118>)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	011b      	lsls	r3, r3, #4
 800fbcc:	4413      	add	r3, r2
 800fbce:	3304      	adds	r3, #4
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d109      	bne.n	800fbee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fbda:	4a38      	ldr	r2, [pc, #224]	; (800fcbc <inc_lock+0x118>)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	011b      	lsls	r3, r3, #4
 800fbe0:	4413      	add	r3, r2
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d006      	beq.n	800fbfc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	60fb      	str	r3, [r7, #12]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d9dc      	bls.n	800fbb4 <inc_lock+0x10>
 800fbfa:	e000      	b.n	800fbfe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fbfc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2b02      	cmp	r3, #2
 800fc02:	d132      	bne.n	800fc6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fc04:	2300      	movs	r3, #0
 800fc06:	60fb      	str	r3, [r7, #12]
 800fc08:	e002      	b.n	800fc10 <inc_lock+0x6c>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	60fb      	str	r3, [r7, #12]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d806      	bhi.n	800fc24 <inc_lock+0x80>
 800fc16:	4a29      	ldr	r2, [pc, #164]	; (800fcbc <inc_lock+0x118>)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	011b      	lsls	r3, r3, #4
 800fc1c:	4413      	add	r3, r2
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d1f2      	bne.n	800fc0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d101      	bne.n	800fc2e <inc_lock+0x8a>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	e040      	b.n	800fcb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	4922      	ldr	r1, [pc, #136]	; (800fcbc <inc_lock+0x118>)
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	011b      	lsls	r3, r3, #4
 800fc38:	440b      	add	r3, r1
 800fc3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	689a      	ldr	r2, [r3, #8]
 800fc40:	491e      	ldr	r1, [pc, #120]	; (800fcbc <inc_lock+0x118>)
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	011b      	lsls	r3, r3, #4
 800fc46:	440b      	add	r3, r1
 800fc48:	3304      	adds	r3, #4
 800fc4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	695a      	ldr	r2, [r3, #20]
 800fc50:	491a      	ldr	r1, [pc, #104]	; (800fcbc <inc_lock+0x118>)
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	011b      	lsls	r3, r3, #4
 800fc56:	440b      	add	r3, r1
 800fc58:	3308      	adds	r3, #8
 800fc5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fc5c:	4a17      	ldr	r2, [pc, #92]	; (800fcbc <inc_lock+0x118>)
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	011b      	lsls	r3, r3, #4
 800fc62:	4413      	add	r3, r2
 800fc64:	330c      	adds	r3, #12
 800fc66:	2200      	movs	r2, #0
 800fc68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d009      	beq.n	800fc84 <inc_lock+0xe0>
 800fc70:	4a12      	ldr	r2, [pc, #72]	; (800fcbc <inc_lock+0x118>)
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	011b      	lsls	r3, r3, #4
 800fc76:	4413      	add	r3, r2
 800fc78:	330c      	adds	r3, #12
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <inc_lock+0xe0>
 800fc80:	2300      	movs	r3, #0
 800fc82:	e015      	b.n	800fcb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d108      	bne.n	800fc9c <inc_lock+0xf8>
 800fc8a:	4a0c      	ldr	r2, [pc, #48]	; (800fcbc <inc_lock+0x118>)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	011b      	lsls	r3, r3, #4
 800fc90:	4413      	add	r3, r2
 800fc92:	330c      	adds	r3, #12
 800fc94:	881b      	ldrh	r3, [r3, #0]
 800fc96:	3301      	adds	r3, #1
 800fc98:	b29a      	uxth	r2, r3
 800fc9a:	e001      	b.n	800fca0 <inc_lock+0xfc>
 800fc9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fca0:	4906      	ldr	r1, [pc, #24]	; (800fcbc <inc_lock+0x118>)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	011b      	lsls	r3, r3, #4
 800fca6:	440b      	add	r3, r1
 800fca8:	330c      	adds	r3, #12
 800fcaa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3301      	adds	r3, #1
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3714      	adds	r7, #20
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr
 800fcbc:	2000033c 	.word	0x2000033c

0800fcc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b085      	sub	sp, #20
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3b01      	subs	r3, #1
 800fccc:	607b      	str	r3, [r7, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d825      	bhi.n	800fd20 <dec_lock+0x60>
		n = Files[i].ctr;
 800fcd4:	4a17      	ldr	r2, [pc, #92]	; (800fd34 <dec_lock+0x74>)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	011b      	lsls	r3, r3, #4
 800fcda:	4413      	add	r3, r2
 800fcdc:	330c      	adds	r3, #12
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fce2:	89fb      	ldrh	r3, [r7, #14]
 800fce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fce8:	d101      	bne.n	800fcee <dec_lock+0x2e>
 800fcea:	2300      	movs	r3, #0
 800fcec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fcee:	89fb      	ldrh	r3, [r7, #14]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <dec_lock+0x3a>
 800fcf4:	89fb      	ldrh	r3, [r7, #14]
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fcfa:	4a0e      	ldr	r2, [pc, #56]	; (800fd34 <dec_lock+0x74>)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	011b      	lsls	r3, r3, #4
 800fd00:	4413      	add	r3, r2
 800fd02:	330c      	adds	r3, #12
 800fd04:	89fa      	ldrh	r2, [r7, #14]
 800fd06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fd08:	89fb      	ldrh	r3, [r7, #14]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d105      	bne.n	800fd1a <dec_lock+0x5a>
 800fd0e:	4a09      	ldr	r2, [pc, #36]	; (800fd34 <dec_lock+0x74>)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	011b      	lsls	r3, r3, #4
 800fd14:	4413      	add	r3, r2
 800fd16:	2200      	movs	r2, #0
 800fd18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	737b      	strb	r3, [r7, #13]
 800fd1e:	e001      	b.n	800fd24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fd20:	2302      	movs	r3, #2
 800fd22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fd24:	7b7b      	ldrb	r3, [r7, #13]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	2000033c 	.word	0x2000033c

0800fd38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fd40:	2300      	movs	r3, #0
 800fd42:	60fb      	str	r3, [r7, #12]
 800fd44:	e010      	b.n	800fd68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fd46:	4a0d      	ldr	r2, [pc, #52]	; (800fd7c <clear_lock+0x44>)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	011b      	lsls	r3, r3, #4
 800fd4c:	4413      	add	r3, r2
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d105      	bne.n	800fd62 <clear_lock+0x2a>
 800fd56:	4a09      	ldr	r2, [pc, #36]	; (800fd7c <clear_lock+0x44>)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	011b      	lsls	r3, r3, #4
 800fd5c:	4413      	add	r3, r2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	3301      	adds	r3, #1
 800fd66:	60fb      	str	r3, [r7, #12]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d9eb      	bls.n	800fd46 <clear_lock+0xe>
	}
}
 800fd6e:	bf00      	nop
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	2000033c 	.word	0x2000033c

0800fd80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	78db      	ldrb	r3, [r3, #3]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d034      	beq.n	800fdfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	7858      	ldrb	r0, [r3, #1]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fda4:	2301      	movs	r3, #1
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	f7ff fd10 	bl	800f7cc <disk_write>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	73fb      	strb	r3, [r7, #15]
 800fdb6:	e022      	b.n	800fdfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc2:	697a      	ldr	r2, [r7, #20]
 800fdc4:	1ad2      	subs	r2, r2, r3
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	69db      	ldr	r3, [r3, #28]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d217      	bcs.n	800fdfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	789b      	ldrb	r3, [r3, #2]
 800fdd2:	613b      	str	r3, [r7, #16]
 800fdd4:	e010      	b.n	800fdf8 <sync_window+0x78>
					wsect += fs->fsize;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	69db      	ldr	r3, [r3, #28]
 800fdda:	697a      	ldr	r2, [r7, #20]
 800fddc:	4413      	add	r3, r2
 800fdde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	7858      	ldrb	r0, [r3, #1]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fdea:	2301      	movs	r3, #1
 800fdec:	697a      	ldr	r2, [r7, #20]
 800fdee:	f7ff fced 	bl	800f7cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	613b      	str	r3, [r7, #16]
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d8eb      	bhi.n	800fdd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3718      	adds	r7, #24
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fe12:	2300      	movs	r3, #0
 800fe14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1a:	683a      	ldr	r2, [r7, #0]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d01b      	beq.n	800fe58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff ffad 	bl	800fd80 <sync_window>
 800fe26:	4603      	mov	r3, r0
 800fe28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fe2a:	7bfb      	ldrb	r3, [r7, #15]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d113      	bne.n	800fe58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	7858      	ldrb	r0, [r3, #1]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	683a      	ldr	r2, [r7, #0]
 800fe3e:	f7ff fca5 	bl	800f78c <disk_read>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d004      	beq.n	800fe52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fe48:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	683a      	ldr	r2, [r7, #0]
 800fe56:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7ff ff87 	bl	800fd80 <sync_window>
 800fe72:	4603      	mov	r3, r0
 800fe74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d158      	bne.n	800ff2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	2b03      	cmp	r3, #3
 800fe82:	d148      	bne.n	800ff16 <sync_fs+0xb2>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	791b      	ldrb	r3, [r3, #4]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d144      	bne.n	800ff16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	3334      	adds	r3, #52	; 0x34
 800fe90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe94:	2100      	movs	r1, #0
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7ff fd79 	bl	800f98e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	3334      	adds	r3, #52	; 0x34
 800fea0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fea4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7ff fd08 	bl	800f8be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3334      	adds	r3, #52	; 0x34
 800feb2:	4921      	ldr	r1, [pc, #132]	; (800ff38 <sync_fs+0xd4>)
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff fd1d 	bl	800f8f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	3334      	adds	r3, #52	; 0x34
 800febe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fec2:	491e      	ldr	r1, [pc, #120]	; (800ff3c <sync_fs+0xd8>)
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff fd15 	bl	800f8f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	3334      	adds	r3, #52	; 0x34
 800fece:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	695b      	ldr	r3, [r3, #20]
 800fed6:	4619      	mov	r1, r3
 800fed8:	4610      	mov	r0, r2
 800feda:	f7ff fd0b 	bl	800f8f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	3334      	adds	r3, #52	; 0x34
 800fee2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	4619      	mov	r1, r3
 800feec:	4610      	mov	r0, r2
 800feee:	f7ff fd01 	bl	800f8f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6a1b      	ldr	r3, [r3, #32]
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	7858      	ldrb	r0, [r3, #1]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	f7ff fc5e 	bl	800f7cc <disk_write>
			fs->fsi_flag = 0;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2200      	movs	r2, #0
 800ff14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	785b      	ldrb	r3, [r3, #1]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7ff fc74 	bl	800f80c <disk_ioctl>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d001      	beq.n	800ff2e <sync_fs+0xca>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ff2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3710      	adds	r7, #16
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	41615252 	.word	0x41615252
 800ff3c:	61417272 	.word	0x61417272

0800ff40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	3b02      	subs	r3, #2
 800ff4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	699b      	ldr	r3, [r3, #24]
 800ff54:	3b02      	subs	r3, #2
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d301      	bcc.n	800ff60 <clust2sect+0x20>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	e008      	b.n	800ff72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	895b      	ldrh	r3, [r3, #10]
 800ff64:	461a      	mov	r2, r3
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	fb03 f202 	mul.w	r2, r3, r2
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff70:	4413      	add	r3, r2
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	370c      	adds	r7, #12
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b086      	sub	sp, #24
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d904      	bls.n	800ff9e <get_fat+0x20>
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	699b      	ldr	r3, [r3, #24]
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d302      	bcc.n	800ffa4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	617b      	str	r3, [r7, #20]
 800ffa2:	e08c      	b.n	80100be <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d045      	beq.n	801003e <get_fat+0xc0>
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	d05d      	beq.n	8010072 <get_fat+0xf4>
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d177      	bne.n	80100aa <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	60fb      	str	r3, [r7, #12]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	085b      	lsrs	r3, r3, #1
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	0a5b      	lsrs	r3, r3, #9
 800ffd0:	4413      	add	r3, r2
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	6938      	ldr	r0, [r7, #16]
 800ffd6:	f7ff ff17 	bl	800fe08 <move_window>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d167      	bne.n	80100b0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	1c5a      	adds	r2, r3, #1
 800ffe4:	60fa      	str	r2, [r7, #12]
 800ffe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffea:	693a      	ldr	r2, [r7, #16]
 800ffec:	4413      	add	r3, r2
 800ffee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fff2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	0a5b      	lsrs	r3, r3, #9
 800fffc:	4413      	add	r3, r2
 800fffe:	4619      	mov	r1, r3
 8010000:	6938      	ldr	r0, [r7, #16]
 8010002:	f7ff ff01 	bl	800fe08 <move_window>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d153      	bne.n	80100b4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	4413      	add	r3, r2
 8010016:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801001a:	021b      	lsls	r3, r3, #8
 801001c:	461a      	mov	r2, r3
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	4313      	orrs	r3, r2
 8010022:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	f003 0301 	and.w	r3, r3, #1
 801002a:	2b00      	cmp	r3, #0
 801002c:	d002      	beq.n	8010034 <get_fat+0xb6>
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	091b      	lsrs	r3, r3, #4
 8010032:	e002      	b.n	801003a <get_fat+0xbc>
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801003a:	617b      	str	r3, [r7, #20]
			break;
 801003c:	e03f      	b.n	80100be <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	0a1b      	lsrs	r3, r3, #8
 8010046:	4413      	add	r3, r2
 8010048:	4619      	mov	r1, r3
 801004a:	6938      	ldr	r0, [r7, #16]
 801004c:	f7ff fedc 	bl	800fe08 <move_window>
 8010050:	4603      	mov	r3, r0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d130      	bne.n	80100b8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010064:	4413      	add	r3, r2
 8010066:	4618      	mov	r0, r3
 8010068:	f7ff fbee 	bl	800f848 <ld_word>
 801006c:	4603      	mov	r3, r0
 801006e:	617b      	str	r3, [r7, #20]
			break;
 8010070:	e025      	b.n	80100be <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	09db      	lsrs	r3, r3, #7
 801007a:	4413      	add	r3, r2
 801007c:	4619      	mov	r1, r3
 801007e:	6938      	ldr	r0, [r7, #16]
 8010080:	f7ff fec2 	bl	800fe08 <move_window>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d118      	bne.n	80100bc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010098:	4413      	add	r3, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fbec 	bl	800f878 <ld_dword>
 80100a0:	4603      	mov	r3, r0
 80100a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80100a6:	617b      	str	r3, [r7, #20]
			break;
 80100a8:	e009      	b.n	80100be <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80100aa:	2301      	movs	r3, #1
 80100ac:	617b      	str	r3, [r7, #20]
 80100ae:	e006      	b.n	80100be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100b0:	bf00      	nop
 80100b2:	e004      	b.n	80100be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100b4:	bf00      	nop
 80100b6:	e002      	b.n	80100be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80100b8:	bf00      	nop
 80100ba:	e000      	b.n	80100be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100bc:	bf00      	nop
		}
	}

	return val;
 80100be:	697b      	ldr	r3, [r7, #20]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3718      	adds	r7, #24
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80100c8:	b590      	push	{r4, r7, lr}
 80100ca:	b089      	sub	sp, #36	; 0x24
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80100d4:	2302      	movs	r3, #2
 80100d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	2b01      	cmp	r3, #1
 80100dc:	f240 80d6 	bls.w	801028c <put_fat+0x1c4>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	699b      	ldr	r3, [r3, #24]
 80100e4:	68ba      	ldr	r2, [r7, #8]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	f080 80d0 	bcs.w	801028c <put_fat+0x1c4>
		switch (fs->fs_type) {
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	d073      	beq.n	80101dc <put_fat+0x114>
 80100f4:	2b03      	cmp	r3, #3
 80100f6:	f000 8091 	beq.w	801021c <put_fat+0x154>
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	f040 80c6 	bne.w	801028c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	61bb      	str	r3, [r7, #24]
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	085b      	lsrs	r3, r3, #1
 8010108:	69ba      	ldr	r2, [r7, #24]
 801010a:	4413      	add	r3, r2
 801010c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	0a5b      	lsrs	r3, r3, #9
 8010116:	4413      	add	r3, r2
 8010118:	4619      	mov	r1, r3
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f7ff fe74 	bl	800fe08 <move_window>
 8010120:	4603      	mov	r3, r0
 8010122:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010124:	7ffb      	ldrb	r3, [r7, #31]
 8010126:	2b00      	cmp	r3, #0
 8010128:	f040 80a9 	bne.w	801027e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010132:	69bb      	ldr	r3, [r7, #24]
 8010134:	1c59      	adds	r1, r3, #1
 8010136:	61b9      	str	r1, [r7, #24]
 8010138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801013c:	4413      	add	r3, r2
 801013e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	f003 0301 	and.w	r3, r3, #1
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00d      	beq.n	8010166 <put_fat+0x9e>
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	b25b      	sxtb	r3, r3
 8010150:	f003 030f 	and.w	r3, r3, #15
 8010154:	b25a      	sxtb	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	b2db      	uxtb	r3, r3
 801015a:	011b      	lsls	r3, r3, #4
 801015c:	b25b      	sxtb	r3, r3
 801015e:	4313      	orrs	r3, r2
 8010160:	b25b      	sxtb	r3, r3
 8010162:	b2db      	uxtb	r3, r3
 8010164:	e001      	b.n	801016a <put_fat+0xa2>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	b2db      	uxtb	r3, r3
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2201      	movs	r2, #1
 8010172:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	0a5b      	lsrs	r3, r3, #9
 801017c:	4413      	add	r3, r2
 801017e:	4619      	mov	r1, r3
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f7ff fe41 	bl	800fe08 <move_window>
 8010186:	4603      	mov	r3, r0
 8010188:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801018a:	7ffb      	ldrb	r3, [r7, #31]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d178      	bne.n	8010282 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010196:	69bb      	ldr	r3, [r7, #24]
 8010198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801019c:	4413      	add	r3, r2
 801019e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	f003 0301 	and.w	r3, r3, #1
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d003      	beq.n	80101b2 <put_fat+0xea>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	091b      	lsrs	r3, r3, #4
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	e00e      	b.n	80101d0 <put_fat+0x108>
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	b25b      	sxtb	r3, r3
 80101b8:	f023 030f 	bic.w	r3, r3, #15
 80101bc:	b25a      	sxtb	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	0a1b      	lsrs	r3, r3, #8
 80101c2:	b25b      	sxtb	r3, r3
 80101c4:	f003 030f 	and.w	r3, r3, #15
 80101c8:	b25b      	sxtb	r3, r3
 80101ca:	4313      	orrs	r3, r2
 80101cc:	b25b      	sxtb	r3, r3
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	697a      	ldr	r2, [r7, #20]
 80101d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2201      	movs	r2, #1
 80101d8:	70da      	strb	r2, [r3, #3]
			break;
 80101da:	e057      	b.n	801028c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	0a1b      	lsrs	r3, r3, #8
 80101e4:	4413      	add	r3, r2
 80101e6:	4619      	mov	r1, r3
 80101e8:	68f8      	ldr	r0, [r7, #12]
 80101ea:	f7ff fe0d 	bl	800fe08 <move_window>
 80101ee:	4603      	mov	r3, r0
 80101f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101f2:	7ffb      	ldrb	r3, [r7, #31]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d146      	bne.n	8010286 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010206:	4413      	add	r3, r2
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	b292      	uxth	r2, r2
 801020c:	4611      	mov	r1, r2
 801020e:	4618      	mov	r0, r3
 8010210:	f7ff fb55 	bl	800f8be <st_word>
			fs->wflag = 1;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2201      	movs	r2, #1
 8010218:	70da      	strb	r2, [r3, #3]
			break;
 801021a:	e037      	b.n	801028c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	09db      	lsrs	r3, r3, #7
 8010224:	4413      	add	r3, r2
 8010226:	4619      	mov	r1, r3
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f7ff fded 	bl	800fe08 <move_window>
 801022e:	4603      	mov	r3, r0
 8010230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010232:	7ffb      	ldrb	r3, [r7, #31]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d128      	bne.n	801028a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801024c:	4413      	add	r3, r2
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff fb12 	bl	800f878 <ld_dword>
 8010254:	4603      	mov	r3, r0
 8010256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801025a:	4323      	orrs	r3, r4
 801025c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801026c:	4413      	add	r3, r2
 801026e:	6879      	ldr	r1, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	f7ff fb3f 	bl	800f8f4 <st_dword>
			fs->wflag = 1;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2201      	movs	r2, #1
 801027a:	70da      	strb	r2, [r3, #3]
			break;
 801027c:	e006      	b.n	801028c <put_fat+0x1c4>
			if (res != FR_OK) break;
 801027e:	bf00      	nop
 8010280:	e004      	b.n	801028c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010282:	bf00      	nop
 8010284:	e002      	b.n	801028c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010286:	bf00      	nop
 8010288:	e000      	b.n	801028c <put_fat+0x1c4>
			if (res != FR_OK) break;
 801028a:	bf00      	nop
		}
	}
	return res;
 801028c:	7ffb      	ldrb	r3, [r7, #31]
}
 801028e:	4618      	mov	r0, r3
 8010290:	3724      	adds	r7, #36	; 0x24
 8010292:	46bd      	mov	sp, r7
 8010294:	bd90      	pop	{r4, r7, pc}

08010296 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b088      	sub	sp, #32
 801029a:	af00      	add	r7, sp, #0
 801029c:	60f8      	str	r0, [r7, #12]
 801029e:	60b9      	str	r1, [r7, #8]
 80102a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80102a2:	2300      	movs	r3, #0
 80102a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d904      	bls.n	80102bc <remove_chain+0x26>
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	699b      	ldr	r3, [r3, #24]
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d301      	bcc.n	80102c0 <remove_chain+0x2a>
 80102bc:	2302      	movs	r3, #2
 80102be:	e04b      	b.n	8010358 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d00c      	beq.n	80102e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80102c6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ca:	6879      	ldr	r1, [r7, #4]
 80102cc:	69b8      	ldr	r0, [r7, #24]
 80102ce:	f7ff fefb 	bl	80100c8 <put_fat>
 80102d2:	4603      	mov	r3, r0
 80102d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80102d6:	7ffb      	ldrb	r3, [r7, #31]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d001      	beq.n	80102e0 <remove_chain+0x4a>
 80102dc:	7ffb      	ldrb	r3, [r7, #31]
 80102de:	e03b      	b.n	8010358 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80102e0:	68b9      	ldr	r1, [r7, #8]
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f7ff fe4b 	bl	800ff7e <get_fat>
 80102e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d031      	beq.n	8010354 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d101      	bne.n	80102fa <remove_chain+0x64>
 80102f6:	2302      	movs	r3, #2
 80102f8:	e02e      	b.n	8010358 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010300:	d101      	bne.n	8010306 <remove_chain+0x70>
 8010302:	2301      	movs	r3, #1
 8010304:	e028      	b.n	8010358 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010306:	2200      	movs	r2, #0
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	69b8      	ldr	r0, [r7, #24]
 801030c:	f7ff fedc 	bl	80100c8 <put_fat>
 8010310:	4603      	mov	r3, r0
 8010312:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010314:	7ffb      	ldrb	r3, [r7, #31]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d001      	beq.n	801031e <remove_chain+0x88>
 801031a:	7ffb      	ldrb	r3, [r7, #31]
 801031c:	e01c      	b.n	8010358 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	695a      	ldr	r2, [r3, #20]
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	699b      	ldr	r3, [r3, #24]
 8010326:	3b02      	subs	r3, #2
 8010328:	429a      	cmp	r2, r3
 801032a:	d20b      	bcs.n	8010344 <remove_chain+0xae>
			fs->free_clst++;
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	695b      	ldr	r3, [r3, #20]
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	791b      	ldrb	r3, [r3, #4]
 801033a:	f043 0301 	orr.w	r3, r3, #1
 801033e:	b2da      	uxtb	r2, r3
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	699b      	ldr	r3, [r3, #24]
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	429a      	cmp	r2, r3
 8010350:	d3c6      	bcc.n	80102e0 <remove_chain+0x4a>
 8010352:	e000      	b.n	8010356 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010354:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3720      	adds	r7, #32
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b088      	sub	sp, #32
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d10d      	bne.n	8010392 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	691b      	ldr	r3, [r3, #16]
 801037a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d004      	beq.n	801038c <create_chain+0x2c>
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	699b      	ldr	r3, [r3, #24]
 8010386:	69ba      	ldr	r2, [r7, #24]
 8010388:	429a      	cmp	r2, r3
 801038a:	d31b      	bcc.n	80103c4 <create_chain+0x64>
 801038c:	2301      	movs	r3, #1
 801038e:	61bb      	str	r3, [r7, #24]
 8010390:	e018      	b.n	80103c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010392:	6839      	ldr	r1, [r7, #0]
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7ff fdf2 	bl	800ff7e <get_fat>
 801039a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d801      	bhi.n	80103a6 <create_chain+0x46>
 80103a2:	2301      	movs	r3, #1
 80103a4:	e070      	b.n	8010488 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ac:	d101      	bne.n	80103b2 <create_chain+0x52>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	e06a      	b.n	8010488 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	699b      	ldr	r3, [r3, #24]
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d201      	bcs.n	80103c0 <create_chain+0x60>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	e063      	b.n	8010488 <create_chain+0x128>
		scl = clst;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	3301      	adds	r3, #1
 80103cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	699b      	ldr	r3, [r3, #24]
 80103d2:	69fa      	ldr	r2, [r7, #28]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d307      	bcc.n	80103e8 <create_chain+0x88>
				ncl = 2;
 80103d8:	2302      	movs	r3, #2
 80103da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80103dc:	69fa      	ldr	r2, [r7, #28]
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d901      	bls.n	80103e8 <create_chain+0x88>
 80103e4:	2300      	movs	r3, #0
 80103e6:	e04f      	b.n	8010488 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80103e8:	69f9      	ldr	r1, [r7, #28]
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7ff fdc7 	bl	800ff7e <get_fat>
 80103f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00e      	beq.n	8010416 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d003      	beq.n	8010406 <create_chain+0xa6>
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010404:	d101      	bne.n	801040a <create_chain+0xaa>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	e03e      	b.n	8010488 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801040a:	69fa      	ldr	r2, [r7, #28]
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	429a      	cmp	r2, r3
 8010410:	d1da      	bne.n	80103c8 <create_chain+0x68>
 8010412:	2300      	movs	r3, #0
 8010414:	e038      	b.n	8010488 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010416:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010418:	f04f 32ff 	mov.w	r2, #4294967295
 801041c:	69f9      	ldr	r1, [r7, #28]
 801041e:	6938      	ldr	r0, [r7, #16]
 8010420:	f7ff fe52 	bl	80100c8 <put_fat>
 8010424:	4603      	mov	r3, r0
 8010426:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010428:	7dfb      	ldrb	r3, [r7, #23]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d109      	bne.n	8010442 <create_chain+0xe2>
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d006      	beq.n	8010442 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010434:	69fa      	ldr	r2, [r7, #28]
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6938      	ldr	r0, [r7, #16]
 801043a:	f7ff fe45 	bl	80100c8 <put_fat>
 801043e:	4603      	mov	r3, r0
 8010440:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d116      	bne.n	8010476 <create_chain+0x116>
		fs->last_clst = ncl;
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	69fa      	ldr	r2, [r7, #28]
 801044c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	695a      	ldr	r2, [r3, #20]
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	699b      	ldr	r3, [r3, #24]
 8010456:	3b02      	subs	r3, #2
 8010458:	429a      	cmp	r2, r3
 801045a:	d804      	bhi.n	8010466 <create_chain+0x106>
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	695b      	ldr	r3, [r3, #20]
 8010460:	1e5a      	subs	r2, r3, #1
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	791b      	ldrb	r3, [r3, #4]
 801046a:	f043 0301 	orr.w	r3, r3, #1
 801046e:	b2da      	uxtb	r2, r3
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	711a      	strb	r2, [r3, #4]
 8010474:	e007      	b.n	8010486 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010476:	7dfb      	ldrb	r3, [r7, #23]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d102      	bne.n	8010482 <create_chain+0x122>
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	e000      	b.n	8010484 <create_chain+0x124>
 8010482:	2301      	movs	r3, #1
 8010484:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010486:	69fb      	ldr	r3, [r7, #28]
}
 8010488:	4618      	mov	r0, r3
 801048a:	3720      	adds	r7, #32
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010490:	b480      	push	{r7}
 8010492:	b087      	sub	sp, #28
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a4:	3304      	adds	r3, #4
 80104a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	0a5b      	lsrs	r3, r3, #9
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	8952      	ldrh	r2, [r2, #10]
 80104b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80104b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	1d1a      	adds	r2, r3, #4
 80104ba:	613a      	str	r2, [r7, #16]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d101      	bne.n	80104ca <clmt_clust+0x3a>
 80104c6:	2300      	movs	r3, #0
 80104c8:	e010      	b.n	80104ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d307      	bcc.n	80104e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	617b      	str	r3, [r7, #20]
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	3304      	adds	r3, #4
 80104de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80104e0:	e7e9      	b.n	80104b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80104e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	4413      	add	r3, r2
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	371c      	adds	r7, #28
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b086      	sub	sp, #24
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801050e:	d204      	bcs.n	801051a <dir_sdi+0x22>
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	f003 031f 	and.w	r3, r3, #31
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <dir_sdi+0x26>
		return FR_INT_ERR;
 801051a:	2302      	movs	r3, #2
 801051c:	e063      	b.n	80105e6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	683a      	ldr	r2, [r7, #0]
 8010522:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d106      	bne.n	801053e <dir_sdi+0x46>
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	2b02      	cmp	r3, #2
 8010536:	d902      	bls.n	801053e <dir_sdi+0x46>
		clst = fs->dirbase;
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801053c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d10c      	bne.n	801055e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	095b      	lsrs	r3, r3, #5
 8010548:	693a      	ldr	r2, [r7, #16]
 801054a:	8912      	ldrh	r2, [r2, #8]
 801054c:	4293      	cmp	r3, r2
 801054e:	d301      	bcc.n	8010554 <dir_sdi+0x5c>
 8010550:	2302      	movs	r3, #2
 8010552:	e048      	b.n	80105e6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	61da      	str	r2, [r3, #28]
 801055c:	e029      	b.n	80105b2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	895b      	ldrh	r3, [r3, #10]
 8010562:	025b      	lsls	r3, r3, #9
 8010564:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010566:	e019      	b.n	801059c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6979      	ldr	r1, [r7, #20]
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff fd06 	bl	800ff7e <get_fat>
 8010572:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801057a:	d101      	bne.n	8010580 <dir_sdi+0x88>
 801057c:	2301      	movs	r3, #1
 801057e:	e032      	b.n	80105e6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d904      	bls.n	8010590 <dir_sdi+0x98>
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	697a      	ldr	r2, [r7, #20]
 801058c:	429a      	cmp	r2, r3
 801058e:	d301      	bcc.n	8010594 <dir_sdi+0x9c>
 8010590:	2302      	movs	r3, #2
 8010592:	e028      	b.n	80105e6 <dir_sdi+0xee>
			ofs -= csz;
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d2e1      	bcs.n	8010568 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80105a4:	6979      	ldr	r1, [r7, #20]
 80105a6:	6938      	ldr	r0, [r7, #16]
 80105a8:	f7ff fcca 	bl	800ff40 <clust2sect>
 80105ac:	4602      	mov	r2, r0
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	69db      	ldr	r3, [r3, #28]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <dir_sdi+0xcc>
 80105c0:	2302      	movs	r3, #2
 80105c2:	e010      	b.n	80105e6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	69da      	ldr	r2, [r3, #28]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	0a5b      	lsrs	r3, r3, #9
 80105cc:	441a      	add	r2, r3
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105de:	441a      	add	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}

080105ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b086      	sub	sp, #24
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
 80105f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	695b      	ldr	r3, [r3, #20]
 8010602:	3320      	adds	r3, #32
 8010604:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	69db      	ldr	r3, [r3, #28]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d003      	beq.n	8010616 <dir_next+0x28>
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010614:	d301      	bcc.n	801061a <dir_next+0x2c>
 8010616:	2304      	movs	r3, #4
 8010618:	e0aa      	b.n	8010770 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010620:	2b00      	cmp	r3, #0
 8010622:	f040 8098 	bne.w	8010756 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	69db      	ldr	r3, [r3, #28]
 801062a:	1c5a      	adds	r2, r3, #1
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10b      	bne.n	8010650 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	095b      	lsrs	r3, r3, #5
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	8912      	ldrh	r2, [r2, #8]
 8010640:	4293      	cmp	r3, r2
 8010642:	f0c0 8088 	bcc.w	8010756 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	61da      	str	r2, [r3, #28]
 801064c:	2304      	movs	r3, #4
 801064e:	e08f      	b.n	8010770 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	0a5b      	lsrs	r3, r3, #9
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	8952      	ldrh	r2, [r2, #10]
 8010658:	3a01      	subs	r2, #1
 801065a:	4013      	ands	r3, r2
 801065c:	2b00      	cmp	r3, #0
 801065e:	d17a      	bne.n	8010756 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010660:	687a      	ldr	r2, [r7, #4]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	4619      	mov	r1, r3
 8010668:	4610      	mov	r0, r2
 801066a:	f7ff fc88 	bl	800ff7e <get_fat>
 801066e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	2b01      	cmp	r3, #1
 8010674:	d801      	bhi.n	801067a <dir_next+0x8c>
 8010676:	2302      	movs	r3, #2
 8010678:	e07a      	b.n	8010770 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010680:	d101      	bne.n	8010686 <dir_next+0x98>
 8010682:	2301      	movs	r3, #1
 8010684:	e074      	b.n	8010770 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	699b      	ldr	r3, [r3, #24]
 801068a:	697a      	ldr	r2, [r7, #20]
 801068c:	429a      	cmp	r2, r3
 801068e:	d358      	bcc.n	8010742 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d104      	bne.n	80106a0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	61da      	str	r2, [r3, #28]
 801069c:	2304      	movs	r3, #4
 801069e:	e067      	b.n	8010770 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	699b      	ldr	r3, [r3, #24]
 80106a6:	4619      	mov	r1, r3
 80106a8:	4610      	mov	r0, r2
 80106aa:	f7ff fe59 	bl	8010360 <create_chain>
 80106ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <dir_next+0xcc>
 80106b6:	2307      	movs	r3, #7
 80106b8:	e05a      	b.n	8010770 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d101      	bne.n	80106c4 <dir_next+0xd6>
 80106c0:	2302      	movs	r3, #2
 80106c2:	e055      	b.n	8010770 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ca:	d101      	bne.n	80106d0 <dir_next+0xe2>
 80106cc:	2301      	movs	r3, #1
 80106ce:	e04f      	b.n	8010770 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f7ff fb55 	bl	800fd80 <sync_window>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d001      	beq.n	80106e0 <dir_next+0xf2>
 80106dc:	2301      	movs	r3, #1
 80106de:	e047      	b.n	8010770 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	3334      	adds	r3, #52	; 0x34
 80106e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106e8:	2100      	movs	r1, #0
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7ff f94f 	bl	800f98e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80106f0:	2300      	movs	r3, #0
 80106f2:	613b      	str	r3, [r7, #16]
 80106f4:	6979      	ldr	r1, [r7, #20]
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f7ff fc22 	bl	800ff40 <clust2sect>
 80106fc:	4602      	mov	r2, r0
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	631a      	str	r2, [r3, #48]	; 0x30
 8010702:	e012      	b.n	801072a <dir_next+0x13c>
						fs->wflag = 1;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2201      	movs	r2, #1
 8010708:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801070a:	68f8      	ldr	r0, [r7, #12]
 801070c:	f7ff fb38 	bl	800fd80 <sync_window>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d001      	beq.n	801071a <dir_next+0x12c>
 8010716:	2301      	movs	r3, #1
 8010718:	e02a      	b.n	8010770 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	3301      	adds	r3, #1
 801071e:	613b      	str	r3, [r7, #16]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010724:	1c5a      	adds	r2, r3, #1
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	631a      	str	r2, [r3, #48]	; 0x30
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	895b      	ldrh	r3, [r3, #10]
 801072e:	461a      	mov	r2, r3
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	4293      	cmp	r3, r2
 8010734:	d3e6      	bcc.n	8010704 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	1ad2      	subs	r2, r2, r3
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	697a      	ldr	r2, [r7, #20]
 8010746:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010748:	6979      	ldr	r1, [r7, #20]
 801074a:	68f8      	ldr	r0, [r7, #12]
 801074c:	f7ff fbf8 	bl	800ff40 <clust2sect>
 8010750:	4602      	mov	r2, r0
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	68ba      	ldr	r2, [r7, #8]
 801075a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010768:	441a      	add	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3718      	adds	r7, #24
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010788:	2100      	movs	r1, #0
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f7ff feb4 	bl	80104f8 <dir_sdi>
 8010790:	4603      	mov	r3, r0
 8010792:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010794:	7dfb      	ldrb	r3, [r7, #23]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d12b      	bne.n	80107f2 <dir_alloc+0x7a>
		n = 0;
 801079a:	2300      	movs	r3, #0
 801079c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	69db      	ldr	r3, [r3, #28]
 80107a2:	4619      	mov	r1, r3
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f7ff fb2f 	bl	800fe08 <move_window>
 80107aa:	4603      	mov	r3, r0
 80107ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80107ae:	7dfb      	ldrb	r3, [r7, #23]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d11d      	bne.n	80107f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6a1b      	ldr	r3, [r3, #32]
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	2be5      	cmp	r3, #229	; 0xe5
 80107bc:	d004      	beq.n	80107c8 <dir_alloc+0x50>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6a1b      	ldr	r3, [r3, #32]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d107      	bne.n	80107d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	3301      	adds	r3, #1
 80107cc:	613b      	str	r3, [r7, #16]
 80107ce:	693a      	ldr	r2, [r7, #16]
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d102      	bne.n	80107dc <dir_alloc+0x64>
 80107d6:	e00c      	b.n	80107f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80107d8:	2300      	movs	r3, #0
 80107da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80107dc:	2101      	movs	r1, #1
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ff ff05 	bl	80105ee <dir_next>
 80107e4:	4603      	mov	r3, r0
 80107e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d0d7      	beq.n	801079e <dir_alloc+0x26>
 80107ee:	e000      	b.n	80107f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80107f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80107f2:	7dfb      	ldrb	r3, [r7, #23]
 80107f4:	2b04      	cmp	r3, #4
 80107f6:	d101      	bne.n	80107fc <dir_alloc+0x84>
 80107f8:	2307      	movs	r3, #7
 80107fa:	75fb      	strb	r3, [r7, #23]
	return res;
 80107fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3718      	adds	r7, #24
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010806:	b580      	push	{r7, lr}
 8010808:	b084      	sub	sp, #16
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
 801080e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	331a      	adds	r3, #26
 8010814:	4618      	mov	r0, r3
 8010816:	f7ff f817 	bl	800f848 <ld_word>
 801081a:	4603      	mov	r3, r0
 801081c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	2b03      	cmp	r3, #3
 8010824:	d109      	bne.n	801083a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	3314      	adds	r3, #20
 801082a:	4618      	mov	r0, r3
 801082c:	f7ff f80c 	bl	800f848 <ld_word>
 8010830:	4603      	mov	r3, r0
 8010832:	041b      	lsls	r3, r3, #16
 8010834:	68fa      	ldr	r2, [r7, #12]
 8010836:	4313      	orrs	r3, r2
 8010838:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801083a:	68fb      	ldr	r3, [r7, #12]
}
 801083c:	4618      	mov	r0, r3
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	331a      	adds	r3, #26
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	b292      	uxth	r2, r2
 8010858:	4611      	mov	r1, r2
 801085a:	4618      	mov	r0, r3
 801085c:	f7ff f82f 	bl	800f8be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	2b03      	cmp	r3, #3
 8010866:	d109      	bne.n	801087c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	f103 0214 	add.w	r2, r3, #20
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	0c1b      	lsrs	r3, r3, #16
 8010872:	b29b      	uxth	r3, r3
 8010874:	4619      	mov	r1, r3
 8010876:	4610      	mov	r0, r2
 8010878:	f7ff f821 	bl	800f8be <st_word>
	}
}
 801087c:	bf00      	nop
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801088e:	2304      	movs	r3, #4
 8010890:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010898:	e03c      	b.n	8010914 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	69db      	ldr	r3, [r3, #28]
 801089e:	4619      	mov	r1, r3
 80108a0:	6938      	ldr	r0, [r7, #16]
 80108a2:	f7ff fab1 	bl	800fe08 <move_window>
 80108a6:	4603      	mov	r3, r0
 80108a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80108aa:	7dfb      	ldrb	r3, [r7, #23]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d136      	bne.n	801091e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a1b      	ldr	r3, [r3, #32]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80108b8:	7bfb      	ldrb	r3, [r7, #15]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d102      	bne.n	80108c4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80108be:	2304      	movs	r3, #4
 80108c0:	75fb      	strb	r3, [r7, #23]
 80108c2:	e031      	b.n	8010928 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	330b      	adds	r3, #11
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108d0:	73bb      	strb	r3, [r7, #14]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	7bba      	ldrb	r2, [r7, #14]
 80108d6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80108d8:	7bfb      	ldrb	r3, [r7, #15]
 80108da:	2be5      	cmp	r3, #229	; 0xe5
 80108dc:	d011      	beq.n	8010902 <dir_read+0x7e>
 80108de:	7bfb      	ldrb	r3, [r7, #15]
 80108e0:	2b2e      	cmp	r3, #46	; 0x2e
 80108e2:	d00e      	beq.n	8010902 <dir_read+0x7e>
 80108e4:	7bbb      	ldrb	r3, [r7, #14]
 80108e6:	2b0f      	cmp	r3, #15
 80108e8:	d00b      	beq.n	8010902 <dir_read+0x7e>
 80108ea:	7bbb      	ldrb	r3, [r7, #14]
 80108ec:	f023 0320 	bic.w	r3, r3, #32
 80108f0:	2b08      	cmp	r3, #8
 80108f2:	bf0c      	ite	eq
 80108f4:	2301      	moveq	r3, #1
 80108f6:	2300      	movne	r3, #0
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	461a      	mov	r2, r3
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	4293      	cmp	r3, r2
 8010900:	d00f      	beq.n	8010922 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010902:	2100      	movs	r1, #0
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff fe72 	bl	80105ee <dir_next>
 801090a:	4603      	mov	r3, r0
 801090c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801090e:	7dfb      	ldrb	r3, [r7, #23]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d108      	bne.n	8010926 <dir_read+0xa2>
	while (dp->sect) {
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	69db      	ldr	r3, [r3, #28]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1be      	bne.n	801089a <dir_read+0x16>
 801091c:	e004      	b.n	8010928 <dir_read+0xa4>
		if (res != FR_OK) break;
 801091e:	bf00      	nop
 8010920:	e002      	b.n	8010928 <dir_read+0xa4>
				break;
 8010922:	bf00      	nop
 8010924:	e000      	b.n	8010928 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010926:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010928:	7dfb      	ldrb	r3, [r7, #23]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d002      	beq.n	8010934 <dir_read+0xb0>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	61da      	str	r2, [r3, #28]
	return res;
 8010934:	7dfb      	ldrb	r3, [r7, #23]
}
 8010936:	4618      	mov	r0, r3
 8010938:	3718      	adds	r7, #24
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}

0801093e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b086      	sub	sp, #24
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801094c:	2100      	movs	r1, #0
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f7ff fdd2 	bl	80104f8 <dir_sdi>
 8010954:	4603      	mov	r3, r0
 8010956:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010958:	7dfb      	ldrb	r3, [r7, #23]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <dir_find+0x24>
 801095e:	7dfb      	ldrb	r3, [r7, #23]
 8010960:	e03e      	b.n	80109e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	69db      	ldr	r3, [r3, #28]
 8010966:	4619      	mov	r1, r3
 8010968:	6938      	ldr	r0, [r7, #16]
 801096a:	f7ff fa4d 	bl	800fe08 <move_window>
 801096e:	4603      	mov	r3, r0
 8010970:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010972:	7dfb      	ldrb	r3, [r7, #23]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d12f      	bne.n	80109d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a1b      	ldr	r3, [r3, #32]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010980:	7bfb      	ldrb	r3, [r7, #15]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d102      	bne.n	801098c <dir_find+0x4e>
 8010986:	2304      	movs	r3, #4
 8010988:	75fb      	strb	r3, [r7, #23]
 801098a:	e028      	b.n	80109de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6a1b      	ldr	r3, [r3, #32]
 8010990:	330b      	adds	r3, #11
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010998:	b2da      	uxtb	r2, r3
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6a1b      	ldr	r3, [r3, #32]
 80109a2:	330b      	adds	r3, #11
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	f003 0308 	and.w	r3, r3, #8
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d10a      	bne.n	80109c4 <dir_find+0x86>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6a18      	ldr	r0, [r3, #32]
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	3324      	adds	r3, #36	; 0x24
 80109b6:	220b      	movs	r2, #11
 80109b8:	4619      	mov	r1, r3
 80109ba:	f7ff f802 	bl	800f9c2 <mem_cmp>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00b      	beq.n	80109dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80109c4:	2100      	movs	r1, #0
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff fe11 	bl	80105ee <dir_next>
 80109cc:	4603      	mov	r3, r0
 80109ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80109d0:	7dfb      	ldrb	r3, [r7, #23]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0c5      	beq.n	8010962 <dir_find+0x24>
 80109d6:	e002      	b.n	80109de <dir_find+0xa0>
		if (res != FR_OK) break;
 80109d8:	bf00      	nop
 80109da:	e000      	b.n	80109de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80109dc:	bf00      	nop

	return res;
 80109de:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3718      	adds	r7, #24
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80109f6:	2101      	movs	r1, #1
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff febd 	bl	8010778 <dir_alloc>
 80109fe:	4603      	mov	r3, r0
 8010a00:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010a02:	7bfb      	ldrb	r3, [r7, #15]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d11c      	bne.n	8010a42 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	69db      	ldr	r3, [r3, #28]
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	68b8      	ldr	r0, [r7, #8]
 8010a10:	f7ff f9fa 	bl	800fe08 <move_window>
 8010a14:	4603      	mov	r3, r0
 8010a16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a18:	7bfb      	ldrb	r3, [r7, #15]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d111      	bne.n	8010a42 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	2220      	movs	r2, #32
 8010a24:	2100      	movs	r1, #0
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fe ffb1 	bl	800f98e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a18      	ldr	r0, [r3, #32]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	3324      	adds	r3, #36	; 0x24
 8010a34:	220b      	movs	r2, #11
 8010a36:	4619      	mov	r1, r3
 8010a38:	f7fe ff88 	bl	800f94c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3710      	adds	r7, #16
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b086      	sub	sp, #24
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	69db      	ldr	r3, [r3, #28]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d04e      	beq.n	8010b02 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010a64:	2300      	movs	r3, #0
 8010a66:	613b      	str	r3, [r7, #16]
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8010a6c:	e021      	b.n	8010ab2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6a1a      	ldr	r2, [r3, #32]
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	1c59      	adds	r1, r3, #1
 8010a76:	6179      	str	r1, [r7, #20]
 8010a78:	4413      	add	r3, r2
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010a7e:	7bfb      	ldrb	r3, [r7, #15]
 8010a80:	2b20      	cmp	r3, #32
 8010a82:	d100      	bne.n	8010a86 <get_fileinfo+0x3a>
 8010a84:	e015      	b.n	8010ab2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010a86:	7bfb      	ldrb	r3, [r7, #15]
 8010a88:	2b05      	cmp	r3, #5
 8010a8a:	d101      	bne.n	8010a90 <get_fileinfo+0x44>
 8010a8c:	23e5      	movs	r3, #229	; 0xe5
 8010a8e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	2b09      	cmp	r3, #9
 8010a94:	d106      	bne.n	8010aa4 <get_fileinfo+0x58>
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	1c5a      	adds	r2, r3, #1
 8010a9a:	613a      	str	r2, [r7, #16]
 8010a9c:	683a      	ldr	r2, [r7, #0]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	222e      	movs	r2, #46	; 0x2e
 8010aa2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	1c5a      	adds	r2, r3, #1
 8010aa8:	613a      	str	r2, [r7, #16]
 8010aaa:	683a      	ldr	r2, [r7, #0]
 8010aac:	4413      	add	r3, r2
 8010aae:	7bfa      	ldrb	r2, [r7, #15]
 8010ab0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	2b0a      	cmp	r3, #10
 8010ab6:	d9da      	bls.n	8010a6e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010ab8:	683a      	ldr	r2, [r7, #0]
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	4413      	add	r3, r2
 8010abe:	3309      	adds	r3, #9
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a1b      	ldr	r3, [r3, #32]
 8010ac8:	7ada      	ldrb	r2, [r3, #11]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6a1b      	ldr	r3, [r3, #32]
 8010ad2:	331c      	adds	r3, #28
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fe fecf 	bl	800f878 <ld_dword>
 8010ada:	4602      	mov	r2, r0
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6a1b      	ldr	r3, [r3, #32]
 8010ae4:	3316      	adds	r3, #22
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe fec6 	bl	800f878 <ld_dword>
 8010aec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	80da      	strh	r2, [r3, #6]
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	0c1b      	lsrs	r3, r3, #16
 8010afa:	b29a      	uxth	r2, r3
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	809a      	strh	r2, [r3, #4]
 8010b00:	e000      	b.n	8010b04 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010b02:	bf00      	nop
}
 8010b04:	3718      	adds	r7, #24
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
	...

08010b0c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	1c59      	adds	r1, r3, #1
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	6011      	str	r1, [r2, #0]
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010b22:	89fb      	ldrh	r3, [r7, #14]
 8010b24:	2b60      	cmp	r3, #96	; 0x60
 8010b26:	d905      	bls.n	8010b34 <get_achar+0x28>
 8010b28:	89fb      	ldrh	r3, [r7, #14]
 8010b2a:	2b7a      	cmp	r3, #122	; 0x7a
 8010b2c:	d802      	bhi.n	8010b34 <get_achar+0x28>
 8010b2e:	89fb      	ldrh	r3, [r7, #14]
 8010b30:	3b20      	subs	r3, #32
 8010b32:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010b34:	89fb      	ldrh	r3, [r7, #14]
 8010b36:	2b7f      	cmp	r3, #127	; 0x7f
 8010b38:	d904      	bls.n	8010b44 <get_achar+0x38>
 8010b3a:	89fb      	ldrh	r3, [r7, #14]
 8010b3c:	3b80      	subs	r3, #128	; 0x80
 8010b3e:	4a05      	ldr	r2, [pc, #20]	; (8010b54 <get_achar+0x48>)
 8010b40:	5cd3      	ldrb	r3, [r2, r3]
 8010b42:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8010b44:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	0801a444 	.word	0x0801a444

08010b58 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b08a      	sub	sp, #40	; 0x28
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
 8010b64:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8010b66:	e009      	b.n	8010b7c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8010b68:	f107 0308 	add.w	r3, r7, #8
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ff ffcd 	bl	8010b0c <get_achar>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <pattern_matching+0x24>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	e064      	b.n	8010c46 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	1e5a      	subs	r2, r3, #1
 8010b80:	607a      	str	r2, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d1f0      	bne.n	8010b68 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d104      	bne.n	8010b98 <pattern_matching+0x40>
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d001      	beq.n	8010b98 <pattern_matching+0x40>
 8010b94:	2301      	movs	r3, #1
 8010b96:	e056      	b.n	8010c46 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	617b      	str	r3, [r7, #20]
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b3f      	cmp	r3, #63	; 0x3f
 8010ba6:	d003      	beq.n	8010bb0 <pattern_matching+0x58>
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	2b2a      	cmp	r3, #42	; 0x2a
 8010bae:	d126      	bne.n	8010bfe <pattern_matching+0xa6>
				nm = nx = 0;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	61fb      	str	r3, [r7, #28]
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	1c5a      	adds	r2, r3, #1
 8010bbc:	617a      	str	r2, [r7, #20]
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	2b3f      	cmp	r3, #63	; 0x3f
 8010bc2:	d103      	bne.n	8010bcc <pattern_matching+0x74>
 8010bc4:	6a3b      	ldr	r3, [r7, #32]
 8010bc6:	3301      	adds	r3, #1
 8010bc8:	623b      	str	r3, [r7, #32]
 8010bca:	e001      	b.n	8010bd0 <pattern_matching+0x78>
 8010bcc:	2301      	movs	r3, #1
 8010bce:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	2b3f      	cmp	r3, #63	; 0x3f
 8010bd6:	d0ef      	beq.n	8010bb8 <pattern_matching+0x60>
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8010bde:	d0eb      	beq.n	8010bb8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8010be0:	6978      	ldr	r0, [r7, #20]
 8010be2:	6939      	ldr	r1, [r7, #16]
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	6a3a      	ldr	r2, [r7, #32]
 8010be8:	f7ff ffb6 	bl	8010b58 <pattern_matching>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <pattern_matching+0x9e>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	e027      	b.n	8010c46 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010bfc:	e017      	b.n	8010c2e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8010bfe:	f107 0314 	add.w	r3, r7, #20
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff ff82 	bl	8010b0c <get_achar>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8010c0c:	f107 0310 	add.w	r3, r7, #16
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7ff ff7b 	bl	8010b0c <get_achar>
 8010c16:	4603      	mov	r3, r0
 8010c18:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8010c1a:	8b7a      	ldrh	r2, [r7, #26]
 8010c1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d104      	bne.n	8010c2c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8010c22:	8b7b      	ldrh	r3, [r7, #26]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d1bb      	bne.n	8010ba0 <pattern_matching+0x48>
 8010c28:	2301      	movs	r3, #1
 8010c2a:	e00c      	b.n	8010c46 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8010c2c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8010c2e:	f107 0308 	add.w	r3, r7, #8
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7ff ff6a 	bl	8010b0c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d002      	beq.n	8010c44 <pattern_matching+0xec>
 8010c3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1a9      	bne.n	8010b98 <pattern_matching+0x40>

	return 0;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3728      	adds	r7, #40	; 0x28
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
	...

08010c50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b088      	sub	sp, #32
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	3324      	adds	r3, #36	; 0x24
 8010c64:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010c66:	220b      	movs	r2, #11
 8010c68:	2120      	movs	r1, #32
 8010c6a:	68b8      	ldr	r0, [r7, #8]
 8010c6c:	f7fe fe8f 	bl	800f98e <mem_set>
	si = i = 0; ni = 8;
 8010c70:	2300      	movs	r3, #0
 8010c72:	613b      	str	r3, [r7, #16]
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	617b      	str	r3, [r7, #20]
 8010c78:	2308      	movs	r3, #8
 8010c7a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	1c5a      	adds	r2, r3, #1
 8010c80:	617a      	str	r2, [r7, #20]
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	4413      	add	r3, r2
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010c8a:	7ffb      	ldrb	r3, [r7, #31]
 8010c8c:	2b20      	cmp	r3, #32
 8010c8e:	d94e      	bls.n	8010d2e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010c90:	7ffb      	ldrb	r3, [r7, #31]
 8010c92:	2b2f      	cmp	r3, #47	; 0x2f
 8010c94:	d006      	beq.n	8010ca4 <create_name+0x54>
 8010c96:	7ffb      	ldrb	r3, [r7, #31]
 8010c98:	2b5c      	cmp	r3, #92	; 0x5c
 8010c9a:	d110      	bne.n	8010cbe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010c9c:	e002      	b.n	8010ca4 <create_name+0x54>
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	617b      	str	r3, [r7, #20]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	4413      	add	r3, r2
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	2b2f      	cmp	r3, #47	; 0x2f
 8010cae:	d0f6      	beq.n	8010c9e <create_name+0x4e>
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b5c      	cmp	r3, #92	; 0x5c
 8010cba:	d0f0      	beq.n	8010c9e <create_name+0x4e>
			break;
 8010cbc:	e038      	b.n	8010d30 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010cbe:	7ffb      	ldrb	r3, [r7, #31]
 8010cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8010cc2:	d003      	beq.n	8010ccc <create_name+0x7c>
 8010cc4:	693a      	ldr	r2, [r7, #16]
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d30c      	bcc.n	8010ce6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	2b0b      	cmp	r3, #11
 8010cd0:	d002      	beq.n	8010cd8 <create_name+0x88>
 8010cd2:	7ffb      	ldrb	r3, [r7, #31]
 8010cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8010cd6:	d001      	beq.n	8010cdc <create_name+0x8c>
 8010cd8:	2306      	movs	r3, #6
 8010cda:	e044      	b.n	8010d66 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010cdc:	2308      	movs	r3, #8
 8010cde:	613b      	str	r3, [r7, #16]
 8010ce0:	230b      	movs	r3, #11
 8010ce2:	61bb      	str	r3, [r7, #24]
			continue;
 8010ce4:	e022      	b.n	8010d2c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	da04      	bge.n	8010cf8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010cee:	7ffb      	ldrb	r3, [r7, #31]
 8010cf0:	3b80      	subs	r3, #128	; 0x80
 8010cf2:	4a1f      	ldr	r2, [pc, #124]	; (8010d70 <create_name+0x120>)
 8010cf4:	5cd3      	ldrb	r3, [r2, r3]
 8010cf6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010cf8:	7ffb      	ldrb	r3, [r7, #31]
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	481d      	ldr	r0, [pc, #116]	; (8010d74 <create_name+0x124>)
 8010cfe:	f7fe fe87 	bl	800fa10 <chk_chr>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d001      	beq.n	8010d0c <create_name+0xbc>
 8010d08:	2306      	movs	r3, #6
 8010d0a:	e02c      	b.n	8010d66 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010d0c:	7ffb      	ldrb	r3, [r7, #31]
 8010d0e:	2b60      	cmp	r3, #96	; 0x60
 8010d10:	d905      	bls.n	8010d1e <create_name+0xce>
 8010d12:	7ffb      	ldrb	r3, [r7, #31]
 8010d14:	2b7a      	cmp	r3, #122	; 0x7a
 8010d16:	d802      	bhi.n	8010d1e <create_name+0xce>
 8010d18:	7ffb      	ldrb	r3, [r7, #31]
 8010d1a:	3b20      	subs	r3, #32
 8010d1c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	1c5a      	adds	r2, r3, #1
 8010d22:	613a      	str	r2, [r7, #16]
 8010d24:	68ba      	ldr	r2, [r7, #8]
 8010d26:	4413      	add	r3, r2
 8010d28:	7ffa      	ldrb	r2, [r7, #31]
 8010d2a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010d2c:	e7a6      	b.n	8010c7c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010d2e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010d30:	68fa      	ldr	r2, [r7, #12]
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	441a      	add	r2, r3
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d101      	bne.n	8010d44 <create_name+0xf4>
 8010d40:	2306      	movs	r3, #6
 8010d42:	e010      	b.n	8010d66 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2be5      	cmp	r3, #229	; 0xe5
 8010d4a:	d102      	bne.n	8010d52 <create_name+0x102>
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	2205      	movs	r2, #5
 8010d50:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010d52:	7ffb      	ldrb	r3, [r7, #31]
 8010d54:	2b20      	cmp	r3, #32
 8010d56:	d801      	bhi.n	8010d5c <create_name+0x10c>
 8010d58:	2204      	movs	r2, #4
 8010d5a:	e000      	b.n	8010d5e <create_name+0x10e>
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	330b      	adds	r3, #11
 8010d62:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010d64:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3720      	adds	r7, #32
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	0801a444 	.word	0x0801a444
 8010d74:	0801a270 	.word	0x0801a270

08010d78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b086      	sub	sp, #24
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010d8c:	e002      	b.n	8010d94 <follow_path+0x1c>
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	3301      	adds	r3, #1
 8010d92:	603b      	str	r3, [r7, #0]
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	2b2f      	cmp	r3, #47	; 0x2f
 8010d9a:	d0f8      	beq.n	8010d8e <follow_path+0x16>
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	2b5c      	cmp	r3, #92	; 0x5c
 8010da2:	d0f4      	beq.n	8010d8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	2200      	movs	r2, #0
 8010da8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	2b1f      	cmp	r3, #31
 8010db0:	d80a      	bhi.n	8010dc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2280      	movs	r2, #128	; 0x80
 8010db6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010dba:	2100      	movs	r1, #0
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7ff fb9b 	bl	80104f8 <dir_sdi>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	75fb      	strb	r3, [r7, #23]
 8010dc6:	e043      	b.n	8010e50 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010dc8:	463b      	mov	r3, r7
 8010dca:	4619      	mov	r1, r3
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7ff ff3f 	bl	8010c50 <create_name>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010dd6:	7dfb      	ldrb	r3, [r7, #23]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d134      	bne.n	8010e46 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f7ff fdae 	bl	801093e <dir_find>
 8010de2:	4603      	mov	r3, r0
 8010de4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010dec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010dee:	7dfb      	ldrb	r3, [r7, #23]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00a      	beq.n	8010e0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
 8010df6:	2b04      	cmp	r3, #4
 8010df8:	d127      	bne.n	8010e4a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010dfa:	7afb      	ldrb	r3, [r7, #11]
 8010dfc:	f003 0304 	and.w	r3, r3, #4
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d122      	bne.n	8010e4a <follow_path+0xd2>
 8010e04:	2305      	movs	r3, #5
 8010e06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010e08:	e01f      	b.n	8010e4a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e0a:	7afb      	ldrb	r3, [r7, #11]
 8010e0c:	f003 0304 	and.w	r3, r3, #4
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d11c      	bne.n	8010e4e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	799b      	ldrb	r3, [r3, #6]
 8010e18:	f003 0310 	and.w	r3, r3, #16
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d102      	bne.n	8010e26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010e20:	2305      	movs	r3, #5
 8010e22:	75fb      	strb	r3, [r7, #23]
 8010e24:	e014      	b.n	8010e50 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	695b      	ldr	r3, [r3, #20]
 8010e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e34:	4413      	add	r3, r2
 8010e36:	4619      	mov	r1, r3
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f7ff fce4 	bl	8010806 <ld_clust>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e44:	e7c0      	b.n	8010dc8 <follow_path+0x50>
			if (res != FR_OK) break;
 8010e46:	bf00      	nop
 8010e48:	e002      	b.n	8010e50 <follow_path+0xd8>
				break;
 8010e4a:	bf00      	nop
 8010e4c:	e000      	b.n	8010e50 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e4e:	bf00      	nop
			}
		}
	}

	return res;
 8010e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010e5a:	b480      	push	{r7}
 8010e5c:	b087      	sub	sp, #28
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010e62:	f04f 33ff 	mov.w	r3, #4294967295
 8010e66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d031      	beq.n	8010ed4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	617b      	str	r3, [r7, #20]
 8010e76:	e002      	b.n	8010e7e <get_ldnumber+0x24>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	617b      	str	r3, [r7, #20]
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	2b20      	cmp	r3, #32
 8010e84:	d903      	bls.n	8010e8e <get_ldnumber+0x34>
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	2b3a      	cmp	r3, #58	; 0x3a
 8010e8c:	d1f4      	bne.n	8010e78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	2b3a      	cmp	r3, #58	; 0x3a
 8010e94:	d11c      	bne.n	8010ed0 <get_ldnumber+0x76>
			tp = *path;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	60fa      	str	r2, [r7, #12]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	3b30      	subs	r3, #48	; 0x30
 8010ea6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	2b09      	cmp	r3, #9
 8010eac:	d80e      	bhi.n	8010ecc <get_ldnumber+0x72>
 8010eae:	68fa      	ldr	r2, [r7, #12]
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d10a      	bne.n	8010ecc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d107      	bne.n	8010ecc <get_ldnumber+0x72>
					vol = (int)i;
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	617b      	str	r3, [r7, #20]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	697a      	ldr	r2, [r7, #20]
 8010eca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	e002      	b.n	8010ed6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010ed4:	693b      	ldr	r3, [r7, #16]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	371c      	adds	r7, #28
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr
	...

08010ee4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	70da      	strb	r2, [r3, #3]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8010efa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010efc:	6839      	ldr	r1, [r7, #0]
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f7fe ff82 	bl	800fe08 <move_window>
 8010f04:	4603      	mov	r3, r0
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d001      	beq.n	8010f0e <check_fs+0x2a>
 8010f0a:	2304      	movs	r3, #4
 8010f0c:	e038      	b.n	8010f80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	3334      	adds	r3, #52	; 0x34
 8010f12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fe fc96 	bl	800f848 <ld_word>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	461a      	mov	r2, r3
 8010f20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d001      	beq.n	8010f2c <check_fs+0x48>
 8010f28:	2303      	movs	r3, #3
 8010f2a:	e029      	b.n	8010f80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f32:	2be9      	cmp	r3, #233	; 0xe9
 8010f34:	d009      	beq.n	8010f4a <check_fs+0x66>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f3c:	2beb      	cmp	r3, #235	; 0xeb
 8010f3e:	d11e      	bne.n	8010f7e <check_fs+0x9a>
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010f46:	2b90      	cmp	r3, #144	; 0x90
 8010f48:	d119      	bne.n	8010f7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	3334      	adds	r3, #52	; 0x34
 8010f4e:	3336      	adds	r3, #54	; 0x36
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fe fc91 	bl	800f878 <ld_dword>
 8010f56:	4603      	mov	r3, r0
 8010f58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010f5c:	4a0a      	ldr	r2, [pc, #40]	; (8010f88 <check_fs+0xa4>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d101      	bne.n	8010f66 <check_fs+0x82>
 8010f62:	2300      	movs	r3, #0
 8010f64:	e00c      	b.n	8010f80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	3334      	adds	r3, #52	; 0x34
 8010f6a:	3352      	adds	r3, #82	; 0x52
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fe fc83 	bl	800f878 <ld_dword>
 8010f72:	4602      	mov	r2, r0
 8010f74:	4b05      	ldr	r3, [pc, #20]	; (8010f8c <check_fs+0xa8>)
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d101      	bne.n	8010f7e <check_fs+0x9a>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	e000      	b.n	8010f80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010f7e:	2302      	movs	r3, #2
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	00544146 	.word	0x00544146
 8010f8c:	33544146 	.word	0x33544146

08010f90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b096      	sub	sp, #88	; 0x58
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f7ff ff58 	bl	8010e5a <get_ldnumber>
 8010faa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	da01      	bge.n	8010fb6 <find_volume+0x26>
 8010fb2:	230b      	movs	r3, #11
 8010fb4:	e236      	b.n	8011424 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010fb6:	4aac      	ldr	r2, [pc, #688]	; (8011268 <find_volume+0x2d8>)
 8010fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <find_volume+0x3a>
 8010fc6:	230c      	movs	r3, #12
 8010fc8:	e22c      	b.n	8011424 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8010fca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fcc:	f7fe fd3b 	bl	800fa46 <lock_fs>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <find_volume+0x4a>
 8010fd6:	230f      	movs	r3, #15
 8010fd8:	e224      	b.n	8011424 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010fe0:	79fb      	ldrb	r3, [r7, #7]
 8010fe2:	f023 0301 	bic.w	r3, r3, #1
 8010fe6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d01a      	beq.n	8011026 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff2:	785b      	ldrb	r3, [r3, #1]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7fe fb89 	bl	800f70c <disk_status>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011004:	f003 0301 	and.w	r3, r3, #1
 8011008:	2b00      	cmp	r3, #0
 801100a:	d10c      	bne.n	8011026 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801100c:	79fb      	ldrb	r3, [r7, #7]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d007      	beq.n	8011022 <find_volume+0x92>
 8011012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011016:	f003 0304 	and.w	r3, r3, #4
 801101a:	2b00      	cmp	r3, #0
 801101c:	d001      	beq.n	8011022 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801101e:	230a      	movs	r3, #10
 8011020:	e200      	b.n	8011424 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8011022:	2300      	movs	r3, #0
 8011024:	e1fe      	b.n	8011424 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011028:	2200      	movs	r2, #0
 801102a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801102e:	b2da      	uxtb	r2, r3
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	785b      	ldrb	r3, [r3, #1]
 8011038:	4618      	mov	r0, r3
 801103a:	f7fe fb81 	bl	800f740 <disk_initialize>
 801103e:	4603      	mov	r3, r0
 8011040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011048:	f003 0301 	and.w	r3, r3, #1
 801104c:	2b00      	cmp	r3, #0
 801104e:	d001      	beq.n	8011054 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011050:	2303      	movs	r3, #3
 8011052:	e1e7      	b.n	8011424 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011054:	79fb      	ldrb	r3, [r7, #7]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d007      	beq.n	801106a <find_volume+0xda>
 801105a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801105e:	f003 0304 	and.w	r3, r3, #4
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011066:	230a      	movs	r3, #10
 8011068:	e1dc      	b.n	8011424 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801106a:	2300      	movs	r3, #0
 801106c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801106e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011070:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011072:	f7ff ff37 	bl	8010ee4 <check_fs>
 8011076:	4603      	mov	r3, r0
 8011078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801107c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011080:	2b02      	cmp	r3, #2
 8011082:	d14b      	bne.n	801111c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011084:	2300      	movs	r3, #0
 8011086:	643b      	str	r3, [r7, #64]	; 0x40
 8011088:	e01f      	b.n	80110ca <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801108a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011092:	011b      	lsls	r3, r3, #4
 8011094:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011098:	4413      	add	r3, r2
 801109a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109e:	3304      	adds	r3, #4
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d006      	beq.n	80110b4 <find_volume+0x124>
 80110a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a8:	3308      	adds	r3, #8
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fe fbe4 	bl	800f878 <ld_dword>
 80110b0:	4602      	mov	r2, r0
 80110b2:	e000      	b.n	80110b6 <find_volume+0x126>
 80110b4:	2200      	movs	r2, #0
 80110b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80110be:	440b      	add	r3, r1
 80110c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80110c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110c6:	3301      	adds	r3, #1
 80110c8:	643b      	str	r3, [r7, #64]	; 0x40
 80110ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110cc:	2b03      	cmp	r3, #3
 80110ce:	d9dc      	bls.n	801108a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80110d0:	2300      	movs	r3, #0
 80110d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80110d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d002      	beq.n	80110e0 <find_volume+0x150>
 80110da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110dc:	3b01      	subs	r3, #1
 80110de:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80110e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80110e8:	4413      	add	r3, r2
 80110ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80110ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80110f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d005      	beq.n	8011102 <find_volume+0x172>
 80110f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80110fa:	f7ff fef3 	bl	8010ee4 <check_fs>
 80110fe:	4603      	mov	r3, r0
 8011100:	e000      	b.n	8011104 <find_volume+0x174>
 8011102:	2303      	movs	r3, #3
 8011104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801110c:	2b01      	cmp	r3, #1
 801110e:	d905      	bls.n	801111c <find_volume+0x18c>
 8011110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011112:	3301      	adds	r3, #1
 8011114:	643b      	str	r3, [r7, #64]	; 0x40
 8011116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011118:	2b03      	cmp	r3, #3
 801111a:	d9e1      	bls.n	80110e0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801111c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011120:	2b04      	cmp	r3, #4
 8011122:	d101      	bne.n	8011128 <find_volume+0x198>
 8011124:	2301      	movs	r3, #1
 8011126:	e17d      	b.n	8011424 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801112c:	2b01      	cmp	r3, #1
 801112e:	d901      	bls.n	8011134 <find_volume+0x1a4>
 8011130:	230d      	movs	r3, #13
 8011132:	e177      	b.n	8011424 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011136:	3334      	adds	r3, #52	; 0x34
 8011138:	330b      	adds	r3, #11
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe fb84 	bl	800f848 <ld_word>
 8011140:	4603      	mov	r3, r0
 8011142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011146:	d001      	beq.n	801114c <find_volume+0x1bc>
 8011148:	230d      	movs	r3, #13
 801114a:	e16b      	b.n	8011424 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801114c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114e:	3334      	adds	r3, #52	; 0x34
 8011150:	3316      	adds	r3, #22
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fb78 	bl	800f848 <ld_word>
 8011158:	4603      	mov	r3, r0
 801115a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801115c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801115e:	2b00      	cmp	r3, #0
 8011160:	d106      	bne.n	8011170 <find_volume+0x1e0>
 8011162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011164:	3334      	adds	r3, #52	; 0x34
 8011166:	3324      	adds	r3, #36	; 0x24
 8011168:	4618      	mov	r0, r3
 801116a:	f7fe fb85 	bl	800f878 <ld_dword>
 801116e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011174:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011178:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011182:	789b      	ldrb	r3, [r3, #2]
 8011184:	2b01      	cmp	r3, #1
 8011186:	d005      	beq.n	8011194 <find_volume+0x204>
 8011188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118a:	789b      	ldrb	r3, [r3, #2]
 801118c:	2b02      	cmp	r3, #2
 801118e:	d001      	beq.n	8011194 <find_volume+0x204>
 8011190:	230d      	movs	r3, #13
 8011192:	e147      	b.n	8011424 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011196:	789b      	ldrb	r3, [r3, #2]
 8011198:	461a      	mov	r2, r3
 801119a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801119c:	fb02 f303 	mul.w	r3, r2, r3
 80111a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	895b      	ldrh	r3, [r3, #10]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d008      	beq.n	80111c8 <find_volume+0x238>
 80111b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b8:	895b      	ldrh	r3, [r3, #10]
 80111ba:	461a      	mov	r2, r3
 80111bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111be:	895b      	ldrh	r3, [r3, #10]
 80111c0:	3b01      	subs	r3, #1
 80111c2:	4013      	ands	r3, r2
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d001      	beq.n	80111cc <find_volume+0x23c>
 80111c8:	230d      	movs	r3, #13
 80111ca:	e12b      	b.n	8011424 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80111cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ce:	3334      	adds	r3, #52	; 0x34
 80111d0:	3311      	adds	r3, #17
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fe fb38 	bl	800f848 <ld_word>
 80111d8:	4603      	mov	r3, r0
 80111da:	461a      	mov	r2, r3
 80111dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80111e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e2:	891b      	ldrh	r3, [r3, #8]
 80111e4:	f003 030f 	and.w	r3, r3, #15
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d001      	beq.n	80111f2 <find_volume+0x262>
 80111ee:	230d      	movs	r3, #13
 80111f0:	e118      	b.n	8011424 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80111f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f4:	3334      	adds	r3, #52	; 0x34
 80111f6:	3313      	adds	r3, #19
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fe fb25 	bl	800f848 <ld_word>
 80111fe:	4603      	mov	r3, r0
 8011200:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011204:	2b00      	cmp	r3, #0
 8011206:	d106      	bne.n	8011216 <find_volume+0x286>
 8011208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120a:	3334      	adds	r3, #52	; 0x34
 801120c:	3320      	adds	r3, #32
 801120e:	4618      	mov	r0, r3
 8011210:	f7fe fb32 	bl	800f878 <ld_dword>
 8011214:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011218:	3334      	adds	r3, #52	; 0x34
 801121a:	330e      	adds	r3, #14
 801121c:	4618      	mov	r0, r3
 801121e:	f7fe fb13 	bl	800f848 <ld_word>
 8011222:	4603      	mov	r3, r0
 8011224:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011226:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011228:	2b00      	cmp	r3, #0
 801122a:	d101      	bne.n	8011230 <find_volume+0x2a0>
 801122c:	230d      	movs	r3, #13
 801122e:	e0f9      	b.n	8011424 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011230:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011234:	4413      	add	r3, r2
 8011236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011238:	8912      	ldrh	r2, [r2, #8]
 801123a:	0912      	lsrs	r2, r2, #4
 801123c:	b292      	uxth	r2, r2
 801123e:	4413      	add	r3, r2
 8011240:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011246:	429a      	cmp	r2, r3
 8011248:	d201      	bcs.n	801124e <find_volume+0x2be>
 801124a:	230d      	movs	r3, #13
 801124c:	e0ea      	b.n	8011424 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801124e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011252:	1ad3      	subs	r3, r2, r3
 8011254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011256:	8952      	ldrh	r2, [r2, #10]
 8011258:	fbb3 f3f2 	udiv	r3, r3, r2
 801125c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011260:	2b00      	cmp	r3, #0
 8011262:	d103      	bne.n	801126c <find_volume+0x2dc>
 8011264:	230d      	movs	r3, #13
 8011266:	e0dd      	b.n	8011424 <find_volume+0x494>
 8011268:	20000334 	.word	0x20000334
		fmt = FS_FAT32;
 801126c:	2303      	movs	r3, #3
 801126e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011274:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011278:	4293      	cmp	r3, r2
 801127a:	d802      	bhi.n	8011282 <find_volume+0x2f2>
 801127c:	2302      	movs	r3, #2
 801127e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011284:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011288:	4293      	cmp	r3, r2
 801128a:	d802      	bhi.n	8011292 <find_volume+0x302>
 801128c:	2301      	movs	r3, #1
 801128e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011294:	1c9a      	adds	r2, r3, #2
 8011296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011298:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801129e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80112a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80112a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112a4:	441a      	add	r2, r3
 80112a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80112aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80112ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ae:	441a      	add	r2, r3
 80112b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80112b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112b8:	2b03      	cmp	r3, #3
 80112ba:	d11e      	bne.n	80112fa <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	3334      	adds	r3, #52	; 0x34
 80112c0:	332a      	adds	r3, #42	; 0x2a
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe fac0 	bl	800f848 <ld_word>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d001      	beq.n	80112d2 <find_volume+0x342>
 80112ce:	230d      	movs	r3, #13
 80112d0:	e0a8      	b.n	8011424 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80112d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d4:	891b      	ldrh	r3, [r3, #8]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <find_volume+0x34e>
 80112da:	230d      	movs	r3, #13
 80112dc:	e0a2      	b.n	8011424 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	3334      	adds	r3, #52	; 0x34
 80112e2:	332c      	adds	r3, #44	; 0x2c
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fe fac7 	bl	800f878 <ld_dword>
 80112ea:	4602      	mov	r2, r0
 80112ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80112f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f2:	699b      	ldr	r3, [r3, #24]
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	647b      	str	r3, [r7, #68]	; 0x44
 80112f8:	e01f      	b.n	801133a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80112fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fc:	891b      	ldrh	r3, [r3, #8]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d101      	bne.n	8011306 <find_volume+0x376>
 8011302:	230d      	movs	r3, #13
 8011304:	e08e      	b.n	8011424 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801130a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801130c:	441a      	add	r2, r3
 801130e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011310:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011312:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011316:	2b02      	cmp	r3, #2
 8011318:	d103      	bne.n	8011322 <find_volume+0x392>
 801131a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131c:	699b      	ldr	r3, [r3, #24]
 801131e:	005b      	lsls	r3, r3, #1
 8011320:	e00a      	b.n	8011338 <find_volume+0x3a8>
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	699a      	ldr	r2, [r3, #24]
 8011326:	4613      	mov	r3, r2
 8011328:	005b      	lsls	r3, r3, #1
 801132a:	4413      	add	r3, r2
 801132c:	085a      	lsrs	r2, r3, #1
 801132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011330:	699b      	ldr	r3, [r3, #24]
 8011332:	f003 0301 	and.w	r3, r3, #1
 8011336:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011338:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801133a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133c:	69da      	ldr	r2, [r3, #28]
 801133e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011340:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011344:	0a5b      	lsrs	r3, r3, #9
 8011346:	429a      	cmp	r2, r3
 8011348:	d201      	bcs.n	801134e <find_volume+0x3be>
 801134a:	230d      	movs	r3, #13
 801134c:	e06a      	b.n	8011424 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011350:	f04f 32ff 	mov.w	r2, #4294967295
 8011354:	615a      	str	r2, [r3, #20]
 8011356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011358:	695a      	ldr	r2, [r3, #20]
 801135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011360:	2280      	movs	r2, #128	; 0x80
 8011362:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011368:	2b03      	cmp	r3, #3
 801136a:	d149      	bne.n	8011400 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136e:	3334      	adds	r3, #52	; 0x34
 8011370:	3330      	adds	r3, #48	; 0x30
 8011372:	4618      	mov	r0, r3
 8011374:	f7fe fa68 	bl	800f848 <ld_word>
 8011378:	4603      	mov	r3, r0
 801137a:	2b01      	cmp	r3, #1
 801137c:	d140      	bne.n	8011400 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801137e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011380:	3301      	adds	r3, #1
 8011382:	4619      	mov	r1, r3
 8011384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011386:	f7fe fd3f 	bl	800fe08 <move_window>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d137      	bne.n	8011400 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8011390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011392:	2200      	movs	r2, #0
 8011394:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011398:	3334      	adds	r3, #52	; 0x34
 801139a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fe fa52 	bl	800f848 <ld_word>
 80113a4:	4603      	mov	r3, r0
 80113a6:	461a      	mov	r2, r3
 80113a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d127      	bne.n	8011400 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	3334      	adds	r3, #52	; 0x34
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7fe fa5f 	bl	800f878 <ld_dword>
 80113ba:	4602      	mov	r2, r0
 80113bc:	4b1b      	ldr	r3, [pc, #108]	; (801142c <find_volume+0x49c>)
 80113be:	429a      	cmp	r2, r3
 80113c0:	d11e      	bne.n	8011400 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80113c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c4:	3334      	adds	r3, #52	; 0x34
 80113c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fe fa54 	bl	800f878 <ld_dword>
 80113d0:	4602      	mov	r2, r0
 80113d2:	4b17      	ldr	r3, [pc, #92]	; (8011430 <find_volume+0x4a0>)
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d113      	bne.n	8011400 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80113d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113da:	3334      	adds	r3, #52	; 0x34
 80113dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fe fa49 	bl	800f878 <ld_dword>
 80113e6:	4602      	mov	r2, r0
 80113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ea:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80113ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ee:	3334      	adds	r3, #52	; 0x34
 80113f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7fe fa3f 	bl	800f878 <ld_dword>
 80113fa:	4602      	mov	r2, r0
 80113fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011402:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011406:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011408:	4b0a      	ldr	r3, [pc, #40]	; (8011434 <find_volume+0x4a4>)
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	3301      	adds	r3, #1
 801140e:	b29a      	uxth	r2, r3
 8011410:	4b08      	ldr	r3, [pc, #32]	; (8011434 <find_volume+0x4a4>)
 8011412:	801a      	strh	r2, [r3, #0]
 8011414:	4b07      	ldr	r3, [pc, #28]	; (8011434 <find_volume+0x4a4>)
 8011416:	881a      	ldrh	r2, [r3, #0]
 8011418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801141c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801141e:	f7fe fc8b 	bl	800fd38 <clear_lock>
#endif
	return FR_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3758      	adds	r7, #88	; 0x58
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	41615252 	.word	0x41615252
 8011430:	61417272 	.word	0x61417272
 8011434:	20000338 	.word	0x20000338

08011438 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011442:	2309      	movs	r3, #9
 8011444:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d02e      	beq.n	80114aa <validate+0x72>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d02a      	beq.n	80114aa <validate+0x72>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d025      	beq.n	80114aa <validate+0x72>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	889a      	ldrh	r2, [r3, #4]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	88db      	ldrh	r3, [r3, #6]
 8011468:	429a      	cmp	r2, r3
 801146a:	d11e      	bne.n	80114aa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4618      	mov	r0, r3
 8011472:	f7fe fae8 	bl	800fa46 <lock_fs>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d014      	beq.n	80114a6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	785b      	ldrb	r3, [r3, #1]
 8011482:	4618      	mov	r0, r3
 8011484:	f7fe f942 	bl	800f70c <disk_status>
 8011488:	4603      	mov	r3, r0
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	2b00      	cmp	r3, #0
 8011490:	d102      	bne.n	8011498 <validate+0x60>
				res = FR_OK;
 8011492:	2300      	movs	r3, #0
 8011494:	73fb      	strb	r3, [r7, #15]
 8011496:	e008      	b.n	80114aa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2100      	movs	r1, #0
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fe fae7 	bl	800fa72 <unlock_fs>
 80114a4:	e001      	b.n	80114aa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80114a6:	230f      	movs	r3, #15
 80114a8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80114aa:	7bfb      	ldrb	r3, [r7, #15]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d102      	bne.n	80114b6 <validate+0x7e>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	e000      	b.n	80114b8 <validate+0x80>
 80114b6:	2300      	movs	r3, #0
 80114b8:	683a      	ldr	r2, [r7, #0]
 80114ba:	6013      	str	r3, [r2, #0]
	return res;
 80114bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
	...

080114c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b088      	sub	sp, #32
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	4613      	mov	r3, r2
 80114d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80114da:	f107 0310 	add.w	r3, r7, #16
 80114de:	4618      	mov	r0, r3
 80114e0:	f7ff fcbb 	bl	8010e5a <get_ldnumber>
 80114e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	da01      	bge.n	80114f0 <f_mount+0x28>
 80114ec:	230b      	movs	r3, #11
 80114ee:	e048      	b.n	8011582 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80114f0:	4a26      	ldr	r2, [pc, #152]	; (801158c <f_mount+0xc4>)
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00f      	beq.n	8011520 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011500:	69b8      	ldr	r0, [r7, #24]
 8011502:	f7fe fc19 	bl	800fd38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	4618      	mov	r0, r3
 801150c:	f001 f828 	bl	8012560 <ff_del_syncobj>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d101      	bne.n	801151a <f_mount+0x52>
 8011516:	2302      	movs	r3, #2
 8011518:	e033      	b.n	8011582 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	2200      	movs	r2, #0
 801151e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d00f      	beq.n	8011546 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2200      	movs	r2, #0
 801152a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	b2da      	uxtb	r2, r3
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	330c      	adds	r3, #12
 8011534:	4619      	mov	r1, r3
 8011536:	4610      	mov	r0, r2
 8011538:	f000 fff7 	bl	801252a <ff_cre_syncobj>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	d101      	bne.n	8011546 <f_mount+0x7e>
 8011542:	2302      	movs	r3, #2
 8011544:	e01d      	b.n	8011582 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	4910      	ldr	r1, [pc, #64]	; (801158c <f_mount+0xc4>)
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d002      	beq.n	801155c <f_mount+0x94>
 8011556:	79fb      	ldrb	r3, [r7, #7]
 8011558:	2b01      	cmp	r3, #1
 801155a:	d001      	beq.n	8011560 <f_mount+0x98>
 801155c:	2300      	movs	r3, #0
 801155e:	e010      	b.n	8011582 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011560:	f107 010c 	add.w	r1, r7, #12
 8011564:	f107 0308 	add.w	r3, r7, #8
 8011568:	2200      	movs	r2, #0
 801156a:	4618      	mov	r0, r3
 801156c:	f7ff fd10 	bl	8010f90 <find_volume>
 8011570:	4603      	mov	r3, r0
 8011572:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	7dfa      	ldrb	r2, [r7, #23]
 8011578:	4611      	mov	r1, r2
 801157a:	4618      	mov	r0, r3
 801157c:	f7fe fa79 	bl	800fa72 <unlock_fs>
 8011580:	7dfb      	ldrb	r3, [r7, #23]
}
 8011582:	4618      	mov	r0, r3
 8011584:	3720      	adds	r7, #32
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	20000334 	.word	0x20000334

08011590 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b09a      	sub	sp, #104	; 0x68
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	4613      	mov	r3, r2
 801159c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d101      	bne.n	80115a8 <f_open+0x18>
 80115a4:	2309      	movs	r3, #9
 80115a6:	e1b4      	b.n	8011912 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80115a8:	79fb      	ldrb	r3, [r7, #7]
 80115aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115ae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80115b0:	79fa      	ldrb	r2, [r7, #7]
 80115b2:	f107 0114 	add.w	r1, r7, #20
 80115b6:	f107 0308 	add.w	r3, r7, #8
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7ff fce8 	bl	8010f90 <find_volume>
 80115c0:	4603      	mov	r3, r0
 80115c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80115c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	f040 8191 	bne.w	80118f2 <f_open+0x362>
		dj.obj.fs = fs;
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	f107 0318 	add.w	r3, r7, #24
 80115da:	4611      	mov	r1, r2
 80115dc:	4618      	mov	r0, r3
 80115de:	f7ff fbcb 	bl	8010d78 <follow_path>
 80115e2:	4603      	mov	r3, r0
 80115e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80115e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d11a      	bne.n	8011626 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80115f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80115f4:	b25b      	sxtb	r3, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	da03      	bge.n	8011602 <f_open+0x72>
				res = FR_INVALID_NAME;
 80115fa:	2306      	movs	r3, #6
 80115fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011600:	e011      	b.n	8011626 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011602:	79fb      	ldrb	r3, [r7, #7]
 8011604:	f023 0301 	bic.w	r3, r3, #1
 8011608:	2b00      	cmp	r3, #0
 801160a:	bf14      	ite	ne
 801160c:	2301      	movne	r3, #1
 801160e:	2300      	moveq	r3, #0
 8011610:	b2db      	uxtb	r3, r3
 8011612:	461a      	mov	r2, r3
 8011614:	f107 0318 	add.w	r3, r7, #24
 8011618:	4611      	mov	r1, r2
 801161a:	4618      	mov	r0, r3
 801161c:	f7fe fa44 	bl	800faa8 <chk_lock>
 8011620:	4603      	mov	r3, r0
 8011622:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011626:	79fb      	ldrb	r3, [r7, #7]
 8011628:	f003 031c 	and.w	r3, r3, #28
 801162c:	2b00      	cmp	r3, #0
 801162e:	d07f      	beq.n	8011730 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011630:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011634:	2b00      	cmp	r3, #0
 8011636:	d017      	beq.n	8011668 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011638:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801163c:	2b04      	cmp	r3, #4
 801163e:	d10e      	bne.n	801165e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011640:	f7fe fa8e 	bl	800fb60 <enq_lock>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d006      	beq.n	8011658 <f_open+0xc8>
 801164a:	f107 0318 	add.w	r3, r7, #24
 801164e:	4618      	mov	r0, r3
 8011650:	f7ff f9ca 	bl	80109e8 <dir_register>
 8011654:	4603      	mov	r3, r0
 8011656:	e000      	b.n	801165a <f_open+0xca>
 8011658:	2312      	movs	r3, #18
 801165a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801165e:	79fb      	ldrb	r3, [r7, #7]
 8011660:	f043 0308 	orr.w	r3, r3, #8
 8011664:	71fb      	strb	r3, [r7, #7]
 8011666:	e010      	b.n	801168a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011668:	7fbb      	ldrb	r3, [r7, #30]
 801166a:	f003 0311 	and.w	r3, r3, #17
 801166e:	2b00      	cmp	r3, #0
 8011670:	d003      	beq.n	801167a <f_open+0xea>
					res = FR_DENIED;
 8011672:	2307      	movs	r3, #7
 8011674:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011678:	e007      	b.n	801168a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801167a:	79fb      	ldrb	r3, [r7, #7]
 801167c:	f003 0304 	and.w	r3, r3, #4
 8011680:	2b00      	cmp	r3, #0
 8011682:	d002      	beq.n	801168a <f_open+0xfa>
 8011684:	2308      	movs	r3, #8
 8011686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801168a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801168e:	2b00      	cmp	r3, #0
 8011690:	d168      	bne.n	8011764 <f_open+0x1d4>
 8011692:	79fb      	ldrb	r3, [r7, #7]
 8011694:	f003 0308 	and.w	r3, r3, #8
 8011698:	2b00      	cmp	r3, #0
 801169a:	d063      	beq.n	8011764 <f_open+0x1d4>
				dw = GET_FATTIME();
 801169c:	f7fc f9e4 	bl	800da68 <get_fattime>
 80116a0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80116a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a4:	330e      	adds	r3, #14
 80116a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7fe f923 	bl	800f8f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	3316      	adds	r3, #22
 80116b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe f91d 	bl	800f8f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80116ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116bc:	330b      	adds	r3, #11
 80116be:	2220      	movs	r2, #32
 80116c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116c6:	4611      	mov	r1, r2
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7ff f89c 	bl	8010806 <ld_clust>
 80116ce:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116d4:	2200      	movs	r2, #0
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7ff f8b4 	bl	8010844 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80116dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116de:	331c      	adds	r3, #28
 80116e0:	2100      	movs	r1, #0
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fe f906 	bl	800f8f4 <st_dword>
					fs->wflag = 1;
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	2201      	movs	r2, #1
 80116ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80116ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d037      	beq.n	8011764 <f_open+0x1d4>
						dw = fs->winsect;
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80116fa:	f107 0318 	add.w	r3, r7, #24
 80116fe:	2200      	movs	r2, #0
 8011700:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011702:	4618      	mov	r0, r3
 8011704:	f7fe fdc7 	bl	8010296 <remove_chain>
 8011708:	4603      	mov	r3, r0
 801170a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801170e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011712:	2b00      	cmp	r3, #0
 8011714:	d126      	bne.n	8011764 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801171a:	4618      	mov	r0, r3
 801171c:	f7fe fb74 	bl	800fe08 <move_window>
 8011720:	4603      	mov	r3, r0
 8011722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801172a:	3a01      	subs	r2, #1
 801172c:	611a      	str	r2, [r3, #16]
 801172e:	e019      	b.n	8011764 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011734:	2b00      	cmp	r3, #0
 8011736:	d115      	bne.n	8011764 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011738:	7fbb      	ldrb	r3, [r7, #30]
 801173a:	f003 0310 	and.w	r3, r3, #16
 801173e:	2b00      	cmp	r3, #0
 8011740:	d003      	beq.n	801174a <f_open+0x1ba>
					res = FR_NO_FILE;
 8011742:	2304      	movs	r3, #4
 8011744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011748:	e00c      	b.n	8011764 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801174a:	79fb      	ldrb	r3, [r7, #7]
 801174c:	f003 0302 	and.w	r3, r3, #2
 8011750:	2b00      	cmp	r3, #0
 8011752:	d007      	beq.n	8011764 <f_open+0x1d4>
 8011754:	7fbb      	ldrb	r3, [r7, #30]
 8011756:	f003 0301 	and.w	r3, r3, #1
 801175a:	2b00      	cmp	r3, #0
 801175c:	d002      	beq.n	8011764 <f_open+0x1d4>
						res = FR_DENIED;
 801175e:	2307      	movs	r3, #7
 8011760:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011764:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011768:	2b00      	cmp	r3, #0
 801176a:	d128      	bne.n	80117be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801176c:	79fb      	ldrb	r3, [r7, #7]
 801176e:	f003 0308 	and.w	r3, r3, #8
 8011772:	2b00      	cmp	r3, #0
 8011774:	d003      	beq.n	801177e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011776:	79fb      	ldrb	r3, [r7, #7]
 8011778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801177c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801178c:	79fb      	ldrb	r3, [r7, #7]
 801178e:	f023 0301 	bic.w	r3, r3, #1
 8011792:	2b00      	cmp	r3, #0
 8011794:	bf14      	ite	ne
 8011796:	2301      	movne	r3, #1
 8011798:	2300      	moveq	r3, #0
 801179a:	b2db      	uxtb	r3, r3
 801179c:	461a      	mov	r2, r3
 801179e:	f107 0318 	add.w	r3, r7, #24
 80117a2:	4611      	mov	r1, r2
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7fe f9fd 	bl	800fba4 <inc_lock>
 80117aa:	4602      	mov	r2, r0
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d102      	bne.n	80117be <f_open+0x22e>
 80117b8:	2302      	movs	r3, #2
 80117ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80117be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f040 8095 	bne.w	80118f2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117cc:	4611      	mov	r1, r2
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7ff f819 	bl	8010806 <ld_clust>
 80117d4:	4602      	mov	r2, r0
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80117da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117dc:	331c      	adds	r3, #28
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fe f84a 	bl	800f878 <ld_dword>
 80117e4:	4602      	mov	r2, r0
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	2200      	movs	r2, #0
 80117ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80117f0:	697a      	ldr	r2, [r7, #20]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	88da      	ldrh	r2, [r3, #6]
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	79fa      	ldrb	r2, [r7, #7]
 8011802:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2200      	movs	r2, #0
 8011808:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2200      	movs	r2, #0
 801180e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2200      	movs	r2, #0
 8011814:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	3330      	adds	r3, #48	; 0x30
 801181a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801181e:	2100      	movs	r1, #0
 8011820:	4618      	mov	r0, r3
 8011822:	f7fe f8b4 	bl	800f98e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011826:	79fb      	ldrb	r3, [r7, #7]
 8011828:	f003 0320 	and.w	r3, r3, #32
 801182c:	2b00      	cmp	r3, #0
 801182e:	d060      	beq.n	80118f2 <f_open+0x362>
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d05c      	beq.n	80118f2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	68da      	ldr	r2, [r3, #12]
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	895b      	ldrh	r3, [r3, #10]
 8011844:	025b      	lsls	r3, r3, #9
 8011846:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	689b      	ldr	r3, [r3, #8]
 801184c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011854:	e016      	b.n	8011884 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801185a:	4618      	mov	r0, r3
 801185c:	f7fe fb8f 	bl	800ff7e <get_fat>
 8011860:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011864:	2b01      	cmp	r3, #1
 8011866:	d802      	bhi.n	801186e <f_open+0x2de>
 8011868:	2302      	movs	r3, #2
 801186a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801186e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011874:	d102      	bne.n	801187c <f_open+0x2ec>
 8011876:	2301      	movs	r3, #1
 8011878:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801187c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801187e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011884:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011888:	2b00      	cmp	r3, #0
 801188a:	d103      	bne.n	8011894 <f_open+0x304>
 801188c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801188e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011890:	429a      	cmp	r2, r3
 8011892:	d8e0      	bhi.n	8011856 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011898:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801189a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d127      	bne.n	80118f2 <f_open+0x362>
 80118a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d022      	beq.n	80118f2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fe fb45 	bl	800ff40 <clust2sect>
 80118b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80118b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d103      	bne.n	80118c6 <f_open+0x336>
						res = FR_INT_ERR;
 80118be:	2302      	movs	r3, #2
 80118c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80118c4:	e015      	b.n	80118f2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80118c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118c8:	0a5a      	lsrs	r2, r3, #9
 80118ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118cc:	441a      	add	r2, r3
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	7858      	ldrb	r0, [r3, #1]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	6a1a      	ldr	r2, [r3, #32]
 80118e0:	2301      	movs	r3, #1
 80118e2:	f7fd ff53 	bl	800f78c <disk_read>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d002      	beq.n	80118f2 <f_open+0x362>
 80118ec:	2301      	movs	r3, #1
 80118ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80118f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d002      	beq.n	8011900 <f_open+0x370>
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2200      	movs	r2, #0
 80118fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8011906:	4611      	mov	r1, r2
 8011908:	4618      	mov	r0, r3
 801190a:	f7fe f8b2 	bl	800fa72 <unlock_fs>
 801190e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011912:	4618      	mov	r0, r3
 8011914:	3768      	adds	r7, #104	; 0x68
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801191a:	b580      	push	{r7, lr}
 801191c:	b08c      	sub	sp, #48	; 0x30
 801191e:	af00      	add	r7, sp, #0
 8011920:	60f8      	str	r0, [r7, #12]
 8011922:	60b9      	str	r1, [r7, #8]
 8011924:	607a      	str	r2, [r7, #4]
 8011926:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2200      	movs	r2, #0
 8011930:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f107 0210 	add.w	r2, r7, #16
 8011938:	4611      	mov	r1, r2
 801193a:	4618      	mov	r0, r3
 801193c:	f7ff fd7c 	bl	8011438 <validate>
 8011940:	4603      	mov	r3, r0
 8011942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801194a:	2b00      	cmp	r3, #0
 801194c:	d107      	bne.n	801195e <f_write+0x44>
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	7d5b      	ldrb	r3, [r3, #21]
 8011952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801195a:	2b00      	cmp	r3, #0
 801195c:	d009      	beq.n	8011972 <f_write+0x58>
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011964:	4611      	mov	r1, r2
 8011966:	4618      	mov	r0, r3
 8011968:	f7fe f883 	bl	800fa72 <unlock_fs>
 801196c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011970:	e173      	b.n	8011c5a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	7d1b      	ldrb	r3, [r3, #20]
 8011976:	f003 0302 	and.w	r3, r3, #2
 801197a:	2b00      	cmp	r3, #0
 801197c:	d106      	bne.n	801198c <f_write+0x72>
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	2107      	movs	r1, #7
 8011982:	4618      	mov	r0, r3
 8011984:	f7fe f875 	bl	800fa72 <unlock_fs>
 8011988:	2307      	movs	r3, #7
 801198a:	e166      	b.n	8011c5a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	699a      	ldr	r2, [r3, #24]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	441a      	add	r2, r3
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	429a      	cmp	r2, r3
 801199a:	f080 814b 	bcs.w	8011c34 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	43db      	mvns	r3, r3
 80119a4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80119a6:	e145      	b.n	8011c34 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	699b      	ldr	r3, [r3, #24]
 80119ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f040 8101 	bne.w	8011bb8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	699b      	ldr	r3, [r3, #24]
 80119ba:	0a5b      	lsrs	r3, r3, #9
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	8952      	ldrh	r2, [r2, #10]
 80119c0:	3a01      	subs	r2, #1
 80119c2:	4013      	ands	r3, r2
 80119c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d14d      	bne.n	8011a68 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	699b      	ldr	r3, [r3, #24]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d10c      	bne.n	80119ee <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80119da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d11a      	bne.n	8011a16 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2100      	movs	r1, #0
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fe fcbb 	bl	8010360 <create_chain>
 80119ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80119ec:	e013      	b.n	8011a16 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d007      	beq.n	8011a06 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	699b      	ldr	r3, [r3, #24]
 80119fa:	4619      	mov	r1, r3
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f7fe fd47 	bl	8010490 <clmt_clust>
 8011a02:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a04:	e007      	b.n	8011a16 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011a06:	68fa      	ldr	r2, [r7, #12]
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	69db      	ldr	r3, [r3, #28]
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	4610      	mov	r0, r2
 8011a10:	f7fe fca6 	bl	8010360 <create_chain>
 8011a14:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	f000 8110 	beq.w	8011c3e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d109      	bne.n	8011a38 <f_write+0x11e>
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2202      	movs	r2, #2
 8011a28:	755a      	strb	r2, [r3, #21]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	2102      	movs	r1, #2
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7fe f81f 	bl	800fa72 <unlock_fs>
 8011a34:	2302      	movs	r3, #2
 8011a36:	e110      	b.n	8011c5a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a3e:	d109      	bne.n	8011a54 <f_write+0x13a>
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2201      	movs	r2, #1
 8011a44:	755a      	strb	r2, [r3, #21]
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	2101      	movs	r1, #1
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fe f811 	bl	800fa72 <unlock_fs>
 8011a50:	2301      	movs	r3, #1
 8011a52:	e102      	b.n	8011c5a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a58:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d102      	bne.n	8011a68 <f_write+0x14e>
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a66:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	7d1b      	ldrb	r3, [r3, #20]
 8011a6c:	b25b      	sxtb	r3, r3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	da1d      	bge.n	8011aae <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	7858      	ldrb	r0, [r3, #1]
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	6a1a      	ldr	r2, [r3, #32]
 8011a80:	2301      	movs	r3, #1
 8011a82:	f7fd fea3 	bl	800f7cc <disk_write>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d009      	beq.n	8011aa0 <f_write+0x186>
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	755a      	strb	r2, [r3, #21]
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	2101      	movs	r1, #1
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fd ffeb 	bl	800fa72 <unlock_fs>
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e0dc      	b.n	8011c5a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	7d1b      	ldrb	r3, [r3, #20]
 8011aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011aae:	693a      	ldr	r2, [r7, #16]
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	69db      	ldr	r3, [r3, #28]
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	4610      	mov	r0, r2
 8011ab8:	f7fe fa42 	bl	800ff40 <clust2sect>
 8011abc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d109      	bne.n	8011ad8 <f_write+0x1be>
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2202      	movs	r2, #2
 8011ac8:	755a      	strb	r2, [r3, #21]
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	2102      	movs	r1, #2
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fd ffcf 	bl	800fa72 <unlock_fs>
 8011ad4:	2302      	movs	r3, #2
 8011ad6:	e0c0      	b.n	8011c5a <f_write+0x340>
			sect += csect;
 8011ad8:	697a      	ldr	r2, [r7, #20]
 8011ada:	69bb      	ldr	r3, [r7, #24]
 8011adc:	4413      	add	r3, r2
 8011ade:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	0a5b      	lsrs	r3, r3, #9
 8011ae4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011ae6:	6a3b      	ldr	r3, [r7, #32]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d041      	beq.n	8011b70 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011aec:	69ba      	ldr	r2, [r7, #24]
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	4413      	add	r3, r2
 8011af2:	693a      	ldr	r2, [r7, #16]
 8011af4:	8952      	ldrh	r2, [r2, #10]
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d905      	bls.n	8011b06 <f_write+0x1ec>
					cc = fs->csize - csect;
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	895b      	ldrh	r3, [r3, #10]
 8011afe:	461a      	mov	r2, r3
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	1ad3      	subs	r3, r2, r3
 8011b04:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	7858      	ldrb	r0, [r3, #1]
 8011b0a:	6a3b      	ldr	r3, [r7, #32]
 8011b0c:	697a      	ldr	r2, [r7, #20]
 8011b0e:	69f9      	ldr	r1, [r7, #28]
 8011b10:	f7fd fe5c 	bl	800f7cc <disk_write>
 8011b14:	4603      	mov	r3, r0
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d009      	beq.n	8011b2e <f_write+0x214>
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	755a      	strb	r2, [r3, #21]
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	2101      	movs	r1, #1
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fd ffa4 	bl	800fa72 <unlock_fs>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e095      	b.n	8011c5a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	6a1a      	ldr	r2, [r3, #32]
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	1ad3      	subs	r3, r2, r3
 8011b36:	6a3a      	ldr	r2, [r7, #32]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d915      	bls.n	8011b68 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6a1a      	ldr	r2, [r3, #32]
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	1ad3      	subs	r3, r2, r3
 8011b4a:	025b      	lsls	r3, r3, #9
 8011b4c:	69fa      	ldr	r2, [r7, #28]
 8011b4e:	4413      	add	r3, r2
 8011b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b54:	4619      	mov	r1, r3
 8011b56:	f7fd fef9 	bl	800f94c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	7d1b      	ldrb	r3, [r3, #20]
 8011b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011b68:	6a3b      	ldr	r3, [r7, #32]
 8011b6a:	025b      	lsls	r3, r3, #9
 8011b6c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011b6e:	e044      	b.n	8011bfa <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	6a1b      	ldr	r3, [r3, #32]
 8011b74:	697a      	ldr	r2, [r7, #20]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d01b      	beq.n	8011bb2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	699a      	ldr	r2, [r3, #24]
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d215      	bcs.n	8011bb2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	7858      	ldrb	r0, [r3, #1]
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b90:	2301      	movs	r3, #1
 8011b92:	697a      	ldr	r2, [r7, #20]
 8011b94:	f7fd fdfa 	bl	800f78c <disk_read>
 8011b98:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d009      	beq.n	8011bb2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	755a      	strb	r2, [r3, #21]
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fd ff62 	bl	800fa72 <unlock_fs>
 8011bae:	2301      	movs	r3, #1
 8011bb0:	e053      	b.n	8011c5a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	699b      	ldr	r3, [r3, #24]
 8011bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011bc4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d901      	bls.n	8011bd2 <f_write+0x2b8>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	699b      	ldr	r3, [r3, #24]
 8011bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011be0:	4413      	add	r3, r2
 8011be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011be4:	69f9      	ldr	r1, [r7, #28]
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fd feb0 	bl	800f94c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	7d1b      	ldrb	r3, [r3, #20]
 8011bf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011bf4:	b2da      	uxtb	r2, r3
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011bfa:	69fa      	ldr	r2, [r7, #28]
 8011bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfe:	4413      	add	r3, r2
 8011c00:	61fb      	str	r3, [r7, #28]
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	699a      	ldr	r2, [r3, #24]
 8011c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c08:	441a      	add	r2, r3
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	619a      	str	r2, [r3, #24]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	68da      	ldr	r2, [r3, #12]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	bf38      	it	cc
 8011c1a:	461a      	movcc	r2, r3
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	60da      	str	r2, [r3, #12]
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	441a      	add	r2, r3
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	601a      	str	r2, [r3, #0]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	f47f aeb6 	bne.w	80119a8 <f_write+0x8e>
 8011c3c:	e000      	b.n	8011c40 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c3e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	7d1b      	ldrb	r3, [r3, #20]
 8011c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c48:	b2da      	uxtb	r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	2100      	movs	r1, #0
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fd ff0d 	bl	800fa72 <unlock_fs>
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3730      	adds	r7, #48	; 0x30
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b086      	sub	sp, #24
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f107 0208 	add.w	r2, r7, #8
 8011c70:	4611      	mov	r1, r2
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff fbe0 	bl	8011438 <validate>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011c7c:	7dfb      	ldrb	r3, [r7, #23]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d16d      	bne.n	8011d5e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	7d1b      	ldrb	r3, [r3, #20]
 8011c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d067      	beq.n	8011d5e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	7d1b      	ldrb	r3, [r3, #20]
 8011c92:	b25b      	sxtb	r3, r3
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	da1a      	bge.n	8011cce <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	7858      	ldrb	r0, [r3, #1]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6a1a      	ldr	r2, [r3, #32]
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	f7fd fd90 	bl	800f7cc <disk_write>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <f_sync+0x5e>
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fd fedb 	bl	800fa72 <unlock_fs>
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	e055      	b.n	8011d6c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	7d1b      	ldrb	r3, [r3, #20]
 8011cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cc8:	b2da      	uxtb	r2, r3
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011cce:	f7fb fecb 	bl	800da68 <get_fattime>
 8011cd2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011cd4:	68ba      	ldr	r2, [r7, #8]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4610      	mov	r0, r2
 8011cde:	f7fe f893 	bl	800fe08 <move_window>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011ce6:	7dfb      	ldrb	r3, [r7, #23]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d138      	bne.n	8011d5e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cf0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	330b      	adds	r3, #11
 8011cf6:	781a      	ldrb	r2, [r3, #0]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	330b      	adds	r3, #11
 8011cfc:	f042 0220 	orr.w	r2, r2, #32
 8011d00:	b2d2      	uxtb	r2, r2
 8011d02:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6818      	ldr	r0, [r3, #0]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	68f9      	ldr	r1, [r7, #12]
 8011d10:	f7fe fd98 	bl	8010844 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f103 021c 	add.w	r2, r3, #28
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	4610      	mov	r0, r2
 8011d22:	f7fd fde7 	bl	800f8f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	3316      	adds	r3, #22
 8011d2a:	6939      	ldr	r1, [r7, #16]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7fd fde1 	bl	800f8f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	3312      	adds	r3, #18
 8011d36:	2100      	movs	r1, #0
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7fd fdc0 	bl	800f8be <st_word>
					fs->wflag = 1;
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	2201      	movs	r2, #1
 8011d42:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fe f88c 	bl	800fe64 <sync_fs>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	7d1b      	ldrb	r3, [r3, #20]
 8011d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d58:	b2da      	uxtb	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	7dfa      	ldrb	r2, [r7, #23]
 8011d62:	4611      	mov	r1, r2
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7fd fe84 	bl	800fa72 <unlock_fs>
 8011d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3718      	adds	r7, #24
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b090      	sub	sp, #64	; 0x40
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f107 0208 	add.w	r2, r7, #8
 8011d84:	4611      	mov	r1, r2
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7ff fb56 	bl	8011438 <validate>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011d92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d103      	bne.n	8011da2 <f_lseek+0x2e>
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	7d5b      	ldrb	r3, [r3, #21]
 8011d9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d009      	beq.n	8011dbe <f_lseek+0x4a>
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011db0:	4611      	mov	r1, r2
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fd fe5d 	bl	800fa72 <unlock_fs>
 8011db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011dbc:	e229      	b.n	8012212 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	f000 80ea 	beq.w	8011f9c <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dce:	d164      	bne.n	8011e9a <f_lseek+0x126>
			tbl = fp->cltbl;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	1d1a      	adds	r2, r3, #4
 8011dda:	627a      	str	r2, [r7, #36]	; 0x24
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	617b      	str	r3, [r7, #20]
 8011de0:	2302      	movs	r3, #2
 8011de2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	689b      	ldr	r3, [r3, #8]
 8011de8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d044      	beq.n	8011e7a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	613b      	str	r3, [r7, #16]
 8011df4:	2300      	movs	r3, #0
 8011df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfa:	3302      	adds	r3, #2
 8011dfc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e00:	60fb      	str	r3, [r7, #12]
 8011e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e04:	3301      	adds	r3, #1
 8011e06:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7fe f8b6 	bl	800ff7e <get_fat>
 8011e12:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	d809      	bhi.n	8011e2e <f_lseek+0xba>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2202      	movs	r2, #2
 8011e1e:	755a      	strb	r2, [r3, #21]
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	2102      	movs	r1, #2
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7fd fe24 	bl	800fa72 <unlock_fs>
 8011e2a:	2302      	movs	r3, #2
 8011e2c:	e1f1      	b.n	8012212 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e34:	d109      	bne.n	8011e4a <f_lseek+0xd6>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2201      	movs	r2, #1
 8011e3a:	755a      	strb	r2, [r3, #21]
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	2101      	movs	r1, #1
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fd fe16 	bl	800fa72 <unlock_fs>
 8011e46:	2301      	movs	r3, #1
 8011e48:	e1e3      	b.n	8012212 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d0d4      	beq.n	8011dfe <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d809      	bhi.n	8011e70 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5e:	1d1a      	adds	r2, r3, #4
 8011e60:	627a      	str	r2, [r7, #36]	; 0x24
 8011e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e64:	601a      	str	r2, [r3, #0]
 8011e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e68:	1d1a      	adds	r2, r3, #4
 8011e6a:	627a      	str	r2, [r7, #36]	; 0x24
 8011e6c:	693a      	ldr	r2, [r7, #16]
 8011e6e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	699b      	ldr	r3, [r3, #24]
 8011e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d3ba      	bcc.n	8011df0 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e80:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d803      	bhi.n	8011e92 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8011e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	601a      	str	r2, [r3, #0]
 8011e90:	e1b6      	b.n	8012200 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011e92:	2311      	movs	r3, #17
 8011e94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011e98:	e1b2      	b.n	8012200 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	683a      	ldr	r2, [r7, #0]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d902      	bls.n	8011eaa <f_lseek+0x136>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	683a      	ldr	r2, [r7, #0]
 8011eae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f000 81a4 	beq.w	8012200 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f7fe fae6 	bl	8010490 <clmt_clust>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011eca:	68ba      	ldr	r2, [r7, #8]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	69db      	ldr	r3, [r3, #28]
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	4610      	mov	r0, r2
 8011ed4:	f7fe f834 	bl	800ff40 <clust2sect>
 8011ed8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011eda:	69bb      	ldr	r3, [r7, #24]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d109      	bne.n	8011ef4 <f_lseek+0x180>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2202      	movs	r2, #2
 8011ee4:	755a      	strb	r2, [r3, #21]
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	2102      	movs	r1, #2
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fd fdc1 	bl	800fa72 <unlock_fs>
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	e18e      	b.n	8012212 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	0a5b      	lsrs	r3, r3, #9
 8011efa:	68ba      	ldr	r2, [r7, #8]
 8011efc:	8952      	ldrh	r2, [r2, #10]
 8011efe:	3a01      	subs	r2, #1
 8011f00:	4013      	ands	r3, r2
 8011f02:	69ba      	ldr	r2, [r7, #24]
 8011f04:	4413      	add	r3, r2
 8011f06:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	699b      	ldr	r3, [r3, #24]
 8011f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f000 8175 	beq.w	8012200 <f_lseek+0x48c>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a1b      	ldr	r3, [r3, #32]
 8011f1a:	69ba      	ldr	r2, [r7, #24]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	f000 816f 	beq.w	8012200 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	7d1b      	ldrb	r3, [r3, #20]
 8011f26:	b25b      	sxtb	r3, r3
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	da1d      	bge.n	8011f68 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	7858      	ldrb	r0, [r3, #1]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6a1a      	ldr	r2, [r3, #32]
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	f7fd fc46 	bl	800f7cc <disk_write>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d009      	beq.n	8011f5a <f_lseek+0x1e6>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2201      	movs	r2, #1
 8011f4a:	755a      	strb	r2, [r3, #21]
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	2101      	movs	r1, #1
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7fd fd8e 	bl	800fa72 <unlock_fs>
 8011f56:	2301      	movs	r3, #1
 8011f58:	e15b      	b.n	8012212 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	7d1b      	ldrb	r3, [r3, #20]
 8011f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f62:	b2da      	uxtb	r2, r3
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	7858      	ldrb	r0, [r3, #1]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f72:	2301      	movs	r3, #1
 8011f74:	69ba      	ldr	r2, [r7, #24]
 8011f76:	f7fd fc09 	bl	800f78c <disk_read>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d009      	beq.n	8011f94 <f_lseek+0x220>
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2201      	movs	r2, #1
 8011f84:	755a      	strb	r2, [r3, #21]
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	2101      	movs	r1, #1
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fd fd71 	bl	800fa72 <unlock_fs>
 8011f90:	2301      	movs	r3, #1
 8011f92:	e13e      	b.n	8012212 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	69ba      	ldr	r2, [r7, #24]
 8011f98:	621a      	str	r2, [r3, #32]
 8011f9a:	e131      	b.n	8012200 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	683a      	ldr	r2, [r7, #0]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d908      	bls.n	8011fb8 <f_lseek+0x244>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	7d1b      	ldrb	r3, [r3, #20]
 8011faa:	f003 0302 	and.w	r3, r3, #2
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d102      	bne.n	8011fb8 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	699b      	ldr	r3, [r3, #24]
 8011fbc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fc6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 80c0 	beq.w	8012150 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	895b      	ldrh	r3, [r3, #10]
 8011fd4:	025b      	lsls	r3, r3, #9
 8011fd6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011fd8:	6a3b      	ldr	r3, [r7, #32]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d01b      	beq.n	8012016 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	1e5a      	subs	r2, r3, #1
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8011fe8:	6a3b      	ldr	r3, [r7, #32]
 8011fea:	1e59      	subs	r1, r3, #1
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d30f      	bcc.n	8012016 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011ff6:	6a3b      	ldr	r3, [r7, #32]
 8011ff8:	1e5a      	subs	r2, r3, #1
 8011ffa:	69fb      	ldr	r3, [r7, #28]
 8011ffc:	425b      	negs	r3, r3
 8011ffe:	401a      	ands	r2, r3
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	699b      	ldr	r3, [r3, #24]
 8012008:	683a      	ldr	r2, [r7, #0]
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	69db      	ldr	r3, [r3, #28]
 8012012:	63bb      	str	r3, [r7, #56]	; 0x38
 8012014:	e02c      	b.n	8012070 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	689b      	ldr	r3, [r3, #8]
 801201a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	2b00      	cmp	r3, #0
 8012020:	d123      	bne.n	801206a <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2100      	movs	r1, #0
 8012026:	4618      	mov	r0, r3
 8012028:	f7fe f99a 	bl	8010360 <create_chain>
 801202c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012030:	2b01      	cmp	r3, #1
 8012032:	d109      	bne.n	8012048 <f_lseek+0x2d4>
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2202      	movs	r2, #2
 8012038:	755a      	strb	r2, [r3, #21]
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	2102      	movs	r1, #2
 801203e:	4618      	mov	r0, r3
 8012040:	f7fd fd17 	bl	800fa72 <unlock_fs>
 8012044:	2302      	movs	r3, #2
 8012046:	e0e4      	b.n	8012212 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801204e:	d109      	bne.n	8012064 <f_lseek+0x2f0>
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2201      	movs	r2, #1
 8012054:	755a      	strb	r2, [r3, #21]
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	2101      	movs	r1, #1
 801205a:	4618      	mov	r0, r3
 801205c:	f7fd fd09 	bl	800fa72 <unlock_fs>
 8012060:	2301      	movs	r3, #1
 8012062:	e0d6      	b.n	8012212 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012068:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801206e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012072:	2b00      	cmp	r3, #0
 8012074:	d06c      	beq.n	8012150 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012076:	e044      	b.n	8012102 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012078:	683a      	ldr	r2, [r7, #0]
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	603b      	str	r3, [r7, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	699a      	ldr	r2, [r3, #24]
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	441a      	add	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	7d1b      	ldrb	r3, [r3, #20]
 8012090:	f003 0302 	and.w	r3, r3, #2
 8012094:	2b00      	cmp	r3, #0
 8012096:	d00b      	beq.n	80120b0 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801209c:	4618      	mov	r0, r3
 801209e:	f7fe f95f 	bl	8010360 <create_chain>
 80120a2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80120a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d108      	bne.n	80120bc <f_lseek+0x348>
							ofs = 0; break;
 80120aa:	2300      	movs	r3, #0
 80120ac:	603b      	str	r3, [r7, #0]
 80120ae:	e02c      	b.n	801210a <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7fd ff62 	bl	800ff7e <get_fat>
 80120ba:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80120bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120c2:	d109      	bne.n	80120d8 <f_lseek+0x364>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2201      	movs	r2, #1
 80120c8:	755a      	strb	r2, [r3, #21]
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2101      	movs	r1, #1
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7fd fccf 	bl	800fa72 <unlock_fs>
 80120d4:	2301      	movs	r3, #1
 80120d6:	e09c      	b.n	8012212 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80120d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120da:	2b01      	cmp	r3, #1
 80120dc:	d904      	bls.n	80120e8 <f_lseek+0x374>
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d309      	bcc.n	80120fc <f_lseek+0x388>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2202      	movs	r2, #2
 80120ec:	755a      	strb	r2, [r3, #21]
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	2102      	movs	r1, #2
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fd fcbd 	bl	800fa72 <unlock_fs>
 80120f8:	2302      	movs	r3, #2
 80120fa:	e08a      	b.n	8012212 <f_lseek+0x49e>
					fp->clust = clst;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012100:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012102:	683a      	ldr	r2, [r7, #0]
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	429a      	cmp	r2, r3
 8012108:	d8b6      	bhi.n	8012078 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	699a      	ldr	r2, [r3, #24]
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	441a      	add	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801211c:	2b00      	cmp	r3, #0
 801211e:	d017      	beq.n	8012150 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012124:	4618      	mov	r0, r3
 8012126:	f7fd ff0b 	bl	800ff40 <clust2sect>
 801212a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801212e:	2b00      	cmp	r3, #0
 8012130:	d109      	bne.n	8012146 <f_lseek+0x3d2>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2202      	movs	r2, #2
 8012136:	755a      	strb	r2, [r3, #21]
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	2102      	movs	r1, #2
 801213c:	4618      	mov	r0, r3
 801213e:	f7fd fc98 	bl	800fa72 <unlock_fs>
 8012142:	2302      	movs	r3, #2
 8012144:	e065      	b.n	8012212 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	0a5b      	lsrs	r3, r3, #9
 801214a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801214c:	4413      	add	r3, r2
 801214e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	699a      	ldr	r2, [r3, #24]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	429a      	cmp	r2, r3
 801215a:	d90a      	bls.n	8012172 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	699a      	ldr	r2, [r3, #24]
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	7d1b      	ldrb	r3, [r3, #20]
 8012168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801216c:	b2da      	uxtb	r2, r3
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801217a:	2b00      	cmp	r3, #0
 801217c:	d040      	beq.n	8012200 <f_lseek+0x48c>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6a1b      	ldr	r3, [r3, #32]
 8012182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012184:	429a      	cmp	r2, r3
 8012186:	d03b      	beq.n	8012200 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	7d1b      	ldrb	r3, [r3, #20]
 801218c:	b25b      	sxtb	r3, r3
 801218e:	2b00      	cmp	r3, #0
 8012190:	da1d      	bge.n	80121ce <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	7858      	ldrb	r0, [r3, #1]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6a1a      	ldr	r2, [r3, #32]
 80121a0:	2301      	movs	r3, #1
 80121a2:	f7fd fb13 	bl	800f7cc <disk_write>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d009      	beq.n	80121c0 <f_lseek+0x44c>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2201      	movs	r2, #1
 80121b0:	755a      	strb	r2, [r3, #21]
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	2101      	movs	r1, #1
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fd fc5b 	bl	800fa72 <unlock_fs>
 80121bc:	2301      	movs	r3, #1
 80121be:	e028      	b.n	8012212 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	7d1b      	ldrb	r3, [r3, #20]
 80121c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121c8:	b2da      	uxtb	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	7858      	ldrb	r0, [r3, #1]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121d8:	2301      	movs	r3, #1
 80121da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121dc:	f7fd fad6 	bl	800f78c <disk_read>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d009      	beq.n	80121fa <f_lseek+0x486>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2201      	movs	r2, #1
 80121ea:	755a      	strb	r2, [r3, #21]
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	2101      	movs	r1, #1
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7fd fc3e 	bl	800fa72 <unlock_fs>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e00b      	b.n	8012212 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012206:	4611      	mov	r1, r2
 8012208:	4618      	mov	r0, r3
 801220a:	f7fd fc32 	bl	800fa72 <unlock_fs>
 801220e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012212:	4618      	mov	r0, r3
 8012214:	3740      	adds	r7, #64	; 0x40
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b086      	sub	sp, #24
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
 8012222:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <f_opendir+0x14>
 801222a:	2309      	movs	r3, #9
 801222c:	e06a      	b.n	8012304 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012232:	f107 010c 	add.w	r1, r7, #12
 8012236:	463b      	mov	r3, r7
 8012238:	2200      	movs	r2, #0
 801223a:	4618      	mov	r0, r3
 801223c:	f7fe fea8 	bl	8010f90 <find_volume>
 8012240:	4603      	mov	r3, r0
 8012242:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012244:	7dfb      	ldrb	r3, [r7, #23]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d14f      	bne.n	80122ea <f_opendir+0xd0>
		obj->fs = fs;
 801224a:	68fa      	ldr	r2, [r7, #12]
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	4619      	mov	r1, r3
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7fe fd8f 	bl	8010d78 <follow_path>
 801225a:	4603      	mov	r3, r0
 801225c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801225e:	7dfb      	ldrb	r3, [r7, #23]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d13d      	bne.n	80122e0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801226a:	b25b      	sxtb	r3, r3
 801226c:	2b00      	cmp	r3, #0
 801226e:	db12      	blt.n	8012296 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	799b      	ldrb	r3, [r3, #6]
 8012274:	f003 0310 	and.w	r3, r3, #16
 8012278:	2b00      	cmp	r3, #0
 801227a:	d00a      	beq.n	8012292 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6a1b      	ldr	r3, [r3, #32]
 8012282:	4619      	mov	r1, r3
 8012284:	4610      	mov	r0, r2
 8012286:	f7fe fabe 	bl	8010806 <ld_clust>
 801228a:	4602      	mov	r2, r0
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	609a      	str	r2, [r3, #8]
 8012290:	e001      	b.n	8012296 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012292:	2305      	movs	r3, #5
 8012294:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012296:	7dfb      	ldrb	r3, [r7, #23]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d121      	bne.n	80122e0 <f_opendir+0xc6>
				obj->id = fs->id;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	88da      	ldrh	r2, [r3, #6]
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80122a4:	2100      	movs	r1, #0
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f7fe f926 	bl	80104f8 <dir_sdi>
 80122ac:	4603      	mov	r3, r0
 80122ae:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80122b0:	7dfb      	ldrb	r3, [r7, #23]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d114      	bne.n	80122e0 <f_opendir+0xc6>
					if (obj->sclust) {
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	689b      	ldr	r3, [r3, #8]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00d      	beq.n	80122da <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80122be:	2100      	movs	r1, #0
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7fd fc6f 	bl	800fba4 <inc_lock>
 80122c6:	4602      	mov	r2, r0
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	691b      	ldr	r3, [r3, #16]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d105      	bne.n	80122e0 <f_opendir+0xc6>
 80122d4:	2312      	movs	r3, #18
 80122d6:	75fb      	strb	r3, [r7, #23]
 80122d8:	e002      	b.n	80122e0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	2200      	movs	r2, #0
 80122de:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80122e0:	7dfb      	ldrb	r3, [r7, #23]
 80122e2:	2b04      	cmp	r3, #4
 80122e4:	d101      	bne.n	80122ea <f_opendir+0xd0>
 80122e6:	2305      	movs	r3, #5
 80122e8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80122ea:	7dfb      	ldrb	r3, [r7, #23]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d002      	beq.n	80122f6 <f_opendir+0xdc>
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	2200      	movs	r2, #0
 80122f4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	7dfa      	ldrb	r2, [r7, #23]
 80122fa:	4611      	mov	r1, r2
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7fd fbb8 	bl	800fa72 <unlock_fs>
 8012302:	7dfb      	ldrb	r3, [r7, #23]
}
 8012304:	4618      	mov	r0, r3
 8012306:	3718      	adds	r7, #24
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f107 0208 	add.w	r2, r7, #8
 801231a:	4611      	mov	r1, r2
 801231c:	4618      	mov	r0, r3
 801231e:	f7ff f88b 	bl	8011438 <validate>
 8012322:	4603      	mov	r3, r0
 8012324:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012326:	7bfb      	ldrb	r3, [r7, #15]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d115      	bne.n	8012358 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	691b      	ldr	r3, [r3, #16]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d006      	beq.n	8012342 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	691b      	ldr	r3, [r3, #16]
 8012338:	4618      	mov	r0, r3
 801233a:	f7fd fcc1 	bl	800fcc0 <dec_lock>
 801233e:	4603      	mov	r3, r0
 8012340:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012342:	7bfb      	ldrb	r3, [r7, #15]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d102      	bne.n	801234e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	2100      	movs	r1, #0
 8012352:	4618      	mov	r0, r3
 8012354:	f7fd fb8d 	bl	800fa72 <unlock_fs>
#endif
	}
	return res;
 8012358:	7bfb      	ldrb	r3, [r7, #15]
}
 801235a:	4618      	mov	r0, r3
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}

08012362 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012362:	b580      	push	{r7, lr}
 8012364:	b084      	sub	sp, #16
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
 801236a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f107 0208 	add.w	r2, r7, #8
 8012372:	4611      	mov	r1, r2
 8012374:	4618      	mov	r0, r3
 8012376:	f7ff f85f 	bl	8011438 <validate>
 801237a:	4603      	mov	r3, r0
 801237c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801237e:	7bfb      	ldrb	r3, [r7, #15]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d126      	bne.n	80123d2 <f_readdir+0x70>
		if (!fno) {
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d106      	bne.n	8012398 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801238a:	2100      	movs	r1, #0
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7fe f8b3 	bl	80104f8 <dir_sdi>
 8012392:	4603      	mov	r3, r0
 8012394:	73fb      	strb	r3, [r7, #15]
 8012396:	e01c      	b.n	80123d2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012398:	2100      	movs	r1, #0
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f7fe fa72 	bl	8010884 <dir_read>
 80123a0:	4603      	mov	r3, r0
 80123a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80123a4:	7bfb      	ldrb	r3, [r7, #15]
 80123a6:	2b04      	cmp	r3, #4
 80123a8:	d101      	bne.n	80123ae <f_readdir+0x4c>
 80123aa:	2300      	movs	r3, #0
 80123ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80123ae:	7bfb      	ldrb	r3, [r7, #15]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10e      	bne.n	80123d2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7fe fb48 	bl	8010a4c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80123bc:	2100      	movs	r1, #0
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7fe f915 	bl	80105ee <dir_next>
 80123c4:	4603      	mov	r3, r0
 80123c6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80123c8:	7bfb      	ldrb	r3, [r7, #15]
 80123ca:	2b04      	cmp	r3, #4
 80123cc:	d101      	bne.n	80123d2 <f_readdir+0x70>
 80123ce:	2300      	movs	r3, #0
 80123d0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	7bfa      	ldrb	r2, [r7, #15]
 80123d6:	4611      	mov	r1, r2
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fd fb4a 	bl	800fa72 <unlock_fs>
 80123de:	7bfb      	ldrb	r3, [r7, #15]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3710      	adds	r7, #16
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80123f2:	6839      	ldr	r1, [r7, #0]
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7ff ffb4 	bl	8012362 <f_readdir>
 80123fa:	4603      	mov	r3, r0
 80123fc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d114      	bne.n	801242e <f_findnext+0x46>
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d011      	beq.n	801242e <f_findnext+0x46>
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	7a5b      	ldrb	r3, [r3, #9]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d00d      	beq.n	801242e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	f103 0109 	add.w	r1, r3, #9
 801241c:	2300      	movs	r3, #0
 801241e:	2200      	movs	r2, #0
 8012420:	f7fe fb9a 	bl	8010b58 <pattern_matching>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d100      	bne.n	801242c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801242a:	e7e2      	b.n	80123f2 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801242c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012430:	4618      	mov	r0, r3
 8012432:	3710      	adds	r7, #16
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b086      	sub	sp, #24
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
 8012444:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	683a      	ldr	r2, [r7, #0]
 801244a:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 801244c:	6879      	ldr	r1, [r7, #4]
 801244e:	68f8      	ldr	r0, [r7, #12]
 8012450:	f7ff fee3 	bl	801221a <f_opendir>
 8012454:	4603      	mov	r3, r0
 8012456:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012458:	7dfb      	ldrb	r3, [r7, #23]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d105      	bne.n	801246a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801245e:	68b9      	ldr	r1, [r7, #8]
 8012460:	68f8      	ldr	r0, [r7, #12]
 8012462:	f7ff ffc1 	bl	80123e8 <f_findnext>
 8012466:	4603      	mov	r3, r0
 8012468:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801246a:	7dfb      	ldrb	r3, [r7, #23]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3718      	adds	r7, #24
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012474:	b480      	push	{r7}
 8012476:	b087      	sub	sp, #28
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	4613      	mov	r3, r2
 8012480:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012482:	2301      	movs	r3, #1
 8012484:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801248a:	4b1f      	ldr	r3, [pc, #124]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 801248c:	7a5b      	ldrb	r3, [r3, #9]
 801248e:	b2db      	uxtb	r3, r3
 8012490:	2b00      	cmp	r3, #0
 8012492:	d131      	bne.n	80124f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012494:	4b1c      	ldr	r3, [pc, #112]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 8012496:	7a5b      	ldrb	r3, [r3, #9]
 8012498:	b2db      	uxtb	r3, r3
 801249a:	461a      	mov	r2, r3
 801249c:	4b1a      	ldr	r3, [pc, #104]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 801249e:	2100      	movs	r1, #0
 80124a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80124a2:	4b19      	ldr	r3, [pc, #100]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 80124a4:	7a5b      	ldrb	r3, [r3, #9]
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	4a17      	ldr	r2, [pc, #92]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	4413      	add	r3, r2
 80124ae:	68fa      	ldr	r2, [r7, #12]
 80124b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80124b2:	4b15      	ldr	r3, [pc, #84]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 80124b4:	7a5b      	ldrb	r3, [r3, #9]
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	461a      	mov	r2, r3
 80124ba:	4b13      	ldr	r3, [pc, #76]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 80124bc:	4413      	add	r3, r2
 80124be:	79fa      	ldrb	r2, [r7, #7]
 80124c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80124c2:	4b11      	ldr	r3, [pc, #68]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 80124c4:	7a5b      	ldrb	r3, [r3, #9]
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	1c5a      	adds	r2, r3, #1
 80124ca:	b2d1      	uxtb	r1, r2
 80124cc:	4a0e      	ldr	r2, [pc, #56]	; (8012508 <FATFS_LinkDriverEx+0x94>)
 80124ce:	7251      	strb	r1, [r2, #9]
 80124d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80124d2:	7dbb      	ldrb	r3, [r7, #22]
 80124d4:	3330      	adds	r3, #48	; 0x30
 80124d6:	b2da      	uxtb	r2, r3
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	3301      	adds	r3, #1
 80124e0:	223a      	movs	r2, #58	; 0x3a
 80124e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	3302      	adds	r3, #2
 80124e8:	222f      	movs	r2, #47	; 0x2f
 80124ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	3303      	adds	r3, #3
 80124f0:	2200      	movs	r2, #0
 80124f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80124f4:	2300      	movs	r3, #0
 80124f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80124f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	371c      	adds	r7, #28
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr
 8012506:	bf00      	nop
 8012508:	2000035c 	.word	0x2000035c

0801250c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012516:	2200      	movs	r2, #0
 8012518:	6839      	ldr	r1, [r7, #0]
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff ffaa 	bl	8012474 <FATFS_LinkDriverEx>
 8012520:	4603      	mov	r3, r0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3708      	adds	r7, #8
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b084      	sub	sp, #16
 801252e:	af00      	add	r7, sp, #0
 8012530:	4603      	mov	r3, r0
 8012532:	6039      	str	r1, [r7, #0]
 8012534:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012536:	2200      	movs	r2, #0
 8012538:	2101      	movs	r1, #1
 801253a:	2001      	movs	r0, #1
 801253c:	f000 fb8e 	bl	8012c5c <osSemaphoreNew>
 8012540:	4602      	mov	r2, r0
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	bf14      	ite	ne
 801254e:	2301      	movne	r3, #1
 8012550:	2300      	moveq	r3, #0
 8012552:	b2db      	uxtb	r3, r3
 8012554:	60fb      	str	r3, [r7, #12]

    return ret;
 8012556:	68fb      	ldr	r3, [r7, #12]
}
 8012558:	4618      	mov	r0, r3
 801255a:	3710      	adds	r7, #16
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}

08012560 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f000 fcd3 	bl	8012f14 <osSemaphoreDelete>
#endif
    return 1;
 801256e:	2301      	movs	r3, #1
}
 8012570:	4618      	mov	r0, r3
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012580:	2300      	movs	r3, #0
 8012582:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8012584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f000 fc05 	bl	8012d98 <osSemaphoreAcquire>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d101      	bne.n	8012598 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8012594:	2301      	movs	r3, #1
 8012596:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012598:	68fb      	ldr	r3, [r7, #12]
}
 801259a:	4618      	mov	r0, r3
 801259c:	3710      	adds	r7, #16
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}

080125a2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b082      	sub	sp, #8
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f000 fc5a 	bl	8012e64 <osSemaphoreRelease>
#endif
}
 80125b0:	bf00      	nop
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80125b8:	b480      	push	{r7}
 80125ba:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80125bc:	bf00      	nop
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr
	...

080125c8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80125c8:	b480      	push	{r7}
 80125ca:	b085      	sub	sp, #20
 80125cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125ce:	f3ef 8305 	mrs	r3, IPSR
 80125d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80125d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10f      	bne.n	80125fa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125da:	f3ef 8310 	mrs	r3, PRIMASK
 80125de:	607b      	str	r3, [r7, #4]
  return(result);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d105      	bne.n	80125f2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80125e6:	f3ef 8311 	mrs	r3, BASEPRI
 80125ea:	603b      	str	r3, [r7, #0]
  return(result);
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d007      	beq.n	8012602 <osKernelInitialize+0x3a>
 80125f2:	4b0e      	ldr	r3, [pc, #56]	; (801262c <osKernelInitialize+0x64>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	d103      	bne.n	8012602 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80125fa:	f06f 0305 	mvn.w	r3, #5
 80125fe:	60fb      	str	r3, [r7, #12]
 8012600:	e00c      	b.n	801261c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012602:	4b0a      	ldr	r3, [pc, #40]	; (801262c <osKernelInitialize+0x64>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d105      	bne.n	8012616 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801260a:	4b08      	ldr	r3, [pc, #32]	; (801262c <osKernelInitialize+0x64>)
 801260c:	2201      	movs	r2, #1
 801260e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012610:	2300      	movs	r3, #0
 8012612:	60fb      	str	r3, [r7, #12]
 8012614:	e002      	b.n	801261c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8012616:	f04f 33ff 	mov.w	r3, #4294967295
 801261a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801261c:	68fb      	ldr	r3, [r7, #12]
}
 801261e:	4618      	mov	r0, r3
 8012620:	3714      	adds	r7, #20
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop
 801262c:	20000368 	.word	0x20000368

08012630 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8012636:	f002 fec5 	bl	80153c4 <xTaskGetSchedulerState>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d004      	beq.n	801264a <osKernelGetState+0x1a>
 8012640:	2b02      	cmp	r3, #2
 8012642:	d105      	bne.n	8012650 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8012644:	2302      	movs	r3, #2
 8012646:	607b      	str	r3, [r7, #4]
      break;
 8012648:	e00c      	b.n	8012664 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801264a:	2303      	movs	r3, #3
 801264c:	607b      	str	r3, [r7, #4]
      break;
 801264e:	e009      	b.n	8012664 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8012650:	4b07      	ldr	r3, [pc, #28]	; (8012670 <osKernelGetState+0x40>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d102      	bne.n	801265e <osKernelGetState+0x2e>
        state = osKernelReady;
 8012658:	2301      	movs	r3, #1
 801265a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801265c:	e001      	b.n	8012662 <osKernelGetState+0x32>
        state = osKernelInactive;
 801265e:	2300      	movs	r3, #0
 8012660:	607b      	str	r3, [r7, #4]
      break;
 8012662:	bf00      	nop
  }

  return (state);
 8012664:	687b      	ldr	r3, [r7, #4]
}
 8012666:	4618      	mov	r0, r3
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	20000368 	.word	0x20000368

08012674 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801267a:	f3ef 8305 	mrs	r3, IPSR
 801267e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012682:	2b00      	cmp	r3, #0
 8012684:	d10f      	bne.n	80126a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012686:	f3ef 8310 	mrs	r3, PRIMASK
 801268a:	607b      	str	r3, [r7, #4]
  return(result);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d105      	bne.n	801269e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012692:	f3ef 8311 	mrs	r3, BASEPRI
 8012696:	603b      	str	r3, [r7, #0]
  return(result);
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d007      	beq.n	80126ae <osKernelStart+0x3a>
 801269e:	4b0f      	ldr	r3, [pc, #60]	; (80126dc <osKernelStart+0x68>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2b02      	cmp	r3, #2
 80126a4:	d103      	bne.n	80126ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80126a6:	f06f 0305 	mvn.w	r3, #5
 80126aa:	60fb      	str	r3, [r7, #12]
 80126ac:	e010      	b.n	80126d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80126ae:	4b0b      	ldr	r3, [pc, #44]	; (80126dc <osKernelStart+0x68>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d109      	bne.n	80126ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80126b6:	f7ff ff7f 	bl	80125b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80126ba:	4b08      	ldr	r3, [pc, #32]	; (80126dc <osKernelStart+0x68>)
 80126bc:	2202      	movs	r2, #2
 80126be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80126c0:	f002 fa12 	bl	8014ae8 <vTaskStartScheduler>
      stat = osOK;
 80126c4:	2300      	movs	r3, #0
 80126c6:	60fb      	str	r3, [r7, #12]
 80126c8:	e002      	b.n	80126d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80126ca:	f04f 33ff 	mov.w	r3, #4294967295
 80126ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80126d0:	68fb      	ldr	r3, [r7, #12]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3710      	adds	r7, #16
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	20000368 	.word	0x20000368

080126e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126e6:	f3ef 8305 	mrs	r3, IPSR
 80126ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80126ec:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d10f      	bne.n	8012712 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126f2:	f3ef 8310 	mrs	r3, PRIMASK
 80126f6:	607b      	str	r3, [r7, #4]
  return(result);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d105      	bne.n	801270a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80126fe:	f3ef 8311 	mrs	r3, BASEPRI
 8012702:	603b      	str	r3, [r7, #0]
  return(result);
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d007      	beq.n	801271a <osKernelGetTickCount+0x3a>
 801270a:	4b08      	ldr	r3, [pc, #32]	; (801272c <osKernelGetTickCount+0x4c>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	2b02      	cmp	r3, #2
 8012710:	d103      	bne.n	801271a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8012712:	f002 fb0d 	bl	8014d30 <xTaskGetTickCountFromISR>
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	e002      	b.n	8012720 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801271a:	f002 faf9 	bl	8014d10 <xTaskGetTickCount>
 801271e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8012720:	68fb      	ldr	r3, [r7, #12]
}
 8012722:	4618      	mov	r0, r3
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	20000368 	.word	0x20000368

08012730 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8012730:	b480      	push	{r7}
 8012732:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8012734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8012738:	4618      	mov	r0, r3
 801273a:	46bd      	mov	sp, r7
 801273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012740:	4770      	bx	lr
	...

08012744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012744:	b580      	push	{r7, lr}
 8012746:	b090      	sub	sp, #64	; 0x40
 8012748:	af04      	add	r7, sp, #16
 801274a:	60f8      	str	r0, [r7, #12]
 801274c:	60b9      	str	r1, [r7, #8]
 801274e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012750:	2300      	movs	r3, #0
 8012752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012754:	f3ef 8305 	mrs	r3, IPSR
 8012758:	61fb      	str	r3, [r7, #28]
  return(result);
 801275a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801275c:	2b00      	cmp	r3, #0
 801275e:	f040 808f 	bne.w	8012880 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012762:	f3ef 8310 	mrs	r3, PRIMASK
 8012766:	61bb      	str	r3, [r7, #24]
  return(result);
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d105      	bne.n	801277a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801276e:	f3ef 8311 	mrs	r3, BASEPRI
 8012772:	617b      	str	r3, [r7, #20]
  return(result);
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d003      	beq.n	8012782 <osThreadNew+0x3e>
 801277a:	4b44      	ldr	r3, [pc, #272]	; (801288c <osThreadNew+0x148>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b02      	cmp	r3, #2
 8012780:	d07e      	beq.n	8012880 <osThreadNew+0x13c>
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d07b      	beq.n	8012880 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8012788:	2380      	movs	r3, #128	; 0x80
 801278a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801278c:	2318      	movs	r3, #24
 801278e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8012790:	2300      	movs	r3, #0
 8012792:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8012794:	f04f 33ff 	mov.w	r3, #4294967295
 8012798:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d045      	beq.n	801282c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d002      	beq.n	80127ae <osThreadNew+0x6a>
        name = attr->name;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	699b      	ldr	r3, [r3, #24]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d002      	beq.n	80127bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	699b      	ldr	r3, [r3, #24]
 80127ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80127bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d008      	beq.n	80127d4 <osThreadNew+0x90>
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	2b38      	cmp	r3, #56	; 0x38
 80127c6:	d805      	bhi.n	80127d4 <osThreadNew+0x90>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	f003 0301 	and.w	r3, r3, #1
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d001      	beq.n	80127d8 <osThreadNew+0x94>
        return (NULL);
 80127d4:	2300      	movs	r3, #0
 80127d6:	e054      	b.n	8012882 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	695b      	ldr	r3, [r3, #20]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d003      	beq.n	80127e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	695b      	ldr	r3, [r3, #20]
 80127e4:	089b      	lsrs	r3, r3, #2
 80127e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d00e      	beq.n	801280e <osThreadNew+0xca>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	2b5b      	cmp	r3, #91	; 0x5b
 80127f6:	d90a      	bls.n	801280e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d006      	beq.n	801280e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	695b      	ldr	r3, [r3, #20]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d002      	beq.n	801280e <osThreadNew+0xca>
        mem = 1;
 8012808:	2301      	movs	r3, #1
 801280a:	623b      	str	r3, [r7, #32]
 801280c:	e010      	b.n	8012830 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d10c      	bne.n	8012830 <osThreadNew+0xec>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	68db      	ldr	r3, [r3, #12]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d108      	bne.n	8012830 <osThreadNew+0xec>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	691b      	ldr	r3, [r3, #16]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d104      	bne.n	8012830 <osThreadNew+0xec>
          mem = 0;
 8012826:	2300      	movs	r3, #0
 8012828:	623b      	str	r3, [r7, #32]
 801282a:	e001      	b.n	8012830 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801282c:	2300      	movs	r3, #0
 801282e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012830:	6a3b      	ldr	r3, [r7, #32]
 8012832:	2b01      	cmp	r3, #1
 8012834:	d110      	bne.n	8012858 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801283e:	9202      	str	r2, [sp, #8]
 8012840:	9301      	str	r3, [sp, #4]
 8012842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012844:	9300      	str	r3, [sp, #0]
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801284a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801284c:	68f8      	ldr	r0, [r7, #12]
 801284e:	f001 feef 	bl	8014630 <xTaskCreateStatic>
 8012852:	4603      	mov	r3, r0
 8012854:	613b      	str	r3, [r7, #16]
 8012856:	e013      	b.n	8012880 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012858:	6a3b      	ldr	r3, [r7, #32]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d110      	bne.n	8012880 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012860:	b29a      	uxth	r2, r3
 8012862:	f107 0310 	add.w	r3, r7, #16
 8012866:	9301      	str	r3, [sp, #4]
 8012868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012870:	68f8      	ldr	r0, [r7, #12]
 8012872:	f001 ff3d 	bl	80146f0 <xTaskCreate>
 8012876:	4603      	mov	r3, r0
 8012878:	2b01      	cmp	r3, #1
 801287a:	d001      	beq.n	8012880 <osThreadNew+0x13c>
          hTask = NULL;
 801287c:	2300      	movs	r3, #0
 801287e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012880:	693b      	ldr	r3, [r7, #16]
}
 8012882:	4618      	mov	r0, r3
 8012884:	3730      	adds	r7, #48	; 0x30
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	20000368 	.word	0x20000368

08012890 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012890:	b580      	push	{r7, lr}
 8012892:	b086      	sub	sp, #24
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012898:	f3ef 8305 	mrs	r3, IPSR
 801289c:	613b      	str	r3, [r7, #16]
  return(result);
 801289e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10f      	bne.n	80128c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128a4:	f3ef 8310 	mrs	r3, PRIMASK
 80128a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d105      	bne.n	80128bc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80128b0:	f3ef 8311 	mrs	r3, BASEPRI
 80128b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d007      	beq.n	80128cc <osDelay+0x3c>
 80128bc:	4b0a      	ldr	r3, [pc, #40]	; (80128e8 <osDelay+0x58>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b02      	cmp	r3, #2
 80128c2:	d103      	bne.n	80128cc <osDelay+0x3c>
    stat = osErrorISR;
 80128c4:	f06f 0305 	mvn.w	r3, #5
 80128c8:	617b      	str	r3, [r7, #20]
 80128ca:	e007      	b.n	80128dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80128cc:	2300      	movs	r3, #0
 80128ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d002      	beq.n	80128dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f002 f8d0 	bl	8014a7c <vTaskDelay>
    }
  }

  return (stat);
 80128dc:	697b      	ldr	r3, [r7, #20]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3718      	adds	r7, #24
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	20000368 	.word	0x20000368

080128ec <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b088      	sub	sp, #32
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128f4:	f3ef 8305 	mrs	r3, IPSR
 80128f8:	617b      	str	r3, [r7, #20]
  return(result);
 80128fa:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d10f      	bne.n	8012920 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012900:	f3ef 8310 	mrs	r3, PRIMASK
 8012904:	613b      	str	r3, [r7, #16]
  return(result);
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d105      	bne.n	8012918 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801290c:	f3ef 8311 	mrs	r3, BASEPRI
 8012910:	60fb      	str	r3, [r7, #12]
  return(result);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d007      	beq.n	8012928 <osDelayUntil+0x3c>
 8012918:	4b13      	ldr	r3, [pc, #76]	; (8012968 <osDelayUntil+0x7c>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b02      	cmp	r3, #2
 801291e:	d103      	bne.n	8012928 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8012920:	f06f 0305 	mvn.w	r3, #5
 8012924:	61fb      	str	r3, [r7, #28]
 8012926:	e019      	b.n	801295c <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8012928:	2300      	movs	r3, #0
 801292a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 801292c:	f002 f9f0 	bl	8014d10 <xTaskGetTickCount>
 8012930:	4603      	mov	r3, r0
 8012932:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	1ad3      	subs	r3, r2, r3
 801293a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d009      	beq.n	8012956 <osDelayUntil+0x6a>
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	2b00      	cmp	r3, #0
 8012946:	db06      	blt.n	8012956 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8012948:	f107 0308 	add.w	r3, r7, #8
 801294c:	69b9      	ldr	r1, [r7, #24]
 801294e:	4618      	mov	r0, r3
 8012950:	f002 f814 	bl	801497c <vTaskDelayUntil>
 8012954:	e002      	b.n	801295c <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8012956:	f06f 0303 	mvn.w	r3, #3
 801295a:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801295c:	69fb      	ldr	r3, [r7, #28]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3720      	adds	r7, #32
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	20000368 	.word	0x20000368

0801296c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801296c:	b580      	push	{r7, lr}
 801296e:	b08a      	sub	sp, #40	; 0x28
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012974:	2300      	movs	r3, #0
 8012976:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012978:	f3ef 8305 	mrs	r3, IPSR
 801297c:	613b      	str	r3, [r7, #16]
  return(result);
 801297e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8012980:	2b00      	cmp	r3, #0
 8012982:	f040 8085 	bne.w	8012a90 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012986:	f3ef 8310 	mrs	r3, PRIMASK
 801298a:	60fb      	str	r3, [r7, #12]
  return(result);
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d105      	bne.n	801299e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012992:	f3ef 8311 	mrs	r3, BASEPRI
 8012996:	60bb      	str	r3, [r7, #8]
  return(result);
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d003      	beq.n	80129a6 <osMutexNew+0x3a>
 801299e:	4b3f      	ldr	r3, [pc, #252]	; (8012a9c <osMutexNew+0x130>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2b02      	cmp	r3, #2
 80129a4:	d074      	beq.n	8012a90 <osMutexNew+0x124>
    if (attr != NULL) {
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d003      	beq.n	80129b4 <osMutexNew+0x48>
      type = attr->attr_bits;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	623b      	str	r3, [r7, #32]
 80129b2:	e001      	b.n	80129b8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80129b4:	2300      	movs	r3, #0
 80129b6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	f003 0301 	and.w	r3, r3, #1
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d002      	beq.n	80129c8 <osMutexNew+0x5c>
      rmtx = 1U;
 80129c2:	2301      	movs	r3, #1
 80129c4:	61fb      	str	r3, [r7, #28]
 80129c6:	e001      	b.n	80129cc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80129c8:	2300      	movs	r3, #0
 80129ca:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80129cc:	6a3b      	ldr	r3, [r7, #32]
 80129ce:	f003 0308 	and.w	r3, r3, #8
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d15c      	bne.n	8012a90 <osMutexNew+0x124>
      mem = -1;
 80129d6:	f04f 33ff 	mov.w	r3, #4294967295
 80129da:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d015      	beq.n	8012a0e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	689b      	ldr	r3, [r3, #8]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d006      	beq.n	80129f8 <osMutexNew+0x8c>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	2b4f      	cmp	r3, #79	; 0x4f
 80129f0:	d902      	bls.n	80129f8 <osMutexNew+0x8c>
          mem = 1;
 80129f2:	2301      	movs	r3, #1
 80129f4:	61bb      	str	r3, [r7, #24]
 80129f6:	e00c      	b.n	8012a12 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	689b      	ldr	r3, [r3, #8]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d108      	bne.n	8012a12 <osMutexNew+0xa6>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d104      	bne.n	8012a12 <osMutexNew+0xa6>
            mem = 0;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	61bb      	str	r3, [r7, #24]
 8012a0c:	e001      	b.n	8012a12 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d112      	bne.n	8012a3e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d007      	beq.n	8012a2e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	689b      	ldr	r3, [r3, #8]
 8012a22:	4619      	mov	r1, r3
 8012a24:	2004      	movs	r0, #4
 8012a26:	f000 fe7c 	bl	8013722 <xQueueCreateMutexStatic>
 8012a2a:	6278      	str	r0, [r7, #36]	; 0x24
 8012a2c:	e016      	b.n	8012a5c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	4619      	mov	r1, r3
 8012a34:	2001      	movs	r0, #1
 8012a36:	f000 fe74 	bl	8013722 <xQueueCreateMutexStatic>
 8012a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8012a3c:	e00e      	b.n	8012a5c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d10b      	bne.n	8012a5c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d004      	beq.n	8012a54 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8012a4a:	2004      	movs	r0, #4
 8012a4c:	f000 fe51 	bl	80136f2 <xQueueCreateMutex>
 8012a50:	6278      	str	r0, [r7, #36]	; 0x24
 8012a52:	e003      	b.n	8012a5c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012a54:	2001      	movs	r0, #1
 8012a56:	f000 fe4c 	bl	80136f2 <xQueueCreateMutex>
 8012a5a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8012a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d00c      	beq.n	8012a7c <osMutexNew+0x110>
        if (attr != NULL) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d003      	beq.n	8012a70 <osMutexNew+0x104>
          name = attr->name;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	617b      	str	r3, [r7, #20]
 8012a6e:	e001      	b.n	8012a74 <osMutexNew+0x108>
        } else {
          name = NULL;
 8012a70:	2300      	movs	r3, #0
 8012a72:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8012a74:	6979      	ldr	r1, [r7, #20]
 8012a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a78:	f001 fd54 	bl	8014524 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d006      	beq.n	8012a90 <osMutexNew+0x124>
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d003      	beq.n	8012a90 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	f043 0301 	orr.w	r3, r3, #1
 8012a8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3728      	adds	r7, #40	; 0x28
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	20000368 	.word	0x20000368

08012aa0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b088      	sub	sp, #32
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f023 0301 	bic.w	r3, r3, #1
 8012ab0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f003 0301 	and.w	r3, r3, #1
 8012ab8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012aba:	2300      	movs	r3, #0
 8012abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012abe:	f3ef 8305 	mrs	r3, IPSR
 8012ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8012ac4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d10f      	bne.n	8012aea <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012aca:	f3ef 8310 	mrs	r3, PRIMASK
 8012ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d105      	bne.n	8012ae2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8012ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d007      	beq.n	8012af2 <osMutexAcquire+0x52>
 8012ae2:	4b1d      	ldr	r3, [pc, #116]	; (8012b58 <osMutexAcquire+0xb8>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b02      	cmp	r3, #2
 8012ae8:	d103      	bne.n	8012af2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8012aea:	f06f 0305 	mvn.w	r3, #5
 8012aee:	61fb      	str	r3, [r7, #28]
 8012af0:	e02c      	b.n	8012b4c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d103      	bne.n	8012b00 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8012af8:	f06f 0303 	mvn.w	r3, #3
 8012afc:	61fb      	str	r3, [r7, #28]
 8012afe:	e025      	b.n	8012b4c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d011      	beq.n	8012b2a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8012b06:	6839      	ldr	r1, [r7, #0]
 8012b08:	69b8      	ldr	r0, [r7, #24]
 8012b0a:	f000 fe73 	bl	80137f4 <xQueueTakeMutexRecursive>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d01b      	beq.n	8012b4c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d003      	beq.n	8012b22 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8012b1a:	f06f 0301 	mvn.w	r3, #1
 8012b1e:	61fb      	str	r3, [r7, #28]
 8012b20:	e014      	b.n	8012b4c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012b22:	f06f 0302 	mvn.w	r3, #2
 8012b26:	61fb      	str	r3, [r7, #28]
 8012b28:	e010      	b.n	8012b4c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8012b2a:	6839      	ldr	r1, [r7, #0]
 8012b2c:	69b8      	ldr	r0, [r7, #24]
 8012b2e:	f001 fa19 	bl	8013f64 <xQueueSemaphoreTake>
 8012b32:	4603      	mov	r3, r0
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d009      	beq.n	8012b4c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d003      	beq.n	8012b46 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8012b3e:	f06f 0301 	mvn.w	r3, #1
 8012b42:	61fb      	str	r3, [r7, #28]
 8012b44:	e002      	b.n	8012b4c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012b46:	f06f 0302 	mvn.w	r3, #2
 8012b4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012b4c:	69fb      	ldr	r3, [r7, #28]
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3720      	adds	r7, #32
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	20000368 	.word	0x20000368

08012b5c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b088      	sub	sp, #32
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f023 0301 	bic.w	r3, r3, #1
 8012b6a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012b74:	2300      	movs	r3, #0
 8012b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b78:	f3ef 8305 	mrs	r3, IPSR
 8012b7c:	613b      	str	r3, [r7, #16]
  return(result);
 8012b7e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d10f      	bne.n	8012ba4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b84:	f3ef 8310 	mrs	r3, PRIMASK
 8012b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d105      	bne.n	8012b9c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012b90:	f3ef 8311 	mrs	r3, BASEPRI
 8012b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d007      	beq.n	8012bac <osMutexRelease+0x50>
 8012b9c:	4b16      	ldr	r3, [pc, #88]	; (8012bf8 <osMutexRelease+0x9c>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	2b02      	cmp	r3, #2
 8012ba2:	d103      	bne.n	8012bac <osMutexRelease+0x50>
    stat = osErrorISR;
 8012ba4:	f06f 0305 	mvn.w	r3, #5
 8012ba8:	61fb      	str	r3, [r7, #28]
 8012baa:	e01f      	b.n	8012bec <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d103      	bne.n	8012bba <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8012bb2:	f06f 0303 	mvn.w	r3, #3
 8012bb6:	61fb      	str	r3, [r7, #28]
 8012bb8:	e018      	b.n	8012bec <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d009      	beq.n	8012bd4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012bc0:	69b8      	ldr	r0, [r7, #24]
 8012bc2:	f000 fde2 	bl	801378a <xQueueGiveMutexRecursive>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d00f      	beq.n	8012bec <osMutexRelease+0x90>
        stat = osErrorResource;
 8012bcc:	f06f 0302 	mvn.w	r3, #2
 8012bd0:	61fb      	str	r3, [r7, #28]
 8012bd2:	e00b      	b.n	8012bec <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	2100      	movs	r1, #0
 8012bda:	69b8      	ldr	r0, [r7, #24]
 8012bdc:	f000 feb0 	bl	8013940 <xQueueGenericSend>
 8012be0:	4603      	mov	r3, r0
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d002      	beq.n	8012bec <osMutexRelease+0x90>
        stat = osErrorResource;
 8012be6:	f06f 0302 	mvn.w	r3, #2
 8012bea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8012bec:	69fb      	ldr	r3, [r7, #28]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3720      	adds	r7, #32
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	20000368 	.word	0x20000368

08012bfc <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b088      	sub	sp, #32
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f023 0301 	bic.w	r3, r3, #1
 8012c0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c0c:	f3ef 8305 	mrs	r3, IPSR
 8012c10:	617b      	str	r3, [r7, #20]
  return(result);
 8012c12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d112      	bne.n	8012c3e <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c18:	f3ef 8310 	mrs	r3, PRIMASK
 8012c1c:	613b      	str	r3, [r7, #16]
  return(result);
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d105      	bne.n	8012c30 <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012c24:	f3ef 8311 	mrs	r3, BASEPRI
 8012c28:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d003      	beq.n	8012c38 <osMutexGetOwner+0x3c>
 8012c30:	4b09      	ldr	r3, [pc, #36]	; (8012c58 <osMutexGetOwner+0x5c>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b02      	cmp	r3, #2
 8012c36:	d002      	beq.n	8012c3e <osMutexGetOwner+0x42>
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d102      	bne.n	8012c44 <osMutexGetOwner+0x48>
    owner = NULL;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	61fb      	str	r3, [r7, #28]
 8012c42:	e003      	b.n	8012c4c <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8012c44:	69b8      	ldr	r0, [r7, #24]
 8012c46:	f000 fd87 	bl	8013758 <xQueueGetMutexHolder>
 8012c4a:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 8012c4c:	69fb      	ldr	r3, [r7, #28]
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3720      	adds	r7, #32
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	20000368 	.word	0x20000368

08012c5c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b08c      	sub	sp, #48	; 0x30
 8012c60:	af02      	add	r7, sp, #8
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c6c:	f3ef 8305 	mrs	r3, IPSR
 8012c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8012c72:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f040 8087 	bne.w	8012d88 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8012c7e:	617b      	str	r3, [r7, #20]
  return(result);
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d105      	bne.n	8012c92 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012c86:	f3ef 8311 	mrs	r3, BASEPRI
 8012c8a:	613b      	str	r3, [r7, #16]
  return(result);
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d003      	beq.n	8012c9a <osSemaphoreNew+0x3e>
 8012c92:	4b40      	ldr	r3, [pc, #256]	; (8012d94 <osSemaphoreNew+0x138>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	d076      	beq.n	8012d88 <osSemaphoreNew+0x12c>
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d073      	beq.n	8012d88 <osSemaphoreNew+0x12c>
 8012ca0:	68ba      	ldr	r2, [r7, #8]
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d86f      	bhi.n	8012d88 <osSemaphoreNew+0x12c>
    mem = -1;
 8012ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d015      	beq.n	8012ce0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d006      	beq.n	8012cca <osSemaphoreNew+0x6e>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	2b4f      	cmp	r3, #79	; 0x4f
 8012cc2:	d902      	bls.n	8012cca <osSemaphoreNew+0x6e>
        mem = 1;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	623b      	str	r3, [r7, #32]
 8012cc8:	e00c      	b.n	8012ce4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	689b      	ldr	r3, [r3, #8]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d108      	bne.n	8012ce4 <osSemaphoreNew+0x88>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	68db      	ldr	r3, [r3, #12]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d104      	bne.n	8012ce4 <osSemaphoreNew+0x88>
          mem = 0;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	623b      	str	r3, [r7, #32]
 8012cde:	e001      	b.n	8012ce4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8012ce4:	6a3b      	ldr	r3, [r7, #32]
 8012ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cea:	d04d      	beq.n	8012d88 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d129      	bne.n	8012d46 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8012cf2:	6a3b      	ldr	r3, [r7, #32]
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d10b      	bne.n	8012d10 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	689a      	ldr	r2, [r3, #8]
 8012cfc:	2303      	movs	r3, #3
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	4613      	mov	r3, r2
 8012d02:	2200      	movs	r2, #0
 8012d04:	2100      	movs	r1, #0
 8012d06:	2001      	movs	r0, #1
 8012d08:	f000 fbf8 	bl	80134fc <xQueueGenericCreateStatic>
 8012d0c:	6278      	str	r0, [r7, #36]	; 0x24
 8012d0e:	e005      	b.n	8012d1c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8012d10:	2203      	movs	r2, #3
 8012d12:	2100      	movs	r1, #0
 8012d14:	2001      	movs	r0, #1
 8012d16:	f000 fc6e 	bl	80135f6 <xQueueGenericCreate>
 8012d1a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d022      	beq.n	8012d68 <osSemaphoreNew+0x10c>
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d01f      	beq.n	8012d68 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012d28:	2300      	movs	r3, #0
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d30:	f000 fe06 	bl	8013940 <xQueueGenericSend>
 8012d34:	4603      	mov	r3, r0
 8012d36:	2b01      	cmp	r3, #1
 8012d38:	d016      	beq.n	8012d68 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8012d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d3c:	f001 faa5 	bl	801428a <vQueueDelete>
            hSemaphore = NULL;
 8012d40:	2300      	movs	r3, #0
 8012d42:	627b      	str	r3, [r7, #36]	; 0x24
 8012d44:	e010      	b.n	8012d68 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8012d46:	6a3b      	ldr	r3, [r7, #32]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d108      	bne.n	8012d5e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	461a      	mov	r2, r3
 8012d52:	68b9      	ldr	r1, [r7, #8]
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f000 fd84 	bl	8013862 <xQueueCreateCountingSemaphoreStatic>
 8012d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8012d5c:	e004      	b.n	8012d68 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012d5e:	68b9      	ldr	r1, [r7, #8]
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	f000 fdb7 	bl	80138d4 <xQueueCreateCountingSemaphore>
 8012d66:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d00c      	beq.n	8012d88 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d003      	beq.n	8012d7c <osSemaphoreNew+0x120>
          name = attr->name;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	61fb      	str	r3, [r7, #28]
 8012d7a:	e001      	b.n	8012d80 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012d80:	69f9      	ldr	r1, [r7, #28]
 8012d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d84:	f001 fbce 	bl	8014524 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3728      	adds	r7, #40	; 0x28
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	20000368 	.word	0x20000368

08012d98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b088      	sub	sp, #32
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012da6:	2300      	movs	r3, #0
 8012da8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d103      	bne.n	8012db8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012db0:	f06f 0303 	mvn.w	r3, #3
 8012db4:	61fb      	str	r3, [r7, #28]
 8012db6:	e04b      	b.n	8012e50 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012db8:	f3ef 8305 	mrs	r3, IPSR
 8012dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8012dbe:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10f      	bne.n	8012de4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8012dc8:	613b      	str	r3, [r7, #16]
  return(result);
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d105      	bne.n	8012ddc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8012dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d026      	beq.n	8012e2a <osSemaphoreAcquire+0x92>
 8012ddc:	4b1f      	ldr	r3, [pc, #124]	; (8012e5c <osSemaphoreAcquire+0xc4>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	2b02      	cmp	r3, #2
 8012de2:	d122      	bne.n	8012e2a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d003      	beq.n	8012df2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8012dea:	f06f 0303 	mvn.w	r3, #3
 8012dee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012df0:	e02d      	b.n	8012e4e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8012df2:	2300      	movs	r3, #0
 8012df4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012df6:	f107 0308 	add.w	r3, r7, #8
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	2100      	movs	r1, #0
 8012dfe:	69b8      	ldr	r0, [r7, #24]
 8012e00:	f001 f9c0 	bl	8014184 <xQueueReceiveFromISR>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d003      	beq.n	8012e12 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8012e0a:	f06f 0302 	mvn.w	r3, #2
 8012e0e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8012e10:	e01d      	b.n	8012e4e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d01a      	beq.n	8012e4e <osSemaphoreAcquire+0xb6>
 8012e18:	4b11      	ldr	r3, [pc, #68]	; (8012e60 <osSemaphoreAcquire+0xc8>)
 8012e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e1e:	601a      	str	r2, [r3, #0]
 8012e20:	f3bf 8f4f 	dsb	sy
 8012e24:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8012e28:	e011      	b.n	8012e4e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012e2a:	6839      	ldr	r1, [r7, #0]
 8012e2c:	69b8      	ldr	r0, [r7, #24]
 8012e2e:	f001 f899 	bl	8013f64 <xQueueSemaphoreTake>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	d00b      	beq.n	8012e50 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d003      	beq.n	8012e46 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8012e3e:	f06f 0301 	mvn.w	r3, #1
 8012e42:	61fb      	str	r3, [r7, #28]
 8012e44:	e004      	b.n	8012e50 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8012e46:	f06f 0302 	mvn.w	r3, #2
 8012e4a:	61fb      	str	r3, [r7, #28]
 8012e4c:	e000      	b.n	8012e50 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8012e4e:	bf00      	nop
      }
    }
  }

  return (stat);
 8012e50:	69fb      	ldr	r3, [r7, #28]
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3720      	adds	r7, #32
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	20000368 	.word	0x20000368
 8012e60:	e000ed04 	.word	0xe000ed04

08012e64 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b088      	sub	sp, #32
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012e70:	2300      	movs	r3, #0
 8012e72:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d103      	bne.n	8012e82 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012e7a:	f06f 0303 	mvn.w	r3, #3
 8012e7e:	61fb      	str	r3, [r7, #28]
 8012e80:	e03e      	b.n	8012f00 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e82:	f3ef 8305 	mrs	r3, IPSR
 8012e86:	617b      	str	r3, [r7, #20]
  return(result);
 8012e88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d10f      	bne.n	8012eae <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8012e92:	613b      	str	r3, [r7, #16]
  return(result);
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d105      	bne.n	8012ea6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8012e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d01e      	beq.n	8012ee4 <osSemaphoreRelease+0x80>
 8012ea6:	4b19      	ldr	r3, [pc, #100]	; (8012f0c <osSemaphoreRelease+0xa8>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2b02      	cmp	r3, #2
 8012eac:	d11a      	bne.n	8012ee4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012eb2:	f107 0308 	add.w	r3, r7, #8
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	69b8      	ldr	r0, [r7, #24]
 8012eba:	f000 fedf 	bl	8013c7c <xQueueGiveFromISR>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d003      	beq.n	8012ecc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8012ec4:	f06f 0302 	mvn.w	r3, #2
 8012ec8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012eca:	e018      	b.n	8012efe <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d015      	beq.n	8012efe <osSemaphoreRelease+0x9a>
 8012ed2:	4b0f      	ldr	r3, [pc, #60]	; (8012f10 <osSemaphoreRelease+0xac>)
 8012ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ed8:	601a      	str	r2, [r3, #0]
 8012eda:	f3bf 8f4f 	dsb	sy
 8012ede:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012ee2:	e00c      	b.n	8012efe <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	2100      	movs	r1, #0
 8012eea:	69b8      	ldr	r0, [r7, #24]
 8012eec:	f000 fd28 	bl	8013940 <xQueueGenericSend>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	d004      	beq.n	8012f00 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8012ef6:	f06f 0302 	mvn.w	r3, #2
 8012efa:	61fb      	str	r3, [r7, #28]
 8012efc:	e000      	b.n	8012f00 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012efe:	bf00      	nop
    }
  }

  return (stat);
 8012f00:	69fb      	ldr	r3, [r7, #28]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3720      	adds	r7, #32
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	20000368 	.word	0x20000368
 8012f10:	e000ed04 	.word	0xe000ed04

08012f14 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b088      	sub	sp, #32
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f20:	f3ef 8305 	mrs	r3, IPSR
 8012f24:	617b      	str	r3, [r7, #20]
  return(result);
 8012f26:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d10f      	bne.n	8012f4c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8012f30:	613b      	str	r3, [r7, #16]
  return(result);
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d105      	bne.n	8012f44 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012f38:	f3ef 8311 	mrs	r3, BASEPRI
 8012f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d007      	beq.n	8012f54 <osSemaphoreDelete+0x40>
 8012f44:	4b0d      	ldr	r3, [pc, #52]	; (8012f7c <osSemaphoreDelete+0x68>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b02      	cmp	r3, #2
 8012f4a:	d103      	bne.n	8012f54 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8012f4c:	f06f 0305 	mvn.w	r3, #5
 8012f50:	61fb      	str	r3, [r7, #28]
 8012f52:	e00e      	b.n	8012f72 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8012f54:	69bb      	ldr	r3, [r7, #24]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d103      	bne.n	8012f62 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8012f5a:	f06f 0303 	mvn.w	r3, #3
 8012f5e:	61fb      	str	r3, [r7, #28]
 8012f60:	e007      	b.n	8012f72 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012f62:	69b8      	ldr	r0, [r7, #24]
 8012f64:	f001 fb06 	bl	8014574 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8012f6c:	69b8      	ldr	r0, [r7, #24]
 8012f6e:	f001 f98c 	bl	801428a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012f72:	69fb      	ldr	r3, [r7, #28]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3720      	adds	r7, #32
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	20000368 	.word	0x20000368

08012f80 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b08c      	sub	sp, #48	; 0x30
 8012f84:	af02      	add	r7, sp, #8
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f90:	f3ef 8305 	mrs	r3, IPSR
 8012f94:	61bb      	str	r3, [r7, #24]
  return(result);
 8012f96:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d170      	bne.n	801307e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8012fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d105      	bne.n	8012fb4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8012fac:	613b      	str	r3, [r7, #16]
  return(result);
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d003      	beq.n	8012fbc <osMessageQueueNew+0x3c>
 8012fb4:	4b34      	ldr	r3, [pc, #208]	; (8013088 <osMessageQueueNew+0x108>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b02      	cmp	r3, #2
 8012fba:	d060      	beq.n	801307e <osMessageQueueNew+0xfe>
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d05d      	beq.n	801307e <osMessageQueueNew+0xfe>
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d05a      	beq.n	801307e <osMessageQueueNew+0xfe>
    mem = -1;
 8012fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8012fcc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d029      	beq.n	8013028 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d012      	beq.n	8013002 <osMessageQueueNew+0x82>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	2b4f      	cmp	r3, #79	; 0x4f
 8012fe2:	d90e      	bls.n	8013002 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d00a      	beq.n	8013002 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	695a      	ldr	r2, [r3, #20]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	68b9      	ldr	r1, [r7, #8]
 8012ff4:	fb01 f303 	mul.w	r3, r1, r3
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d302      	bcc.n	8013002 <osMessageQueueNew+0x82>
        mem = 1;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	623b      	str	r3, [r7, #32]
 8013000:	e014      	b.n	801302c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	689b      	ldr	r3, [r3, #8]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d110      	bne.n	801302c <osMessageQueueNew+0xac>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d10c      	bne.n	801302c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013016:	2b00      	cmp	r3, #0
 8013018:	d108      	bne.n	801302c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	695b      	ldr	r3, [r3, #20]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d104      	bne.n	801302c <osMessageQueueNew+0xac>
          mem = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	623b      	str	r3, [r7, #32]
 8013026:	e001      	b.n	801302c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013028:	2300      	movs	r3, #0
 801302a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801302c:	6a3b      	ldr	r3, [r7, #32]
 801302e:	2b01      	cmp	r3, #1
 8013030:	d10c      	bne.n	801304c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	691a      	ldr	r2, [r3, #16]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6899      	ldr	r1, [r3, #8]
 801303a:	2300      	movs	r3, #0
 801303c:	9300      	str	r3, [sp, #0]
 801303e:	460b      	mov	r3, r1
 8013040:	68b9      	ldr	r1, [r7, #8]
 8013042:	68f8      	ldr	r0, [r7, #12]
 8013044:	f000 fa5a 	bl	80134fc <xQueueGenericCreateStatic>
 8013048:	6278      	str	r0, [r7, #36]	; 0x24
 801304a:	e008      	b.n	801305e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 801304c:	6a3b      	ldr	r3, [r7, #32]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d105      	bne.n	801305e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013052:	2200      	movs	r2, #0
 8013054:	68b9      	ldr	r1, [r7, #8]
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f000 facd 	bl	80135f6 <xQueueGenericCreate>
 801305c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00c      	beq.n	801307e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d003      	beq.n	8013072 <osMessageQueueNew+0xf2>
        name = attr->name;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	61fb      	str	r3, [r7, #28]
 8013070:	e001      	b.n	8013076 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8013072:	2300      	movs	r3, #0
 8013074:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013076:	69f9      	ldr	r1, [r7, #28]
 8013078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801307a:	f001 fa53 	bl	8014524 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013080:	4618      	mov	r0, r3
 8013082:	3728      	adds	r7, #40	; 0x28
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	20000368 	.word	0x20000368

0801308c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801308c:	b580      	push	{r7, lr}
 801308e:	b08a      	sub	sp, #40	; 0x28
 8013090:	af00      	add	r7, sp, #0
 8013092:	60f8      	str	r0, [r7, #12]
 8013094:	60b9      	str	r1, [r7, #8]
 8013096:	603b      	str	r3, [r7, #0]
 8013098:	4613      	mov	r3, r2
 801309a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80130a0:	2300      	movs	r3, #0
 80130a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130a4:	f3ef 8305 	mrs	r3, IPSR
 80130a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80130aa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d10f      	bne.n	80130d0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130b0:	f3ef 8310 	mrs	r3, PRIMASK
 80130b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80130b6:	69bb      	ldr	r3, [r7, #24]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d105      	bne.n	80130c8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80130bc:	f3ef 8311 	mrs	r3, BASEPRI
 80130c0:	617b      	str	r3, [r7, #20]
  return(result);
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d02c      	beq.n	8013122 <osMessageQueuePut+0x96>
 80130c8:	4b28      	ldr	r3, [pc, #160]	; (801316c <osMessageQueuePut+0xe0>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	2b02      	cmp	r3, #2
 80130ce:	d128      	bne.n	8013122 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80130d0:	6a3b      	ldr	r3, [r7, #32]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d005      	beq.n	80130e2 <osMessageQueuePut+0x56>
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d002      	beq.n	80130e2 <osMessageQueuePut+0x56>
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d003      	beq.n	80130ea <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80130e2:	f06f 0303 	mvn.w	r3, #3
 80130e6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80130e8:	e039      	b.n	801315e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80130ea:	2300      	movs	r3, #0
 80130ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80130ee:	f107 0210 	add.w	r2, r7, #16
 80130f2:	2300      	movs	r3, #0
 80130f4:	68b9      	ldr	r1, [r7, #8]
 80130f6:	6a38      	ldr	r0, [r7, #32]
 80130f8:	f000 fd24 	bl	8013b44 <xQueueGenericSendFromISR>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d003      	beq.n	801310a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013102:	f06f 0302 	mvn.w	r3, #2
 8013106:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013108:	e029      	b.n	801315e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d026      	beq.n	801315e <osMessageQueuePut+0xd2>
 8013110:	4b17      	ldr	r3, [pc, #92]	; (8013170 <osMessageQueuePut+0xe4>)
 8013112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013116:	601a      	str	r2, [r3, #0]
 8013118:	f3bf 8f4f 	dsb	sy
 801311c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013120:	e01d      	b.n	801315e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013122:	6a3b      	ldr	r3, [r7, #32]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d002      	beq.n	801312e <osMessageQueuePut+0xa2>
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d103      	bne.n	8013136 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801312e:	f06f 0303 	mvn.w	r3, #3
 8013132:	627b      	str	r3, [r7, #36]	; 0x24
 8013134:	e014      	b.n	8013160 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013136:	2300      	movs	r3, #0
 8013138:	683a      	ldr	r2, [r7, #0]
 801313a:	68b9      	ldr	r1, [r7, #8]
 801313c:	6a38      	ldr	r0, [r7, #32]
 801313e:	f000 fbff 	bl	8013940 <xQueueGenericSend>
 8013142:	4603      	mov	r3, r0
 8013144:	2b01      	cmp	r3, #1
 8013146:	d00b      	beq.n	8013160 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d003      	beq.n	8013156 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801314e:	f06f 0301 	mvn.w	r3, #1
 8013152:	627b      	str	r3, [r7, #36]	; 0x24
 8013154:	e004      	b.n	8013160 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013156:	f06f 0302 	mvn.w	r3, #2
 801315a:	627b      	str	r3, [r7, #36]	; 0x24
 801315c:	e000      	b.n	8013160 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801315e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013162:	4618      	mov	r0, r3
 8013164:	3728      	adds	r7, #40	; 0x28
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	20000368 	.word	0x20000368
 8013170:	e000ed04 	.word	0xe000ed04

08013174 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013174:	b580      	push	{r7, lr}
 8013176:	b08a      	sub	sp, #40	; 0x28
 8013178:	af00      	add	r7, sp, #0
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	607a      	str	r2, [r7, #4]
 8013180:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013186:	2300      	movs	r3, #0
 8013188:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801318a:	f3ef 8305 	mrs	r3, IPSR
 801318e:	61fb      	str	r3, [r7, #28]
  return(result);
 8013190:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013192:	2b00      	cmp	r3, #0
 8013194:	d10f      	bne.n	80131b6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013196:	f3ef 8310 	mrs	r3, PRIMASK
 801319a:	61bb      	str	r3, [r7, #24]
  return(result);
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d105      	bne.n	80131ae <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80131a2:	f3ef 8311 	mrs	r3, BASEPRI
 80131a6:	617b      	str	r3, [r7, #20]
  return(result);
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d02c      	beq.n	8013208 <osMessageQueueGet+0x94>
 80131ae:	4b28      	ldr	r3, [pc, #160]	; (8013250 <osMessageQueueGet+0xdc>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b02      	cmp	r3, #2
 80131b4:	d128      	bne.n	8013208 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131b6:	6a3b      	ldr	r3, [r7, #32]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d005      	beq.n	80131c8 <osMessageQueueGet+0x54>
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d002      	beq.n	80131c8 <osMessageQueueGet+0x54>
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d003      	beq.n	80131d0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80131c8:	f06f 0303 	mvn.w	r3, #3
 80131cc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131ce:	e038      	b.n	8013242 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80131d0:	2300      	movs	r3, #0
 80131d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80131d4:	f107 0310 	add.w	r3, r7, #16
 80131d8:	461a      	mov	r2, r3
 80131da:	68b9      	ldr	r1, [r7, #8]
 80131dc:	6a38      	ldr	r0, [r7, #32]
 80131de:	f000 ffd1 	bl	8014184 <xQueueReceiveFromISR>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d003      	beq.n	80131f0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80131e8:	f06f 0302 	mvn.w	r3, #2
 80131ec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131ee:	e028      	b.n	8013242 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d025      	beq.n	8013242 <osMessageQueueGet+0xce>
 80131f6:	4b17      	ldr	r3, [pc, #92]	; (8013254 <osMessageQueueGet+0xe0>)
 80131f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	f3bf 8f4f 	dsb	sy
 8013202:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013206:	e01c      	b.n	8013242 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013208:	6a3b      	ldr	r3, [r7, #32]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d002      	beq.n	8013214 <osMessageQueueGet+0xa0>
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d103      	bne.n	801321c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013214:	f06f 0303 	mvn.w	r3, #3
 8013218:	627b      	str	r3, [r7, #36]	; 0x24
 801321a:	e013      	b.n	8013244 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801321c:	683a      	ldr	r2, [r7, #0]
 801321e:	68b9      	ldr	r1, [r7, #8]
 8013220:	6a38      	ldr	r0, [r7, #32]
 8013222:	f000 fdbd 	bl	8013da0 <xQueueReceive>
 8013226:	4603      	mov	r3, r0
 8013228:	2b01      	cmp	r3, #1
 801322a:	d00b      	beq.n	8013244 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d003      	beq.n	801323a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8013232:	f06f 0301 	mvn.w	r3, #1
 8013236:	627b      	str	r3, [r7, #36]	; 0x24
 8013238:	e004      	b.n	8013244 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801323a:	f06f 0302 	mvn.w	r3, #2
 801323e:	627b      	str	r3, [r7, #36]	; 0x24
 8013240:	e000      	b.n	8013244 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013242:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013246:	4618      	mov	r0, r3
 8013248:	3728      	adds	r7, #40	; 0x28
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	20000368 	.word	0x20000368
 8013254:	e000ed04 	.word	0xe000ed04

08013258 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013258:	b480      	push	{r7}
 801325a:	b085      	sub	sp, #20
 801325c:	af00      	add	r7, sp, #0
 801325e:	60f8      	str	r0, [r7, #12]
 8013260:	60b9      	str	r1, [r7, #8]
 8013262:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	4a07      	ldr	r2, [pc, #28]	; (8013284 <vApplicationGetIdleTaskMemory+0x2c>)
 8013268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	4a06      	ldr	r2, [pc, #24]	; (8013288 <vApplicationGetIdleTaskMemory+0x30>)
 801326e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2280      	movs	r2, #128	; 0x80
 8013274:	601a      	str	r2, [r3, #0]
}
 8013276:	bf00      	nop
 8013278:	3714      	adds	r7, #20
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop
 8013284:	2000036c 	.word	0x2000036c
 8013288:	200003c8 	.word	0x200003c8

0801328c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801328c:	b480      	push	{r7}
 801328e:	b085      	sub	sp, #20
 8013290:	af00      	add	r7, sp, #0
 8013292:	60f8      	str	r0, [r7, #12]
 8013294:	60b9      	str	r1, [r7, #8]
 8013296:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	4a07      	ldr	r2, [pc, #28]	; (80132b8 <vApplicationGetTimerTaskMemory+0x2c>)
 801329c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	4a06      	ldr	r2, [pc, #24]	; (80132bc <vApplicationGetTimerTaskMemory+0x30>)
 80132a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80132aa:	601a      	str	r2, [r3, #0]
}
 80132ac:	bf00      	nop
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr
 80132b8:	200005c8 	.word	0x200005c8
 80132bc:	20000624 	.word	0x20000624

080132c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f103 0208 	add.w	r2, r3, #8
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f04f 32ff 	mov.w	r2, #4294967295
 80132d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f103 0208 	add.w	r2, r3, #8
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f103 0208 	add.w	r2, r3, #8
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2200      	movs	r2, #0
 80132f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80132f4:	bf00      	nop
 80132f6:	370c      	adds	r7, #12
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr

08013300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801330e:	bf00      	nop
 8013310:	370c      	adds	r7, #12
 8013312:	46bd      	mov	sp, r7
 8013314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013318:	4770      	bx	lr

0801331a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801331a:	b480      	push	{r7}
 801331c:	b085      	sub	sp, #20
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]
 8013322:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	689a      	ldr	r2, [r3, #8]
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	683a      	ldr	r2, [r7, #0]
 801333e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	683a      	ldr	r2, [r7, #0]
 8013344:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	1c5a      	adds	r2, r3, #1
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	601a      	str	r2, [r3, #0]
}
 8013356:	bf00      	nop
 8013358:	3714      	adds	r7, #20
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr

08013362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013362:	b480      	push	{r7}
 8013364:	b085      	sub	sp, #20
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
 801336a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013378:	d103      	bne.n	8013382 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	691b      	ldr	r3, [r3, #16]
 801337e:	60fb      	str	r3, [r7, #12]
 8013380:	e00c      	b.n	801339c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	3308      	adds	r3, #8
 8013386:	60fb      	str	r3, [r7, #12]
 8013388:	e002      	b.n	8013390 <vListInsert+0x2e>
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	60fb      	str	r3, [r7, #12]
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	68ba      	ldr	r2, [r7, #8]
 8013398:	429a      	cmp	r2, r3
 801339a:	d2f6      	bcs.n	801338a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	685a      	ldr	r2, [r3, #4]
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	68fa      	ldr	r2, [r7, #12]
 80133b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	683a      	ldr	r2, [r7, #0]
 80133b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	1c5a      	adds	r2, r3, #1
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	601a      	str	r2, [r3, #0]
}
 80133c8:	bf00      	nop
 80133ca:	3714      	adds	r7, #20
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80133d4:	b480      	push	{r7}
 80133d6:	b085      	sub	sp, #20
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	691b      	ldr	r3, [r3, #16]
 80133e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	6892      	ldr	r2, [r2, #8]
 80133ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	689b      	ldr	r3, [r3, #8]
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	6852      	ldr	r2, [r2, #4]
 80133f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d103      	bne.n	8013408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	689a      	ldr	r2, [r3, #8]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	1e5a      	subs	r2, r3, #1
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	681b      	ldr	r3, [r3, #0]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3714      	adds	r7, #20
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr

08013428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d10b      	bne.n	8013454 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013440:	b672      	cpsid	i
 8013442:	f383 8811 	msr	BASEPRI, r3
 8013446:	f3bf 8f6f 	isb	sy
 801344a:	f3bf 8f4f 	dsb	sy
 801344e:	b662      	cpsie	i
 8013450:	60bb      	str	r3, [r7, #8]
 8013452:	e7fe      	b.n	8013452 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013454:	f002 fdf8 	bl	8016048 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681a      	ldr	r2, [r3, #0]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013460:	68f9      	ldr	r1, [r7, #12]
 8013462:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013464:	fb01 f303 	mul.w	r3, r1, r3
 8013468:	441a      	add	r2, r3
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2200      	movs	r2, #0
 8013472:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013484:	3b01      	subs	r3, #1
 8013486:	68f9      	ldr	r1, [r7, #12]
 8013488:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801348a:	fb01 f303 	mul.w	r3, r1, r3
 801348e:	441a      	add	r2, r3
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	22ff      	movs	r2, #255	; 0xff
 8013498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	22ff      	movs	r2, #255	; 0xff
 80134a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d114      	bne.n	80134d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	691b      	ldr	r3, [r3, #16]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d01a      	beq.n	80134e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	3310      	adds	r3, #16
 80134b6:	4618      	mov	r0, r3
 80134b8:	f001 fdb6 	bl	8015028 <xTaskRemoveFromEventList>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d012      	beq.n	80134e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80134c2:	4b0d      	ldr	r3, [pc, #52]	; (80134f8 <xQueueGenericReset+0xd0>)
 80134c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134c8:	601a      	str	r2, [r3, #0]
 80134ca:	f3bf 8f4f 	dsb	sy
 80134ce:	f3bf 8f6f 	isb	sy
 80134d2:	e009      	b.n	80134e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	3310      	adds	r3, #16
 80134d8:	4618      	mov	r0, r3
 80134da:	f7ff fef1 	bl	80132c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	3324      	adds	r3, #36	; 0x24
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7ff feec 	bl	80132c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80134e8:	f002 fde0 	bl	80160ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80134ec:	2301      	movs	r3, #1
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	e000ed04 	.word	0xe000ed04

080134fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b08e      	sub	sp, #56	; 0x38
 8013500:	af02      	add	r7, sp, #8
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
 8013508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10b      	bne.n	8013528 <xQueueGenericCreateStatic+0x2c>
 8013510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013514:	b672      	cpsid	i
 8013516:	f383 8811 	msr	BASEPRI, r3
 801351a:	f3bf 8f6f 	isb	sy
 801351e:	f3bf 8f4f 	dsb	sy
 8013522:	b662      	cpsie	i
 8013524:	62bb      	str	r3, [r7, #40]	; 0x28
 8013526:	e7fe      	b.n	8013526 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d10b      	bne.n	8013546 <xQueueGenericCreateStatic+0x4a>
 801352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013532:	b672      	cpsid	i
 8013534:	f383 8811 	msr	BASEPRI, r3
 8013538:	f3bf 8f6f 	isb	sy
 801353c:	f3bf 8f4f 	dsb	sy
 8013540:	b662      	cpsie	i
 8013542:	627b      	str	r3, [r7, #36]	; 0x24
 8013544:	e7fe      	b.n	8013544 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d002      	beq.n	8013552 <xQueueGenericCreateStatic+0x56>
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d001      	beq.n	8013556 <xQueueGenericCreateStatic+0x5a>
 8013552:	2301      	movs	r3, #1
 8013554:	e000      	b.n	8013558 <xQueueGenericCreateStatic+0x5c>
 8013556:	2300      	movs	r3, #0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d10b      	bne.n	8013574 <xQueueGenericCreateStatic+0x78>
 801355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013560:	b672      	cpsid	i
 8013562:	f383 8811 	msr	BASEPRI, r3
 8013566:	f3bf 8f6f 	isb	sy
 801356a:	f3bf 8f4f 	dsb	sy
 801356e:	b662      	cpsie	i
 8013570:	623b      	str	r3, [r7, #32]
 8013572:	e7fe      	b.n	8013572 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d102      	bne.n	8013580 <xQueueGenericCreateStatic+0x84>
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <xQueueGenericCreateStatic+0x88>
 8013580:	2301      	movs	r3, #1
 8013582:	e000      	b.n	8013586 <xQueueGenericCreateStatic+0x8a>
 8013584:	2300      	movs	r3, #0
 8013586:	2b00      	cmp	r3, #0
 8013588:	d10b      	bne.n	80135a2 <xQueueGenericCreateStatic+0xa6>
 801358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358e:	b672      	cpsid	i
 8013590:	f383 8811 	msr	BASEPRI, r3
 8013594:	f3bf 8f6f 	isb	sy
 8013598:	f3bf 8f4f 	dsb	sy
 801359c:	b662      	cpsie	i
 801359e:	61fb      	str	r3, [r7, #28]
 80135a0:	e7fe      	b.n	80135a0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80135a2:	2350      	movs	r3, #80	; 0x50
 80135a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	2b50      	cmp	r3, #80	; 0x50
 80135aa:	d00b      	beq.n	80135c4 <xQueueGenericCreateStatic+0xc8>
 80135ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b0:	b672      	cpsid	i
 80135b2:	f383 8811 	msr	BASEPRI, r3
 80135b6:	f3bf 8f6f 	isb	sy
 80135ba:	f3bf 8f4f 	dsb	sy
 80135be:	b662      	cpsie	i
 80135c0:	61bb      	str	r3, [r7, #24]
 80135c2:	e7fe      	b.n	80135c2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80135c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80135ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d00d      	beq.n	80135ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80135d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d2:	2201      	movs	r2, #1
 80135d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80135d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80135dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	4613      	mov	r3, r2
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	68b9      	ldr	r1, [r7, #8]
 80135e6:	68f8      	ldr	r0, [r7, #12]
 80135e8:	f000 f846 	bl	8013678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3730      	adds	r7, #48	; 0x30
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}

080135f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80135f6:	b580      	push	{r7, lr}
 80135f8:	b08a      	sub	sp, #40	; 0x28
 80135fa:	af02      	add	r7, sp, #8
 80135fc:	60f8      	str	r0, [r7, #12]
 80135fe:	60b9      	str	r1, [r7, #8]
 8013600:	4613      	mov	r3, r2
 8013602:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d10b      	bne.n	8013622 <xQueueGenericCreate+0x2c>
 801360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801360e:	b672      	cpsid	i
 8013610:	f383 8811 	msr	BASEPRI, r3
 8013614:	f3bf 8f6f 	isb	sy
 8013618:	f3bf 8f4f 	dsb	sy
 801361c:	b662      	cpsie	i
 801361e:	613b      	str	r3, [r7, #16]
 8013620:	e7fe      	b.n	8013620 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d102      	bne.n	801362e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013628:	2300      	movs	r3, #0
 801362a:	61fb      	str	r3, [r7, #28]
 801362c:	e004      	b.n	8013638 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	fb02 f303 	mul.w	r3, r2, r3
 8013636:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	3350      	adds	r3, #80	; 0x50
 801363c:	4618      	mov	r0, r3
 801363e:	f002 fe25 	bl	801628c <pvPortMalloc>
 8013642:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d011      	beq.n	801366e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801364a:	69bb      	ldr	r3, [r7, #24]
 801364c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	3350      	adds	r3, #80	; 0x50
 8013652:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	2200      	movs	r2, #0
 8013658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801365c:	79fa      	ldrb	r2, [r7, #7]
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	9300      	str	r3, [sp, #0]
 8013662:	4613      	mov	r3, r2
 8013664:	697a      	ldr	r2, [r7, #20]
 8013666:	68b9      	ldr	r1, [r7, #8]
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f000 f805 	bl	8013678 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801366e:	69bb      	ldr	r3, [r7, #24]
	}
 8013670:	4618      	mov	r0, r3
 8013672:	3720      	adds	r7, #32
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d103      	bne.n	8013694 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801368c:	69bb      	ldr	r3, [r7, #24]
 801368e:	69ba      	ldr	r2, [r7, #24]
 8013690:	601a      	str	r2, [r3, #0]
 8013692:	e002      	b.n	801369a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	68fa      	ldr	r2, [r7, #12]
 801369e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80136a0:	69bb      	ldr	r3, [r7, #24]
 80136a2:	68ba      	ldr	r2, [r7, #8]
 80136a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80136a6:	2101      	movs	r1, #1
 80136a8:	69b8      	ldr	r0, [r7, #24]
 80136aa:	f7ff febd 	bl	8013428 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	78fa      	ldrb	r2, [r7, #3]
 80136b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80136b6:	bf00      	nop
 80136b8:	3710      	adds	r7, #16
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b082      	sub	sp, #8
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d00e      	beq.n	80136ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2200      	movs	r2, #0
 80136d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2200      	movs	r2, #0
 80136dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80136de:	2300      	movs	r3, #0
 80136e0:	2200      	movs	r2, #0
 80136e2:	2100      	movs	r1, #0
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f000 f92b 	bl	8013940 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80136ea:	bf00      	nop
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80136f2:	b580      	push	{r7, lr}
 80136f4:	b086      	sub	sp, #24
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	4603      	mov	r3, r0
 80136fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80136fc:	2301      	movs	r3, #1
 80136fe:	617b      	str	r3, [r7, #20]
 8013700:	2300      	movs	r3, #0
 8013702:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013704:	79fb      	ldrb	r3, [r7, #7]
 8013706:	461a      	mov	r2, r3
 8013708:	6939      	ldr	r1, [r7, #16]
 801370a:	6978      	ldr	r0, [r7, #20]
 801370c:	f7ff ff73 	bl	80135f6 <xQueueGenericCreate>
 8013710:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013712:	68f8      	ldr	r0, [r7, #12]
 8013714:	f7ff ffd3 	bl	80136be <prvInitialiseMutex>

		return xNewQueue;
 8013718:	68fb      	ldr	r3, [r7, #12]
	}
 801371a:	4618      	mov	r0, r3
 801371c:	3718      	adds	r7, #24
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}

08013722 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013722:	b580      	push	{r7, lr}
 8013724:	b088      	sub	sp, #32
 8013726:	af02      	add	r7, sp, #8
 8013728:	4603      	mov	r3, r0
 801372a:	6039      	str	r1, [r7, #0]
 801372c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801372e:	2301      	movs	r3, #1
 8013730:	617b      	str	r3, [r7, #20]
 8013732:	2300      	movs	r3, #0
 8013734:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013736:	79fb      	ldrb	r3, [r7, #7]
 8013738:	9300      	str	r3, [sp, #0]
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	2200      	movs	r2, #0
 801373e:	6939      	ldr	r1, [r7, #16]
 8013740:	6978      	ldr	r0, [r7, #20]
 8013742:	f7ff fedb 	bl	80134fc <xQueueGenericCreateStatic>
 8013746:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f7ff ffb8 	bl	80136be <prvInitialiseMutex>

		return xNewQueue;
 801374e:	68fb      	ldr	r3, [r7, #12]
	}
 8013750:	4618      	mov	r0, r3
 8013752:	3718      	adds	r7, #24
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8013764:	f002 fc70 	bl	8016048 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d103      	bne.n	8013778 <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	689b      	ldr	r3, [r3, #8]
 8013774:	60fb      	str	r3, [r7, #12]
 8013776:	e001      	b.n	801377c <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 8013778:	2300      	movs	r3, #0
 801377a:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801377c:	f002 fc96 	bl	80160ac <vPortExitCritical>

		return pxReturn;
 8013780:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8013782:	4618      	mov	r0, r3
 8013784:	3710      	adds	r7, #16
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}

0801378a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801378a:	b590      	push	{r4, r7, lr}
 801378c:	b087      	sub	sp, #28
 801378e:	af00      	add	r7, sp, #0
 8013790:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d10b      	bne.n	80137b4 <xQueueGiveMutexRecursive+0x2a>
 801379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a0:	b672      	cpsid	i
 80137a2:	f383 8811 	msr	BASEPRI, r3
 80137a6:	f3bf 8f6f 	isb	sy
 80137aa:	f3bf 8f4f 	dsb	sy
 80137ae:	b662      	cpsie	i
 80137b0:	60fb      	str	r3, [r7, #12]
 80137b2:	e7fe      	b.n	80137b2 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	689c      	ldr	r4, [r3, #8]
 80137b8:	f001 fdf4 	bl	80153a4 <xTaskGetCurrentTaskHandle>
 80137bc:	4603      	mov	r3, r0
 80137be:	429c      	cmp	r4, r3
 80137c0:	d111      	bne.n	80137e6 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	1e5a      	subs	r2, r3, #1
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d105      	bne.n	80137e0 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80137d4:	2300      	movs	r3, #0
 80137d6:	2200      	movs	r2, #0
 80137d8:	2100      	movs	r1, #0
 80137da:	6938      	ldr	r0, [r7, #16]
 80137dc:	f000 f8b0 	bl	8013940 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80137e0:	2301      	movs	r3, #1
 80137e2:	617b      	str	r3, [r7, #20]
 80137e4:	e001      	b.n	80137ea <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80137e6:	2300      	movs	r3, #0
 80137e8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80137ea:	697b      	ldr	r3, [r7, #20]
	}
 80137ec:	4618      	mov	r0, r3
 80137ee:	371c      	adds	r7, #28
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd90      	pop	{r4, r7, pc}

080137f4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80137f4:	b590      	push	{r4, r7, lr}
 80137f6:	b087      	sub	sp, #28
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10b      	bne.n	8013820 <xQueueTakeMutexRecursive+0x2c>
 8013808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801380c:	b672      	cpsid	i
 801380e:	f383 8811 	msr	BASEPRI, r3
 8013812:	f3bf 8f6f 	isb	sy
 8013816:	f3bf 8f4f 	dsb	sy
 801381a:	b662      	cpsie	i
 801381c:	60fb      	str	r3, [r7, #12]
 801381e:	e7fe      	b.n	801381e <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8013820:	693b      	ldr	r3, [r7, #16]
 8013822:	689c      	ldr	r4, [r3, #8]
 8013824:	f001 fdbe 	bl	80153a4 <xTaskGetCurrentTaskHandle>
 8013828:	4603      	mov	r3, r0
 801382a:	429c      	cmp	r4, r3
 801382c:	d107      	bne.n	801383e <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801382e:	693b      	ldr	r3, [r7, #16]
 8013830:	68db      	ldr	r3, [r3, #12]
 8013832:	1c5a      	adds	r2, r3, #1
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8013838:	2301      	movs	r3, #1
 801383a:	617b      	str	r3, [r7, #20]
 801383c:	e00c      	b.n	8013858 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801383e:	6839      	ldr	r1, [r7, #0]
 8013840:	6938      	ldr	r0, [r7, #16]
 8013842:	f000 fb8f 	bl	8013f64 <xQueueSemaphoreTake>
 8013846:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d004      	beq.n	8013858 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	68db      	ldr	r3, [r3, #12]
 8013852:	1c5a      	adds	r2, r3, #1
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8013858:	697b      	ldr	r3, [r7, #20]
	}
 801385a:	4618      	mov	r0, r3
 801385c:	371c      	adds	r7, #28
 801385e:	46bd      	mov	sp, r7
 8013860:	bd90      	pop	{r4, r7, pc}

08013862 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013862:	b580      	push	{r7, lr}
 8013864:	b08a      	sub	sp, #40	; 0x28
 8013866:	af02      	add	r7, sp, #8
 8013868:	60f8      	str	r0, [r7, #12]
 801386a:	60b9      	str	r1, [r7, #8]
 801386c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d10b      	bne.n	801388c <xQueueCreateCountingSemaphoreStatic+0x2a>
 8013874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013878:	b672      	cpsid	i
 801387a:	f383 8811 	msr	BASEPRI, r3
 801387e:	f3bf 8f6f 	isb	sy
 8013882:	f3bf 8f4f 	dsb	sy
 8013886:	b662      	cpsie	i
 8013888:	61bb      	str	r3, [r7, #24]
 801388a:	e7fe      	b.n	801388a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801388c:	68ba      	ldr	r2, [r7, #8]
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	429a      	cmp	r2, r3
 8013892:	d90b      	bls.n	80138ac <xQueueCreateCountingSemaphoreStatic+0x4a>
 8013894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013898:	b672      	cpsid	i
 801389a:	f383 8811 	msr	BASEPRI, r3
 801389e:	f3bf 8f6f 	isb	sy
 80138a2:	f3bf 8f4f 	dsb	sy
 80138a6:	b662      	cpsie	i
 80138a8:	617b      	str	r3, [r7, #20]
 80138aa:	e7fe      	b.n	80138aa <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80138ac:	2302      	movs	r3, #2
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2200      	movs	r2, #0
 80138b4:	2100      	movs	r1, #0
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7ff fe20 	bl	80134fc <xQueueGenericCreateStatic>
 80138bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d002      	beq.n	80138ca <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80138ca:	69fb      	ldr	r3, [r7, #28]
	}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3720      	adds	r7, #32
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b086      	sub	sp, #24
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10b      	bne.n	80138fc <xQueueCreateCountingSemaphore+0x28>
 80138e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e8:	b672      	cpsid	i
 80138ea:	f383 8811 	msr	BASEPRI, r3
 80138ee:	f3bf 8f6f 	isb	sy
 80138f2:	f3bf 8f4f 	dsb	sy
 80138f6:	b662      	cpsie	i
 80138f8:	613b      	str	r3, [r7, #16]
 80138fa:	e7fe      	b.n	80138fa <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80138fc:	683a      	ldr	r2, [r7, #0]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	429a      	cmp	r2, r3
 8013902:	d90b      	bls.n	801391c <xQueueCreateCountingSemaphore+0x48>
 8013904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013908:	b672      	cpsid	i
 801390a:	f383 8811 	msr	BASEPRI, r3
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	f3bf 8f4f 	dsb	sy
 8013916:	b662      	cpsie	i
 8013918:	60fb      	str	r3, [r7, #12]
 801391a:	e7fe      	b.n	801391a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801391c:	2202      	movs	r2, #2
 801391e:	2100      	movs	r1, #0
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7ff fe68 	bl	80135f6 <xQueueGenericCreate>
 8013926:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d002      	beq.n	8013934 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	683a      	ldr	r2, [r7, #0]
 8013932:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013934:	697b      	ldr	r3, [r7, #20]
	}
 8013936:	4618      	mov	r0, r3
 8013938:	3718      	adds	r7, #24
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
	...

08013940 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b08e      	sub	sp, #56	; 0x38
 8013944:	af00      	add	r7, sp, #0
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	607a      	str	r2, [r7, #4]
 801394c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801394e:	2300      	movs	r3, #0
 8013950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013958:	2b00      	cmp	r3, #0
 801395a:	d10b      	bne.n	8013974 <xQueueGenericSend+0x34>
 801395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013960:	b672      	cpsid	i
 8013962:	f383 8811 	msr	BASEPRI, r3
 8013966:	f3bf 8f6f 	isb	sy
 801396a:	f3bf 8f4f 	dsb	sy
 801396e:	b662      	cpsie	i
 8013970:	62bb      	str	r3, [r7, #40]	; 0x28
 8013972:	e7fe      	b.n	8013972 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d103      	bne.n	8013982 <xQueueGenericSend+0x42>
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801397e:	2b00      	cmp	r3, #0
 8013980:	d101      	bne.n	8013986 <xQueueGenericSend+0x46>
 8013982:	2301      	movs	r3, #1
 8013984:	e000      	b.n	8013988 <xQueueGenericSend+0x48>
 8013986:	2300      	movs	r3, #0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d10b      	bne.n	80139a4 <xQueueGenericSend+0x64>
 801398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013990:	b672      	cpsid	i
 8013992:	f383 8811 	msr	BASEPRI, r3
 8013996:	f3bf 8f6f 	isb	sy
 801399a:	f3bf 8f4f 	dsb	sy
 801399e:	b662      	cpsie	i
 80139a0:	627b      	str	r3, [r7, #36]	; 0x24
 80139a2:	e7fe      	b.n	80139a2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	d103      	bne.n	80139b2 <xQueueGenericSend+0x72>
 80139aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d101      	bne.n	80139b6 <xQueueGenericSend+0x76>
 80139b2:	2301      	movs	r3, #1
 80139b4:	e000      	b.n	80139b8 <xQueueGenericSend+0x78>
 80139b6:	2300      	movs	r3, #0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d10b      	bne.n	80139d4 <xQueueGenericSend+0x94>
 80139bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c0:	b672      	cpsid	i
 80139c2:	f383 8811 	msr	BASEPRI, r3
 80139c6:	f3bf 8f6f 	isb	sy
 80139ca:	f3bf 8f4f 	dsb	sy
 80139ce:	b662      	cpsie	i
 80139d0:	623b      	str	r3, [r7, #32]
 80139d2:	e7fe      	b.n	80139d2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139d4:	f001 fcf6 	bl	80153c4 <xTaskGetSchedulerState>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d102      	bne.n	80139e4 <xQueueGenericSend+0xa4>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d101      	bne.n	80139e8 <xQueueGenericSend+0xa8>
 80139e4:	2301      	movs	r3, #1
 80139e6:	e000      	b.n	80139ea <xQueueGenericSend+0xaa>
 80139e8:	2300      	movs	r3, #0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d10b      	bne.n	8013a06 <xQueueGenericSend+0xc6>
 80139ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f2:	b672      	cpsid	i
 80139f4:	f383 8811 	msr	BASEPRI, r3
 80139f8:	f3bf 8f6f 	isb	sy
 80139fc:	f3bf 8f4f 	dsb	sy
 8013a00:	b662      	cpsie	i
 8013a02:	61fb      	str	r3, [r7, #28]
 8013a04:	e7fe      	b.n	8013a04 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a06:	f002 fb1f 	bl	8016048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d302      	bcc.n	8013a1c <xQueueGenericSend+0xdc>
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	2b02      	cmp	r3, #2
 8013a1a:	d129      	bne.n	8013a70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	68b9      	ldr	r1, [r7, #8]
 8013a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a22:	f000 fc6e 	bl	8014302 <prvCopyDataToQueue>
 8013a26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d010      	beq.n	8013a52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a32:	3324      	adds	r3, #36	; 0x24
 8013a34:	4618      	mov	r0, r3
 8013a36:	f001 faf7 	bl	8015028 <xTaskRemoveFromEventList>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d013      	beq.n	8013a68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013a40:	4b3f      	ldr	r3, [pc, #252]	; (8013b40 <xQueueGenericSend+0x200>)
 8013a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a46:	601a      	str	r2, [r3, #0]
 8013a48:	f3bf 8f4f 	dsb	sy
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	e00a      	b.n	8013a68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d007      	beq.n	8013a68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013a58:	4b39      	ldr	r3, [pc, #228]	; (8013b40 <xQueueGenericSend+0x200>)
 8013a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a5e:	601a      	str	r2, [r3, #0]
 8013a60:	f3bf 8f4f 	dsb	sy
 8013a64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013a68:	f002 fb20 	bl	80160ac <vPortExitCritical>
				return pdPASS;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	e063      	b.n	8013b38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d103      	bne.n	8013a7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a76:	f002 fb19 	bl	80160ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	e05c      	b.n	8013b38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d106      	bne.n	8013a92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013a84:	f107 0314 	add.w	r3, r7, #20
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f001 fb31 	bl	80150f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013a8e:	2301      	movs	r3, #1
 8013a90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013a92:	f002 fb0b 	bl	80160ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013a96:	f001 f88f 	bl	8014bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a9a:	f002 fad5 	bl	8016048 <vPortEnterCritical>
 8013a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013aa4:	b25b      	sxtb	r3, r3
 8013aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aaa:	d103      	bne.n	8013ab4 <xQueueGenericSend+0x174>
 8013aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aae:	2200      	movs	r2, #0
 8013ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013aba:	b25b      	sxtb	r3, r3
 8013abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ac0:	d103      	bne.n	8013aca <xQueueGenericSend+0x18a>
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013aca:	f002 faef 	bl	80160ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ace:	1d3a      	adds	r2, r7, #4
 8013ad0:	f107 0314 	add.w	r3, r7, #20
 8013ad4:	4611      	mov	r1, r2
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f001 fb20 	bl	801511c <xTaskCheckForTimeOut>
 8013adc:	4603      	mov	r3, r0
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d124      	bne.n	8013b2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ae4:	f000 fd05 	bl	80144f2 <prvIsQueueFull>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d018      	beq.n	8013b20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af0:	3310      	adds	r3, #16
 8013af2:	687a      	ldr	r2, [r7, #4]
 8013af4:	4611      	mov	r1, r2
 8013af6:	4618      	mov	r0, r3
 8013af8:	f001 fa44 	bl	8014f84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013afe:	f000 fc90 	bl	8014422 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013b02:	f001 f867 	bl	8014bd4 <xTaskResumeAll>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f47f af7c 	bne.w	8013a06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013b0e:	4b0c      	ldr	r3, [pc, #48]	; (8013b40 <xQueueGenericSend+0x200>)
 8013b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b14:	601a      	str	r2, [r3, #0]
 8013b16:	f3bf 8f4f 	dsb	sy
 8013b1a:	f3bf 8f6f 	isb	sy
 8013b1e:	e772      	b.n	8013a06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b22:	f000 fc7e 	bl	8014422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b26:	f001 f855 	bl	8014bd4 <xTaskResumeAll>
 8013b2a:	e76c      	b.n	8013a06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b2e:	f000 fc78 	bl	8014422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b32:	f001 f84f 	bl	8014bd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013b36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3738      	adds	r7, #56	; 0x38
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	e000ed04 	.word	0xe000ed04

08013b44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b08e      	sub	sp, #56	; 0x38
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	607a      	str	r2, [r7, #4]
 8013b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d10b      	bne.n	8013b74 <xQueueGenericSendFromISR+0x30>
 8013b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b60:	b672      	cpsid	i
 8013b62:	f383 8811 	msr	BASEPRI, r3
 8013b66:	f3bf 8f6f 	isb	sy
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	b662      	cpsie	i
 8013b70:	627b      	str	r3, [r7, #36]	; 0x24
 8013b72:	e7fe      	b.n	8013b72 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d103      	bne.n	8013b82 <xQueueGenericSendFromISR+0x3e>
 8013b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d101      	bne.n	8013b86 <xQueueGenericSendFromISR+0x42>
 8013b82:	2301      	movs	r3, #1
 8013b84:	e000      	b.n	8013b88 <xQueueGenericSendFromISR+0x44>
 8013b86:	2300      	movs	r3, #0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d10b      	bne.n	8013ba4 <xQueueGenericSendFromISR+0x60>
 8013b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b90:	b672      	cpsid	i
 8013b92:	f383 8811 	msr	BASEPRI, r3
 8013b96:	f3bf 8f6f 	isb	sy
 8013b9a:	f3bf 8f4f 	dsb	sy
 8013b9e:	b662      	cpsie	i
 8013ba0:	623b      	str	r3, [r7, #32]
 8013ba2:	e7fe      	b.n	8013ba2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	2b02      	cmp	r3, #2
 8013ba8:	d103      	bne.n	8013bb2 <xQueueGenericSendFromISR+0x6e>
 8013baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d101      	bne.n	8013bb6 <xQueueGenericSendFromISR+0x72>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e000      	b.n	8013bb8 <xQueueGenericSendFromISR+0x74>
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d10b      	bne.n	8013bd4 <xQueueGenericSendFromISR+0x90>
 8013bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc0:	b672      	cpsid	i
 8013bc2:	f383 8811 	msr	BASEPRI, r3
 8013bc6:	f3bf 8f6f 	isb	sy
 8013bca:	f3bf 8f4f 	dsb	sy
 8013bce:	b662      	cpsie	i
 8013bd0:	61fb      	str	r3, [r7, #28]
 8013bd2:	e7fe      	b.n	8013bd2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bd4:	f002 fb18 	bl	8016208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013bd8:	f3ef 8211 	mrs	r2, BASEPRI
 8013bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be0:	b672      	cpsid	i
 8013be2:	f383 8811 	msr	BASEPRI, r3
 8013be6:	f3bf 8f6f 	isb	sy
 8013bea:	f3bf 8f4f 	dsb	sy
 8013bee:	b662      	cpsie	i
 8013bf0:	61ba      	str	r2, [r7, #24]
 8013bf2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013bf4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d302      	bcc.n	8013c0a <xQueueGenericSendFromISR+0xc6>
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	2b02      	cmp	r3, #2
 8013c08:	d12c      	bne.n	8013c64 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	68b9      	ldr	r1, [r7, #8]
 8013c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c1a:	f000 fb72 	bl	8014302 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013c1e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c26:	d112      	bne.n	8013c4e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d016      	beq.n	8013c5e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c32:	3324      	adds	r3, #36	; 0x24
 8013c34:	4618      	mov	r0, r3
 8013c36:	f001 f9f7 	bl	8015028 <xTaskRemoveFromEventList>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d00e      	beq.n	8013c5e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d00b      	beq.n	8013c5e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2201      	movs	r2, #1
 8013c4a:	601a      	str	r2, [r3, #0]
 8013c4c:	e007      	b.n	8013c5e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013c52:	3301      	adds	r3, #1
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	b25a      	sxtb	r2, r3
 8013c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013c5e:	2301      	movs	r3, #1
 8013c60:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013c62:	e001      	b.n	8013c68 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013c64:	2300      	movs	r3, #0
 8013c66:	637b      	str	r3, [r7, #52]	; 0x34
 8013c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c6a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3738      	adds	r7, #56	; 0x38
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b08e      	sub	sp, #56	; 0x38
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d10b      	bne.n	8013ca8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c94:	b672      	cpsid	i
 8013c96:	f383 8811 	msr	BASEPRI, r3
 8013c9a:	f3bf 8f6f 	isb	sy
 8013c9e:	f3bf 8f4f 	dsb	sy
 8013ca2:	b662      	cpsie	i
 8013ca4:	623b      	str	r3, [r7, #32]
 8013ca6:	e7fe      	b.n	8013ca6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d00b      	beq.n	8013cc8 <xQueueGiveFromISR+0x4c>
 8013cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb4:	b672      	cpsid	i
 8013cb6:	f383 8811 	msr	BASEPRI, r3
 8013cba:	f3bf 8f6f 	isb	sy
 8013cbe:	f3bf 8f4f 	dsb	sy
 8013cc2:	b662      	cpsie	i
 8013cc4:	61fb      	str	r3, [r7, #28]
 8013cc6:	e7fe      	b.n	8013cc6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d103      	bne.n	8013cd8 <xQueueGiveFromISR+0x5c>
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	689b      	ldr	r3, [r3, #8]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d101      	bne.n	8013cdc <xQueueGiveFromISR+0x60>
 8013cd8:	2301      	movs	r3, #1
 8013cda:	e000      	b.n	8013cde <xQueueGiveFromISR+0x62>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10b      	bne.n	8013cfa <xQueueGiveFromISR+0x7e>
 8013ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce6:	b672      	cpsid	i
 8013ce8:	f383 8811 	msr	BASEPRI, r3
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	f3bf 8f4f 	dsb	sy
 8013cf4:	b662      	cpsie	i
 8013cf6:	61bb      	str	r3, [r7, #24]
 8013cf8:	e7fe      	b.n	8013cf8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cfa:	f002 fa85 	bl	8016208 <vPortValidateInterruptPriority>
	__asm volatile
 8013cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8013d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d06:	b672      	cpsid	i
 8013d08:	f383 8811 	msr	BASEPRI, r3
 8013d0c:	f3bf 8f6f 	isb	sy
 8013d10:	f3bf 8f4f 	dsb	sy
 8013d14:	b662      	cpsie	i
 8013d16:	617a      	str	r2, [r7, #20]
 8013d18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013d1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d22b      	bcs.n	8013d86 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3a:	1c5a      	adds	r2, r3, #1
 8013d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013d40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d48:	d112      	bne.n	8013d70 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d016      	beq.n	8013d80 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d54:	3324      	adds	r3, #36	; 0x24
 8013d56:	4618      	mov	r0, r3
 8013d58:	f001 f966 	bl	8015028 <xTaskRemoveFromEventList>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d00e      	beq.n	8013d80 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d00b      	beq.n	8013d80 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	601a      	str	r2, [r3, #0]
 8013d6e:	e007      	b.n	8013d80 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d74:	3301      	adds	r3, #1
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	b25a      	sxtb	r2, r3
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013d80:	2301      	movs	r3, #1
 8013d82:	637b      	str	r3, [r7, #52]	; 0x34
 8013d84:	e001      	b.n	8013d8a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013d86:	2300      	movs	r3, #0
 8013d88:	637b      	str	r3, [r7, #52]	; 0x34
 8013d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3738      	adds	r7, #56	; 0x38
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
	...

08013da0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b08c      	sub	sp, #48	; 0x30
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	60f8      	str	r0, [r7, #12]
 8013da8:	60b9      	str	r1, [r7, #8]
 8013daa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013dac:	2300      	movs	r3, #0
 8013dae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d10b      	bne.n	8013dd2 <xQueueReceive+0x32>
	__asm volatile
 8013dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dbe:	b672      	cpsid	i
 8013dc0:	f383 8811 	msr	BASEPRI, r3
 8013dc4:	f3bf 8f6f 	isb	sy
 8013dc8:	f3bf 8f4f 	dsb	sy
 8013dcc:	b662      	cpsie	i
 8013dce:	623b      	str	r3, [r7, #32]
 8013dd0:	e7fe      	b.n	8013dd0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d103      	bne.n	8013de0 <xQueueReceive+0x40>
 8013dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d101      	bne.n	8013de4 <xQueueReceive+0x44>
 8013de0:	2301      	movs	r3, #1
 8013de2:	e000      	b.n	8013de6 <xQueueReceive+0x46>
 8013de4:	2300      	movs	r3, #0
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d10b      	bne.n	8013e02 <xQueueReceive+0x62>
 8013dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dee:	b672      	cpsid	i
 8013df0:	f383 8811 	msr	BASEPRI, r3
 8013df4:	f3bf 8f6f 	isb	sy
 8013df8:	f3bf 8f4f 	dsb	sy
 8013dfc:	b662      	cpsie	i
 8013dfe:	61fb      	str	r3, [r7, #28]
 8013e00:	e7fe      	b.n	8013e00 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e02:	f001 fadf 	bl	80153c4 <xTaskGetSchedulerState>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d102      	bne.n	8013e12 <xQueueReceive+0x72>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d101      	bne.n	8013e16 <xQueueReceive+0x76>
 8013e12:	2301      	movs	r3, #1
 8013e14:	e000      	b.n	8013e18 <xQueueReceive+0x78>
 8013e16:	2300      	movs	r3, #0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10b      	bne.n	8013e34 <xQueueReceive+0x94>
 8013e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e20:	b672      	cpsid	i
 8013e22:	f383 8811 	msr	BASEPRI, r3
 8013e26:	f3bf 8f6f 	isb	sy
 8013e2a:	f3bf 8f4f 	dsb	sy
 8013e2e:	b662      	cpsie	i
 8013e30:	61bb      	str	r3, [r7, #24]
 8013e32:	e7fe      	b.n	8013e32 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e34:	f002 f908 	bl	8016048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e3c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d01f      	beq.n	8013e84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e44:	68b9      	ldr	r1, [r7, #8]
 8013e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e48:	f000 fac5 	bl	80143d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4e:	1e5a      	subs	r2, r3, #1
 8013e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e52:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e56:	691b      	ldr	r3, [r3, #16]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d00f      	beq.n	8013e7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e5e:	3310      	adds	r3, #16
 8013e60:	4618      	mov	r0, r3
 8013e62:	f001 f8e1 	bl	8015028 <xTaskRemoveFromEventList>
 8013e66:	4603      	mov	r3, r0
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d007      	beq.n	8013e7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013e6c:	4b3c      	ldr	r3, [pc, #240]	; (8013f60 <xQueueReceive+0x1c0>)
 8013e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e72:	601a      	str	r2, [r3, #0]
 8013e74:	f3bf 8f4f 	dsb	sy
 8013e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013e7c:	f002 f916 	bl	80160ac <vPortExitCritical>
				return pdPASS;
 8013e80:	2301      	movs	r3, #1
 8013e82:	e069      	b.n	8013f58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d103      	bne.n	8013e92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013e8a:	f002 f90f 	bl	80160ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	e062      	b.n	8013f58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d106      	bne.n	8013ea6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e98:	f107 0310 	add.w	r3, r7, #16
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f001 f927 	bl	80150f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ea6:	f002 f901 	bl	80160ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013eaa:	f000 fe85 	bl	8014bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013eae:	f002 f8cb 	bl	8016048 <vPortEnterCritical>
 8013eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013eb8:	b25b      	sxtb	r3, r3
 8013eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ebe:	d103      	bne.n	8013ec8 <xQueueReceive+0x128>
 8013ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ece:	b25b      	sxtb	r3, r3
 8013ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ed4:	d103      	bne.n	8013ede <xQueueReceive+0x13e>
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013ede:	f002 f8e5 	bl	80160ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ee2:	1d3a      	adds	r2, r7, #4
 8013ee4:	f107 0310 	add.w	r3, r7, #16
 8013ee8:	4611      	mov	r1, r2
 8013eea:	4618      	mov	r0, r3
 8013eec:	f001 f916 	bl	801511c <xTaskCheckForTimeOut>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d123      	bne.n	8013f3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ef8:	f000 fae5 	bl	80144c6 <prvIsQueueEmpty>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d017      	beq.n	8013f32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f04:	3324      	adds	r3, #36	; 0x24
 8013f06:	687a      	ldr	r2, [r7, #4]
 8013f08:	4611      	mov	r1, r2
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f001 f83a 	bl	8014f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f12:	f000 fa86 	bl	8014422 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f16:	f000 fe5d 	bl	8014bd4 <xTaskResumeAll>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d189      	bne.n	8013e34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013f20:	4b0f      	ldr	r3, [pc, #60]	; (8013f60 <xQueueReceive+0x1c0>)
 8013f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f26:	601a      	str	r2, [r3, #0]
 8013f28:	f3bf 8f4f 	dsb	sy
 8013f2c:	f3bf 8f6f 	isb	sy
 8013f30:	e780      	b.n	8013e34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f34:	f000 fa75 	bl	8014422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013f38:	f000 fe4c 	bl	8014bd4 <xTaskResumeAll>
 8013f3c:	e77a      	b.n	8013e34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f40:	f000 fa6f 	bl	8014422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013f44:	f000 fe46 	bl	8014bd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f4a:	f000 fabc 	bl	80144c6 <prvIsQueueEmpty>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f43f af6f 	beq.w	8013e34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013f56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3730      	adds	r7, #48	; 0x30
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	e000ed04 	.word	0xe000ed04

08013f64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b08e      	sub	sp, #56	; 0x38
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013f76:	2300      	movs	r3, #0
 8013f78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d10b      	bne.n	8013f98 <xQueueSemaphoreTake+0x34>
 8013f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f84:	b672      	cpsid	i
 8013f86:	f383 8811 	msr	BASEPRI, r3
 8013f8a:	f3bf 8f6f 	isb	sy
 8013f8e:	f3bf 8f4f 	dsb	sy
 8013f92:	b662      	cpsie	i
 8013f94:	623b      	str	r3, [r7, #32]
 8013f96:	e7fe      	b.n	8013f96 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00b      	beq.n	8013fb8 <xQueueSemaphoreTake+0x54>
 8013fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa4:	b672      	cpsid	i
 8013fa6:	f383 8811 	msr	BASEPRI, r3
 8013faa:	f3bf 8f6f 	isb	sy
 8013fae:	f3bf 8f4f 	dsb	sy
 8013fb2:	b662      	cpsie	i
 8013fb4:	61fb      	str	r3, [r7, #28]
 8013fb6:	e7fe      	b.n	8013fb6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013fb8:	f001 fa04 	bl	80153c4 <xTaskGetSchedulerState>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d102      	bne.n	8013fc8 <xQueueSemaphoreTake+0x64>
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d101      	bne.n	8013fcc <xQueueSemaphoreTake+0x68>
 8013fc8:	2301      	movs	r3, #1
 8013fca:	e000      	b.n	8013fce <xQueueSemaphoreTake+0x6a>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d10b      	bne.n	8013fea <xQueueSemaphoreTake+0x86>
 8013fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd6:	b672      	cpsid	i
 8013fd8:	f383 8811 	msr	BASEPRI, r3
 8013fdc:	f3bf 8f6f 	isb	sy
 8013fe0:	f3bf 8f4f 	dsb	sy
 8013fe4:	b662      	cpsie	i
 8013fe6:	61bb      	str	r3, [r7, #24]
 8013fe8:	e7fe      	b.n	8013fe8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013fea:	f002 f82d 	bl	8016048 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ff2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d024      	beq.n	8014044 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ffc:	1e5a      	subs	r2, r3, #1
 8013ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014000:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d104      	bne.n	8014014 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801400a:	f001 fb55 	bl	80156b8 <pvTaskIncrementMutexHeldCount>
 801400e:	4602      	mov	r2, r0
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014016:	691b      	ldr	r3, [r3, #16]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00f      	beq.n	801403c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401e:	3310      	adds	r3, #16
 8014020:	4618      	mov	r0, r3
 8014022:	f001 f801 	bl	8015028 <xTaskRemoveFromEventList>
 8014026:	4603      	mov	r3, r0
 8014028:	2b00      	cmp	r3, #0
 801402a:	d007      	beq.n	801403c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801402c:	4b54      	ldr	r3, [pc, #336]	; (8014180 <xQueueSemaphoreTake+0x21c>)
 801402e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014032:	601a      	str	r2, [r3, #0]
 8014034:	f3bf 8f4f 	dsb	sy
 8014038:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801403c:	f002 f836 	bl	80160ac <vPortExitCritical>
				return pdPASS;
 8014040:	2301      	movs	r3, #1
 8014042:	e098      	b.n	8014176 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d112      	bne.n	8014070 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00b      	beq.n	8014068 <xQueueSemaphoreTake+0x104>
 8014050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014054:	b672      	cpsid	i
 8014056:	f383 8811 	msr	BASEPRI, r3
 801405a:	f3bf 8f6f 	isb	sy
 801405e:	f3bf 8f4f 	dsb	sy
 8014062:	b662      	cpsie	i
 8014064:	617b      	str	r3, [r7, #20]
 8014066:	e7fe      	b.n	8014066 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014068:	f002 f820 	bl	80160ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801406c:	2300      	movs	r3, #0
 801406e:	e082      	b.n	8014176 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014072:	2b00      	cmp	r3, #0
 8014074:	d106      	bne.n	8014084 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014076:	f107 030c 	add.w	r3, r7, #12
 801407a:	4618      	mov	r0, r3
 801407c:	f001 f838 	bl	80150f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014080:	2301      	movs	r3, #1
 8014082:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014084:	f002 f812 	bl	80160ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014088:	f000 fd96 	bl	8014bb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801408c:	f001 ffdc 	bl	8016048 <vPortEnterCritical>
 8014090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014096:	b25b      	sxtb	r3, r3
 8014098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801409c:	d103      	bne.n	80140a6 <xQueueSemaphoreTake+0x142>
 801409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a0:	2200      	movs	r2, #0
 80140a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80140a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140ac:	b25b      	sxtb	r3, r3
 80140ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b2:	d103      	bne.n	80140bc <xQueueSemaphoreTake+0x158>
 80140b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b6:	2200      	movs	r2, #0
 80140b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80140bc:	f001 fff6 	bl	80160ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80140c0:	463a      	mov	r2, r7
 80140c2:	f107 030c 	add.w	r3, r7, #12
 80140c6:	4611      	mov	r1, r2
 80140c8:	4618      	mov	r0, r3
 80140ca:	f001 f827 	bl	801511c <xTaskCheckForTimeOut>
 80140ce:	4603      	mov	r3, r0
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d132      	bne.n	801413a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80140d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140d6:	f000 f9f6 	bl	80144c6 <prvIsQueueEmpty>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d026      	beq.n	801412e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d109      	bne.n	80140fc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80140e8:	f001 ffae 	bl	8016048 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80140ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ee:	689b      	ldr	r3, [r3, #8]
 80140f0:	4618      	mov	r0, r3
 80140f2:	f001 f985 	bl	8015400 <xTaskPriorityInherit>
 80140f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80140f8:	f001 ffd8 	bl	80160ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80140fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fe:	3324      	adds	r3, #36	; 0x24
 8014100:	683a      	ldr	r2, [r7, #0]
 8014102:	4611      	mov	r1, r2
 8014104:	4618      	mov	r0, r3
 8014106:	f000 ff3d 	bl	8014f84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801410a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801410c:	f000 f989 	bl	8014422 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014110:	f000 fd60 	bl	8014bd4 <xTaskResumeAll>
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	f47f af67 	bne.w	8013fea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801411c:	4b18      	ldr	r3, [pc, #96]	; (8014180 <xQueueSemaphoreTake+0x21c>)
 801411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014122:	601a      	str	r2, [r3, #0]
 8014124:	f3bf 8f4f 	dsb	sy
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	e75d      	b.n	8013fea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801412e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014130:	f000 f977 	bl	8014422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014134:	f000 fd4e 	bl	8014bd4 <xTaskResumeAll>
 8014138:	e757      	b.n	8013fea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801413a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801413c:	f000 f971 	bl	8014422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014140:	f000 fd48 	bl	8014bd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014146:	f000 f9be 	bl	80144c6 <prvIsQueueEmpty>
 801414a:	4603      	mov	r3, r0
 801414c:	2b00      	cmp	r3, #0
 801414e:	f43f af4c 	beq.w	8013fea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00d      	beq.n	8014174 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014158:	f001 ff76 	bl	8016048 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801415c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801415e:	f000 f8b8 	bl	80142d2 <prvGetDisinheritPriorityAfterTimeout>
 8014162:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014166:	689b      	ldr	r3, [r3, #8]
 8014168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801416a:	4618      	mov	r0, r3
 801416c:	f001 fa20 	bl	80155b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014170:	f001 ff9c 	bl	80160ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014176:	4618      	mov	r0, r3
 8014178:	3738      	adds	r7, #56	; 0x38
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	e000ed04 	.word	0xe000ed04

08014184 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b08e      	sub	sp, #56	; 0x38
 8014188:	af00      	add	r7, sp, #0
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014196:	2b00      	cmp	r3, #0
 8014198:	d10b      	bne.n	80141b2 <xQueueReceiveFromISR+0x2e>
 801419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801419e:	b672      	cpsid	i
 80141a0:	f383 8811 	msr	BASEPRI, r3
 80141a4:	f3bf 8f6f 	isb	sy
 80141a8:	f3bf 8f4f 	dsb	sy
 80141ac:	b662      	cpsie	i
 80141ae:	623b      	str	r3, [r7, #32]
 80141b0:	e7fe      	b.n	80141b0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d103      	bne.n	80141c0 <xQueueReceiveFromISR+0x3c>
 80141b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d101      	bne.n	80141c4 <xQueueReceiveFromISR+0x40>
 80141c0:	2301      	movs	r3, #1
 80141c2:	e000      	b.n	80141c6 <xQueueReceiveFromISR+0x42>
 80141c4:	2300      	movs	r3, #0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d10b      	bne.n	80141e2 <xQueueReceiveFromISR+0x5e>
 80141ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ce:	b672      	cpsid	i
 80141d0:	f383 8811 	msr	BASEPRI, r3
 80141d4:	f3bf 8f6f 	isb	sy
 80141d8:	f3bf 8f4f 	dsb	sy
 80141dc:	b662      	cpsie	i
 80141de:	61fb      	str	r3, [r7, #28]
 80141e0:	e7fe      	b.n	80141e0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80141e2:	f002 f811 	bl	8016208 <vPortValidateInterruptPriority>
	__asm volatile
 80141e6:	f3ef 8211 	mrs	r2, BASEPRI
 80141ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ee:	b672      	cpsid	i
 80141f0:	f383 8811 	msr	BASEPRI, r3
 80141f4:	f3bf 8f6f 	isb	sy
 80141f8:	f3bf 8f4f 	dsb	sy
 80141fc:	b662      	cpsie	i
 80141fe:	61ba      	str	r2, [r7, #24]
 8014200:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014202:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014204:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801420a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	2b00      	cmp	r3, #0
 8014210:	d02f      	beq.n	8014272 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801421c:	68b9      	ldr	r1, [r7, #8]
 801421e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014220:	f000 f8d9 	bl	80143d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014226:	1e5a      	subs	r2, r3, #1
 8014228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801422a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801422c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014234:	d112      	bne.n	801425c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014238:	691b      	ldr	r3, [r3, #16]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d016      	beq.n	801426c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014240:	3310      	adds	r3, #16
 8014242:	4618      	mov	r0, r3
 8014244:	f000 fef0 	bl	8015028 <xTaskRemoveFromEventList>
 8014248:	4603      	mov	r3, r0
 801424a:	2b00      	cmp	r3, #0
 801424c:	d00e      	beq.n	801426c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d00b      	beq.n	801426c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2201      	movs	r2, #1
 8014258:	601a      	str	r2, [r3, #0]
 801425a:	e007      	b.n	801426c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801425c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014260:	3301      	adds	r3, #1
 8014262:	b2db      	uxtb	r3, r3
 8014264:	b25a      	sxtb	r2, r3
 8014266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801426c:	2301      	movs	r3, #1
 801426e:	637b      	str	r3, [r7, #52]	; 0x34
 8014270:	e001      	b.n	8014276 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8014272:	2300      	movs	r3, #0
 8014274:	637b      	str	r3, [r7, #52]	; 0x34
 8014276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014278:	613b      	str	r3, [r7, #16]
	__asm volatile
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014282:	4618      	mov	r0, r3
 8014284:	3738      	adds	r7, #56	; 0x38
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}

0801428a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801428a:	b580      	push	{r7, lr}
 801428c:	b084      	sub	sp, #16
 801428e:	af00      	add	r7, sp, #0
 8014290:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d10b      	bne.n	80142b4 <vQueueDelete+0x2a>
	__asm volatile
 801429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a0:	b672      	cpsid	i
 80142a2:	f383 8811 	msr	BASEPRI, r3
 80142a6:	f3bf 8f6f 	isb	sy
 80142aa:	f3bf 8f4f 	dsb	sy
 80142ae:	b662      	cpsie	i
 80142b0:	60bb      	str	r3, [r7, #8]
 80142b2:	e7fe      	b.n	80142b2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80142b4:	68f8      	ldr	r0, [r7, #12]
 80142b6:	f000 f95d 	bl	8014574 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d102      	bne.n	80142ca <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80142c4:	68f8      	ldr	r0, [r7, #12]
 80142c6:	f002 f8a9 	bl	801641c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80142ca:	bf00      	nop
 80142cc:	3710      	adds	r7, #16
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}

080142d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80142d2:	b480      	push	{r7}
 80142d4:	b085      	sub	sp, #20
 80142d6:	af00      	add	r7, sp, #0
 80142d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d006      	beq.n	80142f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80142ec:	60fb      	str	r3, [r7, #12]
 80142ee:	e001      	b.n	80142f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80142f0:	2300      	movs	r3, #0
 80142f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80142f4:	68fb      	ldr	r3, [r7, #12]
	}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3714      	adds	r7, #20
 80142fa:	46bd      	mov	sp, r7
 80142fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014300:	4770      	bx	lr

08014302 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014302:	b580      	push	{r7, lr}
 8014304:	b086      	sub	sp, #24
 8014306:	af00      	add	r7, sp, #0
 8014308:	60f8      	str	r0, [r7, #12]
 801430a:	60b9      	str	r1, [r7, #8]
 801430c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801430e:	2300      	movs	r3, #0
 8014310:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014316:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801431c:	2b00      	cmp	r3, #0
 801431e:	d10d      	bne.n	801433c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d14d      	bne.n	80143c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	689b      	ldr	r3, [r3, #8]
 801432c:	4618      	mov	r0, r3
 801432e:	f001 f8cf 	bl	80154d0 <xTaskPriorityDisinherit>
 8014332:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2200      	movs	r2, #0
 8014338:	609a      	str	r2, [r3, #8]
 801433a:	e043      	b.n	80143c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d119      	bne.n	8014376 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	6858      	ldr	r0, [r3, #4]
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801434a:	461a      	mov	r2, r3
 801434c:	68b9      	ldr	r1, [r7, #8]
 801434e:	f002 fef9 	bl	8017144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	685a      	ldr	r2, [r3, #4]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801435a:	441a      	add	r2, r3
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	685a      	ldr	r2, [r3, #4]
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	689b      	ldr	r3, [r3, #8]
 8014368:	429a      	cmp	r2, r3
 801436a:	d32b      	bcc.n	80143c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	681a      	ldr	r2, [r3, #0]
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	605a      	str	r2, [r3, #4]
 8014374:	e026      	b.n	80143c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	68d8      	ldr	r0, [r3, #12]
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801437e:	461a      	mov	r2, r3
 8014380:	68b9      	ldr	r1, [r7, #8]
 8014382:	f002 fedf 	bl	8017144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	68da      	ldr	r2, [r3, #12]
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801438e:	425b      	negs	r3, r3
 8014390:	441a      	add	r2, r3
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	68da      	ldr	r2, [r3, #12]
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	429a      	cmp	r2, r3
 80143a0:	d207      	bcs.n	80143b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	689a      	ldr	r2, [r3, #8]
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143aa:	425b      	negs	r3, r3
 80143ac:	441a      	add	r2, r3
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	d105      	bne.n	80143c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d002      	beq.n	80143c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80143be:	693b      	ldr	r3, [r7, #16]
 80143c0:	3b01      	subs	r3, #1
 80143c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	1c5a      	adds	r2, r3, #1
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80143cc:	697b      	ldr	r3, [r7, #20]
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3718      	adds	r7, #24
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b082      	sub	sp, #8
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
 80143de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d018      	beq.n	801441a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	68da      	ldr	r2, [r3, #12]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143f0:	441a      	add	r2, r3
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	68da      	ldr	r2, [r3, #12]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	689b      	ldr	r3, [r3, #8]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d303      	bcc.n	801440a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	68d9      	ldr	r1, [r3, #12]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014412:	461a      	mov	r2, r3
 8014414:	6838      	ldr	r0, [r7, #0]
 8014416:	f002 fe95 	bl	8017144 <memcpy>
	}
}
 801441a:	bf00      	nop
 801441c:	3708      	adds	r7, #8
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}

08014422 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014422:	b580      	push	{r7, lr}
 8014424:	b084      	sub	sp, #16
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801442a:	f001 fe0d 	bl	8016048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014434:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014436:	e011      	b.n	801445c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801443c:	2b00      	cmp	r3, #0
 801443e:	d012      	beq.n	8014466 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	3324      	adds	r3, #36	; 0x24
 8014444:	4618      	mov	r0, r3
 8014446:	f000 fdef 	bl	8015028 <xTaskRemoveFromEventList>
 801444a:	4603      	mov	r3, r0
 801444c:	2b00      	cmp	r3, #0
 801444e:	d001      	beq.n	8014454 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014450:	f000 fec8 	bl	80151e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014454:	7bfb      	ldrb	r3, [r7, #15]
 8014456:	3b01      	subs	r3, #1
 8014458:	b2db      	uxtb	r3, r3
 801445a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801445c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014460:	2b00      	cmp	r3, #0
 8014462:	dce9      	bgt.n	8014438 <prvUnlockQueue+0x16>
 8014464:	e000      	b.n	8014468 <prvUnlockQueue+0x46>
					break;
 8014466:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	22ff      	movs	r2, #255	; 0xff
 801446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014470:	f001 fe1c 	bl	80160ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014474:	f001 fde8 	bl	8016048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801447e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014480:	e011      	b.n	80144a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	691b      	ldr	r3, [r3, #16]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d012      	beq.n	80144b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	3310      	adds	r3, #16
 801448e:	4618      	mov	r0, r3
 8014490:	f000 fdca 	bl	8015028 <xTaskRemoveFromEventList>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d001      	beq.n	801449e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801449a:	f000 fea3 	bl	80151e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801449e:	7bbb      	ldrb	r3, [r7, #14]
 80144a0:	3b01      	subs	r3, #1
 80144a2:	b2db      	uxtb	r3, r3
 80144a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80144a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	dce9      	bgt.n	8014482 <prvUnlockQueue+0x60>
 80144ae:	e000      	b.n	80144b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80144b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	22ff      	movs	r2, #255	; 0xff
 80144b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80144ba:	f001 fdf7 	bl	80160ac <vPortExitCritical>
}
 80144be:	bf00      	nop
 80144c0:	3710      	adds	r7, #16
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b084      	sub	sp, #16
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80144ce:	f001 fdbb 	bl	8016048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d102      	bne.n	80144e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80144da:	2301      	movs	r3, #1
 80144dc:	60fb      	str	r3, [r7, #12]
 80144de:	e001      	b.n	80144e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80144e0:	2300      	movs	r3, #0
 80144e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80144e4:	f001 fde2 	bl	80160ac <vPortExitCritical>

	return xReturn;
 80144e8:	68fb      	ldr	r3, [r7, #12]
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3710      	adds	r7, #16
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}

080144f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80144f2:	b580      	push	{r7, lr}
 80144f4:	b084      	sub	sp, #16
 80144f6:	af00      	add	r7, sp, #0
 80144f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80144fa:	f001 fda5 	bl	8016048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014506:	429a      	cmp	r2, r3
 8014508:	d102      	bne.n	8014510 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801450a:	2301      	movs	r3, #1
 801450c:	60fb      	str	r3, [r7, #12]
 801450e:	e001      	b.n	8014514 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014510:	2300      	movs	r3, #0
 8014512:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014514:	f001 fdca 	bl	80160ac <vPortExitCritical>

	return xReturn;
 8014518:	68fb      	ldr	r3, [r7, #12]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3710      	adds	r7, #16
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
	...

08014524 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801452e:	2300      	movs	r3, #0
 8014530:	60fb      	str	r3, [r7, #12]
 8014532:	e014      	b.n	801455e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014534:	4a0e      	ldr	r2, [pc, #56]	; (8014570 <vQueueAddToRegistry+0x4c>)
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d10b      	bne.n	8014558 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014540:	490b      	ldr	r1, [pc, #44]	; (8014570 <vQueueAddToRegistry+0x4c>)
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	683a      	ldr	r2, [r7, #0]
 8014546:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801454a:	4a09      	ldr	r2, [pc, #36]	; (8014570 <vQueueAddToRegistry+0x4c>)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	00db      	lsls	r3, r3, #3
 8014550:	4413      	add	r3, r2
 8014552:	687a      	ldr	r2, [r7, #4]
 8014554:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014556:	e005      	b.n	8014564 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	3301      	adds	r3, #1
 801455c:	60fb      	str	r3, [r7, #12]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2b07      	cmp	r3, #7
 8014562:	d9e7      	bls.n	8014534 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014564:	bf00      	nop
 8014566:	3714      	adds	r7, #20
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr
 8014570:	200156e4 	.word	0x200156e4

08014574 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014574:	b480      	push	{r7}
 8014576:	b085      	sub	sp, #20
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801457c:	2300      	movs	r3, #0
 801457e:	60fb      	str	r3, [r7, #12]
 8014580:	e016      	b.n	80145b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014582:	4a10      	ldr	r2, [pc, #64]	; (80145c4 <vQueueUnregisterQueue+0x50>)
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	00db      	lsls	r3, r3, #3
 8014588:	4413      	add	r3, r2
 801458a:	685b      	ldr	r3, [r3, #4]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	429a      	cmp	r2, r3
 8014590:	d10b      	bne.n	80145aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014592:	4a0c      	ldr	r2, [pc, #48]	; (80145c4 <vQueueUnregisterQueue+0x50>)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2100      	movs	r1, #0
 8014598:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801459c:	4a09      	ldr	r2, [pc, #36]	; (80145c4 <vQueueUnregisterQueue+0x50>)
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	00db      	lsls	r3, r3, #3
 80145a2:	4413      	add	r3, r2
 80145a4:	2200      	movs	r2, #0
 80145a6:	605a      	str	r2, [r3, #4]
				break;
 80145a8:	e005      	b.n	80145b6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	3301      	adds	r3, #1
 80145ae:	60fb      	str	r3, [r7, #12]
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2b07      	cmp	r3, #7
 80145b4:	d9e5      	bls.n	8014582 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80145b6:	bf00      	nop
 80145b8:	3714      	adds	r7, #20
 80145ba:	46bd      	mov	sp, r7
 80145bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c0:	4770      	bx	lr
 80145c2:	bf00      	nop
 80145c4:	200156e4 	.word	0x200156e4

080145c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b086      	sub	sp, #24
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	60b9      	str	r1, [r7, #8]
 80145d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80145d8:	f001 fd36 	bl	8016048 <vPortEnterCritical>
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145e2:	b25b      	sxtb	r3, r3
 80145e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145e8:	d103      	bne.n	80145f2 <vQueueWaitForMessageRestricted+0x2a>
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	2200      	movs	r2, #0
 80145ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145f8:	b25b      	sxtb	r3, r3
 80145fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145fe:	d103      	bne.n	8014608 <vQueueWaitForMessageRestricted+0x40>
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	2200      	movs	r2, #0
 8014604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014608:	f001 fd50 	bl	80160ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014610:	2b00      	cmp	r3, #0
 8014612:	d106      	bne.n	8014622 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	3324      	adds	r3, #36	; 0x24
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	68b9      	ldr	r1, [r7, #8]
 801461c:	4618      	mov	r0, r3
 801461e:	f000 fcd7 	bl	8014fd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014622:	6978      	ldr	r0, [r7, #20]
 8014624:	f7ff fefd 	bl	8014422 <prvUnlockQueue>
	}
 8014628:	bf00      	nop
 801462a:	3718      	adds	r7, #24
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014630:	b580      	push	{r7, lr}
 8014632:	b08e      	sub	sp, #56	; 0x38
 8014634:	af04      	add	r7, sp, #16
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	607a      	str	r2, [r7, #4]
 801463c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014640:	2b00      	cmp	r3, #0
 8014642:	d10b      	bne.n	801465c <xTaskCreateStatic+0x2c>
 8014644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014648:	b672      	cpsid	i
 801464a:	f383 8811 	msr	BASEPRI, r3
 801464e:	f3bf 8f6f 	isb	sy
 8014652:	f3bf 8f4f 	dsb	sy
 8014656:	b662      	cpsie	i
 8014658:	623b      	str	r3, [r7, #32]
 801465a:	e7fe      	b.n	801465a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801465e:	2b00      	cmp	r3, #0
 8014660:	d10b      	bne.n	801467a <xTaskCreateStatic+0x4a>
 8014662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014666:	b672      	cpsid	i
 8014668:	f383 8811 	msr	BASEPRI, r3
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	f3bf 8f4f 	dsb	sy
 8014674:	b662      	cpsie	i
 8014676:	61fb      	str	r3, [r7, #28]
 8014678:	e7fe      	b.n	8014678 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801467a:	235c      	movs	r3, #92	; 0x5c
 801467c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801467e:	693b      	ldr	r3, [r7, #16]
 8014680:	2b5c      	cmp	r3, #92	; 0x5c
 8014682:	d00b      	beq.n	801469c <xTaskCreateStatic+0x6c>
 8014684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014688:	b672      	cpsid	i
 801468a:	f383 8811 	msr	BASEPRI, r3
 801468e:	f3bf 8f6f 	isb	sy
 8014692:	f3bf 8f4f 	dsb	sy
 8014696:	b662      	cpsie	i
 8014698:	61bb      	str	r3, [r7, #24]
 801469a:	e7fe      	b.n	801469a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801469c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d01e      	beq.n	80146e2 <xTaskCreateStatic+0xb2>
 80146a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d01b      	beq.n	80146e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80146aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80146ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	2202      	movs	r2, #2
 80146b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80146bc:	2300      	movs	r3, #0
 80146be:	9303      	str	r3, [sp, #12]
 80146c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c2:	9302      	str	r3, [sp, #8]
 80146c4:	f107 0314 	add.w	r3, r7, #20
 80146c8:	9301      	str	r3, [sp, #4]
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	9300      	str	r3, [sp, #0]
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	68b9      	ldr	r1, [r7, #8]
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f000 f850 	bl	801477a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80146da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146dc:	f000 f8de 	bl	801489c <prvAddNewTaskToReadyList>
 80146e0:	e001      	b.n	80146e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80146e2:	2300      	movs	r3, #0
 80146e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80146e6:	697b      	ldr	r3, [r7, #20]
	}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3728      	adds	r7, #40	; 0x28
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b08c      	sub	sp, #48	; 0x30
 80146f4:	af04      	add	r7, sp, #16
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	603b      	str	r3, [r7, #0]
 80146fc:	4613      	mov	r3, r2
 80146fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014700:	88fb      	ldrh	r3, [r7, #6]
 8014702:	009b      	lsls	r3, r3, #2
 8014704:	4618      	mov	r0, r3
 8014706:	f001 fdc1 	bl	801628c <pvPortMalloc>
 801470a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d00e      	beq.n	8014730 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014712:	205c      	movs	r0, #92	; 0x5c
 8014714:	f001 fdba 	bl	801628c <pvPortMalloc>
 8014718:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801471a:	69fb      	ldr	r3, [r7, #28]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d003      	beq.n	8014728 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014720:	69fb      	ldr	r3, [r7, #28]
 8014722:	697a      	ldr	r2, [r7, #20]
 8014724:	631a      	str	r2, [r3, #48]	; 0x30
 8014726:	e005      	b.n	8014734 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014728:	6978      	ldr	r0, [r7, #20]
 801472a:	f001 fe77 	bl	801641c <vPortFree>
 801472e:	e001      	b.n	8014734 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014730:	2300      	movs	r3, #0
 8014732:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d017      	beq.n	801476a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	2200      	movs	r2, #0
 801473e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014742:	88fa      	ldrh	r2, [r7, #6]
 8014744:	2300      	movs	r3, #0
 8014746:	9303      	str	r3, [sp, #12]
 8014748:	69fb      	ldr	r3, [r7, #28]
 801474a:	9302      	str	r3, [sp, #8]
 801474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801474e:	9301      	str	r3, [sp, #4]
 8014750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014752:	9300      	str	r3, [sp, #0]
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	68b9      	ldr	r1, [r7, #8]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f000 f80e 	bl	801477a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801475e:	69f8      	ldr	r0, [r7, #28]
 8014760:	f000 f89c 	bl	801489c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014764:	2301      	movs	r3, #1
 8014766:	61bb      	str	r3, [r7, #24]
 8014768:	e002      	b.n	8014770 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801476a:	f04f 33ff 	mov.w	r3, #4294967295
 801476e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014770:	69bb      	ldr	r3, [r7, #24]
	}
 8014772:	4618      	mov	r0, r3
 8014774:	3720      	adds	r7, #32
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}

0801477a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801477a:	b580      	push	{r7, lr}
 801477c:	b088      	sub	sp, #32
 801477e:	af00      	add	r7, sp, #0
 8014780:	60f8      	str	r0, [r7, #12]
 8014782:	60b9      	str	r1, [r7, #8]
 8014784:	607a      	str	r2, [r7, #4]
 8014786:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801478a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	461a      	mov	r2, r3
 8014792:	21a5      	movs	r1, #165	; 0xa5
 8014794:	f002 fce1 	bl	801715a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801479c:	6879      	ldr	r1, [r7, #4]
 801479e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80147a2:	440b      	add	r3, r1
 80147a4:	009b      	lsls	r3, r3, #2
 80147a6:	4413      	add	r3, r2
 80147a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80147aa:	69bb      	ldr	r3, [r7, #24]
 80147ac:	f023 0307 	bic.w	r3, r3, #7
 80147b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	f003 0307 	and.w	r3, r3, #7
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d00b      	beq.n	80147d4 <prvInitialiseNewTask+0x5a>
 80147bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c0:	b672      	cpsid	i
 80147c2:	f383 8811 	msr	BASEPRI, r3
 80147c6:	f3bf 8f6f 	isb	sy
 80147ca:	f3bf 8f4f 	dsb	sy
 80147ce:	b662      	cpsie	i
 80147d0:	617b      	str	r3, [r7, #20]
 80147d2:	e7fe      	b.n	80147d2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d01f      	beq.n	801481a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80147da:	2300      	movs	r3, #0
 80147dc:	61fb      	str	r3, [r7, #28]
 80147de:	e012      	b.n	8014806 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80147e0:	68ba      	ldr	r2, [r7, #8]
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	4413      	add	r3, r2
 80147e6:	7819      	ldrb	r1, [r3, #0]
 80147e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	4413      	add	r3, r2
 80147ee:	3334      	adds	r3, #52	; 0x34
 80147f0:	460a      	mov	r2, r1
 80147f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80147f4:	68ba      	ldr	r2, [r7, #8]
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	4413      	add	r3, r2
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d006      	beq.n	801480e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014800:	69fb      	ldr	r3, [r7, #28]
 8014802:	3301      	adds	r3, #1
 8014804:	61fb      	str	r3, [r7, #28]
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	2b0f      	cmp	r3, #15
 801480a:	d9e9      	bls.n	80147e0 <prvInitialiseNewTask+0x66>
 801480c:	e000      	b.n	8014810 <prvInitialiseNewTask+0x96>
			{
				break;
 801480e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014812:	2200      	movs	r2, #0
 8014814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014818:	e003      	b.n	8014822 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801481c:	2200      	movs	r2, #0
 801481e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014824:	2b37      	cmp	r3, #55	; 0x37
 8014826:	d901      	bls.n	801482c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014828:	2337      	movs	r3, #55	; 0x37
 801482a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014830:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014836:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483a:	2200      	movs	r2, #0
 801483c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014840:	3304      	adds	r3, #4
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe fd5c 	bl	8013300 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484a:	3318      	adds	r3, #24
 801484c:	4618      	mov	r0, r3
 801484e:	f7fe fd57 	bl	8013300 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014856:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801485a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014860:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014866:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486a:	2200      	movs	r2, #0
 801486c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014870:	2200      	movs	r2, #0
 8014872:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	68f9      	ldr	r1, [r7, #12]
 801487a:	69b8      	ldr	r0, [r7, #24]
 801487c:	f001 fad8 	bl	8015e30 <pxPortInitialiseStack>
 8014880:	4602      	mov	r2, r0
 8014882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014884:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014888:	2b00      	cmp	r3, #0
 801488a:	d002      	beq.n	8014892 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014892:	bf00      	nop
 8014894:	3720      	adds	r7, #32
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
	...

0801489c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80148a4:	f001 fbd0 	bl	8016048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80148a8:	4b2d      	ldr	r3, [pc, #180]	; (8014960 <prvAddNewTaskToReadyList+0xc4>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	3301      	adds	r3, #1
 80148ae:	4a2c      	ldr	r2, [pc, #176]	; (8014960 <prvAddNewTaskToReadyList+0xc4>)
 80148b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80148b2:	4b2c      	ldr	r3, [pc, #176]	; (8014964 <prvAddNewTaskToReadyList+0xc8>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d109      	bne.n	80148ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80148ba:	4a2a      	ldr	r2, [pc, #168]	; (8014964 <prvAddNewTaskToReadyList+0xc8>)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80148c0:	4b27      	ldr	r3, [pc, #156]	; (8014960 <prvAddNewTaskToReadyList+0xc4>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	2b01      	cmp	r3, #1
 80148c6:	d110      	bne.n	80148ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80148c8:	f000 fcb0 	bl	801522c <prvInitialiseTaskLists>
 80148cc:	e00d      	b.n	80148ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80148ce:	4b26      	ldr	r3, [pc, #152]	; (8014968 <prvAddNewTaskToReadyList+0xcc>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d109      	bne.n	80148ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80148d6:	4b23      	ldr	r3, [pc, #140]	; (8014964 <prvAddNewTaskToReadyList+0xc8>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d802      	bhi.n	80148ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80148e4:	4a1f      	ldr	r2, [pc, #124]	; (8014964 <prvAddNewTaskToReadyList+0xc8>)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80148ea:	4b20      	ldr	r3, [pc, #128]	; (801496c <prvAddNewTaskToReadyList+0xd0>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	3301      	adds	r3, #1
 80148f0:	4a1e      	ldr	r2, [pc, #120]	; (801496c <prvAddNewTaskToReadyList+0xd0>)
 80148f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80148f4:	4b1d      	ldr	r3, [pc, #116]	; (801496c <prvAddNewTaskToReadyList+0xd0>)
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014900:	4b1b      	ldr	r3, [pc, #108]	; (8014970 <prvAddNewTaskToReadyList+0xd4>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	429a      	cmp	r2, r3
 8014906:	d903      	bls.n	8014910 <prvAddNewTaskToReadyList+0x74>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801490c:	4a18      	ldr	r2, [pc, #96]	; (8014970 <prvAddNewTaskToReadyList+0xd4>)
 801490e:	6013      	str	r3, [r2, #0]
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014914:	4613      	mov	r3, r2
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	4413      	add	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	4a15      	ldr	r2, [pc, #84]	; (8014974 <prvAddNewTaskToReadyList+0xd8>)
 801491e:	441a      	add	r2, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	3304      	adds	r3, #4
 8014924:	4619      	mov	r1, r3
 8014926:	4610      	mov	r0, r2
 8014928:	f7fe fcf7 	bl	801331a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801492c:	f001 fbbe 	bl	80160ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014930:	4b0d      	ldr	r3, [pc, #52]	; (8014968 <prvAddNewTaskToReadyList+0xcc>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d00e      	beq.n	8014956 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014938:	4b0a      	ldr	r3, [pc, #40]	; (8014964 <prvAddNewTaskToReadyList+0xc8>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014942:	429a      	cmp	r2, r3
 8014944:	d207      	bcs.n	8014956 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014946:	4b0c      	ldr	r3, [pc, #48]	; (8014978 <prvAddNewTaskToReadyList+0xdc>)
 8014948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801494c:	601a      	str	r2, [r3, #0]
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014956:	bf00      	nop
 8014958:	3708      	adds	r7, #8
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	20000ef8 	.word	0x20000ef8
 8014964:	20000a24 	.word	0x20000a24
 8014968:	20000f04 	.word	0x20000f04
 801496c:	20000f14 	.word	0x20000f14
 8014970:	20000f00 	.word	0x20000f00
 8014974:	20000a28 	.word	0x20000a28
 8014978:	e000ed04 	.word	0xe000ed04

0801497c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801497c:	b580      	push	{r7, lr}
 801497e:	b08a      	sub	sp, #40	; 0x28
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014986:	2300      	movs	r3, #0
 8014988:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d10b      	bne.n	80149a8 <vTaskDelayUntil+0x2c>
 8014990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014994:	b672      	cpsid	i
 8014996:	f383 8811 	msr	BASEPRI, r3
 801499a:	f3bf 8f6f 	isb	sy
 801499e:	f3bf 8f4f 	dsb	sy
 80149a2:	b662      	cpsie	i
 80149a4:	617b      	str	r3, [r7, #20]
 80149a6:	e7fe      	b.n	80149a6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d10b      	bne.n	80149c6 <vTaskDelayUntil+0x4a>
 80149ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b2:	b672      	cpsid	i
 80149b4:	f383 8811 	msr	BASEPRI, r3
 80149b8:	f3bf 8f6f 	isb	sy
 80149bc:	f3bf 8f4f 	dsb	sy
 80149c0:	b662      	cpsie	i
 80149c2:	613b      	str	r3, [r7, #16]
 80149c4:	e7fe      	b.n	80149c4 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 80149c6:	4b2a      	ldr	r3, [pc, #168]	; (8014a70 <vTaskDelayUntil+0xf4>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d00b      	beq.n	80149e6 <vTaskDelayUntil+0x6a>
 80149ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d2:	b672      	cpsid	i
 80149d4:	f383 8811 	msr	BASEPRI, r3
 80149d8:	f3bf 8f6f 	isb	sy
 80149dc:	f3bf 8f4f 	dsb	sy
 80149e0:	b662      	cpsie	i
 80149e2:	60fb      	str	r3, [r7, #12]
 80149e4:	e7fe      	b.n	80149e4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80149e6:	f000 f8e7 	bl	8014bb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80149ea:	4b22      	ldr	r3, [pc, #136]	; (8014a74 <vTaskDelayUntil+0xf8>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	683a      	ldr	r2, [r7, #0]
 80149f6:	4413      	add	r3, r2
 80149f8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	6a3a      	ldr	r2, [r7, #32]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d20b      	bcs.n	8014a1c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	69fa      	ldr	r2, [r7, #28]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d211      	bcs.n	8014a32 <vTaskDelayUntil+0xb6>
 8014a0e:	69fa      	ldr	r2, [r7, #28]
 8014a10:	6a3b      	ldr	r3, [r7, #32]
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d90d      	bls.n	8014a32 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8014a16:	2301      	movs	r3, #1
 8014a18:	627b      	str	r3, [r7, #36]	; 0x24
 8014a1a:	e00a      	b.n	8014a32 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	69fa      	ldr	r2, [r7, #28]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d303      	bcc.n	8014a2e <vTaskDelayUntil+0xb2>
 8014a26:	69fa      	ldr	r2, [r7, #28]
 8014a28:	6a3b      	ldr	r3, [r7, #32]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d901      	bls.n	8014a32 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8014a2e:	2301      	movs	r3, #1
 8014a30:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	69fa      	ldr	r2, [r7, #28]
 8014a36:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d006      	beq.n	8014a4c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8014a3e:	69fa      	ldr	r2, [r7, #28]
 8014a40:	6a3b      	ldr	r3, [r7, #32]
 8014a42:	1ad3      	subs	r3, r2, r3
 8014a44:	2100      	movs	r1, #0
 8014a46:	4618      	mov	r0, r3
 8014a48:	f000 fe4a 	bl	80156e0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8014a4c:	f000 f8c2 	bl	8014bd4 <xTaskResumeAll>
 8014a50:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d107      	bne.n	8014a68 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8014a58:	4b07      	ldr	r3, [pc, #28]	; (8014a78 <vTaskDelayUntil+0xfc>)
 8014a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a5e:	601a      	str	r2, [r3, #0]
 8014a60:	f3bf 8f4f 	dsb	sy
 8014a64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a68:	bf00      	nop
 8014a6a:	3728      	adds	r7, #40	; 0x28
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	20000f20 	.word	0x20000f20
 8014a74:	20000efc 	.word	0x20000efc
 8014a78:	e000ed04 	.word	0xe000ed04

08014a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014a84:	2300      	movs	r3, #0
 8014a86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d018      	beq.n	8014ac0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014a8e:	4b14      	ldr	r3, [pc, #80]	; (8014ae0 <vTaskDelay+0x64>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d00b      	beq.n	8014aae <vTaskDelay+0x32>
 8014a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9a:	b672      	cpsid	i
 8014a9c:	f383 8811 	msr	BASEPRI, r3
 8014aa0:	f3bf 8f6f 	isb	sy
 8014aa4:	f3bf 8f4f 	dsb	sy
 8014aa8:	b662      	cpsie	i
 8014aaa:	60bb      	str	r3, [r7, #8]
 8014aac:	e7fe      	b.n	8014aac <vTaskDelay+0x30>
			vTaskSuspendAll();
 8014aae:	f000 f883 	bl	8014bb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014ab2:	2100      	movs	r1, #0
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f000 fe13 	bl	80156e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014aba:	f000 f88b 	bl	8014bd4 <xTaskResumeAll>
 8014abe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d107      	bne.n	8014ad6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014ac6:	4b07      	ldr	r3, [pc, #28]	; (8014ae4 <vTaskDelay+0x68>)
 8014ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014acc:	601a      	str	r2, [r3, #0]
 8014ace:	f3bf 8f4f 	dsb	sy
 8014ad2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ad6:	bf00      	nop
 8014ad8:	3710      	adds	r7, #16
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	20000f20 	.word	0x20000f20
 8014ae4:	e000ed04 	.word	0xe000ed04

08014ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b08a      	sub	sp, #40	; 0x28
 8014aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014aee:	2300      	movs	r3, #0
 8014af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014af2:	2300      	movs	r3, #0
 8014af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014af6:	463a      	mov	r2, r7
 8014af8:	1d39      	adds	r1, r7, #4
 8014afa:	f107 0308 	add.w	r3, r7, #8
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7fe fbaa 	bl	8013258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014b04:	6839      	ldr	r1, [r7, #0]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	68ba      	ldr	r2, [r7, #8]
 8014b0a:	9202      	str	r2, [sp, #8]
 8014b0c:	9301      	str	r3, [sp, #4]
 8014b0e:	2300      	movs	r3, #0
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	2300      	movs	r3, #0
 8014b14:	460a      	mov	r2, r1
 8014b16:	4922      	ldr	r1, [pc, #136]	; (8014ba0 <vTaskStartScheduler+0xb8>)
 8014b18:	4822      	ldr	r0, [pc, #136]	; (8014ba4 <vTaskStartScheduler+0xbc>)
 8014b1a:	f7ff fd89 	bl	8014630 <xTaskCreateStatic>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	4b21      	ldr	r3, [pc, #132]	; (8014ba8 <vTaskStartScheduler+0xc0>)
 8014b22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014b24:	4b20      	ldr	r3, [pc, #128]	; (8014ba8 <vTaskStartScheduler+0xc0>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d002      	beq.n	8014b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	617b      	str	r3, [r7, #20]
 8014b30:	e001      	b.n	8014b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014b32:	2300      	movs	r3, #0
 8014b34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d102      	bne.n	8014b42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014b3c:	f000 fe24 	bl	8015788 <xTimerCreateTimerTask>
 8014b40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	d117      	bne.n	8014b78 <vTaskStartScheduler+0x90>
 8014b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4c:	b672      	cpsid	i
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	b662      	cpsie	i
 8014b5c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014b5e:	4b13      	ldr	r3, [pc, #76]	; (8014bac <vTaskStartScheduler+0xc4>)
 8014b60:	f04f 32ff 	mov.w	r2, #4294967295
 8014b64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014b66:	4b12      	ldr	r3, [pc, #72]	; (8014bb0 <vTaskStartScheduler+0xc8>)
 8014b68:	2201      	movs	r2, #1
 8014b6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014b6c:	4b11      	ldr	r3, [pc, #68]	; (8014bb4 <vTaskStartScheduler+0xcc>)
 8014b6e:	2200      	movs	r2, #0
 8014b70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014b72:	f001 f9ed 	bl	8015f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014b76:	e00f      	b.n	8014b98 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b7e:	d10b      	bne.n	8014b98 <vTaskStartScheduler+0xb0>
 8014b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b84:	b672      	cpsid	i
 8014b86:	f383 8811 	msr	BASEPRI, r3
 8014b8a:	f3bf 8f6f 	isb	sy
 8014b8e:	f3bf 8f4f 	dsb	sy
 8014b92:	b662      	cpsie	i
 8014b94:	60fb      	str	r3, [r7, #12]
 8014b96:	e7fe      	b.n	8014b96 <vTaskStartScheduler+0xae>
}
 8014b98:	bf00      	nop
 8014b9a:	3718      	adds	r7, #24
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}
 8014ba0:	0801a2b4 	.word	0x0801a2b4
 8014ba4:	080151fd 	.word	0x080151fd
 8014ba8:	20000f1c 	.word	0x20000f1c
 8014bac:	20000f18 	.word	0x20000f18
 8014bb0:	20000f04 	.word	0x20000f04
 8014bb4:	20000efc 	.word	0x20000efc

08014bb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014bb8:	b480      	push	{r7}
 8014bba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014bbc:	4b04      	ldr	r3, [pc, #16]	; (8014bd0 <vTaskSuspendAll+0x18>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	4a03      	ldr	r2, [pc, #12]	; (8014bd0 <vTaskSuspendAll+0x18>)
 8014bc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014bc6:	bf00      	nop
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr
 8014bd0:	20000f20 	.word	0x20000f20

08014bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b084      	sub	sp, #16
 8014bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014bde:	2300      	movs	r3, #0
 8014be0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014be2:	4b42      	ldr	r3, [pc, #264]	; (8014cec <xTaskResumeAll+0x118>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d10b      	bne.n	8014c02 <xTaskResumeAll+0x2e>
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	b672      	cpsid	i
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	b662      	cpsie	i
 8014bfe:	603b      	str	r3, [r7, #0]
 8014c00:	e7fe      	b.n	8014c00 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014c02:	f001 fa21 	bl	8016048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014c06:	4b39      	ldr	r3, [pc, #228]	; (8014cec <xTaskResumeAll+0x118>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	4a37      	ldr	r2, [pc, #220]	; (8014cec <xTaskResumeAll+0x118>)
 8014c0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c10:	4b36      	ldr	r3, [pc, #216]	; (8014cec <xTaskResumeAll+0x118>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d162      	bne.n	8014cde <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c18:	4b35      	ldr	r3, [pc, #212]	; (8014cf0 <xTaskResumeAll+0x11c>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d05e      	beq.n	8014cde <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c20:	e02f      	b.n	8014c82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c22:	4b34      	ldr	r3, [pc, #208]	; (8014cf4 <xTaskResumeAll+0x120>)
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	3318      	adds	r3, #24
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7fe fbd0 	bl	80133d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	3304      	adds	r3, #4
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7fe fbcb 	bl	80133d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c42:	4b2d      	ldr	r3, [pc, #180]	; (8014cf8 <xTaskResumeAll+0x124>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d903      	bls.n	8014c52 <xTaskResumeAll+0x7e>
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c4e:	4a2a      	ldr	r2, [pc, #168]	; (8014cf8 <xTaskResumeAll+0x124>)
 8014c50:	6013      	str	r3, [r2, #0]
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c56:	4613      	mov	r3, r2
 8014c58:	009b      	lsls	r3, r3, #2
 8014c5a:	4413      	add	r3, r2
 8014c5c:	009b      	lsls	r3, r3, #2
 8014c5e:	4a27      	ldr	r2, [pc, #156]	; (8014cfc <xTaskResumeAll+0x128>)
 8014c60:	441a      	add	r2, r3
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	3304      	adds	r3, #4
 8014c66:	4619      	mov	r1, r3
 8014c68:	4610      	mov	r0, r2
 8014c6a:	f7fe fb56 	bl	801331a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c72:	4b23      	ldr	r3, [pc, #140]	; (8014d00 <xTaskResumeAll+0x12c>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d302      	bcc.n	8014c82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8014c7c:	4b21      	ldr	r3, [pc, #132]	; (8014d04 <xTaskResumeAll+0x130>)
 8014c7e:	2201      	movs	r2, #1
 8014c80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c82:	4b1c      	ldr	r3, [pc, #112]	; (8014cf4 <xTaskResumeAll+0x120>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d1cb      	bne.n	8014c22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d001      	beq.n	8014c94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014c90:	f000 fb68 	bl	8015364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014c94:	4b1c      	ldr	r3, [pc, #112]	; (8014d08 <xTaskResumeAll+0x134>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d010      	beq.n	8014cc2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014ca0:	f000 f858 	bl	8014d54 <xTaskIncrementTick>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d002      	beq.n	8014cb0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8014caa:	4b16      	ldr	r3, [pc, #88]	; (8014d04 <xTaskResumeAll+0x130>)
 8014cac:	2201      	movs	r2, #1
 8014cae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d1f1      	bne.n	8014ca0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8014cbc:	4b12      	ldr	r3, [pc, #72]	; (8014d08 <xTaskResumeAll+0x134>)
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014cc2:	4b10      	ldr	r3, [pc, #64]	; (8014d04 <xTaskResumeAll+0x130>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d009      	beq.n	8014cde <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014cce:	4b0f      	ldr	r3, [pc, #60]	; (8014d0c <xTaskResumeAll+0x138>)
 8014cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cd4:	601a      	str	r2, [r3, #0]
 8014cd6:	f3bf 8f4f 	dsb	sy
 8014cda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014cde:	f001 f9e5 	bl	80160ac <vPortExitCritical>

	return xAlreadyYielded;
 8014ce2:	68bb      	ldr	r3, [r7, #8]
}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3710      	adds	r7, #16
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}
 8014cec:	20000f20 	.word	0x20000f20
 8014cf0:	20000ef8 	.word	0x20000ef8
 8014cf4:	20000eb8 	.word	0x20000eb8
 8014cf8:	20000f00 	.word	0x20000f00
 8014cfc:	20000a28 	.word	0x20000a28
 8014d00:	20000a24 	.word	0x20000a24
 8014d04:	20000f0c 	.word	0x20000f0c
 8014d08:	20000f08 	.word	0x20000f08
 8014d0c:	e000ed04 	.word	0xe000ed04

08014d10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014d16:	4b05      	ldr	r3, [pc, #20]	; (8014d2c <xTaskGetTickCount+0x1c>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014d1c:	687b      	ldr	r3, [r7, #4]
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr
 8014d2a:	bf00      	nop
 8014d2c:	20000efc 	.word	0x20000efc

08014d30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014d36:	f001 fa67 	bl	8016208 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014d3e:	4b04      	ldr	r3, [pc, #16]	; (8014d50 <xTaskGetTickCountFromISR+0x20>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014d44:	683b      	ldr	r3, [r7, #0]
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3708      	adds	r7, #8
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	20000efc 	.word	0x20000efc

08014d54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b086      	sub	sp, #24
 8014d58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d5e:	4b4f      	ldr	r3, [pc, #316]	; (8014e9c <xTaskIncrementTick+0x148>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	f040 808a 	bne.w	8014e7c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d68:	4b4d      	ldr	r3, [pc, #308]	; (8014ea0 <xTaskIncrementTick+0x14c>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	3301      	adds	r3, #1
 8014d6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014d70:	4a4b      	ldr	r2, [pc, #300]	; (8014ea0 <xTaskIncrementTick+0x14c>)
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d121      	bne.n	8014dc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014d7c:	4b49      	ldr	r3, [pc, #292]	; (8014ea4 <xTaskIncrementTick+0x150>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d00b      	beq.n	8014d9e <xTaskIncrementTick+0x4a>
 8014d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8a:	b672      	cpsid	i
 8014d8c:	f383 8811 	msr	BASEPRI, r3
 8014d90:	f3bf 8f6f 	isb	sy
 8014d94:	f3bf 8f4f 	dsb	sy
 8014d98:	b662      	cpsie	i
 8014d9a:	603b      	str	r3, [r7, #0]
 8014d9c:	e7fe      	b.n	8014d9c <xTaskIncrementTick+0x48>
 8014d9e:	4b41      	ldr	r3, [pc, #260]	; (8014ea4 <xTaskIncrementTick+0x150>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	60fb      	str	r3, [r7, #12]
 8014da4:	4b40      	ldr	r3, [pc, #256]	; (8014ea8 <xTaskIncrementTick+0x154>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	4a3e      	ldr	r2, [pc, #248]	; (8014ea4 <xTaskIncrementTick+0x150>)
 8014daa:	6013      	str	r3, [r2, #0]
 8014dac:	4a3e      	ldr	r2, [pc, #248]	; (8014ea8 <xTaskIncrementTick+0x154>)
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	6013      	str	r3, [r2, #0]
 8014db2:	4b3e      	ldr	r3, [pc, #248]	; (8014eac <xTaskIncrementTick+0x158>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	3301      	adds	r3, #1
 8014db8:	4a3c      	ldr	r2, [pc, #240]	; (8014eac <xTaskIncrementTick+0x158>)
 8014dba:	6013      	str	r3, [r2, #0]
 8014dbc:	f000 fad2 	bl	8015364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014dc0:	4b3b      	ldr	r3, [pc, #236]	; (8014eb0 <xTaskIncrementTick+0x15c>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	693a      	ldr	r2, [r7, #16]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d349      	bcc.n	8014e5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014dca:	4b36      	ldr	r3, [pc, #216]	; (8014ea4 <xTaskIncrementTick+0x150>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d104      	bne.n	8014dde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dd4:	4b36      	ldr	r3, [pc, #216]	; (8014eb0 <xTaskIncrementTick+0x15c>)
 8014dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8014dda:	601a      	str	r2, [r3, #0]
					break;
 8014ddc:	e03f      	b.n	8014e5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dde:	4b31      	ldr	r3, [pc, #196]	; (8014ea4 <xTaskIncrementTick+0x150>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014dee:	693a      	ldr	r2, [r7, #16]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d203      	bcs.n	8014dfe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014df6:	4a2e      	ldr	r2, [pc, #184]	; (8014eb0 <xTaskIncrementTick+0x15c>)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014dfc:	e02f      	b.n	8014e5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014dfe:	68bb      	ldr	r3, [r7, #8]
 8014e00:	3304      	adds	r3, #4
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7fe fae6 	bl	80133d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d004      	beq.n	8014e1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	3318      	adds	r3, #24
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7fe fadd 	bl	80133d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e1e:	4b25      	ldr	r3, [pc, #148]	; (8014eb4 <xTaskIncrementTick+0x160>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d903      	bls.n	8014e2e <xTaskIncrementTick+0xda>
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e2a:	4a22      	ldr	r2, [pc, #136]	; (8014eb4 <xTaskIncrementTick+0x160>)
 8014e2c:	6013      	str	r3, [r2, #0]
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e32:	4613      	mov	r3, r2
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	4413      	add	r3, r2
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	4a1f      	ldr	r2, [pc, #124]	; (8014eb8 <xTaskIncrementTick+0x164>)
 8014e3c:	441a      	add	r2, r3
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	3304      	adds	r3, #4
 8014e42:	4619      	mov	r1, r3
 8014e44:	4610      	mov	r0, r2
 8014e46:	f7fe fa68 	bl	801331a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e4e:	4b1b      	ldr	r3, [pc, #108]	; (8014ebc <xTaskIncrementTick+0x168>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d3b8      	bcc.n	8014dca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e5c:	e7b5      	b.n	8014dca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e5e:	4b17      	ldr	r3, [pc, #92]	; (8014ebc <xTaskIncrementTick+0x168>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e64:	4914      	ldr	r1, [pc, #80]	; (8014eb8 <xTaskIncrementTick+0x164>)
 8014e66:	4613      	mov	r3, r2
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	4413      	add	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	440b      	add	r3, r1
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	2b01      	cmp	r3, #1
 8014e74:	d907      	bls.n	8014e86 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8014e76:	2301      	movs	r3, #1
 8014e78:	617b      	str	r3, [r7, #20]
 8014e7a:	e004      	b.n	8014e86 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014e7c:	4b10      	ldr	r3, [pc, #64]	; (8014ec0 <xTaskIncrementTick+0x16c>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	3301      	adds	r3, #1
 8014e82:	4a0f      	ldr	r2, [pc, #60]	; (8014ec0 <xTaskIncrementTick+0x16c>)
 8014e84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014e86:	4b0f      	ldr	r3, [pc, #60]	; (8014ec4 <xTaskIncrementTick+0x170>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d001      	beq.n	8014e92 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8014e8e:	2301      	movs	r3, #1
 8014e90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014e92:	697b      	ldr	r3, [r7, #20]
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3718      	adds	r7, #24
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	20000f20 	.word	0x20000f20
 8014ea0:	20000efc 	.word	0x20000efc
 8014ea4:	20000eb0 	.word	0x20000eb0
 8014ea8:	20000eb4 	.word	0x20000eb4
 8014eac:	20000f10 	.word	0x20000f10
 8014eb0:	20000f18 	.word	0x20000f18
 8014eb4:	20000f00 	.word	0x20000f00
 8014eb8:	20000a28 	.word	0x20000a28
 8014ebc:	20000a24 	.word	0x20000a24
 8014ec0:	20000f08 	.word	0x20000f08
 8014ec4:	20000f0c 	.word	0x20000f0c

08014ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b085      	sub	sp, #20
 8014ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014ece:	4b28      	ldr	r3, [pc, #160]	; (8014f70 <vTaskSwitchContext+0xa8>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d003      	beq.n	8014ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014ed6:	4b27      	ldr	r3, [pc, #156]	; (8014f74 <vTaskSwitchContext+0xac>)
 8014ed8:	2201      	movs	r2, #1
 8014eda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014edc:	e042      	b.n	8014f64 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8014ede:	4b25      	ldr	r3, [pc, #148]	; (8014f74 <vTaskSwitchContext+0xac>)
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ee4:	4b24      	ldr	r3, [pc, #144]	; (8014f78 <vTaskSwitchContext+0xb0>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	60fb      	str	r3, [r7, #12]
 8014eea:	e011      	b.n	8014f10 <vTaskSwitchContext+0x48>
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d10b      	bne.n	8014f0a <vTaskSwitchContext+0x42>
 8014ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef6:	b672      	cpsid	i
 8014ef8:	f383 8811 	msr	BASEPRI, r3
 8014efc:	f3bf 8f6f 	isb	sy
 8014f00:	f3bf 8f4f 	dsb	sy
 8014f04:	b662      	cpsie	i
 8014f06:	607b      	str	r3, [r7, #4]
 8014f08:	e7fe      	b.n	8014f08 <vTaskSwitchContext+0x40>
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	3b01      	subs	r3, #1
 8014f0e:	60fb      	str	r3, [r7, #12]
 8014f10:	491a      	ldr	r1, [pc, #104]	; (8014f7c <vTaskSwitchContext+0xb4>)
 8014f12:	68fa      	ldr	r2, [r7, #12]
 8014f14:	4613      	mov	r3, r2
 8014f16:	009b      	lsls	r3, r3, #2
 8014f18:	4413      	add	r3, r2
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	440b      	add	r3, r1
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d0e3      	beq.n	8014eec <vTaskSwitchContext+0x24>
 8014f24:	68fa      	ldr	r2, [r7, #12]
 8014f26:	4613      	mov	r3, r2
 8014f28:	009b      	lsls	r3, r3, #2
 8014f2a:	4413      	add	r3, r2
 8014f2c:	009b      	lsls	r3, r3, #2
 8014f2e:	4a13      	ldr	r2, [pc, #76]	; (8014f7c <vTaskSwitchContext+0xb4>)
 8014f30:	4413      	add	r3, r2
 8014f32:	60bb      	str	r3, [r7, #8]
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	685b      	ldr	r3, [r3, #4]
 8014f38:	685a      	ldr	r2, [r3, #4]
 8014f3a:	68bb      	ldr	r3, [r7, #8]
 8014f3c:	605a      	str	r2, [r3, #4]
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	685a      	ldr	r2, [r3, #4]
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	3308      	adds	r3, #8
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d104      	bne.n	8014f54 <vTaskSwitchContext+0x8c>
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	685b      	ldr	r3, [r3, #4]
 8014f4e:	685a      	ldr	r2, [r3, #4]
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	605a      	str	r2, [r3, #4]
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	68db      	ldr	r3, [r3, #12]
 8014f5a:	4a09      	ldr	r2, [pc, #36]	; (8014f80 <vTaskSwitchContext+0xb8>)
 8014f5c:	6013      	str	r3, [r2, #0]
 8014f5e:	4a06      	ldr	r2, [pc, #24]	; (8014f78 <vTaskSwitchContext+0xb0>)
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	6013      	str	r3, [r2, #0]
}
 8014f64:	bf00      	nop
 8014f66:	3714      	adds	r7, #20
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6e:	4770      	bx	lr
 8014f70:	20000f20 	.word	0x20000f20
 8014f74:	20000f0c 	.word	0x20000f0c
 8014f78:	20000f00 	.word	0x20000f00
 8014f7c:	20000a28 	.word	0x20000a28
 8014f80:	20000a24 	.word	0x20000a24

08014f84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d10b      	bne.n	8014fac <vTaskPlaceOnEventList+0x28>
 8014f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f98:	b672      	cpsid	i
 8014f9a:	f383 8811 	msr	BASEPRI, r3
 8014f9e:	f3bf 8f6f 	isb	sy
 8014fa2:	f3bf 8f4f 	dsb	sy
 8014fa6:	b662      	cpsie	i
 8014fa8:	60fb      	str	r3, [r7, #12]
 8014faa:	e7fe      	b.n	8014faa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fac:	4b07      	ldr	r3, [pc, #28]	; (8014fcc <vTaskPlaceOnEventList+0x48>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	3318      	adds	r3, #24
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f7fe f9d4 	bl	8013362 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fba:	2101      	movs	r1, #1
 8014fbc:	6838      	ldr	r0, [r7, #0]
 8014fbe:	f000 fb8f 	bl	80156e0 <prvAddCurrentTaskToDelayedList>
}
 8014fc2:	bf00      	nop
 8014fc4:	3710      	adds	r7, #16
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	20000a24 	.word	0x20000a24

08014fd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b086      	sub	sp, #24
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	60f8      	str	r0, [r7, #12]
 8014fd8:	60b9      	str	r1, [r7, #8]
 8014fda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d10b      	bne.n	8014ffa <vTaskPlaceOnEventListRestricted+0x2a>
 8014fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe6:	b672      	cpsid	i
 8014fe8:	f383 8811 	msr	BASEPRI, r3
 8014fec:	f3bf 8f6f 	isb	sy
 8014ff0:	f3bf 8f4f 	dsb	sy
 8014ff4:	b662      	cpsie	i
 8014ff6:	617b      	str	r3, [r7, #20]
 8014ff8:	e7fe      	b.n	8014ff8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014ffa:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <vTaskPlaceOnEventListRestricted+0x54>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	3318      	adds	r3, #24
 8015000:	4619      	mov	r1, r3
 8015002:	68f8      	ldr	r0, [r7, #12]
 8015004:	f7fe f989 	bl	801331a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d002      	beq.n	8015014 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801500e:	f04f 33ff 	mov.w	r3, #4294967295
 8015012:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015014:	6879      	ldr	r1, [r7, #4]
 8015016:	68b8      	ldr	r0, [r7, #8]
 8015018:	f000 fb62 	bl	80156e0 <prvAddCurrentTaskToDelayedList>
	}
 801501c:	bf00      	nop
 801501e:	3718      	adds	r7, #24
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	20000a24 	.word	0x20000a24

08015028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b086      	sub	sp, #24
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d10b      	bne.n	8015056 <xTaskRemoveFromEventList+0x2e>
 801503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015042:	b672      	cpsid	i
 8015044:	f383 8811 	msr	BASEPRI, r3
 8015048:	f3bf 8f6f 	isb	sy
 801504c:	f3bf 8f4f 	dsb	sy
 8015050:	b662      	cpsie	i
 8015052:	60fb      	str	r3, [r7, #12]
 8015054:	e7fe      	b.n	8015054 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	3318      	adds	r3, #24
 801505a:	4618      	mov	r0, r3
 801505c:	f7fe f9ba 	bl	80133d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015060:	4b1d      	ldr	r3, [pc, #116]	; (80150d8 <xTaskRemoveFromEventList+0xb0>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d11d      	bne.n	80150a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015068:	693b      	ldr	r3, [r7, #16]
 801506a:	3304      	adds	r3, #4
 801506c:	4618      	mov	r0, r3
 801506e:	f7fe f9b1 	bl	80133d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015076:	4b19      	ldr	r3, [pc, #100]	; (80150dc <xTaskRemoveFromEventList+0xb4>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	429a      	cmp	r2, r3
 801507c:	d903      	bls.n	8015086 <xTaskRemoveFromEventList+0x5e>
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015082:	4a16      	ldr	r2, [pc, #88]	; (80150dc <xTaskRemoveFromEventList+0xb4>)
 8015084:	6013      	str	r3, [r2, #0]
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801508a:	4613      	mov	r3, r2
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	4413      	add	r3, r2
 8015090:	009b      	lsls	r3, r3, #2
 8015092:	4a13      	ldr	r2, [pc, #76]	; (80150e0 <xTaskRemoveFromEventList+0xb8>)
 8015094:	441a      	add	r2, r3
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	3304      	adds	r3, #4
 801509a:	4619      	mov	r1, r3
 801509c:	4610      	mov	r0, r2
 801509e:	f7fe f93c 	bl	801331a <vListInsertEnd>
 80150a2:	e005      	b.n	80150b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	3318      	adds	r3, #24
 80150a8:	4619      	mov	r1, r3
 80150aa:	480e      	ldr	r0, [pc, #56]	; (80150e4 <xTaskRemoveFromEventList+0xbc>)
 80150ac:	f7fe f935 	bl	801331a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150b4:	4b0c      	ldr	r3, [pc, #48]	; (80150e8 <xTaskRemoveFromEventList+0xc0>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d905      	bls.n	80150ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80150be:	2301      	movs	r3, #1
 80150c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80150c2:	4b0a      	ldr	r3, [pc, #40]	; (80150ec <xTaskRemoveFromEventList+0xc4>)
 80150c4:	2201      	movs	r2, #1
 80150c6:	601a      	str	r2, [r3, #0]
 80150c8:	e001      	b.n	80150ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80150ca:	2300      	movs	r3, #0
 80150cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80150ce:	697b      	ldr	r3, [r7, #20]
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3718      	adds	r7, #24
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	20000f20 	.word	0x20000f20
 80150dc:	20000f00 	.word	0x20000f00
 80150e0:	20000a28 	.word	0x20000a28
 80150e4:	20000eb8 	.word	0x20000eb8
 80150e8:	20000a24 	.word	0x20000a24
 80150ec:	20000f0c 	.word	0x20000f0c

080150f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80150f0:	b480      	push	{r7}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80150f8:	4b06      	ldr	r3, [pc, #24]	; (8015114 <vTaskInternalSetTimeOutState+0x24>)
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015100:	4b05      	ldr	r3, [pc, #20]	; (8015118 <vTaskInternalSetTimeOutState+0x28>)
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	605a      	str	r2, [r3, #4]
}
 8015108:	bf00      	nop
 801510a:	370c      	adds	r7, #12
 801510c:	46bd      	mov	sp, r7
 801510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015112:	4770      	bx	lr
 8015114:	20000f10 	.word	0x20000f10
 8015118:	20000efc 	.word	0x20000efc

0801511c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b088      	sub	sp, #32
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
 8015124:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d10b      	bne.n	8015144 <xTaskCheckForTimeOut+0x28>
 801512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015130:	b672      	cpsid	i
 8015132:	f383 8811 	msr	BASEPRI, r3
 8015136:	f3bf 8f6f 	isb	sy
 801513a:	f3bf 8f4f 	dsb	sy
 801513e:	b662      	cpsie	i
 8015140:	613b      	str	r3, [r7, #16]
 8015142:	e7fe      	b.n	8015142 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d10b      	bne.n	8015162 <xTaskCheckForTimeOut+0x46>
 801514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801514e:	b672      	cpsid	i
 8015150:	f383 8811 	msr	BASEPRI, r3
 8015154:	f3bf 8f6f 	isb	sy
 8015158:	f3bf 8f4f 	dsb	sy
 801515c:	b662      	cpsie	i
 801515e:	60fb      	str	r3, [r7, #12]
 8015160:	e7fe      	b.n	8015160 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015162:	f000 ff71 	bl	8016048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015166:	4b1d      	ldr	r3, [pc, #116]	; (80151dc <xTaskCheckForTimeOut+0xc0>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	685b      	ldr	r3, [r3, #4]
 8015170:	69ba      	ldr	r2, [r7, #24]
 8015172:	1ad3      	subs	r3, r2, r3
 8015174:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801517e:	d102      	bne.n	8015186 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015180:	2300      	movs	r3, #0
 8015182:	61fb      	str	r3, [r7, #28]
 8015184:	e023      	b.n	80151ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	4b15      	ldr	r3, [pc, #84]	; (80151e0 <xTaskCheckForTimeOut+0xc4>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	429a      	cmp	r2, r3
 8015190:	d007      	beq.n	80151a2 <xTaskCheckForTimeOut+0x86>
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	685b      	ldr	r3, [r3, #4]
 8015196:	69ba      	ldr	r2, [r7, #24]
 8015198:	429a      	cmp	r2, r3
 801519a:	d302      	bcc.n	80151a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801519c:	2301      	movs	r3, #1
 801519e:	61fb      	str	r3, [r7, #28]
 80151a0:	e015      	b.n	80151ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	697a      	ldr	r2, [r7, #20]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d20b      	bcs.n	80151c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	1ad2      	subs	r2, r2, r3
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	f7ff ff99 	bl	80150f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80151be:	2300      	movs	r3, #0
 80151c0:	61fb      	str	r3, [r7, #28]
 80151c2:	e004      	b.n	80151ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	2200      	movs	r2, #0
 80151c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80151ca:	2301      	movs	r3, #1
 80151cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80151ce:	f000 ff6d 	bl	80160ac <vPortExitCritical>

	return xReturn;
 80151d2:	69fb      	ldr	r3, [r7, #28]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3720      	adds	r7, #32
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	20000efc 	.word	0x20000efc
 80151e0:	20000f10 	.word	0x20000f10

080151e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80151e4:	b480      	push	{r7}
 80151e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80151e8:	4b03      	ldr	r3, [pc, #12]	; (80151f8 <vTaskMissedYield+0x14>)
 80151ea:	2201      	movs	r2, #1
 80151ec:	601a      	str	r2, [r3, #0]
}
 80151ee:	bf00      	nop
 80151f0:	46bd      	mov	sp, r7
 80151f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f6:	4770      	bx	lr
 80151f8:	20000f0c 	.word	0x20000f0c

080151fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b082      	sub	sp, #8
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015204:	f000 f852 	bl	80152ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015208:	4b06      	ldr	r3, [pc, #24]	; (8015224 <prvIdleTask+0x28>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	2b01      	cmp	r3, #1
 801520e:	d9f9      	bls.n	8015204 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015210:	4b05      	ldr	r3, [pc, #20]	; (8015228 <prvIdleTask+0x2c>)
 8015212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015216:	601a      	str	r2, [r3, #0]
 8015218:	f3bf 8f4f 	dsb	sy
 801521c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015220:	e7f0      	b.n	8015204 <prvIdleTask+0x8>
 8015222:	bf00      	nop
 8015224:	20000a28 	.word	0x20000a28
 8015228:	e000ed04 	.word	0xe000ed04

0801522c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015232:	2300      	movs	r3, #0
 8015234:	607b      	str	r3, [r7, #4]
 8015236:	e00c      	b.n	8015252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	4613      	mov	r3, r2
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	4413      	add	r3, r2
 8015240:	009b      	lsls	r3, r3, #2
 8015242:	4a12      	ldr	r2, [pc, #72]	; (801528c <prvInitialiseTaskLists+0x60>)
 8015244:	4413      	add	r3, r2
 8015246:	4618      	mov	r0, r3
 8015248:	f7fe f83a 	bl	80132c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	3301      	adds	r3, #1
 8015250:	607b      	str	r3, [r7, #4]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2b37      	cmp	r3, #55	; 0x37
 8015256:	d9ef      	bls.n	8015238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015258:	480d      	ldr	r0, [pc, #52]	; (8015290 <prvInitialiseTaskLists+0x64>)
 801525a:	f7fe f831 	bl	80132c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801525e:	480d      	ldr	r0, [pc, #52]	; (8015294 <prvInitialiseTaskLists+0x68>)
 8015260:	f7fe f82e 	bl	80132c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015264:	480c      	ldr	r0, [pc, #48]	; (8015298 <prvInitialiseTaskLists+0x6c>)
 8015266:	f7fe f82b 	bl	80132c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801526a:	480c      	ldr	r0, [pc, #48]	; (801529c <prvInitialiseTaskLists+0x70>)
 801526c:	f7fe f828 	bl	80132c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015270:	480b      	ldr	r0, [pc, #44]	; (80152a0 <prvInitialiseTaskLists+0x74>)
 8015272:	f7fe f825 	bl	80132c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015276:	4b0b      	ldr	r3, [pc, #44]	; (80152a4 <prvInitialiseTaskLists+0x78>)
 8015278:	4a05      	ldr	r2, [pc, #20]	; (8015290 <prvInitialiseTaskLists+0x64>)
 801527a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801527c:	4b0a      	ldr	r3, [pc, #40]	; (80152a8 <prvInitialiseTaskLists+0x7c>)
 801527e:	4a05      	ldr	r2, [pc, #20]	; (8015294 <prvInitialiseTaskLists+0x68>)
 8015280:	601a      	str	r2, [r3, #0]
}
 8015282:	bf00      	nop
 8015284:	3708      	adds	r7, #8
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	20000a28 	.word	0x20000a28
 8015290:	20000e88 	.word	0x20000e88
 8015294:	20000e9c 	.word	0x20000e9c
 8015298:	20000eb8 	.word	0x20000eb8
 801529c:	20000ecc 	.word	0x20000ecc
 80152a0:	20000ee4 	.word	0x20000ee4
 80152a4:	20000eb0 	.word	0x20000eb0
 80152a8:	20000eb4 	.word	0x20000eb4

080152ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80152b2:	e019      	b.n	80152e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80152b4:	f000 fec8 	bl	8016048 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152b8:	4b0f      	ldr	r3, [pc, #60]	; (80152f8 <prvCheckTasksWaitingTermination+0x4c>)
 80152ba:	68db      	ldr	r3, [r3, #12]
 80152bc:	68db      	ldr	r3, [r3, #12]
 80152be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	3304      	adds	r3, #4
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7fe f885 	bl	80133d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80152ca:	4b0c      	ldr	r3, [pc, #48]	; (80152fc <prvCheckTasksWaitingTermination+0x50>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	3b01      	subs	r3, #1
 80152d0:	4a0a      	ldr	r2, [pc, #40]	; (80152fc <prvCheckTasksWaitingTermination+0x50>)
 80152d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80152d4:	4b0a      	ldr	r3, [pc, #40]	; (8015300 <prvCheckTasksWaitingTermination+0x54>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	3b01      	subs	r3, #1
 80152da:	4a09      	ldr	r2, [pc, #36]	; (8015300 <prvCheckTasksWaitingTermination+0x54>)
 80152dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80152de:	f000 fee5 	bl	80160ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	f000 f80e 	bl	8015304 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80152e8:	4b05      	ldr	r3, [pc, #20]	; (8015300 <prvCheckTasksWaitingTermination+0x54>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d1e1      	bne.n	80152b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80152f0:	bf00      	nop
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	20000ecc 	.word	0x20000ecc
 80152fc:	20000ef8 	.word	0x20000ef8
 8015300:	20000ee0 	.word	0x20000ee0

08015304 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015304:	b580      	push	{r7, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015312:	2b00      	cmp	r3, #0
 8015314:	d108      	bne.n	8015328 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801531a:	4618      	mov	r0, r3
 801531c:	f001 f87e 	bl	801641c <vPortFree>
				vPortFree( pxTCB );
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f001 f87b 	bl	801641c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015326:	e019      	b.n	801535c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801532e:	2b01      	cmp	r3, #1
 8015330:	d103      	bne.n	801533a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f001 f872 	bl	801641c <vPortFree>
	}
 8015338:	e010      	b.n	801535c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015340:	2b02      	cmp	r3, #2
 8015342:	d00b      	beq.n	801535c <prvDeleteTCB+0x58>
 8015344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015348:	b672      	cpsid	i
 801534a:	f383 8811 	msr	BASEPRI, r3
 801534e:	f3bf 8f6f 	isb	sy
 8015352:	f3bf 8f4f 	dsb	sy
 8015356:	b662      	cpsie	i
 8015358:	60fb      	str	r3, [r7, #12]
 801535a:	e7fe      	b.n	801535a <prvDeleteTCB+0x56>
	}
 801535c:	bf00      	nop
 801535e:	3710      	adds	r7, #16
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}

08015364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015364:	b480      	push	{r7}
 8015366:	b083      	sub	sp, #12
 8015368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801536a:	4b0c      	ldr	r3, [pc, #48]	; (801539c <prvResetNextTaskUnblockTime+0x38>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d104      	bne.n	801537e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015374:	4b0a      	ldr	r3, [pc, #40]	; (80153a0 <prvResetNextTaskUnblockTime+0x3c>)
 8015376:	f04f 32ff 	mov.w	r2, #4294967295
 801537a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801537c:	e008      	b.n	8015390 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801537e:	4b07      	ldr	r3, [pc, #28]	; (801539c <prvResetNextTaskUnblockTime+0x38>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	68db      	ldr	r3, [r3, #12]
 8015384:	68db      	ldr	r3, [r3, #12]
 8015386:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	685b      	ldr	r3, [r3, #4]
 801538c:	4a04      	ldr	r2, [pc, #16]	; (80153a0 <prvResetNextTaskUnblockTime+0x3c>)
 801538e:	6013      	str	r3, [r2, #0]
}
 8015390:	bf00      	nop
 8015392:	370c      	adds	r7, #12
 8015394:	46bd      	mov	sp, r7
 8015396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539a:	4770      	bx	lr
 801539c:	20000eb0 	.word	0x20000eb0
 80153a0:	20000f18 	.word	0x20000f18

080153a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80153a4:	b480      	push	{r7}
 80153a6:	b083      	sub	sp, #12
 80153a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80153aa:	4b05      	ldr	r3, [pc, #20]	; (80153c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80153b0:	687b      	ldr	r3, [r7, #4]
	}
 80153b2:	4618      	mov	r0, r3
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr
 80153be:	bf00      	nop
 80153c0:	20000a24 	.word	0x20000a24

080153c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80153ca:	4b0b      	ldr	r3, [pc, #44]	; (80153f8 <xTaskGetSchedulerState+0x34>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d102      	bne.n	80153d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80153d2:	2301      	movs	r3, #1
 80153d4:	607b      	str	r3, [r7, #4]
 80153d6:	e008      	b.n	80153ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153d8:	4b08      	ldr	r3, [pc, #32]	; (80153fc <xTaskGetSchedulerState+0x38>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d102      	bne.n	80153e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80153e0:	2302      	movs	r3, #2
 80153e2:	607b      	str	r3, [r7, #4]
 80153e4:	e001      	b.n	80153ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80153e6:	2300      	movs	r3, #0
 80153e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80153ea:	687b      	ldr	r3, [r7, #4]
	}
 80153ec:	4618      	mov	r0, r3
 80153ee:	370c      	adds	r7, #12
 80153f0:	46bd      	mov	sp, r7
 80153f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f6:	4770      	bx	lr
 80153f8:	20000f04 	.word	0x20000f04
 80153fc:	20000f20 	.word	0x20000f20

08015400 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801540c:	2300      	movs	r3, #0
 801540e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d051      	beq.n	80154ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801541a:	4b2a      	ldr	r3, [pc, #168]	; (80154c4 <xTaskPriorityInherit+0xc4>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015420:	429a      	cmp	r2, r3
 8015422:	d241      	bcs.n	80154a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	699b      	ldr	r3, [r3, #24]
 8015428:	2b00      	cmp	r3, #0
 801542a:	db06      	blt.n	801543a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801542c:	4b25      	ldr	r3, [pc, #148]	; (80154c4 <xTaskPriorityInherit+0xc4>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	6959      	ldr	r1, [r3, #20]
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015442:	4613      	mov	r3, r2
 8015444:	009b      	lsls	r3, r3, #2
 8015446:	4413      	add	r3, r2
 8015448:	009b      	lsls	r3, r3, #2
 801544a:	4a1f      	ldr	r2, [pc, #124]	; (80154c8 <xTaskPriorityInherit+0xc8>)
 801544c:	4413      	add	r3, r2
 801544e:	4299      	cmp	r1, r3
 8015450:	d122      	bne.n	8015498 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	3304      	adds	r3, #4
 8015456:	4618      	mov	r0, r3
 8015458:	f7fd ffbc 	bl	80133d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801545c:	4b19      	ldr	r3, [pc, #100]	; (80154c4 <xTaskPriorityInherit+0xc4>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015466:	68bb      	ldr	r3, [r7, #8]
 8015468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801546a:	4b18      	ldr	r3, [pc, #96]	; (80154cc <xTaskPriorityInherit+0xcc>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	429a      	cmp	r2, r3
 8015470:	d903      	bls.n	801547a <xTaskPriorityInherit+0x7a>
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015476:	4a15      	ldr	r2, [pc, #84]	; (80154cc <xTaskPriorityInherit+0xcc>)
 8015478:	6013      	str	r3, [r2, #0]
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801547e:	4613      	mov	r3, r2
 8015480:	009b      	lsls	r3, r3, #2
 8015482:	4413      	add	r3, r2
 8015484:	009b      	lsls	r3, r3, #2
 8015486:	4a10      	ldr	r2, [pc, #64]	; (80154c8 <xTaskPriorityInherit+0xc8>)
 8015488:	441a      	add	r2, r3
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	3304      	adds	r3, #4
 801548e:	4619      	mov	r1, r3
 8015490:	4610      	mov	r0, r2
 8015492:	f7fd ff42 	bl	801331a <vListInsertEnd>
 8015496:	e004      	b.n	80154a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015498:	4b0a      	ldr	r3, [pc, #40]	; (80154c4 <xTaskPriorityInherit+0xc4>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80154a2:	2301      	movs	r3, #1
 80154a4:	60fb      	str	r3, [r7, #12]
 80154a6:	e008      	b.n	80154ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154ac:	4b05      	ldr	r3, [pc, #20]	; (80154c4 <xTaskPriorityInherit+0xc4>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b2:	429a      	cmp	r2, r3
 80154b4:	d201      	bcs.n	80154ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80154b6:	2301      	movs	r3, #1
 80154b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80154ba:	68fb      	ldr	r3, [r7, #12]
	}
 80154bc:	4618      	mov	r0, r3
 80154be:	3710      	adds	r7, #16
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}
 80154c4:	20000a24 	.word	0x20000a24
 80154c8:	20000a28 	.word	0x20000a28
 80154cc:	20000f00 	.word	0x20000f00

080154d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b086      	sub	sp, #24
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80154dc:	2300      	movs	r3, #0
 80154de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d058      	beq.n	8015598 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80154e6:	4b2f      	ldr	r3, [pc, #188]	; (80155a4 <xTaskPriorityDisinherit+0xd4>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	693a      	ldr	r2, [r7, #16]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d00b      	beq.n	8015508 <xTaskPriorityDisinherit+0x38>
 80154f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f4:	b672      	cpsid	i
 80154f6:	f383 8811 	msr	BASEPRI, r3
 80154fa:	f3bf 8f6f 	isb	sy
 80154fe:	f3bf 8f4f 	dsb	sy
 8015502:	b662      	cpsie	i
 8015504:	60fb      	str	r3, [r7, #12]
 8015506:	e7fe      	b.n	8015506 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801550c:	2b00      	cmp	r3, #0
 801550e:	d10b      	bne.n	8015528 <xTaskPriorityDisinherit+0x58>
 8015510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015514:	b672      	cpsid	i
 8015516:	f383 8811 	msr	BASEPRI, r3
 801551a:	f3bf 8f6f 	isb	sy
 801551e:	f3bf 8f4f 	dsb	sy
 8015522:	b662      	cpsie	i
 8015524:	60bb      	str	r3, [r7, #8]
 8015526:	e7fe      	b.n	8015526 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801552c:	1e5a      	subs	r2, r3, #1
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801553a:	429a      	cmp	r2, r3
 801553c:	d02c      	beq.n	8015598 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015542:	2b00      	cmp	r3, #0
 8015544:	d128      	bne.n	8015598 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	3304      	adds	r3, #4
 801554a:	4618      	mov	r0, r3
 801554c:	f7fd ff42 	bl	80133d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801555c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015568:	4b0f      	ldr	r3, [pc, #60]	; (80155a8 <xTaskPriorityDisinherit+0xd8>)
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	429a      	cmp	r2, r3
 801556e:	d903      	bls.n	8015578 <xTaskPriorityDisinherit+0xa8>
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015574:	4a0c      	ldr	r2, [pc, #48]	; (80155a8 <xTaskPriorityDisinherit+0xd8>)
 8015576:	6013      	str	r3, [r2, #0]
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801557c:	4613      	mov	r3, r2
 801557e:	009b      	lsls	r3, r3, #2
 8015580:	4413      	add	r3, r2
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	4a09      	ldr	r2, [pc, #36]	; (80155ac <xTaskPriorityDisinherit+0xdc>)
 8015586:	441a      	add	r2, r3
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	3304      	adds	r3, #4
 801558c:	4619      	mov	r1, r3
 801558e:	4610      	mov	r0, r2
 8015590:	f7fd fec3 	bl	801331a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015594:	2301      	movs	r3, #1
 8015596:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015598:	697b      	ldr	r3, [r7, #20]
	}
 801559a:	4618      	mov	r0, r3
 801559c:	3718      	adds	r7, #24
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	20000a24 	.word	0x20000a24
 80155a8:	20000f00 	.word	0x20000f00
 80155ac:	20000a28 	.word	0x20000a28

080155b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b088      	sub	sp, #32
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80155be:	2301      	movs	r3, #1
 80155c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d06c      	beq.n	80156a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d10b      	bne.n	80155e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80155d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155d4:	b672      	cpsid	i
 80155d6:	f383 8811 	msr	BASEPRI, r3
 80155da:	f3bf 8f6f 	isb	sy
 80155de:	f3bf 8f4f 	dsb	sy
 80155e2:	b662      	cpsie	i
 80155e4:	60fb      	str	r3, [r7, #12]
 80155e6:	e7fe      	b.n	80155e6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155ec:	683a      	ldr	r2, [r7, #0]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d902      	bls.n	80155f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	61fb      	str	r3, [r7, #28]
 80155f6:	e002      	b.n	80155fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80155f8:	69bb      	ldr	r3, [r7, #24]
 80155fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015602:	69fa      	ldr	r2, [r7, #28]
 8015604:	429a      	cmp	r2, r3
 8015606:	d04c      	beq.n	80156a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015608:	69bb      	ldr	r3, [r7, #24]
 801560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801560c:	697a      	ldr	r2, [r7, #20]
 801560e:	429a      	cmp	r2, r3
 8015610:	d147      	bne.n	80156a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015612:	4b26      	ldr	r3, [pc, #152]	; (80156ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	69ba      	ldr	r2, [r7, #24]
 8015618:	429a      	cmp	r2, r3
 801561a:	d10b      	bne.n	8015634 <vTaskPriorityDisinheritAfterTimeout+0x84>
 801561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015620:	b672      	cpsid	i
 8015622:	f383 8811 	msr	BASEPRI, r3
 8015626:	f3bf 8f6f 	isb	sy
 801562a:	f3bf 8f4f 	dsb	sy
 801562e:	b662      	cpsie	i
 8015630:	60bb      	str	r3, [r7, #8]
 8015632:	e7fe      	b.n	8015632 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015638:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801563a:	69bb      	ldr	r3, [r7, #24]
 801563c:	69fa      	ldr	r2, [r7, #28]
 801563e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	699b      	ldr	r3, [r3, #24]
 8015644:	2b00      	cmp	r3, #0
 8015646:	db04      	blt.n	8015652 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015648:	69fb      	ldr	r3, [r7, #28]
 801564a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801564e:	69bb      	ldr	r3, [r7, #24]
 8015650:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	6959      	ldr	r1, [r3, #20]
 8015656:	693a      	ldr	r2, [r7, #16]
 8015658:	4613      	mov	r3, r2
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	4413      	add	r3, r2
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	4a13      	ldr	r2, [pc, #76]	; (80156b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015662:	4413      	add	r3, r2
 8015664:	4299      	cmp	r1, r3
 8015666:	d11c      	bne.n	80156a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	3304      	adds	r3, #4
 801566c:	4618      	mov	r0, r3
 801566e:	f7fd feb1 	bl	80133d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015676:	4b0f      	ldr	r3, [pc, #60]	; (80156b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	429a      	cmp	r2, r3
 801567c:	d903      	bls.n	8015686 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015682:	4a0c      	ldr	r2, [pc, #48]	; (80156b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015684:	6013      	str	r3, [r2, #0]
 8015686:	69bb      	ldr	r3, [r7, #24]
 8015688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801568a:	4613      	mov	r3, r2
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	4413      	add	r3, r2
 8015690:	009b      	lsls	r3, r3, #2
 8015692:	4a07      	ldr	r2, [pc, #28]	; (80156b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015694:	441a      	add	r2, r3
 8015696:	69bb      	ldr	r3, [r7, #24]
 8015698:	3304      	adds	r3, #4
 801569a:	4619      	mov	r1, r3
 801569c:	4610      	mov	r0, r2
 801569e:	f7fd fe3c 	bl	801331a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80156a2:	bf00      	nop
 80156a4:	3720      	adds	r7, #32
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	20000a24 	.word	0x20000a24
 80156b0:	20000a28 	.word	0x20000a28
 80156b4:	20000f00 	.word	0x20000f00

080156b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80156b8:	b480      	push	{r7}
 80156ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80156bc:	4b07      	ldr	r3, [pc, #28]	; (80156dc <pvTaskIncrementMutexHeldCount+0x24>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d004      	beq.n	80156ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80156c4:	4b05      	ldr	r3, [pc, #20]	; (80156dc <pvTaskIncrementMutexHeldCount+0x24>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80156ca:	3201      	adds	r2, #1
 80156cc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80156ce:	4b03      	ldr	r3, [pc, #12]	; (80156dc <pvTaskIncrementMutexHeldCount+0x24>)
 80156d0:	681b      	ldr	r3, [r3, #0]
	}
 80156d2:	4618      	mov	r0, r3
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr
 80156dc:	20000a24 	.word	0x20000a24

080156e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b084      	sub	sp, #16
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
 80156e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80156ea:	4b21      	ldr	r3, [pc, #132]	; (8015770 <prvAddCurrentTaskToDelayedList+0x90>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80156f0:	4b20      	ldr	r3, [pc, #128]	; (8015774 <prvAddCurrentTaskToDelayedList+0x94>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	3304      	adds	r3, #4
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7fd fe6c 	bl	80133d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015702:	d10a      	bne.n	801571a <prvAddCurrentTaskToDelayedList+0x3a>
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d007      	beq.n	801571a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801570a:	4b1a      	ldr	r3, [pc, #104]	; (8015774 <prvAddCurrentTaskToDelayedList+0x94>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	3304      	adds	r3, #4
 8015710:	4619      	mov	r1, r3
 8015712:	4819      	ldr	r0, [pc, #100]	; (8015778 <prvAddCurrentTaskToDelayedList+0x98>)
 8015714:	f7fd fe01 	bl	801331a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015718:	e026      	b.n	8015768 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801571a:	68fa      	ldr	r2, [r7, #12]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	4413      	add	r3, r2
 8015720:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015722:	4b14      	ldr	r3, [pc, #80]	; (8015774 <prvAddCurrentTaskToDelayedList+0x94>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	68ba      	ldr	r2, [r7, #8]
 8015728:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801572a:	68ba      	ldr	r2, [r7, #8]
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	429a      	cmp	r2, r3
 8015730:	d209      	bcs.n	8015746 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015732:	4b12      	ldr	r3, [pc, #72]	; (801577c <prvAddCurrentTaskToDelayedList+0x9c>)
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	4b0f      	ldr	r3, [pc, #60]	; (8015774 <prvAddCurrentTaskToDelayedList+0x94>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	3304      	adds	r3, #4
 801573c:	4619      	mov	r1, r3
 801573e:	4610      	mov	r0, r2
 8015740:	f7fd fe0f 	bl	8013362 <vListInsert>
}
 8015744:	e010      	b.n	8015768 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015746:	4b0e      	ldr	r3, [pc, #56]	; (8015780 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015748:	681a      	ldr	r2, [r3, #0]
 801574a:	4b0a      	ldr	r3, [pc, #40]	; (8015774 <prvAddCurrentTaskToDelayedList+0x94>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	3304      	adds	r3, #4
 8015750:	4619      	mov	r1, r3
 8015752:	4610      	mov	r0, r2
 8015754:	f7fd fe05 	bl	8013362 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015758:	4b0a      	ldr	r3, [pc, #40]	; (8015784 <prvAddCurrentTaskToDelayedList+0xa4>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	68ba      	ldr	r2, [r7, #8]
 801575e:	429a      	cmp	r2, r3
 8015760:	d202      	bcs.n	8015768 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015762:	4a08      	ldr	r2, [pc, #32]	; (8015784 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	6013      	str	r3, [r2, #0]
}
 8015768:	bf00      	nop
 801576a:	3710      	adds	r7, #16
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	20000efc 	.word	0x20000efc
 8015774:	20000a24 	.word	0x20000a24
 8015778:	20000ee4 	.word	0x20000ee4
 801577c:	20000eb4 	.word	0x20000eb4
 8015780:	20000eb0 	.word	0x20000eb0
 8015784:	20000f18 	.word	0x20000f18

08015788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b08a      	sub	sp, #40	; 0x28
 801578c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801578e:	2300      	movs	r3, #0
 8015790:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015792:	f000 fb0d 	bl	8015db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015796:	4b1d      	ldr	r3, [pc, #116]	; (801580c <xTimerCreateTimerTask+0x84>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d021      	beq.n	80157e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801579e:	2300      	movs	r3, #0
 80157a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80157a2:	2300      	movs	r3, #0
 80157a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80157a6:	1d3a      	adds	r2, r7, #4
 80157a8:	f107 0108 	add.w	r1, r7, #8
 80157ac:	f107 030c 	add.w	r3, r7, #12
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fd fd6b 	bl	801328c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80157b6:	6879      	ldr	r1, [r7, #4]
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	9202      	str	r2, [sp, #8]
 80157be:	9301      	str	r3, [sp, #4]
 80157c0:	2302      	movs	r3, #2
 80157c2:	9300      	str	r3, [sp, #0]
 80157c4:	2300      	movs	r3, #0
 80157c6:	460a      	mov	r2, r1
 80157c8:	4911      	ldr	r1, [pc, #68]	; (8015810 <xTimerCreateTimerTask+0x88>)
 80157ca:	4812      	ldr	r0, [pc, #72]	; (8015814 <xTimerCreateTimerTask+0x8c>)
 80157cc:	f7fe ff30 	bl	8014630 <xTaskCreateStatic>
 80157d0:	4602      	mov	r2, r0
 80157d2:	4b11      	ldr	r3, [pc, #68]	; (8015818 <xTimerCreateTimerTask+0x90>)
 80157d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80157d6:	4b10      	ldr	r3, [pc, #64]	; (8015818 <xTimerCreateTimerTask+0x90>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d001      	beq.n	80157e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80157de:	2301      	movs	r3, #1
 80157e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d10b      	bne.n	8015800 <xTimerCreateTimerTask+0x78>
 80157e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ec:	b672      	cpsid	i
 80157ee:	f383 8811 	msr	BASEPRI, r3
 80157f2:	f3bf 8f6f 	isb	sy
 80157f6:	f3bf 8f4f 	dsb	sy
 80157fa:	b662      	cpsie	i
 80157fc:	613b      	str	r3, [r7, #16]
 80157fe:	e7fe      	b.n	80157fe <xTimerCreateTimerTask+0x76>
	return xReturn;
 8015800:	697b      	ldr	r3, [r7, #20]
}
 8015802:	4618      	mov	r0, r3
 8015804:	3718      	adds	r7, #24
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	20000f54 	.word	0x20000f54
 8015810:	0801a2bc 	.word	0x0801a2bc
 8015814:	08015955 	.word	0x08015955
 8015818:	20000f58 	.word	0x20000f58

0801581c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b08a      	sub	sp, #40	; 0x28
 8015820:	af00      	add	r7, sp, #0
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	607a      	str	r2, [r7, #4]
 8015828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801582a:	2300      	movs	r3, #0
 801582c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d10b      	bne.n	801584c <xTimerGenericCommand+0x30>
 8015834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015838:	b672      	cpsid	i
 801583a:	f383 8811 	msr	BASEPRI, r3
 801583e:	f3bf 8f6f 	isb	sy
 8015842:	f3bf 8f4f 	dsb	sy
 8015846:	b662      	cpsie	i
 8015848:	623b      	str	r3, [r7, #32]
 801584a:	e7fe      	b.n	801584a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801584c:	4b19      	ldr	r3, [pc, #100]	; (80158b4 <xTimerGenericCommand+0x98>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d02a      	beq.n	80158aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	2b05      	cmp	r3, #5
 8015864:	dc18      	bgt.n	8015898 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015866:	f7ff fdad 	bl	80153c4 <xTaskGetSchedulerState>
 801586a:	4603      	mov	r3, r0
 801586c:	2b02      	cmp	r3, #2
 801586e:	d109      	bne.n	8015884 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015870:	4b10      	ldr	r3, [pc, #64]	; (80158b4 <xTimerGenericCommand+0x98>)
 8015872:	6818      	ldr	r0, [r3, #0]
 8015874:	f107 0110 	add.w	r1, r7, #16
 8015878:	2300      	movs	r3, #0
 801587a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801587c:	f7fe f860 	bl	8013940 <xQueueGenericSend>
 8015880:	6278      	str	r0, [r7, #36]	; 0x24
 8015882:	e012      	b.n	80158aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015884:	4b0b      	ldr	r3, [pc, #44]	; (80158b4 <xTimerGenericCommand+0x98>)
 8015886:	6818      	ldr	r0, [r3, #0]
 8015888:	f107 0110 	add.w	r1, r7, #16
 801588c:	2300      	movs	r3, #0
 801588e:	2200      	movs	r2, #0
 8015890:	f7fe f856 	bl	8013940 <xQueueGenericSend>
 8015894:	6278      	str	r0, [r7, #36]	; 0x24
 8015896:	e008      	b.n	80158aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015898:	4b06      	ldr	r3, [pc, #24]	; (80158b4 <xTimerGenericCommand+0x98>)
 801589a:	6818      	ldr	r0, [r3, #0]
 801589c:	f107 0110 	add.w	r1, r7, #16
 80158a0:	2300      	movs	r3, #0
 80158a2:	683a      	ldr	r2, [r7, #0]
 80158a4:	f7fe f94e 	bl	8013b44 <xQueueGenericSendFromISR>
 80158a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80158aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3728      	adds	r7, #40	; 0x28
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}
 80158b4:	20000f54 	.word	0x20000f54

080158b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b088      	sub	sp, #32
 80158bc:	af02      	add	r7, sp, #8
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158c2:	4b23      	ldr	r3, [pc, #140]	; (8015950 <prvProcessExpiredTimer+0x98>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	68db      	ldr	r3, [r3, #12]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	3304      	adds	r3, #4
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7fd fd7f 	bl	80133d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158dc:	f003 0304 	and.w	r3, r3, #4
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d023      	beq.n	801592c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	699a      	ldr	r2, [r3, #24]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	18d1      	adds	r1, r2, r3
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	683a      	ldr	r2, [r7, #0]
 80158f0:	6978      	ldr	r0, [r7, #20]
 80158f2:	f000 f8d3 	bl	8015a9c <prvInsertTimerInActiveList>
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d020      	beq.n	801593e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80158fc:	2300      	movs	r3, #0
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	2300      	movs	r3, #0
 8015902:	687a      	ldr	r2, [r7, #4]
 8015904:	2100      	movs	r1, #0
 8015906:	6978      	ldr	r0, [r7, #20]
 8015908:	f7ff ff88 	bl	801581c <xTimerGenericCommand>
 801590c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d114      	bne.n	801593e <prvProcessExpiredTimer+0x86>
 8015914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015918:	b672      	cpsid	i
 801591a:	f383 8811 	msr	BASEPRI, r3
 801591e:	f3bf 8f6f 	isb	sy
 8015922:	f3bf 8f4f 	dsb	sy
 8015926:	b662      	cpsie	i
 8015928:	60fb      	str	r3, [r7, #12]
 801592a:	e7fe      	b.n	801592a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801592c:	697b      	ldr	r3, [r7, #20]
 801592e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015932:	f023 0301 	bic.w	r3, r3, #1
 8015936:	b2da      	uxtb	r2, r3
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	6a1b      	ldr	r3, [r3, #32]
 8015942:	6978      	ldr	r0, [r7, #20]
 8015944:	4798      	blx	r3
}
 8015946:	bf00      	nop
 8015948:	3718      	adds	r7, #24
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
 801594e:	bf00      	nop
 8015950:	20000f4c 	.word	0x20000f4c

08015954 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b084      	sub	sp, #16
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801595c:	f107 0308 	add.w	r3, r7, #8
 8015960:	4618      	mov	r0, r3
 8015962:	f000 f857 	bl	8015a14 <prvGetNextExpireTime>
 8015966:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	4619      	mov	r1, r3
 801596c:	68f8      	ldr	r0, [r7, #12]
 801596e:	f000 f803 	bl	8015978 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015972:	f000 f8d5 	bl	8015b20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015976:	e7f1      	b.n	801595c <prvTimerTask+0x8>

08015978 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
 8015980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015982:	f7ff f919 	bl	8014bb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015986:	f107 0308 	add.w	r3, r7, #8
 801598a:	4618      	mov	r0, r3
 801598c:	f000 f866 	bl	8015a5c <prvSampleTimeNow>
 8015990:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d130      	bne.n	80159fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d10a      	bne.n	80159b4 <prvProcessTimerOrBlockTask+0x3c>
 801599e:	687a      	ldr	r2, [r7, #4]
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d806      	bhi.n	80159b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80159a6:	f7ff f915 	bl	8014bd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80159aa:	68f9      	ldr	r1, [r7, #12]
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f7ff ff83 	bl	80158b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80159b2:	e024      	b.n	80159fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d008      	beq.n	80159cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80159ba:	4b13      	ldr	r3, [pc, #76]	; (8015a08 <prvProcessTimerOrBlockTask+0x90>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d101      	bne.n	80159c8 <prvProcessTimerOrBlockTask+0x50>
 80159c4:	2301      	movs	r3, #1
 80159c6:	e000      	b.n	80159ca <prvProcessTimerOrBlockTask+0x52>
 80159c8:	2300      	movs	r3, #0
 80159ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80159cc:	4b0f      	ldr	r3, [pc, #60]	; (8015a0c <prvProcessTimerOrBlockTask+0x94>)
 80159ce:	6818      	ldr	r0, [r3, #0]
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	1ad3      	subs	r3, r2, r3
 80159d6:	683a      	ldr	r2, [r7, #0]
 80159d8:	4619      	mov	r1, r3
 80159da:	f7fe fdf5 	bl	80145c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80159de:	f7ff f8f9 	bl	8014bd4 <xTaskResumeAll>
 80159e2:	4603      	mov	r3, r0
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10a      	bne.n	80159fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80159e8:	4b09      	ldr	r3, [pc, #36]	; (8015a10 <prvProcessTimerOrBlockTask+0x98>)
 80159ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159ee:	601a      	str	r2, [r3, #0]
 80159f0:	f3bf 8f4f 	dsb	sy
 80159f4:	f3bf 8f6f 	isb	sy
}
 80159f8:	e001      	b.n	80159fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80159fa:	f7ff f8eb 	bl	8014bd4 <xTaskResumeAll>
}
 80159fe:	bf00      	nop
 8015a00:	3710      	adds	r7, #16
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}
 8015a06:	bf00      	nop
 8015a08:	20000f50 	.word	0x20000f50
 8015a0c:	20000f54 	.word	0x20000f54
 8015a10:	e000ed04 	.word	0xe000ed04

08015a14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015a14:	b480      	push	{r7}
 8015a16:	b085      	sub	sp, #20
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015a1c:	4b0e      	ldr	r3, [pc, #56]	; (8015a58 <prvGetNextExpireTime+0x44>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d101      	bne.n	8015a2a <prvGetNextExpireTime+0x16>
 8015a26:	2201      	movs	r2, #1
 8015a28:	e000      	b.n	8015a2c <prvGetNextExpireTime+0x18>
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d105      	bne.n	8015a44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015a38:	4b07      	ldr	r3, [pc, #28]	; (8015a58 <prvGetNextExpireTime+0x44>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	60fb      	str	r3, [r7, #12]
 8015a42:	e001      	b.n	8015a48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015a44:	2300      	movs	r3, #0
 8015a46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015a48:	68fb      	ldr	r3, [r7, #12]
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3714      	adds	r7, #20
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr
 8015a56:	bf00      	nop
 8015a58:	20000f4c 	.word	0x20000f4c

08015a5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015a64:	f7ff f954 	bl	8014d10 <xTaskGetTickCount>
 8015a68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015a6a:	4b0b      	ldr	r3, [pc, #44]	; (8015a98 <prvSampleTimeNow+0x3c>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	68fa      	ldr	r2, [r7, #12]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d205      	bcs.n	8015a80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015a74:	f000 f936 	bl	8015ce4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2201      	movs	r2, #1
 8015a7c:	601a      	str	r2, [r3, #0]
 8015a7e:	e002      	b.n	8015a86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2200      	movs	r2, #0
 8015a84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015a86:	4a04      	ldr	r2, [pc, #16]	; (8015a98 <prvSampleTimeNow+0x3c>)
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3710      	adds	r7, #16
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	20000f5c 	.word	0x20000f5c

08015a9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b086      	sub	sp, #24
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
 8015aa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	68ba      	ldr	r2, [r7, #8]
 8015ab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015aba:	68ba      	ldr	r2, [r7, #8]
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	d812      	bhi.n	8015ae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	1ad2      	subs	r2, r2, r3
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	699b      	ldr	r3, [r3, #24]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d302      	bcc.n	8015ad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	617b      	str	r3, [r7, #20]
 8015ad4:	e01b      	b.n	8015b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015ad6:	4b10      	ldr	r3, [pc, #64]	; (8015b18 <prvInsertTimerInActiveList+0x7c>)
 8015ad8:	681a      	ldr	r2, [r3, #0]
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	3304      	adds	r3, #4
 8015ade:	4619      	mov	r1, r3
 8015ae0:	4610      	mov	r0, r2
 8015ae2:	f7fd fc3e 	bl	8013362 <vListInsert>
 8015ae6:	e012      	b.n	8015b0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015ae8:	687a      	ldr	r2, [r7, #4]
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d206      	bcs.n	8015afe <prvInsertTimerInActiveList+0x62>
 8015af0:	68ba      	ldr	r2, [r7, #8]
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d302      	bcc.n	8015afe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015af8:	2301      	movs	r3, #1
 8015afa:	617b      	str	r3, [r7, #20]
 8015afc:	e007      	b.n	8015b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015afe:	4b07      	ldr	r3, [pc, #28]	; (8015b1c <prvInsertTimerInActiveList+0x80>)
 8015b00:	681a      	ldr	r2, [r3, #0]
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	3304      	adds	r3, #4
 8015b06:	4619      	mov	r1, r3
 8015b08:	4610      	mov	r0, r2
 8015b0a:	f7fd fc2a 	bl	8013362 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015b0e:	697b      	ldr	r3, [r7, #20]
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3718      	adds	r7, #24
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	20000f50 	.word	0x20000f50
 8015b1c:	20000f4c 	.word	0x20000f4c

08015b20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b08e      	sub	sp, #56	; 0x38
 8015b24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015b26:	e0cc      	b.n	8015cc2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	da19      	bge.n	8015b62 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015b2e:	1d3b      	adds	r3, r7, #4
 8015b30:	3304      	adds	r3, #4
 8015b32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d10b      	bne.n	8015b52 <prvProcessReceivedCommands+0x32>
 8015b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b3e:	b672      	cpsid	i
 8015b40:	f383 8811 	msr	BASEPRI, r3
 8015b44:	f3bf 8f6f 	isb	sy
 8015b48:	f3bf 8f4f 	dsb	sy
 8015b4c:	b662      	cpsie	i
 8015b4e:	61fb      	str	r3, [r7, #28]
 8015b50:	e7fe      	b.n	8015b50 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b58:	6850      	ldr	r0, [r2, #4]
 8015b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b5c:	6892      	ldr	r2, [r2, #8]
 8015b5e:	4611      	mov	r1, r2
 8015b60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f2c0 80ab 	blt.w	8015cc0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b70:	695b      	ldr	r3, [r3, #20]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d004      	beq.n	8015b80 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b78:	3304      	adds	r3, #4
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7fd fc2a 	bl	80133d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015b80:	463b      	mov	r3, r7
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7ff ff6a 	bl	8015a5c <prvSampleTimeNow>
 8015b88:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	2b09      	cmp	r3, #9
 8015b8e:	f200 8098 	bhi.w	8015cc2 <prvProcessReceivedCommands+0x1a2>
 8015b92:	a201      	add	r2, pc, #4	; (adr r2, 8015b98 <prvProcessReceivedCommands+0x78>)
 8015b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b98:	08015bc1 	.word	0x08015bc1
 8015b9c:	08015bc1 	.word	0x08015bc1
 8015ba0:	08015bc1 	.word	0x08015bc1
 8015ba4:	08015c37 	.word	0x08015c37
 8015ba8:	08015c4b 	.word	0x08015c4b
 8015bac:	08015c97 	.word	0x08015c97
 8015bb0:	08015bc1 	.word	0x08015bc1
 8015bb4:	08015bc1 	.word	0x08015bc1
 8015bb8:	08015c37 	.word	0x08015c37
 8015bbc:	08015c4b 	.word	0x08015c4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bc6:	f043 0301 	orr.w	r3, r3, #1
 8015bca:	b2da      	uxtb	r2, r3
 8015bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015bd2:	68ba      	ldr	r2, [r7, #8]
 8015bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bd6:	699b      	ldr	r3, [r3, #24]
 8015bd8:	18d1      	adds	r1, r2, r3
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015be0:	f7ff ff5c 	bl	8015a9c <prvInsertTimerInActiveList>
 8015be4:	4603      	mov	r3, r0
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d06b      	beq.n	8015cc2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	6a1b      	ldr	r3, [r3, #32]
 8015bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bf8:	f003 0304 	and.w	r3, r3, #4
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d060      	beq.n	8015cc2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015c00:	68ba      	ldr	r2, [r7, #8]
 8015c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c04:	699b      	ldr	r3, [r3, #24]
 8015c06:	441a      	add	r2, r3
 8015c08:	2300      	movs	r3, #0
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	2100      	movs	r1, #0
 8015c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c12:	f7ff fe03 	bl	801581c <xTimerGenericCommand>
 8015c16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015c18:	6a3b      	ldr	r3, [r7, #32]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d151      	bne.n	8015cc2 <prvProcessReceivedCommands+0x1a2>
 8015c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c22:	b672      	cpsid	i
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	b662      	cpsie	i
 8015c32:	61bb      	str	r3, [r7, #24]
 8015c34:	e7fe      	b.n	8015c34 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c3c:	f023 0301 	bic.w	r3, r3, #1
 8015c40:	b2da      	uxtb	r2, r3
 8015c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015c48:	e03b      	b.n	8015cc2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c50:	f043 0301 	orr.w	r3, r3, #1
 8015c54:	b2da      	uxtb	r2, r3
 8015c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015c5c:	68ba      	ldr	r2, [r7, #8]
 8015c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c64:	699b      	ldr	r3, [r3, #24]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d10b      	bne.n	8015c82 <prvProcessReceivedCommands+0x162>
 8015c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6e:	b672      	cpsid	i
 8015c70:	f383 8811 	msr	BASEPRI, r3
 8015c74:	f3bf 8f6f 	isb	sy
 8015c78:	f3bf 8f4f 	dsb	sy
 8015c7c:	b662      	cpsie	i
 8015c7e:	617b      	str	r3, [r7, #20]
 8015c80:	e7fe      	b.n	8015c80 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c84:	699a      	ldr	r2, [r3, #24]
 8015c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c88:	18d1      	adds	r1, r2, r3
 8015c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c90:	f7ff ff04 	bl	8015a9c <prvInsertTimerInActiveList>
					break;
 8015c94:	e015      	b.n	8015cc2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c9c:	f003 0302 	and.w	r3, r3, #2
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d103      	bne.n	8015cac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ca6:	f000 fbb9 	bl	801641c <vPortFree>
 8015caa:	e00a      	b.n	8015cc2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015cb2:	f023 0301 	bic.w	r3, r3, #1
 8015cb6:	b2da      	uxtb	r2, r3
 8015cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015cbe:	e000      	b.n	8015cc2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015cc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015cc2:	4b07      	ldr	r3, [pc, #28]	; (8015ce0 <prvProcessReceivedCommands+0x1c0>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	1d39      	adds	r1, r7, #4
 8015cc8:	2200      	movs	r2, #0
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f7fe f868 	bl	8013da0 <xQueueReceive>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	f47f af28 	bne.w	8015b28 <prvProcessReceivedCommands+0x8>
	}
}
 8015cd8:	bf00      	nop
 8015cda:	3730      	adds	r7, #48	; 0x30
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	20000f54 	.word	0x20000f54

08015ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b088      	sub	sp, #32
 8015ce8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015cea:	e049      	b.n	8015d80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015cec:	4b2e      	ldr	r3, [pc, #184]	; (8015da8 <prvSwitchTimerLists+0xc4>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015cf6:	4b2c      	ldr	r3, [pc, #176]	; (8015da8 <prvSwitchTimerLists+0xc4>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	68db      	ldr	r3, [r3, #12]
 8015cfc:	68db      	ldr	r3, [r3, #12]
 8015cfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	3304      	adds	r3, #4
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fd fb65 	bl	80133d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	6a1b      	ldr	r3, [r3, #32]
 8015d0e:	68f8      	ldr	r0, [r7, #12]
 8015d10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d18:	f003 0304 	and.w	r3, r3, #4
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d02f      	beq.n	8015d80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	699b      	ldr	r3, [r3, #24]
 8015d24:	693a      	ldr	r2, [r7, #16]
 8015d26:	4413      	add	r3, r2
 8015d28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015d2a:	68ba      	ldr	r2, [r7, #8]
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	429a      	cmp	r2, r3
 8015d30:	d90e      	bls.n	8015d50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	68ba      	ldr	r2, [r7, #8]
 8015d36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	68fa      	ldr	r2, [r7, #12]
 8015d3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015d3e:	4b1a      	ldr	r3, [pc, #104]	; (8015da8 <prvSwitchTimerLists+0xc4>)
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	3304      	adds	r3, #4
 8015d46:	4619      	mov	r1, r3
 8015d48:	4610      	mov	r0, r2
 8015d4a:	f7fd fb0a 	bl	8013362 <vListInsert>
 8015d4e:	e017      	b.n	8015d80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015d50:	2300      	movs	r3, #0
 8015d52:	9300      	str	r3, [sp, #0]
 8015d54:	2300      	movs	r3, #0
 8015d56:	693a      	ldr	r2, [r7, #16]
 8015d58:	2100      	movs	r1, #0
 8015d5a:	68f8      	ldr	r0, [r7, #12]
 8015d5c:	f7ff fd5e 	bl	801581c <xTimerGenericCommand>
 8015d60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d10b      	bne.n	8015d80 <prvSwitchTimerLists+0x9c>
 8015d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d6c:	b672      	cpsid	i
 8015d6e:	f383 8811 	msr	BASEPRI, r3
 8015d72:	f3bf 8f6f 	isb	sy
 8015d76:	f3bf 8f4f 	dsb	sy
 8015d7a:	b662      	cpsie	i
 8015d7c:	603b      	str	r3, [r7, #0]
 8015d7e:	e7fe      	b.n	8015d7e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015d80:	4b09      	ldr	r3, [pc, #36]	; (8015da8 <prvSwitchTimerLists+0xc4>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d1b0      	bne.n	8015cec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015d8a:	4b07      	ldr	r3, [pc, #28]	; (8015da8 <prvSwitchTimerLists+0xc4>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015d90:	4b06      	ldr	r3, [pc, #24]	; (8015dac <prvSwitchTimerLists+0xc8>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	4a04      	ldr	r2, [pc, #16]	; (8015da8 <prvSwitchTimerLists+0xc4>)
 8015d96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015d98:	4a04      	ldr	r2, [pc, #16]	; (8015dac <prvSwitchTimerLists+0xc8>)
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	6013      	str	r3, [r2, #0]
}
 8015d9e:	bf00      	nop
 8015da0:	3718      	adds	r7, #24
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	20000f4c 	.word	0x20000f4c
 8015dac:	20000f50 	.word	0x20000f50

08015db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015db6:	f000 f947 	bl	8016048 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015dba:	4b15      	ldr	r3, [pc, #84]	; (8015e10 <prvCheckForValidListAndQueue+0x60>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d120      	bne.n	8015e04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015dc2:	4814      	ldr	r0, [pc, #80]	; (8015e14 <prvCheckForValidListAndQueue+0x64>)
 8015dc4:	f7fd fa7c 	bl	80132c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015dc8:	4813      	ldr	r0, [pc, #76]	; (8015e18 <prvCheckForValidListAndQueue+0x68>)
 8015dca:	f7fd fa79 	bl	80132c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015dce:	4b13      	ldr	r3, [pc, #76]	; (8015e1c <prvCheckForValidListAndQueue+0x6c>)
 8015dd0:	4a10      	ldr	r2, [pc, #64]	; (8015e14 <prvCheckForValidListAndQueue+0x64>)
 8015dd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015dd4:	4b12      	ldr	r3, [pc, #72]	; (8015e20 <prvCheckForValidListAndQueue+0x70>)
 8015dd6:	4a10      	ldr	r2, [pc, #64]	; (8015e18 <prvCheckForValidListAndQueue+0x68>)
 8015dd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015dda:	2300      	movs	r3, #0
 8015ddc:	9300      	str	r3, [sp, #0]
 8015dde:	4b11      	ldr	r3, [pc, #68]	; (8015e24 <prvCheckForValidListAndQueue+0x74>)
 8015de0:	4a11      	ldr	r2, [pc, #68]	; (8015e28 <prvCheckForValidListAndQueue+0x78>)
 8015de2:	2110      	movs	r1, #16
 8015de4:	200a      	movs	r0, #10
 8015de6:	f7fd fb89 	bl	80134fc <xQueueGenericCreateStatic>
 8015dea:	4602      	mov	r2, r0
 8015dec:	4b08      	ldr	r3, [pc, #32]	; (8015e10 <prvCheckForValidListAndQueue+0x60>)
 8015dee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015df0:	4b07      	ldr	r3, [pc, #28]	; (8015e10 <prvCheckForValidListAndQueue+0x60>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d005      	beq.n	8015e04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015df8:	4b05      	ldr	r3, [pc, #20]	; (8015e10 <prvCheckForValidListAndQueue+0x60>)
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	490b      	ldr	r1, [pc, #44]	; (8015e2c <prvCheckForValidListAndQueue+0x7c>)
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7fe fb90 	bl	8014524 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015e04:	f000 f952 	bl	80160ac <vPortExitCritical>
}
 8015e08:	bf00      	nop
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	20000f54 	.word	0x20000f54
 8015e14:	20000f24 	.word	0x20000f24
 8015e18:	20000f38 	.word	0x20000f38
 8015e1c:	20000f4c 	.word	0x20000f4c
 8015e20:	20000f50 	.word	0x20000f50
 8015e24:	20001000 	.word	0x20001000
 8015e28:	20000f60 	.word	0x20000f60
 8015e2c:	0801a2c4 	.word	0x0801a2c4

08015e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015e30:	b480      	push	{r7}
 8015e32:	b085      	sub	sp, #20
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	60b9      	str	r1, [r7, #8]
 8015e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	3b04      	subs	r3, #4
 8015e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	3b04      	subs	r3, #4
 8015e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	f023 0201 	bic.w	r2, r3, #1
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	3b04      	subs	r3, #4
 8015e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015e60:	4a0c      	ldr	r2, [pc, #48]	; (8015e94 <pxPortInitialiseStack+0x64>)
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	3b14      	subs	r3, #20
 8015e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	3b04      	subs	r3, #4
 8015e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	f06f 0202 	mvn.w	r2, #2
 8015e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	3b20      	subs	r3, #32
 8015e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015e86:	68fb      	ldr	r3, [r7, #12]
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3714      	adds	r7, #20
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e92:	4770      	bx	lr
 8015e94:	08015e99 	.word	0x08015e99

08015e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015e98:	b480      	push	{r7}
 8015e9a:	b085      	sub	sp, #20
 8015e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015ea2:	4b13      	ldr	r3, [pc, #76]	; (8015ef0 <prvTaskExitError+0x58>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eaa:	d00b      	beq.n	8015ec4 <prvTaskExitError+0x2c>
 8015eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb0:	b672      	cpsid	i
 8015eb2:	f383 8811 	msr	BASEPRI, r3
 8015eb6:	f3bf 8f6f 	isb	sy
 8015eba:	f3bf 8f4f 	dsb	sy
 8015ebe:	b662      	cpsie	i
 8015ec0:	60fb      	str	r3, [r7, #12]
 8015ec2:	e7fe      	b.n	8015ec2 <prvTaskExitError+0x2a>
 8015ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec8:	b672      	cpsid	i
 8015eca:	f383 8811 	msr	BASEPRI, r3
 8015ece:	f3bf 8f6f 	isb	sy
 8015ed2:	f3bf 8f4f 	dsb	sy
 8015ed6:	b662      	cpsie	i
 8015ed8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015eda:	bf00      	nop
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d0fc      	beq.n	8015edc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015ee2:	bf00      	nop
 8015ee4:	3714      	adds	r7, #20
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eec:	4770      	bx	lr
 8015eee:	bf00      	nop
 8015ef0:	2000011c 	.word	0x2000011c
	...

08015f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015f00:	4b07      	ldr	r3, [pc, #28]	; (8015f20 <pxCurrentTCBConst2>)
 8015f02:	6819      	ldr	r1, [r3, #0]
 8015f04:	6808      	ldr	r0, [r1, #0]
 8015f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f0a:	f380 8809 	msr	PSP, r0
 8015f0e:	f3bf 8f6f 	isb	sy
 8015f12:	f04f 0000 	mov.w	r0, #0
 8015f16:	f380 8811 	msr	BASEPRI, r0
 8015f1a:	4770      	bx	lr
 8015f1c:	f3af 8000 	nop.w

08015f20 <pxCurrentTCBConst2>:
 8015f20:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015f24:	bf00      	nop
 8015f26:	bf00      	nop

08015f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015f28:	4808      	ldr	r0, [pc, #32]	; (8015f4c <prvPortStartFirstTask+0x24>)
 8015f2a:	6800      	ldr	r0, [r0, #0]
 8015f2c:	6800      	ldr	r0, [r0, #0]
 8015f2e:	f380 8808 	msr	MSP, r0
 8015f32:	f04f 0000 	mov.w	r0, #0
 8015f36:	f380 8814 	msr	CONTROL, r0
 8015f3a:	b662      	cpsie	i
 8015f3c:	b661      	cpsie	f
 8015f3e:	f3bf 8f4f 	dsb	sy
 8015f42:	f3bf 8f6f 	isb	sy
 8015f46:	df00      	svc	0
 8015f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015f4a:	bf00      	nop
 8015f4c:	e000ed08 	.word	0xe000ed08

08015f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015f56:	4b36      	ldr	r3, [pc, #216]	; (8016030 <xPortStartScheduler+0xe0>)
 8015f58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	22ff      	movs	r2, #255	; 0xff
 8015f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	b2db      	uxtb	r3, r3
 8015f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015f70:	78fb      	ldrb	r3, [r7, #3]
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015f78:	b2da      	uxtb	r2, r3
 8015f7a:	4b2e      	ldr	r3, [pc, #184]	; (8016034 <xPortStartScheduler+0xe4>)
 8015f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015f7e:	4b2e      	ldr	r3, [pc, #184]	; (8016038 <xPortStartScheduler+0xe8>)
 8015f80:	2207      	movs	r2, #7
 8015f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f84:	e009      	b.n	8015f9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015f86:	4b2c      	ldr	r3, [pc, #176]	; (8016038 <xPortStartScheduler+0xe8>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	3b01      	subs	r3, #1
 8015f8c:	4a2a      	ldr	r2, [pc, #168]	; (8016038 <xPortStartScheduler+0xe8>)
 8015f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015f90:	78fb      	ldrb	r3, [r7, #3]
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	005b      	lsls	r3, r3, #1
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f9a:	78fb      	ldrb	r3, [r7, #3]
 8015f9c:	b2db      	uxtb	r3, r3
 8015f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015fa2:	2b80      	cmp	r3, #128	; 0x80
 8015fa4:	d0ef      	beq.n	8015f86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015fa6:	4b24      	ldr	r3, [pc, #144]	; (8016038 <xPortStartScheduler+0xe8>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f1c3 0307 	rsb	r3, r3, #7
 8015fae:	2b04      	cmp	r3, #4
 8015fb0:	d00b      	beq.n	8015fca <xPortStartScheduler+0x7a>
 8015fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb6:	b672      	cpsid	i
 8015fb8:	f383 8811 	msr	BASEPRI, r3
 8015fbc:	f3bf 8f6f 	isb	sy
 8015fc0:	f3bf 8f4f 	dsb	sy
 8015fc4:	b662      	cpsie	i
 8015fc6:	60bb      	str	r3, [r7, #8]
 8015fc8:	e7fe      	b.n	8015fc8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015fca:	4b1b      	ldr	r3, [pc, #108]	; (8016038 <xPortStartScheduler+0xe8>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	021b      	lsls	r3, r3, #8
 8015fd0:	4a19      	ldr	r2, [pc, #100]	; (8016038 <xPortStartScheduler+0xe8>)
 8015fd2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015fd4:	4b18      	ldr	r3, [pc, #96]	; (8016038 <xPortStartScheduler+0xe8>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015fdc:	4a16      	ldr	r2, [pc, #88]	; (8016038 <xPortStartScheduler+0xe8>)
 8015fde:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	b2da      	uxtb	r2, r3
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015fe8:	4b14      	ldr	r3, [pc, #80]	; (801603c <xPortStartScheduler+0xec>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4a13      	ldr	r2, [pc, #76]	; (801603c <xPortStartScheduler+0xec>)
 8015fee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015ff2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015ff4:	4b11      	ldr	r3, [pc, #68]	; (801603c <xPortStartScheduler+0xec>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	4a10      	ldr	r2, [pc, #64]	; (801603c <xPortStartScheduler+0xec>)
 8015ffa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015ffe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016000:	f000 f8d4 	bl	80161ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016004:	4b0e      	ldr	r3, [pc, #56]	; (8016040 <xPortStartScheduler+0xf0>)
 8016006:	2200      	movs	r2, #0
 8016008:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801600a:	f000 f8f3 	bl	80161f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801600e:	4b0d      	ldr	r3, [pc, #52]	; (8016044 <xPortStartScheduler+0xf4>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	4a0c      	ldr	r2, [pc, #48]	; (8016044 <xPortStartScheduler+0xf4>)
 8016014:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016018:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801601a:	f7ff ff85 	bl	8015f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801601e:	f7fe ff53 	bl	8014ec8 <vTaskSwitchContext>
	prvTaskExitError();
 8016022:	f7ff ff39 	bl	8015e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016026:	2300      	movs	r3, #0
}
 8016028:	4618      	mov	r0, r3
 801602a:	3710      	adds	r7, #16
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	e000e400 	.word	0xe000e400
 8016034:	20001050 	.word	0x20001050
 8016038:	20001054 	.word	0x20001054
 801603c:	e000ed20 	.word	0xe000ed20
 8016040:	2000011c 	.word	0x2000011c
 8016044:	e000ef34 	.word	0xe000ef34

08016048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016048:	b480      	push	{r7}
 801604a:	b083      	sub	sp, #12
 801604c:	af00      	add	r7, sp, #0
 801604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016052:	b672      	cpsid	i
 8016054:	f383 8811 	msr	BASEPRI, r3
 8016058:	f3bf 8f6f 	isb	sy
 801605c:	f3bf 8f4f 	dsb	sy
 8016060:	b662      	cpsie	i
 8016062:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016064:	4b0f      	ldr	r3, [pc, #60]	; (80160a4 <vPortEnterCritical+0x5c>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	3301      	adds	r3, #1
 801606a:	4a0e      	ldr	r2, [pc, #56]	; (80160a4 <vPortEnterCritical+0x5c>)
 801606c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801606e:	4b0d      	ldr	r3, [pc, #52]	; (80160a4 <vPortEnterCritical+0x5c>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2b01      	cmp	r3, #1
 8016074:	d110      	bne.n	8016098 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016076:	4b0c      	ldr	r3, [pc, #48]	; (80160a8 <vPortEnterCritical+0x60>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	b2db      	uxtb	r3, r3
 801607c:	2b00      	cmp	r3, #0
 801607e:	d00b      	beq.n	8016098 <vPortEnterCritical+0x50>
 8016080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016084:	b672      	cpsid	i
 8016086:	f383 8811 	msr	BASEPRI, r3
 801608a:	f3bf 8f6f 	isb	sy
 801608e:	f3bf 8f4f 	dsb	sy
 8016092:	b662      	cpsie	i
 8016094:	603b      	str	r3, [r7, #0]
 8016096:	e7fe      	b.n	8016096 <vPortEnterCritical+0x4e>
	}
}
 8016098:	bf00      	nop
 801609a:	370c      	adds	r7, #12
 801609c:	46bd      	mov	sp, r7
 801609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a2:	4770      	bx	lr
 80160a4:	2000011c 	.word	0x2000011c
 80160a8:	e000ed04 	.word	0xe000ed04

080160ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80160ac:	b480      	push	{r7}
 80160ae:	b083      	sub	sp, #12
 80160b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80160b2:	4b12      	ldr	r3, [pc, #72]	; (80160fc <vPortExitCritical+0x50>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d10b      	bne.n	80160d2 <vPortExitCritical+0x26>
 80160ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160be:	b672      	cpsid	i
 80160c0:	f383 8811 	msr	BASEPRI, r3
 80160c4:	f3bf 8f6f 	isb	sy
 80160c8:	f3bf 8f4f 	dsb	sy
 80160cc:	b662      	cpsie	i
 80160ce:	607b      	str	r3, [r7, #4]
 80160d0:	e7fe      	b.n	80160d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80160d2:	4b0a      	ldr	r3, [pc, #40]	; (80160fc <vPortExitCritical+0x50>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	3b01      	subs	r3, #1
 80160d8:	4a08      	ldr	r2, [pc, #32]	; (80160fc <vPortExitCritical+0x50>)
 80160da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80160dc:	4b07      	ldr	r3, [pc, #28]	; (80160fc <vPortExitCritical+0x50>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d104      	bne.n	80160ee <vPortExitCritical+0x42>
 80160e4:	2300      	movs	r3, #0
 80160e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80160ee:	bf00      	nop
 80160f0:	370c      	adds	r7, #12
 80160f2:	46bd      	mov	sp, r7
 80160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop
 80160fc:	2000011c 	.word	0x2000011c

08016100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016100:	f3ef 8009 	mrs	r0, PSP
 8016104:	f3bf 8f6f 	isb	sy
 8016108:	4b15      	ldr	r3, [pc, #84]	; (8016160 <pxCurrentTCBConst>)
 801610a:	681a      	ldr	r2, [r3, #0]
 801610c:	f01e 0f10 	tst.w	lr, #16
 8016110:	bf08      	it	eq
 8016112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801611a:	6010      	str	r0, [r2, #0]
 801611c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016124:	b672      	cpsid	i
 8016126:	f380 8811 	msr	BASEPRI, r0
 801612a:	f3bf 8f4f 	dsb	sy
 801612e:	f3bf 8f6f 	isb	sy
 8016132:	b662      	cpsie	i
 8016134:	f7fe fec8 	bl	8014ec8 <vTaskSwitchContext>
 8016138:	f04f 0000 	mov.w	r0, #0
 801613c:	f380 8811 	msr	BASEPRI, r0
 8016140:	bc09      	pop	{r0, r3}
 8016142:	6819      	ldr	r1, [r3, #0]
 8016144:	6808      	ldr	r0, [r1, #0]
 8016146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801614a:	f01e 0f10 	tst.w	lr, #16
 801614e:	bf08      	it	eq
 8016150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016154:	f380 8809 	msr	PSP, r0
 8016158:	f3bf 8f6f 	isb	sy
 801615c:	4770      	bx	lr
 801615e:	bf00      	nop

08016160 <pxCurrentTCBConst>:
 8016160:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016164:	bf00      	nop
 8016166:	bf00      	nop

08016168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
	__asm volatile
 801616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016172:	b672      	cpsid	i
 8016174:	f383 8811 	msr	BASEPRI, r3
 8016178:	f3bf 8f6f 	isb	sy
 801617c:	f3bf 8f4f 	dsb	sy
 8016180:	b662      	cpsie	i
 8016182:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016184:	f7fe fde6 	bl	8014d54 <xTaskIncrementTick>
 8016188:	4603      	mov	r3, r0
 801618a:	2b00      	cmp	r3, #0
 801618c:	d003      	beq.n	8016196 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801618e:	4b06      	ldr	r3, [pc, #24]	; (80161a8 <SysTick_Handler+0x40>)
 8016190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016194:	601a      	str	r2, [r3, #0]
 8016196:	2300      	movs	r3, #0
 8016198:	603b      	str	r3, [r7, #0]
	__asm volatile
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80161a0:	bf00      	nop
 80161a2:	3708      	adds	r7, #8
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	e000ed04 	.word	0xe000ed04

080161ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80161ac:	b480      	push	{r7}
 80161ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80161b0:	4b0b      	ldr	r3, [pc, #44]	; (80161e0 <vPortSetupTimerInterrupt+0x34>)
 80161b2:	2200      	movs	r2, #0
 80161b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80161b6:	4b0b      	ldr	r3, [pc, #44]	; (80161e4 <vPortSetupTimerInterrupt+0x38>)
 80161b8:	2200      	movs	r2, #0
 80161ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80161bc:	4b0a      	ldr	r3, [pc, #40]	; (80161e8 <vPortSetupTimerInterrupt+0x3c>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	4a0a      	ldr	r2, [pc, #40]	; (80161ec <vPortSetupTimerInterrupt+0x40>)
 80161c2:	fba2 2303 	umull	r2, r3, r2, r3
 80161c6:	099b      	lsrs	r3, r3, #6
 80161c8:	4a09      	ldr	r2, [pc, #36]	; (80161f0 <vPortSetupTimerInterrupt+0x44>)
 80161ca:	3b01      	subs	r3, #1
 80161cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80161ce:	4b04      	ldr	r3, [pc, #16]	; (80161e0 <vPortSetupTimerInterrupt+0x34>)
 80161d0:	2207      	movs	r2, #7
 80161d2:	601a      	str	r2, [r3, #0]
}
 80161d4:	bf00      	nop
 80161d6:	46bd      	mov	sp, r7
 80161d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161dc:	4770      	bx	lr
 80161de:	bf00      	nop
 80161e0:	e000e010 	.word	0xe000e010
 80161e4:	e000e018 	.word	0xe000e018
 80161e8:	20000000 	.word	0x20000000
 80161ec:	10624dd3 	.word	0x10624dd3
 80161f0:	e000e014 	.word	0xe000e014

080161f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80161f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016204 <vPortEnableVFP+0x10>
 80161f8:	6801      	ldr	r1, [r0, #0]
 80161fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80161fe:	6001      	str	r1, [r0, #0]
 8016200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016202:	bf00      	nop
 8016204:	e000ed88 	.word	0xe000ed88

08016208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016208:	b480      	push	{r7}
 801620a:	b085      	sub	sp, #20
 801620c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801620e:	f3ef 8305 	mrs	r3, IPSR
 8016212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2b0f      	cmp	r3, #15
 8016218:	d915      	bls.n	8016246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801621a:	4a18      	ldr	r2, [pc, #96]	; (801627c <vPortValidateInterruptPriority+0x74>)
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	4413      	add	r3, r2
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016224:	4b16      	ldr	r3, [pc, #88]	; (8016280 <vPortValidateInterruptPriority+0x78>)
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	7afa      	ldrb	r2, [r7, #11]
 801622a:	429a      	cmp	r2, r3
 801622c:	d20b      	bcs.n	8016246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016232:	b672      	cpsid	i
 8016234:	f383 8811 	msr	BASEPRI, r3
 8016238:	f3bf 8f6f 	isb	sy
 801623c:	f3bf 8f4f 	dsb	sy
 8016240:	b662      	cpsie	i
 8016242:	607b      	str	r3, [r7, #4]
 8016244:	e7fe      	b.n	8016244 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016246:	4b0f      	ldr	r3, [pc, #60]	; (8016284 <vPortValidateInterruptPriority+0x7c>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801624e:	4b0e      	ldr	r3, [pc, #56]	; (8016288 <vPortValidateInterruptPriority+0x80>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	429a      	cmp	r2, r3
 8016254:	d90b      	bls.n	801626e <vPortValidateInterruptPriority+0x66>
 8016256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801625a:	b672      	cpsid	i
 801625c:	f383 8811 	msr	BASEPRI, r3
 8016260:	f3bf 8f6f 	isb	sy
 8016264:	f3bf 8f4f 	dsb	sy
 8016268:	b662      	cpsie	i
 801626a:	603b      	str	r3, [r7, #0]
 801626c:	e7fe      	b.n	801626c <vPortValidateInterruptPriority+0x64>
	}
 801626e:	bf00      	nop
 8016270:	3714      	adds	r7, #20
 8016272:	46bd      	mov	sp, r7
 8016274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016278:	4770      	bx	lr
 801627a:	bf00      	nop
 801627c:	e000e3f0 	.word	0xe000e3f0
 8016280:	20001050 	.word	0x20001050
 8016284:	e000ed0c 	.word	0xe000ed0c
 8016288:	20001054 	.word	0x20001054

0801628c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b08a      	sub	sp, #40	; 0x28
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016294:	2300      	movs	r3, #0
 8016296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016298:	f7fe fc8e 	bl	8014bb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801629c:	4b5a      	ldr	r3, [pc, #360]	; (8016408 <pvPortMalloc+0x17c>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d101      	bne.n	80162a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80162a4:	f000 f916 	bl	80164d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80162a8:	4b58      	ldr	r3, [pc, #352]	; (801640c <pvPortMalloc+0x180>)
 80162aa:	681a      	ldr	r2, [r3, #0]
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	4013      	ands	r3, r2
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	f040 8090 	bne.w	80163d6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d01e      	beq.n	80162fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80162bc:	2208      	movs	r2, #8
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	4413      	add	r3, r2
 80162c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f003 0307 	and.w	r3, r3, #7
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d015      	beq.n	80162fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f023 0307 	bic.w	r3, r3, #7
 80162d4:	3308      	adds	r3, #8
 80162d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f003 0307 	and.w	r3, r3, #7
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00b      	beq.n	80162fa <pvPortMalloc+0x6e>
 80162e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162e6:	b672      	cpsid	i
 80162e8:	f383 8811 	msr	BASEPRI, r3
 80162ec:	f3bf 8f6f 	isb	sy
 80162f0:	f3bf 8f4f 	dsb	sy
 80162f4:	b662      	cpsie	i
 80162f6:	617b      	str	r3, [r7, #20]
 80162f8:	e7fe      	b.n	80162f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d06a      	beq.n	80163d6 <pvPortMalloc+0x14a>
 8016300:	4b43      	ldr	r3, [pc, #268]	; (8016410 <pvPortMalloc+0x184>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	429a      	cmp	r2, r3
 8016308:	d865      	bhi.n	80163d6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801630a:	4b42      	ldr	r3, [pc, #264]	; (8016414 <pvPortMalloc+0x188>)
 801630c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801630e:	4b41      	ldr	r3, [pc, #260]	; (8016414 <pvPortMalloc+0x188>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016314:	e004      	b.n	8016320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	687a      	ldr	r2, [r7, #4]
 8016326:	429a      	cmp	r2, r3
 8016328:	d903      	bls.n	8016332 <pvPortMalloc+0xa6>
 801632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d1f1      	bne.n	8016316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016332:	4b35      	ldr	r3, [pc, #212]	; (8016408 <pvPortMalloc+0x17c>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016338:	429a      	cmp	r2, r3
 801633a:	d04c      	beq.n	80163d6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801633c:	6a3b      	ldr	r3, [r7, #32]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2208      	movs	r2, #8
 8016342:	4413      	add	r3, r2
 8016344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	681a      	ldr	r2, [r3, #0]
 801634a:	6a3b      	ldr	r3, [r7, #32]
 801634c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016350:	685a      	ldr	r2, [r3, #4]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	1ad2      	subs	r2, r2, r3
 8016356:	2308      	movs	r3, #8
 8016358:	005b      	lsls	r3, r3, #1
 801635a:	429a      	cmp	r2, r3
 801635c:	d920      	bls.n	80163a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	4413      	add	r3, r2
 8016364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016366:	69bb      	ldr	r3, [r7, #24]
 8016368:	f003 0307 	and.w	r3, r3, #7
 801636c:	2b00      	cmp	r3, #0
 801636e:	d00b      	beq.n	8016388 <pvPortMalloc+0xfc>
 8016370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016374:	b672      	cpsid	i
 8016376:	f383 8811 	msr	BASEPRI, r3
 801637a:	f3bf 8f6f 	isb	sy
 801637e:	f3bf 8f4f 	dsb	sy
 8016382:	b662      	cpsie	i
 8016384:	613b      	str	r3, [r7, #16]
 8016386:	e7fe      	b.n	8016386 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638a:	685a      	ldr	r2, [r3, #4]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	1ad2      	subs	r2, r2, r3
 8016390:	69bb      	ldr	r3, [r7, #24]
 8016392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016396:	687a      	ldr	r2, [r7, #4]
 8016398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801639a:	69b8      	ldr	r0, [r7, #24]
 801639c:	f000 f8fc 	bl	8016598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80163a0:	4b1b      	ldr	r3, [pc, #108]	; (8016410 <pvPortMalloc+0x184>)
 80163a2:	681a      	ldr	r2, [r3, #0]
 80163a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a6:	685b      	ldr	r3, [r3, #4]
 80163a8:	1ad3      	subs	r3, r2, r3
 80163aa:	4a19      	ldr	r2, [pc, #100]	; (8016410 <pvPortMalloc+0x184>)
 80163ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80163ae:	4b18      	ldr	r3, [pc, #96]	; (8016410 <pvPortMalloc+0x184>)
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	4b19      	ldr	r3, [pc, #100]	; (8016418 <pvPortMalloc+0x18c>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d203      	bcs.n	80163c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80163ba:	4b15      	ldr	r3, [pc, #84]	; (8016410 <pvPortMalloc+0x184>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	4a16      	ldr	r2, [pc, #88]	; (8016418 <pvPortMalloc+0x18c>)
 80163c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80163c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c4:	685a      	ldr	r2, [r3, #4]
 80163c6:	4b11      	ldr	r3, [pc, #68]	; (801640c <pvPortMalloc+0x180>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	431a      	orrs	r2, r3
 80163cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80163d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d2:	2200      	movs	r2, #0
 80163d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80163d6:	f7fe fbfd 	bl	8014bd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80163da:	69fb      	ldr	r3, [r7, #28]
 80163dc:	f003 0307 	and.w	r3, r3, #7
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00b      	beq.n	80163fc <pvPortMalloc+0x170>
 80163e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e8:	b672      	cpsid	i
 80163ea:	f383 8811 	msr	BASEPRI, r3
 80163ee:	f3bf 8f6f 	isb	sy
 80163f2:	f3bf 8f4f 	dsb	sy
 80163f6:	b662      	cpsie	i
 80163f8:	60fb      	str	r3, [r7, #12]
 80163fa:	e7fe      	b.n	80163fa <pvPortMalloc+0x16e>
	return pvReturn;
 80163fc:	69fb      	ldr	r3, [r7, #28]
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3728      	adds	r7, #40	; 0x28
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
 8016406:	bf00      	nop
 8016408:	20008860 	.word	0x20008860
 801640c:	2000886c 	.word	0x2000886c
 8016410:	20008864 	.word	0x20008864
 8016414:	20008858 	.word	0x20008858
 8016418:	20008868 	.word	0x20008868

0801641c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d04a      	beq.n	80164c4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801642e:	2308      	movs	r3, #8
 8016430:	425b      	negs	r3, r3
 8016432:	697a      	ldr	r2, [r7, #20]
 8016434:	4413      	add	r3, r2
 8016436:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016438:	697b      	ldr	r3, [r7, #20]
 801643a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801643c:	693b      	ldr	r3, [r7, #16]
 801643e:	685a      	ldr	r2, [r3, #4]
 8016440:	4b22      	ldr	r3, [pc, #136]	; (80164cc <vPortFree+0xb0>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4013      	ands	r3, r2
 8016446:	2b00      	cmp	r3, #0
 8016448:	d10b      	bne.n	8016462 <vPortFree+0x46>
 801644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801644e:	b672      	cpsid	i
 8016450:	f383 8811 	msr	BASEPRI, r3
 8016454:	f3bf 8f6f 	isb	sy
 8016458:	f3bf 8f4f 	dsb	sy
 801645c:	b662      	cpsie	i
 801645e:	60fb      	str	r3, [r7, #12]
 8016460:	e7fe      	b.n	8016460 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00b      	beq.n	8016482 <vPortFree+0x66>
 801646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801646e:	b672      	cpsid	i
 8016470:	f383 8811 	msr	BASEPRI, r3
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	b662      	cpsie	i
 801647e:	60bb      	str	r3, [r7, #8]
 8016480:	e7fe      	b.n	8016480 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	685a      	ldr	r2, [r3, #4]
 8016486:	4b11      	ldr	r3, [pc, #68]	; (80164cc <vPortFree+0xb0>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	4013      	ands	r3, r2
 801648c:	2b00      	cmp	r3, #0
 801648e:	d019      	beq.n	80164c4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016490:	693b      	ldr	r3, [r7, #16]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d115      	bne.n	80164c4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	685a      	ldr	r2, [r3, #4]
 801649c:	4b0b      	ldr	r3, [pc, #44]	; (80164cc <vPortFree+0xb0>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	43db      	mvns	r3, r3
 80164a2:	401a      	ands	r2, r3
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80164a8:	f7fe fb86 	bl	8014bb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	685a      	ldr	r2, [r3, #4]
 80164b0:	4b07      	ldr	r3, [pc, #28]	; (80164d0 <vPortFree+0xb4>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	4413      	add	r3, r2
 80164b6:	4a06      	ldr	r2, [pc, #24]	; (80164d0 <vPortFree+0xb4>)
 80164b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80164ba:	6938      	ldr	r0, [r7, #16]
 80164bc:	f000 f86c 	bl	8016598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80164c0:	f7fe fb88 	bl	8014bd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80164c4:	bf00      	nop
 80164c6:	3718      	adds	r7, #24
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}
 80164cc:	2000886c 	.word	0x2000886c
 80164d0:	20008864 	.word	0x20008864

080164d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80164d4:	b480      	push	{r7}
 80164d6:	b085      	sub	sp, #20
 80164d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80164da:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80164de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80164e0:	4b27      	ldr	r3, [pc, #156]	; (8016580 <prvHeapInit+0xac>)
 80164e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f003 0307 	and.w	r3, r3, #7
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d00c      	beq.n	8016508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	3307      	adds	r3, #7
 80164f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	f023 0307 	bic.w	r3, r3, #7
 80164fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80164fc:	68ba      	ldr	r2, [r7, #8]
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	1ad3      	subs	r3, r2, r3
 8016502:	4a1f      	ldr	r2, [pc, #124]	; (8016580 <prvHeapInit+0xac>)
 8016504:	4413      	add	r3, r2
 8016506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801650c:	4a1d      	ldr	r2, [pc, #116]	; (8016584 <prvHeapInit+0xb0>)
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016512:	4b1c      	ldr	r3, [pc, #112]	; (8016584 <prvHeapInit+0xb0>)
 8016514:	2200      	movs	r2, #0
 8016516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	68ba      	ldr	r2, [r7, #8]
 801651c:	4413      	add	r3, r2
 801651e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016520:	2208      	movs	r2, #8
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	1a9b      	subs	r3, r3, r2
 8016526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	f023 0307 	bic.w	r3, r3, #7
 801652e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	4a15      	ldr	r2, [pc, #84]	; (8016588 <prvHeapInit+0xb4>)
 8016534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016536:	4b14      	ldr	r3, [pc, #80]	; (8016588 <prvHeapInit+0xb4>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	2200      	movs	r2, #0
 801653c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801653e:	4b12      	ldr	r3, [pc, #72]	; (8016588 <prvHeapInit+0xb4>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	2200      	movs	r2, #0
 8016544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	68fa      	ldr	r2, [r7, #12]
 801654e:	1ad2      	subs	r2, r2, r3
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016554:	4b0c      	ldr	r3, [pc, #48]	; (8016588 <prvHeapInit+0xb4>)
 8016556:	681a      	ldr	r2, [r3, #0]
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	4a0a      	ldr	r2, [pc, #40]	; (801658c <prvHeapInit+0xb8>)
 8016562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	4a09      	ldr	r2, [pc, #36]	; (8016590 <prvHeapInit+0xbc>)
 801656a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801656c:	4b09      	ldr	r3, [pc, #36]	; (8016594 <prvHeapInit+0xc0>)
 801656e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016572:	601a      	str	r2, [r3, #0]
}
 8016574:	bf00      	nop
 8016576:	3714      	adds	r7, #20
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr
 8016580:	20001058 	.word	0x20001058
 8016584:	20008858 	.word	0x20008858
 8016588:	20008860 	.word	0x20008860
 801658c:	20008868 	.word	0x20008868
 8016590:	20008864 	.word	0x20008864
 8016594:	2000886c 	.word	0x2000886c

08016598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016598:	b480      	push	{r7}
 801659a:	b085      	sub	sp, #20
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80165a0:	4b28      	ldr	r3, [pc, #160]	; (8016644 <prvInsertBlockIntoFreeList+0xac>)
 80165a2:	60fb      	str	r3, [r7, #12]
 80165a4:	e002      	b.n	80165ac <prvInsertBlockIntoFreeList+0x14>
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	60fb      	str	r3, [r7, #12]
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d8f7      	bhi.n	80165a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	68ba      	ldr	r2, [r7, #8]
 80165c0:	4413      	add	r3, r2
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d108      	bne.n	80165da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	685a      	ldr	r2, [r3, #4]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	685b      	ldr	r3, [r3, #4]
 80165d0:	441a      	add	r2, r3
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	68ba      	ldr	r2, [r7, #8]
 80165e4:	441a      	add	r2, r3
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d118      	bne.n	8016620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	4b15      	ldr	r3, [pc, #84]	; (8016648 <prvInsertBlockIntoFreeList+0xb0>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d00d      	beq.n	8016616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	685a      	ldr	r2, [r3, #4]
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	685b      	ldr	r3, [r3, #4]
 8016604:	441a      	add	r2, r3
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	681a      	ldr	r2, [r3, #0]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	601a      	str	r2, [r3, #0]
 8016614:	e008      	b.n	8016628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016616:	4b0c      	ldr	r3, [pc, #48]	; (8016648 <prvInsertBlockIntoFreeList+0xb0>)
 8016618:	681a      	ldr	r2, [r3, #0]
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	601a      	str	r2, [r3, #0]
 801661e:	e003      	b.n	8016628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016628:	68fa      	ldr	r2, [r7, #12]
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	429a      	cmp	r2, r3
 801662e:	d002      	beq.n	8016636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	687a      	ldr	r2, [r7, #4]
 8016634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016636:	bf00      	nop
 8016638:	3714      	adds	r7, #20
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr
 8016642:	bf00      	nop
 8016644:	20008858 	.word	0x20008858
 8016648:	20008860 	.word	0x20008860

0801664c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016650:	2200      	movs	r2, #0
 8016652:	4912      	ldr	r1, [pc, #72]	; (801669c <MX_USB_DEVICE_Init+0x50>)
 8016654:	4812      	ldr	r0, [pc, #72]	; (80166a0 <MX_USB_DEVICE_Init+0x54>)
 8016656:	f7f7 ff29 	bl	800e4ac <USBD_Init>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d001      	beq.n	8016664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016660:	f7eb f972 	bl	8001948 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016664:	490f      	ldr	r1, [pc, #60]	; (80166a4 <MX_USB_DEVICE_Init+0x58>)
 8016666:	480e      	ldr	r0, [pc, #56]	; (80166a0 <MX_USB_DEVICE_Init+0x54>)
 8016668:	f7f7 ff56 	bl	800e518 <USBD_RegisterClass>
 801666c:	4603      	mov	r3, r0
 801666e:	2b00      	cmp	r3, #0
 8016670:	d001      	beq.n	8016676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016672:	f7eb f969 	bl	8001948 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016676:	490c      	ldr	r1, [pc, #48]	; (80166a8 <MX_USB_DEVICE_Init+0x5c>)
 8016678:	4809      	ldr	r0, [pc, #36]	; (80166a0 <MX_USB_DEVICE_Init+0x54>)
 801667a:	f7f7 feab 	bl	800e3d4 <USBD_CDC_RegisterInterface>
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	d001      	beq.n	8016688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016684:	f7eb f960 	bl	8001948 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016688:	4805      	ldr	r0, [pc, #20]	; (80166a0 <MX_USB_DEVICE_Init+0x54>)
 801668a:	f7f7 ff66 	bl	800e55a <USBD_Start>
 801668e:	4603      	mov	r3, r0
 8016690:	2b00      	cmp	r3, #0
 8016692:	d001      	beq.n	8016698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016694:	f7eb f958 	bl	8001948 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016698:	bf00      	nop
 801669a:	bd80      	pop	{r7, pc}
 801669c:	20000134 	.word	0x20000134
 80166a0:	20015724 	.word	0x20015724
 80166a4:	20000018 	.word	0x20000018
 80166a8:	20000120 	.word	0x20000120

080166ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80166b0:	2200      	movs	r2, #0
 80166b2:	4905      	ldr	r1, [pc, #20]	; (80166c8 <CDC_Init_FS+0x1c>)
 80166b4:	4805      	ldr	r0, [pc, #20]	; (80166cc <CDC_Init_FS+0x20>)
 80166b6:	f7f7 fea2 	bl	800e3fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80166ba:	4905      	ldr	r1, [pc, #20]	; (80166d0 <CDC_Init_FS+0x24>)
 80166bc:	4803      	ldr	r0, [pc, #12]	; (80166cc <CDC_Init_FS+0x20>)
 80166be:	f7f7 feb7 	bl	800e430 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80166c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	200161f4 	.word	0x200161f4
 80166cc:	20015724 	.word	0x20015724
 80166d0:	200159f4 	.word	0x200159f4

080166d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80166d4:	b480      	push	{r7}
 80166d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80166d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80166da:	4618      	mov	r0, r3
 80166dc:	46bd      	mov	sp, r7
 80166de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e2:	4770      	bx	lr

080166e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	4603      	mov	r3, r0
 80166ec:	6039      	str	r1, [r7, #0]
 80166ee:	71fb      	strb	r3, [r7, #7]
 80166f0:	4613      	mov	r3, r2
 80166f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80166f4:	79fb      	ldrb	r3, [r7, #7]
 80166f6:	2b23      	cmp	r3, #35	; 0x23
 80166f8:	d84a      	bhi.n	8016790 <CDC_Control_FS+0xac>
 80166fa:	a201      	add	r2, pc, #4	; (adr r2, 8016700 <CDC_Control_FS+0x1c>)
 80166fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016700:	08016791 	.word	0x08016791
 8016704:	08016791 	.word	0x08016791
 8016708:	08016791 	.word	0x08016791
 801670c:	08016791 	.word	0x08016791
 8016710:	08016791 	.word	0x08016791
 8016714:	08016791 	.word	0x08016791
 8016718:	08016791 	.word	0x08016791
 801671c:	08016791 	.word	0x08016791
 8016720:	08016791 	.word	0x08016791
 8016724:	08016791 	.word	0x08016791
 8016728:	08016791 	.word	0x08016791
 801672c:	08016791 	.word	0x08016791
 8016730:	08016791 	.word	0x08016791
 8016734:	08016791 	.word	0x08016791
 8016738:	08016791 	.word	0x08016791
 801673c:	08016791 	.word	0x08016791
 8016740:	08016791 	.word	0x08016791
 8016744:	08016791 	.word	0x08016791
 8016748:	08016791 	.word	0x08016791
 801674c:	08016791 	.word	0x08016791
 8016750:	08016791 	.word	0x08016791
 8016754:	08016791 	.word	0x08016791
 8016758:	08016791 	.word	0x08016791
 801675c:	08016791 	.word	0x08016791
 8016760:	08016791 	.word	0x08016791
 8016764:	08016791 	.word	0x08016791
 8016768:	08016791 	.word	0x08016791
 801676c:	08016791 	.word	0x08016791
 8016770:	08016791 	.word	0x08016791
 8016774:	08016791 	.word	0x08016791
 8016778:	08016791 	.word	0x08016791
 801677c:	08016791 	.word	0x08016791
 8016780:	08016791 	.word	0x08016791
 8016784:	08016791 	.word	0x08016791
 8016788:	08016791 	.word	0x08016791
 801678c:	08016791 	.word	0x08016791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016790:	bf00      	nop
  }

  return (USBD_OK);
 8016792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016794:	4618      	mov	r0, r3
 8016796:	370c      	adds	r7, #12
 8016798:	46bd      	mov	sp, r7
 801679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679e:	4770      	bx	lr

080167a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b082      	sub	sp, #8
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80167aa:	6879      	ldr	r1, [r7, #4]
 80167ac:	4805      	ldr	r0, [pc, #20]	; (80167c4 <CDC_Receive_FS+0x24>)
 80167ae:	f7f7 fe3f 	bl	800e430 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80167b2:	4804      	ldr	r0, [pc, #16]	; (80167c4 <CDC_Receive_FS+0x24>)
 80167b4:	f7f7 fe50 	bl	800e458 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80167b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3708      	adds	r7, #8
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	bf00      	nop
 80167c4:	20015724 	.word	0x20015724

080167c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80167c8:	b480      	push	{r7}
 80167ca:	b087      	sub	sp, #28
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
 80167d2:	4613      	mov	r3, r2
 80167d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80167d6:	2300      	movs	r3, #0
 80167d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80167da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167de:	4618      	mov	r0, r3
 80167e0:	371c      	adds	r7, #28
 80167e2:	46bd      	mov	sp, r7
 80167e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e8:	4770      	bx	lr
	...

080167ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167ec:	b480      	push	{r7}
 80167ee:	b083      	sub	sp, #12
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	4603      	mov	r3, r0
 80167f4:	6039      	str	r1, [r7, #0]
 80167f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	2212      	movs	r2, #18
 80167fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80167fe:	4b03      	ldr	r3, [pc, #12]	; (801680c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016800:	4618      	mov	r0, r3
 8016802:	370c      	adds	r7, #12
 8016804:	46bd      	mov	sp, r7
 8016806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680a:	4770      	bx	lr
 801680c:	20000154 	.word	0x20000154

08016810 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016810:	b480      	push	{r7}
 8016812:	b083      	sub	sp, #12
 8016814:	af00      	add	r7, sp, #0
 8016816:	4603      	mov	r3, r0
 8016818:	6039      	str	r1, [r7, #0]
 801681a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801681c:	683b      	ldr	r3, [r7, #0]
 801681e:	2204      	movs	r2, #4
 8016820:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016822:	4b03      	ldr	r3, [pc, #12]	; (8016830 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016824:	4618      	mov	r0, r3
 8016826:	370c      	adds	r7, #12
 8016828:	46bd      	mov	sp, r7
 801682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682e:	4770      	bx	lr
 8016830:	20000174 	.word	0x20000174

08016834 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b082      	sub	sp, #8
 8016838:	af00      	add	r7, sp, #0
 801683a:	4603      	mov	r3, r0
 801683c:	6039      	str	r1, [r7, #0]
 801683e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016840:	79fb      	ldrb	r3, [r7, #7]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d105      	bne.n	8016852 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016846:	683a      	ldr	r2, [r7, #0]
 8016848:	4907      	ldr	r1, [pc, #28]	; (8016868 <USBD_FS_ProductStrDescriptor+0x34>)
 801684a:	4808      	ldr	r0, [pc, #32]	; (801686c <USBD_FS_ProductStrDescriptor+0x38>)
 801684c:	f7f8 fe7d 	bl	800f54a <USBD_GetString>
 8016850:	e004      	b.n	801685c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016852:	683a      	ldr	r2, [r7, #0]
 8016854:	4904      	ldr	r1, [pc, #16]	; (8016868 <USBD_FS_ProductStrDescriptor+0x34>)
 8016856:	4805      	ldr	r0, [pc, #20]	; (801686c <USBD_FS_ProductStrDescriptor+0x38>)
 8016858:	f7f8 fe77 	bl	800f54a <USBD_GetString>
  }
  return USBD_StrDesc;
 801685c:	4b02      	ldr	r3, [pc, #8]	; (8016868 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801685e:	4618      	mov	r0, r3
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	200169f4 	.word	0x200169f4
 801686c:	0801a2cc 	.word	0x0801a2cc

08016870 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	4603      	mov	r3, r0
 8016878:	6039      	str	r1, [r7, #0]
 801687a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801687c:	683a      	ldr	r2, [r7, #0]
 801687e:	4904      	ldr	r1, [pc, #16]	; (8016890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016880:	4804      	ldr	r0, [pc, #16]	; (8016894 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016882:	f7f8 fe62 	bl	800f54a <USBD_GetString>
  return USBD_StrDesc;
 8016886:	4b02      	ldr	r3, [pc, #8]	; (8016890 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016888:	4618      	mov	r0, r3
 801688a:	3708      	adds	r7, #8
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}
 8016890:	200169f4 	.word	0x200169f4
 8016894:	0801a2e4 	.word	0x0801a2e4

08016898 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b082      	sub	sp, #8
 801689c:	af00      	add	r7, sp, #0
 801689e:	4603      	mov	r3, r0
 80168a0:	6039      	str	r1, [r7, #0]
 80168a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	221a      	movs	r2, #26
 80168a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80168aa:	f000 f855 	bl	8016958 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80168ae:	4b02      	ldr	r3, [pc, #8]	; (80168b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80168b0:	4618      	mov	r0, r3
 80168b2:	3708      	adds	r7, #8
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}
 80168b8:	20000178 	.word	0x20000178

080168bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	4603      	mov	r3, r0
 80168c4:	6039      	str	r1, [r7, #0]
 80168c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80168c8:	79fb      	ldrb	r3, [r7, #7]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d105      	bne.n	80168da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80168ce:	683a      	ldr	r2, [r7, #0]
 80168d0:	4907      	ldr	r1, [pc, #28]	; (80168f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80168d2:	4808      	ldr	r0, [pc, #32]	; (80168f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80168d4:	f7f8 fe39 	bl	800f54a <USBD_GetString>
 80168d8:	e004      	b.n	80168e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80168da:	683a      	ldr	r2, [r7, #0]
 80168dc:	4904      	ldr	r1, [pc, #16]	; (80168f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80168de:	4805      	ldr	r0, [pc, #20]	; (80168f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80168e0:	f7f8 fe33 	bl	800f54a <USBD_GetString>
  }
  return USBD_StrDesc;
 80168e4:	4b02      	ldr	r3, [pc, #8]	; (80168f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3708      	adds	r7, #8
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	bf00      	nop
 80168f0:	200169f4 	.word	0x200169f4
 80168f4:	0801a2f8 	.word	0x0801a2f8

080168f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	4603      	mov	r3, r0
 8016900:	6039      	str	r1, [r7, #0]
 8016902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016904:	79fb      	ldrb	r3, [r7, #7]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d105      	bne.n	8016916 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	4907      	ldr	r1, [pc, #28]	; (801692c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801690e:	4808      	ldr	r0, [pc, #32]	; (8016930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016910:	f7f8 fe1b 	bl	800f54a <USBD_GetString>
 8016914:	e004      	b.n	8016920 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016916:	683a      	ldr	r2, [r7, #0]
 8016918:	4904      	ldr	r1, [pc, #16]	; (801692c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801691a:	4805      	ldr	r0, [pc, #20]	; (8016930 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801691c:	f7f8 fe15 	bl	800f54a <USBD_GetString>
  }
  return USBD_StrDesc;
 8016920:	4b02      	ldr	r3, [pc, #8]	; (801692c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016922:	4618      	mov	r0, r3
 8016924:	3708      	adds	r7, #8
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop
 801692c:	200169f4 	.word	0x200169f4
 8016930:	0801a304 	.word	0x0801a304

08016934 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016934:	b480      	push	{r7}
 8016936:	b083      	sub	sp, #12
 8016938:	af00      	add	r7, sp, #0
 801693a:	4603      	mov	r3, r0
 801693c:	6039      	str	r1, [r7, #0]
 801693e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	220c      	movs	r2, #12
 8016944:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016946:	4b03      	ldr	r3, [pc, #12]	; (8016954 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016948:	4618      	mov	r0, r3
 801694a:	370c      	adds	r7, #12
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr
 8016954:	20000168 	.word	0x20000168

08016958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b084      	sub	sp, #16
 801695c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801695e:	4b0f      	ldr	r3, [pc, #60]	; (801699c <Get_SerialNum+0x44>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016964:	4b0e      	ldr	r3, [pc, #56]	; (80169a0 <Get_SerialNum+0x48>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801696a:	4b0e      	ldr	r3, [pc, #56]	; (80169a4 <Get_SerialNum+0x4c>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	4413      	add	r3, r2
 8016976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d009      	beq.n	8016992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801697e:	2208      	movs	r2, #8
 8016980:	4909      	ldr	r1, [pc, #36]	; (80169a8 <Get_SerialNum+0x50>)
 8016982:	68f8      	ldr	r0, [r7, #12]
 8016984:	f000 f814 	bl	80169b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016988:	2204      	movs	r2, #4
 801698a:	4908      	ldr	r1, [pc, #32]	; (80169ac <Get_SerialNum+0x54>)
 801698c:	68b8      	ldr	r0, [r7, #8]
 801698e:	f000 f80f 	bl	80169b0 <IntToUnicode>
  }
}
 8016992:	bf00      	nop
 8016994:	3710      	adds	r7, #16
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}
 801699a:	bf00      	nop
 801699c:	1ff0f420 	.word	0x1ff0f420
 80169a0:	1ff0f424 	.word	0x1ff0f424
 80169a4:	1ff0f428 	.word	0x1ff0f428
 80169a8:	2000017a 	.word	0x2000017a
 80169ac:	2000018a 	.word	0x2000018a

080169b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169b0:	b480      	push	{r7}
 80169b2:	b087      	sub	sp, #28
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	4613      	mov	r3, r2
 80169bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80169be:	2300      	movs	r3, #0
 80169c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80169c2:	2300      	movs	r3, #0
 80169c4:	75fb      	strb	r3, [r7, #23]
 80169c6:	e027      	b.n	8016a18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	0f1b      	lsrs	r3, r3, #28
 80169cc:	2b09      	cmp	r3, #9
 80169ce:	d80b      	bhi.n	80169e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	0f1b      	lsrs	r3, r3, #28
 80169d4:	b2da      	uxtb	r2, r3
 80169d6:	7dfb      	ldrb	r3, [r7, #23]
 80169d8:	005b      	lsls	r3, r3, #1
 80169da:	4619      	mov	r1, r3
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	440b      	add	r3, r1
 80169e0:	3230      	adds	r2, #48	; 0x30
 80169e2:	b2d2      	uxtb	r2, r2
 80169e4:	701a      	strb	r2, [r3, #0]
 80169e6:	e00a      	b.n	80169fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	0f1b      	lsrs	r3, r3, #28
 80169ec:	b2da      	uxtb	r2, r3
 80169ee:	7dfb      	ldrb	r3, [r7, #23]
 80169f0:	005b      	lsls	r3, r3, #1
 80169f2:	4619      	mov	r1, r3
 80169f4:	68bb      	ldr	r3, [r7, #8]
 80169f6:	440b      	add	r3, r1
 80169f8:	3237      	adds	r2, #55	; 0x37
 80169fa:	b2d2      	uxtb	r2, r2
 80169fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	011b      	lsls	r3, r3, #4
 8016a02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a04:	7dfb      	ldrb	r3, [r7, #23]
 8016a06:	005b      	lsls	r3, r3, #1
 8016a08:	3301      	adds	r3, #1
 8016a0a:	68ba      	ldr	r2, [r7, #8]
 8016a0c:	4413      	add	r3, r2
 8016a0e:	2200      	movs	r2, #0
 8016a10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a12:	7dfb      	ldrb	r3, [r7, #23]
 8016a14:	3301      	adds	r3, #1
 8016a16:	75fb      	strb	r3, [r7, #23]
 8016a18:	7dfa      	ldrb	r2, [r7, #23]
 8016a1a:	79fb      	ldrb	r3, [r7, #7]
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d3d3      	bcc.n	80169c8 <IntToUnicode+0x18>
  }
}
 8016a20:	bf00      	nop
 8016a22:	371c      	adds	r7, #28
 8016a24:	46bd      	mov	sp, r7
 8016a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2a:	4770      	bx	lr

08016a2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b08a      	sub	sp, #40	; 0x28
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016a34:	f107 0314 	add.w	r3, r7, #20
 8016a38:	2200      	movs	r2, #0
 8016a3a:	601a      	str	r2, [r3, #0]
 8016a3c:	605a      	str	r2, [r3, #4]
 8016a3e:	609a      	str	r2, [r3, #8]
 8016a40:	60da      	str	r2, [r3, #12]
 8016a42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016a4c:	d13c      	bne.n	8016ac8 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016a4e:	4b20      	ldr	r3, [pc, #128]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a52:	4a1f      	ldr	r2, [pc, #124]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016a54:	f043 0301 	orr.w	r3, r3, #1
 8016a58:	6313      	str	r3, [r2, #48]	; 0x30
 8016a5a:	4b1d      	ldr	r3, [pc, #116]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a5e:	f003 0301 	and.w	r3, r3, #1
 8016a62:	613b      	str	r3, [r7, #16]
 8016a64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016a66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a6c:	2302      	movs	r3, #2
 8016a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a70:	2300      	movs	r3, #0
 8016a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016a74:	2303      	movs	r3, #3
 8016a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016a78:	230a      	movs	r3, #10
 8016a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016a7c:	f107 0314 	add.w	r3, r7, #20
 8016a80:	4619      	mov	r1, r3
 8016a82:	4814      	ldr	r0, [pc, #80]	; (8016ad4 <HAL_PCD_MspInit+0xa8>)
 8016a84:	f7ef f84e 	bl	8005b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016a88:	4b11      	ldr	r3, [pc, #68]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a8c:	4a10      	ldr	r2, [pc, #64]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a92:	6353      	str	r3, [r2, #52]	; 0x34
 8016a94:	4b0e      	ldr	r3, [pc, #56]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a9c:	60fb      	str	r3, [r7, #12]
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	4b0b      	ldr	r3, [pc, #44]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016aa4:	4a0a      	ldr	r2, [pc, #40]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8016aac:	4b08      	ldr	r3, [pc, #32]	; (8016ad0 <HAL_PCD_MspInit+0xa4>)
 8016aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016ab4:	60bb      	str	r3, [r7, #8]
 8016ab6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016ab8:	2200      	movs	r2, #0
 8016aba:	2105      	movs	r1, #5
 8016abc:	2043      	movs	r0, #67	; 0x43
 8016abe:	f7ee fc63 	bl	8005388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016ac2:	2043      	movs	r0, #67	; 0x43
 8016ac4:	f7ee fc7c 	bl	80053c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016ac8:	bf00      	nop
 8016aca:	3728      	adds	r7, #40	; 0x28
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}
 8016ad0:	40023800 	.word	0x40023800
 8016ad4:	40020000 	.word	0x40020000

08016ad8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016aec:	4619      	mov	r1, r3
 8016aee:	4610      	mov	r0, r2
 8016af0:	f7f7 fd7e 	bl	800e5f0 <USBD_LL_SetupStage>
}
 8016af4:	bf00      	nop
 8016af6:	3708      	adds	r7, #8
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	460b      	mov	r3, r1
 8016b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8016b0e:	78fa      	ldrb	r2, [r7, #3]
 8016b10:	6879      	ldr	r1, [r7, #4]
 8016b12:	4613      	mov	r3, r2
 8016b14:	00db      	lsls	r3, r3, #3
 8016b16:	1a9b      	subs	r3, r3, r2
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	440b      	add	r3, r1
 8016b1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016b20:	681a      	ldr	r2, [r3, #0]
 8016b22:	78fb      	ldrb	r3, [r7, #3]
 8016b24:	4619      	mov	r1, r3
 8016b26:	f7f7 fdb6 	bl	800e696 <USBD_LL_DataOutStage>
}
 8016b2a:	bf00      	nop
 8016b2c:	3708      	adds	r7, #8
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}

08016b32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b32:	b580      	push	{r7, lr}
 8016b34:	b082      	sub	sp, #8
 8016b36:	af00      	add	r7, sp, #0
 8016b38:	6078      	str	r0, [r7, #4]
 8016b3a:	460b      	mov	r3, r1
 8016b3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8016b44:	78fa      	ldrb	r2, [r7, #3]
 8016b46:	6879      	ldr	r1, [r7, #4]
 8016b48:	4613      	mov	r3, r2
 8016b4a:	00db      	lsls	r3, r3, #3
 8016b4c:	1a9b      	subs	r3, r3, r2
 8016b4e:	009b      	lsls	r3, r3, #2
 8016b50:	440b      	add	r3, r1
 8016b52:	3348      	adds	r3, #72	; 0x48
 8016b54:	681a      	ldr	r2, [r3, #0]
 8016b56:	78fb      	ldrb	r3, [r7, #3]
 8016b58:	4619      	mov	r1, r3
 8016b5a:	f7f7 fdff 	bl	800e75c <USBD_LL_DataInStage>
}
 8016b5e:	bf00      	nop
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b66:	b580      	push	{r7, lr}
 8016b68:	b082      	sub	sp, #8
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7f7 ff03 	bl	800e980 <USBD_LL_SOF>
}
 8016b7a:	bf00      	nop
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b084      	sub	sp, #16
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b8a:	2301      	movs	r3, #1
 8016b8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d102      	bne.n	8016b9c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016b96:	2300      	movs	r3, #0
 8016b98:	73fb      	strb	r3, [r7, #15]
 8016b9a:	e008      	b.n	8016bae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	68db      	ldr	r3, [r3, #12]
 8016ba0:	2b02      	cmp	r3, #2
 8016ba2:	d102      	bne.n	8016baa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	73fb      	strb	r3, [r7, #15]
 8016ba8:	e001      	b.n	8016bae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016baa:	f7ea fecd 	bl	8001948 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016bb4:	7bfa      	ldrb	r2, [r7, #15]
 8016bb6:	4611      	mov	r1, r2
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7f7 fea6 	bl	800e90a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f7f7 fe5f 	bl	800e888 <USBD_LL_Reset>
}
 8016bca:	bf00      	nop
 8016bcc:	3710      	adds	r7, #16
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}
	...

08016bd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7f7 fea1 	bl	800e92a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	6812      	ldr	r2, [r2, #0]
 8016bf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016bfa:	f043 0301 	orr.w	r3, r3, #1
 8016bfe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	6a1b      	ldr	r3, [r3, #32]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d005      	beq.n	8016c14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c08:	4b04      	ldr	r3, [pc, #16]	; (8016c1c <HAL_PCD_SuspendCallback+0x48>)
 8016c0a:	691b      	ldr	r3, [r3, #16]
 8016c0c:	4a03      	ldr	r2, [pc, #12]	; (8016c1c <HAL_PCD_SuspendCallback+0x48>)
 8016c0e:	f043 0306 	orr.w	r3, r3, #6
 8016c12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c14:	bf00      	nop
 8016c16:	3708      	adds	r7, #8
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}
 8016c1c:	e000ed00 	.word	0xe000ed00

08016c20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7f7 fe90 	bl	800e954 <USBD_LL_Resume>
}
 8016c34:	bf00      	nop
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b082      	sub	sp, #8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	460b      	mov	r3, r1
 8016c46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c4e:	78fa      	ldrb	r2, [r7, #3]
 8016c50:	4611      	mov	r1, r2
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7f7 febb 	bl	800e9ce <USBD_LL_IsoOUTIncomplete>
}
 8016c58:	bf00      	nop
 8016c5a:	3708      	adds	r7, #8
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	460b      	mov	r3, r1
 8016c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c72:	78fa      	ldrb	r2, [r7, #3]
 8016c74:	4611      	mov	r1, r2
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7f7 fe9c 	bl	800e9b4 <USBD_LL_IsoINIncomplete>
}
 8016c7c:	bf00      	nop
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7f7 fea8 	bl	800e9e8 <USBD_LL_DevConnected>
}
 8016c98:	bf00      	nop
 8016c9a:	3708      	adds	r7, #8
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f7f7 fea5 	bl	800e9fe <USBD_LL_DevDisconnected>
}
 8016cb4:	bf00      	nop
 8016cb6:	3708      	adds	r7, #8
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	781b      	ldrb	r3, [r3, #0]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d13c      	bne.n	8016d46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016ccc:	4a20      	ldr	r2, [pc, #128]	; (8016d50 <USBD_LL_Init+0x94>)
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	4a1e      	ldr	r2, [pc, #120]	; (8016d50 <USBD_LL_Init+0x94>)
 8016cd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016cdc:	4b1c      	ldr	r3, [pc, #112]	; (8016d50 <USBD_LL_Init+0x94>)
 8016cde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016ce2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8016ce4:	4b1a      	ldr	r3, [pc, #104]	; (8016d50 <USBD_LL_Init+0x94>)
 8016ce6:	2206      	movs	r2, #6
 8016ce8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016cea:	4b19      	ldr	r3, [pc, #100]	; (8016d50 <USBD_LL_Init+0x94>)
 8016cec:	2202      	movs	r2, #2
 8016cee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016cf0:	4b17      	ldr	r3, [pc, #92]	; (8016d50 <USBD_LL_Init+0x94>)
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016cf6:	4b16      	ldr	r3, [pc, #88]	; (8016d50 <USBD_LL_Init+0x94>)
 8016cf8:	2202      	movs	r2, #2
 8016cfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016cfc:	4b14      	ldr	r3, [pc, #80]	; (8016d50 <USBD_LL_Init+0x94>)
 8016cfe:	2200      	movs	r2, #0
 8016d00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016d02:	4b13      	ldr	r3, [pc, #76]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d04:	2200      	movs	r2, #0
 8016d06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016d08:	4b11      	ldr	r3, [pc, #68]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016d0e:	4b10      	ldr	r3, [pc, #64]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d10:	2200      	movs	r2, #0
 8016d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016d14:	4b0e      	ldr	r3, [pc, #56]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d16:	2200      	movs	r2, #0
 8016d18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016d1a:	480d      	ldr	r0, [pc, #52]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d1c:	f7ef f8df 	bl	8005ede <HAL_PCD_Init>
 8016d20:	4603      	mov	r3, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d001      	beq.n	8016d2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016d26:	f7ea fe0f 	bl	8001948 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016d2a:	2180      	movs	r1, #128	; 0x80
 8016d2c:	4808      	ldr	r0, [pc, #32]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d2e:	f7f0 fa60 	bl	80071f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016d32:	2240      	movs	r2, #64	; 0x40
 8016d34:	2100      	movs	r1, #0
 8016d36:	4806      	ldr	r0, [pc, #24]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d38:	f7f0 fa14 	bl	8007164 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016d3c:	2280      	movs	r2, #128	; 0x80
 8016d3e:	2101      	movs	r1, #1
 8016d40:	4803      	ldr	r0, [pc, #12]	; (8016d50 <USBD_LL_Init+0x94>)
 8016d42:	f7f0 fa0f 	bl	8007164 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016d46:	2300      	movs	r3, #0
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3708      	adds	r7, #8
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	20016bf4 	.word	0x20016bf4

08016d54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b084      	sub	sp, #16
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d60:	2300      	movs	r3, #0
 8016d62:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7ef f9db 	bl	8006126 <HAL_PCD_Start>
 8016d70:	4603      	mov	r3, r0
 8016d72:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016d74:	7bfb      	ldrb	r3, [r7, #15]
 8016d76:	4618      	mov	r0, r3
 8016d78:	f000 f97e 	bl	8017078 <USBD_Get_USB_Status>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3710      	adds	r7, #16
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}

08016d8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016d8a:	b580      	push	{r7, lr}
 8016d8c:	b084      	sub	sp, #16
 8016d8e:	af00      	add	r7, sp, #0
 8016d90:	6078      	str	r0, [r7, #4]
 8016d92:	4608      	mov	r0, r1
 8016d94:	4611      	mov	r1, r2
 8016d96:	461a      	mov	r2, r3
 8016d98:	4603      	mov	r3, r0
 8016d9a:	70fb      	strb	r3, [r7, #3]
 8016d9c:	460b      	mov	r3, r1
 8016d9e:	70bb      	strb	r3, [r7, #2]
 8016da0:	4613      	mov	r3, r2
 8016da2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016da4:	2300      	movs	r3, #0
 8016da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016da8:	2300      	movs	r3, #0
 8016daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016db2:	78bb      	ldrb	r3, [r7, #2]
 8016db4:	883a      	ldrh	r2, [r7, #0]
 8016db6:	78f9      	ldrb	r1, [r7, #3]
 8016db8:	f7ef fddb 	bl	8006972 <HAL_PCD_EP_Open>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dc0:	7bfb      	ldrb	r3, [r7, #15]
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f000 f958 	bl	8017078 <USBD_Get_USB_Status>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3710      	adds	r7, #16
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}

08016dd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dd6:	b580      	push	{r7, lr}
 8016dd8:	b084      	sub	sp, #16
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	6078      	str	r0, [r7, #4]
 8016dde:	460b      	mov	r3, r1
 8016de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016de2:	2300      	movs	r3, #0
 8016de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016de6:	2300      	movs	r3, #0
 8016de8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016df0:	78fa      	ldrb	r2, [r7, #3]
 8016df2:	4611      	mov	r1, r2
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7ef fe24 	bl	8006a42 <HAL_PCD_EP_Close>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016dfe:	7bfb      	ldrb	r3, [r7, #15]
 8016e00:	4618      	mov	r0, r3
 8016e02:	f000 f939 	bl	8017078 <USBD_Get_USB_Status>
 8016e06:	4603      	mov	r3, r0
 8016e08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	3710      	adds	r7, #16
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}

08016e14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b084      	sub	sp, #16
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e20:	2300      	movs	r3, #0
 8016e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e24:	2300      	movs	r3, #0
 8016e26:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e2e:	78fa      	ldrb	r2, [r7, #3]
 8016e30:	4611      	mov	r1, r2
 8016e32:	4618      	mov	r0, r3
 8016e34:	f7ef fefc 	bl	8006c30 <HAL_PCD_EP_SetStall>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e3c:	7bfb      	ldrb	r3, [r7, #15]
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f000 f91a 	bl	8017078 <USBD_Get_USB_Status>
 8016e44:	4603      	mov	r3, r0
 8016e46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3710      	adds	r7, #16
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}

08016e52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e52:	b580      	push	{r7, lr}
 8016e54:	b084      	sub	sp, #16
 8016e56:	af00      	add	r7, sp, #0
 8016e58:	6078      	str	r0, [r7, #4]
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e62:	2300      	movs	r3, #0
 8016e64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e6c:	78fa      	ldrb	r2, [r7, #3]
 8016e6e:	4611      	mov	r1, r2
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7ef ff41 	bl	8006cf8 <HAL_PCD_EP_ClrStall>
 8016e76:	4603      	mov	r3, r0
 8016e78:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016e7a:	7bfb      	ldrb	r3, [r7, #15]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f000 f8fb 	bl	8017078 <USBD_Get_USB_Status>
 8016e82:	4603      	mov	r3, r0
 8016e84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e90:	b480      	push	{r7}
 8016e92:	b085      	sub	sp, #20
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	460b      	mov	r3, r1
 8016e9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ea2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	da0b      	bge.n	8016ec4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016eac:	78fb      	ldrb	r3, [r7, #3]
 8016eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016eb2:	68f9      	ldr	r1, [r7, #12]
 8016eb4:	4613      	mov	r3, r2
 8016eb6:	00db      	lsls	r3, r3, #3
 8016eb8:	1a9b      	subs	r3, r3, r2
 8016eba:	009b      	lsls	r3, r3, #2
 8016ebc:	440b      	add	r3, r1
 8016ebe:	333e      	adds	r3, #62	; 0x3e
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	e00b      	b.n	8016edc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016ec4:	78fb      	ldrb	r3, [r7, #3]
 8016ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016eca:	68f9      	ldr	r1, [r7, #12]
 8016ecc:	4613      	mov	r3, r2
 8016ece:	00db      	lsls	r3, r3, #3
 8016ed0:	1a9b      	subs	r3, r3, r2
 8016ed2:	009b      	lsls	r3, r3, #2
 8016ed4:	440b      	add	r3, r1
 8016ed6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016eda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016edc:	4618      	mov	r0, r3
 8016ede:	3714      	adds	r7, #20
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee6:	4770      	bx	lr

08016ee8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b084      	sub	sp, #16
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	460b      	mov	r3, r1
 8016ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ef8:	2300      	movs	r3, #0
 8016efa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016f02:	78fa      	ldrb	r2, [r7, #3]
 8016f04:	4611      	mov	r1, r2
 8016f06:	4618      	mov	r0, r3
 8016f08:	f7ef fd0e 	bl	8006928 <HAL_PCD_SetAddress>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f10:	7bfb      	ldrb	r3, [r7, #15]
 8016f12:	4618      	mov	r0, r3
 8016f14:	f000 f8b0 	bl	8017078 <USBD_Get_USB_Status>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f1e:	4618      	mov	r0, r3
 8016f20:	3710      	adds	r7, #16
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}

08016f26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f26:	b580      	push	{r7, lr}
 8016f28:	b086      	sub	sp, #24
 8016f2a:	af00      	add	r7, sp, #0
 8016f2c:	60f8      	str	r0, [r7, #12]
 8016f2e:	607a      	str	r2, [r7, #4]
 8016f30:	603b      	str	r3, [r7, #0]
 8016f32:	460b      	mov	r3, r1
 8016f34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f36:	2300      	movs	r3, #0
 8016f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016f44:	7af9      	ldrb	r1, [r7, #11]
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	f7ef fe27 	bl	8006b9c <HAL_PCD_EP_Transmit>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016f52:	7dfb      	ldrb	r3, [r7, #23]
 8016f54:	4618      	mov	r0, r3
 8016f56:	f000 f88f 	bl	8017078 <USBD_Get_USB_Status>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3718      	adds	r7, #24
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b086      	sub	sp, #24
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	60f8      	str	r0, [r7, #12]
 8016f70:	607a      	str	r2, [r7, #4]
 8016f72:	603b      	str	r3, [r7, #0]
 8016f74:	460b      	mov	r3, r1
 8016f76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f78:	2300      	movs	r3, #0
 8016f7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016f86:	7af9      	ldrb	r1, [r7, #11]
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	f7ef fda3 	bl	8006ad6 <HAL_PCD_EP_Receive>
 8016f90:	4603      	mov	r3, r0
 8016f92:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016f94:	7dfb      	ldrb	r3, [r7, #23]
 8016f96:	4618      	mov	r0, r3
 8016f98:	f000 f86e 	bl	8017078 <USBD_Get_USB_Status>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016fa0:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3718      	adds	r7, #24
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}

08016faa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016faa:	b580      	push	{r7, lr}
 8016fac:	b082      	sub	sp, #8
 8016fae:	af00      	add	r7, sp, #0
 8016fb0:	6078      	str	r0, [r7, #4]
 8016fb2:	460b      	mov	r3, r1
 8016fb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016fbc:	78fa      	ldrb	r2, [r7, #3]
 8016fbe:	4611      	mov	r1, r2
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7ef fdd3 	bl	8006b6c <HAL_PCD_EP_GetRxCount>
 8016fc6:	4603      	mov	r3, r0
}
 8016fc8:	4618      	mov	r0, r3
 8016fca:	3708      	adds	r7, #8
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b082      	sub	sp, #8
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016fdc:	78fb      	ldrb	r3, [r7, #3]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d002      	beq.n	8016fe8 <HAL_PCDEx_LPM_Callback+0x18>
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d01f      	beq.n	8017026 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8016fe6:	e03b      	b.n	8017060 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	6a1b      	ldr	r3, [r3, #32]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d007      	beq.n	8017000 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8016ff0:	f000 f83c 	bl	801706c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016ff4:	4b1c      	ldr	r3, [pc, #112]	; (8017068 <HAL_PCDEx_LPM_Callback+0x98>)
 8016ff6:	691b      	ldr	r3, [r3, #16]
 8016ff8:	4a1b      	ldr	r2, [pc, #108]	; (8017068 <HAL_PCDEx_LPM_Callback+0x98>)
 8016ffa:	f023 0306 	bic.w	r3, r3, #6
 8016ffe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	6812      	ldr	r2, [r2, #0]
 801700e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017012:	f023 0301 	bic.w	r3, r3, #1
 8017016:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801701e:	4618      	mov	r0, r3
 8017020:	f7f7 fc98 	bl	800e954 <USBD_LL_Resume>
    break;
 8017024:	e01c      	b.n	8017060 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	687a      	ldr	r2, [r7, #4]
 8017032:	6812      	ldr	r2, [r2, #0]
 8017034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017038:	f043 0301 	orr.w	r3, r3, #1
 801703c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017044:	4618      	mov	r0, r3
 8017046:	f7f7 fc70 	bl	800e92a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6a1b      	ldr	r3, [r3, #32]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d005      	beq.n	801705e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017052:	4b05      	ldr	r3, [pc, #20]	; (8017068 <HAL_PCDEx_LPM_Callback+0x98>)
 8017054:	691b      	ldr	r3, [r3, #16]
 8017056:	4a04      	ldr	r2, [pc, #16]	; (8017068 <HAL_PCDEx_LPM_Callback+0x98>)
 8017058:	f043 0306 	orr.w	r3, r3, #6
 801705c:	6113      	str	r3, [r2, #16]
    break;   
 801705e:	bf00      	nop
}
 8017060:	bf00      	nop
 8017062:	3708      	adds	r7, #8
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}
 8017068:	e000ed00 	.word	0xe000ed00

0801706c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017070:	f7ea fa28 	bl	80014c4 <SystemClock_Config>
}
 8017074:	bf00      	nop
 8017076:	bd80      	pop	{r7, pc}

08017078 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017078:	b480      	push	{r7}
 801707a:	b085      	sub	sp, #20
 801707c:	af00      	add	r7, sp, #0
 801707e:	4603      	mov	r3, r0
 8017080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017082:	2300      	movs	r3, #0
 8017084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017086:	79fb      	ldrb	r3, [r7, #7]
 8017088:	2b03      	cmp	r3, #3
 801708a:	d817      	bhi.n	80170bc <USBD_Get_USB_Status+0x44>
 801708c:	a201      	add	r2, pc, #4	; (adr r2, 8017094 <USBD_Get_USB_Status+0x1c>)
 801708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017092:	bf00      	nop
 8017094:	080170a5 	.word	0x080170a5
 8017098:	080170ab 	.word	0x080170ab
 801709c:	080170b1 	.word	0x080170b1
 80170a0:	080170b7 	.word	0x080170b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80170a4:	2300      	movs	r3, #0
 80170a6:	73fb      	strb	r3, [r7, #15]
    break;
 80170a8:	e00b      	b.n	80170c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80170aa:	2303      	movs	r3, #3
 80170ac:	73fb      	strb	r3, [r7, #15]
    break;
 80170ae:	e008      	b.n	80170c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80170b0:	2301      	movs	r3, #1
 80170b2:	73fb      	strb	r3, [r7, #15]
    break;
 80170b4:	e005      	b.n	80170c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80170b6:	2303      	movs	r3, #3
 80170b8:	73fb      	strb	r3, [r7, #15]
    break;
 80170ba:	e002      	b.n	80170c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80170bc:	2303      	movs	r3, #3
 80170be:	73fb      	strb	r3, [r7, #15]
    break;
 80170c0:	bf00      	nop
  }
  return usb_status;
 80170c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3714      	adds	r7, #20
 80170c8:	46bd      	mov	sp, r7
 80170ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ce:	4770      	bx	lr

080170d0 <__errno>:
 80170d0:	4b01      	ldr	r3, [pc, #4]	; (80170d8 <__errno+0x8>)
 80170d2:	6818      	ldr	r0, [r3, #0]
 80170d4:	4770      	bx	lr
 80170d6:	bf00      	nop
 80170d8:	20000194 	.word	0x20000194

080170dc <__libc_init_array>:
 80170dc:	b570      	push	{r4, r5, r6, lr}
 80170de:	4e0d      	ldr	r6, [pc, #52]	; (8017114 <__libc_init_array+0x38>)
 80170e0:	4c0d      	ldr	r4, [pc, #52]	; (8017118 <__libc_init_array+0x3c>)
 80170e2:	1ba4      	subs	r4, r4, r6
 80170e4:	10a4      	asrs	r4, r4, #2
 80170e6:	2500      	movs	r5, #0
 80170e8:	42a5      	cmp	r5, r4
 80170ea:	d109      	bne.n	8017100 <__libc_init_array+0x24>
 80170ec:	4e0b      	ldr	r6, [pc, #44]	; (801711c <__libc_init_array+0x40>)
 80170ee:	4c0c      	ldr	r4, [pc, #48]	; (8017120 <__libc_init_array+0x44>)
 80170f0:	f002 fe26 	bl	8019d40 <_init>
 80170f4:	1ba4      	subs	r4, r4, r6
 80170f6:	10a4      	asrs	r4, r4, #2
 80170f8:	2500      	movs	r5, #0
 80170fa:	42a5      	cmp	r5, r4
 80170fc:	d105      	bne.n	801710a <__libc_init_array+0x2e>
 80170fe:	bd70      	pop	{r4, r5, r6, pc}
 8017100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017104:	4798      	blx	r3
 8017106:	3501      	adds	r5, #1
 8017108:	e7ee      	b.n	80170e8 <__libc_init_array+0xc>
 801710a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801710e:	4798      	blx	r3
 8017110:	3501      	adds	r5, #1
 8017112:	e7f2      	b.n	80170fa <__libc_init_array+0x1e>
 8017114:	0801a5d8 	.word	0x0801a5d8
 8017118:	0801a5d8 	.word	0x0801a5d8
 801711c:	0801a5d8 	.word	0x0801a5d8
 8017120:	0801a5dc 	.word	0x0801a5dc

08017124 <malloc>:
 8017124:	4b02      	ldr	r3, [pc, #8]	; (8017130 <malloc+0xc>)
 8017126:	4601      	mov	r1, r0
 8017128:	6818      	ldr	r0, [r3, #0]
 801712a:	f000 b86d 	b.w	8017208 <_malloc_r>
 801712e:	bf00      	nop
 8017130:	20000194 	.word	0x20000194

08017134 <free>:
 8017134:	4b02      	ldr	r3, [pc, #8]	; (8017140 <free+0xc>)
 8017136:	4601      	mov	r1, r0
 8017138:	6818      	ldr	r0, [r3, #0]
 801713a:	f000 b817 	b.w	801716c <_free_r>
 801713e:	bf00      	nop
 8017140:	20000194 	.word	0x20000194

08017144 <memcpy>:
 8017144:	b510      	push	{r4, lr}
 8017146:	1e43      	subs	r3, r0, #1
 8017148:	440a      	add	r2, r1
 801714a:	4291      	cmp	r1, r2
 801714c:	d100      	bne.n	8017150 <memcpy+0xc>
 801714e:	bd10      	pop	{r4, pc}
 8017150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017158:	e7f7      	b.n	801714a <memcpy+0x6>

0801715a <memset>:
 801715a:	4402      	add	r2, r0
 801715c:	4603      	mov	r3, r0
 801715e:	4293      	cmp	r3, r2
 8017160:	d100      	bne.n	8017164 <memset+0xa>
 8017162:	4770      	bx	lr
 8017164:	f803 1b01 	strb.w	r1, [r3], #1
 8017168:	e7f9      	b.n	801715e <memset+0x4>
	...

0801716c <_free_r>:
 801716c:	b538      	push	{r3, r4, r5, lr}
 801716e:	4605      	mov	r5, r0
 8017170:	2900      	cmp	r1, #0
 8017172:	d045      	beq.n	8017200 <_free_r+0x94>
 8017174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017178:	1f0c      	subs	r4, r1, #4
 801717a:	2b00      	cmp	r3, #0
 801717c:	bfb8      	it	lt
 801717e:	18e4      	addlt	r4, r4, r3
 8017180:	f000 fbe2 	bl	8017948 <__malloc_lock>
 8017184:	4a1f      	ldr	r2, [pc, #124]	; (8017204 <_free_r+0x98>)
 8017186:	6813      	ldr	r3, [r2, #0]
 8017188:	4610      	mov	r0, r2
 801718a:	b933      	cbnz	r3, 801719a <_free_r+0x2e>
 801718c:	6063      	str	r3, [r4, #4]
 801718e:	6014      	str	r4, [r2, #0]
 8017190:	4628      	mov	r0, r5
 8017192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017196:	f000 bbd8 	b.w	801794a <__malloc_unlock>
 801719a:	42a3      	cmp	r3, r4
 801719c:	d90c      	bls.n	80171b8 <_free_r+0x4c>
 801719e:	6821      	ldr	r1, [r4, #0]
 80171a0:	1862      	adds	r2, r4, r1
 80171a2:	4293      	cmp	r3, r2
 80171a4:	bf04      	itt	eq
 80171a6:	681a      	ldreq	r2, [r3, #0]
 80171a8:	685b      	ldreq	r3, [r3, #4]
 80171aa:	6063      	str	r3, [r4, #4]
 80171ac:	bf04      	itt	eq
 80171ae:	1852      	addeq	r2, r2, r1
 80171b0:	6022      	streq	r2, [r4, #0]
 80171b2:	6004      	str	r4, [r0, #0]
 80171b4:	e7ec      	b.n	8017190 <_free_r+0x24>
 80171b6:	4613      	mov	r3, r2
 80171b8:	685a      	ldr	r2, [r3, #4]
 80171ba:	b10a      	cbz	r2, 80171c0 <_free_r+0x54>
 80171bc:	42a2      	cmp	r2, r4
 80171be:	d9fa      	bls.n	80171b6 <_free_r+0x4a>
 80171c0:	6819      	ldr	r1, [r3, #0]
 80171c2:	1858      	adds	r0, r3, r1
 80171c4:	42a0      	cmp	r0, r4
 80171c6:	d10b      	bne.n	80171e0 <_free_r+0x74>
 80171c8:	6820      	ldr	r0, [r4, #0]
 80171ca:	4401      	add	r1, r0
 80171cc:	1858      	adds	r0, r3, r1
 80171ce:	4282      	cmp	r2, r0
 80171d0:	6019      	str	r1, [r3, #0]
 80171d2:	d1dd      	bne.n	8017190 <_free_r+0x24>
 80171d4:	6810      	ldr	r0, [r2, #0]
 80171d6:	6852      	ldr	r2, [r2, #4]
 80171d8:	605a      	str	r2, [r3, #4]
 80171da:	4401      	add	r1, r0
 80171dc:	6019      	str	r1, [r3, #0]
 80171de:	e7d7      	b.n	8017190 <_free_r+0x24>
 80171e0:	d902      	bls.n	80171e8 <_free_r+0x7c>
 80171e2:	230c      	movs	r3, #12
 80171e4:	602b      	str	r3, [r5, #0]
 80171e6:	e7d3      	b.n	8017190 <_free_r+0x24>
 80171e8:	6820      	ldr	r0, [r4, #0]
 80171ea:	1821      	adds	r1, r4, r0
 80171ec:	428a      	cmp	r2, r1
 80171ee:	bf04      	itt	eq
 80171f0:	6811      	ldreq	r1, [r2, #0]
 80171f2:	6852      	ldreq	r2, [r2, #4]
 80171f4:	6062      	str	r2, [r4, #4]
 80171f6:	bf04      	itt	eq
 80171f8:	1809      	addeq	r1, r1, r0
 80171fa:	6021      	streq	r1, [r4, #0]
 80171fc:	605c      	str	r4, [r3, #4]
 80171fe:	e7c7      	b.n	8017190 <_free_r+0x24>
 8017200:	bd38      	pop	{r3, r4, r5, pc}
 8017202:	bf00      	nop
 8017204:	20008870 	.word	0x20008870

08017208 <_malloc_r>:
 8017208:	b570      	push	{r4, r5, r6, lr}
 801720a:	1ccd      	adds	r5, r1, #3
 801720c:	f025 0503 	bic.w	r5, r5, #3
 8017210:	3508      	adds	r5, #8
 8017212:	2d0c      	cmp	r5, #12
 8017214:	bf38      	it	cc
 8017216:	250c      	movcc	r5, #12
 8017218:	2d00      	cmp	r5, #0
 801721a:	4606      	mov	r6, r0
 801721c:	db01      	blt.n	8017222 <_malloc_r+0x1a>
 801721e:	42a9      	cmp	r1, r5
 8017220:	d903      	bls.n	801722a <_malloc_r+0x22>
 8017222:	230c      	movs	r3, #12
 8017224:	6033      	str	r3, [r6, #0]
 8017226:	2000      	movs	r0, #0
 8017228:	bd70      	pop	{r4, r5, r6, pc}
 801722a:	f000 fb8d 	bl	8017948 <__malloc_lock>
 801722e:	4a21      	ldr	r2, [pc, #132]	; (80172b4 <_malloc_r+0xac>)
 8017230:	6814      	ldr	r4, [r2, #0]
 8017232:	4621      	mov	r1, r4
 8017234:	b991      	cbnz	r1, 801725c <_malloc_r+0x54>
 8017236:	4c20      	ldr	r4, [pc, #128]	; (80172b8 <_malloc_r+0xb0>)
 8017238:	6823      	ldr	r3, [r4, #0]
 801723a:	b91b      	cbnz	r3, 8017244 <_malloc_r+0x3c>
 801723c:	4630      	mov	r0, r6
 801723e:	f000 f8a1 	bl	8017384 <_sbrk_r>
 8017242:	6020      	str	r0, [r4, #0]
 8017244:	4629      	mov	r1, r5
 8017246:	4630      	mov	r0, r6
 8017248:	f000 f89c 	bl	8017384 <_sbrk_r>
 801724c:	1c43      	adds	r3, r0, #1
 801724e:	d124      	bne.n	801729a <_malloc_r+0x92>
 8017250:	230c      	movs	r3, #12
 8017252:	6033      	str	r3, [r6, #0]
 8017254:	4630      	mov	r0, r6
 8017256:	f000 fb78 	bl	801794a <__malloc_unlock>
 801725a:	e7e4      	b.n	8017226 <_malloc_r+0x1e>
 801725c:	680b      	ldr	r3, [r1, #0]
 801725e:	1b5b      	subs	r3, r3, r5
 8017260:	d418      	bmi.n	8017294 <_malloc_r+0x8c>
 8017262:	2b0b      	cmp	r3, #11
 8017264:	d90f      	bls.n	8017286 <_malloc_r+0x7e>
 8017266:	600b      	str	r3, [r1, #0]
 8017268:	50cd      	str	r5, [r1, r3]
 801726a:	18cc      	adds	r4, r1, r3
 801726c:	4630      	mov	r0, r6
 801726e:	f000 fb6c 	bl	801794a <__malloc_unlock>
 8017272:	f104 000b 	add.w	r0, r4, #11
 8017276:	1d23      	adds	r3, r4, #4
 8017278:	f020 0007 	bic.w	r0, r0, #7
 801727c:	1ac3      	subs	r3, r0, r3
 801727e:	d0d3      	beq.n	8017228 <_malloc_r+0x20>
 8017280:	425a      	negs	r2, r3
 8017282:	50e2      	str	r2, [r4, r3]
 8017284:	e7d0      	b.n	8017228 <_malloc_r+0x20>
 8017286:	428c      	cmp	r4, r1
 8017288:	684b      	ldr	r3, [r1, #4]
 801728a:	bf16      	itet	ne
 801728c:	6063      	strne	r3, [r4, #4]
 801728e:	6013      	streq	r3, [r2, #0]
 8017290:	460c      	movne	r4, r1
 8017292:	e7eb      	b.n	801726c <_malloc_r+0x64>
 8017294:	460c      	mov	r4, r1
 8017296:	6849      	ldr	r1, [r1, #4]
 8017298:	e7cc      	b.n	8017234 <_malloc_r+0x2c>
 801729a:	1cc4      	adds	r4, r0, #3
 801729c:	f024 0403 	bic.w	r4, r4, #3
 80172a0:	42a0      	cmp	r0, r4
 80172a2:	d005      	beq.n	80172b0 <_malloc_r+0xa8>
 80172a4:	1a21      	subs	r1, r4, r0
 80172a6:	4630      	mov	r0, r6
 80172a8:	f000 f86c 	bl	8017384 <_sbrk_r>
 80172ac:	3001      	adds	r0, #1
 80172ae:	d0cf      	beq.n	8017250 <_malloc_r+0x48>
 80172b0:	6025      	str	r5, [r4, #0]
 80172b2:	e7db      	b.n	801726c <_malloc_r+0x64>
 80172b4:	20008870 	.word	0x20008870
 80172b8:	20008874 	.word	0x20008874

080172bc <_puts_r>:
 80172bc:	b570      	push	{r4, r5, r6, lr}
 80172be:	460e      	mov	r6, r1
 80172c0:	4605      	mov	r5, r0
 80172c2:	b118      	cbz	r0, 80172cc <_puts_r+0x10>
 80172c4:	6983      	ldr	r3, [r0, #24]
 80172c6:	b90b      	cbnz	r3, 80172cc <_puts_r+0x10>
 80172c8:	f000 fa50 	bl	801776c <__sinit>
 80172cc:	69ab      	ldr	r3, [r5, #24]
 80172ce:	68ac      	ldr	r4, [r5, #8]
 80172d0:	b913      	cbnz	r3, 80172d8 <_puts_r+0x1c>
 80172d2:	4628      	mov	r0, r5
 80172d4:	f000 fa4a 	bl	801776c <__sinit>
 80172d8:	4b23      	ldr	r3, [pc, #140]	; (8017368 <_puts_r+0xac>)
 80172da:	429c      	cmp	r4, r3
 80172dc:	d117      	bne.n	801730e <_puts_r+0x52>
 80172de:	686c      	ldr	r4, [r5, #4]
 80172e0:	89a3      	ldrh	r3, [r4, #12]
 80172e2:	071b      	lsls	r3, r3, #28
 80172e4:	d51d      	bpl.n	8017322 <_puts_r+0x66>
 80172e6:	6923      	ldr	r3, [r4, #16]
 80172e8:	b1db      	cbz	r3, 8017322 <_puts_r+0x66>
 80172ea:	3e01      	subs	r6, #1
 80172ec:	68a3      	ldr	r3, [r4, #8]
 80172ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80172f2:	3b01      	subs	r3, #1
 80172f4:	60a3      	str	r3, [r4, #8]
 80172f6:	b9e9      	cbnz	r1, 8017334 <_puts_r+0x78>
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	da2e      	bge.n	801735a <_puts_r+0x9e>
 80172fc:	4622      	mov	r2, r4
 80172fe:	210a      	movs	r1, #10
 8017300:	4628      	mov	r0, r5
 8017302:	f000 f883 	bl	801740c <__swbuf_r>
 8017306:	3001      	adds	r0, #1
 8017308:	d011      	beq.n	801732e <_puts_r+0x72>
 801730a:	200a      	movs	r0, #10
 801730c:	e011      	b.n	8017332 <_puts_r+0x76>
 801730e:	4b17      	ldr	r3, [pc, #92]	; (801736c <_puts_r+0xb0>)
 8017310:	429c      	cmp	r4, r3
 8017312:	d101      	bne.n	8017318 <_puts_r+0x5c>
 8017314:	68ac      	ldr	r4, [r5, #8]
 8017316:	e7e3      	b.n	80172e0 <_puts_r+0x24>
 8017318:	4b15      	ldr	r3, [pc, #84]	; (8017370 <_puts_r+0xb4>)
 801731a:	429c      	cmp	r4, r3
 801731c:	bf08      	it	eq
 801731e:	68ec      	ldreq	r4, [r5, #12]
 8017320:	e7de      	b.n	80172e0 <_puts_r+0x24>
 8017322:	4621      	mov	r1, r4
 8017324:	4628      	mov	r0, r5
 8017326:	f000 f8c3 	bl	80174b0 <__swsetup_r>
 801732a:	2800      	cmp	r0, #0
 801732c:	d0dd      	beq.n	80172ea <_puts_r+0x2e>
 801732e:	f04f 30ff 	mov.w	r0, #4294967295
 8017332:	bd70      	pop	{r4, r5, r6, pc}
 8017334:	2b00      	cmp	r3, #0
 8017336:	da04      	bge.n	8017342 <_puts_r+0x86>
 8017338:	69a2      	ldr	r2, [r4, #24]
 801733a:	429a      	cmp	r2, r3
 801733c:	dc06      	bgt.n	801734c <_puts_r+0x90>
 801733e:	290a      	cmp	r1, #10
 8017340:	d004      	beq.n	801734c <_puts_r+0x90>
 8017342:	6823      	ldr	r3, [r4, #0]
 8017344:	1c5a      	adds	r2, r3, #1
 8017346:	6022      	str	r2, [r4, #0]
 8017348:	7019      	strb	r1, [r3, #0]
 801734a:	e7cf      	b.n	80172ec <_puts_r+0x30>
 801734c:	4622      	mov	r2, r4
 801734e:	4628      	mov	r0, r5
 8017350:	f000 f85c 	bl	801740c <__swbuf_r>
 8017354:	3001      	adds	r0, #1
 8017356:	d1c9      	bne.n	80172ec <_puts_r+0x30>
 8017358:	e7e9      	b.n	801732e <_puts_r+0x72>
 801735a:	6823      	ldr	r3, [r4, #0]
 801735c:	200a      	movs	r0, #10
 801735e:	1c5a      	adds	r2, r3, #1
 8017360:	6022      	str	r2, [r4, #0]
 8017362:	7018      	strb	r0, [r3, #0]
 8017364:	e7e5      	b.n	8017332 <_puts_r+0x76>
 8017366:	bf00      	nop
 8017368:	0801a4e8 	.word	0x0801a4e8
 801736c:	0801a508 	.word	0x0801a508
 8017370:	0801a4c8 	.word	0x0801a4c8

08017374 <puts>:
 8017374:	4b02      	ldr	r3, [pc, #8]	; (8017380 <puts+0xc>)
 8017376:	4601      	mov	r1, r0
 8017378:	6818      	ldr	r0, [r3, #0]
 801737a:	f7ff bf9f 	b.w	80172bc <_puts_r>
 801737e:	bf00      	nop
 8017380:	20000194 	.word	0x20000194

08017384 <_sbrk_r>:
 8017384:	b538      	push	{r3, r4, r5, lr}
 8017386:	4c06      	ldr	r4, [pc, #24]	; (80173a0 <_sbrk_r+0x1c>)
 8017388:	2300      	movs	r3, #0
 801738a:	4605      	mov	r5, r0
 801738c:	4608      	mov	r0, r1
 801738e:	6023      	str	r3, [r4, #0]
 8017390:	f7eb fd1a 	bl	8002dc8 <_sbrk>
 8017394:	1c43      	adds	r3, r0, #1
 8017396:	d102      	bne.n	801739e <_sbrk_r+0x1a>
 8017398:	6823      	ldr	r3, [r4, #0]
 801739a:	b103      	cbz	r3, 801739e <_sbrk_r+0x1a>
 801739c:	602b      	str	r3, [r5, #0]
 801739e:	bd38      	pop	{r3, r4, r5, pc}
 80173a0:	20016ff8 	.word	0x20016ff8

080173a4 <sniprintf>:
 80173a4:	b40c      	push	{r2, r3}
 80173a6:	b530      	push	{r4, r5, lr}
 80173a8:	4b17      	ldr	r3, [pc, #92]	; (8017408 <sniprintf+0x64>)
 80173aa:	1e0c      	subs	r4, r1, #0
 80173ac:	b09d      	sub	sp, #116	; 0x74
 80173ae:	681d      	ldr	r5, [r3, #0]
 80173b0:	da08      	bge.n	80173c4 <sniprintf+0x20>
 80173b2:	238b      	movs	r3, #139	; 0x8b
 80173b4:	602b      	str	r3, [r5, #0]
 80173b6:	f04f 30ff 	mov.w	r0, #4294967295
 80173ba:	b01d      	add	sp, #116	; 0x74
 80173bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173c0:	b002      	add	sp, #8
 80173c2:	4770      	bx	lr
 80173c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80173c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80173cc:	bf14      	ite	ne
 80173ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80173d2:	4623      	moveq	r3, r4
 80173d4:	9304      	str	r3, [sp, #16]
 80173d6:	9307      	str	r3, [sp, #28]
 80173d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80173dc:	9002      	str	r0, [sp, #8]
 80173de:	9006      	str	r0, [sp, #24]
 80173e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80173e6:	ab21      	add	r3, sp, #132	; 0x84
 80173e8:	a902      	add	r1, sp, #8
 80173ea:	4628      	mov	r0, r5
 80173ec:	9301      	str	r3, [sp, #4]
 80173ee:	f000 fb07 	bl	8017a00 <_svfiprintf_r>
 80173f2:	1c43      	adds	r3, r0, #1
 80173f4:	bfbc      	itt	lt
 80173f6:	238b      	movlt	r3, #139	; 0x8b
 80173f8:	602b      	strlt	r3, [r5, #0]
 80173fa:	2c00      	cmp	r4, #0
 80173fc:	d0dd      	beq.n	80173ba <sniprintf+0x16>
 80173fe:	9b02      	ldr	r3, [sp, #8]
 8017400:	2200      	movs	r2, #0
 8017402:	701a      	strb	r2, [r3, #0]
 8017404:	e7d9      	b.n	80173ba <sniprintf+0x16>
 8017406:	bf00      	nop
 8017408:	20000194 	.word	0x20000194

0801740c <__swbuf_r>:
 801740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801740e:	460e      	mov	r6, r1
 8017410:	4614      	mov	r4, r2
 8017412:	4605      	mov	r5, r0
 8017414:	b118      	cbz	r0, 801741e <__swbuf_r+0x12>
 8017416:	6983      	ldr	r3, [r0, #24]
 8017418:	b90b      	cbnz	r3, 801741e <__swbuf_r+0x12>
 801741a:	f000 f9a7 	bl	801776c <__sinit>
 801741e:	4b21      	ldr	r3, [pc, #132]	; (80174a4 <__swbuf_r+0x98>)
 8017420:	429c      	cmp	r4, r3
 8017422:	d12a      	bne.n	801747a <__swbuf_r+0x6e>
 8017424:	686c      	ldr	r4, [r5, #4]
 8017426:	69a3      	ldr	r3, [r4, #24]
 8017428:	60a3      	str	r3, [r4, #8]
 801742a:	89a3      	ldrh	r3, [r4, #12]
 801742c:	071a      	lsls	r2, r3, #28
 801742e:	d52e      	bpl.n	801748e <__swbuf_r+0x82>
 8017430:	6923      	ldr	r3, [r4, #16]
 8017432:	b363      	cbz	r3, 801748e <__swbuf_r+0x82>
 8017434:	6923      	ldr	r3, [r4, #16]
 8017436:	6820      	ldr	r0, [r4, #0]
 8017438:	1ac0      	subs	r0, r0, r3
 801743a:	6963      	ldr	r3, [r4, #20]
 801743c:	b2f6      	uxtb	r6, r6
 801743e:	4283      	cmp	r3, r0
 8017440:	4637      	mov	r7, r6
 8017442:	dc04      	bgt.n	801744e <__swbuf_r+0x42>
 8017444:	4621      	mov	r1, r4
 8017446:	4628      	mov	r0, r5
 8017448:	f000 f926 	bl	8017698 <_fflush_r>
 801744c:	bb28      	cbnz	r0, 801749a <__swbuf_r+0x8e>
 801744e:	68a3      	ldr	r3, [r4, #8]
 8017450:	3b01      	subs	r3, #1
 8017452:	60a3      	str	r3, [r4, #8]
 8017454:	6823      	ldr	r3, [r4, #0]
 8017456:	1c5a      	adds	r2, r3, #1
 8017458:	6022      	str	r2, [r4, #0]
 801745a:	701e      	strb	r6, [r3, #0]
 801745c:	6963      	ldr	r3, [r4, #20]
 801745e:	3001      	adds	r0, #1
 8017460:	4283      	cmp	r3, r0
 8017462:	d004      	beq.n	801746e <__swbuf_r+0x62>
 8017464:	89a3      	ldrh	r3, [r4, #12]
 8017466:	07db      	lsls	r3, r3, #31
 8017468:	d519      	bpl.n	801749e <__swbuf_r+0x92>
 801746a:	2e0a      	cmp	r6, #10
 801746c:	d117      	bne.n	801749e <__swbuf_r+0x92>
 801746e:	4621      	mov	r1, r4
 8017470:	4628      	mov	r0, r5
 8017472:	f000 f911 	bl	8017698 <_fflush_r>
 8017476:	b190      	cbz	r0, 801749e <__swbuf_r+0x92>
 8017478:	e00f      	b.n	801749a <__swbuf_r+0x8e>
 801747a:	4b0b      	ldr	r3, [pc, #44]	; (80174a8 <__swbuf_r+0x9c>)
 801747c:	429c      	cmp	r4, r3
 801747e:	d101      	bne.n	8017484 <__swbuf_r+0x78>
 8017480:	68ac      	ldr	r4, [r5, #8]
 8017482:	e7d0      	b.n	8017426 <__swbuf_r+0x1a>
 8017484:	4b09      	ldr	r3, [pc, #36]	; (80174ac <__swbuf_r+0xa0>)
 8017486:	429c      	cmp	r4, r3
 8017488:	bf08      	it	eq
 801748a:	68ec      	ldreq	r4, [r5, #12]
 801748c:	e7cb      	b.n	8017426 <__swbuf_r+0x1a>
 801748e:	4621      	mov	r1, r4
 8017490:	4628      	mov	r0, r5
 8017492:	f000 f80d 	bl	80174b0 <__swsetup_r>
 8017496:	2800      	cmp	r0, #0
 8017498:	d0cc      	beq.n	8017434 <__swbuf_r+0x28>
 801749a:	f04f 37ff 	mov.w	r7, #4294967295
 801749e:	4638      	mov	r0, r7
 80174a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174a2:	bf00      	nop
 80174a4:	0801a4e8 	.word	0x0801a4e8
 80174a8:	0801a508 	.word	0x0801a508
 80174ac:	0801a4c8 	.word	0x0801a4c8

080174b0 <__swsetup_r>:
 80174b0:	4b32      	ldr	r3, [pc, #200]	; (801757c <__swsetup_r+0xcc>)
 80174b2:	b570      	push	{r4, r5, r6, lr}
 80174b4:	681d      	ldr	r5, [r3, #0]
 80174b6:	4606      	mov	r6, r0
 80174b8:	460c      	mov	r4, r1
 80174ba:	b125      	cbz	r5, 80174c6 <__swsetup_r+0x16>
 80174bc:	69ab      	ldr	r3, [r5, #24]
 80174be:	b913      	cbnz	r3, 80174c6 <__swsetup_r+0x16>
 80174c0:	4628      	mov	r0, r5
 80174c2:	f000 f953 	bl	801776c <__sinit>
 80174c6:	4b2e      	ldr	r3, [pc, #184]	; (8017580 <__swsetup_r+0xd0>)
 80174c8:	429c      	cmp	r4, r3
 80174ca:	d10f      	bne.n	80174ec <__swsetup_r+0x3c>
 80174cc:	686c      	ldr	r4, [r5, #4]
 80174ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174d2:	b29a      	uxth	r2, r3
 80174d4:	0715      	lsls	r5, r2, #28
 80174d6:	d42c      	bmi.n	8017532 <__swsetup_r+0x82>
 80174d8:	06d0      	lsls	r0, r2, #27
 80174da:	d411      	bmi.n	8017500 <__swsetup_r+0x50>
 80174dc:	2209      	movs	r2, #9
 80174de:	6032      	str	r2, [r6, #0]
 80174e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174e4:	81a3      	strh	r3, [r4, #12]
 80174e6:	f04f 30ff 	mov.w	r0, #4294967295
 80174ea:	e03e      	b.n	801756a <__swsetup_r+0xba>
 80174ec:	4b25      	ldr	r3, [pc, #148]	; (8017584 <__swsetup_r+0xd4>)
 80174ee:	429c      	cmp	r4, r3
 80174f0:	d101      	bne.n	80174f6 <__swsetup_r+0x46>
 80174f2:	68ac      	ldr	r4, [r5, #8]
 80174f4:	e7eb      	b.n	80174ce <__swsetup_r+0x1e>
 80174f6:	4b24      	ldr	r3, [pc, #144]	; (8017588 <__swsetup_r+0xd8>)
 80174f8:	429c      	cmp	r4, r3
 80174fa:	bf08      	it	eq
 80174fc:	68ec      	ldreq	r4, [r5, #12]
 80174fe:	e7e6      	b.n	80174ce <__swsetup_r+0x1e>
 8017500:	0751      	lsls	r1, r2, #29
 8017502:	d512      	bpl.n	801752a <__swsetup_r+0x7a>
 8017504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017506:	b141      	cbz	r1, 801751a <__swsetup_r+0x6a>
 8017508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801750c:	4299      	cmp	r1, r3
 801750e:	d002      	beq.n	8017516 <__swsetup_r+0x66>
 8017510:	4630      	mov	r0, r6
 8017512:	f7ff fe2b 	bl	801716c <_free_r>
 8017516:	2300      	movs	r3, #0
 8017518:	6363      	str	r3, [r4, #52]	; 0x34
 801751a:	89a3      	ldrh	r3, [r4, #12]
 801751c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017520:	81a3      	strh	r3, [r4, #12]
 8017522:	2300      	movs	r3, #0
 8017524:	6063      	str	r3, [r4, #4]
 8017526:	6923      	ldr	r3, [r4, #16]
 8017528:	6023      	str	r3, [r4, #0]
 801752a:	89a3      	ldrh	r3, [r4, #12]
 801752c:	f043 0308 	orr.w	r3, r3, #8
 8017530:	81a3      	strh	r3, [r4, #12]
 8017532:	6923      	ldr	r3, [r4, #16]
 8017534:	b94b      	cbnz	r3, 801754a <__swsetup_r+0x9a>
 8017536:	89a3      	ldrh	r3, [r4, #12]
 8017538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801753c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017540:	d003      	beq.n	801754a <__swsetup_r+0x9a>
 8017542:	4621      	mov	r1, r4
 8017544:	4630      	mov	r0, r6
 8017546:	f000 f9bf 	bl	80178c8 <__smakebuf_r>
 801754a:	89a2      	ldrh	r2, [r4, #12]
 801754c:	f012 0301 	ands.w	r3, r2, #1
 8017550:	d00c      	beq.n	801756c <__swsetup_r+0xbc>
 8017552:	2300      	movs	r3, #0
 8017554:	60a3      	str	r3, [r4, #8]
 8017556:	6963      	ldr	r3, [r4, #20]
 8017558:	425b      	negs	r3, r3
 801755a:	61a3      	str	r3, [r4, #24]
 801755c:	6923      	ldr	r3, [r4, #16]
 801755e:	b953      	cbnz	r3, 8017576 <__swsetup_r+0xc6>
 8017560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017564:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017568:	d1ba      	bne.n	80174e0 <__swsetup_r+0x30>
 801756a:	bd70      	pop	{r4, r5, r6, pc}
 801756c:	0792      	lsls	r2, r2, #30
 801756e:	bf58      	it	pl
 8017570:	6963      	ldrpl	r3, [r4, #20]
 8017572:	60a3      	str	r3, [r4, #8]
 8017574:	e7f2      	b.n	801755c <__swsetup_r+0xac>
 8017576:	2000      	movs	r0, #0
 8017578:	e7f7      	b.n	801756a <__swsetup_r+0xba>
 801757a:	bf00      	nop
 801757c:	20000194 	.word	0x20000194
 8017580:	0801a4e8 	.word	0x0801a4e8
 8017584:	0801a508 	.word	0x0801a508
 8017588:	0801a4c8 	.word	0x0801a4c8

0801758c <__sflush_r>:
 801758c:	898a      	ldrh	r2, [r1, #12]
 801758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017592:	4605      	mov	r5, r0
 8017594:	0710      	lsls	r0, r2, #28
 8017596:	460c      	mov	r4, r1
 8017598:	d458      	bmi.n	801764c <__sflush_r+0xc0>
 801759a:	684b      	ldr	r3, [r1, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	dc05      	bgt.n	80175ac <__sflush_r+0x20>
 80175a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	dc02      	bgt.n	80175ac <__sflush_r+0x20>
 80175a6:	2000      	movs	r0, #0
 80175a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175ae:	2e00      	cmp	r6, #0
 80175b0:	d0f9      	beq.n	80175a6 <__sflush_r+0x1a>
 80175b2:	2300      	movs	r3, #0
 80175b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80175b8:	682f      	ldr	r7, [r5, #0]
 80175ba:	6a21      	ldr	r1, [r4, #32]
 80175bc:	602b      	str	r3, [r5, #0]
 80175be:	d032      	beq.n	8017626 <__sflush_r+0x9a>
 80175c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80175c2:	89a3      	ldrh	r3, [r4, #12]
 80175c4:	075a      	lsls	r2, r3, #29
 80175c6:	d505      	bpl.n	80175d4 <__sflush_r+0x48>
 80175c8:	6863      	ldr	r3, [r4, #4]
 80175ca:	1ac0      	subs	r0, r0, r3
 80175cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175ce:	b10b      	cbz	r3, 80175d4 <__sflush_r+0x48>
 80175d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80175d2:	1ac0      	subs	r0, r0, r3
 80175d4:	2300      	movs	r3, #0
 80175d6:	4602      	mov	r2, r0
 80175d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175da:	6a21      	ldr	r1, [r4, #32]
 80175dc:	4628      	mov	r0, r5
 80175de:	47b0      	blx	r6
 80175e0:	1c43      	adds	r3, r0, #1
 80175e2:	89a3      	ldrh	r3, [r4, #12]
 80175e4:	d106      	bne.n	80175f4 <__sflush_r+0x68>
 80175e6:	6829      	ldr	r1, [r5, #0]
 80175e8:	291d      	cmp	r1, #29
 80175ea:	d848      	bhi.n	801767e <__sflush_r+0xf2>
 80175ec:	4a29      	ldr	r2, [pc, #164]	; (8017694 <__sflush_r+0x108>)
 80175ee:	40ca      	lsrs	r2, r1
 80175f0:	07d6      	lsls	r6, r2, #31
 80175f2:	d544      	bpl.n	801767e <__sflush_r+0xf2>
 80175f4:	2200      	movs	r2, #0
 80175f6:	6062      	str	r2, [r4, #4]
 80175f8:	04d9      	lsls	r1, r3, #19
 80175fa:	6922      	ldr	r2, [r4, #16]
 80175fc:	6022      	str	r2, [r4, #0]
 80175fe:	d504      	bpl.n	801760a <__sflush_r+0x7e>
 8017600:	1c42      	adds	r2, r0, #1
 8017602:	d101      	bne.n	8017608 <__sflush_r+0x7c>
 8017604:	682b      	ldr	r3, [r5, #0]
 8017606:	b903      	cbnz	r3, 801760a <__sflush_r+0x7e>
 8017608:	6560      	str	r0, [r4, #84]	; 0x54
 801760a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801760c:	602f      	str	r7, [r5, #0]
 801760e:	2900      	cmp	r1, #0
 8017610:	d0c9      	beq.n	80175a6 <__sflush_r+0x1a>
 8017612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017616:	4299      	cmp	r1, r3
 8017618:	d002      	beq.n	8017620 <__sflush_r+0x94>
 801761a:	4628      	mov	r0, r5
 801761c:	f7ff fda6 	bl	801716c <_free_r>
 8017620:	2000      	movs	r0, #0
 8017622:	6360      	str	r0, [r4, #52]	; 0x34
 8017624:	e7c0      	b.n	80175a8 <__sflush_r+0x1c>
 8017626:	2301      	movs	r3, #1
 8017628:	4628      	mov	r0, r5
 801762a:	47b0      	blx	r6
 801762c:	1c41      	adds	r1, r0, #1
 801762e:	d1c8      	bne.n	80175c2 <__sflush_r+0x36>
 8017630:	682b      	ldr	r3, [r5, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d0c5      	beq.n	80175c2 <__sflush_r+0x36>
 8017636:	2b1d      	cmp	r3, #29
 8017638:	d001      	beq.n	801763e <__sflush_r+0xb2>
 801763a:	2b16      	cmp	r3, #22
 801763c:	d101      	bne.n	8017642 <__sflush_r+0xb6>
 801763e:	602f      	str	r7, [r5, #0]
 8017640:	e7b1      	b.n	80175a6 <__sflush_r+0x1a>
 8017642:	89a3      	ldrh	r3, [r4, #12]
 8017644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017648:	81a3      	strh	r3, [r4, #12]
 801764a:	e7ad      	b.n	80175a8 <__sflush_r+0x1c>
 801764c:	690f      	ldr	r7, [r1, #16]
 801764e:	2f00      	cmp	r7, #0
 8017650:	d0a9      	beq.n	80175a6 <__sflush_r+0x1a>
 8017652:	0793      	lsls	r3, r2, #30
 8017654:	680e      	ldr	r6, [r1, #0]
 8017656:	bf08      	it	eq
 8017658:	694b      	ldreq	r3, [r1, #20]
 801765a:	600f      	str	r7, [r1, #0]
 801765c:	bf18      	it	ne
 801765e:	2300      	movne	r3, #0
 8017660:	eba6 0807 	sub.w	r8, r6, r7
 8017664:	608b      	str	r3, [r1, #8]
 8017666:	f1b8 0f00 	cmp.w	r8, #0
 801766a:	dd9c      	ble.n	80175a6 <__sflush_r+0x1a>
 801766c:	4643      	mov	r3, r8
 801766e:	463a      	mov	r2, r7
 8017670:	6a21      	ldr	r1, [r4, #32]
 8017672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017674:	4628      	mov	r0, r5
 8017676:	47b0      	blx	r6
 8017678:	2800      	cmp	r0, #0
 801767a:	dc06      	bgt.n	801768a <__sflush_r+0xfe>
 801767c:	89a3      	ldrh	r3, [r4, #12]
 801767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017682:	81a3      	strh	r3, [r4, #12]
 8017684:	f04f 30ff 	mov.w	r0, #4294967295
 8017688:	e78e      	b.n	80175a8 <__sflush_r+0x1c>
 801768a:	4407      	add	r7, r0
 801768c:	eba8 0800 	sub.w	r8, r8, r0
 8017690:	e7e9      	b.n	8017666 <__sflush_r+0xda>
 8017692:	bf00      	nop
 8017694:	20400001 	.word	0x20400001

08017698 <_fflush_r>:
 8017698:	b538      	push	{r3, r4, r5, lr}
 801769a:	690b      	ldr	r3, [r1, #16]
 801769c:	4605      	mov	r5, r0
 801769e:	460c      	mov	r4, r1
 80176a0:	b1db      	cbz	r3, 80176da <_fflush_r+0x42>
 80176a2:	b118      	cbz	r0, 80176ac <_fflush_r+0x14>
 80176a4:	6983      	ldr	r3, [r0, #24]
 80176a6:	b90b      	cbnz	r3, 80176ac <_fflush_r+0x14>
 80176a8:	f000 f860 	bl	801776c <__sinit>
 80176ac:	4b0c      	ldr	r3, [pc, #48]	; (80176e0 <_fflush_r+0x48>)
 80176ae:	429c      	cmp	r4, r3
 80176b0:	d109      	bne.n	80176c6 <_fflush_r+0x2e>
 80176b2:	686c      	ldr	r4, [r5, #4]
 80176b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176b8:	b17b      	cbz	r3, 80176da <_fflush_r+0x42>
 80176ba:	4621      	mov	r1, r4
 80176bc:	4628      	mov	r0, r5
 80176be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80176c2:	f7ff bf63 	b.w	801758c <__sflush_r>
 80176c6:	4b07      	ldr	r3, [pc, #28]	; (80176e4 <_fflush_r+0x4c>)
 80176c8:	429c      	cmp	r4, r3
 80176ca:	d101      	bne.n	80176d0 <_fflush_r+0x38>
 80176cc:	68ac      	ldr	r4, [r5, #8]
 80176ce:	e7f1      	b.n	80176b4 <_fflush_r+0x1c>
 80176d0:	4b05      	ldr	r3, [pc, #20]	; (80176e8 <_fflush_r+0x50>)
 80176d2:	429c      	cmp	r4, r3
 80176d4:	bf08      	it	eq
 80176d6:	68ec      	ldreq	r4, [r5, #12]
 80176d8:	e7ec      	b.n	80176b4 <_fflush_r+0x1c>
 80176da:	2000      	movs	r0, #0
 80176dc:	bd38      	pop	{r3, r4, r5, pc}
 80176de:	bf00      	nop
 80176e0:	0801a4e8 	.word	0x0801a4e8
 80176e4:	0801a508 	.word	0x0801a508
 80176e8:	0801a4c8 	.word	0x0801a4c8

080176ec <std>:
 80176ec:	2300      	movs	r3, #0
 80176ee:	b510      	push	{r4, lr}
 80176f0:	4604      	mov	r4, r0
 80176f2:	e9c0 3300 	strd	r3, r3, [r0]
 80176f6:	6083      	str	r3, [r0, #8]
 80176f8:	8181      	strh	r1, [r0, #12]
 80176fa:	6643      	str	r3, [r0, #100]	; 0x64
 80176fc:	81c2      	strh	r2, [r0, #14]
 80176fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017702:	6183      	str	r3, [r0, #24]
 8017704:	4619      	mov	r1, r3
 8017706:	2208      	movs	r2, #8
 8017708:	305c      	adds	r0, #92	; 0x5c
 801770a:	f7ff fd26 	bl	801715a <memset>
 801770e:	4b05      	ldr	r3, [pc, #20]	; (8017724 <std+0x38>)
 8017710:	6263      	str	r3, [r4, #36]	; 0x24
 8017712:	4b05      	ldr	r3, [pc, #20]	; (8017728 <std+0x3c>)
 8017714:	62a3      	str	r3, [r4, #40]	; 0x28
 8017716:	4b05      	ldr	r3, [pc, #20]	; (801772c <std+0x40>)
 8017718:	62e3      	str	r3, [r4, #44]	; 0x2c
 801771a:	4b05      	ldr	r3, [pc, #20]	; (8017730 <std+0x44>)
 801771c:	6224      	str	r4, [r4, #32]
 801771e:	6323      	str	r3, [r4, #48]	; 0x30
 8017720:	bd10      	pop	{r4, pc}
 8017722:	bf00      	nop
 8017724:	08017f01 	.word	0x08017f01
 8017728:	08017f23 	.word	0x08017f23
 801772c:	08017f5b 	.word	0x08017f5b
 8017730:	08017f7f 	.word	0x08017f7f

08017734 <_cleanup_r>:
 8017734:	4901      	ldr	r1, [pc, #4]	; (801773c <_cleanup_r+0x8>)
 8017736:	f000 b885 	b.w	8017844 <_fwalk_reent>
 801773a:	bf00      	nop
 801773c:	08017699 	.word	0x08017699

08017740 <__sfmoreglue>:
 8017740:	b570      	push	{r4, r5, r6, lr}
 8017742:	1e4a      	subs	r2, r1, #1
 8017744:	2568      	movs	r5, #104	; 0x68
 8017746:	4355      	muls	r5, r2
 8017748:	460e      	mov	r6, r1
 801774a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801774e:	f7ff fd5b 	bl	8017208 <_malloc_r>
 8017752:	4604      	mov	r4, r0
 8017754:	b140      	cbz	r0, 8017768 <__sfmoreglue+0x28>
 8017756:	2100      	movs	r1, #0
 8017758:	e9c0 1600 	strd	r1, r6, [r0]
 801775c:	300c      	adds	r0, #12
 801775e:	60a0      	str	r0, [r4, #8]
 8017760:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017764:	f7ff fcf9 	bl	801715a <memset>
 8017768:	4620      	mov	r0, r4
 801776a:	bd70      	pop	{r4, r5, r6, pc}

0801776c <__sinit>:
 801776c:	6983      	ldr	r3, [r0, #24]
 801776e:	b510      	push	{r4, lr}
 8017770:	4604      	mov	r4, r0
 8017772:	bb33      	cbnz	r3, 80177c2 <__sinit+0x56>
 8017774:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017778:	6503      	str	r3, [r0, #80]	; 0x50
 801777a:	4b12      	ldr	r3, [pc, #72]	; (80177c4 <__sinit+0x58>)
 801777c:	4a12      	ldr	r2, [pc, #72]	; (80177c8 <__sinit+0x5c>)
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	6282      	str	r2, [r0, #40]	; 0x28
 8017782:	4298      	cmp	r0, r3
 8017784:	bf04      	itt	eq
 8017786:	2301      	moveq	r3, #1
 8017788:	6183      	streq	r3, [r0, #24]
 801778a:	f000 f81f 	bl	80177cc <__sfp>
 801778e:	6060      	str	r0, [r4, #4]
 8017790:	4620      	mov	r0, r4
 8017792:	f000 f81b 	bl	80177cc <__sfp>
 8017796:	60a0      	str	r0, [r4, #8]
 8017798:	4620      	mov	r0, r4
 801779a:	f000 f817 	bl	80177cc <__sfp>
 801779e:	2200      	movs	r2, #0
 80177a0:	60e0      	str	r0, [r4, #12]
 80177a2:	2104      	movs	r1, #4
 80177a4:	6860      	ldr	r0, [r4, #4]
 80177a6:	f7ff ffa1 	bl	80176ec <std>
 80177aa:	2201      	movs	r2, #1
 80177ac:	2109      	movs	r1, #9
 80177ae:	68a0      	ldr	r0, [r4, #8]
 80177b0:	f7ff ff9c 	bl	80176ec <std>
 80177b4:	2202      	movs	r2, #2
 80177b6:	2112      	movs	r1, #18
 80177b8:	68e0      	ldr	r0, [r4, #12]
 80177ba:	f7ff ff97 	bl	80176ec <std>
 80177be:	2301      	movs	r3, #1
 80177c0:	61a3      	str	r3, [r4, #24]
 80177c2:	bd10      	pop	{r4, pc}
 80177c4:	0801a4c4 	.word	0x0801a4c4
 80177c8:	08017735 	.word	0x08017735

080177cc <__sfp>:
 80177cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ce:	4b1b      	ldr	r3, [pc, #108]	; (801783c <__sfp+0x70>)
 80177d0:	681e      	ldr	r6, [r3, #0]
 80177d2:	69b3      	ldr	r3, [r6, #24]
 80177d4:	4607      	mov	r7, r0
 80177d6:	b913      	cbnz	r3, 80177de <__sfp+0x12>
 80177d8:	4630      	mov	r0, r6
 80177da:	f7ff ffc7 	bl	801776c <__sinit>
 80177de:	3648      	adds	r6, #72	; 0x48
 80177e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80177e4:	3b01      	subs	r3, #1
 80177e6:	d503      	bpl.n	80177f0 <__sfp+0x24>
 80177e8:	6833      	ldr	r3, [r6, #0]
 80177ea:	b133      	cbz	r3, 80177fa <__sfp+0x2e>
 80177ec:	6836      	ldr	r6, [r6, #0]
 80177ee:	e7f7      	b.n	80177e0 <__sfp+0x14>
 80177f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80177f4:	b16d      	cbz	r5, 8017812 <__sfp+0x46>
 80177f6:	3468      	adds	r4, #104	; 0x68
 80177f8:	e7f4      	b.n	80177e4 <__sfp+0x18>
 80177fa:	2104      	movs	r1, #4
 80177fc:	4638      	mov	r0, r7
 80177fe:	f7ff ff9f 	bl	8017740 <__sfmoreglue>
 8017802:	6030      	str	r0, [r6, #0]
 8017804:	2800      	cmp	r0, #0
 8017806:	d1f1      	bne.n	80177ec <__sfp+0x20>
 8017808:	230c      	movs	r3, #12
 801780a:	603b      	str	r3, [r7, #0]
 801780c:	4604      	mov	r4, r0
 801780e:	4620      	mov	r0, r4
 8017810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017812:	4b0b      	ldr	r3, [pc, #44]	; (8017840 <__sfp+0x74>)
 8017814:	6665      	str	r5, [r4, #100]	; 0x64
 8017816:	e9c4 5500 	strd	r5, r5, [r4]
 801781a:	60a5      	str	r5, [r4, #8]
 801781c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017820:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017824:	2208      	movs	r2, #8
 8017826:	4629      	mov	r1, r5
 8017828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801782c:	f7ff fc95 	bl	801715a <memset>
 8017830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017838:	e7e9      	b.n	801780e <__sfp+0x42>
 801783a:	bf00      	nop
 801783c:	0801a4c4 	.word	0x0801a4c4
 8017840:	ffff0001 	.word	0xffff0001

08017844 <_fwalk_reent>:
 8017844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017848:	4680      	mov	r8, r0
 801784a:	4689      	mov	r9, r1
 801784c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017850:	2600      	movs	r6, #0
 8017852:	b914      	cbnz	r4, 801785a <_fwalk_reent+0x16>
 8017854:	4630      	mov	r0, r6
 8017856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801785a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801785e:	3f01      	subs	r7, #1
 8017860:	d501      	bpl.n	8017866 <_fwalk_reent+0x22>
 8017862:	6824      	ldr	r4, [r4, #0]
 8017864:	e7f5      	b.n	8017852 <_fwalk_reent+0xe>
 8017866:	89ab      	ldrh	r3, [r5, #12]
 8017868:	2b01      	cmp	r3, #1
 801786a:	d907      	bls.n	801787c <_fwalk_reent+0x38>
 801786c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017870:	3301      	adds	r3, #1
 8017872:	d003      	beq.n	801787c <_fwalk_reent+0x38>
 8017874:	4629      	mov	r1, r5
 8017876:	4640      	mov	r0, r8
 8017878:	47c8      	blx	r9
 801787a:	4306      	orrs	r6, r0
 801787c:	3568      	adds	r5, #104	; 0x68
 801787e:	e7ee      	b.n	801785e <_fwalk_reent+0x1a>

08017880 <__swhatbuf_r>:
 8017880:	b570      	push	{r4, r5, r6, lr}
 8017882:	460e      	mov	r6, r1
 8017884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017888:	2900      	cmp	r1, #0
 801788a:	b096      	sub	sp, #88	; 0x58
 801788c:	4614      	mov	r4, r2
 801788e:	461d      	mov	r5, r3
 8017890:	da07      	bge.n	80178a2 <__swhatbuf_r+0x22>
 8017892:	2300      	movs	r3, #0
 8017894:	602b      	str	r3, [r5, #0]
 8017896:	89b3      	ldrh	r3, [r6, #12]
 8017898:	061a      	lsls	r2, r3, #24
 801789a:	d410      	bmi.n	80178be <__swhatbuf_r+0x3e>
 801789c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80178a0:	e00e      	b.n	80178c0 <__swhatbuf_r+0x40>
 80178a2:	466a      	mov	r2, sp
 80178a4:	f000 fb92 	bl	8017fcc <_fstat_r>
 80178a8:	2800      	cmp	r0, #0
 80178aa:	dbf2      	blt.n	8017892 <__swhatbuf_r+0x12>
 80178ac:	9a01      	ldr	r2, [sp, #4]
 80178ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80178b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80178b6:	425a      	negs	r2, r3
 80178b8:	415a      	adcs	r2, r3
 80178ba:	602a      	str	r2, [r5, #0]
 80178bc:	e7ee      	b.n	801789c <__swhatbuf_r+0x1c>
 80178be:	2340      	movs	r3, #64	; 0x40
 80178c0:	2000      	movs	r0, #0
 80178c2:	6023      	str	r3, [r4, #0]
 80178c4:	b016      	add	sp, #88	; 0x58
 80178c6:	bd70      	pop	{r4, r5, r6, pc}

080178c8 <__smakebuf_r>:
 80178c8:	898b      	ldrh	r3, [r1, #12]
 80178ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178cc:	079d      	lsls	r5, r3, #30
 80178ce:	4606      	mov	r6, r0
 80178d0:	460c      	mov	r4, r1
 80178d2:	d507      	bpl.n	80178e4 <__smakebuf_r+0x1c>
 80178d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178d8:	6023      	str	r3, [r4, #0]
 80178da:	6123      	str	r3, [r4, #16]
 80178dc:	2301      	movs	r3, #1
 80178de:	6163      	str	r3, [r4, #20]
 80178e0:	b002      	add	sp, #8
 80178e2:	bd70      	pop	{r4, r5, r6, pc}
 80178e4:	ab01      	add	r3, sp, #4
 80178e6:	466a      	mov	r2, sp
 80178e8:	f7ff ffca 	bl	8017880 <__swhatbuf_r>
 80178ec:	9900      	ldr	r1, [sp, #0]
 80178ee:	4605      	mov	r5, r0
 80178f0:	4630      	mov	r0, r6
 80178f2:	f7ff fc89 	bl	8017208 <_malloc_r>
 80178f6:	b948      	cbnz	r0, 801790c <__smakebuf_r+0x44>
 80178f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178fc:	059a      	lsls	r2, r3, #22
 80178fe:	d4ef      	bmi.n	80178e0 <__smakebuf_r+0x18>
 8017900:	f023 0303 	bic.w	r3, r3, #3
 8017904:	f043 0302 	orr.w	r3, r3, #2
 8017908:	81a3      	strh	r3, [r4, #12]
 801790a:	e7e3      	b.n	80178d4 <__smakebuf_r+0xc>
 801790c:	4b0d      	ldr	r3, [pc, #52]	; (8017944 <__smakebuf_r+0x7c>)
 801790e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017910:	89a3      	ldrh	r3, [r4, #12]
 8017912:	6020      	str	r0, [r4, #0]
 8017914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017918:	81a3      	strh	r3, [r4, #12]
 801791a:	9b00      	ldr	r3, [sp, #0]
 801791c:	6163      	str	r3, [r4, #20]
 801791e:	9b01      	ldr	r3, [sp, #4]
 8017920:	6120      	str	r0, [r4, #16]
 8017922:	b15b      	cbz	r3, 801793c <__smakebuf_r+0x74>
 8017924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017928:	4630      	mov	r0, r6
 801792a:	f000 fb61 	bl	8017ff0 <_isatty_r>
 801792e:	b128      	cbz	r0, 801793c <__smakebuf_r+0x74>
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	f023 0303 	bic.w	r3, r3, #3
 8017936:	f043 0301 	orr.w	r3, r3, #1
 801793a:	81a3      	strh	r3, [r4, #12]
 801793c:	89a3      	ldrh	r3, [r4, #12]
 801793e:	431d      	orrs	r5, r3
 8017940:	81a5      	strh	r5, [r4, #12]
 8017942:	e7cd      	b.n	80178e0 <__smakebuf_r+0x18>
 8017944:	08017735 	.word	0x08017735

08017948 <__malloc_lock>:
 8017948:	4770      	bx	lr

0801794a <__malloc_unlock>:
 801794a:	4770      	bx	lr

0801794c <__ssputs_r>:
 801794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017950:	688e      	ldr	r6, [r1, #8]
 8017952:	429e      	cmp	r6, r3
 8017954:	4682      	mov	sl, r0
 8017956:	460c      	mov	r4, r1
 8017958:	4690      	mov	r8, r2
 801795a:	4699      	mov	r9, r3
 801795c:	d837      	bhi.n	80179ce <__ssputs_r+0x82>
 801795e:	898a      	ldrh	r2, [r1, #12]
 8017960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017964:	d031      	beq.n	80179ca <__ssputs_r+0x7e>
 8017966:	6825      	ldr	r5, [r4, #0]
 8017968:	6909      	ldr	r1, [r1, #16]
 801796a:	1a6f      	subs	r7, r5, r1
 801796c:	6965      	ldr	r5, [r4, #20]
 801796e:	2302      	movs	r3, #2
 8017970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017974:	fb95 f5f3 	sdiv	r5, r5, r3
 8017978:	f109 0301 	add.w	r3, r9, #1
 801797c:	443b      	add	r3, r7
 801797e:	429d      	cmp	r5, r3
 8017980:	bf38      	it	cc
 8017982:	461d      	movcc	r5, r3
 8017984:	0553      	lsls	r3, r2, #21
 8017986:	d530      	bpl.n	80179ea <__ssputs_r+0x9e>
 8017988:	4629      	mov	r1, r5
 801798a:	f7ff fc3d 	bl	8017208 <_malloc_r>
 801798e:	4606      	mov	r6, r0
 8017990:	b950      	cbnz	r0, 80179a8 <__ssputs_r+0x5c>
 8017992:	230c      	movs	r3, #12
 8017994:	f8ca 3000 	str.w	r3, [sl]
 8017998:	89a3      	ldrh	r3, [r4, #12]
 801799a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801799e:	81a3      	strh	r3, [r4, #12]
 80179a0:	f04f 30ff 	mov.w	r0, #4294967295
 80179a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179a8:	463a      	mov	r2, r7
 80179aa:	6921      	ldr	r1, [r4, #16]
 80179ac:	f7ff fbca 	bl	8017144 <memcpy>
 80179b0:	89a3      	ldrh	r3, [r4, #12]
 80179b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80179b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179ba:	81a3      	strh	r3, [r4, #12]
 80179bc:	6126      	str	r6, [r4, #16]
 80179be:	6165      	str	r5, [r4, #20]
 80179c0:	443e      	add	r6, r7
 80179c2:	1bed      	subs	r5, r5, r7
 80179c4:	6026      	str	r6, [r4, #0]
 80179c6:	60a5      	str	r5, [r4, #8]
 80179c8:	464e      	mov	r6, r9
 80179ca:	454e      	cmp	r6, r9
 80179cc:	d900      	bls.n	80179d0 <__ssputs_r+0x84>
 80179ce:	464e      	mov	r6, r9
 80179d0:	4632      	mov	r2, r6
 80179d2:	4641      	mov	r1, r8
 80179d4:	6820      	ldr	r0, [r4, #0]
 80179d6:	f000 fb2d 	bl	8018034 <memmove>
 80179da:	68a3      	ldr	r3, [r4, #8]
 80179dc:	1b9b      	subs	r3, r3, r6
 80179de:	60a3      	str	r3, [r4, #8]
 80179e0:	6823      	ldr	r3, [r4, #0]
 80179e2:	441e      	add	r6, r3
 80179e4:	6026      	str	r6, [r4, #0]
 80179e6:	2000      	movs	r0, #0
 80179e8:	e7dc      	b.n	80179a4 <__ssputs_r+0x58>
 80179ea:	462a      	mov	r2, r5
 80179ec:	f000 fb3b 	bl	8018066 <_realloc_r>
 80179f0:	4606      	mov	r6, r0
 80179f2:	2800      	cmp	r0, #0
 80179f4:	d1e2      	bne.n	80179bc <__ssputs_r+0x70>
 80179f6:	6921      	ldr	r1, [r4, #16]
 80179f8:	4650      	mov	r0, sl
 80179fa:	f7ff fbb7 	bl	801716c <_free_r>
 80179fe:	e7c8      	b.n	8017992 <__ssputs_r+0x46>

08017a00 <_svfiprintf_r>:
 8017a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a04:	461d      	mov	r5, r3
 8017a06:	898b      	ldrh	r3, [r1, #12]
 8017a08:	061f      	lsls	r7, r3, #24
 8017a0a:	b09d      	sub	sp, #116	; 0x74
 8017a0c:	4680      	mov	r8, r0
 8017a0e:	460c      	mov	r4, r1
 8017a10:	4616      	mov	r6, r2
 8017a12:	d50f      	bpl.n	8017a34 <_svfiprintf_r+0x34>
 8017a14:	690b      	ldr	r3, [r1, #16]
 8017a16:	b96b      	cbnz	r3, 8017a34 <_svfiprintf_r+0x34>
 8017a18:	2140      	movs	r1, #64	; 0x40
 8017a1a:	f7ff fbf5 	bl	8017208 <_malloc_r>
 8017a1e:	6020      	str	r0, [r4, #0]
 8017a20:	6120      	str	r0, [r4, #16]
 8017a22:	b928      	cbnz	r0, 8017a30 <_svfiprintf_r+0x30>
 8017a24:	230c      	movs	r3, #12
 8017a26:	f8c8 3000 	str.w	r3, [r8]
 8017a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a2e:	e0c8      	b.n	8017bc2 <_svfiprintf_r+0x1c2>
 8017a30:	2340      	movs	r3, #64	; 0x40
 8017a32:	6163      	str	r3, [r4, #20]
 8017a34:	2300      	movs	r3, #0
 8017a36:	9309      	str	r3, [sp, #36]	; 0x24
 8017a38:	2320      	movs	r3, #32
 8017a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a3e:	2330      	movs	r3, #48	; 0x30
 8017a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a44:	9503      	str	r5, [sp, #12]
 8017a46:	f04f 0b01 	mov.w	fp, #1
 8017a4a:	4637      	mov	r7, r6
 8017a4c:	463d      	mov	r5, r7
 8017a4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017a52:	b10b      	cbz	r3, 8017a58 <_svfiprintf_r+0x58>
 8017a54:	2b25      	cmp	r3, #37	; 0x25
 8017a56:	d13e      	bne.n	8017ad6 <_svfiprintf_r+0xd6>
 8017a58:	ebb7 0a06 	subs.w	sl, r7, r6
 8017a5c:	d00b      	beq.n	8017a76 <_svfiprintf_r+0x76>
 8017a5e:	4653      	mov	r3, sl
 8017a60:	4632      	mov	r2, r6
 8017a62:	4621      	mov	r1, r4
 8017a64:	4640      	mov	r0, r8
 8017a66:	f7ff ff71 	bl	801794c <__ssputs_r>
 8017a6a:	3001      	adds	r0, #1
 8017a6c:	f000 80a4 	beq.w	8017bb8 <_svfiprintf_r+0x1b8>
 8017a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a72:	4453      	add	r3, sl
 8017a74:	9309      	str	r3, [sp, #36]	; 0x24
 8017a76:	783b      	ldrb	r3, [r7, #0]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	f000 809d 	beq.w	8017bb8 <_svfiprintf_r+0x1b8>
 8017a7e:	2300      	movs	r3, #0
 8017a80:	f04f 32ff 	mov.w	r2, #4294967295
 8017a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a88:	9304      	str	r3, [sp, #16]
 8017a8a:	9307      	str	r3, [sp, #28]
 8017a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a90:	931a      	str	r3, [sp, #104]	; 0x68
 8017a92:	462f      	mov	r7, r5
 8017a94:	2205      	movs	r2, #5
 8017a96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017a9a:	4850      	ldr	r0, [pc, #320]	; (8017bdc <_svfiprintf_r+0x1dc>)
 8017a9c:	f7e8 fbc0 	bl	8000220 <memchr>
 8017aa0:	9b04      	ldr	r3, [sp, #16]
 8017aa2:	b9d0      	cbnz	r0, 8017ada <_svfiprintf_r+0xda>
 8017aa4:	06d9      	lsls	r1, r3, #27
 8017aa6:	bf44      	itt	mi
 8017aa8:	2220      	movmi	r2, #32
 8017aaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017aae:	071a      	lsls	r2, r3, #28
 8017ab0:	bf44      	itt	mi
 8017ab2:	222b      	movmi	r2, #43	; 0x2b
 8017ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017ab8:	782a      	ldrb	r2, [r5, #0]
 8017aba:	2a2a      	cmp	r2, #42	; 0x2a
 8017abc:	d015      	beq.n	8017aea <_svfiprintf_r+0xea>
 8017abe:	9a07      	ldr	r2, [sp, #28]
 8017ac0:	462f      	mov	r7, r5
 8017ac2:	2000      	movs	r0, #0
 8017ac4:	250a      	movs	r5, #10
 8017ac6:	4639      	mov	r1, r7
 8017ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017acc:	3b30      	subs	r3, #48	; 0x30
 8017ace:	2b09      	cmp	r3, #9
 8017ad0:	d94d      	bls.n	8017b6e <_svfiprintf_r+0x16e>
 8017ad2:	b1b8      	cbz	r0, 8017b04 <_svfiprintf_r+0x104>
 8017ad4:	e00f      	b.n	8017af6 <_svfiprintf_r+0xf6>
 8017ad6:	462f      	mov	r7, r5
 8017ad8:	e7b8      	b.n	8017a4c <_svfiprintf_r+0x4c>
 8017ada:	4a40      	ldr	r2, [pc, #256]	; (8017bdc <_svfiprintf_r+0x1dc>)
 8017adc:	1a80      	subs	r0, r0, r2
 8017ade:	fa0b f000 	lsl.w	r0, fp, r0
 8017ae2:	4318      	orrs	r0, r3
 8017ae4:	9004      	str	r0, [sp, #16]
 8017ae6:	463d      	mov	r5, r7
 8017ae8:	e7d3      	b.n	8017a92 <_svfiprintf_r+0x92>
 8017aea:	9a03      	ldr	r2, [sp, #12]
 8017aec:	1d11      	adds	r1, r2, #4
 8017aee:	6812      	ldr	r2, [r2, #0]
 8017af0:	9103      	str	r1, [sp, #12]
 8017af2:	2a00      	cmp	r2, #0
 8017af4:	db01      	blt.n	8017afa <_svfiprintf_r+0xfa>
 8017af6:	9207      	str	r2, [sp, #28]
 8017af8:	e004      	b.n	8017b04 <_svfiprintf_r+0x104>
 8017afa:	4252      	negs	r2, r2
 8017afc:	f043 0302 	orr.w	r3, r3, #2
 8017b00:	9207      	str	r2, [sp, #28]
 8017b02:	9304      	str	r3, [sp, #16]
 8017b04:	783b      	ldrb	r3, [r7, #0]
 8017b06:	2b2e      	cmp	r3, #46	; 0x2e
 8017b08:	d10c      	bne.n	8017b24 <_svfiprintf_r+0x124>
 8017b0a:	787b      	ldrb	r3, [r7, #1]
 8017b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8017b0e:	d133      	bne.n	8017b78 <_svfiprintf_r+0x178>
 8017b10:	9b03      	ldr	r3, [sp, #12]
 8017b12:	1d1a      	adds	r2, r3, #4
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	9203      	str	r2, [sp, #12]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	bfb8      	it	lt
 8017b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017b20:	3702      	adds	r7, #2
 8017b22:	9305      	str	r3, [sp, #20]
 8017b24:	4d2e      	ldr	r5, [pc, #184]	; (8017be0 <_svfiprintf_r+0x1e0>)
 8017b26:	7839      	ldrb	r1, [r7, #0]
 8017b28:	2203      	movs	r2, #3
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	f7e8 fb78 	bl	8000220 <memchr>
 8017b30:	b138      	cbz	r0, 8017b42 <_svfiprintf_r+0x142>
 8017b32:	2340      	movs	r3, #64	; 0x40
 8017b34:	1b40      	subs	r0, r0, r5
 8017b36:	fa03 f000 	lsl.w	r0, r3, r0
 8017b3a:	9b04      	ldr	r3, [sp, #16]
 8017b3c:	4303      	orrs	r3, r0
 8017b3e:	3701      	adds	r7, #1
 8017b40:	9304      	str	r3, [sp, #16]
 8017b42:	7839      	ldrb	r1, [r7, #0]
 8017b44:	4827      	ldr	r0, [pc, #156]	; (8017be4 <_svfiprintf_r+0x1e4>)
 8017b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b4a:	2206      	movs	r2, #6
 8017b4c:	1c7e      	adds	r6, r7, #1
 8017b4e:	f7e8 fb67 	bl	8000220 <memchr>
 8017b52:	2800      	cmp	r0, #0
 8017b54:	d038      	beq.n	8017bc8 <_svfiprintf_r+0x1c8>
 8017b56:	4b24      	ldr	r3, [pc, #144]	; (8017be8 <_svfiprintf_r+0x1e8>)
 8017b58:	bb13      	cbnz	r3, 8017ba0 <_svfiprintf_r+0x1a0>
 8017b5a:	9b03      	ldr	r3, [sp, #12]
 8017b5c:	3307      	adds	r3, #7
 8017b5e:	f023 0307 	bic.w	r3, r3, #7
 8017b62:	3308      	adds	r3, #8
 8017b64:	9303      	str	r3, [sp, #12]
 8017b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b68:	444b      	add	r3, r9
 8017b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017b6c:	e76d      	b.n	8017a4a <_svfiprintf_r+0x4a>
 8017b6e:	fb05 3202 	mla	r2, r5, r2, r3
 8017b72:	2001      	movs	r0, #1
 8017b74:	460f      	mov	r7, r1
 8017b76:	e7a6      	b.n	8017ac6 <_svfiprintf_r+0xc6>
 8017b78:	2300      	movs	r3, #0
 8017b7a:	3701      	adds	r7, #1
 8017b7c:	9305      	str	r3, [sp, #20]
 8017b7e:	4619      	mov	r1, r3
 8017b80:	250a      	movs	r5, #10
 8017b82:	4638      	mov	r0, r7
 8017b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b88:	3a30      	subs	r2, #48	; 0x30
 8017b8a:	2a09      	cmp	r2, #9
 8017b8c:	d903      	bls.n	8017b96 <_svfiprintf_r+0x196>
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d0c8      	beq.n	8017b24 <_svfiprintf_r+0x124>
 8017b92:	9105      	str	r1, [sp, #20]
 8017b94:	e7c6      	b.n	8017b24 <_svfiprintf_r+0x124>
 8017b96:	fb05 2101 	mla	r1, r5, r1, r2
 8017b9a:	2301      	movs	r3, #1
 8017b9c:	4607      	mov	r7, r0
 8017b9e:	e7f0      	b.n	8017b82 <_svfiprintf_r+0x182>
 8017ba0:	ab03      	add	r3, sp, #12
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	4622      	mov	r2, r4
 8017ba6:	4b11      	ldr	r3, [pc, #68]	; (8017bec <_svfiprintf_r+0x1ec>)
 8017ba8:	a904      	add	r1, sp, #16
 8017baa:	4640      	mov	r0, r8
 8017bac:	f3af 8000 	nop.w
 8017bb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017bb4:	4681      	mov	r9, r0
 8017bb6:	d1d6      	bne.n	8017b66 <_svfiprintf_r+0x166>
 8017bb8:	89a3      	ldrh	r3, [r4, #12]
 8017bba:	065b      	lsls	r3, r3, #25
 8017bbc:	f53f af35 	bmi.w	8017a2a <_svfiprintf_r+0x2a>
 8017bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bc2:	b01d      	add	sp, #116	; 0x74
 8017bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc8:	ab03      	add	r3, sp, #12
 8017bca:	9300      	str	r3, [sp, #0]
 8017bcc:	4622      	mov	r2, r4
 8017bce:	4b07      	ldr	r3, [pc, #28]	; (8017bec <_svfiprintf_r+0x1ec>)
 8017bd0:	a904      	add	r1, sp, #16
 8017bd2:	4640      	mov	r0, r8
 8017bd4:	f000 f882 	bl	8017cdc <_printf_i>
 8017bd8:	e7ea      	b.n	8017bb0 <_svfiprintf_r+0x1b0>
 8017bda:	bf00      	nop
 8017bdc:	0801a528 	.word	0x0801a528
 8017be0:	0801a52e 	.word	0x0801a52e
 8017be4:	0801a532 	.word	0x0801a532
 8017be8:	00000000 	.word	0x00000000
 8017bec:	0801794d 	.word	0x0801794d

08017bf0 <_printf_common>:
 8017bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bf4:	4691      	mov	r9, r2
 8017bf6:	461f      	mov	r7, r3
 8017bf8:	688a      	ldr	r2, [r1, #8]
 8017bfa:	690b      	ldr	r3, [r1, #16]
 8017bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017c00:	4293      	cmp	r3, r2
 8017c02:	bfb8      	it	lt
 8017c04:	4613      	movlt	r3, r2
 8017c06:	f8c9 3000 	str.w	r3, [r9]
 8017c0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017c0e:	4606      	mov	r6, r0
 8017c10:	460c      	mov	r4, r1
 8017c12:	b112      	cbz	r2, 8017c1a <_printf_common+0x2a>
 8017c14:	3301      	adds	r3, #1
 8017c16:	f8c9 3000 	str.w	r3, [r9]
 8017c1a:	6823      	ldr	r3, [r4, #0]
 8017c1c:	0699      	lsls	r1, r3, #26
 8017c1e:	bf42      	ittt	mi
 8017c20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017c24:	3302      	addmi	r3, #2
 8017c26:	f8c9 3000 	strmi.w	r3, [r9]
 8017c2a:	6825      	ldr	r5, [r4, #0]
 8017c2c:	f015 0506 	ands.w	r5, r5, #6
 8017c30:	d107      	bne.n	8017c42 <_printf_common+0x52>
 8017c32:	f104 0a19 	add.w	sl, r4, #25
 8017c36:	68e3      	ldr	r3, [r4, #12]
 8017c38:	f8d9 2000 	ldr.w	r2, [r9]
 8017c3c:	1a9b      	subs	r3, r3, r2
 8017c3e:	42ab      	cmp	r3, r5
 8017c40:	dc28      	bgt.n	8017c94 <_printf_common+0xa4>
 8017c42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017c46:	6822      	ldr	r2, [r4, #0]
 8017c48:	3300      	adds	r3, #0
 8017c4a:	bf18      	it	ne
 8017c4c:	2301      	movne	r3, #1
 8017c4e:	0692      	lsls	r2, r2, #26
 8017c50:	d42d      	bmi.n	8017cae <_printf_common+0xbe>
 8017c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c56:	4639      	mov	r1, r7
 8017c58:	4630      	mov	r0, r6
 8017c5a:	47c0      	blx	r8
 8017c5c:	3001      	adds	r0, #1
 8017c5e:	d020      	beq.n	8017ca2 <_printf_common+0xb2>
 8017c60:	6823      	ldr	r3, [r4, #0]
 8017c62:	68e5      	ldr	r5, [r4, #12]
 8017c64:	f8d9 2000 	ldr.w	r2, [r9]
 8017c68:	f003 0306 	and.w	r3, r3, #6
 8017c6c:	2b04      	cmp	r3, #4
 8017c6e:	bf08      	it	eq
 8017c70:	1aad      	subeq	r5, r5, r2
 8017c72:	68a3      	ldr	r3, [r4, #8]
 8017c74:	6922      	ldr	r2, [r4, #16]
 8017c76:	bf0c      	ite	eq
 8017c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c7c:	2500      	movne	r5, #0
 8017c7e:	4293      	cmp	r3, r2
 8017c80:	bfc4      	itt	gt
 8017c82:	1a9b      	subgt	r3, r3, r2
 8017c84:	18ed      	addgt	r5, r5, r3
 8017c86:	f04f 0900 	mov.w	r9, #0
 8017c8a:	341a      	adds	r4, #26
 8017c8c:	454d      	cmp	r5, r9
 8017c8e:	d11a      	bne.n	8017cc6 <_printf_common+0xd6>
 8017c90:	2000      	movs	r0, #0
 8017c92:	e008      	b.n	8017ca6 <_printf_common+0xb6>
 8017c94:	2301      	movs	r3, #1
 8017c96:	4652      	mov	r2, sl
 8017c98:	4639      	mov	r1, r7
 8017c9a:	4630      	mov	r0, r6
 8017c9c:	47c0      	blx	r8
 8017c9e:	3001      	adds	r0, #1
 8017ca0:	d103      	bne.n	8017caa <_printf_common+0xba>
 8017ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017caa:	3501      	adds	r5, #1
 8017cac:	e7c3      	b.n	8017c36 <_printf_common+0x46>
 8017cae:	18e1      	adds	r1, r4, r3
 8017cb0:	1c5a      	adds	r2, r3, #1
 8017cb2:	2030      	movs	r0, #48	; 0x30
 8017cb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017cb8:	4422      	add	r2, r4
 8017cba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017cc2:	3302      	adds	r3, #2
 8017cc4:	e7c5      	b.n	8017c52 <_printf_common+0x62>
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	4622      	mov	r2, r4
 8017cca:	4639      	mov	r1, r7
 8017ccc:	4630      	mov	r0, r6
 8017cce:	47c0      	blx	r8
 8017cd0:	3001      	adds	r0, #1
 8017cd2:	d0e6      	beq.n	8017ca2 <_printf_common+0xb2>
 8017cd4:	f109 0901 	add.w	r9, r9, #1
 8017cd8:	e7d8      	b.n	8017c8c <_printf_common+0x9c>
	...

08017cdc <_printf_i>:
 8017cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ce0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017ce4:	460c      	mov	r4, r1
 8017ce6:	7e09      	ldrb	r1, [r1, #24]
 8017ce8:	b085      	sub	sp, #20
 8017cea:	296e      	cmp	r1, #110	; 0x6e
 8017cec:	4617      	mov	r7, r2
 8017cee:	4606      	mov	r6, r0
 8017cf0:	4698      	mov	r8, r3
 8017cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017cf4:	f000 80b3 	beq.w	8017e5e <_printf_i+0x182>
 8017cf8:	d822      	bhi.n	8017d40 <_printf_i+0x64>
 8017cfa:	2963      	cmp	r1, #99	; 0x63
 8017cfc:	d036      	beq.n	8017d6c <_printf_i+0x90>
 8017cfe:	d80a      	bhi.n	8017d16 <_printf_i+0x3a>
 8017d00:	2900      	cmp	r1, #0
 8017d02:	f000 80b9 	beq.w	8017e78 <_printf_i+0x19c>
 8017d06:	2958      	cmp	r1, #88	; 0x58
 8017d08:	f000 8083 	beq.w	8017e12 <_printf_i+0x136>
 8017d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017d14:	e032      	b.n	8017d7c <_printf_i+0xa0>
 8017d16:	2964      	cmp	r1, #100	; 0x64
 8017d18:	d001      	beq.n	8017d1e <_printf_i+0x42>
 8017d1a:	2969      	cmp	r1, #105	; 0x69
 8017d1c:	d1f6      	bne.n	8017d0c <_printf_i+0x30>
 8017d1e:	6820      	ldr	r0, [r4, #0]
 8017d20:	6813      	ldr	r3, [r2, #0]
 8017d22:	0605      	lsls	r5, r0, #24
 8017d24:	f103 0104 	add.w	r1, r3, #4
 8017d28:	d52a      	bpl.n	8017d80 <_printf_i+0xa4>
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	6011      	str	r1, [r2, #0]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	da03      	bge.n	8017d3a <_printf_i+0x5e>
 8017d32:	222d      	movs	r2, #45	; 0x2d
 8017d34:	425b      	negs	r3, r3
 8017d36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017d3a:	486f      	ldr	r0, [pc, #444]	; (8017ef8 <_printf_i+0x21c>)
 8017d3c:	220a      	movs	r2, #10
 8017d3e:	e039      	b.n	8017db4 <_printf_i+0xd8>
 8017d40:	2973      	cmp	r1, #115	; 0x73
 8017d42:	f000 809d 	beq.w	8017e80 <_printf_i+0x1a4>
 8017d46:	d808      	bhi.n	8017d5a <_printf_i+0x7e>
 8017d48:	296f      	cmp	r1, #111	; 0x6f
 8017d4a:	d020      	beq.n	8017d8e <_printf_i+0xb2>
 8017d4c:	2970      	cmp	r1, #112	; 0x70
 8017d4e:	d1dd      	bne.n	8017d0c <_printf_i+0x30>
 8017d50:	6823      	ldr	r3, [r4, #0]
 8017d52:	f043 0320 	orr.w	r3, r3, #32
 8017d56:	6023      	str	r3, [r4, #0]
 8017d58:	e003      	b.n	8017d62 <_printf_i+0x86>
 8017d5a:	2975      	cmp	r1, #117	; 0x75
 8017d5c:	d017      	beq.n	8017d8e <_printf_i+0xb2>
 8017d5e:	2978      	cmp	r1, #120	; 0x78
 8017d60:	d1d4      	bne.n	8017d0c <_printf_i+0x30>
 8017d62:	2378      	movs	r3, #120	; 0x78
 8017d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017d68:	4864      	ldr	r0, [pc, #400]	; (8017efc <_printf_i+0x220>)
 8017d6a:	e055      	b.n	8017e18 <_printf_i+0x13c>
 8017d6c:	6813      	ldr	r3, [r2, #0]
 8017d6e:	1d19      	adds	r1, r3, #4
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	6011      	str	r1, [r2, #0]
 8017d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	e08c      	b.n	8017e9a <_printf_i+0x1be>
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	6011      	str	r1, [r2, #0]
 8017d84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017d88:	bf18      	it	ne
 8017d8a:	b21b      	sxthne	r3, r3
 8017d8c:	e7cf      	b.n	8017d2e <_printf_i+0x52>
 8017d8e:	6813      	ldr	r3, [r2, #0]
 8017d90:	6825      	ldr	r5, [r4, #0]
 8017d92:	1d18      	adds	r0, r3, #4
 8017d94:	6010      	str	r0, [r2, #0]
 8017d96:	0628      	lsls	r0, r5, #24
 8017d98:	d501      	bpl.n	8017d9e <_printf_i+0xc2>
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	e002      	b.n	8017da4 <_printf_i+0xc8>
 8017d9e:	0668      	lsls	r0, r5, #25
 8017da0:	d5fb      	bpl.n	8017d9a <_printf_i+0xbe>
 8017da2:	881b      	ldrh	r3, [r3, #0]
 8017da4:	4854      	ldr	r0, [pc, #336]	; (8017ef8 <_printf_i+0x21c>)
 8017da6:	296f      	cmp	r1, #111	; 0x6f
 8017da8:	bf14      	ite	ne
 8017daa:	220a      	movne	r2, #10
 8017dac:	2208      	moveq	r2, #8
 8017dae:	2100      	movs	r1, #0
 8017db0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017db4:	6865      	ldr	r5, [r4, #4]
 8017db6:	60a5      	str	r5, [r4, #8]
 8017db8:	2d00      	cmp	r5, #0
 8017dba:	f2c0 8095 	blt.w	8017ee8 <_printf_i+0x20c>
 8017dbe:	6821      	ldr	r1, [r4, #0]
 8017dc0:	f021 0104 	bic.w	r1, r1, #4
 8017dc4:	6021      	str	r1, [r4, #0]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d13d      	bne.n	8017e46 <_printf_i+0x16a>
 8017dca:	2d00      	cmp	r5, #0
 8017dcc:	f040 808e 	bne.w	8017eec <_printf_i+0x210>
 8017dd0:	4665      	mov	r5, ip
 8017dd2:	2a08      	cmp	r2, #8
 8017dd4:	d10b      	bne.n	8017dee <_printf_i+0x112>
 8017dd6:	6823      	ldr	r3, [r4, #0]
 8017dd8:	07db      	lsls	r3, r3, #31
 8017dda:	d508      	bpl.n	8017dee <_printf_i+0x112>
 8017ddc:	6923      	ldr	r3, [r4, #16]
 8017dde:	6862      	ldr	r2, [r4, #4]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	bfde      	ittt	le
 8017de4:	2330      	movle	r3, #48	; 0x30
 8017de6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017dea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017dee:	ebac 0305 	sub.w	r3, ip, r5
 8017df2:	6123      	str	r3, [r4, #16]
 8017df4:	f8cd 8000 	str.w	r8, [sp]
 8017df8:	463b      	mov	r3, r7
 8017dfa:	aa03      	add	r2, sp, #12
 8017dfc:	4621      	mov	r1, r4
 8017dfe:	4630      	mov	r0, r6
 8017e00:	f7ff fef6 	bl	8017bf0 <_printf_common>
 8017e04:	3001      	adds	r0, #1
 8017e06:	d14d      	bne.n	8017ea4 <_printf_i+0x1c8>
 8017e08:	f04f 30ff 	mov.w	r0, #4294967295
 8017e0c:	b005      	add	sp, #20
 8017e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e12:	4839      	ldr	r0, [pc, #228]	; (8017ef8 <_printf_i+0x21c>)
 8017e14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017e18:	6813      	ldr	r3, [r2, #0]
 8017e1a:	6821      	ldr	r1, [r4, #0]
 8017e1c:	1d1d      	adds	r5, r3, #4
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	6015      	str	r5, [r2, #0]
 8017e22:	060a      	lsls	r2, r1, #24
 8017e24:	d50b      	bpl.n	8017e3e <_printf_i+0x162>
 8017e26:	07ca      	lsls	r2, r1, #31
 8017e28:	bf44      	itt	mi
 8017e2a:	f041 0120 	orrmi.w	r1, r1, #32
 8017e2e:	6021      	strmi	r1, [r4, #0]
 8017e30:	b91b      	cbnz	r3, 8017e3a <_printf_i+0x15e>
 8017e32:	6822      	ldr	r2, [r4, #0]
 8017e34:	f022 0220 	bic.w	r2, r2, #32
 8017e38:	6022      	str	r2, [r4, #0]
 8017e3a:	2210      	movs	r2, #16
 8017e3c:	e7b7      	b.n	8017dae <_printf_i+0xd2>
 8017e3e:	064d      	lsls	r5, r1, #25
 8017e40:	bf48      	it	mi
 8017e42:	b29b      	uxthmi	r3, r3
 8017e44:	e7ef      	b.n	8017e26 <_printf_i+0x14a>
 8017e46:	4665      	mov	r5, ip
 8017e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8017e4c:	fb02 3311 	mls	r3, r2, r1, r3
 8017e50:	5cc3      	ldrb	r3, [r0, r3]
 8017e52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017e56:	460b      	mov	r3, r1
 8017e58:	2900      	cmp	r1, #0
 8017e5a:	d1f5      	bne.n	8017e48 <_printf_i+0x16c>
 8017e5c:	e7b9      	b.n	8017dd2 <_printf_i+0xf6>
 8017e5e:	6813      	ldr	r3, [r2, #0]
 8017e60:	6825      	ldr	r5, [r4, #0]
 8017e62:	6961      	ldr	r1, [r4, #20]
 8017e64:	1d18      	adds	r0, r3, #4
 8017e66:	6010      	str	r0, [r2, #0]
 8017e68:	0628      	lsls	r0, r5, #24
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	d501      	bpl.n	8017e72 <_printf_i+0x196>
 8017e6e:	6019      	str	r1, [r3, #0]
 8017e70:	e002      	b.n	8017e78 <_printf_i+0x19c>
 8017e72:	066a      	lsls	r2, r5, #25
 8017e74:	d5fb      	bpl.n	8017e6e <_printf_i+0x192>
 8017e76:	8019      	strh	r1, [r3, #0]
 8017e78:	2300      	movs	r3, #0
 8017e7a:	6123      	str	r3, [r4, #16]
 8017e7c:	4665      	mov	r5, ip
 8017e7e:	e7b9      	b.n	8017df4 <_printf_i+0x118>
 8017e80:	6813      	ldr	r3, [r2, #0]
 8017e82:	1d19      	adds	r1, r3, #4
 8017e84:	6011      	str	r1, [r2, #0]
 8017e86:	681d      	ldr	r5, [r3, #0]
 8017e88:	6862      	ldr	r2, [r4, #4]
 8017e8a:	2100      	movs	r1, #0
 8017e8c:	4628      	mov	r0, r5
 8017e8e:	f7e8 f9c7 	bl	8000220 <memchr>
 8017e92:	b108      	cbz	r0, 8017e98 <_printf_i+0x1bc>
 8017e94:	1b40      	subs	r0, r0, r5
 8017e96:	6060      	str	r0, [r4, #4]
 8017e98:	6863      	ldr	r3, [r4, #4]
 8017e9a:	6123      	str	r3, [r4, #16]
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ea2:	e7a7      	b.n	8017df4 <_printf_i+0x118>
 8017ea4:	6923      	ldr	r3, [r4, #16]
 8017ea6:	462a      	mov	r2, r5
 8017ea8:	4639      	mov	r1, r7
 8017eaa:	4630      	mov	r0, r6
 8017eac:	47c0      	blx	r8
 8017eae:	3001      	adds	r0, #1
 8017eb0:	d0aa      	beq.n	8017e08 <_printf_i+0x12c>
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	079b      	lsls	r3, r3, #30
 8017eb6:	d413      	bmi.n	8017ee0 <_printf_i+0x204>
 8017eb8:	68e0      	ldr	r0, [r4, #12]
 8017eba:	9b03      	ldr	r3, [sp, #12]
 8017ebc:	4298      	cmp	r0, r3
 8017ebe:	bfb8      	it	lt
 8017ec0:	4618      	movlt	r0, r3
 8017ec2:	e7a3      	b.n	8017e0c <_printf_i+0x130>
 8017ec4:	2301      	movs	r3, #1
 8017ec6:	464a      	mov	r2, r9
 8017ec8:	4639      	mov	r1, r7
 8017eca:	4630      	mov	r0, r6
 8017ecc:	47c0      	blx	r8
 8017ece:	3001      	adds	r0, #1
 8017ed0:	d09a      	beq.n	8017e08 <_printf_i+0x12c>
 8017ed2:	3501      	adds	r5, #1
 8017ed4:	68e3      	ldr	r3, [r4, #12]
 8017ed6:	9a03      	ldr	r2, [sp, #12]
 8017ed8:	1a9b      	subs	r3, r3, r2
 8017eda:	42ab      	cmp	r3, r5
 8017edc:	dcf2      	bgt.n	8017ec4 <_printf_i+0x1e8>
 8017ede:	e7eb      	b.n	8017eb8 <_printf_i+0x1dc>
 8017ee0:	2500      	movs	r5, #0
 8017ee2:	f104 0919 	add.w	r9, r4, #25
 8017ee6:	e7f5      	b.n	8017ed4 <_printf_i+0x1f8>
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d1ac      	bne.n	8017e46 <_printf_i+0x16a>
 8017eec:	7803      	ldrb	r3, [r0, #0]
 8017eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ef6:	e76c      	b.n	8017dd2 <_printf_i+0xf6>
 8017ef8:	0801a539 	.word	0x0801a539
 8017efc:	0801a54a 	.word	0x0801a54a

08017f00 <__sread>:
 8017f00:	b510      	push	{r4, lr}
 8017f02:	460c      	mov	r4, r1
 8017f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f08:	f000 f8d4 	bl	80180b4 <_read_r>
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	bfab      	itete	ge
 8017f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017f12:	89a3      	ldrhlt	r3, [r4, #12]
 8017f14:	181b      	addge	r3, r3, r0
 8017f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017f1a:	bfac      	ite	ge
 8017f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017f1e:	81a3      	strhlt	r3, [r4, #12]
 8017f20:	bd10      	pop	{r4, pc}

08017f22 <__swrite>:
 8017f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f26:	461f      	mov	r7, r3
 8017f28:	898b      	ldrh	r3, [r1, #12]
 8017f2a:	05db      	lsls	r3, r3, #23
 8017f2c:	4605      	mov	r5, r0
 8017f2e:	460c      	mov	r4, r1
 8017f30:	4616      	mov	r6, r2
 8017f32:	d505      	bpl.n	8017f40 <__swrite+0x1e>
 8017f34:	2302      	movs	r3, #2
 8017f36:	2200      	movs	r2, #0
 8017f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f3c:	f000 f868 	bl	8018010 <_lseek_r>
 8017f40:	89a3      	ldrh	r3, [r4, #12]
 8017f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017f4a:	81a3      	strh	r3, [r4, #12]
 8017f4c:	4632      	mov	r2, r6
 8017f4e:	463b      	mov	r3, r7
 8017f50:	4628      	mov	r0, r5
 8017f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f56:	f000 b817 	b.w	8017f88 <_write_r>

08017f5a <__sseek>:
 8017f5a:	b510      	push	{r4, lr}
 8017f5c:	460c      	mov	r4, r1
 8017f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f62:	f000 f855 	bl	8018010 <_lseek_r>
 8017f66:	1c43      	adds	r3, r0, #1
 8017f68:	89a3      	ldrh	r3, [r4, #12]
 8017f6a:	bf15      	itete	ne
 8017f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f76:	81a3      	strheq	r3, [r4, #12]
 8017f78:	bf18      	it	ne
 8017f7a:	81a3      	strhne	r3, [r4, #12]
 8017f7c:	bd10      	pop	{r4, pc}

08017f7e <__sclose>:
 8017f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f82:	f000 b813 	b.w	8017fac <_close_r>
	...

08017f88 <_write_r>:
 8017f88:	b538      	push	{r3, r4, r5, lr}
 8017f8a:	4c07      	ldr	r4, [pc, #28]	; (8017fa8 <_write_r+0x20>)
 8017f8c:	4605      	mov	r5, r0
 8017f8e:	4608      	mov	r0, r1
 8017f90:	4611      	mov	r1, r2
 8017f92:	2200      	movs	r2, #0
 8017f94:	6022      	str	r2, [r4, #0]
 8017f96:	461a      	mov	r2, r3
 8017f98:	f7ea fec5 	bl	8002d26 <_write>
 8017f9c:	1c43      	adds	r3, r0, #1
 8017f9e:	d102      	bne.n	8017fa6 <_write_r+0x1e>
 8017fa0:	6823      	ldr	r3, [r4, #0]
 8017fa2:	b103      	cbz	r3, 8017fa6 <_write_r+0x1e>
 8017fa4:	602b      	str	r3, [r5, #0]
 8017fa6:	bd38      	pop	{r3, r4, r5, pc}
 8017fa8:	20016ff8 	.word	0x20016ff8

08017fac <_close_r>:
 8017fac:	b538      	push	{r3, r4, r5, lr}
 8017fae:	4c06      	ldr	r4, [pc, #24]	; (8017fc8 <_close_r+0x1c>)
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	4605      	mov	r5, r0
 8017fb4:	4608      	mov	r0, r1
 8017fb6:	6023      	str	r3, [r4, #0]
 8017fb8:	f7ea fed1 	bl	8002d5e <_close>
 8017fbc:	1c43      	adds	r3, r0, #1
 8017fbe:	d102      	bne.n	8017fc6 <_close_r+0x1a>
 8017fc0:	6823      	ldr	r3, [r4, #0]
 8017fc2:	b103      	cbz	r3, 8017fc6 <_close_r+0x1a>
 8017fc4:	602b      	str	r3, [r5, #0]
 8017fc6:	bd38      	pop	{r3, r4, r5, pc}
 8017fc8:	20016ff8 	.word	0x20016ff8

08017fcc <_fstat_r>:
 8017fcc:	b538      	push	{r3, r4, r5, lr}
 8017fce:	4c07      	ldr	r4, [pc, #28]	; (8017fec <_fstat_r+0x20>)
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	4608      	mov	r0, r1
 8017fd6:	4611      	mov	r1, r2
 8017fd8:	6023      	str	r3, [r4, #0]
 8017fda:	f7ea fecc 	bl	8002d76 <_fstat>
 8017fde:	1c43      	adds	r3, r0, #1
 8017fe0:	d102      	bne.n	8017fe8 <_fstat_r+0x1c>
 8017fe2:	6823      	ldr	r3, [r4, #0]
 8017fe4:	b103      	cbz	r3, 8017fe8 <_fstat_r+0x1c>
 8017fe6:	602b      	str	r3, [r5, #0]
 8017fe8:	bd38      	pop	{r3, r4, r5, pc}
 8017fea:	bf00      	nop
 8017fec:	20016ff8 	.word	0x20016ff8

08017ff0 <_isatty_r>:
 8017ff0:	b538      	push	{r3, r4, r5, lr}
 8017ff2:	4c06      	ldr	r4, [pc, #24]	; (801800c <_isatty_r+0x1c>)
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	4605      	mov	r5, r0
 8017ff8:	4608      	mov	r0, r1
 8017ffa:	6023      	str	r3, [r4, #0]
 8017ffc:	f7ea fecb 	bl	8002d96 <_isatty>
 8018000:	1c43      	adds	r3, r0, #1
 8018002:	d102      	bne.n	801800a <_isatty_r+0x1a>
 8018004:	6823      	ldr	r3, [r4, #0]
 8018006:	b103      	cbz	r3, 801800a <_isatty_r+0x1a>
 8018008:	602b      	str	r3, [r5, #0]
 801800a:	bd38      	pop	{r3, r4, r5, pc}
 801800c:	20016ff8 	.word	0x20016ff8

08018010 <_lseek_r>:
 8018010:	b538      	push	{r3, r4, r5, lr}
 8018012:	4c07      	ldr	r4, [pc, #28]	; (8018030 <_lseek_r+0x20>)
 8018014:	4605      	mov	r5, r0
 8018016:	4608      	mov	r0, r1
 8018018:	4611      	mov	r1, r2
 801801a:	2200      	movs	r2, #0
 801801c:	6022      	str	r2, [r4, #0]
 801801e:	461a      	mov	r2, r3
 8018020:	f7ea fec4 	bl	8002dac <_lseek>
 8018024:	1c43      	adds	r3, r0, #1
 8018026:	d102      	bne.n	801802e <_lseek_r+0x1e>
 8018028:	6823      	ldr	r3, [r4, #0]
 801802a:	b103      	cbz	r3, 801802e <_lseek_r+0x1e>
 801802c:	602b      	str	r3, [r5, #0]
 801802e:	bd38      	pop	{r3, r4, r5, pc}
 8018030:	20016ff8 	.word	0x20016ff8

08018034 <memmove>:
 8018034:	4288      	cmp	r0, r1
 8018036:	b510      	push	{r4, lr}
 8018038:	eb01 0302 	add.w	r3, r1, r2
 801803c:	d807      	bhi.n	801804e <memmove+0x1a>
 801803e:	1e42      	subs	r2, r0, #1
 8018040:	4299      	cmp	r1, r3
 8018042:	d00a      	beq.n	801805a <memmove+0x26>
 8018044:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018048:	f802 4f01 	strb.w	r4, [r2, #1]!
 801804c:	e7f8      	b.n	8018040 <memmove+0xc>
 801804e:	4283      	cmp	r3, r0
 8018050:	d9f5      	bls.n	801803e <memmove+0xa>
 8018052:	1881      	adds	r1, r0, r2
 8018054:	1ad2      	subs	r2, r2, r3
 8018056:	42d3      	cmn	r3, r2
 8018058:	d100      	bne.n	801805c <memmove+0x28>
 801805a:	bd10      	pop	{r4, pc}
 801805c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018060:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018064:	e7f7      	b.n	8018056 <memmove+0x22>

08018066 <_realloc_r>:
 8018066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018068:	4607      	mov	r7, r0
 801806a:	4614      	mov	r4, r2
 801806c:	460e      	mov	r6, r1
 801806e:	b921      	cbnz	r1, 801807a <_realloc_r+0x14>
 8018070:	4611      	mov	r1, r2
 8018072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018076:	f7ff b8c7 	b.w	8017208 <_malloc_r>
 801807a:	b922      	cbnz	r2, 8018086 <_realloc_r+0x20>
 801807c:	f7ff f876 	bl	801716c <_free_r>
 8018080:	4625      	mov	r5, r4
 8018082:	4628      	mov	r0, r5
 8018084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018086:	f000 f827 	bl	80180d8 <_malloc_usable_size_r>
 801808a:	42a0      	cmp	r0, r4
 801808c:	d20f      	bcs.n	80180ae <_realloc_r+0x48>
 801808e:	4621      	mov	r1, r4
 8018090:	4638      	mov	r0, r7
 8018092:	f7ff f8b9 	bl	8017208 <_malloc_r>
 8018096:	4605      	mov	r5, r0
 8018098:	2800      	cmp	r0, #0
 801809a:	d0f2      	beq.n	8018082 <_realloc_r+0x1c>
 801809c:	4631      	mov	r1, r6
 801809e:	4622      	mov	r2, r4
 80180a0:	f7ff f850 	bl	8017144 <memcpy>
 80180a4:	4631      	mov	r1, r6
 80180a6:	4638      	mov	r0, r7
 80180a8:	f7ff f860 	bl	801716c <_free_r>
 80180ac:	e7e9      	b.n	8018082 <_realloc_r+0x1c>
 80180ae:	4635      	mov	r5, r6
 80180b0:	e7e7      	b.n	8018082 <_realloc_r+0x1c>
	...

080180b4 <_read_r>:
 80180b4:	b538      	push	{r3, r4, r5, lr}
 80180b6:	4c07      	ldr	r4, [pc, #28]	; (80180d4 <_read_r+0x20>)
 80180b8:	4605      	mov	r5, r0
 80180ba:	4608      	mov	r0, r1
 80180bc:	4611      	mov	r1, r2
 80180be:	2200      	movs	r2, #0
 80180c0:	6022      	str	r2, [r4, #0]
 80180c2:	461a      	mov	r2, r3
 80180c4:	f7ea fe12 	bl	8002cec <_read>
 80180c8:	1c43      	adds	r3, r0, #1
 80180ca:	d102      	bne.n	80180d2 <_read_r+0x1e>
 80180cc:	6823      	ldr	r3, [r4, #0]
 80180ce:	b103      	cbz	r3, 80180d2 <_read_r+0x1e>
 80180d0:	602b      	str	r3, [r5, #0]
 80180d2:	bd38      	pop	{r3, r4, r5, pc}
 80180d4:	20016ff8 	.word	0x20016ff8

080180d8 <_malloc_usable_size_r>:
 80180d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180dc:	1f18      	subs	r0, r3, #4
 80180de:	2b00      	cmp	r3, #0
 80180e0:	bfbc      	itt	lt
 80180e2:	580b      	ldrlt	r3, [r1, r0]
 80180e4:	18c0      	addlt	r0, r0, r3
 80180e6:	4770      	bx	lr

080180e8 <fmax>:
 80180e8:	b508      	push	{r3, lr}
 80180ea:	ed2d 8b04 	vpush	{d8-d9}
 80180ee:	eeb0 8a40 	vmov.f32	s16, s0
 80180f2:	eef0 8a60 	vmov.f32	s17, s1
 80180f6:	eeb0 9a41 	vmov.f32	s18, s2
 80180fa:	eef0 9a61 	vmov.f32	s19, s3
 80180fe:	f000 f841 	bl	8018184 <__fpclassifyd>
 8018102:	b168      	cbz	r0, 8018120 <fmax+0x38>
 8018104:	eeb0 0a49 	vmov.f32	s0, s18
 8018108:	eef0 0a69 	vmov.f32	s1, s19
 801810c:	f000 f83a 	bl	8018184 <__fpclassifyd>
 8018110:	b150      	cbz	r0, 8018128 <fmax+0x40>
 8018112:	ec53 2b19 	vmov	r2, r3, d9
 8018116:	ec51 0b18 	vmov	r0, r1, d8
 801811a:	f7e8 fd1d 	bl	8000b58 <__aeabi_dcmpgt>
 801811e:	b918      	cbnz	r0, 8018128 <fmax+0x40>
 8018120:	eeb0 8a49 	vmov.f32	s16, s18
 8018124:	eef0 8a69 	vmov.f32	s17, s19
 8018128:	eeb0 0a48 	vmov.f32	s0, s16
 801812c:	eef0 0a68 	vmov.f32	s1, s17
 8018130:	ecbd 8b04 	vpop	{d8-d9}
 8018134:	bd08      	pop	{r3, pc}

08018136 <fmin>:
 8018136:	b508      	push	{r3, lr}
 8018138:	ed2d 8b04 	vpush	{d8-d9}
 801813c:	eeb0 8a40 	vmov.f32	s16, s0
 8018140:	eef0 8a60 	vmov.f32	s17, s1
 8018144:	eeb0 9a41 	vmov.f32	s18, s2
 8018148:	eef0 9a61 	vmov.f32	s19, s3
 801814c:	f000 f81a 	bl	8018184 <__fpclassifyd>
 8018150:	b168      	cbz	r0, 801816e <fmin+0x38>
 8018152:	eeb0 0a49 	vmov.f32	s0, s18
 8018156:	eef0 0a69 	vmov.f32	s1, s19
 801815a:	f000 f813 	bl	8018184 <__fpclassifyd>
 801815e:	b150      	cbz	r0, 8018176 <fmin+0x40>
 8018160:	ec53 2b19 	vmov	r2, r3, d9
 8018164:	ec51 0b18 	vmov	r0, r1, d8
 8018168:	f7e8 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 801816c:	b918      	cbnz	r0, 8018176 <fmin+0x40>
 801816e:	eeb0 8a49 	vmov.f32	s16, s18
 8018172:	eef0 8a69 	vmov.f32	s17, s19
 8018176:	eeb0 0a48 	vmov.f32	s0, s16
 801817a:	eef0 0a68 	vmov.f32	s1, s17
 801817e:	ecbd 8b04 	vpop	{d8-d9}
 8018182:	bd08      	pop	{r3, pc}

08018184 <__fpclassifyd>:
 8018184:	ec51 0b10 	vmov	r0, r1, d0
 8018188:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 801818c:	b510      	push	{r4, lr}
 801818e:	460b      	mov	r3, r1
 8018190:	d01b      	beq.n	80181ca <__fpclassifyd+0x46>
 8018192:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8018196:	490f      	ldr	r1, [pc, #60]	; (80181d4 <__fpclassifyd+0x50>)
 8018198:	428c      	cmp	r4, r1
 801819a:	d910      	bls.n	80181be <__fpclassifyd+0x3a>
 801819c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80181a0:	490c      	ldr	r1, [pc, #48]	; (80181d4 <__fpclassifyd+0x50>)
 80181a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80181a6:	428b      	cmp	r3, r1
 80181a8:	d909      	bls.n	80181be <__fpclassifyd+0x3a>
 80181aa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80181ae:	d308      	bcc.n	80181c2 <__fpclassifyd+0x3e>
 80181b0:	4b09      	ldr	r3, [pc, #36]	; (80181d8 <__fpclassifyd+0x54>)
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d107      	bne.n	80181c6 <__fpclassifyd+0x42>
 80181b6:	fab0 f080 	clz	r0, r0
 80181ba:	0940      	lsrs	r0, r0, #5
 80181bc:	bd10      	pop	{r4, pc}
 80181be:	2004      	movs	r0, #4
 80181c0:	e7fc      	b.n	80181bc <__fpclassifyd+0x38>
 80181c2:	2003      	movs	r0, #3
 80181c4:	e7fa      	b.n	80181bc <__fpclassifyd+0x38>
 80181c6:	2000      	movs	r0, #0
 80181c8:	e7f8      	b.n	80181bc <__fpclassifyd+0x38>
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d1e6      	bne.n	801819c <__fpclassifyd+0x18>
 80181ce:	2002      	movs	r0, #2
 80181d0:	e7f4      	b.n	80181bc <__fpclassifyd+0x38>
 80181d2:	bf00      	nop
 80181d4:	7fdfffff 	.word	0x7fdfffff
 80181d8:	7ff00000 	.word	0x7ff00000

080181dc <pow>:
 80181dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e0:	ed2d 8b04 	vpush	{d8-d9}
 80181e4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80184b8 <pow+0x2dc>
 80181e8:	b08d      	sub	sp, #52	; 0x34
 80181ea:	ec57 6b10 	vmov	r6, r7, d0
 80181ee:	ec55 4b11 	vmov	r4, r5, d1
 80181f2:	f000 fb21 	bl	8018838 <__ieee754_pow>
 80181f6:	f999 3000 	ldrsb.w	r3, [r9]
 80181fa:	9300      	str	r3, [sp, #0]
 80181fc:	3301      	adds	r3, #1
 80181fe:	eeb0 8a40 	vmov.f32	s16, s0
 8018202:	eef0 8a60 	vmov.f32	s17, s1
 8018206:	46c8      	mov	r8, r9
 8018208:	d05f      	beq.n	80182ca <pow+0xee>
 801820a:	4622      	mov	r2, r4
 801820c:	462b      	mov	r3, r5
 801820e:	4620      	mov	r0, r4
 8018210:	4629      	mov	r1, r5
 8018212:	f7e8 fcab 	bl	8000b6c <__aeabi_dcmpun>
 8018216:	4683      	mov	fp, r0
 8018218:	2800      	cmp	r0, #0
 801821a:	d156      	bne.n	80182ca <pow+0xee>
 801821c:	4632      	mov	r2, r6
 801821e:	463b      	mov	r3, r7
 8018220:	4630      	mov	r0, r6
 8018222:	4639      	mov	r1, r7
 8018224:	f7e8 fca2 	bl	8000b6c <__aeabi_dcmpun>
 8018228:	9001      	str	r0, [sp, #4]
 801822a:	b1e8      	cbz	r0, 8018268 <pow+0x8c>
 801822c:	2200      	movs	r2, #0
 801822e:	2300      	movs	r3, #0
 8018230:	4620      	mov	r0, r4
 8018232:	4629      	mov	r1, r5
 8018234:	f7e8 fc68 	bl	8000b08 <__aeabi_dcmpeq>
 8018238:	2800      	cmp	r0, #0
 801823a:	d046      	beq.n	80182ca <pow+0xee>
 801823c:	2301      	movs	r3, #1
 801823e:	9302      	str	r3, [sp, #8]
 8018240:	4b96      	ldr	r3, [pc, #600]	; (801849c <pow+0x2c0>)
 8018242:	9303      	str	r3, [sp, #12]
 8018244:	4b96      	ldr	r3, [pc, #600]	; (80184a0 <pow+0x2c4>)
 8018246:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801824a:	2200      	movs	r2, #0
 801824c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018250:	9b00      	ldr	r3, [sp, #0]
 8018252:	2b02      	cmp	r3, #2
 8018254:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018258:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801825c:	d033      	beq.n	80182c6 <pow+0xea>
 801825e:	a802      	add	r0, sp, #8
 8018260:	f001 fb7c 	bl	801995c <matherr>
 8018264:	bb48      	cbnz	r0, 80182ba <pow+0xde>
 8018266:	e05d      	b.n	8018324 <pow+0x148>
 8018268:	f04f 0a00 	mov.w	sl, #0
 801826c:	f04f 0b00 	mov.w	fp, #0
 8018270:	4652      	mov	r2, sl
 8018272:	465b      	mov	r3, fp
 8018274:	4630      	mov	r0, r6
 8018276:	4639      	mov	r1, r7
 8018278:	f7e8 fc46 	bl	8000b08 <__aeabi_dcmpeq>
 801827c:	ec4b ab19 	vmov	d9, sl, fp
 8018280:	2800      	cmp	r0, #0
 8018282:	d054      	beq.n	801832e <pow+0x152>
 8018284:	4652      	mov	r2, sl
 8018286:	465b      	mov	r3, fp
 8018288:	4620      	mov	r0, r4
 801828a:	4629      	mov	r1, r5
 801828c:	f7e8 fc3c 	bl	8000b08 <__aeabi_dcmpeq>
 8018290:	4680      	mov	r8, r0
 8018292:	b318      	cbz	r0, 80182dc <pow+0x100>
 8018294:	2301      	movs	r3, #1
 8018296:	9302      	str	r3, [sp, #8]
 8018298:	4b80      	ldr	r3, [pc, #512]	; (801849c <pow+0x2c0>)
 801829a:	9303      	str	r3, [sp, #12]
 801829c:	9b01      	ldr	r3, [sp, #4]
 801829e:	930a      	str	r3, [sp, #40]	; 0x28
 80182a0:	9b00      	ldr	r3, [sp, #0]
 80182a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80182a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80182aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d0d5      	beq.n	801825e <pow+0x82>
 80182b2:	4b7b      	ldr	r3, [pc, #492]	; (80184a0 <pow+0x2c4>)
 80182b4:	2200      	movs	r2, #0
 80182b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80182ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182bc:	b11b      	cbz	r3, 80182c6 <pow+0xea>
 80182be:	f7fe ff07 	bl	80170d0 <__errno>
 80182c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182c4:	6003      	str	r3, [r0, #0]
 80182c6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80182ca:	eeb0 0a48 	vmov.f32	s0, s16
 80182ce:	eef0 0a68 	vmov.f32	s1, s17
 80182d2:	b00d      	add	sp, #52	; 0x34
 80182d4:	ecbd 8b04 	vpop	{d8-d9}
 80182d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182dc:	ec45 4b10 	vmov	d0, r4, r5
 80182e0:	f001 fb34 	bl	801994c <finite>
 80182e4:	2800      	cmp	r0, #0
 80182e6:	d0f0      	beq.n	80182ca <pow+0xee>
 80182e8:	4652      	mov	r2, sl
 80182ea:	465b      	mov	r3, fp
 80182ec:	4620      	mov	r0, r4
 80182ee:	4629      	mov	r1, r5
 80182f0:	f7e8 fc14 	bl	8000b1c <__aeabi_dcmplt>
 80182f4:	2800      	cmp	r0, #0
 80182f6:	d0e8      	beq.n	80182ca <pow+0xee>
 80182f8:	2301      	movs	r3, #1
 80182fa:	9302      	str	r3, [sp, #8]
 80182fc:	4b67      	ldr	r3, [pc, #412]	; (801849c <pow+0x2c0>)
 80182fe:	9303      	str	r3, [sp, #12]
 8018300:	f999 3000 	ldrsb.w	r3, [r9]
 8018304:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018308:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801830c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018310:	b913      	cbnz	r3, 8018318 <pow+0x13c>
 8018312:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018316:	e7a2      	b.n	801825e <pow+0x82>
 8018318:	4962      	ldr	r1, [pc, #392]	; (80184a4 <pow+0x2c8>)
 801831a:	2000      	movs	r0, #0
 801831c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018320:	2b02      	cmp	r3, #2
 8018322:	d19c      	bne.n	801825e <pow+0x82>
 8018324:	f7fe fed4 	bl	80170d0 <__errno>
 8018328:	2321      	movs	r3, #33	; 0x21
 801832a:	6003      	str	r3, [r0, #0]
 801832c:	e7c5      	b.n	80182ba <pow+0xde>
 801832e:	eeb0 0a48 	vmov.f32	s0, s16
 8018332:	eef0 0a68 	vmov.f32	s1, s17
 8018336:	f001 fb09 	bl	801994c <finite>
 801833a:	9000      	str	r0, [sp, #0]
 801833c:	2800      	cmp	r0, #0
 801833e:	f040 8081 	bne.w	8018444 <pow+0x268>
 8018342:	ec47 6b10 	vmov	d0, r6, r7
 8018346:	f001 fb01 	bl	801994c <finite>
 801834a:	2800      	cmp	r0, #0
 801834c:	d07a      	beq.n	8018444 <pow+0x268>
 801834e:	ec45 4b10 	vmov	d0, r4, r5
 8018352:	f001 fafb 	bl	801994c <finite>
 8018356:	2800      	cmp	r0, #0
 8018358:	d074      	beq.n	8018444 <pow+0x268>
 801835a:	ec53 2b18 	vmov	r2, r3, d8
 801835e:	ee18 0a10 	vmov	r0, s16
 8018362:	4619      	mov	r1, r3
 8018364:	f7e8 fc02 	bl	8000b6c <__aeabi_dcmpun>
 8018368:	f999 9000 	ldrsb.w	r9, [r9]
 801836c:	4b4b      	ldr	r3, [pc, #300]	; (801849c <pow+0x2c0>)
 801836e:	b1b0      	cbz	r0, 801839e <pow+0x1c2>
 8018370:	2201      	movs	r2, #1
 8018372:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018376:	9b00      	ldr	r3, [sp, #0]
 8018378:	930a      	str	r3, [sp, #40]	; 0x28
 801837a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801837e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018382:	f1b9 0f00 	cmp.w	r9, #0
 8018386:	d0c4      	beq.n	8018312 <pow+0x136>
 8018388:	4652      	mov	r2, sl
 801838a:	465b      	mov	r3, fp
 801838c:	4650      	mov	r0, sl
 801838e:	4659      	mov	r1, fp
 8018390:	f7e8 fa7c 	bl	800088c <__aeabi_ddiv>
 8018394:	f1b9 0f02 	cmp.w	r9, #2
 8018398:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801839c:	e7c1      	b.n	8018322 <pow+0x146>
 801839e:	2203      	movs	r2, #3
 80183a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80183a4:	900a      	str	r0, [sp, #40]	; 0x28
 80183a6:	4629      	mov	r1, r5
 80183a8:	4620      	mov	r0, r4
 80183aa:	2200      	movs	r2, #0
 80183ac:	4b3e      	ldr	r3, [pc, #248]	; (80184a8 <pow+0x2cc>)
 80183ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80183b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80183b6:	f7e8 f93f 	bl	8000638 <__aeabi_dmul>
 80183ba:	4604      	mov	r4, r0
 80183bc:	460d      	mov	r5, r1
 80183be:	f1b9 0f00 	cmp.w	r9, #0
 80183c2:	d124      	bne.n	801840e <pow+0x232>
 80183c4:	4b39      	ldr	r3, [pc, #228]	; (80184ac <pow+0x2d0>)
 80183c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80183ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80183ce:	4630      	mov	r0, r6
 80183d0:	4652      	mov	r2, sl
 80183d2:	465b      	mov	r3, fp
 80183d4:	4639      	mov	r1, r7
 80183d6:	f7e8 fba1 	bl	8000b1c <__aeabi_dcmplt>
 80183da:	2800      	cmp	r0, #0
 80183dc:	d056      	beq.n	801848c <pow+0x2b0>
 80183de:	ec45 4b10 	vmov	d0, r4, r5
 80183e2:	f001 fac5 	bl	8019970 <rint>
 80183e6:	4622      	mov	r2, r4
 80183e8:	462b      	mov	r3, r5
 80183ea:	ec51 0b10 	vmov	r0, r1, d0
 80183ee:	f7e8 fb8b 	bl	8000b08 <__aeabi_dcmpeq>
 80183f2:	b920      	cbnz	r0, 80183fe <pow+0x222>
 80183f4:	4b2e      	ldr	r3, [pc, #184]	; (80184b0 <pow+0x2d4>)
 80183f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80183fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80183fe:	f998 3000 	ldrsb.w	r3, [r8]
 8018402:	2b02      	cmp	r3, #2
 8018404:	d142      	bne.n	801848c <pow+0x2b0>
 8018406:	f7fe fe63 	bl	80170d0 <__errno>
 801840a:	2322      	movs	r3, #34	; 0x22
 801840c:	e78d      	b.n	801832a <pow+0x14e>
 801840e:	4b29      	ldr	r3, [pc, #164]	; (80184b4 <pow+0x2d8>)
 8018410:	2200      	movs	r2, #0
 8018412:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018416:	4630      	mov	r0, r6
 8018418:	4652      	mov	r2, sl
 801841a:	465b      	mov	r3, fp
 801841c:	4639      	mov	r1, r7
 801841e:	f7e8 fb7d 	bl	8000b1c <__aeabi_dcmplt>
 8018422:	2800      	cmp	r0, #0
 8018424:	d0eb      	beq.n	80183fe <pow+0x222>
 8018426:	ec45 4b10 	vmov	d0, r4, r5
 801842a:	f001 faa1 	bl	8019970 <rint>
 801842e:	4622      	mov	r2, r4
 8018430:	462b      	mov	r3, r5
 8018432:	ec51 0b10 	vmov	r0, r1, d0
 8018436:	f7e8 fb67 	bl	8000b08 <__aeabi_dcmpeq>
 801843a:	2800      	cmp	r0, #0
 801843c:	d1df      	bne.n	80183fe <pow+0x222>
 801843e:	2200      	movs	r2, #0
 8018440:	4b18      	ldr	r3, [pc, #96]	; (80184a4 <pow+0x2c8>)
 8018442:	e7da      	b.n	80183fa <pow+0x21e>
 8018444:	2200      	movs	r2, #0
 8018446:	2300      	movs	r3, #0
 8018448:	ec51 0b18 	vmov	r0, r1, d8
 801844c:	f7e8 fb5c 	bl	8000b08 <__aeabi_dcmpeq>
 8018450:	2800      	cmp	r0, #0
 8018452:	f43f af3a 	beq.w	80182ca <pow+0xee>
 8018456:	ec47 6b10 	vmov	d0, r6, r7
 801845a:	f001 fa77 	bl	801994c <finite>
 801845e:	2800      	cmp	r0, #0
 8018460:	f43f af33 	beq.w	80182ca <pow+0xee>
 8018464:	ec45 4b10 	vmov	d0, r4, r5
 8018468:	f001 fa70 	bl	801994c <finite>
 801846c:	2800      	cmp	r0, #0
 801846e:	f43f af2c 	beq.w	80182ca <pow+0xee>
 8018472:	2304      	movs	r3, #4
 8018474:	9302      	str	r3, [sp, #8]
 8018476:	4b09      	ldr	r3, [pc, #36]	; (801849c <pow+0x2c0>)
 8018478:	9303      	str	r3, [sp, #12]
 801847a:	2300      	movs	r3, #0
 801847c:	930a      	str	r3, [sp, #40]	; 0x28
 801847e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018482:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018486:	ed8d 9b08 	vstr	d9, [sp, #32]
 801848a:	e7b8      	b.n	80183fe <pow+0x222>
 801848c:	a802      	add	r0, sp, #8
 801848e:	f001 fa65 	bl	801995c <matherr>
 8018492:	2800      	cmp	r0, #0
 8018494:	f47f af11 	bne.w	80182ba <pow+0xde>
 8018498:	e7b5      	b.n	8018406 <pow+0x22a>
 801849a:	bf00      	nop
 801849c:	0801a55b 	.word	0x0801a55b
 80184a0:	3ff00000 	.word	0x3ff00000
 80184a4:	fff00000 	.word	0xfff00000
 80184a8:	3fe00000 	.word	0x3fe00000
 80184ac:	47efffff 	.word	0x47efffff
 80184b0:	c7efffff 	.word	0xc7efffff
 80184b4:	7ff00000 	.word	0x7ff00000
 80184b8:	200001f8 	.word	0x200001f8

080184bc <sqrt>:
 80184bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80184c0:	ed2d 8b02 	vpush	{d8}
 80184c4:	b08b      	sub	sp, #44	; 0x2c
 80184c6:	ec55 4b10 	vmov	r4, r5, d0
 80184ca:	f000 fec3 	bl	8019254 <__ieee754_sqrt>
 80184ce:	4b26      	ldr	r3, [pc, #152]	; (8018568 <sqrt+0xac>)
 80184d0:	eeb0 8a40 	vmov.f32	s16, s0
 80184d4:	eef0 8a60 	vmov.f32	s17, s1
 80184d8:	f993 6000 	ldrsb.w	r6, [r3]
 80184dc:	1c73      	adds	r3, r6, #1
 80184de:	d02a      	beq.n	8018536 <sqrt+0x7a>
 80184e0:	4622      	mov	r2, r4
 80184e2:	462b      	mov	r3, r5
 80184e4:	4620      	mov	r0, r4
 80184e6:	4629      	mov	r1, r5
 80184e8:	f7e8 fb40 	bl	8000b6c <__aeabi_dcmpun>
 80184ec:	4607      	mov	r7, r0
 80184ee:	bb10      	cbnz	r0, 8018536 <sqrt+0x7a>
 80184f0:	f04f 0800 	mov.w	r8, #0
 80184f4:	f04f 0900 	mov.w	r9, #0
 80184f8:	4642      	mov	r2, r8
 80184fa:	464b      	mov	r3, r9
 80184fc:	4620      	mov	r0, r4
 80184fe:	4629      	mov	r1, r5
 8018500:	f7e8 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 8018504:	b1b8      	cbz	r0, 8018536 <sqrt+0x7a>
 8018506:	2301      	movs	r3, #1
 8018508:	9300      	str	r3, [sp, #0]
 801850a:	4b18      	ldr	r3, [pc, #96]	; (801856c <sqrt+0xb0>)
 801850c:	9301      	str	r3, [sp, #4]
 801850e:	9708      	str	r7, [sp, #32]
 8018510:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018514:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018518:	b9b6      	cbnz	r6, 8018548 <sqrt+0x8c>
 801851a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801851e:	4668      	mov	r0, sp
 8018520:	f001 fa1c 	bl	801995c <matherr>
 8018524:	b1d0      	cbz	r0, 801855c <sqrt+0xa0>
 8018526:	9b08      	ldr	r3, [sp, #32]
 8018528:	b11b      	cbz	r3, 8018532 <sqrt+0x76>
 801852a:	f7fe fdd1 	bl	80170d0 <__errno>
 801852e:	9b08      	ldr	r3, [sp, #32]
 8018530:	6003      	str	r3, [r0, #0]
 8018532:	ed9d 8b06 	vldr	d8, [sp, #24]
 8018536:	eeb0 0a48 	vmov.f32	s0, s16
 801853a:	eef0 0a68 	vmov.f32	s1, s17
 801853e:	b00b      	add	sp, #44	; 0x2c
 8018540:	ecbd 8b02 	vpop	{d8}
 8018544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018548:	4642      	mov	r2, r8
 801854a:	464b      	mov	r3, r9
 801854c:	4640      	mov	r0, r8
 801854e:	4649      	mov	r1, r9
 8018550:	f7e8 f99c 	bl	800088c <__aeabi_ddiv>
 8018554:	2e02      	cmp	r6, #2
 8018556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801855a:	d1e0      	bne.n	801851e <sqrt+0x62>
 801855c:	f7fe fdb8 	bl	80170d0 <__errno>
 8018560:	2321      	movs	r3, #33	; 0x21
 8018562:	6003      	str	r3, [r0, #0]
 8018564:	e7df      	b.n	8018526 <sqrt+0x6a>
 8018566:	bf00      	nop
 8018568:	200001f8 	.word	0x200001f8
 801856c:	0801a55f 	.word	0x0801a55f

08018570 <powf>:
 8018570:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8018574:	ed2d 8b04 	vpush	{d8-d9}
 8018578:	4ca7      	ldr	r4, [pc, #668]	; (8018818 <powf+0x2a8>)
 801857a:	b08a      	sub	sp, #40	; 0x28
 801857c:	eef0 8a40 	vmov.f32	s17, s0
 8018580:	eeb0 8a60 	vmov.f32	s16, s1
 8018584:	f000 ff16 	bl	80193b4 <__ieee754_powf>
 8018588:	f994 5000 	ldrsb.w	r5, [r4]
 801858c:	1c6b      	adds	r3, r5, #1
 801858e:	eeb0 9a40 	vmov.f32	s18, s0
 8018592:	4626      	mov	r6, r4
 8018594:	d05f      	beq.n	8018656 <powf+0xe6>
 8018596:	eeb4 8a48 	vcmp.f32	s16, s16
 801859a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801859e:	d65a      	bvs.n	8018656 <powf+0xe6>
 80185a0:	eef4 8a68 	vcmp.f32	s17, s17
 80185a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185a8:	d721      	bvc.n	80185ee <powf+0x7e>
 80185aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80185ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b2:	d150      	bne.n	8018656 <powf+0xe6>
 80185b4:	2301      	movs	r3, #1
 80185b6:	9300      	str	r3, [sp, #0]
 80185b8:	4b98      	ldr	r3, [pc, #608]	; (801881c <powf+0x2ac>)
 80185ba:	9301      	str	r3, [sp, #4]
 80185bc:	ee18 0a90 	vmov	r0, s17
 80185c0:	2300      	movs	r3, #0
 80185c2:	9308      	str	r3, [sp, #32]
 80185c4:	f7e7 ffe0 	bl	8000588 <__aeabi_f2d>
 80185c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80185cc:	ee18 0a10 	vmov	r0, s16
 80185d0:	f7e7 ffda 	bl	8000588 <__aeabi_f2d>
 80185d4:	4b92      	ldr	r3, [pc, #584]	; (8018820 <powf+0x2b0>)
 80185d6:	2200      	movs	r2, #0
 80185d8:	2d02      	cmp	r5, #2
 80185da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80185de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80185e2:	d032      	beq.n	801864a <powf+0xda>
 80185e4:	4668      	mov	r0, sp
 80185e6:	f001 f9b9 	bl	801995c <matherr>
 80185ea:	bb40      	cbnz	r0, 801863e <powf+0xce>
 80185ec:	e065      	b.n	80186ba <powf+0x14a>
 80185ee:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8018824 <powf+0x2b4>
 80185f2:	eef4 8a69 	vcmp.f32	s17, s19
 80185f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185fa:	d163      	bne.n	80186c4 <powf+0x154>
 80185fc:	eeb4 8a69 	vcmp.f32	s16, s19
 8018600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018604:	d12e      	bne.n	8018664 <powf+0xf4>
 8018606:	2301      	movs	r3, #1
 8018608:	9300      	str	r3, [sp, #0]
 801860a:	4b84      	ldr	r3, [pc, #528]	; (801881c <powf+0x2ac>)
 801860c:	9301      	str	r3, [sp, #4]
 801860e:	ee18 0a90 	vmov	r0, s17
 8018612:	2300      	movs	r3, #0
 8018614:	9308      	str	r3, [sp, #32]
 8018616:	f7e7 ffb7 	bl	8000588 <__aeabi_f2d>
 801861a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801861e:	ee18 0a10 	vmov	r0, s16
 8018622:	f7e7 ffb1 	bl	8000588 <__aeabi_f2d>
 8018626:	2200      	movs	r2, #0
 8018628:	2300      	movs	r3, #0
 801862a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801862e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018632:	2d00      	cmp	r5, #0
 8018634:	d0d6      	beq.n	80185e4 <powf+0x74>
 8018636:	4b7a      	ldr	r3, [pc, #488]	; (8018820 <powf+0x2b0>)
 8018638:	2200      	movs	r2, #0
 801863a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801863e:	9b08      	ldr	r3, [sp, #32]
 8018640:	b11b      	cbz	r3, 801864a <powf+0xda>
 8018642:	f7fe fd45 	bl	80170d0 <__errno>
 8018646:	9b08      	ldr	r3, [sp, #32]
 8018648:	6003      	str	r3, [r0, #0]
 801864a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801864e:	f7e8 fac3 	bl	8000bd8 <__aeabi_d2f>
 8018652:	ee09 0a10 	vmov	s18, r0
 8018656:	eeb0 0a49 	vmov.f32	s0, s18
 801865a:	b00a      	add	sp, #40	; 0x28
 801865c:	ecbd 8b04 	vpop	{d8-d9}
 8018660:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8018664:	eeb0 0a48 	vmov.f32	s0, s16
 8018668:	f001 fa83 	bl	8019b72 <finitef>
 801866c:	2800      	cmp	r0, #0
 801866e:	d0f2      	beq.n	8018656 <powf+0xe6>
 8018670:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018678:	d5ed      	bpl.n	8018656 <powf+0xe6>
 801867a:	2301      	movs	r3, #1
 801867c:	9300      	str	r3, [sp, #0]
 801867e:	4b67      	ldr	r3, [pc, #412]	; (801881c <powf+0x2ac>)
 8018680:	9301      	str	r3, [sp, #4]
 8018682:	ee18 0a90 	vmov	r0, s17
 8018686:	2300      	movs	r3, #0
 8018688:	9308      	str	r3, [sp, #32]
 801868a:	f7e7 ff7d 	bl	8000588 <__aeabi_f2d>
 801868e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018692:	ee18 0a10 	vmov	r0, s16
 8018696:	f7e7 ff77 	bl	8000588 <__aeabi_f2d>
 801869a:	f994 3000 	ldrsb.w	r3, [r4]
 801869e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80186a2:	b923      	cbnz	r3, 80186ae <powf+0x13e>
 80186a4:	2200      	movs	r2, #0
 80186a6:	2300      	movs	r3, #0
 80186a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80186ac:	e79a      	b.n	80185e4 <powf+0x74>
 80186ae:	495e      	ldr	r1, [pc, #376]	; (8018828 <powf+0x2b8>)
 80186b0:	2000      	movs	r0, #0
 80186b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80186b6:	2b02      	cmp	r3, #2
 80186b8:	d194      	bne.n	80185e4 <powf+0x74>
 80186ba:	f7fe fd09 	bl	80170d0 <__errno>
 80186be:	2321      	movs	r3, #33	; 0x21
 80186c0:	6003      	str	r3, [r0, #0]
 80186c2:	e7bc      	b.n	801863e <powf+0xce>
 80186c4:	f001 fa55 	bl	8019b72 <finitef>
 80186c8:	4605      	mov	r5, r0
 80186ca:	2800      	cmp	r0, #0
 80186cc:	d173      	bne.n	80187b6 <powf+0x246>
 80186ce:	eeb0 0a68 	vmov.f32	s0, s17
 80186d2:	f001 fa4e 	bl	8019b72 <finitef>
 80186d6:	2800      	cmp	r0, #0
 80186d8:	d06d      	beq.n	80187b6 <powf+0x246>
 80186da:	eeb0 0a48 	vmov.f32	s0, s16
 80186de:	f001 fa48 	bl	8019b72 <finitef>
 80186e2:	2800      	cmp	r0, #0
 80186e4:	d067      	beq.n	80187b6 <powf+0x246>
 80186e6:	ee18 0a90 	vmov	r0, s17
 80186ea:	f7e7 ff4d 	bl	8000588 <__aeabi_f2d>
 80186ee:	4680      	mov	r8, r0
 80186f0:	ee18 0a10 	vmov	r0, s16
 80186f4:	4689      	mov	r9, r1
 80186f6:	f7e7 ff47 	bl	8000588 <__aeabi_f2d>
 80186fa:	eeb4 9a49 	vcmp.f32	s18, s18
 80186fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018702:	f994 4000 	ldrsb.w	r4, [r4]
 8018706:	4b45      	ldr	r3, [pc, #276]	; (801881c <powf+0x2ac>)
 8018708:	d713      	bvc.n	8018732 <powf+0x1c2>
 801870a:	2201      	movs	r2, #1
 801870c:	e9cd 2300 	strd	r2, r3, [sp]
 8018710:	9508      	str	r5, [sp, #32]
 8018712:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801871a:	2c00      	cmp	r4, #0
 801871c:	d0c2      	beq.n	80186a4 <powf+0x134>
 801871e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8018722:	ee17 0a90 	vmov	r0, s15
 8018726:	f7e7 ff2f 	bl	8000588 <__aeabi_f2d>
 801872a:	2c02      	cmp	r4, #2
 801872c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018730:	e7c2      	b.n	80186b8 <powf+0x148>
 8018732:	2203      	movs	r2, #3
 8018734:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018738:	e9cd 2300 	strd	r2, r3, [sp]
 801873c:	9508      	str	r5, [sp, #32]
 801873e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018742:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018746:	ee28 8a27 	vmul.f32	s16, s16, s15
 801874a:	b9fc      	cbnz	r4, 801878c <powf+0x21c>
 801874c:	4b37      	ldr	r3, [pc, #220]	; (801882c <powf+0x2bc>)
 801874e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018752:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801875a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801875e:	d553      	bpl.n	8018808 <powf+0x298>
 8018760:	eeb0 0a48 	vmov.f32	s0, s16
 8018764:	f001 fa16 	bl	8019b94 <rintf>
 8018768:	eeb4 0a48 	vcmp.f32	s0, s16
 801876c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018770:	d004      	beq.n	801877c <powf+0x20c>
 8018772:	4b2f      	ldr	r3, [pc, #188]	; (8018830 <powf+0x2c0>)
 8018774:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018778:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801877c:	f996 3000 	ldrsb.w	r3, [r6]
 8018780:	2b02      	cmp	r3, #2
 8018782:	d141      	bne.n	8018808 <powf+0x298>
 8018784:	f7fe fca4 	bl	80170d0 <__errno>
 8018788:	2322      	movs	r3, #34	; 0x22
 801878a:	e799      	b.n	80186c0 <powf+0x150>
 801878c:	4b29      	ldr	r3, [pc, #164]	; (8018834 <powf+0x2c4>)
 801878e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018792:	2200      	movs	r2, #0
 8018794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018798:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801879c:	d5ee      	bpl.n	801877c <powf+0x20c>
 801879e:	eeb0 0a48 	vmov.f32	s0, s16
 80187a2:	f001 f9f7 	bl	8019b94 <rintf>
 80187a6:	eeb4 0a48 	vcmp.f32	s0, s16
 80187aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ae:	d0e5      	beq.n	801877c <powf+0x20c>
 80187b0:	2200      	movs	r2, #0
 80187b2:	4b1d      	ldr	r3, [pc, #116]	; (8018828 <powf+0x2b8>)
 80187b4:	e7e0      	b.n	8018778 <powf+0x208>
 80187b6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80187ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187be:	f47f af4a 	bne.w	8018656 <powf+0xe6>
 80187c2:	eeb0 0a68 	vmov.f32	s0, s17
 80187c6:	f001 f9d4 	bl	8019b72 <finitef>
 80187ca:	2800      	cmp	r0, #0
 80187cc:	f43f af43 	beq.w	8018656 <powf+0xe6>
 80187d0:	eeb0 0a48 	vmov.f32	s0, s16
 80187d4:	f001 f9cd 	bl	8019b72 <finitef>
 80187d8:	2800      	cmp	r0, #0
 80187da:	f43f af3c 	beq.w	8018656 <powf+0xe6>
 80187de:	2304      	movs	r3, #4
 80187e0:	9300      	str	r3, [sp, #0]
 80187e2:	4b0e      	ldr	r3, [pc, #56]	; (801881c <powf+0x2ac>)
 80187e4:	9301      	str	r3, [sp, #4]
 80187e6:	ee18 0a90 	vmov	r0, s17
 80187ea:	2300      	movs	r3, #0
 80187ec:	9308      	str	r3, [sp, #32]
 80187ee:	f7e7 fecb 	bl	8000588 <__aeabi_f2d>
 80187f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80187f6:	ee18 0a10 	vmov	r0, s16
 80187fa:	f7e7 fec5 	bl	8000588 <__aeabi_f2d>
 80187fe:	2200      	movs	r2, #0
 8018800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018804:	2300      	movs	r3, #0
 8018806:	e7b7      	b.n	8018778 <powf+0x208>
 8018808:	4668      	mov	r0, sp
 801880a:	f001 f8a7 	bl	801995c <matherr>
 801880e:	2800      	cmp	r0, #0
 8018810:	f47f af15 	bne.w	801863e <powf+0xce>
 8018814:	e7b6      	b.n	8018784 <powf+0x214>
 8018816:	bf00      	nop
 8018818:	200001f8 	.word	0x200001f8
 801881c:	0801a564 	.word	0x0801a564
 8018820:	3ff00000 	.word	0x3ff00000
 8018824:	00000000 	.word	0x00000000
 8018828:	fff00000 	.word	0xfff00000
 801882c:	47efffff 	.word	0x47efffff
 8018830:	c7efffff 	.word	0xc7efffff
 8018834:	7ff00000 	.word	0x7ff00000

08018838 <__ieee754_pow>:
 8018838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801883c:	b091      	sub	sp, #68	; 0x44
 801883e:	ed8d 1b00 	vstr	d1, [sp]
 8018842:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018846:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801884a:	ea58 0302 	orrs.w	r3, r8, r2
 801884e:	ec57 6b10 	vmov	r6, r7, d0
 8018852:	f000 84be 	beq.w	80191d2 <__ieee754_pow+0x99a>
 8018856:	4b7a      	ldr	r3, [pc, #488]	; (8018a40 <__ieee754_pow+0x208>)
 8018858:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801885c:	429c      	cmp	r4, r3
 801885e:	463d      	mov	r5, r7
 8018860:	ee10 aa10 	vmov	sl, s0
 8018864:	dc09      	bgt.n	801887a <__ieee754_pow+0x42>
 8018866:	d103      	bne.n	8018870 <__ieee754_pow+0x38>
 8018868:	b93e      	cbnz	r6, 801887a <__ieee754_pow+0x42>
 801886a:	45a0      	cmp	r8, r4
 801886c:	dc0d      	bgt.n	801888a <__ieee754_pow+0x52>
 801886e:	e001      	b.n	8018874 <__ieee754_pow+0x3c>
 8018870:	4598      	cmp	r8, r3
 8018872:	dc02      	bgt.n	801887a <__ieee754_pow+0x42>
 8018874:	4598      	cmp	r8, r3
 8018876:	d10e      	bne.n	8018896 <__ieee754_pow+0x5e>
 8018878:	b16a      	cbz	r2, 8018896 <__ieee754_pow+0x5e>
 801887a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801887e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018882:	ea54 030a 	orrs.w	r3, r4, sl
 8018886:	f000 84a4 	beq.w	80191d2 <__ieee754_pow+0x99a>
 801888a:	486e      	ldr	r0, [pc, #440]	; (8018a44 <__ieee754_pow+0x20c>)
 801888c:	b011      	add	sp, #68	; 0x44
 801888e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018892:	f001 b865 	b.w	8019960 <nan>
 8018896:	2d00      	cmp	r5, #0
 8018898:	da53      	bge.n	8018942 <__ieee754_pow+0x10a>
 801889a:	4b6b      	ldr	r3, [pc, #428]	; (8018a48 <__ieee754_pow+0x210>)
 801889c:	4598      	cmp	r8, r3
 801889e:	dc4d      	bgt.n	801893c <__ieee754_pow+0x104>
 80188a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80188a4:	4598      	cmp	r8, r3
 80188a6:	dd4c      	ble.n	8018942 <__ieee754_pow+0x10a>
 80188a8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80188ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80188b0:	2b14      	cmp	r3, #20
 80188b2:	dd26      	ble.n	8018902 <__ieee754_pow+0xca>
 80188b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80188b8:	fa22 f103 	lsr.w	r1, r2, r3
 80188bc:	fa01 f303 	lsl.w	r3, r1, r3
 80188c0:	4293      	cmp	r3, r2
 80188c2:	d13e      	bne.n	8018942 <__ieee754_pow+0x10a>
 80188c4:	f001 0101 	and.w	r1, r1, #1
 80188c8:	f1c1 0b02 	rsb	fp, r1, #2
 80188cc:	2a00      	cmp	r2, #0
 80188ce:	d15b      	bne.n	8018988 <__ieee754_pow+0x150>
 80188d0:	4b5b      	ldr	r3, [pc, #364]	; (8018a40 <__ieee754_pow+0x208>)
 80188d2:	4598      	cmp	r8, r3
 80188d4:	d124      	bne.n	8018920 <__ieee754_pow+0xe8>
 80188d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80188da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80188de:	ea53 030a 	orrs.w	r3, r3, sl
 80188e2:	f000 8476 	beq.w	80191d2 <__ieee754_pow+0x99a>
 80188e6:	4b59      	ldr	r3, [pc, #356]	; (8018a4c <__ieee754_pow+0x214>)
 80188e8:	429c      	cmp	r4, r3
 80188ea:	dd2d      	ble.n	8018948 <__ieee754_pow+0x110>
 80188ec:	f1b9 0f00 	cmp.w	r9, #0
 80188f0:	f280 8473 	bge.w	80191da <__ieee754_pow+0x9a2>
 80188f4:	2000      	movs	r0, #0
 80188f6:	2100      	movs	r1, #0
 80188f8:	ec41 0b10 	vmov	d0, r0, r1
 80188fc:	b011      	add	sp, #68	; 0x44
 80188fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018902:	2a00      	cmp	r2, #0
 8018904:	d13e      	bne.n	8018984 <__ieee754_pow+0x14c>
 8018906:	f1c3 0314 	rsb	r3, r3, #20
 801890a:	fa48 f103 	asr.w	r1, r8, r3
 801890e:	fa01 f303 	lsl.w	r3, r1, r3
 8018912:	4543      	cmp	r3, r8
 8018914:	f040 8469 	bne.w	80191ea <__ieee754_pow+0x9b2>
 8018918:	f001 0101 	and.w	r1, r1, #1
 801891c:	f1c1 0b02 	rsb	fp, r1, #2
 8018920:	4b4b      	ldr	r3, [pc, #300]	; (8018a50 <__ieee754_pow+0x218>)
 8018922:	4598      	cmp	r8, r3
 8018924:	d118      	bne.n	8018958 <__ieee754_pow+0x120>
 8018926:	f1b9 0f00 	cmp.w	r9, #0
 801892a:	f280 845a 	bge.w	80191e2 <__ieee754_pow+0x9aa>
 801892e:	4948      	ldr	r1, [pc, #288]	; (8018a50 <__ieee754_pow+0x218>)
 8018930:	4632      	mov	r2, r6
 8018932:	463b      	mov	r3, r7
 8018934:	2000      	movs	r0, #0
 8018936:	f7e7 ffa9 	bl	800088c <__aeabi_ddiv>
 801893a:	e7dd      	b.n	80188f8 <__ieee754_pow+0xc0>
 801893c:	f04f 0b02 	mov.w	fp, #2
 8018940:	e7c4      	b.n	80188cc <__ieee754_pow+0x94>
 8018942:	f04f 0b00 	mov.w	fp, #0
 8018946:	e7c1      	b.n	80188cc <__ieee754_pow+0x94>
 8018948:	f1b9 0f00 	cmp.w	r9, #0
 801894c:	dad2      	bge.n	80188f4 <__ieee754_pow+0xbc>
 801894e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018952:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018956:	e7cf      	b.n	80188f8 <__ieee754_pow+0xc0>
 8018958:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801895c:	d106      	bne.n	801896c <__ieee754_pow+0x134>
 801895e:	4632      	mov	r2, r6
 8018960:	463b      	mov	r3, r7
 8018962:	4610      	mov	r0, r2
 8018964:	4619      	mov	r1, r3
 8018966:	f7e7 fe67 	bl	8000638 <__aeabi_dmul>
 801896a:	e7c5      	b.n	80188f8 <__ieee754_pow+0xc0>
 801896c:	4b39      	ldr	r3, [pc, #228]	; (8018a54 <__ieee754_pow+0x21c>)
 801896e:	4599      	cmp	r9, r3
 8018970:	d10a      	bne.n	8018988 <__ieee754_pow+0x150>
 8018972:	2d00      	cmp	r5, #0
 8018974:	db08      	blt.n	8018988 <__ieee754_pow+0x150>
 8018976:	ec47 6b10 	vmov	d0, r6, r7
 801897a:	b011      	add	sp, #68	; 0x44
 801897c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018980:	f000 bc68 	b.w	8019254 <__ieee754_sqrt>
 8018984:	f04f 0b00 	mov.w	fp, #0
 8018988:	ec47 6b10 	vmov	d0, r6, r7
 801898c:	f000 ffd5 	bl	801993a <fabs>
 8018990:	ec51 0b10 	vmov	r0, r1, d0
 8018994:	f1ba 0f00 	cmp.w	sl, #0
 8018998:	d127      	bne.n	80189ea <__ieee754_pow+0x1b2>
 801899a:	b124      	cbz	r4, 80189a6 <__ieee754_pow+0x16e>
 801899c:	4b2c      	ldr	r3, [pc, #176]	; (8018a50 <__ieee754_pow+0x218>)
 801899e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d121      	bne.n	80189ea <__ieee754_pow+0x1b2>
 80189a6:	f1b9 0f00 	cmp.w	r9, #0
 80189aa:	da05      	bge.n	80189b8 <__ieee754_pow+0x180>
 80189ac:	4602      	mov	r2, r0
 80189ae:	460b      	mov	r3, r1
 80189b0:	2000      	movs	r0, #0
 80189b2:	4927      	ldr	r1, [pc, #156]	; (8018a50 <__ieee754_pow+0x218>)
 80189b4:	f7e7 ff6a 	bl	800088c <__aeabi_ddiv>
 80189b8:	2d00      	cmp	r5, #0
 80189ba:	da9d      	bge.n	80188f8 <__ieee754_pow+0xc0>
 80189bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80189c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80189c4:	ea54 030b 	orrs.w	r3, r4, fp
 80189c8:	d108      	bne.n	80189dc <__ieee754_pow+0x1a4>
 80189ca:	4602      	mov	r2, r0
 80189cc:	460b      	mov	r3, r1
 80189ce:	4610      	mov	r0, r2
 80189d0:	4619      	mov	r1, r3
 80189d2:	f7e7 fc79 	bl	80002c8 <__aeabi_dsub>
 80189d6:	4602      	mov	r2, r0
 80189d8:	460b      	mov	r3, r1
 80189da:	e7ac      	b.n	8018936 <__ieee754_pow+0xfe>
 80189dc:	f1bb 0f01 	cmp.w	fp, #1
 80189e0:	d18a      	bne.n	80188f8 <__ieee754_pow+0xc0>
 80189e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80189e6:	4619      	mov	r1, r3
 80189e8:	e786      	b.n	80188f8 <__ieee754_pow+0xc0>
 80189ea:	0fed      	lsrs	r5, r5, #31
 80189ec:	1e6b      	subs	r3, r5, #1
 80189ee:	930d      	str	r3, [sp, #52]	; 0x34
 80189f0:	ea5b 0303 	orrs.w	r3, fp, r3
 80189f4:	d102      	bne.n	80189fc <__ieee754_pow+0x1c4>
 80189f6:	4632      	mov	r2, r6
 80189f8:	463b      	mov	r3, r7
 80189fa:	e7e8      	b.n	80189ce <__ieee754_pow+0x196>
 80189fc:	4b16      	ldr	r3, [pc, #88]	; (8018a58 <__ieee754_pow+0x220>)
 80189fe:	4598      	cmp	r8, r3
 8018a00:	f340 80fe 	ble.w	8018c00 <__ieee754_pow+0x3c8>
 8018a04:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018a08:	4598      	cmp	r8, r3
 8018a0a:	dd0a      	ble.n	8018a22 <__ieee754_pow+0x1ea>
 8018a0c:	4b0f      	ldr	r3, [pc, #60]	; (8018a4c <__ieee754_pow+0x214>)
 8018a0e:	429c      	cmp	r4, r3
 8018a10:	dc0d      	bgt.n	8018a2e <__ieee754_pow+0x1f6>
 8018a12:	f1b9 0f00 	cmp.w	r9, #0
 8018a16:	f6bf af6d 	bge.w	80188f4 <__ieee754_pow+0xbc>
 8018a1a:	a307      	add	r3, pc, #28	; (adr r3, 8018a38 <__ieee754_pow+0x200>)
 8018a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a20:	e79f      	b.n	8018962 <__ieee754_pow+0x12a>
 8018a22:	4b0e      	ldr	r3, [pc, #56]	; (8018a5c <__ieee754_pow+0x224>)
 8018a24:	429c      	cmp	r4, r3
 8018a26:	ddf4      	ble.n	8018a12 <__ieee754_pow+0x1da>
 8018a28:	4b09      	ldr	r3, [pc, #36]	; (8018a50 <__ieee754_pow+0x218>)
 8018a2a:	429c      	cmp	r4, r3
 8018a2c:	dd18      	ble.n	8018a60 <__ieee754_pow+0x228>
 8018a2e:	f1b9 0f00 	cmp.w	r9, #0
 8018a32:	dcf2      	bgt.n	8018a1a <__ieee754_pow+0x1e2>
 8018a34:	e75e      	b.n	80188f4 <__ieee754_pow+0xbc>
 8018a36:	bf00      	nop
 8018a38:	8800759c 	.word	0x8800759c
 8018a3c:	7e37e43c 	.word	0x7e37e43c
 8018a40:	7ff00000 	.word	0x7ff00000
 8018a44:	0801a52d 	.word	0x0801a52d
 8018a48:	433fffff 	.word	0x433fffff
 8018a4c:	3fefffff 	.word	0x3fefffff
 8018a50:	3ff00000 	.word	0x3ff00000
 8018a54:	3fe00000 	.word	0x3fe00000
 8018a58:	41e00000 	.word	0x41e00000
 8018a5c:	3feffffe 	.word	0x3feffffe
 8018a60:	2200      	movs	r2, #0
 8018a62:	4b63      	ldr	r3, [pc, #396]	; (8018bf0 <__ieee754_pow+0x3b8>)
 8018a64:	f7e7 fc30 	bl	80002c8 <__aeabi_dsub>
 8018a68:	a355      	add	r3, pc, #340	; (adr r3, 8018bc0 <__ieee754_pow+0x388>)
 8018a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a6e:	4604      	mov	r4, r0
 8018a70:	460d      	mov	r5, r1
 8018a72:	f7e7 fde1 	bl	8000638 <__aeabi_dmul>
 8018a76:	a354      	add	r3, pc, #336	; (adr r3, 8018bc8 <__ieee754_pow+0x390>)
 8018a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a7c:	4606      	mov	r6, r0
 8018a7e:	460f      	mov	r7, r1
 8018a80:	4620      	mov	r0, r4
 8018a82:	4629      	mov	r1, r5
 8018a84:	f7e7 fdd8 	bl	8000638 <__aeabi_dmul>
 8018a88:	2200      	movs	r2, #0
 8018a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a8e:	4b59      	ldr	r3, [pc, #356]	; (8018bf4 <__ieee754_pow+0x3bc>)
 8018a90:	4620      	mov	r0, r4
 8018a92:	4629      	mov	r1, r5
 8018a94:	f7e7 fdd0 	bl	8000638 <__aeabi_dmul>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	460b      	mov	r3, r1
 8018a9c:	a14c      	add	r1, pc, #304	; (adr r1, 8018bd0 <__ieee754_pow+0x398>)
 8018a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018aa2:	f7e7 fc11 	bl	80002c8 <__aeabi_dsub>
 8018aa6:	4622      	mov	r2, r4
 8018aa8:	462b      	mov	r3, r5
 8018aaa:	f7e7 fdc5 	bl	8000638 <__aeabi_dmul>
 8018aae:	4602      	mov	r2, r0
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	2000      	movs	r0, #0
 8018ab4:	4950      	ldr	r1, [pc, #320]	; (8018bf8 <__ieee754_pow+0x3c0>)
 8018ab6:	f7e7 fc07 	bl	80002c8 <__aeabi_dsub>
 8018aba:	4622      	mov	r2, r4
 8018abc:	462b      	mov	r3, r5
 8018abe:	4680      	mov	r8, r0
 8018ac0:	4689      	mov	r9, r1
 8018ac2:	4620      	mov	r0, r4
 8018ac4:	4629      	mov	r1, r5
 8018ac6:	f7e7 fdb7 	bl	8000638 <__aeabi_dmul>
 8018aca:	4602      	mov	r2, r0
 8018acc:	460b      	mov	r3, r1
 8018ace:	4640      	mov	r0, r8
 8018ad0:	4649      	mov	r1, r9
 8018ad2:	f7e7 fdb1 	bl	8000638 <__aeabi_dmul>
 8018ad6:	a340      	add	r3, pc, #256	; (adr r3, 8018bd8 <__ieee754_pow+0x3a0>)
 8018ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018adc:	f7e7 fdac 	bl	8000638 <__aeabi_dmul>
 8018ae0:	4602      	mov	r2, r0
 8018ae2:	460b      	mov	r3, r1
 8018ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018ae8:	f7e7 fbee 	bl	80002c8 <__aeabi_dsub>
 8018aec:	4602      	mov	r2, r0
 8018aee:	460b      	mov	r3, r1
 8018af0:	4604      	mov	r4, r0
 8018af2:	460d      	mov	r5, r1
 8018af4:	4630      	mov	r0, r6
 8018af6:	4639      	mov	r1, r7
 8018af8:	f7e7 fbe8 	bl	80002cc <__adddf3>
 8018afc:	2000      	movs	r0, #0
 8018afe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b02:	4632      	mov	r2, r6
 8018b04:	463b      	mov	r3, r7
 8018b06:	f7e7 fbdf 	bl	80002c8 <__aeabi_dsub>
 8018b0a:	4602      	mov	r2, r0
 8018b0c:	460b      	mov	r3, r1
 8018b0e:	4620      	mov	r0, r4
 8018b10:	4629      	mov	r1, r5
 8018b12:	f7e7 fbd9 	bl	80002c8 <__aeabi_dsub>
 8018b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b18:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018b1c:	4313      	orrs	r3, r2
 8018b1e:	4606      	mov	r6, r0
 8018b20:	460f      	mov	r7, r1
 8018b22:	f040 81eb 	bne.w	8018efc <__ieee754_pow+0x6c4>
 8018b26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018be0 <__ieee754_pow+0x3a8>
 8018b2a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018b2e:	2400      	movs	r4, #0
 8018b30:	4622      	mov	r2, r4
 8018b32:	462b      	mov	r3, r5
 8018b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018b3c:	f7e7 fbc4 	bl	80002c8 <__aeabi_dsub>
 8018b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018b44:	f7e7 fd78 	bl	8000638 <__aeabi_dmul>
 8018b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018b4c:	4680      	mov	r8, r0
 8018b4e:	4689      	mov	r9, r1
 8018b50:	4630      	mov	r0, r6
 8018b52:	4639      	mov	r1, r7
 8018b54:	f7e7 fd70 	bl	8000638 <__aeabi_dmul>
 8018b58:	4602      	mov	r2, r0
 8018b5a:	460b      	mov	r3, r1
 8018b5c:	4640      	mov	r0, r8
 8018b5e:	4649      	mov	r1, r9
 8018b60:	f7e7 fbb4 	bl	80002cc <__adddf3>
 8018b64:	4622      	mov	r2, r4
 8018b66:	462b      	mov	r3, r5
 8018b68:	4680      	mov	r8, r0
 8018b6a:	4689      	mov	r9, r1
 8018b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b70:	f7e7 fd62 	bl	8000638 <__aeabi_dmul>
 8018b74:	460b      	mov	r3, r1
 8018b76:	4604      	mov	r4, r0
 8018b78:	460d      	mov	r5, r1
 8018b7a:	4602      	mov	r2, r0
 8018b7c:	4649      	mov	r1, r9
 8018b7e:	4640      	mov	r0, r8
 8018b80:	e9cd 4500 	strd	r4, r5, [sp]
 8018b84:	f7e7 fba2 	bl	80002cc <__adddf3>
 8018b88:	4b1c      	ldr	r3, [pc, #112]	; (8018bfc <__ieee754_pow+0x3c4>)
 8018b8a:	4299      	cmp	r1, r3
 8018b8c:	4606      	mov	r6, r0
 8018b8e:	460f      	mov	r7, r1
 8018b90:	468b      	mov	fp, r1
 8018b92:	f340 82f7 	ble.w	8019184 <__ieee754_pow+0x94c>
 8018b96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018b9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018b9e:	4303      	orrs	r3, r0
 8018ba0:	f000 81ea 	beq.w	8018f78 <__ieee754_pow+0x740>
 8018ba4:	a310      	add	r3, pc, #64	; (adr r3, 8018be8 <__ieee754_pow+0x3b0>)
 8018ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018bae:	f7e7 fd43 	bl	8000638 <__aeabi_dmul>
 8018bb2:	a30d      	add	r3, pc, #52	; (adr r3, 8018be8 <__ieee754_pow+0x3b0>)
 8018bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb8:	e6d5      	b.n	8018966 <__ieee754_pow+0x12e>
 8018bba:	bf00      	nop
 8018bbc:	f3af 8000 	nop.w
 8018bc0:	60000000 	.word	0x60000000
 8018bc4:	3ff71547 	.word	0x3ff71547
 8018bc8:	f85ddf44 	.word	0xf85ddf44
 8018bcc:	3e54ae0b 	.word	0x3e54ae0b
 8018bd0:	55555555 	.word	0x55555555
 8018bd4:	3fd55555 	.word	0x3fd55555
 8018bd8:	652b82fe 	.word	0x652b82fe
 8018bdc:	3ff71547 	.word	0x3ff71547
 8018be0:	00000000 	.word	0x00000000
 8018be4:	bff00000 	.word	0xbff00000
 8018be8:	8800759c 	.word	0x8800759c
 8018bec:	7e37e43c 	.word	0x7e37e43c
 8018bf0:	3ff00000 	.word	0x3ff00000
 8018bf4:	3fd00000 	.word	0x3fd00000
 8018bf8:	3fe00000 	.word	0x3fe00000
 8018bfc:	408fffff 	.word	0x408fffff
 8018c00:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018c04:	f04f 0200 	mov.w	r2, #0
 8018c08:	da05      	bge.n	8018c16 <__ieee754_pow+0x3de>
 8018c0a:	4bd3      	ldr	r3, [pc, #844]	; (8018f58 <__ieee754_pow+0x720>)
 8018c0c:	f7e7 fd14 	bl	8000638 <__aeabi_dmul>
 8018c10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018c14:	460c      	mov	r4, r1
 8018c16:	1523      	asrs	r3, r4, #20
 8018c18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018c1c:	4413      	add	r3, r2
 8018c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8018c20:	4bce      	ldr	r3, [pc, #824]	; (8018f5c <__ieee754_pow+0x724>)
 8018c22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018c26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018c2a:	429c      	cmp	r4, r3
 8018c2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018c30:	dd08      	ble.n	8018c44 <__ieee754_pow+0x40c>
 8018c32:	4bcb      	ldr	r3, [pc, #812]	; (8018f60 <__ieee754_pow+0x728>)
 8018c34:	429c      	cmp	r4, r3
 8018c36:	f340 815e 	ble.w	8018ef6 <__ieee754_pow+0x6be>
 8018c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c3c:	3301      	adds	r3, #1
 8018c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8018c40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018c44:	f04f 0a00 	mov.w	sl, #0
 8018c48:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8018c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8018c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c50:	4bc4      	ldr	r3, [pc, #784]	; (8018f64 <__ieee754_pow+0x72c>)
 8018c52:	4413      	add	r3, r2
 8018c54:	ed93 7b00 	vldr	d7, [r3]
 8018c58:	4629      	mov	r1, r5
 8018c5a:	ec53 2b17 	vmov	r2, r3, d7
 8018c5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018c62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018c66:	f7e7 fb2f 	bl	80002c8 <__aeabi_dsub>
 8018c6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018c6e:	4606      	mov	r6, r0
 8018c70:	460f      	mov	r7, r1
 8018c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018c76:	f7e7 fb29 	bl	80002cc <__adddf3>
 8018c7a:	4602      	mov	r2, r0
 8018c7c:	460b      	mov	r3, r1
 8018c7e:	2000      	movs	r0, #0
 8018c80:	49b9      	ldr	r1, [pc, #740]	; (8018f68 <__ieee754_pow+0x730>)
 8018c82:	f7e7 fe03 	bl	800088c <__aeabi_ddiv>
 8018c86:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018c8a:	4602      	mov	r2, r0
 8018c8c:	460b      	mov	r3, r1
 8018c8e:	4630      	mov	r0, r6
 8018c90:	4639      	mov	r1, r7
 8018c92:	f7e7 fcd1 	bl	8000638 <__aeabi_dmul>
 8018c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c9a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018c9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	9302      	str	r3, [sp, #8]
 8018ca6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018caa:	106d      	asrs	r5, r5, #1
 8018cac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018cb0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8018cba:	4640      	mov	r0, r8
 8018cbc:	4649      	mov	r1, r9
 8018cbe:	4614      	mov	r4, r2
 8018cc0:	461d      	mov	r5, r3
 8018cc2:	f7e7 fcb9 	bl	8000638 <__aeabi_dmul>
 8018cc6:	4602      	mov	r2, r0
 8018cc8:	460b      	mov	r3, r1
 8018cca:	4630      	mov	r0, r6
 8018ccc:	4639      	mov	r1, r7
 8018cce:	f7e7 fafb 	bl	80002c8 <__aeabi_dsub>
 8018cd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018cd6:	4606      	mov	r6, r0
 8018cd8:	460f      	mov	r7, r1
 8018cda:	4620      	mov	r0, r4
 8018cdc:	4629      	mov	r1, r5
 8018cde:	f7e7 faf3 	bl	80002c8 <__aeabi_dsub>
 8018ce2:	4602      	mov	r2, r0
 8018ce4:	460b      	mov	r3, r1
 8018ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018cea:	f7e7 faed 	bl	80002c8 <__aeabi_dsub>
 8018cee:	4642      	mov	r2, r8
 8018cf0:	464b      	mov	r3, r9
 8018cf2:	f7e7 fca1 	bl	8000638 <__aeabi_dmul>
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	460b      	mov	r3, r1
 8018cfa:	4630      	mov	r0, r6
 8018cfc:	4639      	mov	r1, r7
 8018cfe:	f7e7 fae3 	bl	80002c8 <__aeabi_dsub>
 8018d02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018d06:	f7e7 fc97 	bl	8000638 <__aeabi_dmul>
 8018d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018d0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018d12:	4610      	mov	r0, r2
 8018d14:	4619      	mov	r1, r3
 8018d16:	f7e7 fc8f 	bl	8000638 <__aeabi_dmul>
 8018d1a:	a37b      	add	r3, pc, #492	; (adr r3, 8018f08 <__ieee754_pow+0x6d0>)
 8018d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d20:	4604      	mov	r4, r0
 8018d22:	460d      	mov	r5, r1
 8018d24:	f7e7 fc88 	bl	8000638 <__aeabi_dmul>
 8018d28:	a379      	add	r3, pc, #484	; (adr r3, 8018f10 <__ieee754_pow+0x6d8>)
 8018d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d2e:	f7e7 facd 	bl	80002cc <__adddf3>
 8018d32:	4622      	mov	r2, r4
 8018d34:	462b      	mov	r3, r5
 8018d36:	f7e7 fc7f 	bl	8000638 <__aeabi_dmul>
 8018d3a:	a377      	add	r3, pc, #476	; (adr r3, 8018f18 <__ieee754_pow+0x6e0>)
 8018d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d40:	f7e7 fac4 	bl	80002cc <__adddf3>
 8018d44:	4622      	mov	r2, r4
 8018d46:	462b      	mov	r3, r5
 8018d48:	f7e7 fc76 	bl	8000638 <__aeabi_dmul>
 8018d4c:	a374      	add	r3, pc, #464	; (adr r3, 8018f20 <__ieee754_pow+0x6e8>)
 8018d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d52:	f7e7 fabb 	bl	80002cc <__adddf3>
 8018d56:	4622      	mov	r2, r4
 8018d58:	462b      	mov	r3, r5
 8018d5a:	f7e7 fc6d 	bl	8000638 <__aeabi_dmul>
 8018d5e:	a372      	add	r3, pc, #456	; (adr r3, 8018f28 <__ieee754_pow+0x6f0>)
 8018d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d64:	f7e7 fab2 	bl	80002cc <__adddf3>
 8018d68:	4622      	mov	r2, r4
 8018d6a:	462b      	mov	r3, r5
 8018d6c:	f7e7 fc64 	bl	8000638 <__aeabi_dmul>
 8018d70:	a36f      	add	r3, pc, #444	; (adr r3, 8018f30 <__ieee754_pow+0x6f8>)
 8018d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d76:	f7e7 faa9 	bl	80002cc <__adddf3>
 8018d7a:	4622      	mov	r2, r4
 8018d7c:	4606      	mov	r6, r0
 8018d7e:	460f      	mov	r7, r1
 8018d80:	462b      	mov	r3, r5
 8018d82:	4620      	mov	r0, r4
 8018d84:	4629      	mov	r1, r5
 8018d86:	f7e7 fc57 	bl	8000638 <__aeabi_dmul>
 8018d8a:	4602      	mov	r2, r0
 8018d8c:	460b      	mov	r3, r1
 8018d8e:	4630      	mov	r0, r6
 8018d90:	4639      	mov	r1, r7
 8018d92:	f7e7 fc51 	bl	8000638 <__aeabi_dmul>
 8018d96:	4642      	mov	r2, r8
 8018d98:	4604      	mov	r4, r0
 8018d9a:	460d      	mov	r5, r1
 8018d9c:	464b      	mov	r3, r9
 8018d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018da2:	f7e7 fa93 	bl	80002cc <__adddf3>
 8018da6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018daa:	f7e7 fc45 	bl	8000638 <__aeabi_dmul>
 8018dae:	4622      	mov	r2, r4
 8018db0:	462b      	mov	r3, r5
 8018db2:	f7e7 fa8b 	bl	80002cc <__adddf3>
 8018db6:	4642      	mov	r2, r8
 8018db8:	4606      	mov	r6, r0
 8018dba:	460f      	mov	r7, r1
 8018dbc:	464b      	mov	r3, r9
 8018dbe:	4640      	mov	r0, r8
 8018dc0:	4649      	mov	r1, r9
 8018dc2:	f7e7 fc39 	bl	8000638 <__aeabi_dmul>
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	4b68      	ldr	r3, [pc, #416]	; (8018f6c <__ieee754_pow+0x734>)
 8018dca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018dce:	f7e7 fa7d 	bl	80002cc <__adddf3>
 8018dd2:	4632      	mov	r2, r6
 8018dd4:	463b      	mov	r3, r7
 8018dd6:	f7e7 fa79 	bl	80002cc <__adddf3>
 8018dda:	9802      	ldr	r0, [sp, #8]
 8018ddc:	460d      	mov	r5, r1
 8018dde:	4604      	mov	r4, r0
 8018de0:	4602      	mov	r2, r0
 8018de2:	460b      	mov	r3, r1
 8018de4:	4640      	mov	r0, r8
 8018de6:	4649      	mov	r1, r9
 8018de8:	f7e7 fc26 	bl	8000638 <__aeabi_dmul>
 8018dec:	2200      	movs	r2, #0
 8018dee:	4680      	mov	r8, r0
 8018df0:	4689      	mov	r9, r1
 8018df2:	4b5e      	ldr	r3, [pc, #376]	; (8018f6c <__ieee754_pow+0x734>)
 8018df4:	4620      	mov	r0, r4
 8018df6:	4629      	mov	r1, r5
 8018df8:	f7e7 fa66 	bl	80002c8 <__aeabi_dsub>
 8018dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018e00:	f7e7 fa62 	bl	80002c8 <__aeabi_dsub>
 8018e04:	4602      	mov	r2, r0
 8018e06:	460b      	mov	r3, r1
 8018e08:	4630      	mov	r0, r6
 8018e0a:	4639      	mov	r1, r7
 8018e0c:	f7e7 fa5c 	bl	80002c8 <__aeabi_dsub>
 8018e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018e14:	f7e7 fc10 	bl	8000638 <__aeabi_dmul>
 8018e18:	4622      	mov	r2, r4
 8018e1a:	4606      	mov	r6, r0
 8018e1c:	460f      	mov	r7, r1
 8018e1e:	462b      	mov	r3, r5
 8018e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018e24:	f7e7 fc08 	bl	8000638 <__aeabi_dmul>
 8018e28:	4602      	mov	r2, r0
 8018e2a:	460b      	mov	r3, r1
 8018e2c:	4630      	mov	r0, r6
 8018e2e:	4639      	mov	r1, r7
 8018e30:	f7e7 fa4c 	bl	80002cc <__adddf3>
 8018e34:	4606      	mov	r6, r0
 8018e36:	460f      	mov	r7, r1
 8018e38:	4602      	mov	r2, r0
 8018e3a:	460b      	mov	r3, r1
 8018e3c:	4640      	mov	r0, r8
 8018e3e:	4649      	mov	r1, r9
 8018e40:	f7e7 fa44 	bl	80002cc <__adddf3>
 8018e44:	9802      	ldr	r0, [sp, #8]
 8018e46:	a33c      	add	r3, pc, #240	; (adr r3, 8018f38 <__ieee754_pow+0x700>)
 8018e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e4c:	4604      	mov	r4, r0
 8018e4e:	460d      	mov	r5, r1
 8018e50:	f7e7 fbf2 	bl	8000638 <__aeabi_dmul>
 8018e54:	4642      	mov	r2, r8
 8018e56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018e5a:	464b      	mov	r3, r9
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	4629      	mov	r1, r5
 8018e60:	f7e7 fa32 	bl	80002c8 <__aeabi_dsub>
 8018e64:	4602      	mov	r2, r0
 8018e66:	460b      	mov	r3, r1
 8018e68:	4630      	mov	r0, r6
 8018e6a:	4639      	mov	r1, r7
 8018e6c:	f7e7 fa2c 	bl	80002c8 <__aeabi_dsub>
 8018e70:	a333      	add	r3, pc, #204	; (adr r3, 8018f40 <__ieee754_pow+0x708>)
 8018e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e76:	f7e7 fbdf 	bl	8000638 <__aeabi_dmul>
 8018e7a:	a333      	add	r3, pc, #204	; (adr r3, 8018f48 <__ieee754_pow+0x710>)
 8018e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e80:	4606      	mov	r6, r0
 8018e82:	460f      	mov	r7, r1
 8018e84:	4620      	mov	r0, r4
 8018e86:	4629      	mov	r1, r5
 8018e88:	f7e7 fbd6 	bl	8000638 <__aeabi_dmul>
 8018e8c:	4602      	mov	r2, r0
 8018e8e:	460b      	mov	r3, r1
 8018e90:	4630      	mov	r0, r6
 8018e92:	4639      	mov	r1, r7
 8018e94:	f7e7 fa1a 	bl	80002cc <__adddf3>
 8018e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e9a:	4b35      	ldr	r3, [pc, #212]	; (8018f70 <__ieee754_pow+0x738>)
 8018e9c:	4413      	add	r3, r2
 8018e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ea2:	f7e7 fa13 	bl	80002cc <__adddf3>
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018eaa:	460d      	mov	r5, r1
 8018eac:	f7e7 fb5a 	bl	8000564 <__aeabi_i2d>
 8018eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018eb2:	4b30      	ldr	r3, [pc, #192]	; (8018f74 <__ieee754_pow+0x73c>)
 8018eb4:	4413      	add	r3, r2
 8018eb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018eba:	4606      	mov	r6, r0
 8018ebc:	460f      	mov	r7, r1
 8018ebe:	4622      	mov	r2, r4
 8018ec0:	462b      	mov	r3, r5
 8018ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018ec6:	f7e7 fa01 	bl	80002cc <__adddf3>
 8018eca:	4642      	mov	r2, r8
 8018ecc:	464b      	mov	r3, r9
 8018ece:	f7e7 f9fd 	bl	80002cc <__adddf3>
 8018ed2:	4632      	mov	r2, r6
 8018ed4:	463b      	mov	r3, r7
 8018ed6:	f7e7 f9f9 	bl	80002cc <__adddf3>
 8018eda:	9802      	ldr	r0, [sp, #8]
 8018edc:	4632      	mov	r2, r6
 8018ede:	463b      	mov	r3, r7
 8018ee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ee4:	f7e7 f9f0 	bl	80002c8 <__aeabi_dsub>
 8018ee8:	4642      	mov	r2, r8
 8018eea:	464b      	mov	r3, r9
 8018eec:	f7e7 f9ec 	bl	80002c8 <__aeabi_dsub>
 8018ef0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018ef4:	e607      	b.n	8018b06 <__ieee754_pow+0x2ce>
 8018ef6:	f04f 0a01 	mov.w	sl, #1
 8018efa:	e6a5      	b.n	8018c48 <__ieee754_pow+0x410>
 8018efc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018f50 <__ieee754_pow+0x718>
 8018f00:	e613      	b.n	8018b2a <__ieee754_pow+0x2f2>
 8018f02:	bf00      	nop
 8018f04:	f3af 8000 	nop.w
 8018f08:	4a454eef 	.word	0x4a454eef
 8018f0c:	3fca7e28 	.word	0x3fca7e28
 8018f10:	93c9db65 	.word	0x93c9db65
 8018f14:	3fcd864a 	.word	0x3fcd864a
 8018f18:	a91d4101 	.word	0xa91d4101
 8018f1c:	3fd17460 	.word	0x3fd17460
 8018f20:	518f264d 	.word	0x518f264d
 8018f24:	3fd55555 	.word	0x3fd55555
 8018f28:	db6fabff 	.word	0xdb6fabff
 8018f2c:	3fdb6db6 	.word	0x3fdb6db6
 8018f30:	33333303 	.word	0x33333303
 8018f34:	3fe33333 	.word	0x3fe33333
 8018f38:	e0000000 	.word	0xe0000000
 8018f3c:	3feec709 	.word	0x3feec709
 8018f40:	dc3a03fd 	.word	0xdc3a03fd
 8018f44:	3feec709 	.word	0x3feec709
 8018f48:	145b01f5 	.word	0x145b01f5
 8018f4c:	be3e2fe0 	.word	0xbe3e2fe0
 8018f50:	00000000 	.word	0x00000000
 8018f54:	3ff00000 	.word	0x3ff00000
 8018f58:	43400000 	.word	0x43400000
 8018f5c:	0003988e 	.word	0x0003988e
 8018f60:	000bb679 	.word	0x000bb679
 8018f64:	0801a570 	.word	0x0801a570
 8018f68:	3ff00000 	.word	0x3ff00000
 8018f6c:	40080000 	.word	0x40080000
 8018f70:	0801a590 	.word	0x0801a590
 8018f74:	0801a580 	.word	0x0801a580
 8018f78:	a3b4      	add	r3, pc, #720	; (adr r3, 801924c <__ieee754_pow+0xa14>)
 8018f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f7e:	4640      	mov	r0, r8
 8018f80:	4649      	mov	r1, r9
 8018f82:	f7e7 f9a3 	bl	80002cc <__adddf3>
 8018f86:	4622      	mov	r2, r4
 8018f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018f8c:	462b      	mov	r3, r5
 8018f8e:	4630      	mov	r0, r6
 8018f90:	4639      	mov	r1, r7
 8018f92:	f7e7 f999 	bl	80002c8 <__aeabi_dsub>
 8018f96:	4602      	mov	r2, r0
 8018f98:	460b      	mov	r3, r1
 8018f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018f9e:	f7e7 fddb 	bl	8000b58 <__aeabi_dcmpgt>
 8018fa2:	2800      	cmp	r0, #0
 8018fa4:	f47f adfe 	bne.w	8018ba4 <__ieee754_pow+0x36c>
 8018fa8:	4aa3      	ldr	r2, [pc, #652]	; (8019238 <__ieee754_pow+0xa00>)
 8018faa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018fae:	4293      	cmp	r3, r2
 8018fb0:	f340 810a 	ble.w	80191c8 <__ieee754_pow+0x990>
 8018fb4:	151b      	asrs	r3, r3, #20
 8018fb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018fba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018fbe:	fa4a f303 	asr.w	r3, sl, r3
 8018fc2:	445b      	add	r3, fp
 8018fc4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018fc8:	4e9c      	ldr	r6, [pc, #624]	; (801923c <__ieee754_pow+0xa04>)
 8018fca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018fce:	4116      	asrs	r6, r2
 8018fd0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018fd4:	2000      	movs	r0, #0
 8018fd6:	ea23 0106 	bic.w	r1, r3, r6
 8018fda:	f1c2 0214 	rsb	r2, r2, #20
 8018fde:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018fe2:	fa4a fa02 	asr.w	sl, sl, r2
 8018fe6:	f1bb 0f00 	cmp.w	fp, #0
 8018fea:	4602      	mov	r2, r0
 8018fec:	460b      	mov	r3, r1
 8018fee:	4620      	mov	r0, r4
 8018ff0:	4629      	mov	r1, r5
 8018ff2:	bfb8      	it	lt
 8018ff4:	f1ca 0a00 	rsblt	sl, sl, #0
 8018ff8:	f7e7 f966 	bl	80002c8 <__aeabi_dsub>
 8018ffc:	e9cd 0100 	strd	r0, r1, [sp]
 8019000:	4642      	mov	r2, r8
 8019002:	464b      	mov	r3, r9
 8019004:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019008:	f7e7 f960 	bl	80002cc <__adddf3>
 801900c:	2000      	movs	r0, #0
 801900e:	a378      	add	r3, pc, #480	; (adr r3, 80191f0 <__ieee754_pow+0x9b8>)
 8019010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019014:	4604      	mov	r4, r0
 8019016:	460d      	mov	r5, r1
 8019018:	f7e7 fb0e 	bl	8000638 <__aeabi_dmul>
 801901c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019020:	4606      	mov	r6, r0
 8019022:	460f      	mov	r7, r1
 8019024:	4620      	mov	r0, r4
 8019026:	4629      	mov	r1, r5
 8019028:	f7e7 f94e 	bl	80002c8 <__aeabi_dsub>
 801902c:	4602      	mov	r2, r0
 801902e:	460b      	mov	r3, r1
 8019030:	4640      	mov	r0, r8
 8019032:	4649      	mov	r1, r9
 8019034:	f7e7 f948 	bl	80002c8 <__aeabi_dsub>
 8019038:	a36f      	add	r3, pc, #444	; (adr r3, 80191f8 <__ieee754_pow+0x9c0>)
 801903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801903e:	f7e7 fafb 	bl	8000638 <__aeabi_dmul>
 8019042:	a36f      	add	r3, pc, #444	; (adr r3, 8019200 <__ieee754_pow+0x9c8>)
 8019044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019048:	4680      	mov	r8, r0
 801904a:	4689      	mov	r9, r1
 801904c:	4620      	mov	r0, r4
 801904e:	4629      	mov	r1, r5
 8019050:	f7e7 faf2 	bl	8000638 <__aeabi_dmul>
 8019054:	4602      	mov	r2, r0
 8019056:	460b      	mov	r3, r1
 8019058:	4640      	mov	r0, r8
 801905a:	4649      	mov	r1, r9
 801905c:	f7e7 f936 	bl	80002cc <__adddf3>
 8019060:	4604      	mov	r4, r0
 8019062:	460d      	mov	r5, r1
 8019064:	4602      	mov	r2, r0
 8019066:	460b      	mov	r3, r1
 8019068:	4630      	mov	r0, r6
 801906a:	4639      	mov	r1, r7
 801906c:	f7e7 f92e 	bl	80002cc <__adddf3>
 8019070:	4632      	mov	r2, r6
 8019072:	463b      	mov	r3, r7
 8019074:	4680      	mov	r8, r0
 8019076:	4689      	mov	r9, r1
 8019078:	f7e7 f926 	bl	80002c8 <__aeabi_dsub>
 801907c:	4602      	mov	r2, r0
 801907e:	460b      	mov	r3, r1
 8019080:	4620      	mov	r0, r4
 8019082:	4629      	mov	r1, r5
 8019084:	f7e7 f920 	bl	80002c8 <__aeabi_dsub>
 8019088:	4642      	mov	r2, r8
 801908a:	4606      	mov	r6, r0
 801908c:	460f      	mov	r7, r1
 801908e:	464b      	mov	r3, r9
 8019090:	4640      	mov	r0, r8
 8019092:	4649      	mov	r1, r9
 8019094:	f7e7 fad0 	bl	8000638 <__aeabi_dmul>
 8019098:	a35b      	add	r3, pc, #364	; (adr r3, 8019208 <__ieee754_pow+0x9d0>)
 801909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801909e:	4604      	mov	r4, r0
 80190a0:	460d      	mov	r5, r1
 80190a2:	f7e7 fac9 	bl	8000638 <__aeabi_dmul>
 80190a6:	a35a      	add	r3, pc, #360	; (adr r3, 8019210 <__ieee754_pow+0x9d8>)
 80190a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ac:	f7e7 f90c 	bl	80002c8 <__aeabi_dsub>
 80190b0:	4622      	mov	r2, r4
 80190b2:	462b      	mov	r3, r5
 80190b4:	f7e7 fac0 	bl	8000638 <__aeabi_dmul>
 80190b8:	a357      	add	r3, pc, #348	; (adr r3, 8019218 <__ieee754_pow+0x9e0>)
 80190ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190be:	f7e7 f905 	bl	80002cc <__adddf3>
 80190c2:	4622      	mov	r2, r4
 80190c4:	462b      	mov	r3, r5
 80190c6:	f7e7 fab7 	bl	8000638 <__aeabi_dmul>
 80190ca:	a355      	add	r3, pc, #340	; (adr r3, 8019220 <__ieee754_pow+0x9e8>)
 80190cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190d0:	f7e7 f8fa 	bl	80002c8 <__aeabi_dsub>
 80190d4:	4622      	mov	r2, r4
 80190d6:	462b      	mov	r3, r5
 80190d8:	f7e7 faae 	bl	8000638 <__aeabi_dmul>
 80190dc:	a352      	add	r3, pc, #328	; (adr r3, 8019228 <__ieee754_pow+0x9f0>)
 80190de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190e2:	f7e7 f8f3 	bl	80002cc <__adddf3>
 80190e6:	4622      	mov	r2, r4
 80190e8:	462b      	mov	r3, r5
 80190ea:	f7e7 faa5 	bl	8000638 <__aeabi_dmul>
 80190ee:	4602      	mov	r2, r0
 80190f0:	460b      	mov	r3, r1
 80190f2:	4640      	mov	r0, r8
 80190f4:	4649      	mov	r1, r9
 80190f6:	f7e7 f8e7 	bl	80002c8 <__aeabi_dsub>
 80190fa:	4604      	mov	r4, r0
 80190fc:	460d      	mov	r5, r1
 80190fe:	4602      	mov	r2, r0
 8019100:	460b      	mov	r3, r1
 8019102:	4640      	mov	r0, r8
 8019104:	4649      	mov	r1, r9
 8019106:	f7e7 fa97 	bl	8000638 <__aeabi_dmul>
 801910a:	2200      	movs	r2, #0
 801910c:	e9cd 0100 	strd	r0, r1, [sp]
 8019110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019114:	4620      	mov	r0, r4
 8019116:	4629      	mov	r1, r5
 8019118:	f7e7 f8d6 	bl	80002c8 <__aeabi_dsub>
 801911c:	4602      	mov	r2, r0
 801911e:	460b      	mov	r3, r1
 8019120:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019124:	f7e7 fbb2 	bl	800088c <__aeabi_ddiv>
 8019128:	4632      	mov	r2, r6
 801912a:	4604      	mov	r4, r0
 801912c:	460d      	mov	r5, r1
 801912e:	463b      	mov	r3, r7
 8019130:	4640      	mov	r0, r8
 8019132:	4649      	mov	r1, r9
 8019134:	f7e7 fa80 	bl	8000638 <__aeabi_dmul>
 8019138:	4632      	mov	r2, r6
 801913a:	463b      	mov	r3, r7
 801913c:	f7e7 f8c6 	bl	80002cc <__adddf3>
 8019140:	4602      	mov	r2, r0
 8019142:	460b      	mov	r3, r1
 8019144:	4620      	mov	r0, r4
 8019146:	4629      	mov	r1, r5
 8019148:	f7e7 f8be 	bl	80002c8 <__aeabi_dsub>
 801914c:	4642      	mov	r2, r8
 801914e:	464b      	mov	r3, r9
 8019150:	f7e7 f8ba 	bl	80002c8 <__aeabi_dsub>
 8019154:	4602      	mov	r2, r0
 8019156:	460b      	mov	r3, r1
 8019158:	2000      	movs	r0, #0
 801915a:	4939      	ldr	r1, [pc, #228]	; (8019240 <__ieee754_pow+0xa08>)
 801915c:	f7e7 f8b4 	bl	80002c8 <__aeabi_dsub>
 8019160:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8019164:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019168:	4602      	mov	r2, r0
 801916a:	460b      	mov	r3, r1
 801916c:	da2f      	bge.n	80191ce <__ieee754_pow+0x996>
 801916e:	4650      	mov	r0, sl
 8019170:	ec43 2b10 	vmov	d0, r2, r3
 8019174:	f000 fc80 	bl	8019a78 <scalbn>
 8019178:	ec51 0b10 	vmov	r0, r1, d0
 801917c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019180:	f7ff bbf1 	b.w	8018966 <__ieee754_pow+0x12e>
 8019184:	4b2f      	ldr	r3, [pc, #188]	; (8019244 <__ieee754_pow+0xa0c>)
 8019186:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801918a:	429e      	cmp	r6, r3
 801918c:	f77f af0c 	ble.w	8018fa8 <__ieee754_pow+0x770>
 8019190:	4b2d      	ldr	r3, [pc, #180]	; (8019248 <__ieee754_pow+0xa10>)
 8019192:	440b      	add	r3, r1
 8019194:	4303      	orrs	r3, r0
 8019196:	d00b      	beq.n	80191b0 <__ieee754_pow+0x978>
 8019198:	a325      	add	r3, pc, #148	; (adr r3, 8019230 <__ieee754_pow+0x9f8>)
 801919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801919e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191a2:	f7e7 fa49 	bl	8000638 <__aeabi_dmul>
 80191a6:	a322      	add	r3, pc, #136	; (adr r3, 8019230 <__ieee754_pow+0x9f8>)
 80191a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ac:	f7ff bbdb 	b.w	8018966 <__ieee754_pow+0x12e>
 80191b0:	4622      	mov	r2, r4
 80191b2:	462b      	mov	r3, r5
 80191b4:	f7e7 f888 	bl	80002c8 <__aeabi_dsub>
 80191b8:	4642      	mov	r2, r8
 80191ba:	464b      	mov	r3, r9
 80191bc:	f7e7 fcc2 	bl	8000b44 <__aeabi_dcmpge>
 80191c0:	2800      	cmp	r0, #0
 80191c2:	f43f aef1 	beq.w	8018fa8 <__ieee754_pow+0x770>
 80191c6:	e7e7      	b.n	8019198 <__ieee754_pow+0x960>
 80191c8:	f04f 0a00 	mov.w	sl, #0
 80191cc:	e718      	b.n	8019000 <__ieee754_pow+0x7c8>
 80191ce:	4621      	mov	r1, r4
 80191d0:	e7d4      	b.n	801917c <__ieee754_pow+0x944>
 80191d2:	2000      	movs	r0, #0
 80191d4:	491a      	ldr	r1, [pc, #104]	; (8019240 <__ieee754_pow+0xa08>)
 80191d6:	f7ff bb8f 	b.w	80188f8 <__ieee754_pow+0xc0>
 80191da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80191de:	f7ff bb8b 	b.w	80188f8 <__ieee754_pow+0xc0>
 80191e2:	4630      	mov	r0, r6
 80191e4:	4639      	mov	r1, r7
 80191e6:	f7ff bb87 	b.w	80188f8 <__ieee754_pow+0xc0>
 80191ea:	4693      	mov	fp, r2
 80191ec:	f7ff bb98 	b.w	8018920 <__ieee754_pow+0xe8>
 80191f0:	00000000 	.word	0x00000000
 80191f4:	3fe62e43 	.word	0x3fe62e43
 80191f8:	fefa39ef 	.word	0xfefa39ef
 80191fc:	3fe62e42 	.word	0x3fe62e42
 8019200:	0ca86c39 	.word	0x0ca86c39
 8019204:	be205c61 	.word	0xbe205c61
 8019208:	72bea4d0 	.word	0x72bea4d0
 801920c:	3e663769 	.word	0x3e663769
 8019210:	c5d26bf1 	.word	0xc5d26bf1
 8019214:	3ebbbd41 	.word	0x3ebbbd41
 8019218:	af25de2c 	.word	0xaf25de2c
 801921c:	3f11566a 	.word	0x3f11566a
 8019220:	16bebd93 	.word	0x16bebd93
 8019224:	3f66c16c 	.word	0x3f66c16c
 8019228:	5555553e 	.word	0x5555553e
 801922c:	3fc55555 	.word	0x3fc55555
 8019230:	c2f8f359 	.word	0xc2f8f359
 8019234:	01a56e1f 	.word	0x01a56e1f
 8019238:	3fe00000 	.word	0x3fe00000
 801923c:	000fffff 	.word	0x000fffff
 8019240:	3ff00000 	.word	0x3ff00000
 8019244:	4090cbff 	.word	0x4090cbff
 8019248:	3f6f3400 	.word	0x3f6f3400
 801924c:	652b82fe 	.word	0x652b82fe
 8019250:	3c971547 	.word	0x3c971547

08019254 <__ieee754_sqrt>:
 8019254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019258:	4955      	ldr	r1, [pc, #340]	; (80193b0 <__ieee754_sqrt+0x15c>)
 801925a:	ec55 4b10 	vmov	r4, r5, d0
 801925e:	43a9      	bics	r1, r5
 8019260:	462b      	mov	r3, r5
 8019262:	462a      	mov	r2, r5
 8019264:	d112      	bne.n	801928c <__ieee754_sqrt+0x38>
 8019266:	ee10 2a10 	vmov	r2, s0
 801926a:	ee10 0a10 	vmov	r0, s0
 801926e:	4629      	mov	r1, r5
 8019270:	f7e7 f9e2 	bl	8000638 <__aeabi_dmul>
 8019274:	4602      	mov	r2, r0
 8019276:	460b      	mov	r3, r1
 8019278:	4620      	mov	r0, r4
 801927a:	4629      	mov	r1, r5
 801927c:	f7e7 f826 	bl	80002cc <__adddf3>
 8019280:	4604      	mov	r4, r0
 8019282:	460d      	mov	r5, r1
 8019284:	ec45 4b10 	vmov	d0, r4, r5
 8019288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801928c:	2d00      	cmp	r5, #0
 801928e:	ee10 0a10 	vmov	r0, s0
 8019292:	4621      	mov	r1, r4
 8019294:	dc0f      	bgt.n	80192b6 <__ieee754_sqrt+0x62>
 8019296:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801929a:	4330      	orrs	r0, r6
 801929c:	d0f2      	beq.n	8019284 <__ieee754_sqrt+0x30>
 801929e:	b155      	cbz	r5, 80192b6 <__ieee754_sqrt+0x62>
 80192a0:	ee10 2a10 	vmov	r2, s0
 80192a4:	4620      	mov	r0, r4
 80192a6:	4629      	mov	r1, r5
 80192a8:	f7e7 f80e 	bl	80002c8 <__aeabi_dsub>
 80192ac:	4602      	mov	r2, r0
 80192ae:	460b      	mov	r3, r1
 80192b0:	f7e7 faec 	bl	800088c <__aeabi_ddiv>
 80192b4:	e7e4      	b.n	8019280 <__ieee754_sqrt+0x2c>
 80192b6:	151b      	asrs	r3, r3, #20
 80192b8:	d073      	beq.n	80193a2 <__ieee754_sqrt+0x14e>
 80192ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80192be:	07dd      	lsls	r5, r3, #31
 80192c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80192c4:	bf48      	it	mi
 80192c6:	0fc8      	lsrmi	r0, r1, #31
 80192c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80192cc:	bf44      	itt	mi
 80192ce:	0049      	lslmi	r1, r1, #1
 80192d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80192d4:	2500      	movs	r5, #0
 80192d6:	1058      	asrs	r0, r3, #1
 80192d8:	0fcb      	lsrs	r3, r1, #31
 80192da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80192de:	0049      	lsls	r1, r1, #1
 80192e0:	2316      	movs	r3, #22
 80192e2:	462c      	mov	r4, r5
 80192e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80192e8:	19a7      	adds	r7, r4, r6
 80192ea:	4297      	cmp	r7, r2
 80192ec:	bfde      	ittt	le
 80192ee:	19bc      	addle	r4, r7, r6
 80192f0:	1bd2      	suble	r2, r2, r7
 80192f2:	19ad      	addle	r5, r5, r6
 80192f4:	0fcf      	lsrs	r7, r1, #31
 80192f6:	3b01      	subs	r3, #1
 80192f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80192fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019300:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019304:	d1f0      	bne.n	80192e8 <__ieee754_sqrt+0x94>
 8019306:	f04f 0c20 	mov.w	ip, #32
 801930a:	469e      	mov	lr, r3
 801930c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019310:	42a2      	cmp	r2, r4
 8019312:	eb06 070e 	add.w	r7, r6, lr
 8019316:	dc02      	bgt.n	801931e <__ieee754_sqrt+0xca>
 8019318:	d112      	bne.n	8019340 <__ieee754_sqrt+0xec>
 801931a:	428f      	cmp	r7, r1
 801931c:	d810      	bhi.n	8019340 <__ieee754_sqrt+0xec>
 801931e:	2f00      	cmp	r7, #0
 8019320:	eb07 0e06 	add.w	lr, r7, r6
 8019324:	da42      	bge.n	80193ac <__ieee754_sqrt+0x158>
 8019326:	f1be 0f00 	cmp.w	lr, #0
 801932a:	db3f      	blt.n	80193ac <__ieee754_sqrt+0x158>
 801932c:	f104 0801 	add.w	r8, r4, #1
 8019330:	1b12      	subs	r2, r2, r4
 8019332:	428f      	cmp	r7, r1
 8019334:	bf88      	it	hi
 8019336:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801933a:	1bc9      	subs	r1, r1, r7
 801933c:	4433      	add	r3, r6
 801933e:	4644      	mov	r4, r8
 8019340:	0052      	lsls	r2, r2, #1
 8019342:	f1bc 0c01 	subs.w	ip, ip, #1
 8019346:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801934a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801934e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019352:	d1dd      	bne.n	8019310 <__ieee754_sqrt+0xbc>
 8019354:	430a      	orrs	r2, r1
 8019356:	d006      	beq.n	8019366 <__ieee754_sqrt+0x112>
 8019358:	1c5c      	adds	r4, r3, #1
 801935a:	bf13      	iteet	ne
 801935c:	3301      	addne	r3, #1
 801935e:	3501      	addeq	r5, #1
 8019360:	4663      	moveq	r3, ip
 8019362:	f023 0301 	bicne.w	r3, r3, #1
 8019366:	106a      	asrs	r2, r5, #1
 8019368:	085b      	lsrs	r3, r3, #1
 801936a:	07e9      	lsls	r1, r5, #31
 801936c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019370:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019374:	bf48      	it	mi
 8019376:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801937a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801937e:	461c      	mov	r4, r3
 8019380:	e780      	b.n	8019284 <__ieee754_sqrt+0x30>
 8019382:	0aca      	lsrs	r2, r1, #11
 8019384:	3815      	subs	r0, #21
 8019386:	0549      	lsls	r1, r1, #21
 8019388:	2a00      	cmp	r2, #0
 801938a:	d0fa      	beq.n	8019382 <__ieee754_sqrt+0x12e>
 801938c:	02d6      	lsls	r6, r2, #11
 801938e:	d50a      	bpl.n	80193a6 <__ieee754_sqrt+0x152>
 8019390:	f1c3 0420 	rsb	r4, r3, #32
 8019394:	fa21 f404 	lsr.w	r4, r1, r4
 8019398:	1e5d      	subs	r5, r3, #1
 801939a:	4099      	lsls	r1, r3
 801939c:	4322      	orrs	r2, r4
 801939e:	1b43      	subs	r3, r0, r5
 80193a0:	e78b      	b.n	80192ba <__ieee754_sqrt+0x66>
 80193a2:	4618      	mov	r0, r3
 80193a4:	e7f0      	b.n	8019388 <__ieee754_sqrt+0x134>
 80193a6:	0052      	lsls	r2, r2, #1
 80193a8:	3301      	adds	r3, #1
 80193aa:	e7ef      	b.n	801938c <__ieee754_sqrt+0x138>
 80193ac:	46a0      	mov	r8, r4
 80193ae:	e7bf      	b.n	8019330 <__ieee754_sqrt+0xdc>
 80193b0:	7ff00000 	.word	0x7ff00000

080193b4 <__ieee754_powf>:
 80193b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193b8:	ee10 5a90 	vmov	r5, s1
 80193bc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80193c0:	ed2d 8b02 	vpush	{d8}
 80193c4:	eeb0 8a40 	vmov.f32	s16, s0
 80193c8:	eef0 8a60 	vmov.f32	s17, s1
 80193cc:	f000 8293 	beq.w	80198f6 <__ieee754_powf+0x542>
 80193d0:	ee10 8a10 	vmov	r8, s0
 80193d4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80193d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80193dc:	dc06      	bgt.n	80193ec <__ieee754_powf+0x38>
 80193de:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80193e2:	dd0a      	ble.n	80193fa <__ieee754_powf+0x46>
 80193e4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80193e8:	f000 8285 	beq.w	80198f6 <__ieee754_powf+0x542>
 80193ec:	ecbd 8b02 	vpop	{d8}
 80193f0:	48d9      	ldr	r0, [pc, #868]	; (8019758 <__ieee754_powf+0x3a4>)
 80193f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80193f6:	f000 bbc7 	b.w	8019b88 <nanf>
 80193fa:	f1b8 0f00 	cmp.w	r8, #0
 80193fe:	da1d      	bge.n	801943c <__ieee754_powf+0x88>
 8019400:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8019404:	da2c      	bge.n	8019460 <__ieee754_powf+0xac>
 8019406:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801940a:	db30      	blt.n	801946e <__ieee754_powf+0xba>
 801940c:	15fb      	asrs	r3, r7, #23
 801940e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8019412:	fa47 f603 	asr.w	r6, r7, r3
 8019416:	fa06 f303 	lsl.w	r3, r6, r3
 801941a:	42bb      	cmp	r3, r7
 801941c:	d127      	bne.n	801946e <__ieee754_powf+0xba>
 801941e:	f006 0601 	and.w	r6, r6, #1
 8019422:	f1c6 0602 	rsb	r6, r6, #2
 8019426:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801942a:	d122      	bne.n	8019472 <__ieee754_powf+0xbe>
 801942c:	2d00      	cmp	r5, #0
 801942e:	f280 8268 	bge.w	8019902 <__ieee754_powf+0x54e>
 8019432:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019436:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801943a:	e00d      	b.n	8019458 <__ieee754_powf+0xa4>
 801943c:	2600      	movs	r6, #0
 801943e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8019442:	d1f0      	bne.n	8019426 <__ieee754_powf+0x72>
 8019444:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019448:	f000 8255 	beq.w	80198f6 <__ieee754_powf+0x542>
 801944c:	dd0a      	ble.n	8019464 <__ieee754_powf+0xb0>
 801944e:	2d00      	cmp	r5, #0
 8019450:	f280 8254 	bge.w	80198fc <__ieee754_powf+0x548>
 8019454:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801975c <__ieee754_powf+0x3a8>
 8019458:	ecbd 8b02 	vpop	{d8}
 801945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019460:	2602      	movs	r6, #2
 8019462:	e7ec      	b.n	801943e <__ieee754_powf+0x8a>
 8019464:	2d00      	cmp	r5, #0
 8019466:	daf5      	bge.n	8019454 <__ieee754_powf+0xa0>
 8019468:	eeb1 0a68 	vneg.f32	s0, s17
 801946c:	e7f4      	b.n	8019458 <__ieee754_powf+0xa4>
 801946e:	2600      	movs	r6, #0
 8019470:	e7d9      	b.n	8019426 <__ieee754_powf+0x72>
 8019472:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8019476:	d102      	bne.n	801947e <__ieee754_powf+0xca>
 8019478:	ee28 0a08 	vmul.f32	s0, s16, s16
 801947c:	e7ec      	b.n	8019458 <__ieee754_powf+0xa4>
 801947e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8019482:	eeb0 0a48 	vmov.f32	s0, s16
 8019486:	d108      	bne.n	801949a <__ieee754_powf+0xe6>
 8019488:	f1b8 0f00 	cmp.w	r8, #0
 801948c:	db05      	blt.n	801949a <__ieee754_powf+0xe6>
 801948e:	ecbd 8b02 	vpop	{d8}
 8019492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019496:	f000 ba4d 	b.w	8019934 <__ieee754_sqrtf>
 801949a:	f000 fb63 	bl	8019b64 <fabsf>
 801949e:	b124      	cbz	r4, 80194aa <__ieee754_powf+0xf6>
 80194a0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80194a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80194a8:	d117      	bne.n	80194da <__ieee754_powf+0x126>
 80194aa:	2d00      	cmp	r5, #0
 80194ac:	bfbc      	itt	lt
 80194ae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80194b2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80194b6:	f1b8 0f00 	cmp.w	r8, #0
 80194ba:	dacd      	bge.n	8019458 <__ieee754_powf+0xa4>
 80194bc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80194c0:	ea54 0306 	orrs.w	r3, r4, r6
 80194c4:	d104      	bne.n	80194d0 <__ieee754_powf+0x11c>
 80194c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80194ca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80194ce:	e7c3      	b.n	8019458 <__ieee754_powf+0xa4>
 80194d0:	2e01      	cmp	r6, #1
 80194d2:	d1c1      	bne.n	8019458 <__ieee754_powf+0xa4>
 80194d4:	eeb1 0a40 	vneg.f32	s0, s0
 80194d8:	e7be      	b.n	8019458 <__ieee754_powf+0xa4>
 80194da:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80194de:	3801      	subs	r0, #1
 80194e0:	ea56 0300 	orrs.w	r3, r6, r0
 80194e4:	d104      	bne.n	80194f0 <__ieee754_powf+0x13c>
 80194e6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80194ea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80194ee:	e7b3      	b.n	8019458 <__ieee754_powf+0xa4>
 80194f0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80194f4:	dd6d      	ble.n	80195d2 <__ieee754_powf+0x21e>
 80194f6:	4b9a      	ldr	r3, [pc, #616]	; (8019760 <__ieee754_powf+0x3ac>)
 80194f8:	429c      	cmp	r4, r3
 80194fa:	dc06      	bgt.n	801950a <__ieee754_powf+0x156>
 80194fc:	2d00      	cmp	r5, #0
 80194fe:	daa9      	bge.n	8019454 <__ieee754_powf+0xa0>
 8019500:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8019764 <__ieee754_powf+0x3b0>
 8019504:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019508:	e7a6      	b.n	8019458 <__ieee754_powf+0xa4>
 801950a:	4b97      	ldr	r3, [pc, #604]	; (8019768 <__ieee754_powf+0x3b4>)
 801950c:	429c      	cmp	r4, r3
 801950e:	dd02      	ble.n	8019516 <__ieee754_powf+0x162>
 8019510:	2d00      	cmp	r5, #0
 8019512:	dcf5      	bgt.n	8019500 <__ieee754_powf+0x14c>
 8019514:	e79e      	b.n	8019454 <__ieee754_powf+0xa0>
 8019516:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801951a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801951e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801976c <__ieee754_powf+0x3b8>
 8019522:	eef1 6a40 	vneg.f32	s13, s0
 8019526:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801952a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801952e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019532:	eee7 7a40 	vfms.f32	s15, s14, s0
 8019536:	ee60 0a00 	vmul.f32	s1, s0, s0
 801953a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8019770 <__ieee754_powf+0x3bc>
 801953e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8019542:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8019774 <__ieee754_powf+0x3c0>
 8019546:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801954a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801954e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019778 <__ieee754_powf+0x3c4>
 8019552:	eeb0 6a67 	vmov.f32	s12, s15
 8019556:	eea0 6a07 	vfma.f32	s12, s0, s14
 801955a:	ee16 3a10 	vmov	r3, s12
 801955e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019562:	f023 030f 	bic.w	r3, r3, #15
 8019566:	ee00 3a90 	vmov	s1, r3
 801956a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801956e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019572:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8019576:	f025 050f 	bic.w	r5, r5, #15
 801957a:	ee07 5a10 	vmov	s14, r5
 801957e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019582:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8019586:	ee07 3a90 	vmov	s15, r3
 801958a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801958e:	3e01      	subs	r6, #1
 8019590:	ea56 0200 	orrs.w	r2, r6, r0
 8019594:	ee07 5a10 	vmov	s14, r5
 8019598:	ee67 7a87 	vmul.f32	s15, s15, s14
 801959c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80195a0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80195a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80195a8:	ee17 4a10 	vmov	r4, s14
 80195ac:	bf08      	it	eq
 80195ae:	eeb0 8a40 	vmoveq.f32	s16, s0
 80195b2:	2c00      	cmp	r4, #0
 80195b4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80195b8:	f340 8184 	ble.w	80198c4 <__ieee754_powf+0x510>
 80195bc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80195c0:	f340 80fc 	ble.w	80197bc <__ieee754_powf+0x408>
 80195c4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8019764 <__ieee754_powf+0x3b0>
 80195c8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80195cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80195d0:	e742      	b.n	8019458 <__ieee754_powf+0xa4>
 80195d2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80195d6:	bfbf      	itttt	lt
 80195d8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801977c <__ieee754_powf+0x3c8>
 80195dc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80195e0:	f06f 0217 	mvnlt.w	r2, #23
 80195e4:	ee17 4a90 	vmovlt	r4, s15
 80195e8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80195ec:	bfa8      	it	ge
 80195ee:	2200      	movge	r2, #0
 80195f0:	3b7f      	subs	r3, #127	; 0x7f
 80195f2:	4413      	add	r3, r2
 80195f4:	4a62      	ldr	r2, [pc, #392]	; (8019780 <__ieee754_powf+0x3cc>)
 80195f6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80195fa:	4294      	cmp	r4, r2
 80195fc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8019600:	dd06      	ble.n	8019610 <__ieee754_powf+0x25c>
 8019602:	4a60      	ldr	r2, [pc, #384]	; (8019784 <__ieee754_powf+0x3d0>)
 8019604:	4294      	cmp	r4, r2
 8019606:	f340 80a5 	ble.w	8019754 <__ieee754_powf+0x3a0>
 801960a:	3301      	adds	r3, #1
 801960c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019610:	2400      	movs	r4, #0
 8019612:	4a5d      	ldr	r2, [pc, #372]	; (8019788 <__ieee754_powf+0x3d4>)
 8019614:	00a7      	lsls	r7, r4, #2
 8019616:	443a      	add	r2, r7
 8019618:	ee07 1a90 	vmov	s15, r1
 801961c:	ed92 7a00 	vldr	s14, [r2]
 8019620:	4a5a      	ldr	r2, [pc, #360]	; (801978c <__ieee754_powf+0x3d8>)
 8019622:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019626:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801962a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801962e:	1049      	asrs	r1, r1, #1
 8019630:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8019634:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8019638:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801963c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8019640:	ee06 1a10 	vmov	s12, r1
 8019644:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8019648:	ee14 ca90 	vmov	ip, s9
 801964c:	ea02 0c0c 	and.w	ip, r2, ip
 8019650:	ee05 ca10 	vmov	s10, ip
 8019654:	eeb1 4a45 	vneg.f32	s8, s10
 8019658:	eee4 5a06 	vfma.f32	s11, s8, s12
 801965c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019660:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019790 <__ieee754_powf+0x3dc>
 8019664:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8019668:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801966c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019670:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8019674:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8019678:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019794 <__ieee754_powf+0x3e0>
 801967c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019680:	eddf 5a45 	vldr	s11, [pc, #276]	; 8019798 <__ieee754_powf+0x3e4>
 8019684:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019688:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801976c <__ieee754_powf+0x3b8>
 801968c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019690:	eddf 5a42 	vldr	s11, [pc, #264]	; 801979c <__ieee754_powf+0x3e8>
 8019694:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019698:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80197a0 <__ieee754_powf+0x3ec>
 801969c:	ee75 6a24 	vadd.f32	s13, s10, s9
 80196a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80196a4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80196a8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80196ac:	eef0 7a65 	vmov.f32	s15, s11
 80196b0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80196b4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80196b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80196bc:	ee17 1a90 	vmov	r1, s15
 80196c0:	4011      	ands	r1, r2
 80196c2:	ee07 1a90 	vmov	s15, r1
 80196c6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80196ca:	eddf 5a36 	vldr	s11, [pc, #216]	; 80197a4 <__ieee754_powf+0x3f0>
 80196ce:	eea4 7a05 	vfma.f32	s14, s8, s10
 80196d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80196d6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80196da:	eea7 7a86 	vfma.f32	s14, s15, s12
 80196de:	eeb0 6a47 	vmov.f32	s12, s14
 80196e2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80196e6:	ee16 1a10 	vmov	r1, s12
 80196ea:	4011      	ands	r1, r2
 80196ec:	ee06 1a90 	vmov	s13, r1
 80196f0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80196f4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80197a8 <__ieee754_powf+0x3f4>
 80196f8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80196fc:	ee06 1a10 	vmov	s12, r1
 8019700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019704:	eddf 7a29 	vldr	s15, [pc, #164]	; 80197ac <__ieee754_powf+0x3f8>
 8019708:	4929      	ldr	r1, [pc, #164]	; (80197b0 <__ieee754_powf+0x3fc>)
 801970a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801970e:	4439      	add	r1, r7
 8019710:	edd1 7a00 	vldr	s15, [r1]
 8019714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019718:	ee07 3a90 	vmov	s15, r3
 801971c:	eef0 0a47 	vmov.f32	s1, s14
 8019720:	4b24      	ldr	r3, [pc, #144]	; (80197b4 <__ieee754_powf+0x400>)
 8019722:	eee6 0a25 	vfma.f32	s1, s12, s11
 8019726:	443b      	add	r3, r7
 8019728:	ed93 5a00 	vldr	s10, [r3]
 801972c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019730:	ee70 0a85 	vadd.f32	s1, s1, s10
 8019734:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8019738:	ee17 3a90 	vmov	r3, s15
 801973c:	4013      	ands	r3, r2
 801973e:	ee07 3a90 	vmov	s15, r3
 8019742:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019746:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801974a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801974e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019752:	e70e      	b.n	8019572 <__ieee754_powf+0x1be>
 8019754:	2401      	movs	r4, #1
 8019756:	e75c      	b.n	8019612 <__ieee754_powf+0x25e>
 8019758:	0801a52d 	.word	0x0801a52d
 801975c:	00000000 	.word	0x00000000
 8019760:	3f7ffff7 	.word	0x3f7ffff7
 8019764:	7149f2ca 	.word	0x7149f2ca
 8019768:	3f800007 	.word	0x3f800007
 801976c:	3eaaaaab 	.word	0x3eaaaaab
 8019770:	36eca570 	.word	0x36eca570
 8019774:	3fb8aa3b 	.word	0x3fb8aa3b
 8019778:	3fb8aa00 	.word	0x3fb8aa00
 801977c:	4b800000 	.word	0x4b800000
 8019780:	001cc471 	.word	0x001cc471
 8019784:	005db3d6 	.word	0x005db3d6
 8019788:	0801a5a0 	.word	0x0801a5a0
 801978c:	fffff000 	.word	0xfffff000
 8019790:	3e6c3255 	.word	0x3e6c3255
 8019794:	3e53f142 	.word	0x3e53f142
 8019798:	3e8ba305 	.word	0x3e8ba305
 801979c:	3edb6db7 	.word	0x3edb6db7
 80197a0:	3f19999a 	.word	0x3f19999a
 80197a4:	3f763800 	.word	0x3f763800
 80197a8:	3f76384f 	.word	0x3f76384f
 80197ac:	369dc3a0 	.word	0x369dc3a0
 80197b0:	0801a5b0 	.word	0x0801a5b0
 80197b4:	0801a5a8 	.word	0x0801a5a8
 80197b8:	3338aa3c 	.word	0x3338aa3c
 80197bc:	f040 8092 	bne.w	80198e4 <__ieee754_powf+0x530>
 80197c0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80197b8 <__ieee754_powf+0x404>
 80197c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80197c8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80197cc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80197d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d4:	f73f aef6 	bgt.w	80195c4 <__ieee754_powf+0x210>
 80197d8:	15db      	asrs	r3, r3, #23
 80197da:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80197de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80197e2:	4103      	asrs	r3, r0
 80197e4:	4423      	add	r3, r4
 80197e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80197ea:	4947      	ldr	r1, [pc, #284]	; (8019908 <__ieee754_powf+0x554>)
 80197ec:	3a7f      	subs	r2, #127	; 0x7f
 80197ee:	4111      	asrs	r1, r2
 80197f0:	ea23 0101 	bic.w	r1, r3, r1
 80197f4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80197f8:	ee07 1a10 	vmov	s14, r1
 80197fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019800:	f1c2 0217 	rsb	r2, r2, #23
 8019804:	4110      	asrs	r0, r2
 8019806:	2c00      	cmp	r4, #0
 8019808:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801980c:	bfb8      	it	lt
 801980e:	4240      	neglt	r0, r0
 8019810:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019814:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801990c <__ieee754_powf+0x558>
 8019818:	ee17 3a10 	vmov	r3, s14
 801981c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019820:	f023 030f 	bic.w	r3, r3, #15
 8019824:	ee07 3a10 	vmov	s14, r3
 8019828:	ee77 7a67 	vsub.f32	s15, s14, s15
 801982c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019830:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019910 <__ieee754_powf+0x55c>
 8019834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019838:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801983c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8019914 <__ieee754_powf+0x560>
 8019840:	eeb0 0a67 	vmov.f32	s0, s15
 8019844:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019848:	eeb0 6a40 	vmov.f32	s12, s0
 801984c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019850:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019854:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019858:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019918 <__ieee754_powf+0x564>
 801985c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801991c <__ieee754_powf+0x568>
 8019860:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019864:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019920 <__ieee754_powf+0x56c>
 8019868:	eee6 6a07 	vfma.f32	s13, s12, s14
 801986c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019924 <__ieee754_powf+0x570>
 8019870:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019874:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019928 <__ieee754_powf+0x574>
 8019878:	eee6 6a07 	vfma.f32	s13, s12, s14
 801987c:	eeb0 6a40 	vmov.f32	s12, s0
 8019880:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019884:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019888:	eeb0 7a46 	vmov.f32	s14, s12
 801988c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019890:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019894:	eee0 7a27 	vfma.f32	s15, s0, s15
 8019898:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801989c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80198a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80198a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80198a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80198ac:	ee10 3a10 	vmov	r3, s0
 80198b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80198b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80198b8:	da1a      	bge.n	80198f0 <__ieee754_powf+0x53c>
 80198ba:	f000 f9c5 	bl	8019c48 <scalbnf>
 80198be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80198c2:	e5c9      	b.n	8019458 <__ieee754_powf+0xa4>
 80198c4:	4a19      	ldr	r2, [pc, #100]	; (801992c <__ieee754_powf+0x578>)
 80198c6:	4293      	cmp	r3, r2
 80198c8:	dd02      	ble.n	80198d0 <__ieee754_powf+0x51c>
 80198ca:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019930 <__ieee754_powf+0x57c>
 80198ce:	e67b      	b.n	80195c8 <__ieee754_powf+0x214>
 80198d0:	d108      	bne.n	80198e4 <__ieee754_powf+0x530>
 80198d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80198d6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80198da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198de:	f6ff af7b 	blt.w	80197d8 <__ieee754_powf+0x424>
 80198e2:	e7f2      	b.n	80198ca <__ieee754_powf+0x516>
 80198e4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80198e8:	f73f af76 	bgt.w	80197d8 <__ieee754_powf+0x424>
 80198ec:	2000      	movs	r0, #0
 80198ee:	e78f      	b.n	8019810 <__ieee754_powf+0x45c>
 80198f0:	ee00 3a10 	vmov	s0, r3
 80198f4:	e7e3      	b.n	80198be <__ieee754_powf+0x50a>
 80198f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80198fa:	e5ad      	b.n	8019458 <__ieee754_powf+0xa4>
 80198fc:	eeb0 0a68 	vmov.f32	s0, s17
 8019900:	e5aa      	b.n	8019458 <__ieee754_powf+0xa4>
 8019902:	eeb0 0a48 	vmov.f32	s0, s16
 8019906:	e5a7      	b.n	8019458 <__ieee754_powf+0xa4>
 8019908:	007fffff 	.word	0x007fffff
 801990c:	3f317218 	.word	0x3f317218
 8019910:	35bfbe8c 	.word	0x35bfbe8c
 8019914:	3f317200 	.word	0x3f317200
 8019918:	3331bb4c 	.word	0x3331bb4c
 801991c:	b5ddea0e 	.word	0xb5ddea0e
 8019920:	388ab355 	.word	0x388ab355
 8019924:	bb360b61 	.word	0xbb360b61
 8019928:	3e2aaaab 	.word	0x3e2aaaab
 801992c:	43160000 	.word	0x43160000
 8019930:	0da24260 	.word	0x0da24260

08019934 <__ieee754_sqrtf>:
 8019934:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019938:	4770      	bx	lr

0801993a <fabs>:
 801993a:	ec51 0b10 	vmov	r0, r1, d0
 801993e:	ee10 2a10 	vmov	r2, s0
 8019942:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019946:	ec43 2b10 	vmov	d0, r2, r3
 801994a:	4770      	bx	lr

0801994c <finite>:
 801994c:	ee10 3a90 	vmov	r3, s1
 8019950:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8019954:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019958:	0fc0      	lsrs	r0, r0, #31
 801995a:	4770      	bx	lr

0801995c <matherr>:
 801995c:	2000      	movs	r0, #0
 801995e:	4770      	bx	lr

08019960 <nan>:
 8019960:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019968 <nan+0x8>
 8019964:	4770      	bx	lr
 8019966:	bf00      	nop
 8019968:	00000000 	.word	0x00000000
 801996c:	7ff80000 	.word	0x7ff80000

08019970 <rint>:
 8019970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019972:	ec51 0b10 	vmov	r0, r1, d0
 8019976:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801997a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801997e:	2e13      	cmp	r6, #19
 8019980:	460b      	mov	r3, r1
 8019982:	ee10 4a10 	vmov	r4, s0
 8019986:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801998a:	dc56      	bgt.n	8019a3a <rint+0xca>
 801998c:	2e00      	cmp	r6, #0
 801998e:	da2b      	bge.n	80199e8 <rint+0x78>
 8019990:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019994:	4302      	orrs	r2, r0
 8019996:	d023      	beq.n	80199e0 <rint+0x70>
 8019998:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801999c:	4302      	orrs	r2, r0
 801999e:	4254      	negs	r4, r2
 80199a0:	4314      	orrs	r4, r2
 80199a2:	0c4b      	lsrs	r3, r1, #17
 80199a4:	0b24      	lsrs	r4, r4, #12
 80199a6:	045b      	lsls	r3, r3, #17
 80199a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80199ac:	ea44 0103 	orr.w	r1, r4, r3
 80199b0:	460b      	mov	r3, r1
 80199b2:	492f      	ldr	r1, [pc, #188]	; (8019a70 <rint+0x100>)
 80199b4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80199b8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80199bc:	4602      	mov	r2, r0
 80199be:	4639      	mov	r1, r7
 80199c0:	4630      	mov	r0, r6
 80199c2:	f7e6 fc83 	bl	80002cc <__adddf3>
 80199c6:	e9cd 0100 	strd	r0, r1, [sp]
 80199ca:	463b      	mov	r3, r7
 80199cc:	4632      	mov	r2, r6
 80199ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80199d2:	f7e6 fc79 	bl	80002c8 <__aeabi_dsub>
 80199d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80199da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80199de:	4639      	mov	r1, r7
 80199e0:	ec41 0b10 	vmov	d0, r0, r1
 80199e4:	b003      	add	sp, #12
 80199e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199e8:	4a22      	ldr	r2, [pc, #136]	; (8019a74 <rint+0x104>)
 80199ea:	4132      	asrs	r2, r6
 80199ec:	ea01 0702 	and.w	r7, r1, r2
 80199f0:	4307      	orrs	r7, r0
 80199f2:	d0f5      	beq.n	80199e0 <rint+0x70>
 80199f4:	0852      	lsrs	r2, r2, #1
 80199f6:	4011      	ands	r1, r2
 80199f8:	430c      	orrs	r4, r1
 80199fa:	d00b      	beq.n	8019a14 <rint+0xa4>
 80199fc:	ea23 0202 	bic.w	r2, r3, r2
 8019a00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019a04:	2e13      	cmp	r6, #19
 8019a06:	fa43 f306 	asr.w	r3, r3, r6
 8019a0a:	bf0c      	ite	eq
 8019a0c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019a10:	2400      	movne	r4, #0
 8019a12:	4313      	orrs	r3, r2
 8019a14:	4916      	ldr	r1, [pc, #88]	; (8019a70 <rint+0x100>)
 8019a16:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019a1a:	4622      	mov	r2, r4
 8019a1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019a20:	4620      	mov	r0, r4
 8019a22:	4629      	mov	r1, r5
 8019a24:	f7e6 fc52 	bl	80002cc <__adddf3>
 8019a28:	e9cd 0100 	strd	r0, r1, [sp]
 8019a2c:	4622      	mov	r2, r4
 8019a2e:	462b      	mov	r3, r5
 8019a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a34:	f7e6 fc48 	bl	80002c8 <__aeabi_dsub>
 8019a38:	e7d2      	b.n	80199e0 <rint+0x70>
 8019a3a:	2e33      	cmp	r6, #51	; 0x33
 8019a3c:	dd07      	ble.n	8019a4e <rint+0xde>
 8019a3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019a42:	d1cd      	bne.n	80199e0 <rint+0x70>
 8019a44:	ee10 2a10 	vmov	r2, s0
 8019a48:	f7e6 fc40 	bl	80002cc <__adddf3>
 8019a4c:	e7c8      	b.n	80199e0 <rint+0x70>
 8019a4e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8019a52:	f04f 32ff 	mov.w	r2, #4294967295
 8019a56:	40f2      	lsrs	r2, r6
 8019a58:	4210      	tst	r0, r2
 8019a5a:	d0c1      	beq.n	80199e0 <rint+0x70>
 8019a5c:	0852      	lsrs	r2, r2, #1
 8019a5e:	4210      	tst	r0, r2
 8019a60:	bf1f      	itttt	ne
 8019a62:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019a66:	ea20 0202 	bicne.w	r2, r0, r2
 8019a6a:	4134      	asrne	r4, r6
 8019a6c:	4314      	orrne	r4, r2
 8019a6e:	e7d1      	b.n	8019a14 <rint+0xa4>
 8019a70:	0801a5b8 	.word	0x0801a5b8
 8019a74:	000fffff 	.word	0x000fffff

08019a78 <scalbn>:
 8019a78:	b570      	push	{r4, r5, r6, lr}
 8019a7a:	ec55 4b10 	vmov	r4, r5, d0
 8019a7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019a82:	4606      	mov	r6, r0
 8019a84:	462b      	mov	r3, r5
 8019a86:	b9aa      	cbnz	r2, 8019ab4 <scalbn+0x3c>
 8019a88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019a8c:	4323      	orrs	r3, r4
 8019a8e:	d03b      	beq.n	8019b08 <scalbn+0x90>
 8019a90:	4b31      	ldr	r3, [pc, #196]	; (8019b58 <scalbn+0xe0>)
 8019a92:	4629      	mov	r1, r5
 8019a94:	2200      	movs	r2, #0
 8019a96:	ee10 0a10 	vmov	r0, s0
 8019a9a:	f7e6 fdcd 	bl	8000638 <__aeabi_dmul>
 8019a9e:	4b2f      	ldr	r3, [pc, #188]	; (8019b5c <scalbn+0xe4>)
 8019aa0:	429e      	cmp	r6, r3
 8019aa2:	4604      	mov	r4, r0
 8019aa4:	460d      	mov	r5, r1
 8019aa6:	da12      	bge.n	8019ace <scalbn+0x56>
 8019aa8:	a327      	add	r3, pc, #156	; (adr r3, 8019b48 <scalbn+0xd0>)
 8019aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aae:	f7e6 fdc3 	bl	8000638 <__aeabi_dmul>
 8019ab2:	e009      	b.n	8019ac8 <scalbn+0x50>
 8019ab4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019ab8:	428a      	cmp	r2, r1
 8019aba:	d10c      	bne.n	8019ad6 <scalbn+0x5e>
 8019abc:	ee10 2a10 	vmov	r2, s0
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	4629      	mov	r1, r5
 8019ac4:	f7e6 fc02 	bl	80002cc <__adddf3>
 8019ac8:	4604      	mov	r4, r0
 8019aca:	460d      	mov	r5, r1
 8019acc:	e01c      	b.n	8019b08 <scalbn+0x90>
 8019ace:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019ad2:	460b      	mov	r3, r1
 8019ad4:	3a36      	subs	r2, #54	; 0x36
 8019ad6:	4432      	add	r2, r6
 8019ad8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019adc:	428a      	cmp	r2, r1
 8019ade:	dd0b      	ble.n	8019af8 <scalbn+0x80>
 8019ae0:	ec45 4b11 	vmov	d1, r4, r5
 8019ae4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019b50 <scalbn+0xd8>
 8019ae8:	f000 f90e 	bl	8019d08 <copysign>
 8019aec:	a318      	add	r3, pc, #96	; (adr r3, 8019b50 <scalbn+0xd8>)
 8019aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af2:	ec51 0b10 	vmov	r0, r1, d0
 8019af6:	e7da      	b.n	8019aae <scalbn+0x36>
 8019af8:	2a00      	cmp	r2, #0
 8019afa:	dd08      	ble.n	8019b0e <scalbn+0x96>
 8019afc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019b00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019b04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019b08:	ec45 4b10 	vmov	d0, r4, r5
 8019b0c:	bd70      	pop	{r4, r5, r6, pc}
 8019b0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019b12:	da0d      	bge.n	8019b30 <scalbn+0xb8>
 8019b14:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019b18:	429e      	cmp	r6, r3
 8019b1a:	ec45 4b11 	vmov	d1, r4, r5
 8019b1e:	dce1      	bgt.n	8019ae4 <scalbn+0x6c>
 8019b20:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8019b48 <scalbn+0xd0>
 8019b24:	f000 f8f0 	bl	8019d08 <copysign>
 8019b28:	a307      	add	r3, pc, #28	; (adr r3, 8019b48 <scalbn+0xd0>)
 8019b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b2e:	e7e0      	b.n	8019af2 <scalbn+0x7a>
 8019b30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019b34:	3236      	adds	r2, #54	; 0x36
 8019b36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019b3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019b3e:	4620      	mov	r0, r4
 8019b40:	4629      	mov	r1, r5
 8019b42:	2200      	movs	r2, #0
 8019b44:	4b06      	ldr	r3, [pc, #24]	; (8019b60 <scalbn+0xe8>)
 8019b46:	e7b2      	b.n	8019aae <scalbn+0x36>
 8019b48:	c2f8f359 	.word	0xc2f8f359
 8019b4c:	01a56e1f 	.word	0x01a56e1f
 8019b50:	8800759c 	.word	0x8800759c
 8019b54:	7e37e43c 	.word	0x7e37e43c
 8019b58:	43500000 	.word	0x43500000
 8019b5c:	ffff3cb0 	.word	0xffff3cb0
 8019b60:	3c900000 	.word	0x3c900000

08019b64 <fabsf>:
 8019b64:	ee10 3a10 	vmov	r3, s0
 8019b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b6c:	ee00 3a10 	vmov	s0, r3
 8019b70:	4770      	bx	lr

08019b72 <finitef>:
 8019b72:	ee10 3a10 	vmov	r3, s0
 8019b76:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8019b7a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019b7e:	bfac      	ite	ge
 8019b80:	2000      	movge	r0, #0
 8019b82:	2001      	movlt	r0, #1
 8019b84:	4770      	bx	lr
	...

08019b88 <nanf>:
 8019b88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019b90 <nanf+0x8>
 8019b8c:	4770      	bx	lr
 8019b8e:	bf00      	nop
 8019b90:	7fc00000 	.word	0x7fc00000

08019b94 <rintf>:
 8019b94:	b513      	push	{r0, r1, r4, lr}
 8019b96:	ee10 1a10 	vmov	r1, s0
 8019b9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019b9e:	0ddc      	lsrs	r4, r3, #23
 8019ba0:	3c7f      	subs	r4, #127	; 0x7f
 8019ba2:	2c16      	cmp	r4, #22
 8019ba4:	dc46      	bgt.n	8019c34 <rintf+0xa0>
 8019ba6:	b32b      	cbz	r3, 8019bf4 <rintf+0x60>
 8019ba8:	2c00      	cmp	r4, #0
 8019baa:	ee10 2a10 	vmov	r2, s0
 8019bae:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8019bb2:	da21      	bge.n	8019bf8 <rintf+0x64>
 8019bb4:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8019bb8:	425b      	negs	r3, r3
 8019bba:	4a21      	ldr	r2, [pc, #132]	; (8019c40 <rintf+0xac>)
 8019bbc:	0a5b      	lsrs	r3, r3, #9
 8019bbe:	0d09      	lsrs	r1, r1, #20
 8019bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019bc4:	0509      	lsls	r1, r1, #20
 8019bc6:	430b      	orrs	r3, r1
 8019bc8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019bcc:	ee07 3a90 	vmov	s15, r3
 8019bd0:	edd2 6a00 	vldr	s13, [r2]
 8019bd4:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019bd8:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019bdc:	eddd 7a01 	vldr	s15, [sp, #4]
 8019be0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019be4:	ee17 3a90 	vmov	r3, s15
 8019be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019bec:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019bf0:	ee00 3a10 	vmov	s0, r3
 8019bf4:	b002      	add	sp, #8
 8019bf6:	bd10      	pop	{r4, pc}
 8019bf8:	4b12      	ldr	r3, [pc, #72]	; (8019c44 <rintf+0xb0>)
 8019bfa:	4123      	asrs	r3, r4
 8019bfc:	4219      	tst	r1, r3
 8019bfe:	d0f9      	beq.n	8019bf4 <rintf+0x60>
 8019c00:	085b      	lsrs	r3, r3, #1
 8019c02:	4219      	tst	r1, r3
 8019c04:	d006      	beq.n	8019c14 <rintf+0x80>
 8019c06:	ea21 0203 	bic.w	r2, r1, r3
 8019c0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019c0e:	fa43 f404 	asr.w	r4, r3, r4
 8019c12:	4322      	orrs	r2, r4
 8019c14:	4b0a      	ldr	r3, [pc, #40]	; (8019c40 <rintf+0xac>)
 8019c16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019c1a:	ed90 7a00 	vldr	s14, [r0]
 8019c1e:	ee07 2a90 	vmov	s15, r2
 8019c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c26:	edcd 7a01 	vstr	s15, [sp, #4]
 8019c2a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019c2e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019c32:	e7df      	b.n	8019bf4 <rintf+0x60>
 8019c34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019c38:	d3dc      	bcc.n	8019bf4 <rintf+0x60>
 8019c3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c3e:	e7d9      	b.n	8019bf4 <rintf+0x60>
 8019c40:	0801a5c8 	.word	0x0801a5c8
 8019c44:	007fffff 	.word	0x007fffff

08019c48 <scalbnf>:
 8019c48:	b508      	push	{r3, lr}
 8019c4a:	ee10 2a10 	vmov	r2, s0
 8019c4e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019c52:	ed2d 8b02 	vpush	{d8}
 8019c56:	eef0 0a40 	vmov.f32	s1, s0
 8019c5a:	d004      	beq.n	8019c66 <scalbnf+0x1e>
 8019c5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019c60:	d306      	bcc.n	8019c70 <scalbnf+0x28>
 8019c62:	ee70 0a00 	vadd.f32	s1, s0, s0
 8019c66:	ecbd 8b02 	vpop	{d8}
 8019c6a:	eeb0 0a60 	vmov.f32	s0, s1
 8019c6e:	bd08      	pop	{r3, pc}
 8019c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019c74:	d21c      	bcs.n	8019cb0 <scalbnf+0x68>
 8019c76:	4b1f      	ldr	r3, [pc, #124]	; (8019cf4 <scalbnf+0xac>)
 8019c78:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019cf8 <scalbnf+0xb0>
 8019c7c:	4298      	cmp	r0, r3
 8019c7e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8019c82:	db10      	blt.n	8019ca6 <scalbnf+0x5e>
 8019c84:	ee10 2a90 	vmov	r2, s1
 8019c88:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8019c8c:	3b19      	subs	r3, #25
 8019c8e:	4403      	add	r3, r0
 8019c90:	2bfe      	cmp	r3, #254	; 0xfe
 8019c92:	dd0f      	ble.n	8019cb4 <scalbnf+0x6c>
 8019c94:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8019cfc <scalbnf+0xb4>
 8019c98:	eeb0 0a48 	vmov.f32	s0, s16
 8019c9c:	f000 f843 	bl	8019d26 <copysignf>
 8019ca0:	ee60 0a08 	vmul.f32	s1, s0, s16
 8019ca4:	e7df      	b.n	8019c66 <scalbnf+0x1e>
 8019ca6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8019d00 <scalbnf+0xb8>
 8019caa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019cae:	e7da      	b.n	8019c66 <scalbnf+0x1e>
 8019cb0:	0ddb      	lsrs	r3, r3, #23
 8019cb2:	e7ec      	b.n	8019c8e <scalbnf+0x46>
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	dd06      	ble.n	8019cc6 <scalbnf+0x7e>
 8019cb8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019cbc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019cc0:	ee00 3a90 	vmov	s1, r3
 8019cc4:	e7cf      	b.n	8019c66 <scalbnf+0x1e>
 8019cc6:	f113 0f16 	cmn.w	r3, #22
 8019cca:	da06      	bge.n	8019cda <scalbnf+0x92>
 8019ccc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019cd0:	4298      	cmp	r0, r3
 8019cd2:	dcdf      	bgt.n	8019c94 <scalbnf+0x4c>
 8019cd4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8019d00 <scalbnf+0xb8>
 8019cd8:	e7de      	b.n	8019c98 <scalbnf+0x50>
 8019cda:	3319      	adds	r3, #25
 8019cdc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019ce0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019ce4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019d04 <scalbnf+0xbc>
 8019ce8:	ee07 3a10 	vmov	s14, r3
 8019cec:	ee67 0a27 	vmul.f32	s1, s14, s15
 8019cf0:	e7b9      	b.n	8019c66 <scalbnf+0x1e>
 8019cf2:	bf00      	nop
 8019cf4:	ffff3cb0 	.word	0xffff3cb0
 8019cf8:	4c000000 	.word	0x4c000000
 8019cfc:	7149f2ca 	.word	0x7149f2ca
 8019d00:	0da24260 	.word	0x0da24260
 8019d04:	33000000 	.word	0x33000000

08019d08 <copysign>:
 8019d08:	ec51 0b10 	vmov	r0, r1, d0
 8019d0c:	ee11 0a90 	vmov	r0, s3
 8019d10:	ee10 2a10 	vmov	r2, s0
 8019d14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8019d1c:	ea41 0300 	orr.w	r3, r1, r0
 8019d20:	ec43 2b10 	vmov	d0, r2, r3
 8019d24:	4770      	bx	lr

08019d26 <copysignf>:
 8019d26:	ee10 3a10 	vmov	r3, s0
 8019d2a:	ee10 2a90 	vmov	r2, s1
 8019d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019d32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8019d36:	4313      	orrs	r3, r2
 8019d38:	ee00 3a10 	vmov	s0, r3
 8019d3c:	4770      	bx	lr
	...

08019d40 <_init>:
 8019d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d42:	bf00      	nop
 8019d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d46:	bc08      	pop	{r3}
 8019d48:	469e      	mov	lr, r3
 8019d4a:	4770      	bx	lr

08019d4c <_fini>:
 8019d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d4e:	bf00      	nop
 8019d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d52:	bc08      	pop	{r3}
 8019d54:	469e      	mov	lr, r3
 8019d56:	4770      	bx	lr
