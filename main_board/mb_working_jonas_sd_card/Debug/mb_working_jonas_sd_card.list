
mb_working_jonas_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  080163c8  080163c8  000263c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a80  08016a80  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08016a80  08016a80  00026a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a88  08016a88  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a88  08016a88  00026a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a8c  08016a8c  00026a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08016a90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012cdc  200001fc  08016c8c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20012ed8  08016c8c  00032ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034f7d  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006746  00000000  00000000  000651a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002320  00000000  00000000  0006b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002028  00000000  00000000  0006dc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b0fe  00000000  00000000  0006fc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023a75  00000000  00000000  0007ad36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff00b  00000000  00000000  0009e7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019d7b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d8  00000000  00000000  0019d834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080163ac 	.word	0x080163ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	080163ac 	.word	0x080163ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b091      	sub	sp, #68	; 0x44
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f002 fc46 	bl	800380e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f8b7 	bl	80010f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  (DBGMCU)->APB1FZ = 0x7E01BFF;
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <main+0x110>)
 8000f88:	4a40      	ldr	r2, [pc, #256]	; (800108c <main+0x114>)
 8000f8a:	609a      	str	r2, [r3, #8]
  (DBGMCU)->APB2FZ = 0x70003;
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <main+0x110>)
 8000f8e:	4a40      	ldr	r2, [pc, #256]	; (8001090 <main+0x118>)
 8000f90:	60da      	str	r2, [r3, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fa2b 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000f96:	f000 fa03 	bl	80013a0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000f9a:	f000 f9c9 	bl	8001330 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f957 	bl	8001250 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8000fa2:	f000 f935 	bl	8001210 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000fa6:	f000 f98b 	bl	80012c0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000faa:	f00a f949 	bl	800b240 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000fae:	f012 ff2d 	bl	8013e0c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fb2:	f00e ff37 	bl	800fe24 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Barometer Mutex */
   const osMutexAttr_t sb1_mutex_attr = {
 8000fb6:	4b37      	ldr	r3, [pc, #220]	; (8001094 <main+0x11c>)
 8000fb8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     osMutexPrioInherit,                       // attr_bits
     NULL,                                     // memory for control block
     0U                                        // size for control block
   };

   sb1_mutex = osMutexNew(&sb1_mutex_attr);
 8000fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00f f8fe 	bl	80101c8 <osMutexNew>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <main+0x120>)
 8000fd0:	601a      	str	r2, [r3, #0]

   /* Barometer Mutex */
    const osMutexAttr_t sb2_mutex_attr = {
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <main+0x124>)
 8000fd4:	f107 0420 	add.w	r4, r7, #32
 8000fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      osMutexPrioInherit,                       // attr_bits
      NULL,                                     // memory for control block
      0U                                        // size for control block
    };

    sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00f f8f0 	bl	80101c8 <osMutexNew>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <main+0x128>)
 8000fec:	601a      	str	r2, [r3, #0]

    /* Barometer Mutex */
     const osMutexAttr_t sb3_mutex_attr = {
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <main+0x12c>)
 8000ff0:	f107 0410 	add.w	r4, r7, #16
 8000ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       osMutexPrioInherit,    					 // attr_bits
       NULL,                                     // memory for control block
       0U                                        // size for control block
     };

     sb3_mutex = osMutexNew(&sb3_mutex_attr);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00f f8e2 	bl	80101c8 <osMutexNew>
 8001004:	4602      	mov	r2, r0
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <main+0x130>)
 8001008:	601a      	str	r2, [r3, #0]

#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <main+0x134>)
 800100c:	463c      	mov	r4, r7
 800100e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 8001014:	463b      	mov	r3, r7
 8001016:	4618      	mov	r0, r3
 8001018:	f00f f8d6 	bl	80101c8 <osMutexNew>
 800101c:	4602      	mov	r2, r0
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <main+0x138>)
 8001020:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8001022:	2200      	movs	r2, #0
 8001024:	2196      	movs	r1, #150	; 0x96
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	f00f fba8 	bl	801077c <osMessageQueueNew>
 800102c:	4602      	mov	r2, r0
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <main+0x13c>)
 8001030:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <main+0x140>)
 8001034:	2100      	movs	r1, #0
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <main+0x144>)
 8001038:	f00e ffb2 	bl	800ffa0 <osThreadNew>
 800103c:	4602      	mov	r2, r0
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <main+0x148>)
 8001040:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <main+0x14c>)
 8001044:	2100      	movs	r1, #0
 8001046:	4820      	ldr	r0, [pc, #128]	; (80010c8 <main+0x150>)
 8001048:	f00e ffaa 	bl	800ffa0 <osThreadNew>
 800104c:	4602      	mov	r2, r0
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <main+0x154>)
 8001050:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <main+0x158>)
 8001054:	2100      	movs	r1, #0
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <main+0x15c>)
 8001058:	f00e ffa2 	bl	800ffa0 <osThreadNew>
 800105c:	4602      	mov	r2, r0
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <main+0x160>)
 8001060:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <main+0x164>)
 8001064:	2100      	movs	r1, #0
 8001066:	481e      	ldr	r0, [pc, #120]	; (80010e0 <main+0x168>)
 8001068:	f00e ff9a 	bl	800ffa0 <osThreadNew>
 800106c:	4602      	mov	r2, r0
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <main+0x16c>)
 8001070:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8001072:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <main+0x170>)
 8001074:	2100      	movs	r1, #0
 8001076:	481d      	ldr	r0, [pc, #116]	; (80010ec <main+0x174>)
 8001078:	f00e ff92 	bl	800ffa0 <osThreadNew>
 800107c:	4602      	mov	r2, r0
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <main+0x178>)
 8001080:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001082:	f00e ff25 	bl	800fed0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001086:	e7fe      	b.n	8001086 <main+0x10e>
 8001088:	e0042000 	.word	0xe0042000
 800108c:	07e01bff 	.word	0x07e01bff
 8001090:	00070003 	.word	0x00070003
 8001094:	08016420 	.word	0x08016420
 8001098:	2000a9fc 	.word	0x2000a9fc
 800109c:	0801643c 	.word	0x0801643c
 80010a0:	20010ca4 	.word	0x20010ca4
 80010a4:	08016458 	.word	0x08016458
 80010a8:	2000aa00 	.word	0x2000aa00
 80010ac:	08016474 	.word	0x08016474
 80010b0:	2000ca60 	.word	0x2000ca60
 80010b4:	2000cb84 	.word	0x2000cb84
 80010b8:	080168a0 	.word	0x080168a0
 80010bc:	080014b1 	.word	0x080014b1
 80010c0:	200087d8 	.word	0x200087d8
 80010c4:	080168c4 	.word	0x080168c4
 80010c8:	080025f5 	.word	0x080025f5
 80010cc:	2000a9f8 	.word	0x2000a9f8
 80010d0:	080168e8 	.word	0x080168e8
 80010d4:	08001db1 	.word	0x08001db1
 80010d8:	20010ca0 	.word	0x20010ca0
 80010dc:	0801690c 	.word	0x0801690c
 80010e0:	08002455 	.word	0x08002455
 80010e4:	200088c8 	.word	0x200088c8
 80010e8:	08016930 	.word	0x08016930
 80010ec:	080020c1 	.word	0x080020c1
 80010f0:	20008840 	.word	0x20008840

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0b4      	sub	sp, #208	; 0xd0
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f013 fc2f 	bl	8014966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2284      	movs	r2, #132	; 0x84
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f013 fc20 	bl	8014966 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <SystemClock_Config+0x114>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a37      	ldr	r2, [pc, #220]	; (8001208 <SystemClock_Config+0x114>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <SystemClock_Config+0x114>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <SystemClock_Config+0x118>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001146:	4a31      	ldr	r2, [pc, #196]	; (800120c <SystemClock_Config+0x118>)
 8001148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b2f      	ldr	r3, [pc, #188]	; (800120c <SystemClock_Config+0x118>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800115a:	2301      	movs	r3, #1
 800115c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 800117c:	23a8      	movs	r3, #168	; 0xa8
 800117e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001188:	2307      	movs	r3, #7
 800118a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001192:	4618      	mov	r0, r3
 8001194:	f004 fbac 	bl	80058f0 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800119e:	f000 f9a1 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c8:	2105      	movs	r1, #5
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fe34 	bl	8005e38 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80011d6:	f000 f985 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80011da:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80011de:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 f837 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80011fc:	f000 f972 	bl	80014e4 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	37d0      	adds	r7, #208	; 0xd0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <MX_SDMMC1_SD_Init+0x3c>)
 8001218:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <MX_SDMMC1_SD_Init+0x38>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20008844 	.word	0x20008844
 800124c:	40012c00 	.word	0x40012c00

08001250 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <MX_SPI1_Init+0x6c>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI1_Init+0x68>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001268:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800126c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI1_Init+0x68>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SPI1_Init+0x68>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI1_Init+0x68>)
 8001294:	2207      	movs	r2, #7
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_SPI1_Init+0x68>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI1_Init+0x68>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_SPI1_Init+0x68>)
 80012a6:	f006 fe89 	bl	8007fbc <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80012b0:	f000 f918 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000cb20 	.word	0x2000cb20
 80012bc:	40013000 	.word	0x40013000

080012c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_SPI2_Init+0x68>)
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <MX_SPI2_Init+0x6c>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_SPI2_Init+0x68>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_SPI2_Init+0x68>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_SPI2_Init+0x68>)
 80012d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_SPI2_Init+0x68>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_SPI2_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI2_Init+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <MX_SPI2_Init+0x68>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI2_Init+0x68>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_SPI2_Init+0x68>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI2_Init+0x68>)
 8001304:	2207      	movs	r2, #7
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_SPI2_Init+0x68>)
 800130a:	2200      	movs	r2, #0
 800130c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI2_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_SPI2_Init+0x68>)
 8001316:	f006 fe51 	bl	8007fbc <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001320:	f000 f8e0 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200087dc 	.word	0x200087dc
 800132c:	40003800 	.word	0x40003800

08001330 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_SPI3_Init+0x68>)
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <MX_SPI3_Init+0x6c>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_SPI3_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_SPI3_Init+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_SPI3_Init+0x68>)
 8001348:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800134c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_SPI3_Init+0x68>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_SPI3_Init+0x68>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_SPI3_Init+0x68>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_SPI3_Init+0x68>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_SPI3_Init+0x68>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_SPI3_Init+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_SPI3_Init+0x68>)
 8001374:	2207      	movs	r2, #7
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <MX_SPI3_Init+0x68>)
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_SPI3_Init+0x68>)
 8001380:	2200      	movs	r2, #0
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_SPI3_Init+0x68>)
 8001386:	f006 fe19 	bl	8007fbc <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001390:	f000 f8a8 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000a8cc 	.word	0x2000a8cc
 800139c:	40003c00 	.word	0x40003c00

080013a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_DMA_Init+0x48>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <MX_DMA_Init+0x48>)
 80013ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MX_DMA_Init+0x48>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2105      	movs	r1, #5
 80013c2:	203b      	movs	r0, #59	; 0x3b
 80013c4:	f002 fb2a 	bl	8003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80013c8:	203b      	movs	r0, #59	; 0x3b
 80013ca:	f002 fb43 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	2045      	movs	r0, #69	; 0x45
 80013d4:	f002 fb22 	bl	8003a1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013d8:	2045      	movs	r0, #69	; 0x45
 80013da:	f002 fb3b 	bl	8003a54 <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_GPIO_Init+0xbc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a1c      	ldr	r2, [pc, #112]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_GPIO_Init+0xbc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_GPIO_Init+0xbc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2108      	movs	r1, #8
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_GPIO_Init+0xc0>)
 8001480:	f003 f844 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001484:	2308      	movs	r3, #8
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4619      	mov	r1, r3
 800149a:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_GPIO_Init+0xc0>)
 800149c:	f002 fe8c 	bl	80041b8 <HAL_GPIO_Init>

}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020800 	.word	0x40020800

080014b0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f00e fe17 	bl	80100ec <osDelay>
 80014be:	e7fb      	b.n	80014b8 <StartDefaultTask+0x8>

080014c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014d2:	f002 f9a9 	bl	8003828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010000 	.word	0x40010000

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_MspInit+0x4c>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	210f      	movs	r1, #15
 800152e:	f06f 0001 	mvn.w	r0, #1
 8001532:	f002 fa73 	bl	8003a1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6d      	ldr	r2, [pc, #436]	; (8001718 <HAL_SD_MspInit+0x1d4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	f040 80d4 	bne.w	8001710 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001568:	4b6c      	ldr	r3, [pc, #432]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	4a6b      	ldr	r2, [pc, #428]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800156e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001572:	6453      	str	r3, [r2, #68]	; 0x44
 8001574:	4b69      	ldr	r3, [pc, #420]	; (800171c <HAL_SD_MspInit+0x1d8>)
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	4b66      	ldr	r3, [pc, #408]	; (800171c <HAL_SD_MspInit+0x1d8>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a65      	ldr	r2, [pc, #404]	; (800171c <HAL_SD_MspInit+0x1d8>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b63      	ldr	r3, [pc, #396]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a5f      	ldr	r2, [pc, #380]	; (800171c <HAL_SD_MspInit+0x1d8>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_SD_MspInit+0x1d8>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80015b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015c2:	230c      	movs	r3, #12
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4854      	ldr	r0, [pc, #336]	; (8001720 <HAL_SD_MspInit+0x1dc>)
 80015ce:	f002 fdf3 	bl	80041b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015e4:	230c      	movs	r3, #12
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	484c      	ldr	r0, [pc, #304]	; (8001720 <HAL_SD_MspInit+0x1dc>)
 80015f0:	f002 fde2 	bl	80041b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f4:	2304      	movs	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001604:	230c      	movs	r3, #12
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4845      	ldr	r0, [pc, #276]	; (8001724 <HAL_SD_MspInit+0x1e0>)
 8001610:	f002 fdd2 	bl	80041b8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001616:	4a45      	ldr	r2, [pc, #276]	; (800172c <HAL_SD_MspInit+0x1e8>)
 8001618:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800161c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001620:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800163c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001640:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001644:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001648:	2220      	movs	r2, #32
 800164a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001654:	2204      	movs	r2, #4
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 800165a:	2203      	movs	r2, #3
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001660:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001668:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800166e:	482e      	ldr	r0, [pc, #184]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001670:	f002 f9fe 	bl	8003a70 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 800167a:	f7ff ff33 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_SD_MspInit+0x1e4>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <HAL_SD_MspInit+0x1f0>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 8001692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001696:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 800169a:	2240      	movs	r2, #64	; 0x40
 800169c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016be:	2220      	movs	r2, #32
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016d0:	2203      	movs	r2, #3
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016e6:	f002 f9c3 	bl	8003a70 <HAL_DMA_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 80016f0:	f7ff fef8 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016fa:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_SD_MspInit+0x1ec>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2105      	movs	r1, #5
 8001704:	2031      	movs	r0, #49	; 0x31
 8001706:	f002 f989 	bl	8003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800170a:	2031      	movs	r0, #49	; 0x31
 800170c:	f002 f9a2 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40023800 	.word	0x40023800
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	2000cac0 	.word	0x2000cac0
 800172c:	40026458 	.word	0x40026458
 8001730:	20010c40 	.word	0x20010c40
 8001734:	400264a0 	.word	0x400264a0

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a68      	ldr	r2, [pc, #416]	; (80018f8 <HAL_SPI_MspInit+0x1c0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d131      	bne.n	80017be <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a67      	ldr	r2, [pc, #412]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176e:	623b      	str	r3, [r7, #32]
 8001770:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b62      	ldr	r3, [pc, #392]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a61      	ldr	r2, [pc, #388]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800178a:	f248 03e0 	movw	r3, #32992	; 0x80e0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179c:	2305      	movs	r3, #5
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4856      	ldr	r0, [pc, #344]	; (8001900 <HAL_SPI_MspInit+0x1c8>)
 80017a8:	f002 fd06 	bl	80041b8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2105      	movs	r1, #5
 80017b0:	2023      	movs	r0, #35	; 0x23
 80017b2:	f002 f933 	bl	8003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017b6:	2023      	movs	r0, #35	; 0x23
 80017b8:	f002 f94c 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017bc:	e097      	b.n	80018ee <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_SPI_MspInit+0x1cc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d131      	bne.n	800182c <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017c8:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180a:	2305      	movs	r3, #5
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	483c      	ldr	r0, [pc, #240]	; (8001908 <HAL_SPI_MspInit+0x1d0>)
 8001816:	f002 fccf 	bl	80041b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	2024      	movs	r0, #36	; 0x24
 8001820:	f002 f8fc 	bl	8003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001824:	2024      	movs	r0, #36	; 0x24
 8001826:	f002 f915 	bl	8003a54 <HAL_NVIC_EnableIRQ>
}
 800182a:	e060      	b.n	80018ee <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_SPI_MspInit+0x1d4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d15b      	bne.n	80018ee <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a24      	ldr	r2, [pc, #144]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_SPI_MspInit+0x1c4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800187e:	2310      	movs	r3, #16
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188e:	2306      	movs	r3, #6
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	4819      	ldr	r0, [pc, #100]	; (8001900 <HAL_SPI_MspInit+0x1c8>)
 800189a:	f002 fc8d 	bl	80041b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800189e:	2304      	movs	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80018ae:	2307      	movs	r3, #7
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4813      	ldr	r0, [pc, #76]	; (8001908 <HAL_SPI_MspInit+0x1d0>)
 80018ba:	f002 fc7d 	bl	80041b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018be:	2318      	movs	r3, #24
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ce:	2306      	movs	r3, #6
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	4619      	mov	r1, r3
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <HAL_SPI_MspInit+0x1d0>)
 80018da:	f002 fc6d 	bl	80041b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2105      	movs	r1, #5
 80018e2:	2033      	movs	r0, #51	; 0x33
 80018e4:	f002 f89a 	bl	8003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80018e8:	2033      	movs	r0, #51	; 0x33
 80018ea:	f002 f8b3 	bl	8003a54 <HAL_NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3738      	adds	r7, #56	; 0x38
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40003800 	.word	0x40003800
 8001908:	40020400 	.word	0x40020400
 800190c:	40003c00 	.word	0x40003c00

08001910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	2019      	movs	r0, #25
 8001926:	f002 f879 	bl	8003a1c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800192a:	2019      	movs	r0, #25
 800192c:	f002 f892 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_InitTick+0xa0>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_InitTick+0xa0>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6453      	str	r3, [r2, #68]	; 0x44
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_InitTick+0xa0>)
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001948:	f107 0210 	add.w	r2, r7, #16
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f004 fc54 	bl	8006200 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001958:	f004 fc3e 	bl	80061d8 <HAL_RCC_GetPCLK2Freq>
 800195c:	4603      	mov	r3, r0
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_InitTick+0xa4>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3b01      	subs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_InitTick+0xa8>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_InitTick+0xac>)
 8001974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_InitTick+0xa8>)
 8001978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_InitTick+0xa8>)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_InitTick+0xa8>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_InitTick+0xa8>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HAL_InitTick+0xa8>)
 8001992:	f007 f966 	bl	8008c62 <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d104      	bne.n	80019a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800199c:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_InitTick+0xa8>)
 800199e:	f007 f995 	bl	8008ccc <HAL_TIM_Base_Start_IT>
 80019a2:	4603      	mov	r3, r0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	20010ca8 	.word	0x20010ca8
 80019bc:	40010000 	.word	0x40010000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019fa:	f007 f991 	bl	8008d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20010ca8 	.word	0x20010ca8

08001a08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <SPI1_IRQHandler+0x10>)
 8001a0e:	f006 fcbf 	bl	8008390 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000cb20 	.word	0x2000cb20

08001a1c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <SPI2_IRQHandler+0x10>)
 8001a22:	f006 fcb5 	bl	8008390 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200087dc 	.word	0x200087dc

08001a30 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <SDMMC1_IRQHandler+0x10>)
 8001a36:	f005 fa3d 	bl	8006eb4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20008844 	.word	0x20008844

08001a44 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <SPI3_IRQHandler+0x10>)
 8001a4a:	f006 fca1 	bl	8008390 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000a8cc 	.word	0x2000a8cc

08001a58 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA2_Stream3_IRQHandler+0x10>)
 8001a5e:	f002 f937 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000cac0 	.word	0x2000cac0

08001a6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <OTG_FS_IRQHandler+0x10>)
 8001a72:	f002 fec4 	bl	80047fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20012ad0 	.word	0x20012ad0

08001a80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA2_Stream6_IRQHandler+0x10>)
 8001a86:	f002 f923 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20010c40 	.word	0x20010c40

08001a94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x50>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x16>
		heap_end = &end;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <_sbrk+0x50>)
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <_sbrk+0x54>)
 8001aa8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <_sbrk+0x50>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <_sbrk+0x50>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	466a      	mov	r2, sp
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d907      	bls.n	8001ace <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001abe:	f012 ff0d 	bl	80148dc <__errno>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	e006      	b.n	8001adc <_sbrk+0x48>
	}

	heap_end += incr;
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <_sbrk+0x50>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <_sbrk+0x50>)
 8001ad8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000288 	.word	0x20000288
 8001ae8:	20012ed8 	.word	0x20012ed8

08001aec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <SystemInit+0x5c>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <SystemInit+0x5c>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <SystemInit+0x60>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <SystemInit+0x60>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <SystemInit+0x60>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <SystemInit+0x60>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	490d      	ldr	r1, [pc, #52]	; (8001b4c <SystemInit+0x60>)
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <SystemInit+0x64>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <SystemInit+0x60>)
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <SystemInit+0x68>)
 8001b22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <SystemInit+0x60>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <SystemInit+0x60>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x60>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <SystemInit+0x5c>)
 8001b38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3c:	609a      	str	r2, [r3, #8]
#endif
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	fef6ffff 	.word	0xfef6ffff
 8001b54:	24003010 	.word	0x24003010

08001b58 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	b0b3      	sub	sp, #204	; 0xcc
 8001b5c:	af06      	add	r7, sp, #24
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	72fb      	strb	r3, [r7, #11]
 8001b66:	4613      	mov	r3, r2
 8001b68:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	2296      	movs	r2, #150	; 0x96
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f012 fef7 	bl	8014966 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8001b78:	7afb      	ldrb	r3, [r7, #11]
 8001b7a:	7aba      	ldrb	r2, [r7, #10]
 8001b7c:	f107 0010 	add.w	r0, r7, #16
 8001b80:	9202      	str	r2, [sp, #8]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2301      	movs	r3, #1
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a41      	ldr	r2, [pc, #260]	; (8001c90 <logSensor+0x138>)
 8001b8c:	2196      	movs	r1, #150	; 0x96
 8001b8e:	f012 ffab 	bl	8014ae8 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8001b92:	7abb      	ldrb	r3, [r7, #10]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d002      	beq.n	8001b9e <logSensor+0x46>
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d01d      	beq.n	8001bd8 <logSensor+0x80>
 8001b9c:	e055      	b.n	8001c4a <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fb31 	bl	8000210 <strlen>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	1898      	adds	r0, r3, r2
 8001bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001bc6:	6892      	ldr	r2, [r2, #8]
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <logSensor+0x13c>)
 8001bd0:	2196      	movs	r1, #150	; 0x96
 8001bd2:	f012 ff89 	bl	8014ae8 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8001bd6:	e04e      	b.n	8001c76 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fb14 	bl	8000210 <strlen>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8001bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001bf8:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8001bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c02:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8001c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c0c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8001c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c16:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8001c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c20:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8001c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c2a:	461e      	mov	r6, r3
 8001c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	9305      	str	r3, [sp, #20]
 8001c34:	9604      	str	r6, [sp, #16]
 8001c36:	9503      	str	r5, [sp, #12]
 8001c38:	9402      	str	r4, [sp, #8]
 8001c3a:	9101      	str	r1, [sp, #4]
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	4663      	mov	r3, ip
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <logSensor+0x140>)
 8001c42:	2196      	movs	r1, #150	; 0x96
 8001c44:	f012 ff50 	bl	8014ae8 <sniprintf>
	}
		break;
 8001c48:	e015      	b.n	8001c76 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8001c4a:	f107 0310 	add.w	r3, r7, #16
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fade 	bl	8000210 <strlen>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <logSensor+0x144>)
 8001c5e:	461d      	mov	r5, r3
 8001c60:	4614      	mov	r4, r2
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	6028      	str	r0, [r5, #0]
 8001c66:	6069      	str	r1, [r5, #4]
 8001c68:	60aa      	str	r2, [r5, #8]
 8001c6a:	60eb      	str	r3, [r5, #12]
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	6128      	str	r0, [r5, #16]
 8001c70:	7923      	ldrb	r3, [r4, #4]
 8001c72:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8001c74:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <logSensor+0x148>)
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	f107 0110 	add.w	r1, r7, #16
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2200      	movs	r2, #0
 8001c82:	f00e fe01 	bl	8010888 <osMessageQueuePut>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	37b4      	adds	r7, #180	; 0xb4
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c90:	08016484 	.word	0x08016484
 8001c94:	08016494 	.word	0x08016494
 8001c98:	080164a4 	.word	0x080164a4
 8001c9c:	080164c4 	.word	0x080164c4
 8001ca0:	2000cb84 	.word	0x2000cb84

08001ca4 <logEstimatorVar>:
			rocket_state);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, int32_t estimator_var_data) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0aa      	sub	sp, #168	; 0xa8
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	log_entry_t log_entry = { 0 };
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	2296      	movs	r2, #150	; 0x96
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f012 fe55 	bl	8014966 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld\n", ts, ESTIMATOR_VAR,
 8001cbc:	f107 0008 	add.w	r0, r7, #8
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <logEstimatorVar+0x48>)
 8001ccc:	2196      	movs	r1, #150	; 0x96
 8001cce:	f012 ff0b 	bl	8014ae8 <sniprintf>
			estimator_var_data);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <logEstimatorVar+0x4c>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f107 0108 	add.w	r1, r7, #8
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f00e fdd3 	bl	8010888 <osMessageQueuePut>
 8001ce2:	4603      	mov	r3, r0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	37a0      	adds	r7, #160	; 0xa0
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	080164e8 	.word	0x080164e8
 8001cf0:	2000cb84 	.word	0x2000cb84

08001cf4 <logMsg>:

osStatus_t logMsg(timestamp_t ts, char *msg) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0aa      	sub	sp, #168	; 0xa8
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	log_entry_t log_entry = { 0 };
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	2296      	movs	r2, #150	; 0x96
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f012 fe2d 	bl	8014966 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%s\n", ts, MSG, msg);
 8001d0c:	f107 0008 	add.w	r0, r7, #8
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2304      	movs	r3, #4
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <logMsg+0x48>)
 8001d1c:	2196      	movs	r1, #150	; 0x96
 8001d1e:	f012 fee3 	bl	8014ae8 <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <logMsg+0x4c>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	f107 0108 	add.w	r1, r7, #8
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f00e fdab 	bl	8010888 <osMessageQueuePut>
 8001d32:	4603      	mov	r3, r0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	37a0      	adds	r7, #160	; 0xa0
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	080164f4 	.word	0x080164f4
 8001d40:	2000cb84 	.word	0x2000cb84

08001d44 <UsbPrint>:

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8001d44:	b40f      	push	{r0, r1, r2, r3}
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <UsbPrint+0x60>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f00e fad0 	bl	80102fc <osMutexAcquire>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	21c8      	movs	r1, #200	; 0xc8
 8001d6e:	480e      	ldr	r0, [pc, #56]	; (8001da8 <UsbPrint+0x64>)
 8001d70:	f012 ff1a 	bl	8014ba8 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <UsbPrint+0x64>)
 8001d76:	f7fe fa4b 	bl	8000210 <strlen>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <UsbPrint+0x64>)
 8001d82:	f012 f901 	bl	8013f88 <CDC_Transmit_FS>
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <UsbPrint+0x60>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00e fb12 	bl	80103b8 <osMutexRelease>
	}
#endif
	return ret;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001da0:	b004      	add	sp, #16
 8001da2:	4770      	bx	lr
 8001da4:	2000ca60 	.word	0x2000ca60
 8001da8:	2000a930 	.word	0x2000a930
 8001dac:	00000000 	.word	0x00000000

08001db0 <vTaskController>:


void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]);


void vTaskController(void *argument) {
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Polynomial Coefficients for Gains and Reference Traj */
	float coeff[4][POLY_DEG] = { 0 };
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f012 fdcc 	bl	8014966 <memset>

	/* State Estimation Values */
	float sf_velocity = 0;
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	float sf_height = 0;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	/* Gain Values and Trajectory Values to increase speed */
	float gains[3] = { 0 };
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	461a      	mov	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	6053      	str	r3, [r2, #4]
 8001dea:	6093      	str	r3, [r2, #8]
	float ref_vel = 0;
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
	float vel_error = 0;
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	float control_input = 0;
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	float integrated_error = 0;
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	float previous_control_input = 0;
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t delta_t = 1 / CONTROLLER_SAMPLING_FREQ; 	/* That is probably very optimistic! */
 8001e16:	2301      	movs	r3, #1
 8001e18:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001e1c:	f00e f88e 	bl	800ff3c <osKernelGetTickCount>
 8001e20:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8001e24:	f00e f8b2 	bl	800ff8c <osKernelGetTickFreq>
 8001e28:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8001e2c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001e30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e34:	4413      	add	r3, r2
 8001e36:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		/* Update Sensor Fusion Variables */
		/* TODO once Mutex Managment has been set up */

		/* caluclate Gains and Reference velocity for given height */
		CalcPolynomial(sf_height, &ref_vel, gains, coeff);
 8001e3a:	f107 021c 	add.w	r2, r7, #28
 8001e3e:	f107 0110 	add.w	r1, r7, #16
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	4618      	mov	r0, r3
 8001e48:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 8001e4c:	f000 f8a8 	bl	8001fa0 <CalcPolynomial>

		/* Calculate Velocity Error */
		vel_error = sf_velocity - ref_vel;
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ed97 7a84 	vldr	s14, [r7, #528]	; 0x210
 8001e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e60:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208

		/* Calculate Control Input */
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	eeb1 7a67 	vneg.f32	s14, s15
 8001e70:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e80:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	ee37 7a67 	vsub.f32	s14, s14, s15
				- gains[2] * (previous_control_input - OPT_TRAJ_CONTROL_INPUT)
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e94:	edd7 7a85 	vldr	s15, [r7, #532]	; 0x214
 8001e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
		control_input = - gains[0] * vel_error - gains[1] * integrated_error
 8001ea0:	ed97 7a85 	vldr	s14, [r7, #532]	; 0x214
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
				+ previous_control_input;

		control_input = fmax(0, fmin(control_input, 1));
 8001eac:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8001eb0:	f7fe fb6a 	bl	8000588 <__aeabi_f2d>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001f78 <vTaskController+0x1c8>
 8001ebc:	ec44 3b10 	vmov	d0, r3, r4
 8001ec0:	f013 f9ca 	bl	8015258 <fmin>
 8001ec4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec8:	eef0 7a60 	vmov.f32	s15, s1
 8001ecc:	eeb0 1a47 	vmov.f32	s2, s14
 8001ed0:	eef0 1a67 	vmov.f32	s3, s15
 8001ed4:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001f80 <vTaskController+0x1d0>
 8001ed8:	f013 f997 	bl	801520a <fmax>
 8001edc:	ec54 3b10 	vmov	r3, r4, d0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f7fe fe78 	bl	8000bd8 <__aeabi_d2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

		/* Send Control Output to motor control Task */
		/* TODO */

		/* Update Integrated Error */
		integrated_error = fmax(-10, fmin(integrated_error + delta_t*vel_error, 10));
 8001eee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001efa:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8001efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f02:	edd7 7a86 	vldr	s15, [r7, #536]	; 0x218
 8001f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0a:	ee17 0a90 	vmov	r0, s15
 8001f0e:	f7fe fb3b 	bl	8000588 <__aeabi_f2d>
 8001f12:	4603      	mov	r3, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001f88 <vTaskController+0x1d8>
 8001f1a:	ec44 3b10 	vmov	d0, r3, r4
 8001f1e:	f013 f99b 	bl	8015258 <fmin>
 8001f22:	eeb0 7a40 	vmov.f32	s14, s0
 8001f26:	eef0 7a60 	vmov.f32	s15, s1
 8001f2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001f2e:	eef0 1a67 	vmov.f32	s3, s15
 8001f32:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001f90 <vTaskController+0x1e0>
 8001f36:	f013 f968 	bl	801520a <fmax>
 8001f3a:	ec54 3b10 	vmov	r3, r4, d0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4621      	mov	r1, r4
 8001f42:	f7fe fe49 	bl	8000bd8 <__aeabi_d2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		/* Update Previous Control Input */
		previous_control_input = control_input;
 8001f4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f50:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

		//char* msg = (char*) malloc(30 * sizeof(char));
		//sprintf(msg, "Controlling sth...");
		logMsg(tick_count, "Controlling something...");
 8001f54:	4910      	ldr	r1, [pc, #64]	; (8001f98 <vTaskController+0x1e8>)
 8001f56:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f5a:	f7ff fecb 	bl	8001cf4 <logMsg>
		logEstimatorVar(tick_count, 20202020);
 8001f5e:	490f      	ldr	r1, [pc, #60]	; (8001f9c <vTaskController+0x1ec>)
 8001f60:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f64:	f7ff fe9e 	bl	8001ca4 <logEstimatorVar>
		/* Sleep */
		osDelayUntil(tick_count);
 8001f68:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f6c:	f00e f8ec 	bl	8010148 <osDelayUntil>
		tick_count += tick_update;
 8001f70:	e75c      	b.n	8001e2c <vTaskController+0x7c>
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	3ff00000 	.word	0x3ff00000
	...
 8001f8c:	40240000 	.word	0x40240000
 8001f90:	00000000 	.word	0x00000000
 8001f94:	c0240000 	.word	0xc0240000
 8001f98:	08016500 	.word	0x08016500
 8001f9c:	01344224 	.word	0x01344224

08001fa0 <CalcPolynomial>:
	}
}


/* Does the Polynomial Calculation of the reference velocity */
void CalcPolynomial(float ref_height, float *ref_vel, float gains[], float coefficients[][POLY_DEG]){
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001faa:	60b8      	str	r0, [r7, #8]
 8001fac:	6079      	str	r1, [r7, #4]
 8001fae:	603a      	str	r2, [r7, #0]
	/* For Speed */
	uint32_t x_placeholder = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]

	/* For loop */
	for(int i = 0; i < POLY_DEG; ++i){
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e07b      	b.n	80020b2 <CalcPolynomial+0x112>
		x_placeholder = pow(ref_height, (POLY_DEG - 1 - i));
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fae4 	bl	8000588 <__aeabi_f2d>
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f1c3 031d 	rsb	r3, r3, #29
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe faca 	bl	8000564 <__aeabi_i2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	ec43 2b11 	vmov	d1, r2, r3
 8001fd8:	ec45 4b10 	vmov	d0, r4, r5
 8001fdc:	f013 f990 	bl	8015300 <pow>
 8001fe0:	ec54 3b10 	vmov	r3, r4, d0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	f7fe fdd6 	bl	8000b98 <__aeabi_d2uiz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	613b      	str	r3, [r7, #16]
		gains[0] += coefficients[0][i] * x_placeholder;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	edd3 6a00 	vldr	s13, [r3]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	edc3 7a00 	vstr	s15, [r3]
		gains[1] += coefficients[1][i] * x_placeholder;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	ed93 7a00 	vldr	s14, [r3]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	edd3 6a00 	vldr	s13, [r3]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002048:	edc3 7a00 	vstr	s15, [r3]
		gains[2] += coefficients[2][i] * x_placeholder;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3308      	adds	r3, #8
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	edd3 6a00 	vldr	s13, [r3]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3308      	adds	r3, #8
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	edc3 7a00 	vstr	s15, [r3]
		*ref_vel += coefficients[3][i] * x_placeholder;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	ed93 7a00 	vldr	s14, [r3]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	edd3 6a00 	vldr	s13, [r3]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < POLY_DEG; ++i){
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b1d      	cmp	r3, #29
 80020b6:	dd80      	ble.n	8001fba <CalcPolynomial+0x1a>
	}

}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdb0      	pop	{r4, r5, r7, pc}

080020c0 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b0cc      	sub	sp, #304	; 0x130
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80020d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 80020dc:	48c3      	ldr	r0, [pc, #780]	; (80023ec <vTaskSdCard+0x32c>)
 80020de:	f7ff fe31 	bl	8001d44 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 80020e2:	48c3      	ldr	r0, [pc, #780]	; (80023f0 <vTaskSdCard+0x330>)
 80020e4:	f7ff fe2e 	bl	8001d44 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 80020e8:	2201      	movs	r2, #1
 80020ea:	49c2      	ldr	r1, [pc, #776]	; (80023f4 <vTaskSdCard+0x334>)
 80020ec:	48c2      	ldr	r0, [pc, #776]	; (80023f8 <vTaskSdCard+0x338>)
 80020ee:	f00c fe19 	bl	800ed24 <f_mount>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80020f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00b      	beq.n	8002118 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8002100:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002104:	4619      	mov	r1, r3
 8002106:	48bd      	ldr	r0, [pc, #756]	; (80023fc <vTaskSdCard+0x33c>)
 8002108:	f7ff fe1c 	bl	8001d44 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 800210c:	4bbc      	ldr	r3, [pc, #752]	; (8002400 <vTaskSdCard+0x340>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8002112:	2064      	movs	r0, #100	; 0x64
 8002114:	f00d ffea 	bl	80100ec <osDelay>
		}
	} while (res != FR_OK);
 8002118:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e3      	bne.n	80020e8 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8002120:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 80a9 	bne.w	800227c <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 800212a:	48b6      	ldr	r0, [pc, #728]	; (8002404 <vTaskSdCard+0x344>)
 800212c:	f7ff fe0a 	bl	8001d44 <UsbPrint>

		unsigned int file_number = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8002136:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800213a:	f107 0008 	add.w	r0, r7, #8
 800213e:	4bb2      	ldr	r3, [pc, #712]	; (8002408 <vTaskSdCard+0x348>)
 8002140:	4aac      	ldr	r2, [pc, #688]	; (80023f4 <vTaskSdCard+0x334>)
 8002142:	f00d fda7 	bl	800fc94 <f_findfirst>
 8002146:	4603      	mov	r3, r0
 8002148:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 800214c:	e02b      	b.n	80021a6 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800214e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002152:	3b30      	subs	r3, #48	; 0x30
 8002154:	2264      	movs	r2, #100	; 0x64
 8002156:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 800215a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800215e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	18ca      	adds	r2, r1, r3
 800216c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002170:	3b30      	subs	r3, #48	; 0x30
 8002172:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8002174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			if (current_file_number + 1 > file_number) {
 8002178:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800217c:	3301      	adds	r3, #1
 800217e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002182:	429a      	cmp	r2, r3
 8002184:	d204      	bcs.n	8002190 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8002186:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800218a:	3301      	adds	r3, #1
 800218c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8002190:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f00d fd52 	bl	800fc44 <f_findnext>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80021a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <vTaskSdCard+0xf6>
 80021ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1cb      	bne.n	800214e <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 80021b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 80021be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80021c2:	4619      	mov	r1, r3
 80021c4:	4891      	ldr	r0, [pc, #580]	; (800240c <vTaskSdCard+0x34c>)
 80021c6:	f7ff fdbd 	bl	8001d44 <UsbPrint>
					res);
			goto resetSDCard;
 80021ca:	e78a      	b.n	80020e2 <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 80021cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021d0:	4a8f      	ldr	r2, [pc, #572]	; (8002410 <vTaskSdCard+0x350>)
 80021d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80021d8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80021dc:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <vTaskSdCard+0x354>)
 80021de:	fba3 2301 	umull	r2, r3, r3, r1
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	1aca      	subs	r2, r1, r3
 80021ee:	b2d3      	uxtb	r3, r2
 80021f0:	3330      	adds	r3, #48	; 0x30
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80021f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021fc:	4a85      	ldr	r2, [pc, #532]	; (8002414 <vTaskSdCard+0x354>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	08d9      	lsrs	r1, r3, #3
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <vTaskSdCard+0x354>)
 8002206:	fba3 2301 	umull	r2, r3, r3, r1
 800220a:	08da      	lsrs	r2, r3, #3
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	1aca      	subs	r2, r1, r3
 8002216:	b2d3      	uxtb	r3, r2
 8002218:	3330      	adds	r3, #48	; 0x30
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8002220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002224:	4a7c      	ldr	r2, [pc, #496]	; (8002418 <vTaskSdCard+0x358>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0959      	lsrs	r1, r3, #5
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <vTaskSdCard+0x354>)
 800222e:	fba3 2301 	umull	r2, r3, r3, r1
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	1aca      	subs	r2, r1, r3
 800223e:	b2d3      	uxtb	r3, r2
 8002240:	3330      	adds	r3, #48	; 0x30
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8002248:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800224c:	4619      	mov	r1, r3
 800224e:	4873      	ldr	r0, [pc, #460]	; (800241c <vTaskSdCard+0x35c>)
 8002250:	f7ff fd78 	bl	8001d44 <UsbPrint>

		res = f_closedir(&dj);
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	4618      	mov	r0, r3
 800225a:	f00d fc85 	bl	800fb68 <f_closedir>
 800225e:	4603      	mov	r3, r0
 8002260:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8002264:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 800226c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002270:	4619      	mov	r1, r3
 8002272:	486b      	ldr	r0, [pc, #428]	; (8002420 <vTaskSdCard+0x360>)
 8002274:	f7ff fd66 	bl	8001d44 <UsbPrint>
			goto resetSDCard;
 8002278:	bf00      	nop
 800227a:	e732      	b.n	80020e2 <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 800227c:	4869      	ldr	r0, [pc, #420]	; (8002424 <vTaskSdCard+0x364>)
 800227e:	f7ff fd61 	bl	8001d44 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8002282:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002286:	2212      	movs	r2, #18
 8002288:	4619      	mov	r1, r3
 800228a:	4867      	ldr	r0, [pc, #412]	; (8002428 <vTaskSdCard+0x368>)
 800228c:	f00c fdae 	bl	800edec <f_open>
 8002290:	4603      	mov	r3, r0
 8002292:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8002296:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 800229e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022a2:	4619      	mov	r1, r3
 80022a4:	4861      	ldr	r0, [pc, #388]	; (800242c <vTaskSdCard+0x36c>)
 80022a6:	f7ff fd4d 	bl	8001d44 <UsbPrint>
		goto resetSDCard;
 80022aa:	e71a      	b.n	80020e2 <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 80022ac:	4860      	ldr	r0, [pc, #384]	; (8002430 <vTaskSdCard+0x370>)
 80022ae:	f7ff fd49 	bl	8001d44 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <vTaskSdCard+0x368>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4619      	mov	r1, r3
 80022b8:	485b      	ldr	r0, [pc, #364]	; (8002428 <vTaskSdCard+0x368>)
 80022ba:	f00d f989 	bl	800f5d0 <f_lseek>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 80022c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 80022cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80022d0:	4619      	mov	r1, r3
 80022d2:	4858      	ldr	r0, [pc, #352]	; (8002434 <vTaskSdCard+0x374>)
 80022d4:	f7ff fd36 	bl	8001d44 <UsbPrint>
		goto resetSDCard;
 80022d8:	e703      	b.n	80020e2 <vTaskSdCard+0x22>
	}

	int msgCounter = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 80022e0:	4b55      	ldr	r3, [pc, #340]	; (8002438 <vTaskSdCard+0x378>)
 80022e2:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80022e6:	461d      	mov	r5, r3
 80022e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022f0:	c407      	stmia	r4!, {r0, r1, r2}
 80022f2:	8023      	strh	r3, [r4, #0]
 80022f4:	3402      	adds	r4, #2
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	7023      	strb	r3, [r4, #0]
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8002306:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800230a:	4618      	mov	r0, r3
 800230c:	f7fd ff80 	bl	8000210 <strlen>
 8002310:	4602      	mov	r2, r0
 8002312:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002316:	4b49      	ldr	r3, [pc, #292]	; (800243c <vTaskSdCard+0x37c>)
 8002318:	4843      	ldr	r0, [pc, #268]	; (8002428 <vTaskSdCard+0x368>)
 800231a:	f00c ff2c 	bl	800f176 <f_write>
 800231e:	4603      	mov	r3, r0
 8002320:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8002324:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 800232c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002330:	4619      	mov	r1, r3
 8002332:	4843      	ldr	r0, [pc, #268]	; (8002440 <vTaskSdCard+0x380>)
 8002334:	f7ff fd06 	bl	8001d44 <UsbPrint>
		goto resetSDCard;
 8002338:	e6d3      	b.n	80020e2 <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 800233a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800233e:	2296      	movs	r2, #150	; 0x96
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f012 fb0f 	bl	8014966 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8002348:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <vTaskSdCard+0x384>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
 8002354:	2200      	movs	r2, #0
 8002356:	f00e fb0b 	bl	8010970 <osMessageQueueGet>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f3      	bne.n	8002348 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8002360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002364:	4618      	mov	r0, r3
 8002366:	f7fd ff53 	bl	8000210 <strlen>
 800236a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			if (num_bytes > 0) {
 800236e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8002376:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <vTaskSdCard+0x37c>)
 800237c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002380:	4829      	ldr	r0, [pc, #164]	; (8002428 <vTaskSdCard+0x368>)
 8002382:	f00c fef8 	bl	800f176 <f_write>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 800238c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8002394:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002398:	4619      	mov	r1, r3
 800239a:	4829      	ldr	r0, [pc, #164]	; (8002440 <vTaskSdCard+0x380>)
 800239c:	f7ff fcd2 	bl	8001d44 <UsbPrint>
							res);
					goto resetSDCard;
 80023a0:	e69f      	b.n	80020e2 <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 80023a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023a6:	3301      	adds	r3, #1
 80023a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

			if (msgCounter >= SYNC_AFTER_COUNT) {
 80023ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023b0:	2b7f      	cmp	r3, #127	; 0x7f
 80023b2:	ddc9      	ble.n	8002348 <vTaskSdCard+0x288>
				msgCounter = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 80023ba:	4823      	ldr	r0, [pc, #140]	; (8002448 <vTaskSdCard+0x388>)
 80023bc:	f7ff fcc2 	bl	8001d44 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80023c0:	2108      	movs	r1, #8
 80023c2:	4822      	ldr	r0, [pc, #136]	; (800244c <vTaskSdCard+0x38c>)
 80023c4:	f002 f8bb 	bl	800453e <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 80023c8:	4817      	ldr	r0, [pc, #92]	; (8002428 <vTaskSdCard+0x368>)
 80023ca:	f00d f878 	bl	800f4be <f_sync>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 80023d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0b5      	beq.n	8002348 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 80023dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80023e0:	4619      	mov	r1, r3
 80023e2:	481b      	ldr	r0, [pc, #108]	; (8002450 <vTaskSdCard+0x390>)
 80023e4:	f7ff fcae 	bl	8001d44 <UsbPrint>
					goto resetSDCard;
 80023e8:	e67b      	b.n	80020e2 <vTaskSdCard+0x22>
 80023ea:	bf00      	nop
 80023ec:	0801651c 	.word	0x0801651c
 80023f0:	08016544 	.word	0x08016544
 80023f4:	08016568 	.word	0x08016568
 80023f8:	20010f18 	.word	0x20010f18
 80023fc:	0801656c 	.word	0x0801656c
 8002400:	200002bc 	.word	0x200002bc
 8002404:	08016598 	.word	0x08016598
 8002408:	080165bc 	.word	0x080165bc
 800240c:	080165c8 	.word	0x080165c8
 8002410:	08016600 	.word	0x08016600
 8002414:	cccccccd 	.word	0xcccccccd
 8002418:	51eb851f 	.word	0x51eb851f
 800241c:	0801660c 	.word	0x0801660c
 8002420:	08016630 	.word	0x08016630
 8002424:	08016660 	.word	0x08016660
 8002428:	20010ce8 	.word	0x20010ce8
 800242c:	08016684 	.word	0x08016684
 8002430:	080166b0 	.word	0x080166b0
 8002434:	080166d8 	.word	0x080166d8
 8002438:	0801677c 	.word	0x0801677c
 800243c:	2001114c 	.word	0x2001114c
 8002440:	08016708 	.word	0x08016708
 8002444:	2000cb84 	.word	0x2000cb84
 8002448:	08016734 	.word	0x08016734
 800244c:	40020800 	.word	0x40020800
 8002450:	08016754 	.word	0x08016754

08002454 <vTaskSensRead>:
 *      Author: Jonas
 */

#include "tasks/task_sens_read.h"

void vTaskSensRead(void *argument) {
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af04      	add	r7, sp, #16
 800245a:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800245c:	f00d fd6e 	bl	800ff3c <osKernelGetTickCount>
 8002460:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8002462:	f00d fd93 	bl	800ff8c <osKernelGetTickFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <vTaskSensRead+0x144>)
 800246a:	fba3 2302 	umull	r2, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	60bb      	str	r3, [r7, #8]
	//HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));

	for (;;) {
		tick_count += tick_update;
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]


		if (HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data)) == HAL_OK){
 800247a:	221c      	movs	r2, #28
 800247c:	4947      	ldr	r1, [pc, #284]	; (800259c <vTaskSensRead+0x148>)
 800247e:	4848      	ldr	r0, [pc, #288]	; (80025a0 <vTaskSensRead+0x14c>)
 8002480:	f005 fe2e 	bl	80080e0 <HAL_SPI_Receive_IT>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		}

		if(osMutexAcquire(sb3_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <vTaskSensRead+0x150>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	211e      	movs	r1, #30
 800248a:	4618      	mov	r0, r3
 800248c:	f00d ff36 	bl	80102fc <osMutexAcquire>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d110      	bne.n	80024b8 <vTaskSensRead+0x64>
			sb3_baro = sb3_data.baro;
 8002496:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <vTaskSensRead+0x154>)
 8002498:	4a40      	ldr	r2, [pc, #256]	; (800259c <vTaskSensRead+0x148>)
 800249a:	ca07      	ldmia	r2, {r0, r1, r2}
 800249c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3_data.imu;
 80024a0:	4a42      	ldr	r2, [pc, #264]	; (80025ac <vTaskSensRead+0x158>)
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <vTaskSensRead+0x148>)
 80024a4:	4614      	mov	r4, r2
 80024a6:	330c      	adds	r3, #12
 80024a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb3_baro.timestamp = tick_count;
//			sb3_imu.timestamp = tick_count;
			osMutexRelease(sb3_mutex);
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <vTaskSensRead+0x150>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f00d ff80 	bl	80103b8 <osMutexRelease>
		}

		if(osMutexAcquire(sb2_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 80024b8:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <vTaskSensRead+0x15c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	211e      	movs	r1, #30
 80024be:	4618      	mov	r0, r3
 80024c0:	f00d ff1c 	bl	80102fc <osMutexAcquire>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d110      	bne.n	80024ec <vTaskSensRead+0x98>
			sb2_baro = sb3_data.baro;
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <vTaskSensRead+0x160>)
 80024cc:	4a33      	ldr	r2, [pc, #204]	; (800259c <vTaskSensRead+0x148>)
 80024ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80024d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3_data.imu;
 80024d4:	4a38      	ldr	r2, [pc, #224]	; (80025b8 <vTaskSensRead+0x164>)
 80024d6:	4b31      	ldr	r3, [pc, #196]	; (800259c <vTaskSensRead+0x148>)
 80024d8:	4614      	mov	r4, r2
 80024da:	330c      	adds	r3, #12
 80024dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb2_baro.timestamp = tick_count;
//			sb2_imu.timestamp = tick_count;
			osMutexRelease(sb2_mutex);
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <vTaskSensRead+0x15c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f00d ff66 	bl	80103b8 <osMutexRelease>
		}

		if(osMutexAcquire(sb1_mutex, SB_MUTEX_TIMEOUT) == osOK) {
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <vTaskSensRead+0x168>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	211e      	movs	r1, #30
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00d ff02 	bl	80102fc <osMutexAcquire>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d110      	bne.n	8002520 <vTaskSensRead+0xcc>
			sb1_baro = sb3_data.baro;
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <vTaskSensRead+0x16c>)
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <vTaskSensRead+0x148>)
 8002502:	ca07      	ldmia	r2, {r0, r1, r2}
 8002504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3_data.imu;
 8002508:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <vTaskSensRead+0x170>)
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <vTaskSensRead+0x148>)
 800250c:	4614      	mov	r4, r2
 800250e:	330c      	adds	r3, #12
 8002510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//			sb1_baro.timestamp = tick_count;
//			sb1_imu.timestamp = tick_count;
			osMutexRelease(sb1_mutex);
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <vTaskSensRead+0x168>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f00d ff4c 	bl	80103b8 <osMutexRelease>
		}

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", sb3_baro.pressure,
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <vTaskSensRead+0x154>)
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <vTaskSensRead+0x154>)
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4827      	ldr	r0, [pc, #156]	; (80025c8 <vTaskSensRead+0x174>)
 800252c:	f7ff fc0a 	bl	8001d44 <UsbPrint>
				sb3_baro.temperature, tick_count);

		UsbPrint(
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <vTaskSensRead+0x158>)
 8002532:	f9b3 3000 	ldrsh.w	r3, [r3]
		UsbPrint(
 8002536:	461c      	mov	r4, r3
				sb3_imu.gyro_x, sb3_imu.gyro_y,
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <vTaskSensRead+0x158>)
 800253a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		UsbPrint(
 800253e:	461d      	mov	r5, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <vTaskSensRead+0x158>)
 8002542:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		UsbPrint(
 8002546:	461e      	mov	r6, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <vTaskSensRead+0x158>)
 800254a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		UsbPrint(
 800254e:	461a      	mov	r2, r3
				sb3_imu.gyro_z, sb3_imu.acc_x, sb3_imu.acc_y,
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <vTaskSensRead+0x158>)
 8002552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		UsbPrint(
 8002556:	4619      	mov	r1, r3
				sb3_imu.acc_z, tick_count);
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <vTaskSensRead+0x158>)
 800255a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		UsbPrint(
 800255e:	4618      	mov	r0, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	9303      	str	r3, [sp, #12]
 8002564:	9002      	str	r0, [sp, #8]
 8002566:	9101      	str	r1, [sp, #4]
 8002568:	9200      	str	r2, [sp, #0]
 800256a:	4633      	mov	r3, r6
 800256c:	462a      	mov	r2, r5
 800256e:	4621      	mov	r1, r4
 8002570:	4816      	ldr	r0, [pc, #88]	; (80025cc <vTaskSensRead+0x178>)
 8002572:	f7ff fbe7 	bl	8001d44 <UsbPrint>

		logSensor(tick_count, 3, BARO, &sb3_baro);
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <vTaskSensRead+0x154>)
 8002578:	2201      	movs	r2, #1
 800257a:	2103      	movs	r1, #3
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff faeb 	bl	8001b58 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <vTaskSensRead+0x158>)
 8002584:	2202      	movs	r2, #2
 8002586:	2103      	movs	r1, #3
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff fae5 	bl	8001b58 <logSensor>

		osDelayUntil(tick_count);
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f00d fdda 	bl	8010148 <osDelayUntil>
		tick_count += tick_update;
 8002594:	e76d      	b.n	8002472 <vTaskSensRead+0x1e>
 8002596:	bf00      	nop
 8002598:	51eb851f 	.word	0x51eb851f
 800259c:	2000026c 	.word	0x2000026c
 80025a0:	2000a8cc 	.word	0x2000a8cc
 80025a4:	2000aa00 	.word	0x2000aa00
 80025a8:	20000250 	.word	0x20000250
 80025ac:	2000025c 	.word	0x2000025c
 80025b0:	20010ca4 	.word	0x20010ca4
 80025b4:	20000234 	.word	0x20000234
 80025b8:	20000240 	.word	0x20000240
 80025bc:	2000a9fc 	.word	0x2000a9fc
 80025c0:	20000218 	.word	0x20000218
 80025c4:	20000224 	.word	0x20000224
 80025c8:	0801679c 	.word	0x0801679c
 80025cc:	080167bc 	.word	0x080167bc

080025d0 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 80025d8:	221c      	movs	r2, #28
 80025da:	4904      	ldr	r1, [pc, #16]	; (80025ec <HAL_SPI_RxCpltCallback+0x1c>)
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <HAL_SPI_RxCpltCallback+0x20>)
 80025de:	f005 fd7f 	bl	80080e0 <HAL_SPI_Receive_IT>

}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000026c 	.word	0x2000026c
 80025f0:	2000a8cc 	.word	0x2000a8cc

080025f4 <vTaskStateEst>:
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size);
void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]);

void vTaskStateEst(void *argument) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;

	/* Variables */

	/* Fixed Variables */
	float Ad[NUMBER_STATES][NUMBER_STATES] = { 0 };
 8002600:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002604:	2224      	movs	r2, #36	; 0x24
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f012 f9ac 	bl	8014966 <memset>
	float Ad_T[NUMBER_STATES][NUMBER_STATES] = { 0 };
 800260e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f012 f9a5 	bl	8014966 <memset>
	float Bd[NUMBER_STATES][NUMBER_INPUTS] = { 0 };
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
	float Gd[NUMBER_STATES][NUMBER_NOISE] = { 0 };
 8002628:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
	float Gd_T[NUMBER_NOISE][NUMBER_STATES] = { 0 };
 8002634:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
	float H[NUMBER_SENSOR][NUMBER_STATES] = { 0 };
 8002640:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8002644:	4618      	mov	r0, r3
 8002646:	2324      	movs	r3, #36	; 0x24
 8002648:	461a      	mov	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	f012 f98b 	bl	8014966 <memset>
	float H_T[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 8002650:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002654:	4618      	mov	r0, r3
 8002656:	2324      	movs	r3, #36	; 0x24
 8002658:	461a      	mov	r2, r3
 800265a:	2100      	movs	r1, #0
 800265c:	f012 f983 	bl	8014966 <memset>
	float Q[NUMBER_NOISE][NUMBER_NOISE] = { 0 };
 8002660:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
	float R[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800266a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800266e:	4618      	mov	r0, r3
 8002670:	2324      	movs	r3, #36	; 0x24
 8002672:	461a      	mov	r2, r3
 8002674:	2100      	movs	r1, #0
 8002676:	f012 f976 	bl	8014966 <memset>
	float u[NUMBER_INPUTS] = { 0 };
 800267a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

	/* State Variables */
	float x_priori[NUMBER_STATES] = { 0 };
 8002684:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002688:	461a      	mov	r2, r3
 800268a:	2300      	movs	r3, #0
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	6053      	str	r3, [r2, #4]
 8002690:	6093      	str	r3, [r2, #8]
	float x_est[NUMBER_STATES] = { 0 };
 8002692:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002696:	461a      	mov	r2, r3
 8002698:	2300      	movs	r3, #0
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	6053      	str	r3, [r2, #4]
 800269e:	6093      	str	r3, [r2, #8]
	float P_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80026a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80026a4:	4618      	mov	r0, r3
 80026a6:	2324      	movs	r3, #36	; 0x24
 80026a8:	461a      	mov	r2, r3
 80026aa:	2100      	movs	r1, #0
 80026ac:	f012 f95b 	bl	8014966 <memset>
	float P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 80026b0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80026b4:	4618      	mov	r0, r3
 80026b6:	2324      	movs	r3, #36	; 0x24
 80026b8:	461a      	mov	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f012 f953 	bl	8014966 <memset>
	float State_Inovation[NUMBER_SENSOR] = { 0 };
 80026c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026c4:	461a      	mov	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	6053      	str	r3, [r2, #4]
 80026cc:	6093      	str	r3, [r2, #8]
	float Cov_Inovation[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80026ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026d2:	4618      	mov	r0, r3
 80026d4:	2324      	movs	r3, #36	; 0x24
 80026d6:	461a      	mov	r2, r3
 80026d8:	2100      	movs	r1, #0
 80026da:	f012 f944 	bl	8014966 <memset>
	float Cov_Inovation_Inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 80026de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80026e2:	4618      	mov	r0, r3
 80026e4:	2324      	movs	r3, #36	; 0x24
 80026e6:	461a      	mov	r2, r3
 80026e8:	2100      	movs	r1, #0
 80026ea:	f012 f93c 	bl	8014966 <memset>
	float K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 80026ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026f2:	4618      	mov	r0, r3
 80026f4:	2324      	movs	r3, #36	; 0x24
 80026f6:	461a      	mov	r2, r3
 80026f8:	2100      	movs	r1, #0
 80026fa:	f012 f934 	bl	8014966 <memset>
	float measurements[NUMBER_SENSOR] = { 0 };
 80026fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002702:	461a      	mov	r2, r3
 8002704:	2300      	movs	r3, #0
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	6053      	str	r3, [r2, #4]
 800270a:	6093      	str	r3, [r2, #8]

	/* Placeholder Variables */
	float Placeholder_priori[NUMBER_STATES][NUMBER_STATES] = { 0 };
 800270c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002710:	4618      	mov	r0, r3
 8002712:	2324      	movs	r3, #36	; 0x24
 8002714:	461a      	mov	r2, r3
 8002716:	2100      	movs	r1, #0
 8002718:	f012 f925 	bl	8014966 <memset>
	float Placeholder_est[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800271c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002720:	4618      	mov	r0, r3
 8002722:	2324      	movs	r3, #36	; 0x24
 8002724:	461a      	mov	r2, r3
 8002726:	2100      	movs	r1, #0
 8002728:	f012 f91d 	bl	8014966 <memset>
	float Placeholder_K[NUMBER_STATES][NUMBER_SENSOR] = { 0 };
 800272c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002730:	4618      	mov	r0, r3
 8002732:	2324      	movs	r3, #36	; 0x24
 8002734:	461a      	mov	r2, r3
 8002736:	2100      	movs	r1, #0
 8002738:	f012 f915 	bl	8014966 <memset>
	float Placeholder_P_est[NUMBER_STATES][NUMBER_STATES] = { 0 };
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	4618      	mov	r0, r3
 8002742:	2324      	movs	r3, #36	; 0x24
 8002744:	461a      	mov	r2, r3
 8002746:	2100      	movs	r1, #0
 8002748:	f012 f90d 	bl	8014966 <memset>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800274c:	f00d fbf6 	bl	800ff3c <osKernelGetTickCount>
 8002750:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8002754:	f00d fc1a 	bl	800ff8c <osKernelGetTickFreq>
 8002758:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	for (;;) {
		tick_count += tick_update;
 800275c:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8002760:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002764:	4413      	add	r3, r2
 8002766:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4

		/* Prediction Step */
		/* Calculation of x_priori */
		memset(x_priori, 0, NUMBER_STATES*sizeof(x_priori[0]));
 800276a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800276e:	220c      	movs	r2, #12
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f012 f8f7 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800277e:	e071      	b.n	8002864 <vTaskStateEst+0x270>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8002786:	e02f      	b.n	80027e8 <vTaskStateEst+0x1f4>
				x_priori[j] += Ad[j][i] * x_est[i];
 8002788:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800278c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	ed93 7a00 	vldr	s14, [r3]
 8002798:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80027ae:	4413      	add	r3, r2
 80027b0:	3ba0      	subs	r3, #160	; 0xa0
 80027b2:	edd3 6a00 	vldr	s13, [r3]
 80027b6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80027ba:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80027d2:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 80027de:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027e2:	3301      	adds	r3, #1
 80027e4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80027e8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	ddcb      	ble.n	8002788 <vTaskStateEst+0x194>
			}
			for(int k = 0; k < NUMBER_INPUTS; k++){
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80027f6:	e02c      	b.n	8002852 <vTaskStateEst+0x25e>
				x_priori[j] += Bd[j][k] * u[k];
 80027f8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80027fc:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800280c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8002818:	4413      	add	r3, r2
 800281a:	3bd0      	subs	r3, #208	; 0xd0
 800281c:	edd3 6a00 	vldr	s13, [r3]
 8002820:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8002824:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002838:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800283c:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_INPUTS; k++){
 8002848:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800284c:	3301      	adds	r3, #1
 800284e:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8002852:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002856:	2b00      	cmp	r3, #0
 8002858:	ddce      	ble.n	80027f8 <vTaskStateEst+0x204>
		for(int j = 0; j < NUMBER_STATES; j++){
 800285a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800285e:	3301      	adds	r3, #1
 8002860:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8002864:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002868:	2b02      	cmp	r3, #2
 800286a:	dd89      	ble.n	8002780 <vTaskStateEst+0x18c>
			}
		}

		/* Calculation of P_priori */
		/* Ad * P_est_prior * Ad_T */
		memset(Placeholder_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_priori[0][0]));
 800286c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002870:	2224      	movs	r2, #36	; 0x24
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f012 f876 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8002880:	e05b      	b.n	800293a <vTaskStateEst+0x346>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002888:	e04e      	b.n	8002928 <vTaskStateEst+0x334>
				for(int k = 0; k < NUMBER_STATES; k++){
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002890:	e041      	b.n	8002916 <vTaskStateEst+0x322>
					Placeholder_priori[j][i] +=  Ad[j][k] * P_est[k][i];
 8002892:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002896:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80028c4:	4413      	add	r3, r2
 80028c6:	3ba0      	subs	r3, #160	; 0xa0
 80028c8:	edd3 6a00 	vldr	s13, [r3]
 80028cc:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80028d0:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80028f4:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 800290c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8002910:	3301      	adds	r3, #1
 8002912:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8002916:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800291a:	2b02      	cmp	r3, #2
 800291c:	ddb9      	ble.n	8002892 <vTaskStateEst+0x29e>
			for(int i = 0; i < NUMBER_STATES; i++){
 800291e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8002922:	3301      	adds	r3, #1
 8002924:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002928:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800292c:	2b02      	cmp	r3, #2
 800292e:	ddac      	ble.n	800288a <vTaskStateEst+0x296>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002930:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8002934:	3301      	adds	r3, #1
 8002936:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800293a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 800293e:	2b02      	cmp	r3, #2
 8002940:	dd9f      	ble.n	8002882 <vTaskStateEst+0x28e>
				}
			}
		}
		memset(P_priori, 0, NUMBER_STATES*NUMBER_STATES*sizeof(P_priori[0][0]));
 8002942:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f012 f80b 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8002956:	e05b      	b.n	8002a10 <vTaskStateEst+0x41c>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002958:	2300      	movs	r3, #0
 800295a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800295e:	e04e      	b.n	80029fe <vTaskStateEst+0x40a>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8002966:	e041      	b.n	80029ec <vTaskStateEst+0x3f8>
					P_priori[j][i] +=  Placeholder_priori[j][k] * Ad_T[k][i];
 8002968:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800296c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	ed93 7a00 	vldr	s14, [r3]
 8002984:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002988:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	edd3 6a00 	vldr	s13, [r3]
 80029a0:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80029b6:	4413      	add	r3, r2
 80029b8:	3bc4      	subs	r3, #196	; 0xc4
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80029ca:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 80029e2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80029e6:	3301      	adds	r3, #1
 80029e8:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80029ec:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	ddb9      	ble.n	8002968 <vTaskStateEst+0x374>
			for(int i = 0; i < NUMBER_STATES; i++){
 80029f4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80029fe:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	ddac      	ble.n	8002960 <vTaskStateEst+0x36c>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002a06:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8002a10:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	dd9f      	ble.n	8002958 <vTaskStateEst+0x364>
		/* If Q is dimension 1, very easy -> do later */

		/* Update Step */
		/* state_inov = measurement - H * x_priori */
		/* H*P_priori */
		memset(State_Inovation, 0, NUMBER_SENSOR*sizeof(State_Inovation[0]));
 8002a18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a1c:	220c      	movs	r2, #12
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f011 ffa0 	bl	8014966 <memset>
		memset(Placeholder_est, 0, NUMBER_SENSOR*NUMBER_STATES*sizeof(Placeholder_est[0][0]));
 8002a26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f011 ff99 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8002a3a:	e08f      	b.n	8002b5c <vTaskStateEst+0x568>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8002a42:	e081      	b.n	8002b48 <vTaskStateEst+0x554>
				State_Inovation[j] += measurements[j] - H[j][i]*x_priori[i];
 8002a44:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002a48:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	ed93 7a00 	vldr	s14, [r3]
 8002a54:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a58:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	edd3 6a00 	vldr	s13, [r3]
 8002a64:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002a68:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	ed93 6a00 	vldr	s12, [r3]
 8002a80:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002a84:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002aa0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002ab2:	e040      	b.n	8002b36 <vTaskStateEst+0x542>
					Placeholder_est[j][i] += H[j][k] * P_priori[k][i];
 8002ab4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ab8:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002ad4:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	edd3 6a00 	vldr	s13, [r3]
 8002aec:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002af0:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b10:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002b14:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002b2c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b30:	3301      	adds	r3, #1
 8002b32:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002b36:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	ddba      	ble.n	8002ab4 <vTaskStateEst+0x4c0>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002b3e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002b42:	3301      	adds	r3, #1
 8002b44:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8002b48:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	f77f af79 	ble.w	8002a44 <vTaskStateEst+0x450>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002b52:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002b56:	3301      	adds	r3, #1
 8002b58:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8002b5c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f77f af6b 	ble.w	8002a3c <vTaskStateEst+0x448>
		}

		/* CHECK AGAIN STARTING HERE */

		/* S = H*P*H_T + R */
		memset(Cov_Inovation, 0, NUMBER_SENSOR*NUMBER_SENSOR*sizeof(Cov_Inovation[0][0]));
 8002b66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f011 fef9 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8002b7a:	e086      	b.n	8002c8a <vTaskStateEst+0x696>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002b82:	e079      	b.n	8002c78 <vTaskStateEst+0x684>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8002b8a:	e040      	b.n	8002c0e <vTaskStateEst+0x61a>
					Cov_Inovation[j][i] += Placeholder_est[j][k] * H_T[k][i];
 8002b8c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002b90:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bac:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	edd3 6a00 	vldr	s13, [r3]
 8002bc4:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002bc8:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be8:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002bec:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002c04:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8002c0e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	ddba      	ble.n	8002b8c <vTaskStateEst+0x598>
				}
				Cov_Inovation[j][i] += R[j][i];
 8002c16:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002c1a:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	ed93 7a00 	vldr	s14, [r3]
 8002c32:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002c36:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c52:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002c56:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002c6e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002c72:	3301      	adds	r3, #1
 8002c74:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8002c78:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	dd81      	ble.n	8002b84 <vTaskStateEst+0x590>
		for(int j = 0; j < NUMBER_SENSOR; j++){
 8002c80:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002c84:	3301      	adds	r3, #1
 8002c86:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8002c8a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	f77f af74 	ble.w	8002b7c <vTaskStateEst+0x588>
			}
		}

		/* Calculate Pseudoinverse of Cov_Inovation */
		pinv(LAMBDA, Cov_Inovation, Cov_Inovation_Inv);
 8002c94:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002c98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 8003034 <vTaskStateEst+0xa40>
 8002ca4:	f000 fa26 	bl	80030f4 <pinv>

		/* K  = P_priori * H_T * Cov_Inovation_Inv */
		memset(Placeholder_K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(Placeholder_K[0][0]));
 8002ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cac:	2224      	movs	r2, #36	; 0x24
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f011 fe58 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002cbc:	e05a      	b.n	8002d74 <vTaskStateEst+0x780>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002cc4:	e04d      	b.n	8002d62 <vTaskStateEst+0x76e>
				for(int k = 0; k < NUMBER_STATES; k++){
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002ccc:	e040      	b.n	8002d50 <vTaskStateEst+0x75c>
					Placeholder_K[j][i] += P_priori[j][k] * H_T[k][i];
 8002cce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002cd2:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8002cee:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	edd3 6a00 	vldr	s13, [r3]
 8002d06:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002d0a:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002d2e:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 8002d46:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002d50:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	ddba      	ble.n	8002cce <vTaskStateEst+0x6da>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002d58:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002d62:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	ddad      	ble.n	8002cc6 <vTaskStateEst+0x6d2>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002d6a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002d74:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	dda0      	ble.n	8002cbe <vTaskStateEst+0x6ca>
				}
			}
		}
		memset(K, 0, NUMBER_STATES*NUMBER_SENSOR*sizeof(K[0][0]));
 8002d7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d80:	2224      	movs	r2, #36	; 0x24
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f011 fdee 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8002d90:	e05a      	b.n	8002e48 <vTaskStateEst+0x854>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002d98:	e04d      	b.n	8002e36 <vTaskStateEst+0x842>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002da0:	e040      	b.n	8002e24 <vTaskStateEst+0x830>
					K[j][i] += Placeholder_K[j][k] * Cov_Inovation_Inv[k][i];
 8002da2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002da6:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	ed93 7a00 	vldr	s14, [r3]
 8002dbe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002dc2:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	edd3 6a00 	vldr	s13, [r3]
 8002dda:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002dde:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002e02:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002e1a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002e24:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	ddba      	ble.n	8002da2 <vTaskStateEst+0x7ae>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002e2c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002e30:	3301      	adds	r3, #1
 8002e32:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002e36:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	ddad      	ble.n	8002d9a <vTaskStateEst+0x7a6>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002e3e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002e42:	3301      	adds	r3, #1
 8002e44:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8002e48:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	dda0      	ble.n	8002d92 <vTaskStateEst+0x79e>
				}
			}
		}

		/* x_est = x_priori + K*measurements */
		memset(x_est, 0, NUMBER_STATES*sizeof(x_est[0]));
 8002e50:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002e54:	220c      	movs	r2, #12
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f011 fd84 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8002e64:	e045      	b.n	8002ef2 <vTaskStateEst+0x8fe>
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002e6c:	e038      	b.n	8002ee0 <vTaskStateEst+0x8ec>
				x_est[j] += x_priori[j] + K[j][i]*State_Inovation[i];
 8002e6e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002e72:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	ed93 7a00 	vldr	s14, [r3]
 8002e7e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002e82:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	edd3 6a00 	vldr	s13, [r3]
 8002e8e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002e92:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	ed93 6a00 	vldr	s12, [r3]
 8002eaa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002eae:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002eca:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_SENSOR; i++){
 8002ed6:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002eda:	3301      	adds	r3, #1
 8002edc:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8002ee0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	ddc2      	ble.n	8002e6e <vTaskStateEst+0x87a>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002ee8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002eec:	3301      	adds	r3, #1
 8002eee:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8002ef2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	ddb5      	ble.n	8002e66 <vTaskStateEst+0x872>
			}
		}


		/* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
		memset(Placeholder_P_est, 0, NUMBER_STATES*NUMBER_STATES*sizeof(Placeholder_P_est[0][0]));
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	2224      	movs	r2, #36	; 0x24
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f011 fd2f 	bl	8014966 <memset>
		for(int j = 0; j < NUMBER_STATES; j++){
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8002f0e:	e080      	b.n	8003012 <vTaskStateEst+0xa1e>
			for(int i = 0; i < NUMBER_STATES; i++){
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8002f16:	e073      	b.n	8003000 <vTaskStateEst+0xa0c>
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002f1e:	e040      	b.n	8002fa2 <vTaskStateEst+0x9ae>
					Placeholder_P_est[j][i] -= K[j][k] * H[k][i];
 8002f20:	f107 0108 	add.w	r1, r7, #8
 8002f24:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	ed93 7a00 	vldr	s14, [r3]
 8002f3c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002f40:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	edd3 6a00 	vldr	s13, [r3]
 8002f58:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002f5c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	f107 0108 	add.w	r1, r7, #8
 8002f80:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_SENSOR; k++){
 8002f98:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8002fa2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	ddba      	ble.n	8002f20 <vTaskStateEst+0x92c>
				}
				if(j == i){
 8002faa:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002fae:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11f      	bne.n	8002ff6 <vTaskStateEst+0xa02>
					Placeholder_P_est[j][i] += 1;
 8002fb6:	f107 0108 	add.w	r1, r7, #8
 8002fba:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fda:	f107 0108 	add.w	r1, r7, #8
 8002fde:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < NUMBER_STATES; i++){
 8002ff6:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8003000:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8003004:	2b02      	cmp	r3, #2
 8003006:	dd87      	ble.n	8002f18 <vTaskStateEst+0x924>
		for(int j = 0; j < NUMBER_STATES; j++){
 8003008:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800300c:	3301      	adds	r3, #1
 800300e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8003012:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003016:	2b02      	cmp	r3, #2
 8003018:	f77f af7a 	ble.w	8002f10 <vTaskStateEst+0x91c>
				}
			}
		}
		for(int j = 0; j < NUMBER_STATES; j++){
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003022:	e05c      	b.n	80030de <vTaskStateEst+0xaea>
			for(int i = 0; i < NUMBER_STATES; i++){
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800302a:	e04f      	b.n	80030cc <vTaskStateEst+0xad8>
				for(int k = 0; k < NUMBER_STATES; k++){
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003032:	e042      	b.n	80030ba <vTaskStateEst+0xac6>
 8003034:	3dcccccd 	.word	0x3dcccccd
					P_est[j][i] += Placeholder_P_est[j][k] * P_priori[k][i];
 8003038:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800303c:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	ed93 7a00 	vldr	s14, [r3]
 8003054:	f107 0108 	add.w	r1, r7, #8
 8003058:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	edd3 6a00 	vldr	s13, [r3]
 8003070:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8003074:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8003098:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < NUMBER_STATES; k++){
 80030b0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80030b4:	3301      	adds	r3, #1
 80030b6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80030ba:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80030be:	2b02      	cmp	r3, #2
 80030c0:	ddba      	ble.n	8003038 <vTaskStateEst+0xa44>
			for(int i = 0; i < NUMBER_STATES; i++){
 80030c2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80030c6:	3301      	adds	r3, #1
 80030c8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80030cc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	ddab      	ble.n	800302c <vTaskStateEst+0xa38>
		for(int j = 0; j < NUMBER_STATES; j++){
 80030d4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80030d8:	3301      	adds	r3, #1
 80030da:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80030de:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	dd9e      	ble.n	8003024 <vTaskStateEst+0xa30>
		/* OUTPUT IS x_est */




		osDelayUntil(tick_count);
 80030e6:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80030ea:	f00d f82d 	bl	8010148 <osDelayUntil>
		tick_count += tick_update;
 80030ee:	f7ff bb35 	b.w	800275c <vTaskStateEst+0x168>
 80030f2:	bf00      	nop

080030f4 <pinv>:
	Gd = G_init;


}

void pinv(float lambda, float Matrix[NUMBER_SENSOR][NUMBER_SENSOR], float Inverse[NUMBER_SENSOR][NUMBER_SENSOR]){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b0a6      	sub	sp, #152	; 0x98
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80030fe:	60b8      	str	r0, [r7, #8]
 8003100:	6079      	str	r1, [r7, #4]

	/* More Penrose Pseudoinverse */
	/* pinv = A_T*(A*A_T*lambda^2*eye(size(A)))^-1 */
	float Matrix_T[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8003102:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003106:	2224      	movs	r2, #36	; 0x24
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f011 fc2b 	bl	8014966 <memset>
	float Matrix_to_inv[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 8003110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003114:	2224      	movs	r2, #36	; 0x24
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f011 fc24 	bl	8014966 <memset>
	float First_Inverse[NUMBER_SENSOR][NUMBER_SENSOR] = { 0 };
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f011 fc1d 	bl	8014966 <memset>


	for(int j = 0; j < NUMBER_SENSOR; j++){
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003132:	e08b      	b.n	800324c <pinv+0x158>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800313a:	e07d      	b.n	8003238 <pinv+0x144>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003142:	e070      	b.n	8003226 <pinv+0x132>
				Matrix_to_inv[j][i] +=  Matrix[j][k] * Matrix_T[k][i];
 8003144:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800315a:	4413      	add	r3, r2
 800315c:	3b60      	subs	r3, #96	; 0x60
 800315e:	ed93 7a00 	vldr	s14, [r3]
 8003162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	441a      	add	r2, r3
 8003174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	edd3 6a00 	vldr	s13, [r3]
 8003180:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003196:	4413      	add	r3, r2
 8003198:	3b3c      	subs	r3, #60	; 0x3c
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80031bc:	4413      	add	r3, r2
 80031be:	3b60      	subs	r3, #96	; 0x60
 80031c0:	edc3 7a00 	vstr	s15, [r3]
				if(i == j){
 80031c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80031c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d125      	bne.n	800321c <pinv+0x128>
					Matrix_to_inv[j][i] += lambda * lambda;
 80031d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80031e6:	4413      	add	r3, r2
 80031e8:	3b60      	subs	r3, #96	; 0x60
 80031ea:	ed93 7a00 	vldr	s14, [r3]
 80031ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80031f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003214:	4413      	add	r3, r2
 8003216:	3b60      	subs	r3, #96	; 0x60
 8003218:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 800321c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003220:	3301      	adds	r3, #1
 8003222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800322a:	2b02      	cmp	r3, #2
 800322c:	dd8a      	ble.n	8003144 <pinv+0x50>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 800322e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003232:	3301      	adds	r3, #1
 8003234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003238:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800323c:	2b02      	cmp	r3, #2
 800323e:	f77f af7d 	ble.w	800313c <pinv+0x48>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 8003242:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003246:	3301      	adds	r3, #1
 8003248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800324c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003250:	2b02      	cmp	r3, #2
 8003252:	f77f af6f 	ble.w	8003134 <pinv+0x40>
				}
			}
		}
	}

	cofactor(Matrix_to_inv, First_Inverse, NUMBER_SENSOR);
 8003256:	f107 0214 	add.w	r2, r7, #20
 800325a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800325e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f93b 	bl	80034e0 <cofactor>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003270:	e05e      	b.n	8003330 <pinv+0x23c>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003278:	e051      	b.n	800331e <pinv+0x22a>
			for(int k = 0; k < NUMBER_SENSOR; k++){
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003280:	e044      	b.n	800330c <pinv+0x218>
				Inverse[j][i] +=  Matrix_T[j][k] * First_Inverse[k][i];
 8003282:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	461a      	mov	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	441a      	add	r2, r3
 8003294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	ed93 7a00 	vldr	s14, [r3]
 80032a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80032b6:	4413      	add	r3, r2
 80032b8:	3b3c      	subs	r3, #60	; 0x3c
 80032ba:	edd3 6a00 	vldr	s13, [r3]
 80032be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80032d4:	4413      	add	r3, r2
 80032d6:	3b84      	subs	r3, #132	; 0x84
 80032d8:	edd3 7a00 	vldr	s15, [r3]
 80032dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	441a      	add	r2, r3
 80032f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < NUMBER_SENSOR; k++){
 8003302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003306:	3301      	adds	r3, #1
 8003308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800330c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003310:	2b02      	cmp	r3, #2
 8003312:	ddb6      	ble.n	8003282 <pinv+0x18e>
		for(int i = 0; i < NUMBER_SENSOR; i++){
 8003314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003318:	3301      	adds	r3, #1
 800331a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800331e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003322:	2b02      	cmp	r3, #2
 8003324:	dda9      	ble.n	800327a <pinv+0x186>
	for(int j = 0; j < NUMBER_SENSOR; j++){
 8003326:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800332a:	3301      	adds	r3, #1
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003334:	2b02      	cmp	r3, #2
 8003336:	dd9c      	ble.n	8003272 <pinv+0x17e>
			}
		}
	}


}
 8003338:	bf00      	nop
 800333a:	3798      	adds	r7, #152	; 0x98
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <determinant>:

/*For calculating Determinant of the Matrix */
float determinant(float a[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	ed2d 8b02 	vpush	{d8}
 8003346:	b092      	sub	sp, #72	; 0x48
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	ed87 0a00 	vstr	s0, [r7]
	float s = 1, det = 0, b[NUMBER_SENSOR][NUMBER_SENSOR];
 8003350:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003354:	647b      	str	r3, [r7, #68]	; 0x44
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	643b      	str	r3, [r7, #64]	; 0x40
	int i, j, m, n, c;
	if (size == 1)
 800335c:	edd7 7a00 	vldr	s15, [r7]
 8003360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003364:	eef4 7a47 	vcmp.f32	s15, s14
 8003368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336c:	d102      	bne.n	8003374 <determinant+0x34>
	{
		return (a[0][0]);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e0ab      	b.n	80034cc <determinant+0x18c>
	}
	else
	{
		det = 0;
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
		for (c = 0; c < size; c++)
 800337a:	2300      	movs	r3, #0
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337e:	e097      	b.n	80034b0 <determinant+0x170>
		{
			m = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
			n = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
			for (i = 0;i < size; i++)
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	e05a      	b.n	8003444 <determinant+0x104>
			{
				for (j = 0 ;j < size; j++)
 800338e:	2300      	movs	r3, #0
 8003390:	63bb      	str	r3, [r7, #56]	; 0x38
 8003392:	e048      	b.n	8003426 <determinant+0xe6>
				{
					b[i][j] = 0;
 8003394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80033a6:	4413      	add	r3, r2
 80033a8:	3b40      	subs	r3, #64	; 0x40
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 80033b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d034      	beq.n	8003420 <determinant+0xe0>
 80033b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d030      	beq.n	8003420 <determinant+0xe0>
					{
						b[m][n] = a[i][j];
 80033be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	441a      	add	r2, r3
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80033e8:	4413      	add	r3, r2
 80033ea:	3b40      	subs	r3, #64	; 0x40
 80033ec:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033f8:	edd7 7a00 	vldr	s15, [r7]
 80033fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003400:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	d503      	bpl.n	8003416 <determinant+0xd6>
							n++;
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	3301      	adds	r3, #1
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
 8003414:	e004      	b.n	8003420 <determinant+0xe0>
						else
						{
							n = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	633b      	str	r3, [r7, #48]	; 0x30
							m++;
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	3301      	adds	r3, #1
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
				for (j = 0 ;j < size; j++)
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	3301      	adds	r3, #1
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003430:	ed97 7a00 	vldr	s14, [r7]
 8003434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	dcaa      	bgt.n	8003394 <determinant+0x54>
			for (i = 0;i < size; i++)
 800343e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003440:	3301      	adds	r3, #1
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344e:	ed97 7a00 	vldr	s14, [r7]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	dc98      	bgt.n	800338e <determinant+0x4e>
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, size - 1));
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	ed93 8a00 	vldr	s16, [r3]
 8003468:	edd7 7a00 	vldr	s15, [r7]
 800346c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003474:	f107 0308 	add.w	r3, r7, #8
 8003478:	eeb0 0a67 	vmov.f32	s0, s15
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff5f 	bl	8003340 <determinant>
 8003482:	eef0 7a40 	vmov.f32	s15, s0
 8003486:	ee28 7a27 	vmul.f32	s14, s16, s15
 800348a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			s = -1 * s;
 800349e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80034a2:	eef1 7a67 	vneg.f32	s15, s15
 80034a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		for (c = 0; c < size; c++)
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	3301      	adds	r3, #1
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ba:	ed97 7a00 	vldr	s14, [r7]
 80034be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c6:	f73f af5b 	bgt.w	8003380 <determinant+0x40>
		}
	}

	return (det);
 80034ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034cc:	ee07 3a90 	vmov	s15, r3
}
 80034d0:	eeb0 0a67 	vmov.f32	s0, s15
 80034d4:	3748      	adds	r7, #72	; 0x48
 80034d6:	46bd      	mov	sp, r7
 80034d8:	ecbd 8b02 	vpop	{d8}
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <cofactor>:

void cofactor(float num[NUMBER_SENSOR][NUMBER_SENSOR], float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	b09d      	sub	sp, #116	; 0x74
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	ed87 0a01 	vstr	s0, [r7, #4]
	float b[NUMBER_SENSOR][NUMBER_SENSOR], fac[NUMBER_SENSOR][NUMBER_SENSOR];
	int p, q, m, n, i, j;
	for (q = 0;q < size; q++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f2:	e0b3      	b.n	800365c <cofactor+0x17c>
	{
		for (p = 0;p < size; p++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f8:	e0a0      	b.n	800363c <cofactor+0x15c>
		{
			m = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
			n = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	663b      	str	r3, [r7, #96]	; 0x60
			for (i = 0;i < size; i++)
 8003502:	2300      	movs	r3, #0
 8003504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003506:	e04d      	b.n	80035a4 <cofactor+0xc4>
			{
				for (j = 0;j < size; j++)
 8003508:	2300      	movs	r3, #0
 800350a:	65bb      	str	r3, [r7, #88]	; 0x58
 800350c:	e03b      	b.n	8003586 <cofactor+0xa6>
				{
					if (i != q && j != p)
 800350e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003512:	429a      	cmp	r2, r3
 8003514:	d034      	beq.n	8003580 <cofactor+0xa0>
 8003516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	429a      	cmp	r2, r3
 800351c:	d030      	beq.n	8003580 <cofactor+0xa0>
					{
						b[m][n] = num[i][j];
 800351e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	461a      	mov	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	441a      	add	r2, r3
 800352e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003548:	4413      	add	r3, r2
 800354a:	3b3c      	subs	r3, #60	; 0x3c
 800354c:	6019      	str	r1, [r3, #0]
						if (n < (size - 2))
 800354e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003558:	edd7 7a01 	vldr	s15, [r7, #4]
 800355c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003560:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	d503      	bpl.n	8003576 <cofactor+0x96>
							n++;
 800356e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003570:	3301      	adds	r3, #1
 8003572:	663b      	str	r3, [r7, #96]	; 0x60
 8003574:	e004      	b.n	8003580 <cofactor+0xa0>
						else
						{
							n = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	663b      	str	r3, [r7, #96]	; 0x60
							m++;
 800357a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357c:	3301      	adds	r3, #1
 800357e:	667b      	str	r3, [r7, #100]	; 0x64
				for (j = 0;j < size; j++)
 8003580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003582:	3301      	adds	r3, #1
 8003584:	65bb      	str	r3, [r7, #88]	; 0x58
 8003586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003590:	ed97 7a01 	vldr	s14, [r7, #4]
 8003594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359c:	dcb7      	bgt.n	800350e <cofactor+0x2e>
			for (i = 0;i < size; i++)
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	3301      	adds	r3, #1
 80035a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80035b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ba:	dca5      	bgt.n	8003508 <cofactor+0x28>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, size - 1);
 80035bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c0:	4413      	add	r3, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ffce 	bl	8000564 <__aeabi_i2d>
 80035c8:	4603      	mov	r3, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	ec44 3b11 	vmov	d1, r3, r4
 80035d0:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8003690 <cofactor+0x1b0>
 80035d4:	f011 fe94 	bl	8015300 <pow>
 80035d8:	ec56 5b10 	vmov	r5, r6, d0
 80035dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80035e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035ec:	eeb0 0a67 	vmov.f32	s0, s15
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fea5 	bl	8003340 <determinant>
 80035f6:	ee10 3a10 	vmov	r3, s0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ffc4 	bl	8000588 <__aeabi_f2d>
 8003600:	4603      	mov	r3, r0
 8003602:	460c      	mov	r4, r1
 8003604:	461a      	mov	r2, r3
 8003606:	4623      	mov	r3, r4
 8003608:	4628      	mov	r0, r5
 800360a:	4631      	mov	r1, r6
 800360c:	f7fd f814 	bl	8000638 <__aeabi_dmul>
 8003610:	4603      	mov	r3, r0
 8003612:	460c      	mov	r4, r1
 8003614:	4618      	mov	r0, r3
 8003616:	4621      	mov	r1, r4
 8003618:	f7fd fade 	bl	8000bd8 <__aeabi_d2f>
 800361c:	4601      	mov	r1, r0
 800361e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003630:	4413      	add	r3, r2
 8003632:	3b60      	subs	r3, #96	; 0x60
 8003634:	6019      	str	r1, [r3, #0]
		for (p = 0;p < size; p++)
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	3301      	adds	r3, #1
 800363a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800363c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003646:	ed97 7a01 	vldr	s14, [r7, #4]
 800364a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	f73f af52 	bgt.w	80034fa <cofactor+0x1a>
	for (q = 0;q < size; q++)
 8003656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003658:	3301      	adds	r3, #1
 800365a:	66bb      	str	r3, [r7, #104]	; 0x68
 800365c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003666:	ed97 7a01 	vldr	s14, [r7, #4]
 800366a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	f73f af3f 	bgt.w	80034f4 <cofactor+0x14>
		}
	}
	transpose(inverse, num, fac, size);
 8003676:	f107 0310 	add.w	r3, r7, #16
 800367a:	ed97 0a01 	vldr	s0, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	68b8      	ldr	r0, [r7, #8]
 8003684:	f000 f808 	bl	8003698 <transpose>
}
 8003688:	bf00      	nop
 800368a:	3774      	adds	r7, #116	; 0x74
 800368c:	46bd      	mov	sp, r7
 800368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003690:	00000000 	.word	0x00000000
 8003694:	bff00000 	.word	0xbff00000

08003698 <transpose>:
/*Finding transpose of matrix*/
void transpose(float inverse[NUMBER_SENSOR][NUMBER_SENSOR], float num[NUMBER_SENSOR][NUMBER_SENSOR], float fac[NUMBER_SENSOR][NUMBER_SENSOR], float size)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b090      	sub	sp, #64	; 0x40
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	ed87 0a00 	vstr	s0, [r7]
	int i, j;
	float b[NUMBER_SENSOR][NUMBER_SENSOR], d;

	for (i = 0;i < size; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ac:	e02c      	b.n	8003708 <transpose+0x70>
	{
		for (j = 0;j < size; j++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b2:	e01a      	b.n	80036ea <transpose+0x52>
		{
			b[i][j] = fac[j][i];
 80036b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	441a      	add	r2, r3
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80036de:	4413      	add	r3, r2
 80036e0:	3b30      	subs	r3, #48	; 0x30
 80036e2:	6019      	str	r1, [r3, #0]
		for (j = 0;j < size; j++)
 80036e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e6:	3301      	adds	r3, #1
 80036e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f4:	ed97 7a00 	vldr	s14, [r7]
 80036f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	dcd8      	bgt.n	80036b4 <transpose+0x1c>
	for (i = 0;i < size; i++)
 8003702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003704:	3301      	adds	r3, #1
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003712:	ed97 7a00 	vldr	s14, [r7]
 8003716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	dcc6      	bgt.n	80036ae <transpose+0x16>
		}
	}
	d = determinant(num, size);
 8003720:	ed97 0a00 	vldr	s0, [r7]
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f7ff fe0b 	bl	8003340 <determinant>
 800372a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	for (i = 0;i < size; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003732:	e032      	b.n	800379a <transpose+0x102>
	{
		for (j = 0;j < size; j++)
 8003734:	2300      	movs	r3, #0
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
 8003738:	e020      	b.n	800377c <transpose+0xe4>
		{
			inverse[i][j] = b[i][j] / d;
 800373a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800374c:	4413      	add	r3, r2
 800374e:	3b30      	subs	r3, #48	; 0x30
 8003750:	edd3 6a00 	vldr	s13, [r3]
 8003754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	461a      	mov	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	441a      	add	r2, r3
 8003764:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0;j < size; j++)
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	3301      	adds	r3, #1
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003786:	ed97 7a00 	vldr	s14, [r7]
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	dcd2      	bgt.n	800373a <transpose+0xa2>
	for (i = 0;i < size; i++)
 8003794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003796:	3301      	adds	r3, #1
 8003798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a4:	ed97 7a00 	vldr	s14, [r7]
 80037a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	dcc0      	bgt.n	8003734 <transpose+0x9c>
		}
	}
}
 80037b2:	bf00      	nop
 80037b4:	3740      	adds	r7, #64	; 0x40
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037c2:	e003      	b.n	80037cc <LoopCopyDataInit>

080037c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037ca:	3104      	adds	r1, #4

080037cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037cc:	480b      	ldr	r0, [pc, #44]	; (80037fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037d4:	d3f6      	bcc.n	80037c4 <CopyDataInit>
  ldr  r2, =_sbss
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037d8:	e002      	b.n	80037e0 <LoopFillZerobss>

080037da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037dc:	f842 3b04 	str.w	r3, [r2], #4

080037e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037e4:	d3f9      	bcc.n	80037da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037e6:	f7fe f981 	bl	8001aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ea:	f011 f87d 	bl	80148e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ee:	f7fd fbc3 	bl	8000f78 <main>
  bx  lr    
 80037f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037f4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80037f8:	08016a90 	.word	0x08016a90
  ldr  r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003800:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8003804:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8003808:	20012ed8 	.word	0x20012ed8

0800380c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800380c:	e7fe      	b.n	800380c <ADC_IRQHandler>

0800380e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003812:	2003      	movs	r0, #3
 8003814:	f000 f8f7 	bl	8003a06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003818:	2000      	movs	r0, #0
 800381a:	f7fe f879 	bl	8001910 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800381e:	f7fd fe69 	bl	80014f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_IncTick+0x20>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x24>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4413      	add	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_IncTick+0x24>)
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000008 	.word	0x20000008
 800384c:	20011150 	.word	0x20011150

08003850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return uwTick;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_GetTick+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20011150 	.word	0x20011150

08003868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff ffee 	bl	8003850 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d005      	beq.n	800388e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_Delay+0x40>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800388e:	bf00      	nop
 8003890:	f7ff ffde 	bl	8003850 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d8f7      	bhi.n	8003890 <HAL_Delay+0x28>
  {
  }
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000008 	.word	0x20000008

080038ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <__NVIC_SetPriorityGrouping+0x40>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c8:	4013      	ands	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <__NVIC_SetPriorityGrouping+0x44>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <__NVIC_SetPriorityGrouping+0x40>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	60d3      	str	r3, [r2, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00
 80038f0:	05fa0000 	.word	0x05fa0000

080038f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <__NVIC_GetPriorityGrouping+0x18>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	f003 0307 	and.w	r3, r3, #7
}
 8003902:	4618      	mov	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	2b00      	cmp	r3, #0
 8003920:	db0b      	blt.n	800393a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	4907      	ldr	r1, [pc, #28]	; (8003948 <__NVIC_EnableIRQ+0x38>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2001      	movs	r0, #1
 8003932:	fa00 f202 	lsl.w	r2, r0, r2
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	e000e100 	.word	0xe000e100

0800394c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db0a      	blt.n	8003976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	490c      	ldr	r1, [pc, #48]	; (8003998 <__NVIC_SetPriority+0x4c>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	440b      	add	r3, r1
 8003970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003974:	e00a      	b.n	800398c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4908      	ldr	r1, [pc, #32]	; (800399c <__NVIC_SetPriority+0x50>)
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3b04      	subs	r3, #4
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	440b      	add	r3, r1
 800398a:	761a      	strb	r2, [r3, #24]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	; 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f1c3 0307 	rsb	r3, r3, #7
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	bf28      	it	cs
 80039be:	2304      	movcs	r3, #4
 80039c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d902      	bls.n	80039d0 <NVIC_EncodePriority+0x30>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3b03      	subs	r3, #3
 80039ce:	e000      	b.n	80039d2 <NVIC_EncodePriority+0x32>
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	401a      	ands	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43d9      	mvns	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	4313      	orrs	r3, r2
         );
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff ff4c 	bl	80038ac <__NVIC_SetPriorityGrouping>
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a2e:	f7ff ff61 	bl	80038f4 <__NVIC_GetPriorityGrouping>
 8003a32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	6978      	ldr	r0, [r7, #20]
 8003a3a:	f7ff ffb1 	bl	80039a0 <NVIC_EncodePriority>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff80 	bl	800394c <__NVIC_SetPriority>
}
 8003a4c:	bf00      	nop
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff54 	bl	8003910 <__NVIC_EnableIRQ>
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7ff fee8 	bl	8003850 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e099      	b.n	8003bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aac:	e00f      	b.n	8003ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aae:	f7ff fecf 	bl	8003850 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d908      	bls.n	8003ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e078      	b.n	8003bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e8      	bne.n	8003aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <HAL_DMA_Init+0x158>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	4313      	orrs	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d117      	bne.n	8003b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 faa5 	bl	80040c4 <DMA_CheckFifoParam>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2240      	movs	r2, #64	; 0x40
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e016      	b.n	8003bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa5c 	bl	8004058 <DMA_CalcBaseAndBitshift>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	223f      	movs	r2, #63	; 0x3f
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	f010803f 	.word	0xf010803f

08003bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_Start_IT+0x26>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e048      	b.n	8003c84 <HAL_DMA_Start_IT+0xb8>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d137      	bne.n	8003c76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f9ee 	bl	8003ffc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	223f      	movs	r2, #63	; 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0216 	orr.w	r2, r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c4a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0208 	orr.w	r2, r2, #8
 8003c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e005      	b.n	8003c82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00c      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2205      	movs	r2, #5
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003cdc:	4b92      	ldr	r3, [pc, #584]	; (8003f28 <HAL_DMA_IRQHandler+0x258>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a92      	ldr	r2, [pc, #584]	; (8003f2c <HAL_DMA_IRQHandler+0x25c>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01a      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0204 	bic.w	r2, r2, #4
 8003d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2208      	movs	r2, #8
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	2201      	movs	r2, #1
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2204      	movs	r2, #4
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d012      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	2210      	movs	r2, #16
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d043      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03c      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2210      	movs	r2, #16
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d024      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	e01f      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e016      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0208 	bic.w	r2, r2, #8
 8003e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2220      	movs	r2, #32
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 808e 	beq.w	8003f6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8086 	beq.w	8003f6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2220      	movs	r2, #32
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d136      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0216 	bic.w	r2, r2, #22
 8003e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x1da>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	223f      	movs	r2, #63	; 0x3f
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d07d      	beq.n	8003fda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
        }
        return;
 8003ee6:	e078      	b.n	8003fda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01c      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d030      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
 8003f14:	e02b      	b.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
 8003f26:	e022      	b.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0210 	bic.w	r2, r2, #16
 8003f4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d032      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d022      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d307      	bcc.n	8003fb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f2      	bne.n	8003f9a <HAL_DMA_IRQHandler+0x2ca>
 8003fb4:	e000      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e000      	b.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fda:	bf00      	nop
    }
  }
}
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop

08003fe4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004018:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d108      	bne.n	800403c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800403a:	e007      	b.n	800404c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	3b10      	subs	r3, #16
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <DMA_CalcBaseAndBitshift+0x60>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <DMA_CalcBaseAndBitshift+0x64>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d908      	bls.n	8004098 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <DMA_CalcBaseAndBitshift+0x68>)
 800408e:	4013      	ands	r3, r2
 8004090:	1d1a      	adds	r2, r3, #4
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	659a      	str	r2, [r3, #88]	; 0x58
 8004096:	e006      	b.n	80040a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <DMA_CalcBaseAndBitshift+0x68>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	aaaaaaab 	.word	0xaaaaaaab
 80040bc:	0801696c 	.word	0x0801696c
 80040c0:	fffffc00 	.word	0xfffffc00

080040c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11f      	bne.n	800411e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d855      	bhi.n	8004190 <DMA_CheckFifoParam+0xcc>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <DMA_CheckFifoParam+0x28>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800410f 	.word	0x0800410f
 80040f4:	080040fd 	.word	0x080040fd
 80040f8:	08004191 	.word	0x08004191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d045      	beq.n	8004194 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410c:	e042      	b.n	8004194 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004116:	d13f      	bne.n	8004198 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411c:	e03c      	b.n	8004198 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004126:	d121      	bne.n	800416c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d836      	bhi.n	800419c <DMA_CheckFifoParam+0xd8>
 800412e:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <DMA_CheckFifoParam+0x70>)
 8004130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004134:	08004145 	.word	0x08004145
 8004138:	0800414b 	.word	0x0800414b
 800413c:	08004145 	.word	0x08004145
 8004140:	0800415d 	.word	0x0800415d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      break;
 8004148:	e02f      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d024      	beq.n	80041a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415a:	e021      	b.n	80041a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004164:	d11e      	bne.n	80041a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800416a:	e01b      	b.n	80041a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d902      	bls.n	8004178 <DMA_CheckFifoParam+0xb4>
 8004172:	2b03      	cmp	r3, #3
 8004174:	d003      	beq.n	800417e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004176:	e018      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e015      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00e      	beq.n	80041a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      break;
 800418e:	e00b      	b.n	80041a8 <DMA_CheckFifoParam+0xe4>
      break;
 8004190:	bf00      	nop
 8004192:	e00a      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      break;
 8004194:	bf00      	nop
 8004196:	e008      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      break;
 8004198:	bf00      	nop
 800419a:	e006      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      break;
 800419c:	bf00      	nop
 800419e:	e004      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      break;
 80041a0:	bf00      	nop
 80041a2:	e002      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      break;   
 80041a4:	bf00      	nop
 80041a6:	e000      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      break;
 80041a8:	bf00      	nop
    }
  } 
  
  return status; 
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e175      	b.n	80044c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041d8:	2201      	movs	r2, #1
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	f040 8164 	bne.w	80044be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d00b      	beq.n	8004216 <HAL_GPIO_Init+0x5e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d007      	beq.n	8004216 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800420a:	2b11      	cmp	r3, #17
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b12      	cmp	r3, #18
 8004214:	d130      	bne.n	8004278 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800424c:	2201      	movs	r2, #1
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 0201 	and.w	r2, r3, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2203      	movs	r2, #3
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x100>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b12      	cmp	r3, #18
 80042b6:	d123      	bne.n	8004300 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	220f      	movs	r2, #15
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	08da      	lsrs	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3208      	adds	r2, #8
 80042fa:	69b9      	ldr	r1, [r7, #24]
 80042fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	2203      	movs	r2, #3
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80be 	beq.w	80044be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004342:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <HAL_GPIO_Init+0x320>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	4a64      	ldr	r2, [pc, #400]	; (80044d8 <HAL_GPIO_Init+0x320>)
 8004348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800434c:	6453      	str	r3, [r2, #68]	; 0x44
 800434e:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_GPIO_Init+0x320>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800435a:	4a60      	ldr	r2, [pc, #384]	; (80044dc <HAL_GPIO_Init+0x324>)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	3302      	adds	r3, #2
 8004362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	220f      	movs	r2, #15
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a57      	ldr	r2, [pc, #348]	; (80044e0 <HAL_GPIO_Init+0x328>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d037      	beq.n	80043f6 <HAL_GPIO_Init+0x23e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a56      	ldr	r2, [pc, #344]	; (80044e4 <HAL_GPIO_Init+0x32c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d031      	beq.n	80043f2 <HAL_GPIO_Init+0x23a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a55      	ldr	r2, [pc, #340]	; (80044e8 <HAL_GPIO_Init+0x330>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02b      	beq.n	80043ee <HAL_GPIO_Init+0x236>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a54      	ldr	r2, [pc, #336]	; (80044ec <HAL_GPIO_Init+0x334>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d025      	beq.n	80043ea <HAL_GPIO_Init+0x232>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a53      	ldr	r2, [pc, #332]	; (80044f0 <HAL_GPIO_Init+0x338>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01f      	beq.n	80043e6 <HAL_GPIO_Init+0x22e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a52      	ldr	r2, [pc, #328]	; (80044f4 <HAL_GPIO_Init+0x33c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d019      	beq.n	80043e2 <HAL_GPIO_Init+0x22a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a51      	ldr	r2, [pc, #324]	; (80044f8 <HAL_GPIO_Init+0x340>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_GPIO_Init+0x226>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a50      	ldr	r2, [pc, #320]	; (80044fc <HAL_GPIO_Init+0x344>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00d      	beq.n	80043da <HAL_GPIO_Init+0x222>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4f      	ldr	r2, [pc, #316]	; (8004500 <HAL_GPIO_Init+0x348>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <HAL_GPIO_Init+0x21e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4e      	ldr	r2, [pc, #312]	; (8004504 <HAL_GPIO_Init+0x34c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_GPIO_Init+0x21a>
 80043ce:	2309      	movs	r3, #9
 80043d0:	e012      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043d2:	230a      	movs	r3, #10
 80043d4:	e010      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043d6:	2308      	movs	r3, #8
 80043d8:	e00e      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043da:	2307      	movs	r3, #7
 80043dc:	e00c      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043de:	2306      	movs	r3, #6
 80043e0:	e00a      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043e2:	2305      	movs	r3, #5
 80043e4:	e008      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043e6:	2304      	movs	r3, #4
 80043e8:	e006      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043ea:	2303      	movs	r3, #3
 80043ec:	e004      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e002      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_GPIO_Init+0x240>
 80043f6:	2300      	movs	r3, #0
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	f002 0203 	and.w	r2, r2, #3
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	4093      	lsls	r3, r2
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004408:	4934      	ldr	r1, [pc, #208]	; (80044dc <HAL_GPIO_Init+0x324>)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	3302      	adds	r3, #2
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004416:	4b3c      	ldr	r3, [pc, #240]	; (8004508 <HAL_GPIO_Init+0x350>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	43db      	mvns	r3, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4013      	ands	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800443a:	4a33      	ldr	r2, [pc, #204]	; (8004508 <HAL_GPIO_Init+0x350>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004440:	4b31      	ldr	r3, [pc, #196]	; (8004508 <HAL_GPIO_Init+0x350>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <HAL_GPIO_Init+0x350>)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800446a:	4b27      	ldr	r3, [pc, #156]	; (8004508 <HAL_GPIO_Init+0x350>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448e:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <HAL_GPIO_Init+0x350>)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004494:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <HAL_GPIO_Init+0x350>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b8:	4a13      	ldr	r2, [pc, #76]	; (8004508 <HAL_GPIO_Init+0x350>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3301      	adds	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	f67f ae86 	bls.w	80041d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	3724      	adds	r7, #36	; 0x24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40013800 	.word	0x40013800
 80044e0:	40020000 	.word	0x40020000
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020c00 	.word	0x40020c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40021400 	.word	0x40021400
 80044f8:	40021800 	.word	0x40021800
 80044fc:	40021c00 	.word	0x40021c00
 8004500:	40022000 	.word	0x40022000
 8004504:	40022400 	.word	0x40022400
 8004508:	40013c00 	.word	0x40013c00

0800450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800451c:	787b      	ldrb	r3, [r7, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004528:	e003      	b.n	8004532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	041a      	lsls	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	619a      	str	r2, [r3, #24]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	887b      	ldrh	r3, [r7, #2]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004556:	887b      	ldrh	r3, [r7, #2]
 8004558:	041a      	lsls	r2, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800455e:	e002      	b.n	8004566 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004560:	887a      	ldrh	r2, [r7, #2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	619a      	str	r2, [r3, #24]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004574:	b08f      	sub	sp, #60	; 0x3c
 8004576:	af0a      	add	r7, sp, #40	; 0x28
 8004578:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e116      	b.n	80047b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f00f fe4a 	bl	8014238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2203      	movs	r2, #3
 80045a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f005 fc25 	bl	8009e12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	687e      	ldr	r6, [r7, #4]
 80045d0:	466d      	mov	r5, sp
 80045d2:	f106 0410 	add.w	r4, r6, #16
 80045d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80045e6:	1d33      	adds	r3, r6, #4
 80045e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ea:	6838      	ldr	r0, [r7, #0]
 80045ec:	f005 fb06 	bl	8009bfc <USB_CoreInit>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0d7      	b.n	80047b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f005 fc13 	bl	8009e34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	e04a      	b.n	80046aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	333d      	adds	r3, #61	; 0x3d
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	333c      	adds	r3, #60	; 0x3c
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	b298      	uxth	r0, r3
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3342      	adds	r3, #66	; 0x42
 8004650:	4602      	mov	r2, r0
 8004652:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004654:	7bfa      	ldrb	r2, [r7, #15]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	333f      	adds	r3, #63	; 0x3f
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3344      	adds	r3, #68	; 0x44
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	3348      	adds	r3, #72	; 0x48
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3350      	adds	r3, #80	; 0x50
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	3301      	adds	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3af      	bcc.n	8004614 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e044      	b.n	8004744 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046d0:	7bfa      	ldrb	r2, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046fc:	7bfa      	ldrb	r2, [r7, #15]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3301      	adds	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3b5      	bcc.n	80046ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	687e      	ldr	r6, [r7, #4]
 8004756:	466d      	mov	r5, sp
 8004758:	f106 0410 	add.w	r4, r6, #16
 800475c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800475e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004764:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004768:	e885 0003 	stmia.w	r5, {r0, r1}
 800476c:	1d33      	adds	r3, r6, #4
 800476e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004770:	6838      	ldr	r0, [r7, #0]
 8004772:	f005 fb89 	bl	8009e88 <USB_DevInit>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e014      	b.n	80047b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f001 f881 	bl	80058a8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f006 fbd8 	bl	800af60 <USB_DevDisconnect>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_PCD_Start+0x16>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e012      	b.n	80047f6 <HAL_PCD_Start+0x3c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f006 fba7 	bl	800af30 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f005 fb02 	bl	8009df0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047fe:	b590      	push	{r4, r7, lr}
 8004800:	b08d      	sub	sp, #52	; 0x34
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f006 fc4e 	bl	800b0b6 <USB_GetMode>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 83ca 	bne.w	8004fb6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f006 fbb2 	bl	800af90 <USB_ReadInterrupts>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 83c0 	beq.w	8004fb4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f006 fba9 	bl	800af90 <USB_ReadInterrupts>
 800483e:	4603      	mov	r3, r0
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	d107      	bne.n	8004858 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f002 0202 	and.w	r2, r2, #2
 8004856:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f006 fb97 	bl	800af90 <USB_ReadInterrupts>
 8004862:	4603      	mov	r3, r0
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b10      	cmp	r3, #16
 800486a:	d161      	bne.n	8004930 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0210 	bic.w	r2, r2, #16
 800487a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	3304      	adds	r3, #4
 800489a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	0c5b      	lsrs	r3, r3, #17
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d124      	bne.n	80048f2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d035      	beq.n	8004920 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	6a38      	ldr	r0, [r7, #32]
 80048c8:	f006 fa0f 	bl	800acea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d8:	441a      	add	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048ea:	441a      	add	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	619a      	str	r2, [r3, #24]
 80048f0:	e016      	b.n	8004920 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	0c5b      	lsrs	r3, r3, #17
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d110      	bne.n	8004920 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004904:	2208      	movs	r2, #8
 8004906:	4619      	mov	r1, r3
 8004908:	6a38      	ldr	r0, [r7, #32]
 800490a:	f006 f9ee 	bl	800acea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491a:	441a      	add	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0210 	orr.w	r2, r2, #16
 800492e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f006 fb2b 	bl	800af90 <USB_ReadInterrupts>
 800493a:	4603      	mov	r3, r0
 800493c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004940:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004944:	d16e      	bne.n	8004a24 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f006 fb31 	bl	800afb6 <USB_ReadDevAllOutEpInterrupt>
 8004954:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004956:	e062      	b.n	8004a1e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d057      	beq.n	8004a12 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f006 fb56 	bl	800b01e <USB_ReadDevOutEPInterrupt>
 8004972:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	461a      	mov	r2, r3
 800498c:	2301      	movs	r3, #1
 800498e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fdde 	bl	8005554 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00c      	beq.n	80049bc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	461a      	mov	r2, r3
 80049b0:	2308      	movs	r3, #8
 80049b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fed8 	bl	800576c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	461a      	mov	r2, r3
 80049d4:	2310      	movs	r3, #16
 80049d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	2320      	movs	r3, #32
 80049f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	3301      	adds	r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d199      	bne.n	8004958 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f006 fab1 	bl	800af90 <USB_ReadInterrupts>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a38:	f040 80c0 	bne.w	8004bbc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f006 fad2 	bl	800afea <USB_ReadDevAllInEpInterrupt>
 8004a46:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004a4c:	e0b2      	b.n	8004bb4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80a7 	beq.w	8004ba8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	4611      	mov	r1, r2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f006 faf8 	bl	800b05a <USB_ReadDevInEPInterrupt>
 8004a6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d057      	beq.n	8004b26 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69f9      	ldr	r1, [r7, #28]
 8004a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a96:	4013      	ands	r3, r2
 8004a98:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d132      	bne.n	8004b1a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3348      	adds	r3, #72	; 0x48
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	4613      	mov	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4403      	add	r3, r0
 8004ad4:	3344      	adds	r3, #68	; 0x44
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4419      	add	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ade:	4613      	mov	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4403      	add	r3, r0
 8004ae8:	3348      	adds	r3, #72	; 0x48
 8004aea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d113      	bne.n	8004b1a <HAL_PCD_IRQHandler+0x31c>
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	3350      	adds	r3, #80	; 0x50
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d108      	bne.n	8004b1a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b12:	461a      	mov	r2, r3
 8004b14:	2101      	movs	r1, #1
 8004b16:	f006 fb01 	bl	800b11c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f00f fc0c 	bl	801433e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2308      	movs	r3, #8
 8004b40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2310      	movs	r3, #16
 8004b5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	461a      	mov	r2, r3
 8004b76:	2340      	movs	r3, #64	; 0x40
 8004b78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	461a      	mov	r2, r3
 8004b92:	2302      	movs	r3, #2
 8004b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fc48 	bl	8005438 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	3301      	adds	r3, #1
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f47f af49 	bne.w	8004a4e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f006 f9e5 	bl	800af90 <USB_ReadInterrupts>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bd0:	d122      	bne.n	8004c18 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d108      	bne.n	8004c02 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f00f fdee 	bl	80147dc <HAL_PCDEx_LPM_Callback>
 8004c00:	e002      	b.n	8004c08 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f00f fc12 	bl	801442c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f006 f9b7 	bl	800af90 <USB_ReadInterrupts>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2c:	d112      	bne.n	8004c54 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d102      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f00f fbce 	bl	80143e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c52:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f006 f999 	bl	800af90 <USB_ReadInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c68:	d121      	bne.n	8004cae <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004c78:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f00f fd9b 	bl	80147dc <HAL_PCDEx_LPM_Callback>
 8004ca6:	e002      	b.n	8004cae <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f00f fb99 	bl	80143e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f006 f96c 	bl	800af90 <USB_ReadInterrupts>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc2:	f040 80c7 	bne.w	8004e54 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2110      	movs	r1, #16
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f005 fa3f 	bl	800a164 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cea:	e056      	b.n	8004d9a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cfe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d1e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	3301      	adds	r3, #1
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3a3      	bcc.n	8004cec <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004db6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d016      	beq.n	8004dee <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd0:	f043 030b 	orr.w	r3, r3, #11
 8004dd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de6:	f043 030b 	orr.w	r3, r3, #11
 8004dea:	6453      	str	r3, [r2, #68]	; 0x44
 8004dec:	e015      	b.n	8004e1a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f242 032b 	movw	r3, #8235	; 0x202b
 8004e02:	4313      	orrs	r3, r2
 8004e04:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e14:	f043 030b 	orr.w	r3, r3, #11
 8004e18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f006 f96c 	bl	800b11c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f006 f899 	bl	800af90 <USB_ReadInterrupts>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e68:	d124      	bne.n	8004eb4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f006 f930 	bl	800b0d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f005 f9d4 	bl	800a226 <USB_GetDevSpeed>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681c      	ldr	r4, [r3, #0]
 8004e8a:	f001 f999 	bl	80061c0 <HAL_RCC_GetHCLKFreq>
 8004e8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f004 ff07 	bl	8009cac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f00f fa75 	bl	801438e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f006 f869 	bl	800af90 <USB_ReadInterrupts>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d10a      	bne.n	8004ede <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f00f fa52 	bl	8014372 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f002 0208 	and.w	r2, r2, #8
 8004edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f006 f854 	bl	800af90 <USB_ReadInterrupts>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	d10f      	bne.n	8004f14 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f00f fab4 	bl	801446c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f006 f839 	bl	800af90 <USB_ReadInterrupts>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f28:	d10f      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f00f fa87 	bl	8014448 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f006 f81e 	bl	800af90 <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5e:	d10a      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f00f fa95 	bl	8014490 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f006 f808 	bl	800af90 <USB_ReadInterrupts>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d115      	bne.n	8004fb6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f00f fa85 	bl	80144ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	e000      	b.n	8004fb6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004fb4:	bf00      	nop
    }
  }
}
 8004fb6:	3734      	adds	r7, #52	; 0x34
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd90      	pop	{r4, r7, pc}

08004fbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_PCD_SetAddress+0x1a>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e013      	b.n	8004ffe <HAL_PCD_SetAddress+0x42>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f005 ff78 	bl	800aee4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	4608      	mov	r0, r1
 8005010:	4611      	mov	r1, r2
 8005012:	461a      	mov	r2, r3
 8005014:	4603      	mov	r3, r0
 8005016:	70fb      	strb	r3, [r7, #3]
 8005018:	460b      	mov	r3, r1
 800501a:	803b      	strh	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005028:	2b00      	cmp	r3, #0
 800502a:	da0f      	bge.n	800504c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	3338      	adds	r3, #56	; 0x38
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	3304      	adds	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	705a      	strb	r2, [r3, #1]
 800504a:	e00f      	b.n	800506c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	f003 020f 	and.w	r2, r3, #15
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	3304      	adds	r3, #4
 8005064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005078:	883a      	ldrh	r2, [r7, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	78ba      	ldrb	r2, [r7, #2]
 8005082:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005096:	78bb      	ldrb	r3, [r7, #2]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d102      	bne.n	80050a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_PCD_EP_Open+0xaa>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e00e      	b.n	80050ce <HAL_PCD_EP_Open+0xc8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	4618      	mov	r0, r3
 80050c0:	f005 f8d6 	bl	800a270 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80050cc:	7afb      	ldrb	r3, [r7, #11]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	460b      	mov	r3, r1
 80050e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da0f      	bge.n	800510a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	4613      	mov	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	3338      	adds	r3, #56	; 0x38
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	3304      	adds	r3, #4
 8005100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	705a      	strb	r2, [r3, #1]
 8005108:	e00f      	b.n	800512a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	3304      	adds	r3, #4
 8005122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_PCD_EP_Close+0x6e>
 8005140:	2302      	movs	r3, #2
 8005142:	e00e      	b.n	8005162 <HAL_PCD_EP_Close+0x8c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	4618      	mov	r0, r3
 8005154:	f005 f914 	bl	800a380 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	460b      	mov	r3, r1
 8005178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800517a:	7afb      	ldrb	r3, [r7, #11]
 800517c:	f003 020f 	and.w	r2, r3, #15
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	3304      	adds	r3, #4
 8005192:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2200      	movs	r2, #0
 80051a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2200      	movs	r2, #0
 80051aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d102      	bne.n	80051c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	6979      	ldr	r1, [r7, #20]
 80051de:	f005 fbf7 	bl	800a9d0 <USB_EP0StartXfer>
 80051e2:	e008      	b.n	80051f6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	f005 f9a1 	bl	800a538 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	f003 020f 	and.w	r2, r3, #15
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	460b      	mov	r3, r1
 800523e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005240:	7afb      	ldrb	r3, [r7, #11]
 8005242:	f003 020f 	and.w	r2, r3, #15
 8005246:	4613      	mov	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	3338      	adds	r3, #56	; 0x38
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	3304      	adds	r3, #4
 8005256:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2201      	movs	r2, #1
 800526e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	b2da      	uxtb	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d102      	bne.n	800528a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800528a:	7afb      	ldrb	r3, [r7, #11]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	6979      	ldr	r1, [r7, #20]
 80052a2:	f005 fb95 	bl	800a9d0 <USB_EP0StartXfer>
 80052a6:	e008      	b.n	80052ba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	f005 f93f 	bl	800a538 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 020f 	and.w	r2, r3, #15
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d901      	bls.n	80052e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e050      	b.n	8005384 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da0f      	bge.n	800530a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	f003 020f 	and.w	r2, r3, #15
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	3338      	adds	r3, #56	; 0x38
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	3304      	adds	r3, #4
 8005300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	705a      	strb	r2, [r3, #1]
 8005308:	e00d      	b.n	8005326 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	3304      	adds	r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	b2da      	uxtb	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_PCD_EP_SetStall+0x82>
 8005342:	2302      	movs	r3, #2
 8005344:	e01e      	b.n	8005384 <HAL_PCD_EP_SetStall+0xc0>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	4618      	mov	r0, r3
 8005356:	f005 fcf1 	bl	800ad3c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	b2d9      	uxtb	r1, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005374:	461a      	mov	r2, r3
 8005376:	f005 fed1 	bl	800b11c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	f003 020f 	and.w	r2, r3, #15
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d901      	bls.n	80053aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e042      	b.n	8005430 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da0f      	bge.n	80053d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	f003 020f 	and.w	r2, r3, #15
 80053b8:	4613      	mov	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	3338      	adds	r3, #56	; 0x38
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	3304      	adds	r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	705a      	strb	r2, [r3, #1]
 80053d0:	e00f      	b.n	80053f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	f003 020f 	and.w	r2, r3, #15
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_PCD_EP_ClrStall+0x86>
 800540e:	2302      	movs	r3, #2
 8005410:	e00e      	b.n	8005430 <HAL_PCD_EP_ClrStall+0xa4>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	4618      	mov	r0, r3
 8005422:	f005 fcf9 	bl	800ae18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af02      	add	r7, sp, #8
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	4613      	mov	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	3338      	adds	r3, #56	; 0x38
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	4413      	add	r3, r2
 800545c:	3304      	adds	r3, #4
 800545e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	699a      	ldr	r2, [r3, #24]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	429a      	cmp	r2, r3
 800546a:	d901      	bls.n	8005470 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e06c      	b.n	800554a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	429a      	cmp	r2, r3
 8005484:	d902      	bls.n	800548c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3303      	adds	r3, #3
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005494:	e02b      	b.n	80054ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d902      	bls.n	80054b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3303      	adds	r3, #3
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68d9      	ldr	r1, [r3, #12]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4603      	mov	r3, r0
 80054d0:	6978      	ldr	r0, [r7, #20]
 80054d2:	f005 fbd5 	bl	800ac80 <USB_WritePacket>

    ep->xfer_buff  += len;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	441a      	add	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	429a      	cmp	r2, r3
 8005502:	d809      	bhi.n	8005518 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800550c:	429a      	cmp	r2, r3
 800550e:	d203      	bcs.n	8005518 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1be      	bne.n	8005496 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	d811      	bhi.n	8005548 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	2201      	movs	r2, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	43db      	mvns	r3, r3
 800553e:	6939      	ldr	r1, [r7, #16]
 8005540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005544:	4013      	ands	r3, r2
 8005546:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	333c      	adds	r3, #60	; 0x3c
 800556c:	3304      	adds	r3, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b01      	cmp	r3, #1
 8005588:	f040 80a0 	bne.w	80056cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d015      	beq.n	80055c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a72      	ldr	r2, [pc, #456]	; (8005764 <PCD_EP_OutXfrComplete_int+0x210>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f240 80dd 	bls.w	800575a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80d7 	beq.w	800575a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055be:	6093      	str	r3, [r2, #8]
 80055c0:	e0cb      	b.n	800575a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	461a      	mov	r2, r3
 80055da:	2320      	movs	r3, #32
 80055dc:	6093      	str	r3, [r2, #8]
 80055de:	e0bc      	b.n	800575a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f040 80b7 	bne.w	800575a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4a5d      	ldr	r2, [pc, #372]	; (8005764 <PCD_EP_OutXfrComplete_int+0x210>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d90f      	bls.n	8005614 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005610:	6093      	str	r3, [r2, #8]
 8005612:	e0a2      	b.n	800575a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005626:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	0159      	lsls	r1, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	440b      	add	r3, r1
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800563a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4403      	add	r3, r0
 800564a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800564e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4403      	add	r3, r0
 8005672:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4419      	add	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4403      	add	r3, r0
 8005688:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800568c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d114      	bne.n	80056be <PCD_EP_OutXfrComplete_int+0x16a>
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d108      	bne.n	80056be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056b6:	461a      	mov	r2, r3
 80056b8:	2101      	movs	r1, #1
 80056ba:	f005 fd2f 	bl	800b11c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f00e fe1f 	bl	8014308 <HAL_PCD_DataOutStageCallback>
 80056ca:	e046      	b.n	800575a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4a26      	ldr	r2, [pc, #152]	; (8005768 <PCD_EP_OutXfrComplete_int+0x214>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d124      	bne.n	800571e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	461a      	mov	r2, r3
 80056ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f0:	6093      	str	r3, [r2, #8]
 80056f2:	e032      	b.n	800575a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	461a      	mov	r2, r3
 800570c:	2320      	movs	r3, #32
 800570e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f00e fdf6 	bl	8014308 <HAL_PCD_DataOutStageCallback>
 800571c:	e01d      	b.n	800575a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d114      	bne.n	800574e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d108      	bne.n	800574e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005746:	461a      	mov	r2, r3
 8005748:	2100      	movs	r1, #0
 800574a:	f005 fce7 	bl	800b11c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f00e fdd7 	bl	8014308 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	4f54300a 	.word	0x4f54300a
 8005768:	4f54310a 	.word	0x4f54310a

0800576c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	333c      	adds	r3, #60	; 0x3c
 8005784:	3304      	adds	r3, #4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d90e      	bls.n	80057c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d009      	beq.n	80057c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	461a      	mov	r2, r3
 80057ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f00e fd8f 	bl	80142e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d90c      	bls.n	80057e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d108      	bne.n	80057e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057e0:	461a      	mov	r2, r3
 80057e2:	2101      	movs	r1, #1
 80057e4:	f005 fc9a 	bl	800b11c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	4f54300a 	.word	0x4f54300a

080057f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
 8005804:	4613      	mov	r3, r2
 8005806:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005816:	883b      	ldrh	r3, [r7, #0]
 8005818:	0419      	lsls	r1, r3, #16
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	430a      	orrs	r2, r1
 8005822:	629a      	str	r2, [r3, #40]	; 0x28
 8005824:	e028      	b.n	8005878 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005834:	2300      	movs	r3, #0
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	e00d      	b.n	8005856 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	3340      	adds	r3, #64	; 0x40
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4413      	add	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	3301      	adds	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	7bfa      	ldrb	r2, [r7, #15]
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	3b01      	subs	r3, #1
 800585c:	429a      	cmp	r2, r3
 800585e:	d3ec      	bcc.n	800583a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005860:	883b      	ldrh	r3, [r7, #0]
 8005862:	0418      	lsls	r0, r3, #16
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6819      	ldr	r1, [r3, #0]
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	3b01      	subs	r3, #1
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	4302      	orrs	r2, r0
 8005870:	3340      	adds	r3, #64	; 0x40
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	460b      	mov	r3, r1
 8005890:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_PCDEx_ActivateLPM+0x44>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	10000003 	.word	0x10000003

080058f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80058f8:	2300      	movs	r3, #0
 80058fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e291      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8087 	beq.w	8005a22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005914:	4b96      	ldr	r3, [pc, #600]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b04      	cmp	r3, #4
 800591e:	d00c      	beq.n	800593a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005920:	4b93      	ldr	r3, [pc, #588]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b08      	cmp	r3, #8
 800592a:	d112      	bne.n	8005952 <HAL_RCC_OscConfig+0x62>
 800592c:	4b90      	ldr	r3, [pc, #576]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005938:	d10b      	bne.n	8005952 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593a:	4b8d      	ldr	r3, [pc, #564]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d06c      	beq.n	8005a20 <HAL_RCC_OscConfig+0x130>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d168      	bne.n	8005a20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e26b      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595a:	d106      	bne.n	800596a <HAL_RCC_OscConfig+0x7a>
 800595c:	4b84      	ldr	r3, [pc, #528]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a83      	ldr	r2, [pc, #524]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e02e      	b.n	80059c8 <HAL_RCC_OscConfig+0xd8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x9c>
 8005972:	4b7f      	ldr	r3, [pc, #508]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7e      	ldr	r2, [pc, #504]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b7c      	ldr	r3, [pc, #496]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a7b      	ldr	r2, [pc, #492]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e01d      	b.n	80059c8 <HAL_RCC_OscConfig+0xd8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0xc0>
 8005996:	4b76      	ldr	r3, [pc, #472]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a75      	ldr	r2, [pc, #468]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b73      	ldr	r3, [pc, #460]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a72      	ldr	r2, [pc, #456]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e00b      	b.n	80059c8 <HAL_RCC_OscConfig+0xd8>
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6e      	ldr	r2, [pc, #440]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a6b      	ldr	r2, [pc, #428]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d013      	beq.n	80059f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fd ff3e 	bl	8003850 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d8:	f7fd ff3a 	bl	8003850 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e21f      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b61      	ldr	r3, [pc, #388]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0xe8>
 80059f6:	e014      	b.n	8005a22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fd ff2a 	bl	8003850 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a00:	f7fd ff26 	bl	8003850 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	; 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e20b      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	4b57      	ldr	r3, [pc, #348]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x110>
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d069      	beq.n	8005b02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a2e:	4b50      	ldr	r3, [pc, #320]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a3a:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d11c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x190>
 8005a46:	4b4a      	ldr	r3, [pc, #296]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	4b47      	ldr	r3, [pc, #284]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCC_OscConfig+0x17a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e1df      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b41      	ldr	r3, [pc, #260]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	493d      	ldr	r1, [pc, #244]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	e040      	b.n	8005b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d023      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a88:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a38      	ldr	r2, [pc, #224]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fd fedc 	bl	8003850 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9c:	f7fd fed8 	bl	8003850 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e1bd      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aae:	4b30      	ldr	r3, [pc, #192]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aba:	4b2d      	ldr	r3, [pc, #180]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4929      	ldr	r1, [pc, #164]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
 8005ace:	e018      	b.n	8005b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a26      	ldr	r2, [pc, #152]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd feb8 	bl	8003850 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae4:	f7fd feb4 	bl	8003850 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e199      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d038      	beq.n	8005b80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d019      	beq.n	8005b4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b16:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1a:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b22:	f7fd fe95 	bl	8003850 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2a:	f7fd fe91 	bl	8003850 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e176      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x23a>
 8005b48:	e01a      	b.n	8005b80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b4a:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4e:	4a08      	ldr	r2, [pc, #32]	; (8005b70 <HAL_RCC_OscConfig+0x280>)
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b56:	f7fd fe7b 	bl	8003850 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5e:	f7fd fe77 	bl	8003850 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d903      	bls.n	8005b74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e15c      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
 8005b70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b74:	4b91      	ldr	r3, [pc, #580]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ee      	bne.n	8005b5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80a4 	beq.w	8005cd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8e:	4b8b      	ldr	r3, [pc, #556]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10d      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9a:	4b88      	ldr	r3, [pc, #544]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a87      	ldr	r2, [pc, #540]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba6:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bb6:	4b82      	ldr	r3, [pc, #520]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d118      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005bc2:	4b7f      	ldr	r3, [pc, #508]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7e      	ldr	r2, [pc, #504]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bce:	f7fd fe3f 	bl	8003850 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd6:	f7fd fe3b 	bl	8003850 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b64      	cmp	r3, #100	; 0x64
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e120      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be8:	4b75      	ldr	r3, [pc, #468]	; (8005dc0 <HAL_RCC_OscConfig+0x4d0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x31a>
 8005bfc:	4b6f      	ldr	r3, [pc, #444]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c00:	4a6e      	ldr	r2, [pc, #440]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6713      	str	r3, [r2, #112]	; 0x70
 8005c08:	e02d      	b.n	8005c66 <HAL_RCC_OscConfig+0x376>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x33c>
 8005c12:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a69      	ldr	r2, [pc, #420]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1e:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	4a66      	ldr	r2, [pc, #408]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c24:	f023 0304 	bic.w	r3, r3, #4
 8005c28:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2a:	e01c      	b.n	8005c66 <HAL_RCC_OscConfig+0x376>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d10c      	bne.n	8005c4e <HAL_RCC_OscConfig+0x35e>
 8005c34:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	4a60      	ldr	r2, [pc, #384]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c3a:	f043 0304 	orr.w	r3, r3, #4
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c40:	4b5e      	ldr	r3, [pc, #376]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	4a5d      	ldr	r2, [pc, #372]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4c:	e00b      	b.n	8005c66 <HAL_RCC_OscConfig+0x376>
 8005c4e:	4b5b      	ldr	r3, [pc, #364]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	4a5a      	ldr	r2, [pc, #360]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5a:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4a57      	ldr	r2, [pc, #348]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c60:	f023 0304 	bic.w	r3, r3, #4
 8005c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d015      	beq.n	8005c9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6e:	f7fd fdef 	bl	8003850 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c74:	e00a      	b.n	8005c8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7fd fdeb 	bl	8003850 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e0ce      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8c:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ee      	beq.n	8005c76 <HAL_RCC_OscConfig+0x386>
 8005c98:	e014      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fd fdd9 	bl	8003850 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca2:	f7fd fdd5 	bl	8003850 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0b8      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb8:	4b40      	ldr	r3, [pc, #256]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1ee      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d105      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cca:	4b3c      	ldr	r3, [pc, #240]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	4a3b      	ldr	r2, [pc, #236]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 80a4 	beq.w	8005e28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 030c 	and.w	r3, r3, #12
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d06b      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d149      	bne.n	8005d88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d00:	f7fd fda6 	bl	8003850 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d08:	f7fd fda2 	bl	8003850 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e087      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1a:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	061b      	lsls	r3, r3, #24
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fd fd76 	bl	8003850 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fd fd72 	bl	8003850 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e057      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x478>
 8005d86:	e04f      	b.n	8005e28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fd fd5c 	bl	8003850 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fd fd58 	bl	8003850 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e03d      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dae:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_RCC_OscConfig+0x4cc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x4ac>
 8005dba:	e035      	b.n	8005e28 <HAL_RCC_OscConfig+0x538>
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <HAL_RCC_OscConfig+0x544>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d121      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d11a      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005df4:	4013      	ands	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d111      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d107      	bne.n	8005e24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d001      	beq.n	8005e28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800

08005e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0d0      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e50:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d910      	bls.n	8005e80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5e:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 020f 	bic.w	r2, r3, #15
 8005e66:	4965      	ldr	r1, [pc, #404]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b63      	ldr	r3, [pc, #396]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0b8      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d020      	beq.n	8005ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e98:	4b59      	ldr	r3, [pc, #356]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4a58      	ldr	r2, [pc, #352]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ea2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb0:	4b53      	ldr	r3, [pc, #332]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a52      	ldr	r2, [pc, #328]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ebc:	4b50      	ldr	r3, [pc, #320]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	494d      	ldr	r1, [pc, #308]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d040      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d107      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d115      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e07f      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efa:	4b41      	ldr	r3, [pc, #260]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e073      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0a:	4b3d      	ldr	r3, [pc, #244]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e06b      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f1a:	4b39      	ldr	r3, [pc, #228]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f023 0203 	bic.w	r2, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4936      	ldr	r1, [pc, #216]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2c:	f7fd fc90 	bl	8003850 <HAL_GetTick>
 8005f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f34:	f7fd fc8c 	bl	8003850 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e053      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4a:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 020c 	and.w	r2, r3, #12
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d1eb      	bne.n	8005f34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b27      	ldr	r3, [pc, #156]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d210      	bcs.n	8005f8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 020f 	bic.w	r2, r3, #15
 8005f72:	4922      	ldr	r1, [pc, #136]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7a:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <HAL_RCC_ClockConfig+0x1c4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e032      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4916      	ldr	r1, [pc, #88]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	490e      	ldr	r1, [pc, #56]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fca:	f000 f821 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8005fce:	4601      	mov	r1, r0
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <HAL_RCC_ClockConfig+0x1cc>)
 8005fdc:	5cd3      	ldrb	r3, [r2, r3]
 8005fde:	fa21 f303 	lsr.w	r3, r1, r3
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <HAL_RCC_ClockConfig+0x1d0>)
 8005fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <HAL_RCC_ClockConfig+0x1d4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fb fc90 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40023c00 	.word	0x40023c00
 8006000:	40023800 	.word	0x40023800
 8006004:	08016954 	.word	0x08016954
 8006008:	20000000 	.word	0x20000000
 800600c:	20000004 	.word	0x20000004

08006010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	2300      	movs	r3, #0
 8006020:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006026:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
 800602e:	2b04      	cmp	r3, #4
 8006030:	d007      	beq.n	8006042 <HAL_RCC_GetSysClockFreq+0x32>
 8006032:	2b08      	cmp	r3, #8
 8006034:	d008      	beq.n	8006048 <HAL_RCC_GetSysClockFreq+0x38>
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 80b4 	bne.w	80061a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800603c:	4b5e      	ldr	r3, [pc, #376]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800603e:	60bb      	str	r3, [r7, #8]
      break;
 8006040:	e0b3      	b.n	80061aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006042:	4b5e      	ldr	r3, [pc, #376]	; (80061bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006044:	60bb      	str	r3, [r7, #8]
      break;
 8006046:	e0b0      	b.n	80061aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006048:	4b5a      	ldr	r3, [pc, #360]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006050:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006052:	4b58      	ldr	r3, [pc, #352]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d04a      	beq.n	80060f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800605e:	4b55      	ldr	r3, [pc, #340]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	099b      	lsrs	r3, r3, #6
 8006064:	f04f 0400 	mov.w	r4, #0
 8006068:	f240 11ff 	movw	r1, #511	; 0x1ff
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	ea03 0501 	and.w	r5, r3, r1
 8006074:	ea04 0602 	and.w	r6, r4, r2
 8006078:	4629      	mov	r1, r5
 800607a:	4632      	mov	r2, r6
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	f04f 0400 	mov.w	r4, #0
 8006084:	0154      	lsls	r4, r2, #5
 8006086:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800608a:	014b      	lsls	r3, r1, #5
 800608c:	4619      	mov	r1, r3
 800608e:	4622      	mov	r2, r4
 8006090:	1b49      	subs	r1, r1, r5
 8006092:	eb62 0206 	sbc.w	r2, r2, r6
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	f04f 0400 	mov.w	r4, #0
 800609e:	0194      	lsls	r4, r2, #6
 80060a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060a4:	018b      	lsls	r3, r1, #6
 80060a6:	1a5b      	subs	r3, r3, r1
 80060a8:	eb64 0402 	sbc.w	r4, r4, r2
 80060ac:	f04f 0100 	mov.w	r1, #0
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	00e2      	lsls	r2, r4, #3
 80060b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060ba:	00d9      	lsls	r1, r3, #3
 80060bc:	460b      	mov	r3, r1
 80060be:	4614      	mov	r4, r2
 80060c0:	195b      	adds	r3, r3, r5
 80060c2:	eb44 0406 	adc.w	r4, r4, r6
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	0262      	lsls	r2, r4, #9
 80060d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80060d4:	0259      	lsls	r1, r3, #9
 80060d6:	460b      	mov	r3, r1
 80060d8:	4614      	mov	r4, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	4621      	mov	r1, r4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f04f 0400 	mov.w	r4, #0
 80060e4:	461a      	mov	r2, r3
 80060e6:	4623      	mov	r3, r4
 80060e8:	f7fa fdc6 	bl	8000c78 <__aeabi_uldivmod>
 80060ec:	4603      	mov	r3, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e049      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f4:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	099b      	lsrs	r3, r3, #6
 80060fa:	f04f 0400 	mov.w	r4, #0
 80060fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	ea03 0501 	and.w	r5, r3, r1
 800610a:	ea04 0602 	and.w	r6, r4, r2
 800610e:	4629      	mov	r1, r5
 8006110:	4632      	mov	r2, r6
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	f04f 0400 	mov.w	r4, #0
 800611a:	0154      	lsls	r4, r2, #5
 800611c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006120:	014b      	lsls	r3, r1, #5
 8006122:	4619      	mov	r1, r3
 8006124:	4622      	mov	r2, r4
 8006126:	1b49      	subs	r1, r1, r5
 8006128:	eb62 0206 	sbc.w	r2, r2, r6
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	f04f 0400 	mov.w	r4, #0
 8006134:	0194      	lsls	r4, r2, #6
 8006136:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800613a:	018b      	lsls	r3, r1, #6
 800613c:	1a5b      	subs	r3, r3, r1
 800613e:	eb64 0402 	sbc.w	r4, r4, r2
 8006142:	f04f 0100 	mov.w	r1, #0
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	00e2      	lsls	r2, r4, #3
 800614c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006150:	00d9      	lsls	r1, r3, #3
 8006152:	460b      	mov	r3, r1
 8006154:	4614      	mov	r4, r2
 8006156:	195b      	adds	r3, r3, r5
 8006158:	eb44 0406 	adc.w	r4, r4, r6
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	02a2      	lsls	r2, r4, #10
 8006166:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800616a:	0299      	lsls	r1, r3, #10
 800616c:	460b      	mov	r3, r1
 800616e:	4614      	mov	r4, r2
 8006170:	4618      	mov	r0, r3
 8006172:	4621      	mov	r1, r4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f04f 0400 	mov.w	r4, #0
 800617a:	461a      	mov	r2, r3
 800617c:	4623      	mov	r3, r4
 800617e:	f7fa fd7b 	bl	8000c78 <__aeabi_uldivmod>
 8006182:	4603      	mov	r3, r0
 8006184:	460c      	mov	r4, r1
 8006186:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	3301      	adds	r3, #1
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a0:	60bb      	str	r3, [r7, #8]
      break;
 80061a2:	e002      	b.n	80061aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80061a6:	60bb      	str	r3, [r7, #8]
      break;
 80061a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061aa:	68bb      	ldr	r3, [r7, #8]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b4:	40023800 	.word	0x40023800
 80061b8:	00f42400 	.word	0x00f42400
 80061bc:	007a1200 	.word	0x007a1200

080061c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061c4:	4b03      	ldr	r3, [pc, #12]	; (80061d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000000 	.word	0x20000000

080061d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061dc:	f7ff fff0 	bl	80061c0 <HAL_RCC_GetHCLKFreq>
 80061e0:	4601      	mov	r1, r0
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	0b5b      	lsrs	r3, r3, #13
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	4a03      	ldr	r2, [pc, #12]	; (80061fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ee:	5cd3      	ldrb	r3, [r2, r3]
 80061f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40023800 	.word	0x40023800
 80061fc:	08016964 	.word	0x08016964

08006200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	220f      	movs	r2, #15
 800620e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0203 	and.w	r2, r3, #3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006228:	4b0c      	ldr	r3, [pc, #48]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <HAL_RCC_GetClockConfig+0x5c>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	08db      	lsrs	r3, r3, #3
 800623a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006242:	4b07      	ldr	r3, [pc, #28]	; (8006260 <HAL_RCC_GetClockConfig+0x60>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 020f 	and.w	r2, r3, #15
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	601a      	str	r2, [r3, #0]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800
 8006260:	40023c00 	.word	0x40023c00

08006264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800628c:	4b69      	ldr	r3, [pc, #420]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4a68      	ldr	r2, [pc, #416]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006292:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006296:	6093      	str	r3, [r2, #8]
 8006298:	4b66      	ldr	r3, [pc, #408]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a0:	4964      	ldr	r1, [pc, #400]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d017      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062be:	4b5d      	ldr	r3, [pc, #372]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062cc:	4959      	ldr	r1, [pc, #356]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062dc:	d101      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d017      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062fa:	4b4e      	ldr	r3, [pc, #312]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006300:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	494a      	ldr	r1, [pc, #296]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006318:	d101      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800631a:	2301      	movs	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006326:	2301      	movs	r3, #1
 8006328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006336:	2301      	movs	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 808b 	beq.w	800645e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006348:	4b3a      	ldr	r3, [pc, #232]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	4a39      	ldr	r2, [pc, #228]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800634e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006352:	6413      	str	r3, [r2, #64]	; 0x40
 8006354:	4b37      	ldr	r3, [pc, #220]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006360:	4b35      	ldr	r3, [pc, #212]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a34      	ldr	r2, [pc, #208]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636c:	f7fd fa70 	bl	8003850 <HAL_GetTick>
 8006370:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006374:	f7fd fa6c 	bl	8003850 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e31e      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006386:	4b2c      	ldr	r3, [pc, #176]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f0      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006392:	4b28      	ldr	r3, [pc, #160]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d035      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d02e      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b0:	4b20      	ldr	r3, [pc, #128]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063ba:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063c6:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80063d2:	4a18      	ldr	r2, [pc, #96]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063d8:	4b16      	ldr	r3, [pc, #88]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d114      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fd fa34 	bl	8003850 <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ea:	e00a      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fd fa30 	bl	8003850 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e2e0      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0ee      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800641a:	d111      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006428:	4b04      	ldr	r3, [pc, #16]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800642a:	400b      	ands	r3, r1
 800642c:	4901      	ldr	r1, [pc, #4]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800642e:	4313      	orrs	r3, r2
 8006430:	608b      	str	r3, [r1, #8]
 8006432:	e00b      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006434:	40023800 	.word	0x40023800
 8006438:	40007000 	.word	0x40007000
 800643c:	0ffffcff 	.word	0x0ffffcff
 8006440:	4bac      	ldr	r3, [pc, #688]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	4aab      	ldr	r2, [pc, #684]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006446:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800644a:	6093      	str	r3, [r2, #8]
 800644c:	4ba9      	ldr	r3, [pc, #676]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800644e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006458:	49a6      	ldr	r1, [pc, #664]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800645a:	4313      	orrs	r3, r2
 800645c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b00      	cmp	r3, #0
 8006468:	d010      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800646a:	4ba2      	ldr	r3, [pc, #648]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800646c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006470:	4aa0      	ldr	r2, [pc, #640]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006476:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800647a:	4b9e      	ldr	r3, [pc, #632]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800647c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	499b      	ldr	r1, [pc, #620]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006498:	4b96      	ldr	r3, [pc, #600]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a6:	4993      	ldr	r1, [pc, #588]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064ba:	4b8e      	ldr	r3, [pc, #568]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	498a      	ldr	r1, [pc, #552]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064dc:	4b85      	ldr	r3, [pc, #532]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ea:	4982      	ldr	r1, [pc, #520]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064fe:	4b7d      	ldr	r3, [pc, #500]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006504:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	4979      	ldr	r1, [pc, #484]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006520:	4b74      	ldr	r3, [pc, #464]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006526:	f023 0203 	bic.w	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	4971      	ldr	r1, [pc, #452]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006542:	4b6c      	ldr	r3, [pc, #432]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006548:	f023 020c 	bic.w	r2, r3, #12
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006550:	4968      	ldr	r1, [pc, #416]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006564:	4b63      	ldr	r3, [pc, #396]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	4960      	ldr	r1, [pc, #384]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006586:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006594:	4957      	ldr	r1, [pc, #348]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065a8:	4b52      	ldr	r3, [pc, #328]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	494f      	ldr	r1, [pc, #316]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80065ca:	4b4a      	ldr	r3, [pc, #296]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d8:	4946      	ldr	r1, [pc, #280]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80065ec:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fa:	493e      	ldr	r1, [pc, #248]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800660e:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006614:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661c:	4935      	ldr	r1, [pc, #212]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006630:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800663e:	492d      	ldr	r1, [pc, #180]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006640:	4313      	orrs	r3, r2
 8006642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d011      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006652:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006660:	4924      	ldr	r1, [pc, #144]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800666c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006670:	d101      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006688:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006690:	4918      	ldr	r1, [pc, #96]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066a4:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b4:	490f      	ldr	r1, [pc, #60]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d005      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ca:	f040 80d8 	bne.w	800687e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066da:	f7fd f8b9 	bl	8003850 <HAL_GetTick>
 80066de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066e2:	f7fd f8b5 	bl	8003850 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b64      	cmp	r3, #100	; 0x64
 80066ee:	d903      	bls.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e167      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80066f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066f8:	4bad      	ldr	r3, [pc, #692]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ee      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d021      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11d      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006718:	4ba5      	ldr	r3, [pc, #660]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800671a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006726:	4ba2      	ldr	r3, [pc, #648]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800672c:	0e1b      	lsrs	r3, r3, #24
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	019a      	lsls	r2, r3, #6
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	041b      	lsls	r3, r3, #16
 800673e:	431a      	orrs	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	071b      	lsls	r3, r3, #28
 800674c:	4998      	ldr	r1, [pc, #608]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006772:	2b00      	cmp	r3, #0
 8006774:	d02e      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677e:	d129      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006780:	4b8b      	ldr	r3, [pc, #556]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006786:	0c1b      	lsrs	r3, r3, #16
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800678e:	4b88      	ldr	r3, [pc, #544]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006794:	0f1b      	lsrs	r3, r3, #28
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	019a      	lsls	r2, r3, #6
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	431a      	orrs	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	071b      	lsls	r3, r3, #28
 80067b4:	497e      	ldr	r1, [pc, #504]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067bc:	4b7c      	ldr	r3, [pc, #496]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c2:	f023 021f 	bic.w	r2, r3, #31
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4978      	ldr	r1, [pc, #480]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01d      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067e0:	4b73      	ldr	r3, [pc, #460]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e6:	0e1b      	lsrs	r3, r3, #24
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067ee:	4b70      	ldr	r3, [pc, #448]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80067f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f4:	0f1b      	lsrs	r3, r3, #28
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	019a      	lsls	r2, r3, #6
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	041b      	lsls	r3, r3, #16
 8006808:	431a      	orrs	r2, r3
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	061b      	lsls	r3, r3, #24
 800680e:	431a      	orrs	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	071b      	lsls	r3, r3, #28
 8006814:	4966      	ldr	r1, [pc, #408]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d011      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	019a      	lsls	r2, r3, #6
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	041b      	lsls	r3, r3, #16
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	061b      	lsls	r3, r3, #24
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	071b      	lsls	r3, r3, #28
 8006844:	495a      	ldr	r1, [pc, #360]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800684c:	4b58      	ldr	r3, [pc, #352]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a57      	ldr	r2, [pc, #348]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006858:	f7fc fffa 	bl	8003850 <HAL_GetTick>
 800685c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006860:	f7fc fff6 	bl	8003850 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	; 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e0a8      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006872:	4b4f      	ldr	r3, [pc, #316]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b01      	cmp	r3, #1
 8006882:	f040 809e 	bne.w	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006886:	4b4a      	ldr	r3, [pc, #296]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a49      	ldr	r2, [pc, #292]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800688c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006892:	f7fc ffdd 	bl	8003850 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006898:	e008      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800689a:	f7fc ffd9 	bl	8003850 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b64      	cmp	r3, #100	; 0x64
 80068a6:	d901      	bls.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e08b      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068ac:	4b40      	ldr	r3, [pc, #256]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b8:	d0ef      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02e      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d12a      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068e2:	4b33      	ldr	r3, [pc, #204]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	0c1b      	lsrs	r3, r3, #16
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068f0:	4b2f      	ldr	r3, [pc, #188]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	0f1b      	lsrs	r3, r3, #28
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	019a      	lsls	r2, r3, #6
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	061b      	lsls	r3, r3, #24
 8006910:	431a      	orrs	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	071b      	lsls	r3, r3, #28
 8006916:	4926      	ldr	r1, [pc, #152]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006918:	4313      	orrs	r3, r2
 800691a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006924:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	491f      	ldr	r1, [pc, #124]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d022      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694c:	d11d      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800694e:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006954:	0e1b      	lsrs	r3, r3, #24
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800695c:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	0f1b      	lsrs	r3, r3, #28
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	019a      	lsls	r2, r3, #6
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	431a      	orrs	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	061b      	lsls	r3, r3, #24
 800697c:	431a      	orrs	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	071b      	lsls	r3, r3, #28
 8006982:	490b      	ldr	r1, [pc, #44]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8006990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006996:	f7fc ff5b 	bl	8003850 <HAL_GetTick>
 800699a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800699c:	e00a      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800699e:	f7fc ff57 	bl	8003850 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b64      	cmp	r3, #100	; 0x64
 80069aa:	d903      	bls.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e009      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80069b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c0:	d1ed      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40023800 	.word	0x40023800

080069d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e022      	b.n	8006a28 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fa fda5 	bl	8001544 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2203      	movs	r2, #3
 80069fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f814 	bl	8006a30 <HAL_SD_InitCard>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e00a      	b.n	8006a28 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a30:	b5b0      	push	{r4, r5, r7, lr}
 8006a32:	b08e      	sub	sp, #56	; 0x38
 8006a34:	af04      	add	r7, sp, #16
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006a4c:	2376      	movs	r3, #118	; 0x76
 8006a4e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681d      	ldr	r5, [r3, #0]
 8006a54:	466c      	mov	r4, sp
 8006a56:	f107 0314 	add.w	r3, r7, #20
 8006a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a62:	f107 0308 	add.w	r3, r7, #8
 8006a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f002 fb5f 	bl	800912c <SDMMC_Init>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e03b      	b.n	8006af8 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 fb93 	bl	80091c0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 ffca 	bl	8007a44 <SD_PowerON>
 8006ab0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e013      	b.n	8006af8 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fee9 	bl	80078a8 <SD_InitCard>
 8006ad6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bdb0      	pop	{r4, r5, r7, pc}

08006b00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08c      	sub	sp, #48	; 0x30
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d107      	bne.n	8006b28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0cc      	b.n	8006cc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	f040 80c5 	bne.w	8006cc0 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	441a      	add	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d907      	bls.n	8006b5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e0b3      	b.n	8006cc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	4a53      	ldr	r2, [pc, #332]	; (8006ccc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	4a52      	ldr	r2, [pc, #328]	; (8006cd0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8006b88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2200      	movs	r2, #0
 8006b90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3380      	adds	r3, #128	; 0x80
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	025b      	lsls	r3, r3, #9
 8006ba4:	089b      	lsrs	r3, r3, #2
 8006ba6:	f7fd f811 	bl	8003bcc <HAL_DMA_Start_IT>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d017      	beq.n	8006be0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006bbe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a43      	ldr	r2, [pc, #268]	; (8006cd4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e070      	b.n	8006cc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d002      	beq.n	8006bfe <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	025b      	lsls	r3, r3, #9
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c06:	4618      	mov	r0, r3
 8006c08:	f002 fb6e 	bl	80092e8 <SDMMC_CmdBlockLength>
 8006c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00f      	beq.n	8006c34 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2e      	ldr	r2, [pc, #184]	; (8006cd4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	431a      	orrs	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e046      	b.n	8006cc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295
 8006c38:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	025b      	lsls	r3, r3, #9
 8006c3e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c40:	2390      	movs	r3, #144	; 0x90
 8006c42:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c44:	2302      	movs	r3, #2
 8006c46:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f107 0210 	add.w	r2, r7, #16
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f002 fb18 	bl	8009290 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d90a      	bls.n	8006c7c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2282      	movs	r2, #130	; 0x82
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c72:	4618      	mov	r0, r3
 8006c74:	f002 fb7c 	bl	8009370 <SDMMC_CmdReadMultiBlock>
 8006c78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c7a:	e009      	b.n	8006c90 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2281      	movs	r2, #129	; 0x81
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f002 fb4f 	bl	800932c <SDMMC_CmdReadSingleBlock>
 8006c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d012      	beq.n	8006cbc <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8006c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e002      	b.n	8006cc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e000      	b.n	8006cc2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
  }
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3730      	adds	r7, #48	; 0x30
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	080076b7 	.word	0x080076b7
 8006cd0:	08007729 	.word	0x08007729
 8006cd4:	004005ff 	.word	0x004005ff

08006cd8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08c      	sub	sp, #48	; 0x30
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0cf      	b.n	8006ea0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	f040 80c8 	bne.w	8006e9e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d907      	bls.n	8006d32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e0b6      	b.n	8006ea0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2203      	movs	r2, #3
 8006d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 021a 	orr.w	r2, r2, #26
 8006d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d56:	4a54      	ldr	r2, [pc, #336]	; (8006ea8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006d58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5e:	4a53      	ldr	r2, [pc, #332]	; (8006eac <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006d60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d66:	2200      	movs	r2, #0
 8006d68:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d002      	beq.n	8006d78 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	025b      	lsls	r3, r3, #9
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 fab1 	bl	80092e8 <SDMMC_CmdBlockLength>
 8006d86:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00f      	beq.n	8006dae <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a47      	ldr	r2, [pc, #284]	; (8006eb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e078      	b.n	8006ea0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d90a      	bls.n	8006dca <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	22a0      	movs	r2, #160	; 0xa0
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 fb19 	bl	80093f8 <SDMMC_CmdWriteMultiBlock>
 8006dc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006dc8:	e009      	b.n	8006dde <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2290      	movs	r2, #144	; 0x90
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f002 faec 	bl	80093b4 <SDMMC_CmdWriteSingleBlock>
 8006ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d012      	beq.n	8006e0a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a31      	ldr	r2, [pc, #196]	; (8006eb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	431a      	orrs	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e04a      	b.n	8006ea0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0208 	orr.w	r2, r2, #8
 8006e18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3380      	adds	r3, #128	; 0x80
 8006e26:	461a      	mov	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	025b      	lsls	r3, r3, #9
 8006e2c:	089b      	lsrs	r3, r3, #2
 8006e2e:	f7fc fecd 	bl	8003bcc <HAL_DMA_Start_IT>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01a      	beq.n	8006e6e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 021a 	bic.w	r2, r2, #26
 8006e46:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e018      	b.n	8006ea0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e72:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	025b      	lsls	r3, r3, #9
 8006e78:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e7a:	2390      	movs	r3, #144	; 0x90
 8006e7c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006e86:	2301      	movs	r3, #1
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f107 0210 	add.w	r2, r7, #16
 8006e92:	4611      	mov	r1, r2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f002 f9fb 	bl	8009290 <SDMMC_ConfigData>

      return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e000      	b.n	8006ea0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3730      	adds	r7, #48	; 0x30
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	0800768d 	.word	0x0800768d
 8006eac:	08007729 	.word	0x08007729
 8006eb0:	004005ff 	.word	0x004005ff

08006eb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_SD_IRQHandler+0x2e>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 ffc8 	bl	8007e70 <SD_Read_IT>
 8006ee0:	e153      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 808d 	beq.w	800700c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4ba3      	ldr	r3, [pc, #652]	; (8007194 <HAL_SD_IRQHandler+0x2e0>)
 8006f08:	400b      	ands	r3, r1
 8006f0a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d039      	beq.n	8006f9a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <HAL_SD_IRQHandler+0x86>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d011      	beq.n	8006f5e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f002 fa7c 	bl	800943c <SDMMC_CmdStopTransfer>
 8006f44:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d008      	beq.n	8006f5e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f921 	bl	80071a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <HAL_SD_IRQHandler+0xd6>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f004 f9fe 	bl	800b38c <HAL_SD_RxCpltCallback>
 8006f90:	e0fb      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f004 f9f0 	bl	800b378 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006f98:	e0f7      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80f2 	beq.w	800718a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d011      	beq.n	8006fd4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 fa41 	bl	800943c <SDMMC_CmdStopTransfer>
 8006fba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d008      	beq.n	8006fd4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f8e6 	bl	80071a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 80d5 	bne.w	800718a <HAL_SD_IRQHandler+0x2d6>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 80cf 	bne.w	800718a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0208 	bic.w	r2, r2, #8
 8006ffa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f004 f9b7 	bl	800b378 <HAL_SD_TxCpltCallback>
}
 800700a:	e0be      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d008      	beq.n	800702c <HAL_SD_IRQHandler+0x178>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 ff74 	bl	8007f12 <SD_Write_IT>
 800702a:	e0ae      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80a7 	beq.w	800718a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	f043 0202 	orr.w	r2, r3, #2
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	f043 0208 	orr.w	r2, r3, #8
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	f043 0210 	orr.w	r2, r3, #16
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80070ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80070bc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f002 f9ba 	bl	800943c <SDMMC_CmdStopTransfer>
 80070c8:	4602      	mov	r2, r0
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f857 	bl	80071a0 <HAL_SD_ErrorCallback>
}
 80070f2:	e04a      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d045      	beq.n	800718a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <HAL_SD_IRQHandler+0x25e>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d011      	beq.n	8007136 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	4a20      	ldr	r2, [pc, #128]	; (8007198 <HAL_SD_IRQHandler+0x2e4>)
 8007118:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	4618      	mov	r0, r3
 8007120:	f7fc fdb4 	bl	8003c8c <HAL_DMA_Abort_IT>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d02f      	beq.n	800718a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fb4c 	bl	80077cc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007134:	e029      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_SD_IRQHandler+0x296>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d011      	beq.n	800716e <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	4a13      	ldr	r2, [pc, #76]	; (800719c <HAL_SD_IRQHandler+0x2e8>)
 8007150:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	4618      	mov	r0, r3
 8007158:	f7fc fd98 	bl	8003c8c <HAL_DMA_Abort_IT>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d013      	beq.n	800718a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fb67 	bl	800783a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800716c:	e00d      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f004 f8ee 	bl	800b364 <HAL_SD_AbortCallback>
}
 8007188:	e7ff      	b.n	800718a <HAL_SD_IRQHandler+0x2d6>
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	ffff3ec5 	.word	0xffff3ec5
 8007198:	080077cd 	.word	0x080077cd
 800719c:	0800783b 	.word	0x0800783b

080071a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c2:	0f9b      	lsrs	r3, r3, #30
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ce:	0e9b      	lsrs	r3, r3, #26
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e0:	0e1b      	lsrs	r3, r3, #24
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f2:	0c1b      	lsrs	r3, r3, #16
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071fe:	0a1b      	lsrs	r3, r3, #8
 8007200:	b2da      	uxtb	r2, r3
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800720a:	b2da      	uxtb	r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007214:	0d1b      	lsrs	r3, r3, #20
 8007216:	b29a      	uxth	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	b2da      	uxtb	r2, r3
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007232:	0bdb      	lsrs	r3, r3, #15
 8007234:	b2db      	uxtb	r3, r3
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	b2da      	uxtb	r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007244:	0b9b      	lsrs	r3, r3, #14
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	b2da      	uxtb	r2, r3
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007256:	0b5b      	lsrs	r3, r3, #13
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007268:	0b1b      	lsrs	r3, r3, #12
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	b2da      	uxtb	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007280:	2b00      	cmp	r3, #0
 8007282:	d163      	bne.n	800734c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007288:	009a      	lsls	r2, r3, #2
 800728a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800728e:	4013      	ands	r3, r2
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007294:	0f92      	lsrs	r2, r2, #30
 8007296:	431a      	orrs	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a0:	0edb      	lsrs	r3, r3, #27
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b2:	0e1b      	lsrs	r3, r3, #24
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c4:	0d5b      	lsrs	r3, r3, #21
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d6:	0c9b      	lsrs	r3, r3, #18
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e8:	0bdb      	lsrs	r3, r3, #15
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	7e1b      	ldrb	r3, [r3, #24]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	3302      	adds	r3, #2
 800730c:	2201      	movs	r2, #1
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007316:	fb02 f203 	mul.w	r2, r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	7a1b      	ldrb	r3, [r3, #8]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	2201      	movs	r2, #1
 800732a:	409a      	lsls	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007338:	0a52      	lsrs	r2, r2, #9
 800733a:	fb02 f203 	mul.w	r2, r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007348:	661a      	str	r2, [r3, #96]	; 0x60
 800734a:	e031      	b.n	80073b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007350:	2b01      	cmp	r3, #1
 8007352:	d11d      	bne.n	8007390 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	431a      	orrs	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	3301      	adds	r3, #1
 8007370:	029a      	lsls	r2, r3, #10
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007384:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	661a      	str	r2, [r3, #96]	; 0x60
 800738e:	e00f      	b.n	80073b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a58      	ldr	r2, [pc, #352]	; (80074f8 <HAL_SD_GetCardCSD+0x344>)
 8007396:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e09d      	b.n	80074ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b4:	0b9b      	lsrs	r3, r3, #14
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c6:	09db      	lsrs	r3, r3, #7
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	0fdb      	lsrs	r3, r3, #31
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	0f5b      	lsrs	r3, r3, #29
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007406:	0e9b      	lsrs	r3, r3, #26
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f003 0307 	and.w	r3, r3, #7
 800740e:	b2da      	uxtb	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	0d9b      	lsrs	r3, r3, #22
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	b2da      	uxtb	r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742a:	0d5b      	lsrs	r3, r3, #21
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	b2da      	uxtb	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	0bdb      	lsrs	r3, r3, #15
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	0b9b      	lsrs	r3, r3, #14
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	0b5b      	lsrs	r3, r3, #13
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	b2da      	uxtb	r2, r3
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007496:	0b1b      	lsrs	r3, r3, #12
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	0a9b      	lsrs	r3, r3, #10
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	004005ff 	.word	0x004005ff

080074fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007554:	b5b0      	push	{r4, r5, r7, lr}
 8007556:	b08e      	sub	sp, #56	; 0x38
 8007558:	af04      	add	r7, sp, #16
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2203      	movs	r2, #3
 8007562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	2b03      	cmp	r3, #3
 800756c:	d02e      	beq.n	80075cc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007574:	d106      	bne.n	8007584 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
 8007582:	e029      	b.n	80075d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758a:	d10a      	bne.n	80075a2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb0f 	bl	8007bb0 <SD_WideBus_Enable>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
 80075a0:	e01a      	b.n	80075d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fb4c 	bl	8007c46 <SD_WideBus_Disable>
 80075ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38
 80075bc:	e00c      	b.n	80075d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
 80075ca:	e005      	b.n	80075d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a18      	ldr	r2, [pc, #96]	; (8007648 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e024      	b.n	800763e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681d      	ldr	r5, [r3, #0]
 800761a:	466c      	mov	r4, sp
 800761c:	f107 0318 	add.w	r3, r7, #24
 8007620:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007628:	f107 030c 	add.w	r3, r7, #12
 800762c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800762e:	4628      	mov	r0, r5
 8007630:	f001 fd7c 	bl	800912c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	; 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bdb0      	pop	{r4, r5, r7, pc}
 8007646:	bf00      	nop
 8007648:	004005ff 	.word	0x004005ff

0800764c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007658:	f107 030c 	add.w	r3, r7, #12
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa7e 	bl	8007b60 <SD_SendStatus>
 8007664:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	0a5b      	lsrs	r3, r3, #9
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007682:	693b      	ldr	r3, [r7, #16]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	2b82      	cmp	r3, #130	; 0x82
 80076ca:	d111      	bne.n	80076f0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 feb3 	bl	800943c <SDMMC_CmdStopTransfer>
 80076d6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fd58 	bl	80071a0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0208 	bic.w	r2, r2, #8
 80076fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f240 523a 	movw	r2, #1338	; 0x53a
 8007708:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f003 fe37 	bl	800b38c <HAL_SD_RxCpltCallback>
#endif
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fc fc54 	bl	8003fe4 <HAL_DMA_GetError>
 800773c:	4603      	mov	r3, r0
 800773e:	2b02      	cmp	r3, #2
 8007740:	d03e      	beq.n	80077c0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d002      	beq.n	800775e <SD_DMAError+0x36>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d12d      	bne.n	80077ba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a19      	ldr	r2, [pc, #100]	; (80077c8 <SD_DMAError+0xa0>)
 8007764:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007774:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007782:	6978      	ldr	r0, [r7, #20]
 8007784:	f7ff ff62 	bl	800764c <HAL_SD_GetCardState>
 8007788:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b06      	cmp	r3, #6
 800778e:	d002      	beq.n	8007796 <SD_DMAError+0x6e>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b05      	cmp	r3, #5
 8007794:	d10a      	bne.n	80077ac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fe4e 	bl	800943c <SDMMC_CmdStopTransfer>
 80077a0:	4602      	mov	r2, r0
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	431a      	orrs	r2, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80077ba:	6978      	ldr	r0, [r7, #20]
 80077bc:	f7ff fcf0 	bl	80071a0 <HAL_SD_ErrorCallback>
#endif
  }
}
 80077c0:	bf00      	nop
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	004005ff 	.word	0x004005ff

080077cc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f240 523a 	movw	r2, #1338	; 0x53a
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff ff31 	bl	800764c <HAL_SD_GetCardState>
 80077ea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b06      	cmp	r3, #6
 80077fe:	d002      	beq.n	8007806 <SD_DMATxAbort+0x3a>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b05      	cmp	r3, #5
 8007804:	d10a      	bne.n	800781c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f001 fe16 	bl	800943c <SDMMC_CmdStopTransfer>
 8007810:	4602      	mov	r2, r0
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	431a      	orrs	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f003 fd9d 	bl	800b364 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800782a:	e002      	b.n	8007832 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff fcb7 	bl	80071a0 <HAL_SD_ErrorCallback>
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007850:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff fefa 	bl	800764c <HAL_SD_GetCardState>
 8007858:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b06      	cmp	r3, #6
 800786c:	d002      	beq.n	8007874 <SD_DMARxAbort+0x3a>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b05      	cmp	r3, #5
 8007872:	d10a      	bne.n	800788a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fddf 	bl	800943c <SDMMC_CmdStopTransfer>
 800787e:	4602      	mov	r2, r0
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	431a      	orrs	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d103      	bne.n	800789a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f003 fd66 	bl	800b364 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007898:	e002      	b.n	80078a0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff fc80 	bl	80071a0 <HAL_SD_ErrorCallback>
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80078a8:	b5b0      	push	{r4, r5, r7, lr}
 80078aa:	b094      	sub	sp, #80	; 0x50
 80078ac:	af04      	add	r7, sp, #16
 80078ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80078b0:	2301      	movs	r3, #1
 80078b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fc90 	bl	80091de <SDMMC_GetPowerState>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d102      	bne.n	80078ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80078c8:	e0b7      	b.n	8007a3a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d02f      	beq.n	8007932 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 febb 	bl	8009652 <SDMMC_CmdSendCID>
 80078dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80078de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80078e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e6:	e0a8      	b.n	8007a3a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 fcbb 	bl	800926a <SDMMC_GetResponse>
 80078f4:	4602      	mov	r2, r0
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2104      	movs	r1, #4
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fcb2 	bl	800926a <SDMMC_GetResponse>
 8007906:	4602      	mov	r2, r0
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2108      	movs	r1, #8
 8007912:	4618      	mov	r0, r3
 8007914:	f001 fca9 	bl	800926a <SDMMC_GetResponse>
 8007918:	4602      	mov	r2, r0
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	210c      	movs	r1, #12
 8007924:	4618      	mov	r0, r3
 8007926:	f001 fca0 	bl	800926a <SDMMC_GetResponse>
 800792a:	4602      	mov	r2, r0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007936:	2b03      	cmp	r3, #3
 8007938:	d00d      	beq.n	8007956 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f107 020e 	add.w	r2, r7, #14
 8007942:	4611      	mov	r1, r2
 8007944:	4618      	mov	r0, r3
 8007946:	f001 fec1 	bl	80096cc <SDMMC_CmdSetRelAdd>
 800794a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800794c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <SD_InitCard+0xae>
    {
      return errorstate;
 8007952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007954:	e071      	b.n	8007a3a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795a:	2b03      	cmp	r3, #3
 800795c:	d036      	beq.n	80079cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800795e:	89fb      	ldrh	r3, [r7, #14]
 8007960:	461a      	mov	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	4619      	mov	r1, r3
 8007972:	4610      	mov	r0, r2
 8007974:	f001 fe8b 	bl	800968e <SDMMC_CmdSendCSD>
 8007978:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800797a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007982:	e05a      	b.n	8007a3a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f001 fc6d 	bl	800926a <SDMMC_GetResponse>
 8007990:	4602      	mov	r2, r0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2104      	movs	r1, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f001 fc64 	bl	800926a <SDMMC_GetResponse>
 80079a2:	4602      	mov	r2, r0
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2108      	movs	r1, #8
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 fc5b 	bl	800926a <SDMMC_GetResponse>
 80079b4:	4602      	mov	r2, r0
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	210c      	movs	r1, #12
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 fc52 	bl	800926a <SDMMC_GetResponse>
 80079c6:	4602      	mov	r2, r0
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2104      	movs	r1, #4
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fc49 	bl	800926a <SDMMC_GetResponse>
 80079d8:	4603      	mov	r3, r0
 80079da:	0d1a      	lsrs	r2, r3, #20
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fbe4 	bl	80071b4 <HAL_SD_GetCardCSD>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079f6:	e020      	b.n	8007a3a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6819      	ldr	r1, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	041b      	lsls	r3, r3, #16
 8007a02:	f04f 0400 	mov.w	r4, #0
 8007a06:	461a      	mov	r2, r3
 8007a08:	4623      	mov	r3, r4
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	f001 fd38 	bl	8009480 <SDMMC_CmdSelDesel>
 8007a10:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <SD_InitCard+0x174>
  {
    return errorstate;
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	e00e      	b.n	8007a3a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681d      	ldr	r5, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	466c      	mov	r4, sp
 8007a24:	f103 0210 	add.w	r2, r3, #16
 8007a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a2e:	3304      	adds	r3, #4
 8007a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a32:	4628      	mov	r0, r5
 8007a34:	f001 fb7a 	bl	800912c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3740      	adds	r7, #64	; 0x40
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a44 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 fd32 	bl	80094c6 <SDMMC_CmdGoIdleState>
 8007a62:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	e072      	b.n	8007b54 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 fd45 	bl	8009502 <SDMMC_CmdOperCond>
 8007a78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00d      	beq.n	8007a9c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fd1b 	bl	80094c6 <SDMMC_CmdGoIdleState>
 8007a90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	e05b      	b.n	8007b54 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d137      	bne.n	8007b1a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 fd45 	bl	8009540 <SDMMC_CmdAppCommand>
 8007ab6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d02d      	beq.n	8007b1a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007abe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ac2:	e047      	b.n	8007b54 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 fd38 	bl	8009540 <SDMMC_CmdAppCommand>
 8007ad0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <SD_PowerON+0x98>
    {
      return errorstate;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	e03b      	b.n	8007b54 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	491e      	ldr	r1, [pc, #120]	; (8007b5c <SD_PowerON+0x118>)
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 fd4e 	bl	8009584 <SDMMC_CmdAppOperCommand>
 8007ae8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007af4:	e02e      	b.n	8007b54 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 fbb4 	bl	800926a <SDMMC_GetResponse>
 8007b02:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	0fdb      	lsrs	r3, r3, #31
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <SD_PowerON+0xcc>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <SD_PowerON+0xce>
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]

    count++;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d802      	bhi.n	8007b2a <SD_PowerON+0xe6>
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0cc      	beq.n	8007ac4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d902      	bls.n	8007b3a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b38:	e00c      	b.n	8007b54 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	645a      	str	r2, [r3, #68]	; 0x44
 8007b4a:	e002      	b.n	8007b52 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	c1100000 	.word	0xc1100000

08007b60 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b74:	e018      	b.n	8007ba8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	041b      	lsls	r3, r3, #16
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f001 fdc3 	bl	800970e <SDMMC_CmdSendStatus>
 8007b88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	e009      	b.n	8007ba8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 fb65 	bl	800926a <SDMMC_GetResponse>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 fb4f 	bl	800926a <SDMMC_GetResponse>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bd6:	d102      	bne.n	8007bde <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bdc:	e02f      	b.n	8007c3e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f879 	bl	8007cdc <SD_FindSCR>
 8007bea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	e023      	b.n	8007c3e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01c      	beq.n	8007c3a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c08:	041b      	lsls	r3, r3, #16
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	f001 fc97 	bl	8009540 <SDMMC_CmdAppCommand>
 8007c12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	e00f      	b.n	8007c3e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2102      	movs	r1, #2
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 fcd1 	bl	80095cc <SDMMC_CmdBusWidth>
 8007c2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	e003      	b.n	8007c3e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e001      	b.n	8007c3e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	2300      	movs	r3, #0
 8007c54:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f001 fb04 	bl	800926a <SDMMC_GetResponse>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c6c:	d102      	bne.n	8007c74 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c72:	e02f      	b.n	8007cd4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c74:	f107 030c 	add.w	r3, r7, #12
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f82e 	bl	8007cdc <SD_FindSCR>
 8007c80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	e023      	b.n	8007cd4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d01c      	beq.n	8007cd0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9e:	041b      	lsls	r3, r3, #16
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f001 fc4c 	bl	8009540 <SDMMC_CmdAppCommand>
 8007ca8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	e00f      	b.n	8007cd4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 fc86 	bl	80095cc <SDMMC_CmdBusWidth>
 8007cc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	e003      	b.n	8007cd4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e001      	b.n	8007cd4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007cd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007cdc:	b590      	push	{r4, r7, lr}
 8007cde:	b08f      	sub	sp, #60	; 0x3c
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ce6:	f7fb fdb3 	bl	8003850 <HAL_GetTick>
 8007cea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60bb      	str	r3, [r7, #8]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2108      	movs	r1, #8
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 faf0 	bl	80092e8 <SDMMC_CmdBlockLength>
 8007d08:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	e0a9      	b.n	8007e68 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4610      	mov	r0, r2
 8007d22:	f001 fc0d 	bl	8009540 <SDMMC_CmdAppCommand>
 8007d26:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	e09a      	b.n	8007e68 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d32:	f04f 33ff 	mov.w	r3, #4294967295
 8007d36:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007d38:	2308      	movs	r3, #8
 8007d3a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007d3c:	2330      	movs	r3, #48	; 0x30
 8007d3e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d40:	2302      	movs	r3, #2
 8007d42:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f107 0210 	add.w	r2, r7, #16
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 fa9a 	bl	8009290 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fc55 	bl	8009610 <SDMMC_CmdSendSCR>
 8007d66:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d022      	beq.n	8007db4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	e07a      	b.n	8007e68 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	f107 0208 	add.w	r2, r7, #8
 8007d8c:	18d4      	adds	r4, r2, r3
 8007d8e:	4608      	mov	r0, r1
 8007d90:	f001 f9f8 	bl	8009184 <SDMMC_ReadFIFO>
 8007d94:	4603      	mov	r3, r0
 8007d96:	6023      	str	r3, [r4, #0]
      index++;
 8007d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d9e:	f7fb fd57 	bl	8003850 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d102      	bne.n	8007db4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007dae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007db2:	e059      	b.n	8007e68 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dba:	f240 432a 	movw	r3, #1066	; 0x42a
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0d6      	beq.n	8007d72 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2208      	movs	r2, #8
 8007dd8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007dda:	2308      	movs	r3, #8
 8007ddc:	e044      	b.n	8007e68 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2202      	movs	r2, #2
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007df4:	2302      	movs	r3, #2
 8007df6:	e037      	b.n	8007e68 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007e0e:	2320      	movs	r3, #32
 8007e10:	e02a      	b.n	8007e68 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e1a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	061a      	lsls	r2, r3, #24
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	0e1b      	lsrs	r3, r3, #24
 8007e38:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	601a      	str	r2, [r3, #0]
    scr++;
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	3304      	adds	r3, #4
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	061a      	lsls	r2, r3, #24
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	0a1b      	lsrs	r3, r3, #8
 8007e56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	0e1b      	lsrs	r3, r3, #24
 8007e60:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	373c      	adds	r7, #60	; 0x3c
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd90      	pop	{r4, r7, pc}

08007e70 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d03f      	beq.n	8007f0a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	e033      	b.n	8007ef8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 f975 	bl	8009184 <SDMMC_ReadFIFO>
 8007e9a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	0c1b      	lsrs	r3, r3, #16
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	0e1b      	lsrs	r3, r3, #24
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b07      	cmp	r3, #7
 8007efc:	d9c8      	bls.n	8007e90 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007f0a:	bf00      	nop
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b086      	sub	sp, #24
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d043      	beq.n	8007fb4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e037      	b.n	8007fa2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	021a      	lsls	r2, r3, #8
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	041a      	lsls	r2, r3, #16
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	061a      	lsls	r2, r3, #24
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f107 0208 	add.w	r2, r7, #8
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f901 	bl	800919e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b07      	cmp	r3, #7
 8007fa6:	d9c4      	bls.n	8007f32 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e084      	b.n	80080d8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7f9 fba5 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008004:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800800e:	d902      	bls.n	8008016 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008024:	d007      	beq.n	8008036 <HAL_SPI_Init+0x7a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800802e:	d002      	beq.n	8008036 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10b      	bne.n	8008056 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008046:	d903      	bls.n	8008050 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	631a      	str	r2, [r3, #48]	; 0x30
 800804e:	e002      	b.n	8008056 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	ea42 0103 	orr.w	r1, r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	0c1b      	lsrs	r3, r3, #16
 8008096:	f003 0204 	and.w	r2, r3, #4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	ea42 0103 	orr.w	r1, r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69da      	ldr	r2, [r3, #28]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d110      	bne.n	800811c <HAL_SPI_Receive_IT+0x3c>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008102:	d10b      	bne.n	800811c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2204      	movs	r2, #4
 8008108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	68b9      	ldr	r1, [r7, #8]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 f88c 	bl	8008230 <HAL_SPI_TransmitReceive_IT>
 8008118:	4603      	mov	r3, r0
 800811a:	e081      	b.n	8008220 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_SPI_Receive_IT+0x4a>
 8008126:	2302      	movs	r3, #2
 8008128:	e07a      	b.n	8008220 <HAL_SPI_Receive_IT+0x140>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b01      	cmp	r3, #1
 800813c:	d002      	beq.n	8008144 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800813e:	2302      	movs	r3, #2
 8008140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008142:	e068      	b.n	8008216 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_SPI_Receive_IT+0x70>
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008154:	e05f      	b.n	8008216 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2204      	movs	r2, #4
 800815a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	88fa      	ldrh	r2, [r7, #6]
 8008176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800819a:	d90b      	bls.n	80081b4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081aa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <HAL_SPI_Receive_IT+0x148>)
 80081b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80081b2:	e00a      	b.n	80081ca <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081c2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a19      	ldr	r2, [pc, #100]	; (800822c <HAL_SPI_Receive_IT+0x14c>)
 80081c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d2:	d107      	bne.n	80081e4 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80081e2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80081f2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d008      	beq.n	8008214 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e000      	b.n	8008216 <HAL_SPI_Receive_IT+0x136>
  }

error :
 8008214:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800821e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	08008849 	.word	0x08008849
 800822c:	080087f9 	.word	0x080087f9

08008230 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_SPI_TransmitReceive_IT+0x20>
 800824c:	2302      	movs	r3, #2
 800824e:	e091      	b.n	8008374 <HAL_SPI_TransmitReceive_IT+0x144>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800825e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008266:	7dbb      	ldrb	r3, [r7, #22]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d00d      	beq.n	8008288 <HAL_SPI_TransmitReceive_IT+0x58>
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008272:	d106      	bne.n	8008282 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <HAL_SPI_TransmitReceive_IT+0x52>
 800827c:	7dbb      	ldrb	r3, [r7, #22]
 800827e:	2b04      	cmp	r3, #4
 8008280:	d002      	beq.n	8008288 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008282:	2302      	movs	r3, #2
 8008284:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008286:	e070      	b.n	800836a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_SPI_TransmitReceive_IT+0x6a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <HAL_SPI_TransmitReceive_IT+0x6a>
 8008294:	887b      	ldrh	r3, [r7, #2]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800829e:	e064      	b.n	800836a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d003      	beq.n	80082b4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2205      	movs	r2, #5
 80082b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	887a      	ldrh	r2, [r7, #2]
 80082c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	887a      	ldrh	r2, [r7, #2]
 80082ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	887a      	ldrh	r2, [r7, #2]
 80082d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	887a      	ldrh	r2, [r7, #2]
 80082de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082ea:	d906      	bls.n	80082fa <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a24      	ldr	r2, [pc, #144]	; (8008380 <HAL_SPI_TransmitReceive_IT+0x150>)
 80082f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	4a23      	ldr	r2, [pc, #140]	; (8008384 <HAL_SPI_TransmitReceive_IT+0x154>)
 80082f6:	651a      	str	r2, [r3, #80]	; 0x50
 80082f8:	e005      	b.n	8008306 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4a22      	ldr	r2, [pc, #136]	; (8008388 <HAL_SPI_TransmitReceive_IT+0x158>)
 80082fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4a22      	ldr	r2, [pc, #136]	; (800838c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8008304:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800830e:	d802      	bhi.n	8008316 <HAL_SPI_TransmitReceive_IT+0xe6>
 8008310:	887b      	ldrh	r3, [r7, #2]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d908      	bls.n	8008328 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	e007      	b.n	8008338 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008336:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008346:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b40      	cmp	r3, #64	; 0x40
 8008354:	d008      	beq.n	8008368 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e000      	b.n	800836a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008368:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
}
 8008374:	4618      	mov	r0, r3
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	08008733 	.word	0x08008733
 8008384:	08008799 	.word	0x08008799
 8008388:	080085e3 	.word	0x080085e3
 800838c:	080086a1 	.word	0x080086a1

08008390 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	099b      	lsrs	r3, r3, #6
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10f      	bne.n	80083d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	099b      	lsrs	r3, r3, #6
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d004      	beq.n	80083d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
    return;
 80083d2:	e0d8      	b.n	8008586 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	085b      	lsrs	r3, r3, #1
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00a      	beq.n	80083f6 <HAL_SPI_IRQHandler+0x66>
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	09db      	lsrs	r3, r3, #7
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	4798      	blx	r3
    return;
 80083f4:	e0c7      	b.n	8008586 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	095b      	lsrs	r3, r3, #5
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10c      	bne.n	800841c <HAL_SPI_IRQHandler+0x8c>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	099b      	lsrs	r3, r3, #6
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <HAL_SPI_IRQHandler+0x8c>
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	0a1b      	lsrs	r3, r3, #8
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80b5 	beq.w	8008586 <HAL_SPI_IRQHandler+0x1f6>
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80ae 	beq.w	8008586 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	099b      	lsrs	r3, r3, #6
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d023      	beq.n	800847e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b03      	cmp	r3, #3
 8008440:	d011      	beq.n	8008466 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008446:	f043 0204 	orr.w	r2, r3, #4
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	617b      	str	r3, [r7, #20]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	e00b      	b.n	800847e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008466:	2300      	movs	r3, #0
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	693b      	ldr	r3, [r7, #16]
        return;
 800847c:	e083      	b.n	8008586 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d014      	beq.n	80084b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848e:	f043 0201 	orr.w	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	0a1b      	lsrs	r3, r3, #8
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00c      	beq.n	80084da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c4:	f043 0208 	orr.w	r2, r3, #8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084cc:	2300      	movs	r3, #0
 80084ce:	60bb      	str	r3, [r7, #8]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	60bb      	str	r3, [r7, #8]
 80084d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d050      	beq.n	8008584 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685a      	ldr	r2, [r3, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <HAL_SPI_IRQHandler+0x17e>
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d034      	beq.n	8008578 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0203 	bic.w	r2, r2, #3
 800851c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008522:	2b00      	cmp	r3, #0
 8008524:	d011      	beq.n	800854a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852a:	4a18      	ldr	r2, [pc, #96]	; (800858c <HAL_SPI_IRQHandler+0x1fc>)
 800852c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008532:	4618      	mov	r0, r3
 8008534:	f7fb fbaa 	bl	8003c8c <HAL_DMA_Abort_IT>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	2b00      	cmp	r3, #0
 8008550:	d016      	beq.n	8008580 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008556:	4a0d      	ldr	r2, [pc, #52]	; (800858c <HAL_SPI_IRQHandler+0x1fc>)
 8008558:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	4618      	mov	r0, r3
 8008560:	f7fb fb94 	bl	8003c8c <HAL_DMA_Abort_IT>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008576:	e003      	b.n	8008580 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f813 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800857e:	e000      	b.n	8008582 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008580:	bf00      	nop
    return;
 8008582:	bf00      	nop
 8008584:	bf00      	nop
  }
}
 8008586:	3720      	adds	r7, #32
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	080085b9 	.word	0x080085b9

08008590 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff ffe5 	bl	80085a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d923      	bls.n	800863e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008600:	b292      	uxth	r2, r2
 8008602:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	1c9a      	adds	r2, r3, #2
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008614:	b29b      	uxth	r3, r3
 8008616:	3b02      	subs	r3, #2
 8008618:	b29a      	uxth	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008626:	b29b      	uxth	r3, r3
 8008628:	2b01      	cmp	r3, #1
 800862a:	d11f      	bne.n	800866c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	e016      	b.n	800866c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f103 020c 	add.w	r2, r3, #12
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	7812      	ldrb	r2, [r2, #0]
 800864c:	b2d2      	uxtb	r2, r2
 800864e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008660:	b29b      	uxth	r3, r3
 8008662:	3b01      	subs	r3, #1
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008672:	b29b      	uxth	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10f      	bne.n	8008698 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008686:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800868c:	b29b      	uxth	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa73 	bl	8008b7e <SPI_CloseRxTx_ISR>
    }
  }
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d912      	bls.n	80086d8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	881a      	ldrh	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	1c9a      	adds	r2, r3, #2
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b02      	subs	r3, #2
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086d6:	e012      	b.n	80086fe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	330c      	adds	r3, #12
 80086e2:	7812      	ldrb	r2, [r2, #0]
 80086e4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d110      	bne.n	800872a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008716:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800871e:	b29b      	uxth	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d102      	bne.n	800872a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fa2a 	bl	8008b7e <SPI_CloseRxTx_ISR>
    }
  }
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	b292      	uxth	r2, r2
 8008746:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	1c9a      	adds	r2, r3, #2
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008758:	b29b      	uxth	r3, r3
 800875a:	3b01      	subs	r3, #1
 800875c:	b29a      	uxth	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800876a:	b29b      	uxth	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10f      	bne.n	8008790 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800877e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9f7 	bl	8008b7e <SPI_CloseRxTx_ISR>
    }
  }
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	881a      	ldrh	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	1c9a      	adds	r2, r3, #2
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d110      	bne.n	80087f0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087dc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f9c7 	bl	8008b7e <SPI_CloseRxTx_ISR>
    }
  }
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f103 020c 	add.w	r2, r3, #12
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008822:	b29b      	uxth	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d102      	bne.n	8008840 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9e1 	bl	8008c02 <SPI_CloseRx_ISR>
  }
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	b292      	uxth	r2, r2
 800885c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	1c9a      	adds	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d102      	bne.n	800888c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f9bb 	bl	8008c02 <SPI_CloseRx_ISR>
  }
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	4613      	mov	r3, r2
 80088a2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088a4:	e04c      	b.n	8008940 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d048      	beq.n	8008940 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80088ae:	f7fa ffcf 	bl	8003850 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d902      	bls.n	80088c4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d13d      	bne.n	8008940 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088dc:	d111      	bne.n	8008902 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088e6:	d004      	beq.n	80088f2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f0:	d107      	bne.n	8008902 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800890a:	d10f      	bne.n	800892c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800892a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e00f      	b.n	8008960 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4013      	ands	r3, r2
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	429a      	cmp	r2, r3
 800894e:	bf0c      	ite	eq
 8008950:	2301      	moveq	r3, #1
 8008952:	2300      	movne	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	461a      	mov	r2, r3
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	429a      	cmp	r2, r3
 800895c:	d1a3      	bne.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008976:	e057      	b.n	8008a28 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800897e:	d106      	bne.n	800898e <SPI_WaitFifoStateUntilTimeout+0x26>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d103      	bne.n	800898e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	330c      	adds	r3, #12
 800898c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d048      	beq.n	8008a28 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008996:	f7fa ff5b 	bl	8003850 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d902      	bls.n	80089ac <SPI_WaitFifoStateUntilTimeout+0x44>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d13d      	bne.n	8008a28 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089c4:	d111      	bne.n	80089ea <SPI_WaitFifoStateUntilTimeout+0x82>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ce:	d004      	beq.n	80089da <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d8:	d107      	bne.n	80089ea <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f2:	d10f      	bne.n	8008a14 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e008      	b.n	8008a3a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d19f      	bne.n	8008978 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af02      	add	r7, sp, #8
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a56:	d111      	bne.n	8008a7c <SPI_EndRxTransaction+0x3a>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a60:	d004      	beq.n	8008a6c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a6a:	d107      	bne.n	8008a7c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a7a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2200      	movs	r2, #0
 8008a84:	2180      	movs	r1, #128	; 0x80
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff ff04 	bl	8008894 <SPI_WaitFlagStateUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a96:	f043 0220 	orr.w	r2, r3, #32
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e023      	b.n	8008aea <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aaa:	d11d      	bne.n	8008ae8 <SPI_EndRxTransaction+0xa6>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab4:	d004      	beq.n	8008ac0 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008abe:	d113      	bne.n	8008ae8 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f7ff ff4b 	bl	8008968 <SPI_WaitFifoStateUntilTimeout>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008adc:	f043 0220 	orr.w	r2, r3, #32
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e000      	b.n	8008aea <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af02      	add	r7, sp, #8
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff ff2c 	bl	8008968 <SPI_WaitFifoStateUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d007      	beq.n	8008b26 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b1a:	f043 0220 	orr.w	r2, r3, #32
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e027      	b.n	8008b76 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2180      	movs	r1, #128	; 0x80
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff feaf 	bl	8008894 <SPI_WaitFlagStateUntilTimeout>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b40:	f043 0220 	orr.w	r2, r3, #32
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e014      	b.n	8008b76 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7ff ff05 	bl	8008968 <SPI_WaitFifoStateUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d007      	beq.n	8008b74 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b68:	f043 0220 	orr.w	r2, r3, #32
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e000      	b.n	8008b76 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b86:	f7fa fe63 	bl	8003850 <HAL_GetTick>
 8008b8a:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0220 	bic.w	r2, r2, #32
 8008b9a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	2164      	movs	r1, #100	; 0x64
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff ffa6 	bl	8008af2 <SPI_EndRxTxTransaction>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb0:	f043 0220 	orr.w	r2, r3, #32
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d115      	bne.n	8008bec <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d107      	bne.n	8008bdc <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7f9 fcfb 	bl	80025d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008bda:	e00e      	b.n	8008bfa <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff fcd3 	bl	8008590 <HAL_SPI_TxRxCpltCallback>
}
 8008bea:	e006      	b.n	8008bfa <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff fcd5 	bl	80085a4 <HAL_SPI_ErrorCallback>
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c18:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008c1a:	f7fa fe19 	bl	8003850 <HAL_GetTick>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	461a      	mov	r2, r3
 8008c22:	2164      	movs	r1, #100	; 0x64
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff ff0c 	bl	8008a42 <SPI_EndRxTransaction>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c34:	f043 0220 	orr.w	r2, r3, #32
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7f9 fcbf 	bl	80025d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008c52:	e002      	b.n	8008c5a <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff fca5 	bl	80085a4 <HAL_SPI_ErrorCallback>
}
 8008c5a:	bf00      	nop
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e01d      	b.n	8008cb0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d106      	bne.n	8008c8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f815 	bl	8008cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2202      	movs	r2, #2
 8008c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f000 f985 	bl	8008fb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0201 	orr.w	r2, r2, #1
 8008ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <HAL_TIM_Base_Start_IT+0x50>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b06      	cmp	r3, #6
 8008cf4:	d00b      	beq.n	8008d0e <HAL_TIM_Base_Start_IT+0x42>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfc:	d007      	beq.n	8008d0e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	00010007 	.word	0x00010007

08008d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d122      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d11b      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f06f 0202 	mvn.w	r2, #2
 8008d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f905 	bl	8008f72 <HAL_TIM_IC_CaptureCallback>
 8008d68:	e005      	b.n	8008d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f8f7 	bl	8008f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f908 	bl	8008f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	d122      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d11b      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f06f 0204 	mvn.w	r2, #4
 8008da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2202      	movs	r2, #2
 8008da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8db 	bl	8008f72 <HAL_TIM_IC_CaptureCallback>
 8008dbc:	e005      	b.n	8008dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f8cd 	bl	8008f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f8de 	bl	8008f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d122      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d11b      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f06f 0208 	mvn.w	r2, #8
 8008df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f8b1 	bl	8008f72 <HAL_TIM_IC_CaptureCallback>
 8008e10:	e005      	b.n	8008e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f8a3 	bl	8008f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f8b4 	bl	8008f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0310 	and.w	r3, r3, #16
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d122      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0310 	and.w	r3, r3, #16
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d11b      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0210 	mvn.w	r2, #16
 8008e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2208      	movs	r2, #8
 8008e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f887 	bl	8008f72 <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f879 	bl	8008f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f88a 	bl	8008f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d10e      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d107      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0201 	mvn.w	r2, #1
 8008e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7f8 fb0e 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b80      	cmp	r3, #128	; 0x80
 8008eb0:	d10e      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebc:	2b80      	cmp	r3, #128	; 0x80
 8008ebe:	d107      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f91a 	bl	8009104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ede:	d10e      	bne.n	8008efe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eea:	2b80      	cmp	r3, #128	; 0x80
 8008eec:	d107      	bne.n	8008efe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f90d 	bl	8009118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b40      	cmp	r3, #64	; 0x40
 8008f0a:	d10e      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	d107      	bne.n	8008f2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f838 	bl	8008f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d10e      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d107      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f06f 0220 	mvn.w	r2, #32
 8008f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8cd 	bl	80090f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
	...

08008fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a40      	ldr	r2, [pc, #256]	; (80090c4 <TIM_Base_SetConfig+0x114>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d013      	beq.n	8008ff0 <TIM_Base_SetConfig+0x40>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fce:	d00f      	beq.n	8008ff0 <TIM_Base_SetConfig+0x40>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a3d      	ldr	r2, [pc, #244]	; (80090c8 <TIM_Base_SetConfig+0x118>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00b      	beq.n	8008ff0 <TIM_Base_SetConfig+0x40>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a3c      	ldr	r2, [pc, #240]	; (80090cc <TIM_Base_SetConfig+0x11c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d007      	beq.n	8008ff0 <TIM_Base_SetConfig+0x40>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a3b      	ldr	r2, [pc, #236]	; (80090d0 <TIM_Base_SetConfig+0x120>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <TIM_Base_SetConfig+0x40>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a3a      	ldr	r2, [pc, #232]	; (80090d4 <TIM_Base_SetConfig+0x124>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d108      	bne.n	8009002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a2f      	ldr	r2, [pc, #188]	; (80090c4 <TIM_Base_SetConfig+0x114>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d02b      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009010:	d027      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a2c      	ldr	r2, [pc, #176]	; (80090c8 <TIM_Base_SetConfig+0x118>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d023      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a2b      	ldr	r2, [pc, #172]	; (80090cc <TIM_Base_SetConfig+0x11c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d01f      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a2a      	ldr	r2, [pc, #168]	; (80090d0 <TIM_Base_SetConfig+0x120>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d01b      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a29      	ldr	r2, [pc, #164]	; (80090d4 <TIM_Base_SetConfig+0x124>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d017      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a28      	ldr	r2, [pc, #160]	; (80090d8 <TIM_Base_SetConfig+0x128>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d013      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a27      	ldr	r2, [pc, #156]	; (80090dc <TIM_Base_SetConfig+0x12c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00f      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a26      	ldr	r2, [pc, #152]	; (80090e0 <TIM_Base_SetConfig+0x130>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00b      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a25      	ldr	r2, [pc, #148]	; (80090e4 <TIM_Base_SetConfig+0x134>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d007      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a24      	ldr	r2, [pc, #144]	; (80090e8 <TIM_Base_SetConfig+0x138>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d003      	beq.n	8009062 <TIM_Base_SetConfig+0xb2>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a23      	ldr	r2, [pc, #140]	; (80090ec <TIM_Base_SetConfig+0x13c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d108      	bne.n	8009074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <TIM_Base_SetConfig+0x114>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_Base_SetConfig+0xf8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a0c      	ldr	r2, [pc, #48]	; (80090d4 <TIM_Base_SetConfig+0x124>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d103      	bne.n	80090b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	691a      	ldr	r2, [r3, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	615a      	str	r2, [r3, #20]
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	40010000 	.word	0x40010000
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40010400 	.word	0x40010400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	40014800 	.word	0x40014800
 80090e4:	40001800 	.word	0x40001800
 80090e8:	40001c00 	.word	0x40001c00
 80090ec:	40002000 	.word	0x40002000

080090f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800912c:	b084      	sub	sp, #16
 800912e:	b480      	push	{r7}
 8009130:	b085      	sub	sp, #20
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	f107 001c 	add.w	r0, r7, #28
 800913a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009142:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009144:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009146:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800914a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800914e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009152:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009156:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	4b07      	ldr	r3, [pc, #28]	; (8009180 <SDMMC_Init+0x54>)
 8009164:	4013      	ands	r3, r2
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	b004      	add	sp, #16
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	ffff8100 	.word	0xffff8100

08009184 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2203      	movs	r2, #3
 80091cc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80091ce:	2002      	movs	r0, #2
 80091d0:	f7fa fb4a 	bl	8003868 <HAL_Delay>
  
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0303 	and.w	r3, r3, #3
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
	...

080091fc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800921a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009220:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009226:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	4b06      	ldr	r3, [pc, #24]	; (800924c <SDMMC_SendCommand+0x50>)
 8009234:	4013      	ands	r3, r2
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	fffff000 	.word	0xfffff000

08009250 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	b2db      	uxtb	r3, r3
}
 800925e:	4618      	mov	r0, r3
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3314      	adds	r3, #20
 8009278:	461a      	mov	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	4413      	add	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
}  
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80092bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80092c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	431a      	orrs	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80092da:	2300      	movs	r3, #0

}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80092f6:	2310      	movs	r3, #16
 80092f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092fa:	2340      	movs	r3, #64	; 0x40
 80092fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff ff74 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009314:	f241 3288 	movw	r2, #5000	; 0x1388
 8009318:	2110      	movs	r1, #16
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa42 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009322:	69fb      	ldr	r3, [r7, #28]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800933a:	2311      	movs	r3, #17
 800933c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff ff52 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009358:	f241 3288 	movw	r2, #5000	; 0x1388
 800935c:	2111      	movs	r1, #17
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa20 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009366:	69fb      	ldr	r3, [r7, #28]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3720      	adds	r7, #32
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800937e:	2312      	movs	r3, #18
 8009380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009382:	2340      	movs	r3, #64	; 0x40
 8009384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009386:	2300      	movs	r3, #0
 8009388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800938a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009390:	f107 0308 	add.w	r3, r7, #8
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff ff30 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800939c:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a0:	2112      	movs	r1, #18
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f9fe 	bl	80097a4 <SDMMC_GetCmdResp1>
 80093a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093aa:	69fb      	ldr	r3, [r7, #28]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3720      	adds	r7, #32
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80093c2:	2318      	movs	r3, #24
 80093c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093c6:	2340      	movs	r3, #64	; 0x40
 80093c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093d4:	f107 0308 	add.w	r3, r7, #8
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff ff0e 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80093e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e4:	2118      	movs	r1, #24
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9dc 	bl	80097a4 <SDMMC_GetCmdResp1>
 80093ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ee:	69fb      	ldr	r3, [r7, #28]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3720      	adds	r7, #32
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009406:	2319      	movs	r3, #25
 8009408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff feec 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009424:	f241 3288 	movw	r2, #5000	; 0x1388
 8009428:	2119      	movs	r1, #25
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9ba 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009432:	69fb      	ldr	r3, [r7, #28]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009448:	230c      	movs	r3, #12
 800944a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800944c:	2340      	movs	r3, #64	; 0x40
 800944e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009450:	2300      	movs	r3, #0
 8009452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009458:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800945a:	f107 0308 	add.w	r3, r7, #8
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fecb 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009466:	4a05      	ldr	r2, [pc, #20]	; (800947c <SDMMC_CmdStopTransfer+0x40>)
 8009468:	210c      	movs	r1, #12
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f99a 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009472:	69fb      	ldr	r3, [r7, #28]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3720      	adds	r7, #32
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	05f5e100 	.word	0x05f5e100

08009480 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009490:	2307      	movs	r3, #7
 8009492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009494:	2340      	movs	r3, #64	; 0x40
 8009496:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009498:	2300      	movs	r3, #0
 800949a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800949c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094a2:	f107 0310 	add.w	r3, r7, #16
 80094a6:	4619      	mov	r1, r3
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f7ff fea7 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80094ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b2:	2107      	movs	r1, #7
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f975 	bl	80097a4 <SDMMC_GetCmdResp1>
 80094ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3728      	adds	r7, #40	; 0x28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b088      	sub	sp, #32
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80094d6:	2300      	movs	r3, #0
 80094d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff fe86 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f92f 	bl	8009754 <SDMMC_GetCmdError>
 80094f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f8:	69fb      	ldr	r3, [r7, #28]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3720      	adds	r7, #32
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b088      	sub	sp, #32
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800950a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800950e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009510:	2308      	movs	r3, #8
 8009512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009514:	2340      	movs	r3, #64	; 0x40
 8009516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009518:	2300      	movs	r3, #0
 800951a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800951c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009520:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009522:	f107 0308 	add.w	r3, r7, #8
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff fe67 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fb18 	bl	8009b64 <SDMMC_GetCmdResp7>
 8009534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009536:	69fb      	ldr	r3, [r7, #28]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800954e:	2337      	movs	r3, #55	; 0x37
 8009550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009552:	2340      	movs	r3, #64	; 0x40
 8009554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800955a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fe48 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800956c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009570:	2137      	movs	r1, #55	; 0x37
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f916 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800957a:	69fb      	ldr	r3, [r7, #28]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3720      	adds	r7, #32
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	4b0d      	ldr	r3, [pc, #52]	; (80095c8 <SDMMC_CmdAppOperCommand+0x44>)
 8009592:	4313      	orrs	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009596:	2329      	movs	r3, #41	; 0x29
 8009598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800959a:	2340      	movs	r3, #64	; 0x40
 800959c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095a8:	f107 0308 	add.w	r3, r7, #8
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff fe24 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fa27 	bl	8009a08 <SDMMC_GetCmdResp3>
 80095ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095bc:	69fb      	ldr	r3, [r7, #28]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	80100000 	.word	0x80100000

080095cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80095da:	2306      	movs	r3, #6
 80095dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095de:	2340      	movs	r3, #64	; 0x40
 80095e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095ec:	f107 0308 	add.w	r3, r7, #8
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fe02 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80095f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095fc:	2106      	movs	r1, #6
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f8d0 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009606:	69fb      	ldr	r3, [r7, #28]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800961c:	2333      	movs	r3, #51	; 0x33
 800961e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800962c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800962e:	f107 0308 	add.w	r3, r7, #8
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff fde1 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800963a:	f241 3288 	movw	r2, #5000	; 0x1388
 800963e:	2133      	movs	r1, #51	; 0x33
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f8af 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009648:	69fb      	ldr	r3, [r7, #28]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b088      	sub	sp, #32
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800965e:	2302      	movs	r3, #2
 8009660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009662:	23c0      	movs	r3, #192	; 0xc0
 8009664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009666:	2300      	movs	r3, #0
 8009668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800966a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800966e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009670:	f107 0308 	add.w	r3, r7, #8
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fdc0 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f97d 	bl	800997c <SDMMC_GetCmdResp2>
 8009682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009684:	69fb      	ldr	r3, [r7, #28]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3720      	adds	r7, #32
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b088      	sub	sp, #32
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800969c:	2309      	movs	r3, #9
 800969e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80096a0:	23c0      	movs	r3, #192	; 0xc0
 80096a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096ae:	f107 0308 	add.w	r3, r7, #8
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff fda1 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f95e 	bl	800997c <SDMMC_GetCmdResp2>
 80096c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096c2:	69fb      	ldr	r3, [r7, #28]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3720      	adds	r7, #32
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80096da:	2303      	movs	r3, #3
 80096dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096ec:	f107 0308 	add.w	r3, r7, #8
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff fd82 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	2103      	movs	r1, #3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f9bd 	bl	8009a7c <SDMMC_GetCmdResp6>
 8009702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009704:	69fb      	ldr	r3, [r7, #28]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3720      	adds	r7, #32
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b088      	sub	sp, #32
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800971c:	230d      	movs	r3, #13
 800971e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009720:	2340      	movs	r3, #64	; 0x40
 8009722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009724:	2300      	movs	r3, #0
 8009726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800972c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800972e:	f107 0308 	add.w	r3, r7, #8
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff fd61 	bl	80091fc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800973a:	f241 3288 	movw	r2, #5000	; 0x1388
 800973e:	210d      	movs	r1, #13
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f82f 	bl	80097a4 <SDMMC_GetCmdResp1>
 8009746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009748:	69fb      	ldr	r3, [r7, #28]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009754:	b490      	push	{r4, r7}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <SDMMC_GetCmdError+0x48>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a0f      	ldr	r2, [pc, #60]	; (80097a0 <SDMMC_GetCmdError+0x4c>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	0a5b      	lsrs	r3, r3, #9
 8009768:	f241 3288 	movw	r2, #5000	; 0x1388
 800976c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009770:	4623      	mov	r3, r4
 8009772:	1e5c      	subs	r4, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800977c:	e009      	b.n	8009792 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0f2      	beq.n	8009770 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	22c5      	movs	r2, #197	; 0xc5
 800978e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bc90      	pop	{r4, r7}
 800979a:	4770      	bx	lr
 800979c:	20000000 	.word	0x20000000
 80097a0:	10624dd3 	.word	0x10624dd3

080097a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	460b      	mov	r3, r1
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80097b2:	4b6f      	ldr	r3, [pc, #444]	; (8009970 <SDMMC_GetCmdResp1+0x1cc>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a6f      	ldr	r2, [pc, #444]	; (8009974 <SDMMC_GetCmdResp1+0x1d0>)
 80097b8:	fba2 2303 	umull	r2, r3, r2, r3
 80097bc:	0a5b      	lsrs	r3, r3, #9
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80097c4:	4623      	mov	r3, r4
 80097c6:	1e5c      	subs	r4, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097d0:	e0c9      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0f0      	beq.n	80097c4 <SDMMC_GetCmdResp1+0x20>
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1eb      	bne.n	80097c4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2204      	movs	r2, #4
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097fe:	2304      	movs	r3, #4
 8009800:	e0b1      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d004      	beq.n	8009818 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009814:	2301      	movs	r3, #1
 8009816:	e0a6      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	22c5      	movs	r2, #197	; 0xc5
 800981c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fd16 	bl	8009250 <SDMMC_GetCommandResponse>
 8009824:	4603      	mov	r3, r0
 8009826:	461a      	mov	r2, r3
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	4293      	cmp	r3, r2
 800982c:	d001      	beq.n	8009832 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800982e:	2301      	movs	r3, #1
 8009830:	e099      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009832:	2100      	movs	r1, #0
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff fd18 	bl	800926a <SDMMC_GetResponse>
 800983a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4b4e      	ldr	r3, [pc, #312]	; (8009978 <SDMMC_GetCmdResp1+0x1d4>)
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009846:	2300      	movs	r3, #0
 8009848:	e08d      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	da02      	bge.n	8009856 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009854:	e087      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	e080      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800986e:	2380      	movs	r3, #128	; 0x80
 8009870:	e079      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800987c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009880:	e071      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800988c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009890:	e069      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800989c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a0:	e061      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80098ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098b0:	e059      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098c0:	e051      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098d0:	e049      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80098dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098e0:	e041      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80098ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098f0:	e039      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80098fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009900:	e031      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800990c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009910:	e029      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800991c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009920:	e021      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800992c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009930:	e019      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800993c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009940:	e011      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800994c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009950:	e009      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f003 0308 	and.w	r3, r3, #8
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800995c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009960:	e001      	b.n	8009966 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009966:	4618      	mov	r0, r3
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	bd90      	pop	{r4, r7, pc}
 800996e:	bf00      	nop
 8009970:	20000000 	.word	0x20000000
 8009974:	10624dd3 	.word	0x10624dd3
 8009978:	fdffe008 	.word	0xfdffe008

0800997c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800997c:	b490      	push	{r4, r7}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009984:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <SDMMC_GetCmdResp2+0x84>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1e      	ldr	r2, [pc, #120]	; (8009a04 <SDMMC_GetCmdResp2+0x88>)
 800998a:	fba2 2303 	umull	r2, r3, r2, r3
 800998e:	0a5b      	lsrs	r3, r3, #9
 8009990:	f241 3288 	movw	r2, #5000	; 0x1388
 8009994:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009998:	4623      	mov	r3, r4
 800999a:	1e5c      	subs	r4, r3, #1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099a4:	e026      	b.n	80099f4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099aa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0f0      	beq.n	8009998 <SDMMC_GetCmdResp2+0x1c>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1eb      	bne.n	8009998 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2204      	movs	r2, #4
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099d2:	2304      	movs	r3, #4
 80099d4:	e00e      	b.n	80099f4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d004      	beq.n	80099ec <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e003      	b.n	80099f4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	22c5      	movs	r2, #197	; 0xc5
 80099f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bc90      	pop	{r4, r7}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	20000000 	.word	0x20000000
 8009a04:	10624dd3 	.word	0x10624dd3

08009a08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009a08:	b490      	push	{r4, r7}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a10:	4b18      	ldr	r3, [pc, #96]	; (8009a74 <SDMMC_GetCmdResp3+0x6c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a18      	ldr	r2, [pc, #96]	; (8009a78 <SDMMC_GetCmdResp3+0x70>)
 8009a16:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1a:	0a5b      	lsrs	r3, r3, #9
 8009a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a24:	4623      	mov	r3, r4
 8009a26:	1e5c      	subs	r4, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a30:	e01b      	b.n	8009a6a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0f0      	beq.n	8009a24 <SDMMC_GetCmdResp3+0x1c>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1eb      	bne.n	8009a24 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d004      	beq.n	8009a62 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a5e:	2304      	movs	r3, #4
 8009a60:	e003      	b.n	8009a6a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	22c5      	movs	r2, #197	; 0xc5
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bc90      	pop	{r4, r7}
 8009a72:	4770      	bx	lr
 8009a74:	20000000 	.word	0x20000000
 8009a78:	10624dd3 	.word	0x10624dd3

08009a7c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009a7c:	b590      	push	{r4, r7, lr}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	460b      	mov	r3, r1
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a8a:	4b34      	ldr	r3, [pc, #208]	; (8009b5c <SDMMC_GetCmdResp6+0xe0>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a34      	ldr	r2, [pc, #208]	; (8009b60 <SDMMC_GetCmdResp6+0xe4>)
 8009a90:	fba2 2303 	umull	r2, r3, r2, r3
 8009a94:	0a5b      	lsrs	r3, r3, #9
 8009a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a9e:	4623      	mov	r3, r4
 8009aa0:	1e5c      	subs	r4, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009aa6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009aaa:	e052      	b.n	8009b52 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0f0      	beq.n	8009a9e <SDMMC_GetCmdResp6+0x22>
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1eb      	bne.n	8009a9e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d004      	beq.n	8009adc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ad8:	2304      	movs	r3, #4
 8009ada:	e03a      	b.n	8009b52 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d004      	beq.n	8009af2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e02f      	b.n	8009b52 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7ff fbac 	bl	8009250 <SDMMC_GetCommandResponse>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	7afb      	ldrb	r3, [r7, #11]
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d001      	beq.n	8009b06 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e025      	b.n	8009b52 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	22c5      	movs	r2, #197	; 0xc5
 8009b0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff fbab 	bl	800926a <SDMMC_GetResponse>
 8009b14:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	0c1b      	lsrs	r3, r3, #16
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e011      	b.n	8009b52 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b3c:	e009      	b.n	8009b52 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b4c:	e001      	b.n	8009b52 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000000 	.word	0x20000000
 8009b60:	10624dd3 	.word	0x10624dd3

08009b64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009b64:	b490      	push	{r4, r7}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b6c:	4b21      	ldr	r3, [pc, #132]	; (8009bf4 <SDMMC_GetCmdResp7+0x90>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a21      	ldr	r2, [pc, #132]	; (8009bf8 <SDMMC_GetCmdResp7+0x94>)
 8009b72:	fba2 2303 	umull	r2, r3, r2, r3
 8009b76:	0a5b      	lsrs	r3, r3, #9
 8009b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b80:	4623      	mov	r3, r4
 8009b82:	1e5c      	subs	r4, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b8c:	e02c      	b.n	8009be8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b92:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <SDMMC_GetCmdResp7+0x1c>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1eb      	bne.n	8009b80 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bba:	2304      	movs	r3, #4
 8009bbc:	e014      	b.n	8009be8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d004      	beq.n	8009bd4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e009      	b.n	8009be8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2240      	movs	r2, #64	; 0x40
 8009be4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009be6:	2300      	movs	r3, #0
  
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc90      	pop	{r4, r7}
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20000000 	.word	0x20000000
 8009bf8:	10624dd3 	.word	0x10624dd3

08009bfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	f107 001c 	add.w	r0, r7, #28
 8009c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d120      	bne.n	8009c56 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	4b20      	ldr	r3, [pc, #128]	; (8009ca8 <USB_CoreInit+0xac>)
 8009c26:	4013      	ands	r3, r2
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d105      	bne.n	8009c4a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 fac4 	bl	800b1d8 <USB_CoreReset>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]
 8009c54:	e010      	b.n	8009c78 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 fab8 	bl	800b1d8 <USB_CoreReset>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d10b      	bne.n	8009c96 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f043 0206 	orr.w	r2, r3, #6
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	f043 0220 	orr.w	r2, r3, #32
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ca2:	b004      	add	sp, #16
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	ffbdffbf 	.word	0xffbdffbf

08009cac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d165      	bne.n	8009d8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4a41      	ldr	r2, [pc, #260]	; (8009dc8 <USB_SetTurnaroundTime+0x11c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d906      	bls.n	8009cd6 <USB_SetTurnaroundTime+0x2a>
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4a40      	ldr	r2, [pc, #256]	; (8009dcc <USB_SetTurnaroundTime+0x120>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d802      	bhi.n	8009cd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009cd0:	230f      	movs	r3, #15
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	e062      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4a3c      	ldr	r2, [pc, #240]	; (8009dcc <USB_SetTurnaroundTime+0x120>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d906      	bls.n	8009cec <USB_SetTurnaroundTime+0x40>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	4a3b      	ldr	r2, [pc, #236]	; (8009dd0 <USB_SetTurnaroundTime+0x124>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d802      	bhi.n	8009cec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ce6:	230e      	movs	r3, #14
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	e057      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4a38      	ldr	r2, [pc, #224]	; (8009dd0 <USB_SetTurnaroundTime+0x124>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d906      	bls.n	8009d02 <USB_SetTurnaroundTime+0x56>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4a37      	ldr	r2, [pc, #220]	; (8009dd4 <USB_SetTurnaroundTime+0x128>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d802      	bhi.n	8009d02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009cfc:	230d      	movs	r3, #13
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e04c      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4a33      	ldr	r2, [pc, #204]	; (8009dd4 <USB_SetTurnaroundTime+0x128>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d906      	bls.n	8009d18 <USB_SetTurnaroundTime+0x6c>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	4a32      	ldr	r2, [pc, #200]	; (8009dd8 <USB_SetTurnaroundTime+0x12c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d802      	bhi.n	8009d18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009d12:	230c      	movs	r3, #12
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	e041      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4a2f      	ldr	r2, [pc, #188]	; (8009dd8 <USB_SetTurnaroundTime+0x12c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d906      	bls.n	8009d2e <USB_SetTurnaroundTime+0x82>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4a2e      	ldr	r2, [pc, #184]	; (8009ddc <USB_SetTurnaroundTime+0x130>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d802      	bhi.n	8009d2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009d28:	230b      	movs	r3, #11
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e036      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	4a2a      	ldr	r2, [pc, #168]	; (8009ddc <USB_SetTurnaroundTime+0x130>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d906      	bls.n	8009d44 <USB_SetTurnaroundTime+0x98>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	4a29      	ldr	r2, [pc, #164]	; (8009de0 <USB_SetTurnaroundTime+0x134>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d802      	bhi.n	8009d44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009d3e:	230a      	movs	r3, #10
 8009d40:	617b      	str	r3, [r7, #20]
 8009d42:	e02b      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4a26      	ldr	r2, [pc, #152]	; (8009de0 <USB_SetTurnaroundTime+0x134>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d906      	bls.n	8009d5a <USB_SetTurnaroundTime+0xae>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4a25      	ldr	r2, [pc, #148]	; (8009de4 <USB_SetTurnaroundTime+0x138>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d802      	bhi.n	8009d5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009d54:	2309      	movs	r3, #9
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e020      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	4a21      	ldr	r2, [pc, #132]	; (8009de4 <USB_SetTurnaroundTime+0x138>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d906      	bls.n	8009d70 <USB_SetTurnaroundTime+0xc4>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4a20      	ldr	r2, [pc, #128]	; (8009de8 <USB_SetTurnaroundTime+0x13c>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d802      	bhi.n	8009d70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d6a:	2308      	movs	r3, #8
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	e015      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4a1d      	ldr	r2, [pc, #116]	; (8009de8 <USB_SetTurnaroundTime+0x13c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d906      	bls.n	8009d86 <USB_SetTurnaroundTime+0xda>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	4a1c      	ldr	r2, [pc, #112]	; (8009dec <USB_SetTurnaroundTime+0x140>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d802      	bhi.n	8009d86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d80:	2307      	movs	r3, #7
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e00a      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d86:	2306      	movs	r3, #6
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e007      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d92:	2309      	movs	r3, #9
 8009d94:	617b      	str	r3, [r7, #20]
 8009d96:	e001      	b.n	8009d9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d98:	2309      	movs	r3, #9
 8009d9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	029b      	lsls	r3, r3, #10
 8009db0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009db4:	431a      	orrs	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	371c      	adds	r7, #28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	00d8acbf 	.word	0x00d8acbf
 8009dcc:	00e4e1bf 	.word	0x00e4e1bf
 8009dd0:	00f423ff 	.word	0x00f423ff
 8009dd4:	0106737f 	.word	0x0106737f
 8009dd8:	011a499f 	.word	0x011a499f
 8009ddc:	01312cff 	.word	0x01312cff
 8009de0:	014ca43f 	.word	0x014ca43f
 8009de4:	016e35ff 	.word	0x016e35ff
 8009de8:	01a6ab1f 	.word	0x01a6ab1f
 8009dec:	01e847ff 	.word	0x01e847ff

08009df0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f043 0201 	orr.w	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f023 0201 	bic.w	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d106      	bne.n	8009e60 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60da      	str	r2, [r3, #12]
 8009e5e:	e00b      	b.n	8009e78 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60da      	str	r2, [r3, #12]
 8009e72:	e001      	b.n	8009e78 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e003      	b.n	8009e80 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009e78:	2032      	movs	r0, #50	; 0x32
 8009e7a:	f7f9 fcf5 	bl	8003868 <HAL_Delay>

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e88:	b084      	sub	sp, #16
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b086      	sub	sp, #24
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	613b      	str	r3, [r7, #16]
 8009ea6:	e009      	b.n	8009ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	3340      	adds	r3, #64	; 0x40
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b0e      	cmp	r3, #14
 8009ec0:	d9f2      	bls.n	8009ea8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d11c      	bne.n	8009f02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ed6:	f043 0302 	orr.w	r3, r3, #2
 8009eda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	e005      	b.n	8009f0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f14:	461a      	mov	r2, r3
 8009f16:	2300      	movs	r3, #0
 8009f18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f20:	4619      	mov	r1, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f28:	461a      	mov	r2, r3
 8009f2a:	680b      	ldr	r3, [r1, #0]
 8009f2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d10c      	bne.n	8009f4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d104      	bne.n	8009f44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f959 	bl	800a1f4 <USB_SetDevSpeed>
 8009f42:	e018      	b.n	8009f76 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f44:	2101      	movs	r1, #1
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f954 	bl	800a1f4 <USB_SetDevSpeed>
 8009f4c:	e013      	b.n	8009f76 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d10c      	bne.n	8009f6e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f949 	bl	800a1f4 <USB_SetDevSpeed>
 8009f62:	e008      	b.n	8009f76 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009f64:	2101      	movs	r1, #1
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f944 	bl	800a1f4 <USB_SetDevSpeed>
 8009f6c:	e003      	b.n	8009f76 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009f6e:	2103      	movs	r1, #3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f93f 	bl	800a1f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f76:	2110      	movs	r1, #16
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f8f3 	bl	800a164 <USB_FlushTxFifo>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f911 	bl	800a1b0 <USB_FlushRxFifo>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009faa:	461a      	mov	r2, r3
 8009fac:	2300      	movs	r3, #0
 8009fae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	613b      	str	r3, [r7, #16]
 8009fc0:	e043      	b.n	800a04a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fd8:	d118      	bne.n	800a00c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10a      	bne.n	8009ff6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fec:	461a      	mov	r2, r3
 8009fee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	e013      	b.n	800a01e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a002:	461a      	mov	r2, r3
 800a004:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	e008      	b.n	800a01e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a018:	461a      	mov	r2, r3
 800a01a:	2300      	movs	r3, #0
 800a01c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	4413      	add	r3, r2
 800a026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02a:	461a      	mov	r2, r3
 800a02c:	2300      	movs	r3, #0
 800a02e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03c:	461a      	mov	r2, r3
 800a03e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a042:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	3301      	adds	r3, #1
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d3b7      	bcc.n	8009fc2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a052:	2300      	movs	r3, #0
 800a054:	613b      	str	r3, [r7, #16]
 800a056:	e043      	b.n	800a0e0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a06a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a06e:	d118      	bne.n	800a0a2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10a      	bne.n	800a08c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a082:	461a      	mov	r2, r3
 800a084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	e013      	b.n	800a0b4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a098:	461a      	mov	r2, r3
 800a09a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a09e:	6013      	str	r3, [r2, #0]
 800a0a0:	e008      	b.n	800a0b4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	613b      	str	r3, [r7, #16]
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d3b7      	bcc.n	800a058 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a108:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d105      	bne.n	800a11c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	f043 0210 	orr.w	r2, r3, #16
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <USB_DevInit+0x2d4>)
 800a122:	4313      	orrs	r3, r2
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	f043 0208 	orr.w	r2, r3, #8
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d105      	bne.n	800a14c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	699a      	ldr	r2, [r3, #24]
 800a144:	4b06      	ldr	r3, [pc, #24]	; (800a160 <USB_DevInit+0x2d8>)
 800a146:	4313      	orrs	r3, r2
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a158:	b004      	add	sp, #16
 800a15a:	4770      	bx	lr
 800a15c:	803c3800 	.word	0x803c3800
 800a160:	40000004 	.word	0x40000004

0800a164 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	019b      	lsls	r3, r3, #6
 800a176:	f043 0220 	orr.w	r2, r3, #32
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3301      	adds	r3, #1
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4a09      	ldr	r2, [pc, #36]	; (800a1ac <USB_FlushTxFifo+0x48>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d901      	bls.n	800a190 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e006      	b.n	800a19e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f003 0320 	and.w	r3, r3, #32
 800a198:	2b20      	cmp	r3, #32
 800a19a:	d0f0      	beq.n	800a17e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	00030d40 	.word	0x00030d40

0800a1b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2210      	movs	r2, #16
 800a1c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <USB_FlushRxFifo+0x40>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d901      	bls.n	800a1d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e006      	b.n	800a1e2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b10      	cmp	r3, #16
 800a1de:	d0f0      	beq.n	800a1c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	00030d40 	.word	0x00030d40

0800a1f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	68f9      	ldr	r1, [r7, #12]
 800a210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a214:	4313      	orrs	r3, r2
 800a216:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a226:	b480      	push	{r7}
 800a228:	b087      	sub	sp, #28
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f003 0306 	and.w	r3, r3, #6
 800a23e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d102      	bne.n	800a24c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a246:	2300      	movs	r3, #0
 800a248:	75fb      	strb	r3, [r7, #23]
 800a24a:	e00a      	b.n	800a262 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d002      	beq.n	800a258 <USB_GetDevSpeed+0x32>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b06      	cmp	r3, #6
 800a256:	d102      	bne.n	800a25e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a258:	2302      	movs	r3, #2
 800a25a:	75fb      	strb	r3, [r7, #23]
 800a25c:	e001      	b.n	800a262 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a25e:	230f      	movs	r3, #15
 800a260:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a262:	7dfb      	ldrb	r3, [r7, #23]
}
 800a264:	4618      	mov	r0, r3
 800a266:	371c      	adds	r7, #28
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d139      	bne.n	800a300 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a292:	69da      	ldr	r2, [r3, #28]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	2101      	movs	r1, #1
 800a29e:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	68f9      	ldr	r1, [r7, #12]
 800a2a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d153      	bne.n	800a36c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	78db      	ldrb	r3, [r3, #3]
 800a2de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	059b      	lsls	r3, r3, #22
 800a2e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	0159      	lsls	r1, r3, #5
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	440b      	add	r3, r1
 800a2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4b20      	ldr	r3, [pc, #128]	; (800a37c <USB_ActivateEndpoint+0x10c>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	600b      	str	r3, [r1, #0]
 800a2fe:	e035      	b.n	800a36c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a306:	69da      	ldr	r2, [r3, #28]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	2101      	movs	r1, #1
 800a312:	fa01 f303 	lsl.w	r3, r1, r3
 800a316:	041b      	lsls	r3, r3, #16
 800a318:	68f9      	ldr	r1, [r7, #12]
 800a31a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a31e:	4313      	orrs	r3, r2
 800a320:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d119      	bne.n	800a36c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	78db      	ldrb	r3, [r3, #3]
 800a352:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a354:	430b      	orrs	r3, r1
 800a356:	431a      	orrs	r2, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	0159      	lsls	r1, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	440b      	add	r3, r1
 800a360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a364:	4619      	mov	r1, r3
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <USB_ActivateEndpoint+0x10c>)
 800a368:	4313      	orrs	r3, r2
 800a36a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	10008000 	.word	0x10008000

0800a380 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	785b      	ldrb	r3, [r3, #1]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d161      	bne.n	800a460 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3b2:	d11f      	bne.n	800a3f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	0151      	lsls	r1, r2, #5
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	440a      	add	r2, r1
 800a3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	f003 030f 	and.w	r3, r3, #15
 800a404:	2101      	movs	r1, #1
 800a406:	fa01 f303 	lsl.w	r3, r1, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	43db      	mvns	r3, r3
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a414:	4013      	ands	r3, r2
 800a416:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41e:	69da      	ldr	r2, [r3, #28]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	f003 030f 	and.w	r3, r3, #15
 800a428:	2101      	movs	r1, #1
 800a42a:	fa01 f303 	lsl.w	r3, r1, r3
 800a42e:	b29b      	uxth	r3, r3
 800a430:	43db      	mvns	r3, r3
 800a432:	68f9      	ldr	r1, [r7, #12]
 800a434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a438:	4013      	ands	r3, r2
 800a43a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	0159      	lsls	r1, r3, #5
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	440b      	add	r3, r1
 800a452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a456:	4619      	mov	r1, r3
 800a458:	4b35      	ldr	r3, [pc, #212]	; (800a530 <USB_DeactivateEndpoint+0x1b0>)
 800a45a:	4013      	ands	r3, r2
 800a45c:	600b      	str	r3, [r1, #0]
 800a45e:	e060      	b.n	800a522 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4413      	add	r3, r2
 800a468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a476:	d11f      	bne.n	800a4b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	0151      	lsls	r1, r2, #5
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	440a      	add	r2, r1
 800a48e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a492:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a496:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	0151      	lsls	r1, r2, #5
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	440a      	add	r2, r1
 800a4ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ce:	041b      	lsls	r3, r3, #16
 800a4d0:	43db      	mvns	r3, r3
 800a4d2:	68f9      	ldr	r1, [r7, #12]
 800a4d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4d8:	4013      	ands	r3, r2
 800a4da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e2:	69da      	ldr	r2, [r3, #28]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	f003 030f 	and.w	r3, r3, #15
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f2:	041b      	lsls	r3, r3, #16
 800a4f4:	43db      	mvns	r3, r3
 800a4f6:	68f9      	ldr	r1, [r7, #12]
 800a4f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	0159      	lsls	r1, r3, #5
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	440b      	add	r3, r1
 800a516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51a:	4619      	mov	r1, r3
 800a51c:	4b05      	ldr	r3, [pc, #20]	; (800a534 <USB_DeactivateEndpoint+0x1b4>)
 800a51e:	4013      	ands	r3, r2
 800a520:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	ec337800 	.word	0xec337800
 800a534:	eff37800 	.word	0xeff37800

0800a538 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	; 0x28
 800a53c:	af02      	add	r7, sp, #8
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4613      	mov	r3, r2
 800a544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	785b      	ldrb	r3, [r3, #1]
 800a554:	2b01      	cmp	r3, #1
 800a556:	f040 8163 	bne.w	800a820 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d132      	bne.n	800a5c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56e:	691a      	ldr	r2, [r3, #16]
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	0159      	lsls	r1, r3, #5
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	440b      	add	r3, r1
 800a578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57c:	4619      	mov	r1, r3
 800a57e:	4ba5      	ldr	r3, [pc, #660]	; (800a814 <USB_EPStartXfer+0x2dc>)
 800a580:	4013      	ands	r3, r2
 800a582:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a59e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b0:	691a      	ldr	r2, [r3, #16]
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	0159      	lsls	r1, r3, #5
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	440b      	add	r3, r1
 800a5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4b95      	ldr	r3, [pc, #596]	; (800a818 <USB_EPStartXfer+0x2e0>)
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	610b      	str	r3, [r1, #16]
 800a5c6:	e074      	b.n	800a6b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d4:	691a      	ldr	r2, [r3, #16]
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	0159      	lsls	r1, r3, #5
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	440b      	add	r3, r1
 800a5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4b8c      	ldr	r3, [pc, #560]	; (800a818 <USB_EPStartXfer+0x2e0>)
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	0159      	lsls	r1, r3, #5
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	440b      	add	r3, r1
 800a600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a604:	4619      	mov	r1, r3
 800a606:	4b83      	ldr	r3, [pc, #524]	; (800a814 <USB_EPStartXfer+0x2dc>)
 800a608:	4013      	ands	r3, r2
 800a60a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a618:	691a      	ldr	r2, [r3, #16]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	6959      	ldr	r1, [r3, #20]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	440b      	add	r3, r1
 800a624:	1e59      	subs	r1, r3, #1
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a62e:	04d9      	lsls	r1, r3, #19
 800a630:	4b7a      	ldr	r3, [pc, #488]	; (800a81c <USB_EPStartXfer+0x2e4>)
 800a632:	400b      	ands	r3, r1
 800a634:	69b9      	ldr	r1, [r7, #24]
 800a636:	0148      	lsls	r0, r1, #5
 800a638:	69f9      	ldr	r1, [r7, #28]
 800a63a:	4401      	add	r1, r0
 800a63c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a640:	4313      	orrs	r3, r2
 800a642:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a650:	691a      	ldr	r2, [r3, #16]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a65a:	69b9      	ldr	r1, [r7, #24]
 800a65c:	0148      	lsls	r0, r1, #5
 800a65e:	69f9      	ldr	r1, [r7, #28]
 800a660:	4401      	add	r1, r0
 800a662:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a666:	4313      	orrs	r3, r2
 800a668:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	78db      	ldrb	r3, [r3, #3]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d11f      	bne.n	800a6b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	015a      	lsls	r2, r3, #5
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	4413      	add	r3, r2
 800a67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	0151      	lsls	r1, r2, #5
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	440a      	add	r2, r1
 800a688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a68c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a690:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	0151      	lsls	r1, r2, #5
 800a6a4:	69fa      	ldr	r2, [r7, #28]
 800a6a6:	440a      	add	r2, r1
 800a6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d14b      	bne.n	800a750 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d009      	beq.n	800a6d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	78db      	ldrb	r3, [r3, #3]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d128      	bne.n	800a72e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d110      	bne.n	800a70e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	0151      	lsls	r1, r2, #5
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	440a      	add	r2, r1
 800a702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	e00f      	b.n	800a72e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	0151      	lsls	r1, r2, #5
 800a720:	69fa      	ldr	r2, [r7, #28]
 800a722:	440a      	add	r2, r1
 800a724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a72c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	0151      	lsls	r1, r2, #5
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	440a      	add	r2, r1
 800a744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a748:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	e133      	b.n	800a9b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	0151      	lsls	r1, r2, #5
 800a762:	69fa      	ldr	r2, [r7, #28]
 800a764:	440a      	add	r2, r1
 800a766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a76e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	78db      	ldrb	r3, [r3, #3]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d015      	beq.n	800a7a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 811b 	beq.w	800a9b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	f003 030f 	and.w	r3, r3, #15
 800a792:	2101      	movs	r1, #1
 800a794:	fa01 f303 	lsl.w	r3, r1, r3
 800a798:	69f9      	ldr	r1, [r7, #28]
 800a79a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	634b      	str	r3, [r1, #52]	; 0x34
 800a7a2:	e109      	b.n	800a9b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d110      	bne.n	800a7d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	0151      	lsls	r1, r2, #5
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	440a      	add	r2, r1
 800a7ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	e00f      	b.n	800a7f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	0151      	lsls	r1, r2, #5
 800a7e8:	69fa      	ldr	r2, [r7, #28]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	68d9      	ldr	r1, [r3, #12]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	b298      	uxth	r0, r3
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	4603      	mov	r3, r0
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 fa38 	bl	800ac80 <USB_WritePacket>
 800a810:	e0d2      	b.n	800a9b8 <USB_EPStartXfer+0x480>
 800a812:	bf00      	nop
 800a814:	e007ffff 	.word	0xe007ffff
 800a818:	fff80000 	.word	0xfff80000
 800a81c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	0159      	lsls	r1, r3, #5
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	440b      	add	r3, r1
 800a836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a83a:	4619      	mov	r1, r3
 800a83c:	4b61      	ldr	r3, [pc, #388]	; (800a9c4 <USB_EPStartXfer+0x48c>)
 800a83e:	4013      	ands	r3, r2
 800a840:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84e:	691a      	ldr	r2, [r3, #16]
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	0159      	lsls	r1, r3, #5
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	440b      	add	r3, r1
 800a858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a85c:	4619      	mov	r1, r3
 800a85e:	4b5a      	ldr	r3, [pc, #360]	; (800a9c8 <USB_EPStartXfer+0x490>)
 800a860:	4013      	ands	r3, r2
 800a862:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d123      	bne.n	800a8b4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a878:	691a      	ldr	r2, [r3, #16]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a882:	69b9      	ldr	r1, [r7, #24]
 800a884:	0148      	lsls	r0, r1, #5
 800a886:	69f9      	ldr	r1, [r7, #28]
 800a888:	4401      	add	r1, r0
 800a88a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a88e:	4313      	orrs	r3, r2
 800a890:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	0151      	lsls	r1, r2, #5
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	440a      	add	r2, r1
 800a8a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8b0:	6113      	str	r3, [r2, #16]
 800a8b2:	e033      	b.n	800a91c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	695a      	ldr	r2, [r3, #20]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	4413      	add	r3, r2
 800a8be:	1e5a      	subs	r2, r3, #1
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	8afb      	ldrh	r3, [r7, #22]
 800a8da:	04d9      	lsls	r1, r3, #19
 800a8dc:	4b3b      	ldr	r3, [pc, #236]	; (800a9cc <USB_EPStartXfer+0x494>)
 800a8de:	400b      	ands	r3, r1
 800a8e0:	69b9      	ldr	r1, [r7, #24]
 800a8e2:	0148      	lsls	r0, r1, #5
 800a8e4:	69f9      	ldr	r1, [r7, #28]
 800a8e6:	4401      	add	r1, r0
 800a8e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8fc:	691a      	ldr	r2, [r3, #16]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	8af9      	ldrh	r1, [r7, #22]
 800a904:	fb01 f303 	mul.w	r3, r1, r3
 800a908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a90c:	69b9      	ldr	r1, [r7, #24]
 800a90e:	0148      	lsls	r0, r1, #5
 800a910:	69f9      	ldr	r1, [r7, #28]
 800a912:	4401      	add	r1, r0
 800a914:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a918:	4313      	orrs	r3, r2
 800a91a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d10d      	bne.n	800a93e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d009      	beq.n	800a93e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	68d9      	ldr	r1, [r3, #12]
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	4413      	add	r3, r2
 800a936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93a:	460a      	mov	r2, r1
 800a93c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	78db      	ldrb	r3, [r3, #3]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d128      	bne.n	800a998 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a952:	2b00      	cmp	r3, #0
 800a954:	d110      	bne.n	800a978 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	0151      	lsls	r1, r2, #5
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	440a      	add	r2, r1
 800a96c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a970:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	e00f      	b.n	800a998 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69ba      	ldr	r2, [r7, #24]
 800a988:	0151      	lsls	r1, r2, #5
 800a98a:	69fa      	ldr	r2, [r7, #28]
 800a98c:	440a      	add	r2, r1
 800a98e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a996:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	0151      	lsls	r1, r2, #5
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	440a      	add	r2, r1
 800a9ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	fff80000 	.word	0xfff80000
 800a9c8:	e007ffff 	.word	0xe007ffff
 800a9cc:	1ff80000 	.word	0x1ff80000

0800a9d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	f040 80cd 	bne.w	800ab8c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d132      	bne.n	800aa60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa06:	691a      	ldr	r2, [r3, #16]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	0159      	lsls	r1, r3, #5
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	440b      	add	r3, r1
 800aa10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa14:	4619      	mov	r1, r3
 800aa16:	4b98      	ldr	r3, [pc, #608]	; (800ac78 <USB_EP0StartXfer+0x2a8>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa48:	691a      	ldr	r2, [r3, #16]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	0159      	lsls	r1, r3, #5
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	440b      	add	r3, r1
 800aa52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa56:	4619      	mov	r1, r3
 800aa58:	4b88      	ldr	r3, [pc, #544]	; (800ac7c <USB_EP0StartXfer+0x2ac>)
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	610b      	str	r3, [r1, #16]
 800aa5e:	e04e      	b.n	800aafe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa6c:	691a      	ldr	r2, [r3, #16]
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	0159      	lsls	r1, r3, #5
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	440b      	add	r3, r1
 800aa76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	4b7f      	ldr	r3, [pc, #508]	; (800ac7c <USB_EP0StartXfer+0x2ac>)
 800aa7e:	4013      	ands	r3, r2
 800aa80:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8e:	691a      	ldr	r2, [r3, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	0159      	lsls	r1, r3, #5
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	440b      	add	r3, r1
 800aa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4b76      	ldr	r3, [pc, #472]	; (800ac78 <USB_EP0StartXfer+0x2a8>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	695a      	ldr	r2, [r3, #20]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d903      	bls.n	800aab8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaee:	6939      	ldr	r1, [r7, #16]
 800aaf0:	0148      	lsls	r0, r1, #5
 800aaf2:	6979      	ldr	r1, [r7, #20]
 800aaf4:	4401      	add	r1, r0
 800aaf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aafa:	4313      	orrs	r3, r2
 800aafc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d11e      	bne.n	800ab42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d009      	beq.n	800ab20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab18:	461a      	mov	r2, r3
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab3e:	6013      	str	r3, [r2, #0]
 800ab40:	e092      	b.n	800ac68 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	0151      	lsls	r1, r2, #5
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	440a      	add	r2, r1
 800ab58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d07e      	beq.n	800ac68 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	f003 030f 	and.w	r3, r3, #15
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab80:	6979      	ldr	r1, [r7, #20]
 800ab82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab86:	4313      	orrs	r3, r2
 800ab88:	634b      	str	r3, [r1, #52]	; 0x34
 800ab8a:	e06d      	b.n	800ac68 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab98:	691a      	ldr	r2, [r3, #16]
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	0159      	lsls	r1, r3, #5
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	440b      	add	r3, r1
 800aba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba6:	4619      	mov	r1, r3
 800aba8:	4b34      	ldr	r3, [pc, #208]	; (800ac7c <USB_EP0StartXfer+0x2ac>)
 800abaa:	4013      	ands	r3, r2
 800abac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abba:	691a      	ldr	r2, [r3, #16]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	0159      	lsls	r1, r3, #5
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	440b      	add	r3, r1
 800abc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc8:	4619      	mov	r1, r3
 800abca:	4b2b      	ldr	r3, [pc, #172]	; (800ac78 <USB_EP0StartXfer+0x2a8>)
 800abcc:	4013      	ands	r3, r2
 800abce:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	0151      	lsls	r1, r2, #5
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	440a      	add	r2, r1
 800abf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0c:	691a      	ldr	r2, [r3, #16]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac16:	6939      	ldr	r1, [r7, #16]
 800ac18:	0148      	lsls	r0, r1, #5
 800ac1a:	6979      	ldr	r1, [r7, #20]
 800ac1c:	4401      	add	r1, r0
 800ac1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac22:	4313      	orrs	r3, r2
 800ac24:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d10d      	bne.n	800ac48 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d009      	beq.n	800ac48 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	68d9      	ldr	r1, [r3, #12]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac44:	460a      	mov	r2, r1
 800ac46:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	015a      	lsls	r2, r3, #5
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	0151      	lsls	r1, r2, #5
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	440a      	add	r2, r1
 800ac5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	e007ffff 	.word	0xe007ffff
 800ac7c:	fff80000 	.word	0xfff80000

0800ac80 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b089      	sub	sp, #36	; 0x24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	460b      	mov	r3, r1
 800ac90:	71fb      	strb	r3, [r7, #7]
 800ac92:	4613      	mov	r3, r2
 800ac94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ac9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d11a      	bne.n	800acdc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aca6:	88bb      	ldrh	r3, [r7, #4]
 800aca8:	3303      	adds	r3, #3
 800acaa:	089b      	lsrs	r3, r3, #2
 800acac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800acae:	2300      	movs	r3, #0
 800acb0:	61bb      	str	r3, [r7, #24]
 800acb2:	e00f      	b.n	800acd4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	031a      	lsls	r2, r3, #12
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc0:	461a      	mov	r2, r3
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	3304      	adds	r3, #4
 800accc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	3301      	adds	r3, #1
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d3eb      	bcc.n	800acb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800acea:	b480      	push	{r7}
 800acec:	b089      	sub	sp, #36	; 0x24
 800acee:	af00      	add	r7, sp, #0
 800acf0:	60f8      	str	r0, [r7, #12]
 800acf2:	60b9      	str	r1, [r7, #8]
 800acf4:	4613      	mov	r3, r2
 800acf6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ad00:	88fb      	ldrh	r3, [r7, #6]
 800ad02:	3303      	adds	r3, #3
 800ad04:	089b      	lsrs	r3, r3, #2
 800ad06:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	61bb      	str	r3, [r7, #24]
 800ad0c:	e00b      	b.n	800ad26 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	3301      	adds	r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d3ef      	bcc.n	800ad0e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ad2e:	69fb      	ldr	r3, [r7, #28]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3724      	adds	r7, #36	; 0x24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d12c      	bne.n	800adb2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	db12      	blt.n	800ad90 <USB_EPSetStall+0x54>
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00f      	beq.n	800ad90 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	0151      	lsls	r1, r2, #5
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	440a      	add	r2, r1
 800ad86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad8e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	0151      	lsls	r1, r2, #5
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	440a      	add	r2, r1
 800ada6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	e02b      	b.n	800ae0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	db12      	blt.n	800adea <USB_EPSetStall+0xae>
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00f      	beq.n	800adea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	0151      	lsls	r1, r2, #5
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	440a      	add	r2, r1
 800ade0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ade4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ade8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	785b      	ldrb	r3, [r3, #1]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d128      	bne.n	800ae86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	78db      	ldrb	r3, [r3, #3]
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d003      	beq.n	800ae64 <USB_EPClearStall+0x4c>
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	78db      	ldrb	r3, [r3, #3]
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d138      	bne.n	800aed6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	0151      	lsls	r1, r2, #5
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	440a      	add	r2, r1
 800ae7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae82:	6013      	str	r3, [r2, #0]
 800ae84:	e027      	b.n	800aed6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	015a      	lsls	r2, r3, #5
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	0151      	lsls	r1, r2, #5
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	440a      	add	r2, r1
 800ae9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aea0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aea4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	78db      	ldrb	r3, [r3, #3]
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d003      	beq.n	800aeb6 <USB_EPClearStall+0x9e>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	78db      	ldrb	r3, [r3, #3]
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d10f      	bne.n	800aed6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	0151      	lsls	r1, r2, #5
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	440a      	add	r2, r1
 800aecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aed4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800af06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	78fb      	ldrb	r3, [r7, #3]
 800af12:	011b      	lsls	r3, r3, #4
 800af14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800af18:	68f9      	ldr	r1, [r7, #12]
 800af1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af1e:	4313      	orrs	r3, r2
 800af20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af4a:	f023 0302 	bic.w	r3, r3, #2
 800af4e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800af50:	2003      	movs	r0, #3
 800af52:	f7f8 fc89 	bl	8003868 <HAL_Delay>

  return HAL_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af7a:	f043 0302 	orr.w	r3, r3, #2
 800af7e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800af80:	2003      	movs	r0, #3
 800af82:	f7f8 fc71 	bl	8003868 <HAL_Delay>

  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	4013      	ands	r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800afa8:	68fb      	ldr	r3, [r7, #12]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b085      	sub	sp, #20
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	4013      	ands	r3, r2
 800afd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	0c1b      	lsrs	r3, r3, #16
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800afea:	b480      	push	{r7}
 800afec:	b085      	sub	sp, #20
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	4013      	ands	r3, r2
 800b00c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	b29b      	uxth	r3, r3
}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b01e:	b480      	push	{r7}
 800b020:	b085      	sub	sp, #20
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	460b      	mov	r3, r1
 800b028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	4013      	ands	r3, r2
 800b04a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b04c:	68bb      	ldr	r3, [r7, #8]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b087      	sub	sp, #28
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	460b      	mov	r3, r1
 800b064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	f003 030f 	and.w	r3, r3, #15
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	fa22 f303 	lsr.w	r3, r2, r3
 800b08a:	01db      	lsls	r3, r3, #7
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4313      	orrs	r3, r2
 800b092:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	015a      	lsls	r2, r3, #5
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	f003 0301 	and.w	r3, r3, #1
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4b09      	ldr	r3, [pc, #36]	; (800b118 <USB_ActivateSetup+0x44>)
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b108:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	fffff800 	.word	0xfffff800

0800b11c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	460b      	mov	r3, r1
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	333c      	adds	r3, #60	; 0x3c
 800b132:	3304      	adds	r3, #4
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	4a26      	ldr	r2, [pc, #152]	; (800b1d4 <USB_EP0_OutStart+0xb8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d90a      	bls.n	800b156 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b14c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b150:	d101      	bne.n	800b156 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	e037      	b.n	800b1c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b15c:	461a      	mov	r2, r3
 800b15e:	2300      	movs	r3, #0
 800b160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b184:	f043 0318 	orr.w	r3, r3, #24
 800b188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b198:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b19c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b19e:	7afb      	ldrb	r3, [r7, #11]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d10f      	bne.n	800b1c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b1c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	4f54300a 	.word	0x4f54300a

0800b1d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4a13      	ldr	r2, [pc, #76]	; (800b23c <USB_CoreReset+0x64>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d901      	bls.n	800b1f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e01b      	b.n	800b22e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	daf2      	bge.n	800b1e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f043 0201 	orr.w	r2, r3, #1
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3301      	adds	r3, #1
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4a09      	ldr	r2, [pc, #36]	; (800b23c <USB_CoreReset+0x64>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d901      	bls.n	800b220 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e006      	b.n	800b22e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	f003 0301 	and.w	r3, r3, #1
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d0f0      	beq.n	800b20e <USB_CoreReset+0x36>

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	00030d40 	.word	0x00030d40

0800b240 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b244:	4904      	ldr	r1, [pc, #16]	; (800b258 <MX_FATFS_Init+0x18>)
 800b246:	4805      	ldr	r0, [pc, #20]	; (800b25c <MX_FATFS_Init+0x1c>)
 800b248:	f004 fd8e 	bl	800fd68 <FATFS_LinkDriver>
 800b24c:	4603      	mov	r3, r0
 800b24e:	461a      	mov	r2, r3
 800b250:	4b03      	ldr	r3, [pc, #12]	; (800b260 <MX_FATFS_Init+0x20>)
 800b252:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b254:	bf00      	nop
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20011158 	.word	0x20011158
 800b25c:	08016974 	.word	0x08016974
 800b260:	20011154 	.word	0x20011154

0800b264 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b268:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b27e:	f000 f896 	bl	800b3ae <BSP_SD_IsDetected>
 800b282:	4603      	mov	r3, r0
 800b284:	2b01      	cmp	r3, #1
 800b286:	d001      	beq.n	800b28c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b288:	2302      	movs	r3, #2
 800b28a:	e012      	b.n	800b2b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b28c:	480b      	ldr	r0, [pc, #44]	; (800b2bc <BSP_SD_Init+0x48>)
 800b28e:	f7fb fb9f 	bl	80069d0 <HAL_SD_Init>
 800b292:	4603      	mov	r3, r0
 800b294:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b296:	79fb      	ldrb	r3, [r7, #7]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d109      	bne.n	800b2b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b29c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b2a0:	4806      	ldr	r0, [pc, #24]	; (800b2bc <BSP_SD_Init+0x48>)
 800b2a2:	f7fc f957 	bl	8007554 <HAL_SD_ConfigWideBusOperation>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20008844 	.word	0x20008844

0800b2c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	68f9      	ldr	r1, [r7, #12]
 800b2d6:	4806      	ldr	r0, [pc, #24]	; (800b2f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b2d8:	f7fb fc12 	bl	8006b00 <HAL_SD_ReadBlocks_DMA>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20008844 	.word	0x20008844

0800b2f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	68f9      	ldr	r1, [r7, #12]
 800b30a:	4806      	ldr	r0, [pc, #24]	; (800b324 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b30c:	f7fb fce4 	bl	8006cd8 <HAL_SD_WriteBlocks_DMA>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20008844 	.word	0x20008844

0800b328 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b32c:	4805      	ldr	r0, [pc, #20]	; (800b344 <BSP_SD_GetCardState+0x1c>)
 800b32e:	f7fc f98d 	bl	800764c <HAL_SD_GetCardState>
 800b332:	4603      	mov	r3, r0
 800b334:	2b04      	cmp	r3, #4
 800b336:	bf14      	ite	ne
 800b338:	2301      	movne	r3, #1
 800b33a:	2300      	moveq	r3, #0
 800b33c:	b2db      	uxtb	r3, r3
}
 800b33e:	4618      	mov	r0, r3
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20008844 	.word	0x20008844

0800b348 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4803      	ldr	r0, [pc, #12]	; (800b360 <BSP_SD_GetCardInfo+0x18>)
 800b354:	f7fc f8d2 	bl	80074fc <HAL_SD_GetCardInfo>
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20008844 	.word	0x20008844

0800b364 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b36c:	f000 f818 	bl	800b3a0 <BSP_SD_AbortCallback>
}
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b380:	f000 f998 	bl	800b6b4 <BSP_SD_WriteCpltCallback>
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b394:	f000 f9a0 	bl	800b6d8 <BSP_SD_ReadCpltCallback>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0

}
 800b3a4:	bf00      	nop
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	b2db      	uxtb	r3, r3
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800b3d0:	f004 fdb4 	bl	800ff3c <osKernelGetTickCount>
 800b3d4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800b3d6:	e006      	b.n	800b3e6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b3d8:	f7ff ffa6 	bl	800b328 <BSP_SD_GetCardState>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e009      	b.n	800b3fa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800b3e6:	f004 fda9 	bl	800ff3c <osKernelGetTickCount>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d8f0      	bhi.n	800b3d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b3f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b40e:	4b0b      	ldr	r3, [pc, #44]	; (800b43c <SD_CheckStatus+0x38>)
 800b410:	2201      	movs	r2, #1
 800b412:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b414:	f7ff ff88 	bl	800b328 <BSP_SD_GetCardState>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d107      	bne.n	800b42e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b41e:	4b07      	ldr	r3, [pc, #28]	; (800b43c <SD_CheckStatus+0x38>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	f023 0301 	bic.w	r3, r3, #1
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	4b04      	ldr	r3, [pc, #16]	; (800b43c <SD_CheckStatus+0x38>)
 800b42c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b42e:	4b03      	ldr	r3, [pc, #12]	; (800b43c <SD_CheckStatus+0x38>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	b2db      	uxtb	r3, r3
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	20000009 	.word	0x20000009

0800b440 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800b44a:	4b1c      	ldr	r3, [pc, #112]	; (800b4bc <SD_initialize+0x7c>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800b450:	f004 fd1c 	bl	800fe8c <osKernelGetState>
 800b454:	4603      	mov	r3, r0
 800b456:	2b02      	cmp	r3, #2
 800b458:	d129      	bne.n	800b4ae <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b45a:	f7ff ff0b 	bl	800b274 <BSP_SD_Init>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d107      	bne.n	800b474 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff ffcc 	bl	800b404 <SD_CheckStatus>
 800b46c:	4603      	mov	r3, r0
 800b46e:	461a      	mov	r2, r3
 800b470:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <SD_initialize+0x7c>)
 800b472:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b474:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <SD_initialize+0x7c>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d017      	beq.n	800b4ae <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800b47e:	4b10      	ldr	r3, [pc, #64]	; (800b4c0 <SD_initialize+0x80>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800b486:	2200      	movs	r2, #0
 800b488:	2102      	movs	r1, #2
 800b48a:	200a      	movs	r0, #10
 800b48c:	f005 f976 	bl	801077c <osMessageQueueNew>
 800b490:	4602      	mov	r2, r0
 800b492:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <SD_initialize+0x80>)
 800b494:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800b496:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <SD_initialize+0x80>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d107      	bne.n	800b4ae <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800b49e:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <SD_initialize+0x7c>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f043 0301 	orr.w	r3, r3, #1
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <SD_initialize+0x7c>)
 800b4ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b4ae:	4b03      	ldr	r3, [pc, #12]	; (800b4bc <SD_initialize+0x7c>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	b2db      	uxtb	r3, r3
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000009 	.word	0x20000009
 800b4c0:	2000028c 	.word	0x2000028c

0800b4c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff ff97 	bl	800b404 <SD_CheckStatus>
 800b4d6:	4603      	mov	r3, r0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b4f4:	f247 5030 	movw	r0, #30000	; 0x7530
 800b4f8:	f7ff ff66 	bl	800b3c8 <SD_CheckStatusWithTimeout>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	da01      	bge.n	800b506 <SD_read+0x26>
  {
    return res;
 800b502:	7ffb      	ldrb	r3, [r7, #31]
 800b504:	e02f      	b.n	800b566 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	68b8      	ldr	r0, [r7, #8]
 800b50c:	f7ff fed8 	bl	800b2c0 <BSP_SD_ReadBlocks_DMA>
 800b510:	4603      	mov	r3, r0
 800b512:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800b514:	7fbb      	ldrb	r3, [r7, #30]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d124      	bne.n	800b564 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b51a:	4b15      	ldr	r3, [pc, #84]	; (800b570 <SD_read+0x90>)
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	f107 0112 	add.w	r1, r7, #18
 800b522:	f247 5330 	movw	r3, #30000	; 0x7530
 800b526:	2200      	movs	r2, #0
 800b528:	f005 fa22 	bl	8010970 <osMessageQueueGet>
 800b52c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d117      	bne.n	800b564 <SD_read+0x84>
 800b534:	8a7b      	ldrh	r3, [r7, #18]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d114      	bne.n	800b564 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800b53a:	f004 fcff 	bl	800ff3c <osKernelGetTickCount>
 800b53e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b540:	e007      	b.n	800b552 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b542:	f7ff fef1 	bl	800b328 <BSP_SD_GetCardState>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d102      	bne.n	800b552 <SD_read+0x72>
              {
                res = RES_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b550:	e008      	b.n	800b564 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b552:	f004 fcf3 	bl	800ff3c <osKernelGetTickCount>
 800b556:	4602      	mov	r2, r0
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b560:	4293      	cmp	r3, r2
 800b562:	d9ee      	bls.n	800b542 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b564:	7ffb      	ldrb	r3, [r7, #31]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3720      	adds	r7, #32
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	2000028c 	.word	0x2000028c

0800b574 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60b9      	str	r1, [r7, #8]
 800b57c:	607a      	str	r2, [r7, #4]
 800b57e:	603b      	str	r3, [r7, #0]
 800b580:	4603      	mov	r3, r0
 800b582:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b588:	f247 5030 	movw	r0, #30000	; 0x7530
 800b58c:	f7ff ff1c 	bl	800b3c8 <SD_CheckStatusWithTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	da01      	bge.n	800b59a <SD_write+0x26>
  {
    return res;
 800b596:	7ffb      	ldrb	r3, [r7, #31]
 800b598:	e02d      	b.n	800b5f6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	68b8      	ldr	r0, [r7, #8]
 800b5a0:	f7ff fea8 	bl	800b2f4 <BSP_SD_WriteBlocks_DMA>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d124      	bne.n	800b5f4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b5aa:	4b15      	ldr	r3, [pc, #84]	; (800b600 <SD_write+0x8c>)
 800b5ac:	6818      	ldr	r0, [r3, #0]
 800b5ae:	f107 0112 	add.w	r1, r7, #18
 800b5b2:	f247 5330 	movw	r3, #30000	; 0x7530
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f005 f9da 	bl	8010970 <osMessageQueueGet>
 800b5bc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d117      	bne.n	800b5f4 <SD_write+0x80>
 800b5c4:	8a7b      	ldrh	r3, [r7, #18]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d114      	bne.n	800b5f4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800b5ca:	f004 fcb7 	bl	800ff3c <osKernelGetTickCount>
 800b5ce:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b5d0:	e007      	b.n	800b5e2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b5d2:	f7ff fea9 	bl	800b328 <BSP_SD_GetCardState>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d102      	bne.n	800b5e2 <SD_write+0x6e>
          {
            res = RES_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	77fb      	strb	r3, [r7, #31]
            break;
 800b5e0:	e008      	b.n	800b5f4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b5e2:	f004 fcab 	bl	800ff3c <osKernelGetTickCount>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	f247 522f 	movw	r2, #29999	; 0x752f
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d9ee      	bls.n	800b5d2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800b5f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3720      	adds	r7, #32
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	2000028c 	.word	0x2000028c

0800b604 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b08c      	sub	sp, #48	; 0x30
 800b608:	af00      	add	r7, sp, #0
 800b60a:	4603      	mov	r3, r0
 800b60c:	603a      	str	r2, [r7, #0]
 800b60e:	71fb      	strb	r3, [r7, #7]
 800b610:	460b      	mov	r3, r1
 800b612:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b61a:	4b25      	ldr	r3, [pc, #148]	; (800b6b0 <SD_ioctl+0xac>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <SD_ioctl+0x28>
 800b628:	2303      	movs	r3, #3
 800b62a:	e03c      	b.n	800b6a6 <SD_ioctl+0xa2>

  switch (cmd)
 800b62c:	79bb      	ldrb	r3, [r7, #6]
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d834      	bhi.n	800b69c <SD_ioctl+0x98>
 800b632:	a201      	add	r2, pc, #4	; (adr r2, 800b638 <SD_ioctl+0x34>)
 800b634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b638:	0800b649 	.word	0x0800b649
 800b63c:	0800b651 	.word	0x0800b651
 800b640:	0800b669 	.word	0x0800b669
 800b644:	0800b683 	.word	0x0800b683
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b64e:	e028      	b.n	800b6a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b650:	f107 030c 	add.w	r3, r7, #12
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff fe77 	bl	800b348 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b666:	e01c      	b.n	800b6a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b668:	f107 030c 	add.w	r3, r7, #12
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7ff fe6b 	bl	800b348 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b674:	b29a      	uxth	r2, r3
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b680:	e00f      	b.n	800b6a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b682:	f107 030c 	add.w	r3, r7, #12
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff fe5e 	bl	800b348 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	0a5a      	lsrs	r2, r3, #9
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b69a:	e002      	b.n	800b6a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b69c:	2304      	movs	r3, #4
 800b69e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3730      	adds	r7, #48	; 0x30
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000009 	.word	0x20000009

0800b6b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800b6be:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <BSP_SD_WriteCpltCallback+0x20>)
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	1db9      	adds	r1, r7, #6
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f005 f8de 	bl	8010888 <osMessageQueuePut>
#endif
}
 800b6cc:	bf00      	nop
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	2000028c 	.word	0x2000028c

0800b6d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800b6e2:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <BSP_SD_ReadCpltCallback+0x20>)
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	1db9      	adds	r1, r7, #6
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f005 f8cc 	bl	8010888 <osMessageQueuePut>
#endif
}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	2000028c 	.word	0x2000028c

0800b6fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b708:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b70c:	f009 f910 	bl	8014930 <malloc>
 800b710:	4603      	mov	r3, r0
 800b712:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d105      	bne.n	800b726 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b722:	2302      	movs	r3, #2
 800b724:	e066      	b.n	800b7f4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	7c1b      	ldrb	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d119      	bne.n	800b76a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b73a:	2202      	movs	r2, #2
 800b73c:	2181      	movs	r1, #129	; 0x81
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f008 ff29 	bl	8014596 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b74a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b74e:	2202      	movs	r2, #2
 800b750:	2101      	movs	r1, #1
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f008 ff1f 	bl	8014596 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2210      	movs	r2, #16
 800b764:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b768:	e016      	b.n	800b798 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b76a:	2340      	movs	r3, #64	; 0x40
 800b76c:	2202      	movs	r2, #2
 800b76e:	2181      	movs	r1, #129	; 0x81
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f008 ff10 	bl	8014596 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b77c:	2340      	movs	r3, #64	; 0x40
 800b77e:	2202      	movs	r2, #2
 800b780:	2101      	movs	r1, #1
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f008 ff07 	bl	8014596 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2210      	movs	r2, #16
 800b794:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b798:	2308      	movs	r3, #8
 800b79a:	2203      	movs	r2, #3
 800b79c:	2182      	movs	r1, #130	; 0x82
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f008 fef9 	bl	8014596 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d109      	bne.n	800b7e2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7d8:	2101      	movs	r1, #1
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f008 ffca 	bl	8014774 <USBD_LL_PrepareReceive>
 800b7e0:	e007      	b.n	800b7f2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7e8:	2340      	movs	r3, #64	; 0x40
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f008 ffc1 	bl	8014774 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b808:	2300      	movs	r3, #0
 800b80a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b80c:	2181      	movs	r1, #129	; 0x81
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f008 fee7 	bl	80145e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b81a:	2101      	movs	r1, #1
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f008 fee0 	bl	80145e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b82a:	2182      	movs	r1, #130	; 0x82
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f008 fed8 	bl	80145e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00e      	beq.n	800b86a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b85c:	4618      	mov	r0, r3
 800b85e:	f009 f86f 	bl	8014940 <free>
    pdev->pClassData = NULL;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b884:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d03a      	beq.n	800b914 <USBD_CDC_Setup+0xa0>
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	f040 8097 	bne.w	800b9d2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	88db      	ldrh	r3, [r3, #6]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d029      	beq.n	800b900 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da11      	bge.n	800b8da <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b8c2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	88d2      	ldrh	r2, [r2, #6]
 800b8c8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b8ca:	6939      	ldr	r1, [r7, #16]
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	88db      	ldrh	r3, [r3, #6]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f001 fac7 	bl	800ce66 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b8d8:	e082      	b.n	800b9e0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	785a      	ldrb	r2, [r3, #1]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	88db      	ldrh	r3, [r3, #6]
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b8f0:	6939      	ldr	r1, [r7, #16]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	88db      	ldrh	r3, [r3, #6]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 fae0 	bl	800cebe <USBD_CtlPrepareRx>
    break;
 800b8fe:	e06f      	b.n	800b9e0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	7850      	ldrb	r0, [r2, #1]
 800b90c:	2200      	movs	r2, #0
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	4798      	blx	r3
    break;
 800b912:	e065      	b.n	800b9e0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	785b      	ldrb	r3, [r3, #1]
 800b918:	2b0b      	cmp	r3, #11
 800b91a:	d84f      	bhi.n	800b9bc <USBD_CDC_Setup+0x148>
 800b91c:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <USBD_CDC_Setup+0xb0>)
 800b91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b922:	bf00      	nop
 800b924:	0800b955 	.word	0x0800b955
 800b928:	0800b9cb 	.word	0x0800b9cb
 800b92c:	0800b9bd 	.word	0x0800b9bd
 800b930:	0800b9bd 	.word	0x0800b9bd
 800b934:	0800b9bd 	.word	0x0800b9bd
 800b938:	0800b9bd 	.word	0x0800b9bd
 800b93c:	0800b9bd 	.word	0x0800b9bd
 800b940:	0800b9bd 	.word	0x0800b9bd
 800b944:	0800b9bd 	.word	0x0800b9bd
 800b948:	0800b9bd 	.word	0x0800b9bd
 800b94c:	0800b97d 	.word	0x0800b97d
 800b950:	0800b9a5 	.word	0x0800b9a5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b95a:	2b03      	cmp	r3, #3
 800b95c:	d107      	bne.n	800b96e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b95e:	f107 030c 	add.w	r3, r7, #12
 800b962:	2202      	movs	r2, #2
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f001 fa7d 	bl	800ce66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b96c:	e030      	b.n	800b9d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f001 fa07 	bl	800cd84 <USBD_CtlError>
        ret = USBD_FAIL;
 800b976:	2303      	movs	r3, #3
 800b978:	75fb      	strb	r3, [r7, #23]
      break;
 800b97a:	e029      	b.n	800b9d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b982:	2b03      	cmp	r3, #3
 800b984:	d107      	bne.n	800b996 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b986:	f107 030f 	add.w	r3, r7, #15
 800b98a:	2201      	movs	r2, #1
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f001 fa69 	bl	800ce66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b994:	e01c      	b.n	800b9d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 f9f3 	bl	800cd84 <USBD_CtlError>
        ret = USBD_FAIL;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9a2:	e015      	b.n	800b9d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d00f      	beq.n	800b9ce <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f001 f9e7 	bl	800cd84 <USBD_CtlError>
        ret = USBD_FAIL;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b9ba:	e008      	b.n	800b9ce <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f001 f9e0 	bl	800cd84 <USBD_CtlError>
      ret = USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c8:	e002      	b.n	800b9d0 <USBD_CDC_Setup+0x15c>
      break;
 800b9ca:	bf00      	nop
 800b9cc:	e008      	b.n	800b9e0 <USBD_CDC_Setup+0x16c>
      break;
 800b9ce:	bf00      	nop
    }
    break;
 800b9d0:	e006      	b.n	800b9e0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f001 f9d5 	bl	800cd84 <USBD_CtlError>
    ret = USBD_FAIL;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	75fb      	strb	r3, [r7, #23]
    break;
 800b9de:	bf00      	nop
  }

  return (uint8_t)ret;
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop

0800b9ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e049      	b.n	800baa2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba16:	78fa      	ldrb	r2, [r7, #3]
 800ba18:	6879      	ldr	r1, [r7, #4]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	440b      	add	r3, r1
 800ba24:	3318      	adds	r3, #24
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d029      	beq.n	800ba80 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba2c:	78fa      	ldrb	r2, [r7, #3]
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	440b      	add	r3, r1
 800ba3a:	3318      	adds	r3, #24
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	78f9      	ldrb	r1, [r7, #3]
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	460b      	mov	r3, r1
 800ba44:	00db      	lsls	r3, r3, #3
 800ba46:	1a5b      	subs	r3, r3, r1
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4403      	add	r3, r0
 800ba4c:	3344      	adds	r3, #68	; 0x44
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	fbb2 f1f3 	udiv	r1, r2, r3
 800ba54:	fb03 f301 	mul.w	r3, r3, r1
 800ba58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d110      	bne.n	800ba80 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	4613      	mov	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	440b      	add	r3, r1
 800ba6c:	3318      	adds	r3, #24
 800ba6e:	2200      	movs	r2, #0
 800ba70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ba72:	78f9      	ldrb	r1, [r7, #3]
 800ba74:	2300      	movs	r3, #0
 800ba76:	2200      	movs	r2, #0
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f008 fe5a 	bl	8014732 <USBD_LL_Transmit>
 800ba7e:	e00f      	b.n	800baa0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ba9c:	78fa      	ldrb	r2, [r7, #3]
 800ba9e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800babc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bac8:	2303      	movs	r3, #3
 800baca:	e015      	b.n	800baf8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f008 fe70 	bl	80147b6 <USBD_LL_GetRxDataSize>
 800bad6:	4602      	mov	r2, r0
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800baf2:	4611      	mov	r1, r2
 800baf4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb0e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d015      	beq.n	800bb46 <USBD_CDC_EP0_RxReady+0x46>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb20:	2bff      	cmp	r3, #255	; 0xff
 800bb22:	d010      	beq.n	800bb46 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bb32:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb3a:	b292      	uxth	r2, r2
 800bb3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	22ff      	movs	r2, #255	; 0xff
 800bb42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2243      	movs	r2, #67	; 0x43
 800bb5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bb5e:	4b03      	ldr	r3, [pc, #12]	; (800bb6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	20000094 	.word	0x20000094

0800bb70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2243      	movs	r2, #67	; 0x43
 800bb7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bb7e:	4b03      	ldr	r3, [pc, #12]	; (800bb8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20000050 	.word	0x20000050

0800bb90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2243      	movs	r2, #67	; 0x43
 800bb9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bb9e:	4b03      	ldr	r3, [pc, #12]	; (800bbac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	200000d8 	.word	0x200000d8

0800bbb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	220a      	movs	r2, #10
 800bbbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bbbe:	4b03      	ldr	r3, [pc, #12]	; (800bbcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	2000000c 	.word	0x2000000c

0800bbd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e004      	b.n	800bbee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b087      	sub	sp, #28
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	60f8      	str	r0, [r7, #12]
 800bc02:	60b9      	str	r1, [r7, #8]
 800bc04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	371c      	adds	r7, #28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc3c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bc64:	2301      	movs	r3, #1
 800bc66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e01a      	b.n	800bcac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d114      	bne.n	800bcaa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc9e:	2181      	movs	r1, #129	; 0x81
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f008 fd46 	bl	8014732 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d101      	bne.n	800bcd2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e016      	b.n	800bd00 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7c1b      	ldrb	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d109      	bne.n	800bcee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bce4:	2101      	movs	r1, #1
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f008 fd44 	bl	8014774 <USBD_LL_PrepareReceive>
 800bcec:	e007      	b.n	800bcfe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcf4:	2340      	movs	r3, #64	; 0x40
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f008 fd3b 	bl	8014774 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	4613      	mov	r3, r2
 800bd14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e025      	b.n	800bd6c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	79fa      	ldrb	r2, [r7, #7]
 800bd5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f008 fbb1 	bl	80144c8 <USBD_LL_Init>
 800bd66:	4603      	mov	r3, r0
 800bd68:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e010      	b.n	800bdae <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9c:	f107 020e 	add.w	r2, r7, #14
 800bda0:	4610      	mov	r0, r2
 800bda2:	4798      	blx	r3
 800bda4:	4602      	mov	r2, r0
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f008 fbce 	bl	8014560 <USBD_LL_Start>
 800bdc4:	4603      	mov	r3, r0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b083      	sub	sp, #12
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	460b      	mov	r3, r1
 800bdee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d009      	beq.n	800be12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	78fa      	ldrb	r2, [r7, #3]
 800be08:	4611      	mov	r1, r2
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	4798      	blx	r3
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800be12:	7bfb      	ldrb	r3, [r7, #15]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d007      	beq.n	800be42 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	78fa      	ldrb	r2, [r7, #3]
 800be3c:	4611      	mov	r1, r2
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	4798      	blx	r3
  }

  return USBD_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 ff56 	bl	800cd10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800be72:	461a      	mov	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be80:	f003 031f 	and.w	r3, r3, #31
 800be84:	2b01      	cmp	r3, #1
 800be86:	d00e      	beq.n	800bea6 <USBD_LL_SetupStage+0x5a>
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d302      	bcc.n	800be92 <USBD_LL_SetupStage+0x46>
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d014      	beq.n	800beba <USBD_LL_SetupStage+0x6e>
 800be90:	e01d      	b.n	800bece <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fa18 	bl	800c2d0 <USBD_StdDevReq>
 800bea0:	4603      	mov	r3, r0
 800bea2:	73fb      	strb	r3, [r7, #15]
      break;
 800bea4:	e020      	b.n	800bee8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800beac:	4619      	mov	r1, r3
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fa7c 	bl	800c3ac <USBD_StdItfReq>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73fb      	strb	r3, [r7, #15]
      break;
 800beb8:	e016      	b.n	800bee8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fab8 	bl	800c438 <USBD_StdEPReq>
 800bec8:	4603      	mov	r3, r0
 800beca:	73fb      	strb	r3, [r7, #15]
      break;
 800becc:	e00c      	b.n	800bee8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f008 fb9f 	bl	8014620 <USBD_LL_StallEP>
 800bee2:	4603      	mov	r3, r0
 800bee4:	73fb      	strb	r3, [r7, #15]
      break;
 800bee6:	bf00      	nop
  }

  return ret;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b086      	sub	sp, #24
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	60f8      	str	r0, [r7, #12]
 800befa:	460b      	mov	r3, r1
 800befc:	607a      	str	r2, [r7, #4]
 800befe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf00:	7afb      	ldrb	r3, [r7, #11]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d137      	bne.n	800bf76 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bf0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d14a      	bne.n	800bfae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	689a      	ldr	r2, [r3, #8]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d913      	bls.n	800bf4c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	1ad2      	subs	r2, r2, r3
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	bf28      	it	cs
 800bf3e:	4613      	movcs	r3, r2
 800bf40:	461a      	mov	r2, r3
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 ffd7 	bl	800cef8 <USBD_CtlContinueRx>
 800bf4a:	e030      	b.n	800bfae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00a      	beq.n	800bf6e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d105      	bne.n	800bf6e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 ffd3 	bl	800cf1a <USBD_CtlSendStatus>
 800bf74:	e01b      	b.n	800bfae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d013      	beq.n	800bfaa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d10e      	bne.n	800bfaa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	7afa      	ldrb	r2, [r7, #11]
 800bf96:	4611      	mov	r1, r2
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	4798      	blx	r3
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	e002      	b.n	800bfb0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e000      	b.n	800bfb0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bfc6:	7afb      	ldrb	r3, [r7, #11]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d16a      	bne.n	800c0a2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3314      	adds	r3, #20
 800bfd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	d155      	bne.n	800c088 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	689a      	ldr	r2, [r3, #8]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d914      	bls.n	800c012 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	1ad2      	subs	r2, r2, r3
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	461a      	mov	r2, r3
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f000 ff4c 	bl	800ce9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c004:	2300      	movs	r3, #0
 800c006:	2200      	movs	r2, #0
 800c008:	2100      	movs	r1, #0
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f008 fbb2 	bl	8014774 <USBD_LL_PrepareReceive>
 800c010:	e03a      	b.n	800c088 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	68da      	ldr	r2, [r3, #12]
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d11c      	bne.n	800c058 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c026:	429a      	cmp	r2, r3
 800c028:	d316      	bcc.n	800c058 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c034:	429a      	cmp	r2, r3
 800c036:	d20f      	bcs.n	800c058 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c038:	2200      	movs	r2, #0
 800c03a:	2100      	movs	r1, #0
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 ff2d 	bl	800ce9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c04a:	2300      	movs	r3, #0
 800c04c:	2200      	movs	r2, #0
 800c04e:	2100      	movs	r1, #0
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f008 fb8f 	bl	8014774 <USBD_LL_PrepareReceive>
 800c056:	e017      	b.n	800c088 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00a      	beq.n	800c07a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d105      	bne.n	800c07a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c07a:	2180      	movs	r1, #128	; 0x80
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f008 facf 	bl	8014620 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 ff5c 	bl	800cf40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d123      	bne.n	800c0da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f7ff fe9b 	bl	800bdce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c0a0:	e01b      	b.n	800c0da <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d013      	beq.n	800c0d6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c0b4:	2b03      	cmp	r3, #3
 800c0b6:	d10e      	bne.n	800c0d6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0be:	695b      	ldr	r3, [r3, #20]
 800c0c0:	7afa      	ldrb	r2, [r7, #11]
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	4798      	blx	r3
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	e002      	b.n	800c0dc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e000      	b.n	800c0dc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c110:	2b00      	cmp	r3, #0
 800c112:	d009      	beq.n	800c128 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	6852      	ldr	r2, [r2, #4]
 800c120:	b2d2      	uxtb	r2, r2
 800c122:	4611      	mov	r1, r2
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c128:	2340      	movs	r3, #64	; 0x40
 800c12a:	2200      	movs	r2, #0
 800c12c:	2100      	movs	r1, #0
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f008 fa31 	bl	8014596 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2240      	movs	r2, #64	; 0x40
 800c140:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c144:	2340      	movs	r3, #64	; 0x40
 800c146:	2200      	movs	r2, #0
 800c148:	2180      	movs	r1, #128	; 0x80
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f008 fa23 	bl	8014596 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2240      	movs	r2, #64	; 0x40
 800c15a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	460b      	mov	r3, r1
 800c170:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	78fa      	ldrb	r2, [r7, #3]
 800c176:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2204      	movs	r2, #4
 800c19e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d105      	bne.n	800c1ce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d10b      	bne.n	800c206 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d005      	beq.n	800c206 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c200:	69db      	ldr	r3, [r3, #28]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b083      	sub	sp, #12
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	460b      	mov	r3, r1
 800c234:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c270:	2b00      	cmp	r3, #0
 800c272:	d009      	beq.n	800c288 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	6852      	ldr	r2, [r2, #4]
 800c280:	b2d2      	uxtb	r2, r2
 800c282:	4611      	mov	r1, r2
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	4798      	blx	r3
  }

  return USBD_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c292:	b480      	push	{r7}
 800c294:	b087      	sub	sp, #28
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c2b0:	8a3b      	ldrh	r3, [r7, #16]
 800c2b2:	021b      	lsls	r3, r3, #8
 800c2b4:	b21a      	sxth	r2, r3
 800c2b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	b21b      	sxth	r3, r3
 800c2be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c2c0:	89fb      	ldrh	r3, [r7, #14]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	371c      	adds	r7, #28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
	...

0800c2d0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2e6:	2b20      	cmp	r3, #32
 800c2e8:	d004      	beq.n	800c2f4 <USBD_StdDevReq+0x24>
 800c2ea:	2b40      	cmp	r3, #64	; 0x40
 800c2ec:	d002      	beq.n	800c2f4 <USBD_StdDevReq+0x24>
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00a      	beq.n	800c308 <USBD_StdDevReq+0x38>
 800c2f2:	e050      	b.n	800c396 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	4798      	blx	r3
 800c302:	4603      	mov	r3, r0
 800c304:	73fb      	strb	r3, [r7, #15]
    break;
 800c306:	e04b      	b.n	800c3a0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	785b      	ldrb	r3, [r3, #1]
 800c30c:	2b09      	cmp	r3, #9
 800c30e:	d83c      	bhi.n	800c38a <USBD_StdDevReq+0xba>
 800c310:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <USBD_StdDevReq+0x48>)
 800c312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c316:	bf00      	nop
 800c318:	0800c36d 	.word	0x0800c36d
 800c31c:	0800c381 	.word	0x0800c381
 800c320:	0800c38b 	.word	0x0800c38b
 800c324:	0800c377 	.word	0x0800c377
 800c328:	0800c38b 	.word	0x0800c38b
 800c32c:	0800c34b 	.word	0x0800c34b
 800c330:	0800c341 	.word	0x0800c341
 800c334:	0800c38b 	.word	0x0800c38b
 800c338:	0800c363 	.word	0x0800c363
 800c33c:	0800c355 	.word	0x0800c355
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f9ce 	bl	800c6e4 <USBD_GetDescriptor>
      break;
 800c348:	e024      	b.n	800c394 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fb5d 	bl	800ca0c <USBD_SetAddress>
      break;
 800c352:	e01f      	b.n	800c394 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fb9a 	bl	800ca90 <USBD_SetConfig>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]
      break;
 800c360:	e018      	b.n	800c394 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fc37 	bl	800cbd8 <USBD_GetConfig>
      break;
 800c36a:	e013      	b.n	800c394 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c36c:	6839      	ldr	r1, [r7, #0]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fc66 	bl	800cc40 <USBD_GetStatus>
      break;
 800c374:	e00e      	b.n	800c394 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fc94 	bl	800cca6 <USBD_SetFeature>
      break;
 800c37e:	e009      	b.n	800c394 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fca3 	bl	800ccce <USBD_ClrFeature>
      break;
 800c388:	e004      	b.n	800c394 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fcf9 	bl	800cd84 <USBD_CtlError>
      break;
 800c392:	bf00      	nop
    }
    break;
 800c394:	e004      	b.n	800c3a0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fcf3 	bl	800cd84 <USBD_CtlError>
    break;
 800c39e:	bf00      	nop
  }

  return ret;
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop

0800c3ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3c2:	2b20      	cmp	r3, #32
 800c3c4:	d003      	beq.n	800c3ce <USBD_StdItfReq+0x22>
 800c3c6:	2b40      	cmp	r3, #64	; 0x40
 800c3c8:	d001      	beq.n	800c3ce <USBD_StdItfReq+0x22>
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d12a      	bne.n	800c424 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d81d      	bhi.n	800c416 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	889b      	ldrh	r3, [r3, #4]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d813      	bhi.n	800c40c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	4798      	blx	r3
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	88db      	ldrh	r3, [r3, #6]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d110      	bne.n	800c420 <USBD_StdItfReq+0x74>
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10d      	bne.n	800c420 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fd88 	bl	800cf1a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c40a:	e009      	b.n	800c420 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fcb8 	bl	800cd84 <USBD_CtlError>
      break;
 800c414:	e004      	b.n	800c420 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fcb3 	bl	800cd84 <USBD_CtlError>
      break;
 800c41e:	e000      	b.n	800c422 <USBD_StdItfReq+0x76>
      break;
 800c420:	bf00      	nop
    }
    break;
 800c422:	e004      	b.n	800c42e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fcac 	bl	800cd84 <USBD_CtlError>
    break;
 800c42c:	bf00      	nop
  }

  return ret;
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	889b      	ldrh	r3, [r3, #4]
 800c44a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c454:	2b20      	cmp	r3, #32
 800c456:	d004      	beq.n	800c462 <USBD_StdEPReq+0x2a>
 800c458:	2b40      	cmp	r3, #64	; 0x40
 800c45a:	d002      	beq.n	800c462 <USBD_StdEPReq+0x2a>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00a      	beq.n	800c476 <USBD_StdEPReq+0x3e>
 800c460:	e135      	b.n	800c6ce <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	4798      	blx	r3
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]
    break;
 800c474:	e130      	b.n	800c6d8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	785b      	ldrb	r3, [r3, #1]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d03e      	beq.n	800c4fc <USBD_StdEPReq+0xc4>
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d002      	beq.n	800c488 <USBD_StdEPReq+0x50>
 800c482:	2b00      	cmp	r3, #0
 800c484:	d077      	beq.n	800c576 <USBD_StdEPReq+0x13e>
 800c486:	e11c      	b.n	800c6c2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d002      	beq.n	800c498 <USBD_StdEPReq+0x60>
 800c492:	2b03      	cmp	r3, #3
 800c494:	d015      	beq.n	800c4c2 <USBD_StdEPReq+0x8a>
 800c496:	e02b      	b.n	800c4f0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c498:	7bbb      	ldrb	r3, [r7, #14]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00c      	beq.n	800c4b8 <USBD_StdEPReq+0x80>
 800c49e:	7bbb      	ldrb	r3, [r7, #14]
 800c4a0:	2b80      	cmp	r3, #128	; 0x80
 800c4a2:	d009      	beq.n	800c4b8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f008 f8b9 	bl	8014620 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ae:	2180      	movs	r1, #128	; 0x80
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f008 f8b5 	bl	8014620 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c4b6:	e020      	b.n	800c4fa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fc62 	bl	800cd84 <USBD_CtlError>
        break;
 800c4c0:	e01b      	b.n	800c4fa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	885b      	ldrh	r3, [r3, #2]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10e      	bne.n	800c4e8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4ca:	7bbb      	ldrb	r3, [r7, #14]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <USBD_StdEPReq+0xb0>
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
 800c4d2:	2b80      	cmp	r3, #128	; 0x80
 800c4d4:	d008      	beq.n	800c4e8 <USBD_StdEPReq+0xb0>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	88db      	ldrh	r3, [r3, #6]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d104      	bne.n	800c4e8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f008 f89c 	bl	8014620 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fd16 	bl	800cf1a <USBD_CtlSendStatus>

        break;
 800c4ee:	e004      	b.n	800c4fa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fc46 	bl	800cd84 <USBD_CtlError>
        break;
 800c4f8:	bf00      	nop
      }
      break;
 800c4fa:	e0e7      	b.n	800c6cc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c502:	2b02      	cmp	r3, #2
 800c504:	d002      	beq.n	800c50c <USBD_StdEPReq+0xd4>
 800c506:	2b03      	cmp	r3, #3
 800c508:	d015      	beq.n	800c536 <USBD_StdEPReq+0xfe>
 800c50a:	e02d      	b.n	800c568 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00c      	beq.n	800c52c <USBD_StdEPReq+0xf4>
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	2b80      	cmp	r3, #128	; 0x80
 800c516:	d009      	beq.n	800c52c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	4619      	mov	r1, r3
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f008 f87f 	bl	8014620 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c522:	2180      	movs	r1, #128	; 0x80
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f008 f87b 	bl	8014620 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c52a:	e023      	b.n	800c574 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fc28 	bl	800cd84 <USBD_CtlError>
        break;
 800c534:	e01e      	b.n	800c574 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	885b      	ldrh	r3, [r3, #2]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d119      	bne.n	800c572 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
 800c540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c548:	7bbb      	ldrb	r3, [r7, #14]
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f008 f886 	bl	801465e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fce1 	bl	800cf1a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	4798      	blx	r3
        }
        break;
 800c566:	e004      	b.n	800c572 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fc0a 	bl	800cd84 <USBD_CtlError>
        break;
 800c570:	e000      	b.n	800c574 <USBD_StdEPReq+0x13c>
        break;
 800c572:	bf00      	nop
      }
      break;
 800c574:	e0aa      	b.n	800c6cc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d002      	beq.n	800c586 <USBD_StdEPReq+0x14e>
 800c580:	2b03      	cmp	r3, #3
 800c582:	d032      	beq.n	800c5ea <USBD_StdEPReq+0x1b2>
 800c584:	e097      	b.n	800c6b6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c586:	7bbb      	ldrb	r3, [r7, #14]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d007      	beq.n	800c59c <USBD_StdEPReq+0x164>
 800c58c:	7bbb      	ldrb	r3, [r7, #14]
 800c58e:	2b80      	cmp	r3, #128	; 0x80
 800c590:	d004      	beq.n	800c59c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fbf5 	bl	800cd84 <USBD_CtlError>
          break;
 800c59a:	e091      	b.n	800c6c0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c59c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da0b      	bge.n	800c5bc <USBD_StdEPReq+0x184>
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
 800c5a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	3310      	adds	r3, #16
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	e00b      	b.n	800c5d4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c5bc:	7bbb      	ldrb	r3, [r7, #14]
 800c5be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	4413      	add	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fc3f 	bl	800ce66 <USBD_CtlSendData>
        break;
 800c5e8:	e06a      	b.n	800c6c0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c5ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	da11      	bge.n	800c616 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
 800c5f4:	f003 020f 	and.w	r2, r3, #15
 800c5f8:	6879      	ldr	r1, [r7, #4]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	4413      	add	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	440b      	add	r3, r1
 800c604:	3324      	adds	r3, #36	; 0x24
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d117      	bne.n	800c63c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fbb8 	bl	800cd84 <USBD_CtlError>
            break;
 800c614:	e054      	b.n	800c6c0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c616:	7bbb      	ldrb	r3, [r7, #14]
 800c618:	f003 020f 	and.w	r2, r3, #15
 800c61c:	6879      	ldr	r1, [r7, #4]
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d104      	bne.n	800c63c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fba5 	bl	800cd84 <USBD_CtlError>
            break;
 800c63a:	e041      	b.n	800c6c0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c63c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c640:	2b00      	cmp	r3, #0
 800c642:	da0b      	bge.n	800c65c <USBD_StdEPReq+0x224>
 800c644:	7bbb      	ldrb	r3, [r7, #14]
 800c646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c64a:	4613      	mov	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	3310      	adds	r3, #16
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	4413      	add	r3, r2
 800c658:	3304      	adds	r3, #4
 800c65a:	e00b      	b.n	800c674 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
 800c65e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	4413      	add	r3, r2
 800c672:	3304      	adds	r3, #4
 800c674:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c676:	7bbb      	ldrb	r3, [r7, #14]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <USBD_StdEPReq+0x24a>
 800c67c:	7bbb      	ldrb	r3, [r7, #14]
 800c67e:	2b80      	cmp	r3, #128	; 0x80
 800c680:	d103      	bne.n	800c68a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	e00e      	b.n	800c6a8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f008 f804 	bl	801469c <USBD_LL_IsStallEP>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2201      	movs	r2, #1
 800c69e:	601a      	str	r2, [r3, #0]
 800c6a0:	e002      	b.n	800c6a8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fbd9 	bl	800ce66 <USBD_CtlSendData>
          break;
 800c6b4:	e004      	b.n	800c6c0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fb63 	bl	800cd84 <USBD_CtlError>
        break;
 800c6be:	bf00      	nop
      }
      break;
 800c6c0:	e004      	b.n	800c6cc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fb5d 	bl	800cd84 <USBD_CtlError>
      break;
 800c6ca:	bf00      	nop
    }
    break;
 800c6cc:	e004      	b.n	800c6d8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fb57 	bl	800cd84 <USBD_CtlError>
    break;
 800c6d6:	bf00      	nop
  }

  return ret;
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	885b      	ldrh	r3, [r3, #2]
 800c6fe:	0a1b      	lsrs	r3, r3, #8
 800c700:	b29b      	uxth	r3, r3
 800c702:	3b01      	subs	r3, #1
 800c704:	2b0e      	cmp	r3, #14
 800c706:	f200 8152 	bhi.w	800c9ae <USBD_GetDescriptor+0x2ca>
 800c70a:	a201      	add	r2, pc, #4	; (adr r2, 800c710 <USBD_GetDescriptor+0x2c>)
 800c70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c710:	0800c781 	.word	0x0800c781
 800c714:	0800c799 	.word	0x0800c799
 800c718:	0800c7d9 	.word	0x0800c7d9
 800c71c:	0800c9af 	.word	0x0800c9af
 800c720:	0800c9af 	.word	0x0800c9af
 800c724:	0800c94f 	.word	0x0800c94f
 800c728:	0800c97b 	.word	0x0800c97b
 800c72c:	0800c9af 	.word	0x0800c9af
 800c730:	0800c9af 	.word	0x0800c9af
 800c734:	0800c9af 	.word	0x0800c9af
 800c738:	0800c9af 	.word	0x0800c9af
 800c73c:	0800c9af 	.word	0x0800c9af
 800c740:	0800c9af 	.word	0x0800c9af
 800c744:	0800c9af 	.word	0x0800c9af
 800c748:	0800c74d 	.word	0x0800c74d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00b      	beq.n	800c770 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c75e:	69db      	ldr	r3, [r3, #28]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	7c12      	ldrb	r2, [r2, #16]
 800c764:	f107 0108 	add.w	r1, r7, #8
 800c768:	4610      	mov	r0, r2
 800c76a:	4798      	blx	r3
 800c76c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c76e:	e126      	b.n	800c9be <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fb06 	bl	800cd84 <USBD_CtlError>
      err++;
 800c778:	7afb      	ldrb	r3, [r7, #11]
 800c77a:	3301      	adds	r3, #1
 800c77c:	72fb      	strb	r3, [r7, #11]
    break;
 800c77e:	e11e      	b.n	800c9be <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	7c12      	ldrb	r2, [r2, #16]
 800c78c:	f107 0108 	add.w	r1, r7, #8
 800c790:	4610      	mov	r0, r2
 800c792:	4798      	blx	r3
 800c794:	60f8      	str	r0, [r7, #12]
    break;
 800c796:	e112      	b.n	800c9be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7c1b      	ldrb	r3, [r3, #16]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10d      	bne.n	800c7bc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a8:	f107 0208 	add.w	r2, r7, #8
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	4798      	blx	r3
 800c7b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c7ba:	e100      	b.n	800c9be <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c4:	f107 0208 	add.w	r2, r7, #8
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	4798      	blx	r3
 800c7cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	701a      	strb	r2, [r3, #0]
    break;
 800c7d6:	e0f2      	b.n	800c9be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	885b      	ldrh	r3, [r3, #2]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	2b05      	cmp	r3, #5
 800c7e0:	f200 80ac 	bhi.w	800c93c <USBD_GetDescriptor+0x258>
 800c7e4:	a201      	add	r2, pc, #4	; (adr r2, 800c7ec <USBD_GetDescriptor+0x108>)
 800c7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ea:	bf00      	nop
 800c7ec:	0800c805 	.word	0x0800c805
 800c7f0:	0800c839 	.word	0x0800c839
 800c7f4:	0800c86d 	.word	0x0800c86d
 800c7f8:	0800c8a1 	.word	0x0800c8a1
 800c7fc:	0800c8d5 	.word	0x0800c8d5
 800c800:	0800c909 	.word	0x0800c909
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	7c12      	ldrb	r2, [r2, #16]
 800c81c:	f107 0108 	add.w	r1, r7, #8
 800c820:	4610      	mov	r0, r2
 800c822:	4798      	blx	r3
 800c824:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c826:	e091      	b.n	800c94c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c828:	6839      	ldr	r1, [r7, #0]
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 faaa 	bl	800cd84 <USBD_CtlError>
        err++;
 800c830:	7afb      	ldrb	r3, [r7, #11]
 800c832:	3301      	adds	r3, #1
 800c834:	72fb      	strb	r3, [r7, #11]
      break;
 800c836:	e089      	b.n	800c94c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00b      	beq.n	800c85c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	7c12      	ldrb	r2, [r2, #16]
 800c850:	f107 0108 	add.w	r1, r7, #8
 800c854:	4610      	mov	r0, r2
 800c856:	4798      	blx	r3
 800c858:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c85a:	e077      	b.n	800c94c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fa90 	bl	800cd84 <USBD_CtlError>
        err++;
 800c864:	7afb      	ldrb	r3, [r7, #11]
 800c866:	3301      	adds	r3, #1
 800c868:	72fb      	strb	r3, [r7, #11]
      break;
 800c86a:	e06f      	b.n	800c94c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00b      	beq.n	800c890 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	7c12      	ldrb	r2, [r2, #16]
 800c884:	f107 0108 	add.w	r1, r7, #8
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
 800c88c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c88e:	e05d      	b.n	800c94c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fa76 	bl	800cd84 <USBD_CtlError>
        err++;
 800c898:	7afb      	ldrb	r3, [r7, #11]
 800c89a:	3301      	adds	r3, #1
 800c89c:	72fb      	strb	r3, [r7, #11]
      break;
 800c89e:	e055      	b.n	800c94c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00b      	beq.n	800c8c4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	7c12      	ldrb	r2, [r2, #16]
 800c8b8:	f107 0108 	add.w	r1, r7, #8
 800c8bc:	4610      	mov	r0, r2
 800c8be:	4798      	blx	r3
 800c8c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8c2:	e043      	b.n	800c94c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fa5c 	bl	800cd84 <USBD_CtlError>
        err++;
 800c8cc:	7afb      	ldrb	r3, [r7, #11]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	72fb      	strb	r3, [r7, #11]
      break;
 800c8d2:	e03b      	b.n	800c94c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00b      	beq.n	800c8f8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	7c12      	ldrb	r2, [r2, #16]
 800c8ec:	f107 0108 	add.w	r1, r7, #8
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	4798      	blx	r3
 800c8f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8f6:	e029      	b.n	800c94c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fa42 	bl	800cd84 <USBD_CtlError>
        err++;
 800c900:	7afb      	ldrb	r3, [r7, #11]
 800c902:	3301      	adds	r3, #1
 800c904:	72fb      	strb	r3, [r7, #11]
      break;
 800c906:	e021      	b.n	800c94c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00b      	beq.n	800c92c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	7c12      	ldrb	r2, [r2, #16]
 800c920:	f107 0108 	add.w	r1, r7, #8
 800c924:	4610      	mov	r0, r2
 800c926:	4798      	blx	r3
 800c928:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c92a:	e00f      	b.n	800c94c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c92c:	6839      	ldr	r1, [r7, #0]
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fa28 	bl	800cd84 <USBD_CtlError>
        err++;
 800c934:	7afb      	ldrb	r3, [r7, #11]
 800c936:	3301      	adds	r3, #1
 800c938:	72fb      	strb	r3, [r7, #11]
      break;
 800c93a:	e007      	b.n	800c94c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c93c:	6839      	ldr	r1, [r7, #0]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fa20 	bl	800cd84 <USBD_CtlError>
      err++;
 800c944:	7afb      	ldrb	r3, [r7, #11]
 800c946:	3301      	adds	r3, #1
 800c948:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c94a:	bf00      	nop
    }
    break;
 800c94c:	e037      	b.n	800c9be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7c1b      	ldrb	r3, [r3, #16]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d109      	bne.n	800c96a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95e:	f107 0208 	add.w	r2, r7, #8
 800c962:	4610      	mov	r0, r2
 800c964:	4798      	blx	r3
 800c966:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c968:	e029      	b.n	800c9be <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fa09 	bl	800cd84 <USBD_CtlError>
      err++;
 800c972:	7afb      	ldrb	r3, [r7, #11]
 800c974:	3301      	adds	r3, #1
 800c976:	72fb      	strb	r3, [r7, #11]
    break;
 800c978:	e021      	b.n	800c9be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	7c1b      	ldrb	r3, [r3, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10d      	bne.n	800c99e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c98a:	f107 0208 	add.w	r2, r7, #8
 800c98e:	4610      	mov	r0, r2
 800c990:	4798      	blx	r3
 800c992:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3301      	adds	r3, #1
 800c998:	2207      	movs	r2, #7
 800c99a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c99c:	e00f      	b.n	800c9be <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f9ef 	bl	800cd84 <USBD_CtlError>
      err++;
 800c9a6:	7afb      	ldrb	r3, [r7, #11]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	72fb      	strb	r3, [r7, #11]
    break;
 800c9ac:	e007      	b.n	800c9be <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f9e7 	bl	800cd84 <USBD_CtlError>
    err++;
 800c9b6:	7afb      	ldrb	r3, [r7, #11]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	72fb      	strb	r3, [r7, #11]
    break;
 800c9bc:	bf00      	nop
  }

  if (err != 0U)
 800c9be:	7afb      	ldrb	r3, [r7, #11]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d11e      	bne.n	800ca02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	88db      	ldrh	r3, [r3, #6]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d016      	beq.n	800c9fa <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c9cc:	893b      	ldrh	r3, [r7, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00e      	beq.n	800c9f0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	88da      	ldrh	r2, [r3, #6]
 800c9d6:	893b      	ldrh	r3, [r7, #8]
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	bf28      	it	cs
 800c9dc:	4613      	movcs	r3, r2
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9e2:	893b      	ldrh	r3, [r7, #8]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	68f9      	ldr	r1, [r7, #12]
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fa3c 	bl	800ce66 <USBD_CtlSendData>
 800c9ee:	e009      	b.n	800ca04 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c9f0:	6839      	ldr	r1, [r7, #0]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f9c6 	bl	800cd84 <USBD_CtlError>
 800c9f8:	e004      	b.n	800ca04 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fa8d 	bl	800cf1a <USBD_CtlSendStatus>
 800ca00:	e000      	b.n	800ca04 <USBD_GetDescriptor+0x320>
    return;
 800ca02:	bf00      	nop
    }
  }
}
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop

0800ca0c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	889b      	ldrh	r3, [r3, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d130      	bne.n	800ca80 <USBD_SetAddress+0x74>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	88db      	ldrh	r3, [r3, #6]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d12c      	bne.n	800ca80 <USBD_SetAddress+0x74>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	885b      	ldrh	r3, [r3, #2]
 800ca2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ca2c:	d828      	bhi.n	800ca80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d104      	bne.n	800ca4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ca44:	6839      	ldr	r1, [r7, #0]
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f99c 	bl	800cd84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca4c:	e01c      	b.n	800ca88 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	7bfa      	ldrb	r2, [r7, #15]
 800ca52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f007 fe4a 	bl	80146f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 fa5a 	bl	800cf1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2202      	movs	r2, #2
 800ca70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca74:	e008      	b.n	800ca88 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca7e:	e003      	b.n	800ca88 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f97e 	bl	800cd84 <USBD_CtlError>
  }
}
 800ca88:	bf00      	nop
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	885b      	ldrh	r3, [r3, #2]
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	4b4b      	ldr	r3, [pc, #300]	; (800cbd4 <USBD_SetConfig+0x144>)
 800caa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800caa8:	4b4a      	ldr	r3, [pc, #296]	; (800cbd4 <USBD_SetConfig+0x144>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d905      	bls.n	800cabc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f966 	bl	800cd84 <USBD_CtlError>
    return USBD_FAIL;
 800cab8:	2303      	movs	r3, #3
 800caba:	e087      	b.n	800cbcc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d002      	beq.n	800cacc <USBD_SetConfig+0x3c>
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	d025      	beq.n	800cb16 <USBD_SetConfig+0x86>
 800caca:	e071      	b.n	800cbb0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cacc:	4b41      	ldr	r3, [pc, #260]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d01c      	beq.n	800cb0e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cad4:	4b3f      	ldr	r3, [pc, #252]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	461a      	mov	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cade:	4b3d      	ldr	r3, [pc, #244]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff f97d 	bl	800bde4 <USBD_SetClassConfig>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d004      	beq.n	800cafe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f944 	bl	800cd84 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cafc:	e065      	b.n	800cbca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fa0b 	bl	800cf1a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2203      	movs	r2, #3
 800cb08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cb0c:	e05d      	b.n	800cbca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fa03 	bl	800cf1a <USBD_CtlSendStatus>
    break;
 800cb14:	e059      	b.n	800cbca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cb16:	4b2f      	ldr	r3, [pc, #188]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d112      	bne.n	800cb44 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2202      	movs	r2, #2
 800cb22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cb26:	4b2b      	ldr	r3, [pc, #172]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb30:	4b28      	ldr	r3, [pc, #160]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff f970 	bl	800be1c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f9ec 	bl	800cf1a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cb42:	e042      	b.n	800cbca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cb44:	4b23      	ldr	r3, [pc, #140]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d02a      	beq.n	800cba8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	4619      	mov	r1, r3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7ff f95e 	bl	800be1c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cb60:	4b1c      	ldr	r3, [pc, #112]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	461a      	mov	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb6a:	4b1a      	ldr	r3, [pc, #104]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff f937 	bl	800bde4 <USBD_SetClassConfig>
 800cb76:	4603      	mov	r3, r0
 800cb78:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cb7a:	7bfb      	ldrb	r3, [r7, #15]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00f      	beq.n	800cba0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f8fe 	bl	800cd84 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	4619      	mov	r1, r3
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7ff f943 	bl	800be1c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2202      	movs	r2, #2
 800cb9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cb9e:	e014      	b.n	800cbca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f9ba 	bl	800cf1a <USBD_CtlSendStatus>
    break;
 800cba6:	e010      	b.n	800cbca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f9b6 	bl	800cf1a <USBD_CtlSendStatus>
    break;
 800cbae:	e00c      	b.n	800cbca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f8e6 	bl	800cd84 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbb8:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <USBD_SetConfig+0x144>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7ff f92c 	bl	800be1c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc8:	bf00      	nop
  }

  return ret;
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20000290 	.word	0x20000290

0800cbd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	88db      	ldrh	r3, [r3, #6]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d004      	beq.n	800cbf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f8c9 	bl	800cd84 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cbf2:	e021      	b.n	800cc38 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	db17      	blt.n	800cc2e <USBD_GetConfig+0x56>
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	dd02      	ble.n	800cc08 <USBD_GetConfig+0x30>
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d00b      	beq.n	800cc1e <USBD_GetConfig+0x46>
 800cc06:	e012      	b.n	800cc2e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3308      	adds	r3, #8
 800cc12:	2201      	movs	r2, #1
 800cc14:	4619      	mov	r1, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f925 	bl	800ce66 <USBD_CtlSendData>
      break;
 800cc1c:	e00c      	b.n	800cc38 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	3304      	adds	r3, #4
 800cc22:	2201      	movs	r2, #1
 800cc24:	4619      	mov	r1, r3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f91d 	bl	800ce66 <USBD_CtlSendData>
      break;
 800cc2c:	e004      	b.n	800cc38 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f8a7 	bl	800cd84 <USBD_CtlError>
      break;
 800cc36:	bf00      	nop
}
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc50:	3b01      	subs	r3, #1
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d81e      	bhi.n	800cc94 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	88db      	ldrh	r3, [r3, #6]
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d004      	beq.n	800cc68 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f88f 	bl	800cd84 <USBD_CtlError>
      break;
 800cc66:	e01a      	b.n	800cc9e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d005      	beq.n	800cc84 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	f043 0202 	orr.w	r2, r3, #2
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	330c      	adds	r3, #12
 800cc88:	2202      	movs	r2, #2
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f8ea 	bl	800ce66 <USBD_CtlSendData>
    break;
 800cc92:	e004      	b.n	800cc9e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f874 	bl	800cd84 <USBD_CtlError>
    break;
 800cc9c:	bf00      	nop
  }
}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	885b      	ldrh	r3, [r3, #2]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d106      	bne.n	800ccc6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f92a 	bl	800cf1a <USBD_CtlSendStatus>
  }
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccde:	3b01      	subs	r3, #1
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d80b      	bhi.n	800ccfc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	885b      	ldrh	r3, [r3, #2]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d10c      	bne.n	800cd06 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f910 	bl	800cf1a <USBD_CtlSendStatus>
      }
      break;
 800ccfa:	e004      	b.n	800cd06 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f840 	bl	800cd84 <USBD_CtlError>
      break;
 800cd04:	e000      	b.n	800cd08 <USBD_ClrFeature+0x3a>
      break;
 800cd06:	bf00      	nop
  }
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	781a      	ldrb	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	781a      	ldrb	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	3301      	adds	r3, #1
 800cd38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f7ff faa9 	bl	800c292 <SWAPBYTE>
 800cd40:	4603      	mov	r3, r0
 800cd42:	461a      	mov	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	3301      	adds	r3, #1
 800cd52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f7ff fa9c 	bl	800c292 <SWAPBYTE>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f7ff fa8f 	bl	800c292 <SWAPBYTE>
 800cd74:	4603      	mov	r3, r0
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	80da      	strh	r2, [r3, #6]
}
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd8e:	2180      	movs	r1, #128	; 0x80
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f007 fc45 	bl	8014620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd96:	2100      	movs	r1, #0
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f007 fc41 	bl	8014620 <USBD_LL_StallEP>
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b086      	sub	sp, #24
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	60f8      	str	r0, [r7, #12]
 800cdae:	60b9      	str	r1, [r7, #8]
 800cdb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d036      	beq.n	800ce2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cdc0:	6938      	ldr	r0, [r7, #16]
 800cdc2:	f000 f836 	bl	800ce32 <USBD_GetLen>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	3301      	adds	r3, #1
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	4413      	add	r3, r2
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	7812      	ldrb	r2, [r2, #0]
 800cdde:	701a      	strb	r2, [r3, #0]
  idx++;
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
 800cde2:	3301      	adds	r3, #1
 800cde4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	4413      	add	r3, r2
 800cdec:	2203      	movs	r2, #3
 800cdee:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdf0:	7dfb      	ldrb	r3, [r7, #23]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdf6:	e013      	b.n	800ce20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	7812      	ldrb	r2, [r2, #0]
 800ce02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	3301      	adds	r3, #1
 800ce08:	613b      	str	r3, [r7, #16]
    idx++;
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce10:	7dfb      	ldrb	r3, [r7, #23]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	4413      	add	r3, r2
 800ce16:	2200      	movs	r2, #0
 800ce18:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1e7      	bne.n	800cdf8 <USBD_GetString+0x52>
 800ce28:	e000      	b.n	800ce2c <USBD_GetString+0x86>
    return;
 800ce2a:	bf00      	nop
  }
}
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b085      	sub	sp, #20
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce42:	e005      	b.n	800ce50 <USBD_GetLen+0x1e>
  {
    len++;
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
 800ce46:	3301      	adds	r3, #1
 800ce48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1f5      	bne.n	800ce44 <USBD_GetLen+0x12>
  }

  return len;
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3714      	adds	r7, #20
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr

0800ce66 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b084      	sub	sp, #16
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	60f8      	str	r0, [r7, #12]
 800ce6e:	60b9      	str	r1, [r7, #8]
 800ce70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2202      	movs	r2, #2
 800ce76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f007 fc50 	bl	8014732 <USBD_LL_Transmit>

  return USBD_OK;
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	2100      	movs	r1, #0
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f007 fc3f 	bl	8014732 <USBD_LL_Transmit>

  return USBD_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2203      	movs	r2, #3
 800cece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	2100      	movs	r1, #0
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f007 fc43 	bl	8014774 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	2100      	movs	r1, #0
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f007 fc32 	bl	8014774 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b082      	sub	sp, #8
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2204      	movs	r2, #4
 800cf26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	2100      	movs	r1, #0
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f007 fbfe 	bl	8014732 <USBD_LL_Transmit>

  return USBD_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2205      	movs	r2, #5
 800cf4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf50:	2300      	movs	r3, #0
 800cf52:	2200      	movs	r2, #0
 800cf54:	2100      	movs	r1, #0
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f007 fc0c 	bl	8014774 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	4a08      	ldr	r2, [pc, #32]	; (800cf98 <disk_status+0x30>)
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4413      	add	r3, r2
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	79fa      	ldrb	r2, [r7, #7]
 800cf80:	4905      	ldr	r1, [pc, #20]	; (800cf98 <disk_status+0x30>)
 800cf82:	440a      	add	r2, r1
 800cf84:	7a12      	ldrb	r2, [r2, #8]
 800cf86:	4610      	mov	r0, r2
 800cf88:	4798      	blx	r3
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	200002bc 	.word	0x200002bc

0800cf9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	4a0d      	ldr	r2, [pc, #52]	; (800cfe4 <disk_initialize+0x48>)
 800cfae:	5cd3      	ldrb	r3, [r2, r3]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d111      	bne.n	800cfd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cfb4:	79fb      	ldrb	r3, [r7, #7]
 800cfb6:	4a0b      	ldr	r2, [pc, #44]	; (800cfe4 <disk_initialize+0x48>)
 800cfb8:	2101      	movs	r1, #1
 800cfba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cfbc:	79fb      	ldrb	r3, [r7, #7]
 800cfbe:	4a09      	ldr	r2, [pc, #36]	; (800cfe4 <disk_initialize+0x48>)
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4413      	add	r3, r2
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	79fa      	ldrb	r2, [r7, #7]
 800cfca:	4906      	ldr	r1, [pc, #24]	; (800cfe4 <disk_initialize+0x48>)
 800cfcc:	440a      	add	r2, r1
 800cfce:	7a12      	ldrb	r2, [r2, #8]
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	200002bc 	.word	0x200002bc

0800cfe8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cfe8:	b590      	push	{r4, r7, lr}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60b9      	str	r1, [r7, #8]
 800cff0:	607a      	str	r2, [r7, #4]
 800cff2:	603b      	str	r3, [r7, #0]
 800cff4:	4603      	mov	r3, r0
 800cff6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cff8:	7bfb      	ldrb	r3, [r7, #15]
 800cffa:	4a0a      	ldr	r2, [pc, #40]	; (800d024 <disk_read+0x3c>)
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	4413      	add	r3, r2
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	689c      	ldr	r4, [r3, #8]
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	4a07      	ldr	r2, [pc, #28]	; (800d024 <disk_read+0x3c>)
 800d008:	4413      	add	r3, r2
 800d00a:	7a18      	ldrb	r0, [r3, #8]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	47a0      	blx	r4
 800d014:	4603      	mov	r3, r0
 800d016:	75fb      	strb	r3, [r7, #23]
  return res;
 800d018:	7dfb      	ldrb	r3, [r7, #23]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	371c      	adds	r7, #28
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd90      	pop	{r4, r7, pc}
 800d022:	bf00      	nop
 800d024:	200002bc 	.word	0x200002bc

0800d028 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d028:	b590      	push	{r4, r7, lr}
 800d02a:	b087      	sub	sp, #28
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60b9      	str	r1, [r7, #8]
 800d030:	607a      	str	r2, [r7, #4]
 800d032:	603b      	str	r3, [r7, #0]
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	4a0a      	ldr	r2, [pc, #40]	; (800d064 <disk_write+0x3c>)
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	68dc      	ldr	r4, [r3, #12]
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	4a07      	ldr	r2, [pc, #28]	; (800d064 <disk_write+0x3c>)
 800d048:	4413      	add	r3, r2
 800d04a:	7a18      	ldrb	r0, [r3, #8]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	68b9      	ldr	r1, [r7, #8]
 800d052:	47a0      	blx	r4
 800d054:	4603      	mov	r3, r0
 800d056:	75fb      	strb	r3, [r7, #23]
  return res;
 800d058:	7dfb      	ldrb	r3, [r7, #23]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd90      	pop	{r4, r7, pc}
 800d062:	bf00      	nop
 800d064:	200002bc 	.word	0x200002bc

0800d068 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	4603      	mov	r3, r0
 800d070:	603a      	str	r2, [r7, #0]
 800d072:	71fb      	strb	r3, [r7, #7]
 800d074:	460b      	mov	r3, r1
 800d076:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	4a09      	ldr	r2, [pc, #36]	; (800d0a0 <disk_ioctl+0x38>)
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	79fa      	ldrb	r2, [r7, #7]
 800d086:	4906      	ldr	r1, [pc, #24]	; (800d0a0 <disk_ioctl+0x38>)
 800d088:	440a      	add	r2, r1
 800d08a:	7a10      	ldrb	r0, [r2, #8]
 800d08c:	79b9      	ldrb	r1, [r7, #6]
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	4798      	blx	r3
 800d092:	4603      	mov	r3, r0
 800d094:	73fb      	strb	r3, [r7, #15]
  return res;
 800d096:	7bfb      	ldrb	r3, [r7, #15]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	200002bc 	.word	0x200002bc

0800d0a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d0b4:	89fb      	ldrh	r3, [r7, #14]
 800d0b6:	021b      	lsls	r3, r3, #8
 800d0b8:	b21a      	sxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	b21b      	sxth	r3, r3
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	b21b      	sxth	r3, r3
 800d0c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d0c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3303      	adds	r3, #3
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	021b      	lsls	r3, r3, #8
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	3202      	adds	r2, #2
 800d0ec:	7812      	ldrb	r2, [r2, #0]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	021b      	lsls	r3, r3, #8
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	3201      	adds	r2, #1
 800d0fa:	7812      	ldrb	r2, [r2, #0]
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	021b      	lsls	r3, r3, #8
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	7812      	ldrb	r2, [r2, #0]
 800d108:	4313      	orrs	r3, r2
 800d10a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d10c:	68fb      	ldr	r3, [r7, #12]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d11a:	b480      	push	{r7}
 800d11c:	b083      	sub	sp, #12
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	460b      	mov	r3, r1
 800d124:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	887a      	ldrh	r2, [r7, #2]
 800d12e:	b2d2      	uxtb	r2, r2
 800d130:	701a      	strb	r2, [r3, #0]
 800d132:	887b      	ldrh	r3, [r7, #2]
 800d134:	0a1b      	lsrs	r3, r3, #8
 800d136:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	607a      	str	r2, [r7, #4]
 800d13e:	887a      	ldrh	r2, [r7, #2]
 800d140:	b2d2      	uxtb	r2, r2
 800d142:	701a      	strb	r2, [r3, #0]
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	1c5a      	adds	r2, r3, #1
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	683a      	ldr	r2, [r7, #0]
 800d162:	b2d2      	uxtb	r2, r2
 800d164:	701a      	strb	r2, [r3, #0]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	0a1b      	lsrs	r3, r3, #8
 800d16a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	607a      	str	r2, [r7, #4]
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	b2d2      	uxtb	r2, r2
 800d176:	701a      	strb	r2, [r3, #0]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	0a1b      	lsrs	r3, r3, #8
 800d17c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	683a      	ldr	r2, [r7, #0]
 800d186:	b2d2      	uxtb	r2, r2
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	0a1b      	lsrs	r3, r3, #8
 800d18e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	607a      	str	r2, [r7, #4]
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	b2d2      	uxtb	r2, r2
 800d19a:	701a      	strb	r2, [r3, #0]
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d1a8:	b480      	push	{r7}
 800d1aa:	b087      	sub	sp, #28
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00d      	beq.n	800d1de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d1c2:	693a      	ldr	r2, [r7, #16]
 800d1c4:	1c53      	adds	r3, r2, #1
 800d1c6:	613b      	str	r3, [r7, #16]
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	1c59      	adds	r1, r3, #1
 800d1cc:	6179      	str	r1, [r7, #20]
 800d1ce:	7812      	ldrb	r2, [r2, #0]
 800d1d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	607b      	str	r3, [r7, #4]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1f1      	bne.n	800d1c2 <mem_cpy+0x1a>
	}
}
 800d1de:	bf00      	nop
 800d1e0:	371c      	adds	r7, #28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d1ea:	b480      	push	{r7}
 800d1ec:	b087      	sub	sp, #28
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	617a      	str	r2, [r7, #20]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3b01      	subs	r3, #1
 800d20a:	607b      	str	r3, [r7, #4]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1f3      	bne.n	800d1fa <mem_set+0x10>
}
 800d212:	bf00      	nop
 800d214:	371c      	adds	r7, #28
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d21e:	b480      	push	{r7}
 800d220:	b089      	sub	sp, #36	; 0x24
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	61fb      	str	r3, [r7, #28]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d232:	2300      	movs	r3, #0
 800d234:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	61fa      	str	r2, [r7, #28]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	4619      	mov	r1, r3
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	61ba      	str	r2, [r7, #24]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	1acb      	subs	r3, r1, r3
 800d24a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	3b01      	subs	r3, #1
 800d250:	607b      	str	r3, [r7, #4]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <mem_cmp+0x40>
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d0eb      	beq.n	800d236 <mem_cmp+0x18>

	return r;
 800d25e:	697b      	ldr	r3, [r7, #20]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3724      	adds	r7, #36	; 0x24
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d276:	e002      	b.n	800d27e <chk_chr+0x12>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	3301      	adds	r3, #1
 800d27c:	607b      	str	r3, [r7, #4]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <chk_chr+0x26>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	4293      	cmp	r3, r2
 800d290:	d1f2      	bne.n	800d278 <chk_chr+0xc>
	return *str;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	781b      	ldrb	r3, [r3, #0]
}
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d009      	beq.n	800d2c4 <lock_fs+0x22>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f002 fd8d 	bl	800fdd4 <ff_req_grant>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d001      	beq.n	800d2c4 <lock_fs+0x22>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e000      	b.n	800d2c6 <lock_fs+0x24>
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00d      	beq.n	800d2fc <unlock_fs+0x2e>
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	2b0c      	cmp	r3, #12
 800d2e4:	d00a      	beq.n	800d2fc <unlock_fs+0x2e>
 800d2e6:	78fb      	ldrb	r3, [r7, #3]
 800d2e8:	2b0b      	cmp	r3, #11
 800d2ea:	d007      	beq.n	800d2fc <unlock_fs+0x2e>
 800d2ec:	78fb      	ldrb	r3, [r7, #3]
 800d2ee:	2b0f      	cmp	r3, #15
 800d2f0:	d004      	beq.n	800d2fc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f002 fd81 	bl	800fdfe <ff_rel_grant>
	}
}
 800d2fc:	bf00      	nop
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d30e:	2300      	movs	r3, #0
 800d310:	60bb      	str	r3, [r7, #8]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	e029      	b.n	800d36c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d318:	4a27      	ldr	r2, [pc, #156]	; (800d3b8 <chk_lock+0xb4>)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	011b      	lsls	r3, r3, #4
 800d31e:	4413      	add	r3, r2
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d01d      	beq.n	800d362 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d326:	4a24      	ldr	r2, [pc, #144]	; (800d3b8 <chk_lock+0xb4>)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	4413      	add	r3, r2
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	429a      	cmp	r2, r3
 800d336:	d116      	bne.n	800d366 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d338:	4a1f      	ldr	r2, [pc, #124]	; (800d3b8 <chk_lock+0xb4>)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	011b      	lsls	r3, r3, #4
 800d33e:	4413      	add	r3, r2
 800d340:	3304      	adds	r3, #4
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d348:	429a      	cmp	r2, r3
 800d34a:	d10c      	bne.n	800d366 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d34c:	4a1a      	ldr	r2, [pc, #104]	; (800d3b8 <chk_lock+0xb4>)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	011b      	lsls	r3, r3, #4
 800d352:	4413      	add	r3, r2
 800d354:	3308      	adds	r3, #8
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d102      	bne.n	800d366 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d360:	e007      	b.n	800d372 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d362:	2301      	movs	r3, #1
 800d364:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3301      	adds	r3, #1
 800d36a:	60fb      	str	r3, [r7, #12]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d9d2      	bls.n	800d318 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d109      	bne.n	800d38c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d102      	bne.n	800d384 <chk_lock+0x80>
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d101      	bne.n	800d388 <chk_lock+0x84>
 800d384:	2300      	movs	r3, #0
 800d386:	e010      	b.n	800d3aa <chk_lock+0xa6>
 800d388:	2312      	movs	r3, #18
 800d38a:	e00e      	b.n	800d3aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d108      	bne.n	800d3a4 <chk_lock+0xa0>
 800d392:	4a09      	ldr	r2, [pc, #36]	; (800d3b8 <chk_lock+0xb4>)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	011b      	lsls	r3, r3, #4
 800d398:	4413      	add	r3, r2
 800d39a:	330c      	adds	r3, #12
 800d39c:	881b      	ldrh	r3, [r3, #0]
 800d39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3a2:	d101      	bne.n	800d3a8 <chk_lock+0xa4>
 800d3a4:	2310      	movs	r3, #16
 800d3a6:	e000      	b.n	800d3aa <chk_lock+0xa6>
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	2000029c 	.word	0x2000029c

0800d3bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	607b      	str	r3, [r7, #4]
 800d3c6:	e002      	b.n	800d3ce <enq_lock+0x12>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	607b      	str	r3, [r7, #4]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d806      	bhi.n	800d3e2 <enq_lock+0x26>
 800d3d4:	4a09      	ldr	r2, [pc, #36]	; (800d3fc <enq_lock+0x40>)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	011b      	lsls	r3, r3, #4
 800d3da:	4413      	add	r3, r2
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1f2      	bne.n	800d3c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	bf14      	ite	ne
 800d3e8:	2301      	movne	r3, #1
 800d3ea:	2300      	moveq	r3, #0
 800d3ec:	b2db      	uxtb	r3, r3
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	370c      	adds	r7, #12
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	2000029c 	.word	0x2000029c

0800d400 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d40a:	2300      	movs	r3, #0
 800d40c:	60fb      	str	r3, [r7, #12]
 800d40e:	e01f      	b.n	800d450 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d410:	4a41      	ldr	r2, [pc, #260]	; (800d518 <inc_lock+0x118>)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	4413      	add	r3, r2
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d113      	bne.n	800d44a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d422:	4a3d      	ldr	r2, [pc, #244]	; (800d518 <inc_lock+0x118>)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	011b      	lsls	r3, r3, #4
 800d428:	4413      	add	r3, r2
 800d42a:	3304      	adds	r3, #4
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d432:	429a      	cmp	r2, r3
 800d434:	d109      	bne.n	800d44a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d436:	4a38      	ldr	r2, [pc, #224]	; (800d518 <inc_lock+0x118>)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	011b      	lsls	r3, r3, #4
 800d43c:	4413      	add	r3, r2
 800d43e:	3308      	adds	r3, #8
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d446:	429a      	cmp	r2, r3
 800d448:	d006      	beq.n	800d458 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3301      	adds	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d9dc      	bls.n	800d410 <inc_lock+0x10>
 800d456:	e000      	b.n	800d45a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d458:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d132      	bne.n	800d4c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d460:	2300      	movs	r3, #0
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	e002      	b.n	800d46c <inc_lock+0x6c>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3301      	adds	r3, #1
 800d46a:	60fb      	str	r3, [r7, #12]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d806      	bhi.n	800d480 <inc_lock+0x80>
 800d472:	4a29      	ldr	r2, [pc, #164]	; (800d518 <inc_lock+0x118>)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	011b      	lsls	r3, r3, #4
 800d478:	4413      	add	r3, r2
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1f2      	bne.n	800d466 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2b02      	cmp	r3, #2
 800d484:	d101      	bne.n	800d48a <inc_lock+0x8a>
 800d486:	2300      	movs	r3, #0
 800d488:	e040      	b.n	800d50c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	4922      	ldr	r1, [pc, #136]	; (800d518 <inc_lock+0x118>)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	011b      	lsls	r3, r3, #4
 800d494:	440b      	add	r3, r1
 800d496:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	491e      	ldr	r1, [pc, #120]	; (800d518 <inc_lock+0x118>)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	011b      	lsls	r3, r3, #4
 800d4a2:	440b      	add	r3, r1
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	695a      	ldr	r2, [r3, #20]
 800d4ac:	491a      	ldr	r1, [pc, #104]	; (800d518 <inc_lock+0x118>)
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	011b      	lsls	r3, r3, #4
 800d4b2:	440b      	add	r3, r1
 800d4b4:	3308      	adds	r3, #8
 800d4b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d4b8:	4a17      	ldr	r2, [pc, #92]	; (800d518 <inc_lock+0x118>)
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	011b      	lsls	r3, r3, #4
 800d4be:	4413      	add	r3, r2
 800d4c0:	330c      	adds	r3, #12
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d009      	beq.n	800d4e0 <inc_lock+0xe0>
 800d4cc:	4a12      	ldr	r2, [pc, #72]	; (800d518 <inc_lock+0x118>)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	011b      	lsls	r3, r3, #4
 800d4d2:	4413      	add	r3, r2
 800d4d4:	330c      	adds	r3, #12
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <inc_lock+0xe0>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e015      	b.n	800d50c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d108      	bne.n	800d4f8 <inc_lock+0xf8>
 800d4e6:	4a0c      	ldr	r2, [pc, #48]	; (800d518 <inc_lock+0x118>)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	011b      	lsls	r3, r3, #4
 800d4ec:	4413      	add	r3, r2
 800d4ee:	330c      	adds	r3, #12
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	e001      	b.n	800d4fc <inc_lock+0xfc>
 800d4f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4fc:	4906      	ldr	r1, [pc, #24]	; (800d518 <inc_lock+0x118>)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	011b      	lsls	r3, r3, #4
 800d502:	440b      	add	r3, r1
 800d504:	330c      	adds	r3, #12
 800d506:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	3301      	adds	r3, #1
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	2000029c 	.word	0x2000029c

0800d51c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3b01      	subs	r3, #1
 800d528:	607b      	str	r3, [r7, #4]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d825      	bhi.n	800d57c <dec_lock+0x60>
		n = Files[i].ctr;
 800d530:	4a17      	ldr	r2, [pc, #92]	; (800d590 <dec_lock+0x74>)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	011b      	lsls	r3, r3, #4
 800d536:	4413      	add	r3, r2
 800d538:	330c      	adds	r3, #12
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d53e:	89fb      	ldrh	r3, [r7, #14]
 800d540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d544:	d101      	bne.n	800d54a <dec_lock+0x2e>
 800d546:	2300      	movs	r3, #0
 800d548:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d54a:	89fb      	ldrh	r3, [r7, #14]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <dec_lock+0x3a>
 800d550:	89fb      	ldrh	r3, [r7, #14]
 800d552:	3b01      	subs	r3, #1
 800d554:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d556:	4a0e      	ldr	r2, [pc, #56]	; (800d590 <dec_lock+0x74>)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	011b      	lsls	r3, r3, #4
 800d55c:	4413      	add	r3, r2
 800d55e:	330c      	adds	r3, #12
 800d560:	89fa      	ldrh	r2, [r7, #14]
 800d562:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d564:	89fb      	ldrh	r3, [r7, #14]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d105      	bne.n	800d576 <dec_lock+0x5a>
 800d56a:	4a09      	ldr	r2, [pc, #36]	; (800d590 <dec_lock+0x74>)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	011b      	lsls	r3, r3, #4
 800d570:	4413      	add	r3, r2
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	737b      	strb	r3, [r7, #13]
 800d57a:	e001      	b.n	800d580 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d57c:	2302      	movs	r3, #2
 800d57e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d580:	7b7b      	ldrb	r3, [r7, #13]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	2000029c 	.word	0x2000029c

0800d594 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d59c:	2300      	movs	r3, #0
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	e010      	b.n	800d5c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d5a2:	4a0d      	ldr	r2, [pc, #52]	; (800d5d8 <clear_lock+0x44>)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	011b      	lsls	r3, r3, #4
 800d5a8:	4413      	add	r3, r2
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d105      	bne.n	800d5be <clear_lock+0x2a>
 800d5b2:	4a09      	ldr	r2, [pc, #36]	; (800d5d8 <clear_lock+0x44>)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	011b      	lsls	r3, r3, #4
 800d5b8:	4413      	add	r3, r2
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d9eb      	bls.n	800d5a2 <clear_lock+0xe>
	}
}
 800d5ca:	bf00      	nop
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	2000029c 	.word	0x2000029c

0800d5dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	78db      	ldrb	r3, [r3, #3]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d034      	beq.n	800d65a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	7858      	ldrb	r0, [r3, #1]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d600:	2301      	movs	r3, #1
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	f7ff fd10 	bl	800d028 <disk_write>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d002      	beq.n	800d614 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d60e:	2301      	movs	r3, #1
 800d610:	73fb      	strb	r3, [r7, #15]
 800d612:	e022      	b.n	800d65a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	1ad2      	subs	r2, r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	69db      	ldr	r3, [r3, #28]
 800d626:	429a      	cmp	r2, r3
 800d628:	d217      	bcs.n	800d65a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	789b      	ldrb	r3, [r3, #2]
 800d62e:	613b      	str	r3, [r7, #16]
 800d630:	e010      	b.n	800d654 <sync_window+0x78>
					wsect += fs->fsize;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	4413      	add	r3, r2
 800d63a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	7858      	ldrb	r0, [r3, #1]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d646:	2301      	movs	r3, #1
 800d648:	697a      	ldr	r2, [r7, #20]
 800d64a:	f7ff fced 	bl	800d028 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	3b01      	subs	r3, #1
 800d652:	613b      	str	r3, [r7, #16]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d8eb      	bhi.n	800d632 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d65a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d01b      	beq.n	800d6b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff ffad 	bl	800d5dc <sync_window>
 800d682:	4603      	mov	r3, r0
 800d684:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d113      	bne.n	800d6b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	7858      	ldrb	r0, [r3, #1]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d696:	2301      	movs	r3, #1
 800d698:	683a      	ldr	r2, [r7, #0]
 800d69a:	f7ff fca5 	bl	800cfe8 <disk_read>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
	...

0800d6c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7ff ff87 	bl	800d5dc <sync_window>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d6d2:	7bfb      	ldrb	r3, [r7, #15]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d158      	bne.n	800d78a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d148      	bne.n	800d772 <sync_fs+0xb2>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	791b      	ldrb	r3, [r3, #4]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d144      	bne.n	800d772 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	3334      	adds	r3, #52	; 0x34
 800d6ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7ff fd79 	bl	800d1ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3334      	adds	r3, #52	; 0x34
 800d6fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d700:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d704:	4618      	mov	r0, r3
 800d706:	f7ff fd08 	bl	800d11a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3334      	adds	r3, #52	; 0x34
 800d70e:	4921      	ldr	r1, [pc, #132]	; (800d794 <sync_fs+0xd4>)
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff fd1d 	bl	800d150 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	3334      	adds	r3, #52	; 0x34
 800d71a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d71e:	491e      	ldr	r1, [pc, #120]	; (800d798 <sync_fs+0xd8>)
 800d720:	4618      	mov	r0, r3
 800d722:	f7ff fd15 	bl	800d150 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	3334      	adds	r3, #52	; 0x34
 800d72a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	4619      	mov	r1, r3
 800d734:	4610      	mov	r0, r2
 800d736:	f7ff fd0b 	bl	800d150 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	3334      	adds	r3, #52	; 0x34
 800d73e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	4619      	mov	r1, r3
 800d748:	4610      	mov	r0, r2
 800d74a:	f7ff fd01 	bl	800d150 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	1c5a      	adds	r2, r3, #1
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	7858      	ldrb	r0, [r3, #1]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d766:	2301      	movs	r3, #1
 800d768:	f7ff fc5e 	bl	800d028 <disk_write>
			fs->fsi_flag = 0;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	785b      	ldrb	r3, [r3, #1]
 800d776:	2200      	movs	r2, #0
 800d778:	2100      	movs	r1, #0
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff fc74 	bl	800d068 <disk_ioctl>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <sync_fs+0xca>
 800d786:	2301      	movs	r3, #1
 800d788:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	41615252 	.word	0x41615252
 800d798:	61417272 	.word	0x61417272

0800d79c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	3b02      	subs	r3, #2
 800d7aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	3b02      	subs	r3, #2
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d301      	bcc.n	800d7bc <clust2sect+0x20>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e008      	b.n	800d7ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	895b      	ldrh	r3, [r3, #10]
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	fb03 f202 	mul.w	r2, r3, r2
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7cc:	4413      	add	r3, r2
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b086      	sub	sp, #24
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d904      	bls.n	800d7fa <get_fat+0x20>
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d302      	bcc.n	800d800 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	e08c      	b.n	800d91a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d800:	f04f 33ff 	mov.w	r3, #4294967295
 800d804:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d045      	beq.n	800d89a <get_fat+0xc0>
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d05d      	beq.n	800d8ce <get_fat+0xf4>
 800d812:	2b01      	cmp	r3, #1
 800d814:	d177      	bne.n	800d906 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	60fb      	str	r3, [r7, #12]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	085b      	lsrs	r3, r3, #1
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	0a5b      	lsrs	r3, r3, #9
 800d82c:	4413      	add	r3, r2
 800d82e:	4619      	mov	r1, r3
 800d830:	6938      	ldr	r0, [r7, #16]
 800d832:	f7ff ff17 	bl	800d664 <move_window>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d167      	bne.n	800d90c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	1c5a      	adds	r2, r3, #1
 800d840:	60fa      	str	r2, [r7, #12]
 800d842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	4413      	add	r3, r2
 800d84a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d84e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	0a5b      	lsrs	r3, r3, #9
 800d858:	4413      	add	r3, r2
 800d85a:	4619      	mov	r1, r3
 800d85c:	6938      	ldr	r0, [r7, #16]
 800d85e:	f7ff ff01 	bl	800d664 <move_window>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d153      	bne.n	800d910 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	4413      	add	r3, r2
 800d872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d876:	021b      	lsls	r3, r3, #8
 800d878:	461a      	mov	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	4313      	orrs	r3, r2
 800d87e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	2b00      	cmp	r3, #0
 800d888:	d002      	beq.n	800d890 <get_fat+0xb6>
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	091b      	lsrs	r3, r3, #4
 800d88e:	e002      	b.n	800d896 <get_fat+0xbc>
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d896:	617b      	str	r3, [r7, #20]
			break;
 800d898:	e03f      	b.n	800d91a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	0a1b      	lsrs	r3, r3, #8
 800d8a2:	4413      	add	r3, r2
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f7ff fedc 	bl	800d664 <move_window>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d130      	bne.n	800d914 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d8c0:	4413      	add	r3, r2
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7ff fbee 	bl	800d0a4 <ld_word>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	617b      	str	r3, [r7, #20]
			break;
 800d8cc:	e025      	b.n	800d91a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	09db      	lsrs	r3, r3, #7
 800d8d6:	4413      	add	r3, r2
 800d8d8:	4619      	mov	r1, r3
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f7ff fec2 	bl	800d664 <move_window>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d118      	bne.n	800d918 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8f4:	4413      	add	r3, r2
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff fbec 	bl	800d0d4 <ld_dword>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d902:	617b      	str	r3, [r7, #20]
			break;
 800d904:	e009      	b.n	800d91a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d906:	2301      	movs	r3, #1
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	e006      	b.n	800d91a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d90c:	bf00      	nop
 800d90e:	e004      	b.n	800d91a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d910:	bf00      	nop
 800d912:	e002      	b.n	800d91a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d914:	bf00      	nop
 800d916:	e000      	b.n	800d91a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d918:	bf00      	nop
		}
	}

	return val;
 800d91a:	697b      	ldr	r3, [r7, #20]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d924:	b590      	push	{r4, r7, lr}
 800d926:	b089      	sub	sp, #36	; 0x24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d930:	2302      	movs	r3, #2
 800d932:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b01      	cmp	r3, #1
 800d938:	f240 80d6 	bls.w	800dae8 <put_fat+0x1c4>
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	429a      	cmp	r2, r3
 800d944:	f080 80d0 	bcs.w	800dae8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d073      	beq.n	800da38 <put_fat+0x114>
 800d950:	2b03      	cmp	r3, #3
 800d952:	f000 8091 	beq.w	800da78 <put_fat+0x154>
 800d956:	2b01      	cmp	r3, #1
 800d958:	f040 80c6 	bne.w	800dae8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	61bb      	str	r3, [r7, #24]
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	085b      	lsrs	r3, r3, #1
 800d964:	69ba      	ldr	r2, [r7, #24]
 800d966:	4413      	add	r3, r2
 800d968:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	0a5b      	lsrs	r3, r3, #9
 800d972:	4413      	add	r3, r2
 800d974:	4619      	mov	r1, r3
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7ff fe74 	bl	800d664 <move_window>
 800d97c:	4603      	mov	r3, r0
 800d97e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d980:	7ffb      	ldrb	r3, [r7, #31]
 800d982:	2b00      	cmp	r3, #0
 800d984:	f040 80a9 	bne.w	800dada <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	1c59      	adds	r1, r3, #1
 800d992:	61b9      	str	r1, [r7, #24]
 800d994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d998:	4413      	add	r3, r2
 800d99a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00d      	beq.n	800d9c2 <put_fat+0x9e>
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	b25b      	sxtb	r3, r3
 800d9ac:	f003 030f 	and.w	r3, r3, #15
 800d9b0:	b25a      	sxtb	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	011b      	lsls	r3, r3, #4
 800d9b8:	b25b      	sxtb	r3, r3
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	b25b      	sxtb	r3, r3
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	e001      	b.n	800d9c6 <put_fat+0xa2>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	0a5b      	lsrs	r3, r3, #9
 800d9d8:	4413      	add	r3, r2
 800d9da:	4619      	mov	r1, r3
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f7ff fe41 	bl	800d664 <move_window>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9e6:	7ffb      	ldrb	r3, [r7, #31]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d178      	bne.n	800dade <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f8:	4413      	add	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <put_fat+0xea>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	091b      	lsrs	r3, r3, #4
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	e00e      	b.n	800da2c <put_fat+0x108>
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	b25b      	sxtb	r3, r3
 800da14:	f023 030f 	bic.w	r3, r3, #15
 800da18:	b25a      	sxtb	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	0a1b      	lsrs	r3, r3, #8
 800da1e:	b25b      	sxtb	r3, r3
 800da20:	f003 030f 	and.w	r3, r3, #15
 800da24:	b25b      	sxtb	r3, r3
 800da26:	4313      	orrs	r3, r2
 800da28:	b25b      	sxtb	r3, r3
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2201      	movs	r2, #1
 800da34:	70da      	strb	r2, [r3, #3]
			break;
 800da36:	e057      	b.n	800dae8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	0a1b      	lsrs	r3, r3, #8
 800da40:	4413      	add	r3, r2
 800da42:	4619      	mov	r1, r3
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f7ff fe0d 	bl	800d664 <move_window>
 800da4a:	4603      	mov	r3, r0
 800da4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da4e:	7ffb      	ldrb	r3, [r7, #31]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d146      	bne.n	800dae2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	005b      	lsls	r3, r3, #1
 800da5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800da62:	4413      	add	r3, r2
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	b292      	uxth	r2, r2
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7ff fb55 	bl	800d11a <st_word>
			fs->wflag = 1;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2201      	movs	r2, #1
 800da74:	70da      	strb	r2, [r3, #3]
			break;
 800da76:	e037      	b.n	800dae8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	09db      	lsrs	r3, r3, #7
 800da80:	4413      	add	r3, r2
 800da82:	4619      	mov	r1, r3
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f7ff fded 	bl	800d664 <move_window>
 800da8a:	4603      	mov	r3, r0
 800da8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da8e:	7ffb      	ldrb	r3, [r7, #31]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d128      	bne.n	800dae6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800daa8:	4413      	add	r3, r2
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fb12 	bl	800d0d4 <ld_dword>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dab6:	4323      	orrs	r3, r4
 800dab8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dac8:	4413      	add	r3, r2
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff fb3f 	bl	800d150 <st_dword>
			fs->wflag = 1;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2201      	movs	r2, #1
 800dad6:	70da      	strb	r2, [r3, #3]
			break;
 800dad8:	e006      	b.n	800dae8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800dada:	bf00      	nop
 800dadc:	e004      	b.n	800dae8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800dade:	bf00      	nop
 800dae0:	e002      	b.n	800dae8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800dae2:	bf00      	nop
 800dae4:	e000      	b.n	800dae8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800dae6:	bf00      	nop
		}
	}
	return res;
 800dae8:	7ffb      	ldrb	r3, [r7, #31]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3724      	adds	r7, #36	; 0x24
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd90      	pop	{r4, r7, pc}

0800daf2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b088      	sub	sp, #32
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	60f8      	str	r0, [r7, #12]
 800dafa:	60b9      	str	r1, [r7, #8]
 800dafc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d904      	bls.n	800db18 <remove_chain+0x26>
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	699b      	ldr	r3, [r3, #24]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	429a      	cmp	r2, r3
 800db16:	d301      	bcc.n	800db1c <remove_chain+0x2a>
 800db18:	2302      	movs	r3, #2
 800db1a:	e04b      	b.n	800dbb4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00c      	beq.n	800db3c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800db22:	f04f 32ff 	mov.w	r2, #4294967295
 800db26:	6879      	ldr	r1, [r7, #4]
 800db28:	69b8      	ldr	r0, [r7, #24]
 800db2a:	f7ff fefb 	bl	800d924 <put_fat>
 800db2e:	4603      	mov	r3, r0
 800db30:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800db32:	7ffb      	ldrb	r3, [r7, #31]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d001      	beq.n	800db3c <remove_chain+0x4a>
 800db38:	7ffb      	ldrb	r3, [r7, #31]
 800db3a:	e03b      	b.n	800dbb4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800db3c:	68b9      	ldr	r1, [r7, #8]
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f7ff fe4b 	bl	800d7da <get_fat>
 800db44:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d031      	beq.n	800dbb0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d101      	bne.n	800db56 <remove_chain+0x64>
 800db52:	2302      	movs	r3, #2
 800db54:	e02e      	b.n	800dbb4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5c:	d101      	bne.n	800db62 <remove_chain+0x70>
 800db5e:	2301      	movs	r3, #1
 800db60:	e028      	b.n	800dbb4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db62:	2200      	movs	r2, #0
 800db64:	68b9      	ldr	r1, [r7, #8]
 800db66:	69b8      	ldr	r0, [r7, #24]
 800db68:	f7ff fedc 	bl	800d924 <put_fat>
 800db6c:	4603      	mov	r3, r0
 800db6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db70:	7ffb      	ldrb	r3, [r7, #31]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <remove_chain+0x88>
 800db76:	7ffb      	ldrb	r3, [r7, #31]
 800db78:	e01c      	b.n	800dbb4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	695a      	ldr	r2, [r3, #20]
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	699b      	ldr	r3, [r3, #24]
 800db82:	3b02      	subs	r3, #2
 800db84:	429a      	cmp	r2, r3
 800db86:	d20b      	bcs.n	800dba0 <remove_chain+0xae>
			fs->free_clst++;
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	695b      	ldr	r3, [r3, #20]
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	791b      	ldrb	r3, [r3, #4]
 800db96:	f043 0301 	orr.w	r3, r3, #1
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d3c6      	bcc.n	800db3c <remove_chain+0x4a>
 800dbae:	e000      	b.n	800dbb2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dbb0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3720      	adds	r7, #32
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b088      	sub	sp, #32
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10d      	bne.n	800dbee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d004      	beq.n	800dbe8 <create_chain+0x2c>
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	69ba      	ldr	r2, [r7, #24]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d31b      	bcc.n	800dc20 <create_chain+0x64>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	61bb      	str	r3, [r7, #24]
 800dbec:	e018      	b.n	800dc20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff fdf2 	bl	800d7da <get_fat>
 800dbf6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d801      	bhi.n	800dc02 <create_chain+0x46>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e070      	b.n	800dce4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc08:	d101      	bne.n	800dc0e <create_chain+0x52>
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	e06a      	b.n	800dce4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d201      	bcs.n	800dc1c <create_chain+0x60>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	e063      	b.n	800dce4 <create_chain+0x128>
		scl = clst;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	3301      	adds	r3, #1
 800dc28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	69fa      	ldr	r2, [r7, #28]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d307      	bcc.n	800dc44 <create_chain+0x88>
				ncl = 2;
 800dc34:	2302      	movs	r3, #2
 800dc36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dc38:	69fa      	ldr	r2, [r7, #28]
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d901      	bls.n	800dc44 <create_chain+0x88>
 800dc40:	2300      	movs	r3, #0
 800dc42:	e04f      	b.n	800dce4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dc44:	69f9      	ldr	r1, [r7, #28]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7ff fdc7 	bl	800d7da <get_fat>
 800dc4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00e      	beq.n	800dc72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d003      	beq.n	800dc62 <create_chain+0xa6>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc60:	d101      	bne.n	800dc66 <create_chain+0xaa>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	e03e      	b.n	800dce4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc66:	69fa      	ldr	r2, [r7, #28]
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d1da      	bne.n	800dc24 <create_chain+0x68>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e038      	b.n	800dce4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc74:	f04f 32ff 	mov.w	r2, #4294967295
 800dc78:	69f9      	ldr	r1, [r7, #28]
 800dc7a:	6938      	ldr	r0, [r7, #16]
 800dc7c:	f7ff fe52 	bl	800d924 <put_fat>
 800dc80:	4603      	mov	r3, r0
 800dc82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d109      	bne.n	800dc9e <create_chain+0xe2>
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d006      	beq.n	800dc9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc90:	69fa      	ldr	r2, [r7, #28]
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6938      	ldr	r0, [r7, #16]
 800dc96:	f7ff fe45 	bl	800d924 <put_fat>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d116      	bne.n	800dcd2 <create_chain+0x116>
		fs->last_clst = ncl;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	69fa      	ldr	r2, [r7, #28]
 800dca8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	695a      	ldr	r2, [r3, #20]
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	3b02      	subs	r3, #2
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d804      	bhi.n	800dcc2 <create_chain+0x106>
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	1e5a      	subs	r2, r3, #1
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	791b      	ldrb	r3, [r3, #4]
 800dcc6:	f043 0301 	orr.w	r3, r3, #1
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	711a      	strb	r2, [r3, #4]
 800dcd0:	e007      	b.n	800dce2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d102      	bne.n	800dcde <create_chain+0x122>
 800dcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcdc:	e000      	b.n	800dce0 <create_chain+0x124>
 800dcde:	2301      	movs	r3, #1
 800dce0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dce2:	69fb      	ldr	r3, [r7, #28]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3720      	adds	r7, #32
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b087      	sub	sp, #28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	3304      	adds	r3, #4
 800dd02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	0a5b      	lsrs	r3, r3, #9
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	8952      	ldrh	r2, [r2, #10]
 800dd0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	1d1a      	adds	r2, r3, #4
 800dd16:	613a      	str	r2, [r7, #16]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <clmt_clust+0x3a>
 800dd22:	2300      	movs	r3, #0
 800dd24:	e010      	b.n	800dd48 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dd26:	697a      	ldr	r2, [r7, #20]
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d307      	bcc.n	800dd3e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd2e:	697a      	ldr	r2, [r7, #20]
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	617b      	str	r3, [r7, #20]
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd3c:	e7e9      	b.n	800dd12 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dd3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	4413      	add	r3, r2
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	371c      	adds	r7, #28
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd6a:	d204      	bcs.n	800dd76 <dir_sdi+0x22>
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	f003 031f 	and.w	r3, r3, #31
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d001      	beq.n	800dd7a <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd76:	2302      	movs	r3, #2
 800dd78:	e063      	b.n	800de42 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	683a      	ldr	r2, [r7, #0]
 800dd7e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d106      	bne.n	800dd9a <dir_sdi+0x46>
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d902      	bls.n	800dd9a <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10c      	bne.n	800ddba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	095b      	lsrs	r3, r3, #5
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	8912      	ldrh	r2, [r2, #8]
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d301      	bcc.n	800ddb0 <dir_sdi+0x5c>
 800ddac:	2302      	movs	r3, #2
 800ddae:	e048      	b.n	800de42 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	61da      	str	r2, [r3, #28]
 800ddb8:	e029      	b.n	800de0e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	895b      	ldrh	r3, [r3, #10]
 800ddbe:	025b      	lsls	r3, r3, #9
 800ddc0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddc2:	e019      	b.n	800ddf8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6979      	ldr	r1, [r7, #20]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7ff fd06 	bl	800d7da <get_fat>
 800ddce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd6:	d101      	bne.n	800dddc <dir_sdi+0x88>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e032      	b.n	800de42 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d904      	bls.n	800ddec <dir_sdi+0x98>
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d301      	bcc.n	800ddf0 <dir_sdi+0x9c>
 800ddec:	2302      	movs	r3, #2
 800ddee:	e028      	b.n	800de42 <dir_sdi+0xee>
			ofs -= csz;
 800ddf0:	683a      	ldr	r2, [r7, #0]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	1ad3      	subs	r3, r2, r3
 800ddf6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddf8:	683a      	ldr	r2, [r7, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d2e1      	bcs.n	800ddc4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800de00:	6979      	ldr	r1, [r7, #20]
 800de02:	6938      	ldr	r0, [r7, #16]
 800de04:	f7ff fcca 	bl	800d79c <clust2sect>
 800de08:	4602      	mov	r2, r0
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	697a      	ldr	r2, [r7, #20]
 800de12:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	69db      	ldr	r3, [r3, #28]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d101      	bne.n	800de20 <dir_sdi+0xcc>
 800de1c:	2302      	movs	r3, #2
 800de1e:	e010      	b.n	800de42 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	69da      	ldr	r2, [r3, #28]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	0a5b      	lsrs	r3, r3, #9
 800de28:	441a      	add	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3a:	441a      	add	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b086      	sub	sp, #24
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	3320      	adds	r3, #32
 800de60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	69db      	ldr	r3, [r3, #28]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d003      	beq.n	800de72 <dir_next+0x28>
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de70:	d301      	bcc.n	800de76 <dir_next+0x2c>
 800de72:	2304      	movs	r3, #4
 800de74:	e0aa      	b.n	800dfcc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f040 8098 	bne.w	800dfb2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	69db      	ldr	r3, [r3, #28]
 800de86:	1c5a      	adds	r2, r3, #1
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10b      	bne.n	800deac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	095b      	lsrs	r3, r3, #5
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	8912      	ldrh	r2, [r2, #8]
 800de9c:	4293      	cmp	r3, r2
 800de9e:	f0c0 8088 	bcc.w	800dfb2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	61da      	str	r2, [r3, #28]
 800dea8:	2304      	movs	r3, #4
 800deaa:	e08f      	b.n	800dfcc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	0a5b      	lsrs	r3, r3, #9
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	8952      	ldrh	r2, [r2, #10]
 800deb4:	3a01      	subs	r2, #1
 800deb6:	4013      	ands	r3, r2
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d17a      	bne.n	800dfb2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	699b      	ldr	r3, [r3, #24]
 800dec2:	4619      	mov	r1, r3
 800dec4:	4610      	mov	r0, r2
 800dec6:	f7ff fc88 	bl	800d7da <get_fat>
 800deca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d801      	bhi.n	800ded6 <dir_next+0x8c>
 800ded2:	2302      	movs	r3, #2
 800ded4:	e07a      	b.n	800dfcc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dedc:	d101      	bne.n	800dee2 <dir_next+0x98>
 800dede:	2301      	movs	r3, #1
 800dee0:	e074      	b.n	800dfcc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	697a      	ldr	r2, [r7, #20]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d358      	bcc.n	800df9e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d104      	bne.n	800defc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	61da      	str	r2, [r3, #28]
 800def8:	2304      	movs	r3, #4
 800defa:	e067      	b.n	800dfcc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	699b      	ldr	r3, [r3, #24]
 800df02:	4619      	mov	r1, r3
 800df04:	4610      	mov	r0, r2
 800df06:	f7ff fe59 	bl	800dbbc <create_chain>
 800df0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d101      	bne.n	800df16 <dir_next+0xcc>
 800df12:	2307      	movs	r3, #7
 800df14:	e05a      	b.n	800dfcc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d101      	bne.n	800df20 <dir_next+0xd6>
 800df1c:	2302      	movs	r3, #2
 800df1e:	e055      	b.n	800dfcc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df26:	d101      	bne.n	800df2c <dir_next+0xe2>
 800df28:	2301      	movs	r3, #1
 800df2a:	e04f      	b.n	800dfcc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7ff fb55 	bl	800d5dc <sync_window>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <dir_next+0xf2>
 800df38:	2301      	movs	r3, #1
 800df3a:	e047      	b.n	800dfcc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	3334      	adds	r3, #52	; 0x34
 800df40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df44:	2100      	movs	r1, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f7ff f94f 	bl	800d1ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df4c:	2300      	movs	r3, #0
 800df4e:	613b      	str	r3, [r7, #16]
 800df50:	6979      	ldr	r1, [r7, #20]
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f7ff fc22 	bl	800d79c <clust2sect>
 800df58:	4602      	mov	r2, r0
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	631a      	str	r2, [r3, #48]	; 0x30
 800df5e:	e012      	b.n	800df86 <dir_next+0x13c>
						fs->wflag = 1;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2201      	movs	r2, #1
 800df64:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7ff fb38 	bl	800d5dc <sync_window>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d001      	beq.n	800df76 <dir_next+0x12c>
 800df72:	2301      	movs	r3, #1
 800df74:	e02a      	b.n	800dfcc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	3301      	adds	r3, #1
 800df7a:	613b      	str	r3, [r7, #16]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	631a      	str	r2, [r3, #48]	; 0x30
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	895b      	ldrh	r3, [r3, #10]
 800df8a:	461a      	mov	r2, r3
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	4293      	cmp	r3, r2
 800df90:	d3e6      	bcc.n	800df60 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	1ad2      	subs	r2, r2, r3
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	697a      	ldr	r2, [r7, #20]
 800dfa2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dfa4:	6979      	ldr	r1, [r7, #20]
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff fbf8 	bl	800d79c <clust2sect>
 800dfac:	4602      	mov	r2, r0
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfc4:	441a      	add	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dfca:	2300      	movs	r3, #0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3718      	adds	r7, #24
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b086      	sub	sp, #24
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff feb4 	bl	800dd54 <dir_sdi>
 800dfec:	4603      	mov	r3, r0
 800dfee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dff0:	7dfb      	ldrb	r3, [r7, #23]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d12b      	bne.n	800e04e <dir_alloc+0x7a>
		n = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	69db      	ldr	r3, [r3, #28]
 800dffe:	4619      	mov	r1, r3
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7ff fb2f 	bl	800d664 <move_window>
 800e006:	4603      	mov	r3, r0
 800e008:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d11d      	bne.n	800e04c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a1b      	ldr	r3, [r3, #32]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2be5      	cmp	r3, #229	; 0xe5
 800e018:	d004      	beq.n	800e024 <dir_alloc+0x50>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d107      	bne.n	800e034 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	3301      	adds	r3, #1
 800e028:	613b      	str	r3, [r7, #16]
 800e02a:	693a      	ldr	r2, [r7, #16]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d102      	bne.n	800e038 <dir_alloc+0x64>
 800e032:	e00c      	b.n	800e04e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e034:	2300      	movs	r3, #0
 800e036:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e038:	2101      	movs	r1, #1
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff ff05 	bl	800de4a <dir_next>
 800e040:	4603      	mov	r3, r0
 800e042:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e044:	7dfb      	ldrb	r3, [r7, #23]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d0d7      	beq.n	800dffa <dir_alloc+0x26>
 800e04a:	e000      	b.n	800e04e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e04c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e04e:	7dfb      	ldrb	r3, [r7, #23]
 800e050:	2b04      	cmp	r3, #4
 800e052:	d101      	bne.n	800e058 <dir_alloc+0x84>
 800e054:	2307      	movs	r3, #7
 800e056:	75fb      	strb	r3, [r7, #23]
	return res;
 800e058:	7dfb      	ldrb	r3, [r7, #23]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3718      	adds	r7, #24
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b084      	sub	sp, #16
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	331a      	adds	r3, #26
 800e070:	4618      	mov	r0, r3
 800e072:	f7ff f817 	bl	800d0a4 <ld_word>
 800e076:	4603      	mov	r3, r0
 800e078:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d109      	bne.n	800e096 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	3314      	adds	r3, #20
 800e086:	4618      	mov	r0, r3
 800e088:	f7ff f80c 	bl	800d0a4 <ld_word>
 800e08c:	4603      	mov	r3, r0
 800e08e:	041b      	lsls	r3, r3, #16
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	4313      	orrs	r3, r2
 800e094:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e096:	68fb      	ldr	r3, [r7, #12]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	331a      	adds	r3, #26
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	b292      	uxth	r2, r2
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff f82f 	bl	800d11a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b03      	cmp	r3, #3
 800e0c2:	d109      	bne.n	800e0d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f103 0214 	add.w	r2, r3, #20
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	0c1b      	lsrs	r3, r3, #16
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4610      	mov	r0, r2
 800e0d4:	f7ff f821 	bl	800d11a <st_word>
	}
}
 800e0d8:	bf00      	nop
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e0ea:	2304      	movs	r3, #4
 800e0ec:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e0f4:	e03c      	b.n	800e170 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	6938      	ldr	r0, [r7, #16]
 800e0fe:	f7ff fab1 	bl	800d664 <move_window>
 800e102:	4603      	mov	r3, r0
 800e104:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e106:	7dfb      	ldrb	r3, [r7, #23]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d136      	bne.n	800e17a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6a1b      	ldr	r3, [r3, #32]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e114:	7bfb      	ldrb	r3, [r7, #15]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d102      	bne.n	800e120 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e11a:	2304      	movs	r3, #4
 800e11c:	75fb      	strb	r3, [r7, #23]
 800e11e:	e031      	b.n	800e184 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6a1b      	ldr	r3, [r3, #32]
 800e124:	330b      	adds	r3, #11
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e12c:	73bb      	strb	r3, [r7, #14]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	7bba      	ldrb	r2, [r7, #14]
 800e132:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e134:	7bfb      	ldrb	r3, [r7, #15]
 800e136:	2be5      	cmp	r3, #229	; 0xe5
 800e138:	d011      	beq.n	800e15e <dir_read+0x7e>
 800e13a:	7bfb      	ldrb	r3, [r7, #15]
 800e13c:	2b2e      	cmp	r3, #46	; 0x2e
 800e13e:	d00e      	beq.n	800e15e <dir_read+0x7e>
 800e140:	7bbb      	ldrb	r3, [r7, #14]
 800e142:	2b0f      	cmp	r3, #15
 800e144:	d00b      	beq.n	800e15e <dir_read+0x7e>
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	f023 0320 	bic.w	r3, r3, #32
 800e14c:	2b08      	cmp	r3, #8
 800e14e:	bf0c      	ite	eq
 800e150:	2301      	moveq	r3, #1
 800e152:	2300      	movne	r3, #0
 800e154:	b2db      	uxtb	r3, r3
 800e156:	461a      	mov	r2, r3
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d00f      	beq.n	800e17e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e15e:	2100      	movs	r1, #0
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff fe72 	bl	800de4a <dir_next>
 800e166:	4603      	mov	r3, r0
 800e168:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d108      	bne.n	800e182 <dir_read+0xa2>
	while (dp->sect) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	69db      	ldr	r3, [r3, #28]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1be      	bne.n	800e0f6 <dir_read+0x16>
 800e178:	e004      	b.n	800e184 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e17a:	bf00      	nop
 800e17c:	e002      	b.n	800e184 <dir_read+0xa4>
				break;
 800e17e:	bf00      	nop
 800e180:	e000      	b.n	800e184 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e182:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e184:	7dfb      	ldrb	r3, [r7, #23]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d002      	beq.n	800e190 <dir_read+0xb0>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	61da      	str	r2, [r3, #28]
	return res;
 800e190:	7dfb      	ldrb	r3, [r7, #23]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3718      	adds	r7, #24
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b086      	sub	sp, #24
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f7ff fdd2 	bl	800dd54 <dir_sdi>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e1b4:	7dfb      	ldrb	r3, [r7, #23]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <dir_find+0x24>
 800e1ba:	7dfb      	ldrb	r3, [r7, #23]
 800e1bc:	e03e      	b.n	800e23c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	69db      	ldr	r3, [r3, #28]
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6938      	ldr	r0, [r7, #16]
 800e1c6:	f7ff fa4d 	bl	800d664 <move_window>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e1ce:	7dfb      	ldrb	r3, [r7, #23]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d12f      	bne.n	800e234 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6a1b      	ldr	r3, [r3, #32]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d102      	bne.n	800e1e8 <dir_find+0x4e>
 800e1e2:	2304      	movs	r3, #4
 800e1e4:	75fb      	strb	r3, [r7, #23]
 800e1e6:	e028      	b.n	800e23a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a1b      	ldr	r3, [r3, #32]
 800e1ec:	330b      	adds	r3, #11
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	330b      	adds	r3, #11
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	f003 0308 	and.w	r3, r3, #8
 800e206:	2b00      	cmp	r3, #0
 800e208:	d10a      	bne.n	800e220 <dir_find+0x86>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a18      	ldr	r0, [r3, #32]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3324      	adds	r3, #36	; 0x24
 800e212:	220b      	movs	r2, #11
 800e214:	4619      	mov	r1, r3
 800e216:	f7ff f802 	bl	800d21e <mem_cmp>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00b      	beq.n	800e238 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e220:	2100      	movs	r1, #0
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff fe11 	bl	800de4a <dir_next>
 800e228:	4603      	mov	r3, r0
 800e22a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d0c5      	beq.n	800e1be <dir_find+0x24>
 800e232:	e002      	b.n	800e23a <dir_find+0xa0>
		if (res != FR_OK) break;
 800e234:	bf00      	nop
 800e236:	e000      	b.n	800e23a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e238:	bf00      	nop

	return res;
 800e23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e252:	2101      	movs	r1, #1
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff febd 	bl	800dfd4 <dir_alloc>
 800e25a:	4603      	mov	r3, r0
 800e25c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e25e:	7bfb      	ldrb	r3, [r7, #15]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d11c      	bne.n	800e29e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	4619      	mov	r1, r3
 800e26a:	68b8      	ldr	r0, [r7, #8]
 800e26c:	f7ff f9fa 	bl	800d664 <move_window>
 800e270:	4603      	mov	r3, r0
 800e272:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d111      	bne.n	800e29e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a1b      	ldr	r3, [r3, #32]
 800e27e:	2220      	movs	r2, #32
 800e280:	2100      	movs	r1, #0
 800e282:	4618      	mov	r0, r3
 800e284:	f7fe ffb1 	bl	800d1ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a18      	ldr	r0, [r3, #32]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3324      	adds	r3, #36	; 0x24
 800e290:	220b      	movs	r2, #11
 800e292:	4619      	mov	r1, r3
 800e294:	f7fe ff88 	bl	800d1a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2201      	movs	r2, #1
 800e29c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3710      	adds	r7, #16
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b086      	sub	sp, #24
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	69db      	ldr	r3, [r3, #28]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d04e      	beq.n	800e35e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	613b      	str	r3, [r7, #16]
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e2c8:	e021      	b.n	800e30e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a1a      	ldr	r2, [r3, #32]
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	1c59      	adds	r1, r3, #1
 800e2d2:	6179      	str	r1, [r7, #20]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	2b20      	cmp	r3, #32
 800e2de:	d100      	bne.n	800e2e2 <get_fileinfo+0x3a>
 800e2e0:	e015      	b.n	800e30e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
 800e2e4:	2b05      	cmp	r3, #5
 800e2e6:	d101      	bne.n	800e2ec <get_fileinfo+0x44>
 800e2e8:	23e5      	movs	r3, #229	; 0xe5
 800e2ea:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	2b09      	cmp	r3, #9
 800e2f0:	d106      	bne.n	800e300 <get_fileinfo+0x58>
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	613a      	str	r2, [r7, #16]
 800e2f8:	683a      	ldr	r2, [r7, #0]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	222e      	movs	r2, #46	; 0x2e
 800e2fe:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	613a      	str	r2, [r7, #16]
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	4413      	add	r3, r2
 800e30a:	7bfa      	ldrb	r2, [r7, #15]
 800e30c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2b0a      	cmp	r3, #10
 800e312:	d9da      	bls.n	800e2ca <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	4413      	add	r3, r2
 800e31a:	3309      	adds	r3, #9
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6a1b      	ldr	r3, [r3, #32]
 800e324:	7ada      	ldrb	r2, [r3, #11]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6a1b      	ldr	r3, [r3, #32]
 800e32e:	331c      	adds	r3, #28
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe fecf 	bl	800d0d4 <ld_dword>
 800e336:	4602      	mov	r2, r0
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a1b      	ldr	r3, [r3, #32]
 800e340:	3316      	adds	r3, #22
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe fec6 	bl	800d0d4 <ld_dword>
 800e348:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	80da      	strh	r2, [r3, #6]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	0c1b      	lsrs	r3, r3, #16
 800e356:	b29a      	uxth	r2, r3
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	809a      	strh	r2, [r3, #4]
 800e35c:	e000      	b.n	800e360 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e35e:	bf00      	nop
}
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	1c59      	adds	r1, r3, #1
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	6011      	str	r1, [r2, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e37e:	89fb      	ldrh	r3, [r7, #14]
 800e380:	2b60      	cmp	r3, #96	; 0x60
 800e382:	d905      	bls.n	800e390 <get_achar+0x28>
 800e384:	89fb      	ldrh	r3, [r7, #14]
 800e386:	2b7a      	cmp	r3, #122	; 0x7a
 800e388:	d802      	bhi.n	800e390 <get_achar+0x28>
 800e38a:	89fb      	ldrh	r3, [r7, #14]
 800e38c:	3b20      	subs	r3, #32
 800e38e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e390:	89fb      	ldrh	r3, [r7, #14]
 800e392:	2b7f      	cmp	r3, #127	; 0x7f
 800e394:	d904      	bls.n	800e3a0 <get_achar+0x38>
 800e396:	89fb      	ldrh	r3, [r7, #14]
 800e398:	3b80      	subs	r3, #128	; 0x80
 800e39a:	4a05      	ldr	r2, [pc, #20]	; (800e3b0 <get_achar+0x48>)
 800e39c:	5cd3      	ldrb	r3, [r2, r3]
 800e39e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800e3a0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3714      	adds	r7, #20
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	08016988 	.word	0x08016988

0800e3b4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08a      	sub	sp, #40	; 0x28
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	607a      	str	r2, [r7, #4]
 800e3c0:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e3c2:	e009      	b.n	800e3d8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e3c4:	f107 0308 	add.w	r3, r7, #8
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7ff ffcd 	bl	800e368 <get_achar>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <pattern_matching+0x24>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e064      	b.n	800e4a2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	1e5a      	subs	r2, r3, #1
 800e3dc:	607a      	str	r2, [r7, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1f0      	bne.n	800e3c4 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d104      	bne.n	800e3f4 <pattern_matching+0x40>
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <pattern_matching+0x40>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e056      	b.n	800e4a2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	617b      	str	r3, [r7, #20]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	2b3f      	cmp	r3, #63	; 0x3f
 800e402:	d003      	beq.n	800e40c <pattern_matching+0x58>
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b2a      	cmp	r3, #42	; 0x2a
 800e40a:	d126      	bne.n	800e45a <pattern_matching+0xa6>
				nm = nx = 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	61fb      	str	r3, [r7, #28]
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	1c5a      	adds	r2, r3, #1
 800e418:	617a      	str	r2, [r7, #20]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b3f      	cmp	r3, #63	; 0x3f
 800e41e:	d103      	bne.n	800e428 <pattern_matching+0x74>
 800e420:	6a3b      	ldr	r3, [r7, #32]
 800e422:	3301      	adds	r3, #1
 800e424:	623b      	str	r3, [r7, #32]
 800e426:	e001      	b.n	800e42c <pattern_matching+0x78>
 800e428:	2301      	movs	r3, #1
 800e42a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2b3f      	cmp	r3, #63	; 0x3f
 800e432:	d0ef      	beq.n	800e414 <pattern_matching+0x60>
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	2b2a      	cmp	r3, #42	; 0x2a
 800e43a:	d0eb      	beq.n	800e414 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e43c:	6978      	ldr	r0, [r7, #20]
 800e43e:	6939      	ldr	r1, [r7, #16]
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	6a3a      	ldr	r2, [r7, #32]
 800e444:	f7ff ffb6 	bl	800e3b4 <pattern_matching>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <pattern_matching+0x9e>
 800e44e:	2301      	movs	r3, #1
 800e450:	e027      	b.n	800e4a2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e458:	e017      	b.n	800e48a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800e45a:	f107 0314 	add.w	r3, r7, #20
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff ff82 	bl	800e368 <get_achar>
 800e464:	4603      	mov	r3, r0
 800e466:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800e468:	f107 0310 	add.w	r3, r7, #16
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7ff ff7b 	bl	800e368 <get_achar>
 800e472:	4603      	mov	r3, r0
 800e474:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800e476:	8b7a      	ldrh	r2, [r7, #26]
 800e478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d104      	bne.n	800e488 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e47e:	8b7b      	ldrh	r3, [r7, #26]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1bb      	bne.n	800e3fc <pattern_matching+0x48>
 800e484:	2301      	movs	r3, #1
 800e486:	e00c      	b.n	800e4a2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800e488:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800e48a:	f107 0308 	add.w	r3, r7, #8
 800e48e:	4618      	mov	r0, r3
 800e490:	f7ff ff6a 	bl	800e368 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <pattern_matching+0xec>
 800e49a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1a9      	bne.n	800e3f4 <pattern_matching+0x40>

	return 0;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3728      	adds	r7, #40	; 0x28
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
	...

0800e4ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b088      	sub	sp, #32
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	60fb      	str	r3, [r7, #12]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	3324      	adds	r3, #36	; 0x24
 800e4c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e4c2:	220b      	movs	r2, #11
 800e4c4:	2120      	movs	r1, #32
 800e4c6:	68b8      	ldr	r0, [r7, #8]
 800e4c8:	f7fe fe8f 	bl	800d1ea <mem_set>
	si = i = 0; ni = 8;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	613b      	str	r3, [r7, #16]
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	617b      	str	r3, [r7, #20]
 800e4d4:	2308      	movs	r3, #8
 800e4d6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	1c5a      	adds	r2, r3, #1
 800e4dc:	617a      	str	r2, [r7, #20]
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e4e6:	7ffb      	ldrb	r3, [r7, #31]
 800e4e8:	2b20      	cmp	r3, #32
 800e4ea:	d94e      	bls.n	800e58a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e4ec:	7ffb      	ldrb	r3, [r7, #31]
 800e4ee:	2b2f      	cmp	r3, #47	; 0x2f
 800e4f0:	d006      	beq.n	800e500 <create_name+0x54>
 800e4f2:	7ffb      	ldrb	r3, [r7, #31]
 800e4f4:	2b5c      	cmp	r3, #92	; 0x5c
 800e4f6:	d110      	bne.n	800e51a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e4f8:	e002      	b.n	800e500 <create_name+0x54>
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	617b      	str	r3, [r7, #20]
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	4413      	add	r3, r2
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b2f      	cmp	r3, #47	; 0x2f
 800e50a:	d0f6      	beq.n	800e4fa <create_name+0x4e>
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	4413      	add	r3, r2
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b5c      	cmp	r3, #92	; 0x5c
 800e516:	d0f0      	beq.n	800e4fa <create_name+0x4e>
			break;
 800e518:	e038      	b.n	800e58c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e51a:	7ffb      	ldrb	r3, [r7, #31]
 800e51c:	2b2e      	cmp	r3, #46	; 0x2e
 800e51e:	d003      	beq.n	800e528 <create_name+0x7c>
 800e520:	693a      	ldr	r2, [r7, #16]
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	429a      	cmp	r2, r3
 800e526:	d30c      	bcc.n	800e542 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	2b0b      	cmp	r3, #11
 800e52c:	d002      	beq.n	800e534 <create_name+0x88>
 800e52e:	7ffb      	ldrb	r3, [r7, #31]
 800e530:	2b2e      	cmp	r3, #46	; 0x2e
 800e532:	d001      	beq.n	800e538 <create_name+0x8c>
 800e534:	2306      	movs	r3, #6
 800e536:	e044      	b.n	800e5c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e538:	2308      	movs	r3, #8
 800e53a:	613b      	str	r3, [r7, #16]
 800e53c:	230b      	movs	r3, #11
 800e53e:	61bb      	str	r3, [r7, #24]
			continue;
 800e540:	e022      	b.n	800e588 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e542:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e546:	2b00      	cmp	r3, #0
 800e548:	da04      	bge.n	800e554 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e54a:	7ffb      	ldrb	r3, [r7, #31]
 800e54c:	3b80      	subs	r3, #128	; 0x80
 800e54e:	4a1f      	ldr	r2, [pc, #124]	; (800e5cc <create_name+0x120>)
 800e550:	5cd3      	ldrb	r3, [r2, r3]
 800e552:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e554:	7ffb      	ldrb	r3, [r7, #31]
 800e556:	4619      	mov	r1, r3
 800e558:	481d      	ldr	r0, [pc, #116]	; (800e5d0 <create_name+0x124>)
 800e55a:	f7fe fe87 	bl	800d26c <chk_chr>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <create_name+0xbc>
 800e564:	2306      	movs	r3, #6
 800e566:	e02c      	b.n	800e5c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e568:	7ffb      	ldrb	r3, [r7, #31]
 800e56a:	2b60      	cmp	r3, #96	; 0x60
 800e56c:	d905      	bls.n	800e57a <create_name+0xce>
 800e56e:	7ffb      	ldrb	r3, [r7, #31]
 800e570:	2b7a      	cmp	r3, #122	; 0x7a
 800e572:	d802      	bhi.n	800e57a <create_name+0xce>
 800e574:	7ffb      	ldrb	r3, [r7, #31]
 800e576:	3b20      	subs	r3, #32
 800e578:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	613a      	str	r2, [r7, #16]
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	4413      	add	r3, r2
 800e584:	7ffa      	ldrb	r2, [r7, #31]
 800e586:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e588:	e7a6      	b.n	800e4d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e58a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	441a      	add	r2, r3
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <create_name+0xf4>
 800e59c:	2306      	movs	r3, #6
 800e59e:	e010      	b.n	800e5c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	2be5      	cmp	r3, #229	; 0xe5
 800e5a6:	d102      	bne.n	800e5ae <create_name+0x102>
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	2205      	movs	r2, #5
 800e5ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e5ae:	7ffb      	ldrb	r3, [r7, #31]
 800e5b0:	2b20      	cmp	r3, #32
 800e5b2:	d801      	bhi.n	800e5b8 <create_name+0x10c>
 800e5b4:	2204      	movs	r2, #4
 800e5b6:	e000      	b.n	800e5ba <create_name+0x10e>
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	330b      	adds	r3, #11
 800e5be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e5c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3720      	adds	r7, #32
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	08016988 	.word	0x08016988
 800e5d0:	080167fc 	.word	0x080167fc

0800e5d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b086      	sub	sp, #24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e5e8:	e002      	b.n	800e5f0 <follow_path+0x1c>
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	2b2f      	cmp	r3, #47	; 0x2f
 800e5f6:	d0f8      	beq.n	800e5ea <follow_path+0x16>
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b5c      	cmp	r3, #92	; 0x5c
 800e5fe:	d0f4      	beq.n	800e5ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	2200      	movs	r2, #0
 800e604:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	2b1f      	cmp	r3, #31
 800e60c:	d80a      	bhi.n	800e624 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2280      	movs	r2, #128	; 0x80
 800e612:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e616:	2100      	movs	r1, #0
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff fb9b 	bl	800dd54 <dir_sdi>
 800e61e:	4603      	mov	r3, r0
 800e620:	75fb      	strb	r3, [r7, #23]
 800e622:	e043      	b.n	800e6ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e624:	463b      	mov	r3, r7
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff ff3f 	bl	800e4ac <create_name>
 800e62e:	4603      	mov	r3, r0
 800e630:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e632:	7dfb      	ldrb	r3, [r7, #23]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d134      	bne.n	800e6a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7ff fdae 	bl	800e19a <dir_find>
 800e63e:	4603      	mov	r3, r0
 800e640:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e648:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00a      	beq.n	800e666 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e650:	7dfb      	ldrb	r3, [r7, #23]
 800e652:	2b04      	cmp	r3, #4
 800e654:	d127      	bne.n	800e6a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e656:	7afb      	ldrb	r3, [r7, #11]
 800e658:	f003 0304 	and.w	r3, r3, #4
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d122      	bne.n	800e6a6 <follow_path+0xd2>
 800e660:	2305      	movs	r3, #5
 800e662:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e664:	e01f      	b.n	800e6a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e666:	7afb      	ldrb	r3, [r7, #11]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d11c      	bne.n	800e6aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	799b      	ldrb	r3, [r3, #6]
 800e674:	f003 0310 	and.w	r3, r3, #16
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d102      	bne.n	800e682 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e67c:	2305      	movs	r3, #5
 800e67e:	75fb      	strb	r3, [r7, #23]
 800e680:	e014      	b.n	800e6ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	695b      	ldr	r3, [r3, #20]
 800e68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e690:	4413      	add	r3, r2
 800e692:	4619      	mov	r1, r3
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f7ff fce4 	bl	800e062 <ld_clust>
 800e69a:	4602      	mov	r2, r0
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6a0:	e7c0      	b.n	800e624 <follow_path+0x50>
			if (res != FR_OK) break;
 800e6a2:	bf00      	nop
 800e6a4:	e002      	b.n	800e6ac <follow_path+0xd8>
				break;
 800e6a6:	bf00      	nop
 800e6a8:	e000      	b.n	800e6ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6aa:	bf00      	nop
			}
		}
	}

	return res;
 800e6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3718      	adds	r7, #24
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b087      	sub	sp, #28
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e6be:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d031      	beq.n	800e730 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	617b      	str	r3, [r7, #20]
 800e6d2:	e002      	b.n	800e6da <get_ldnumber+0x24>
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	617b      	str	r3, [r7, #20]
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	2b20      	cmp	r3, #32
 800e6e0:	d903      	bls.n	800e6ea <get_ldnumber+0x34>
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	2b3a      	cmp	r3, #58	; 0x3a
 800e6e8:	d1f4      	bne.n	800e6d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	2b3a      	cmp	r3, #58	; 0x3a
 800e6f0:	d11c      	bne.n	800e72c <get_ldnumber+0x76>
			tp = *path;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	60fa      	str	r2, [r7, #12]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	3b30      	subs	r3, #48	; 0x30
 800e702:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	2b09      	cmp	r3, #9
 800e708:	d80e      	bhi.n	800e728 <get_ldnumber+0x72>
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d10a      	bne.n	800e728 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d107      	bne.n	800e728 <get_ldnumber+0x72>
					vol = (int)i;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	3301      	adds	r3, #1
 800e720:	617b      	str	r3, [r7, #20]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	e002      	b.n	800e732 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e72c:	2300      	movs	r3, #0
 800e72e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e730:	693b      	ldr	r3, [r7, #16]
}
 800e732:	4618      	mov	r0, r3
 800e734:	371c      	adds	r7, #28
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
	...

0800e740 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	70da      	strb	r2, [r3, #3]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f04f 32ff 	mov.w	r2, #4294967295
 800e756:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7fe ff82 	bl	800d664 <move_window>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d001      	beq.n	800e76a <check_fs+0x2a>
 800e766:	2304      	movs	r3, #4
 800e768:	e038      	b.n	800e7dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	3334      	adds	r3, #52	; 0x34
 800e76e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e772:	4618      	mov	r0, r3
 800e774:	f7fe fc96 	bl	800d0a4 <ld_word>
 800e778:	4603      	mov	r3, r0
 800e77a:	461a      	mov	r2, r3
 800e77c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e780:	429a      	cmp	r2, r3
 800e782:	d001      	beq.n	800e788 <check_fs+0x48>
 800e784:	2303      	movs	r3, #3
 800e786:	e029      	b.n	800e7dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e78e:	2be9      	cmp	r3, #233	; 0xe9
 800e790:	d009      	beq.n	800e7a6 <check_fs+0x66>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e798:	2beb      	cmp	r3, #235	; 0xeb
 800e79a:	d11e      	bne.n	800e7da <check_fs+0x9a>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e7a2:	2b90      	cmp	r3, #144	; 0x90
 800e7a4:	d119      	bne.n	800e7da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	3334      	adds	r3, #52	; 0x34
 800e7aa:	3336      	adds	r3, #54	; 0x36
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe fc91 	bl	800d0d4 <ld_dword>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e7b8:	4a0a      	ldr	r2, [pc, #40]	; (800e7e4 <check_fs+0xa4>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d101      	bne.n	800e7c2 <check_fs+0x82>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e00c      	b.n	800e7dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	3334      	adds	r3, #52	; 0x34
 800e7c6:	3352      	adds	r3, #82	; 0x52
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fe fc83 	bl	800d0d4 <ld_dword>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	4b05      	ldr	r3, [pc, #20]	; (800e7e8 <check_fs+0xa8>)
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d101      	bne.n	800e7da <check_fs+0x9a>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	e000      	b.n	800e7dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e7da:	2302      	movs	r3, #2
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	00544146 	.word	0x00544146
 800e7e8:	33544146 	.word	0x33544146

0800e7ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b096      	sub	sp, #88	; 0x58
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f7ff ff58 	bl	800e6b6 <get_ldnumber>
 800e806:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	da01      	bge.n	800e812 <find_volume+0x26>
 800e80e:	230b      	movs	r3, #11
 800e810:	e236      	b.n	800ec80 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e812:	4aac      	ldr	r2, [pc, #688]	; (800eac4 <find_volume+0x2d8>)
 800e814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e81a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <find_volume+0x3a>
 800e822:	230c      	movs	r3, #12
 800e824:	e22c      	b.n	800ec80 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e826:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e828:	f7fe fd3b 	bl	800d2a2 <lock_fs>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d101      	bne.n	800e836 <find_volume+0x4a>
 800e832:	230f      	movs	r3, #15
 800e834:	e224      	b.n	800ec80 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e83a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e83c:	79fb      	ldrb	r3, [r7, #7]
 800e83e:	f023 0301 	bic.w	r3, r3, #1
 800e842:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d01a      	beq.n	800e882 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	785b      	ldrb	r3, [r3, #1]
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe fb89 	bl	800cf68 <disk_status>
 800e856:	4603      	mov	r3, r0
 800e858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e85c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e860:	f003 0301 	and.w	r3, r3, #1
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10c      	bne.n	800e882 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d007      	beq.n	800e87e <find_volume+0x92>
 800e86e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e872:	f003 0304 	and.w	r3, r3, #4
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e87a:	230a      	movs	r3, #10
 800e87c:	e200      	b.n	800ec80 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e87e:	2300      	movs	r3, #0
 800e880:	e1fe      	b.n	800ec80 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	2200      	movs	r2, #0
 800e886:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	785b      	ldrb	r3, [r3, #1]
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe fb81 	bl	800cf9c <disk_initialize>
 800e89a:	4603      	mov	r3, r0
 800e89c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e8a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d001      	beq.n	800e8b0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e8ac:	2303      	movs	r3, #3
 800e8ae:	e1e7      	b.n	800ec80 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d007      	beq.n	800e8c6 <find_volume+0xda>
 800e8b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8ba:	f003 0304 	and.w	r3, r3, #4
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d001      	beq.n	800e8c6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	e1dc      	b.n	800ec80 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e8ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e8cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8ce:	f7ff ff37 	bl	800e740 <check_fs>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e8d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d14b      	bne.n	800e978 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8e4:	e01f      	b.n	800e926 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ee:	011b      	lsls	r3, r3, #4
 800e8f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e8f4:	4413      	add	r3, r2
 800e8f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d006      	beq.n	800e910 <find_volume+0x124>
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	3308      	adds	r3, #8
 800e906:	4618      	mov	r0, r3
 800e908:	f7fe fbe4 	bl	800d0d4 <ld_dword>
 800e90c:	4602      	mov	r2, r0
 800e90e:	e000      	b.n	800e912 <find_volume+0x126>
 800e910:	2200      	movs	r2, #0
 800e912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e91a:	440b      	add	r3, r1
 800e91c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e922:	3301      	adds	r3, #1
 800e924:	643b      	str	r3, [r7, #64]	; 0x40
 800e926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e928:	2b03      	cmp	r3, #3
 800e92a:	d9dc      	bls.n	800e8e6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e92c:	2300      	movs	r3, #0
 800e92e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <find_volume+0x150>
 800e936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e938:	3b01      	subs	r3, #1
 800e93a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e944:	4413      	add	r3, r2
 800e946:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e94a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d005      	beq.n	800e95e <find_volume+0x172>
 800e952:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e954:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e956:	f7ff fef3 	bl	800e740 <check_fs>
 800e95a:	4603      	mov	r3, r0
 800e95c:	e000      	b.n	800e960 <find_volume+0x174>
 800e95e:	2303      	movs	r3, #3
 800e960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e964:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d905      	bls.n	800e978 <find_volume+0x18c>
 800e96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96e:	3301      	adds	r3, #1
 800e970:	643b      	str	r3, [r7, #64]	; 0x40
 800e972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e974:	2b03      	cmp	r3, #3
 800e976:	d9e1      	bls.n	800e93c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e97c:	2b04      	cmp	r3, #4
 800e97e:	d101      	bne.n	800e984 <find_volume+0x198>
 800e980:	2301      	movs	r3, #1
 800e982:	e17d      	b.n	800ec80 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d901      	bls.n	800e990 <find_volume+0x1a4>
 800e98c:	230d      	movs	r3, #13
 800e98e:	e177      	b.n	800ec80 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e992:	3334      	adds	r3, #52	; 0x34
 800e994:	330b      	adds	r3, #11
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fb84 	bl	800d0a4 <ld_word>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9a2:	d001      	beq.n	800e9a8 <find_volume+0x1bc>
 800e9a4:	230d      	movs	r3, #13
 800e9a6:	e16b      	b.n	800ec80 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	3334      	adds	r3, #52	; 0x34
 800e9ac:	3316      	adds	r3, #22
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fe fb78 	bl	800d0a4 <ld_word>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d106      	bne.n	800e9cc <find_volume+0x1e0>
 800e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c0:	3334      	adds	r3, #52	; 0x34
 800e9c2:	3324      	adds	r3, #36	; 0x24
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fe fb85 	bl	800d0d4 <ld_dword>
 800e9ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9d0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9de:	789b      	ldrb	r3, [r3, #2]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d005      	beq.n	800e9f0 <find_volume+0x204>
 800e9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e6:	789b      	ldrb	r3, [r3, #2]
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d001      	beq.n	800e9f0 <find_volume+0x204>
 800e9ec:	230d      	movs	r3, #13
 800e9ee:	e147      	b.n	800ec80 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f2:	789b      	ldrb	r3, [r3, #2]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f8:	fb02 f303 	mul.w	r3, r2, r3
 800e9fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	895b      	ldrh	r3, [r3, #10]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d008      	beq.n	800ea24 <find_volume+0x238>
 800ea12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea14:	895b      	ldrh	r3, [r3, #10]
 800ea16:	461a      	mov	r2, r3
 800ea18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1a:	895b      	ldrh	r3, [r3, #10]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	4013      	ands	r3, r2
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d001      	beq.n	800ea28 <find_volume+0x23c>
 800ea24:	230d      	movs	r3, #13
 800ea26:	e12b      	b.n	800ec80 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	3334      	adds	r3, #52	; 0x34
 800ea2c:	3311      	adds	r3, #17
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fe fb38 	bl	800d0a4 <ld_word>
 800ea34:	4603      	mov	r3, r0
 800ea36:	461a      	mov	r2, r3
 800ea38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ea3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3e:	891b      	ldrh	r3, [r3, #8]
 800ea40:	f003 030f 	and.w	r3, r3, #15
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d001      	beq.n	800ea4e <find_volume+0x262>
 800ea4a:	230d      	movs	r3, #13
 800ea4c:	e118      	b.n	800ec80 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ea4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea50:	3334      	adds	r3, #52	; 0x34
 800ea52:	3313      	adds	r3, #19
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fe fb25 	bl	800d0a4 <ld_word>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d106      	bne.n	800ea72 <find_volume+0x286>
 800ea64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea66:	3334      	adds	r3, #52	; 0x34
 800ea68:	3320      	adds	r3, #32
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fe fb32 	bl	800d0d4 <ld_dword>
 800ea70:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ea72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea74:	3334      	adds	r3, #52	; 0x34
 800ea76:	330e      	adds	r3, #14
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fe fb13 	bl	800d0a4 <ld_word>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ea82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d101      	bne.n	800ea8c <find_volume+0x2a0>
 800ea88:	230d      	movs	r3, #13
 800ea8a:	e0f9      	b.n	800ec80 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ea8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea90:	4413      	add	r3, r2
 800ea92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea94:	8912      	ldrh	r2, [r2, #8]
 800ea96:	0912      	lsrs	r2, r2, #4
 800ea98:	b292      	uxth	r2, r2
 800ea9a:	4413      	add	r3, r2
 800ea9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ea9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d201      	bcs.n	800eaaa <find_volume+0x2be>
 800eaa6:	230d      	movs	r3, #13
 800eaa8:	e0ea      	b.n	800ec80 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eaaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eab2:	8952      	ldrh	r2, [r2, #10]
 800eab4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eab8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d103      	bne.n	800eac8 <find_volume+0x2dc>
 800eac0:	230d      	movs	r3, #13
 800eac2:	e0dd      	b.n	800ec80 <find_volume+0x494>
 800eac4:	20000294 	.word	0x20000294
		fmt = FS_FAT32;
 800eac8:	2303      	movs	r3, #3
 800eaca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d802      	bhi.n	800eade <find_volume+0x2f2>
 800ead8:	2302      	movs	r3, #2
 800eada:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d802      	bhi.n	800eaee <find_volume+0x302>
 800eae8:	2301      	movs	r3, #1
 800eaea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	1c9a      	adds	r2, r3, #2
 800eaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eafa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eafc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb00:	441a      	add	r2, r3
 800eb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb04:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eb06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	441a      	add	r2, r3
 800eb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eb10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb14:	2b03      	cmp	r3, #3
 800eb16:	d11e      	bne.n	800eb56 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1a:	3334      	adds	r3, #52	; 0x34
 800eb1c:	332a      	adds	r3, #42	; 0x2a
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fac0 	bl	800d0a4 <ld_word>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d001      	beq.n	800eb2e <find_volume+0x342>
 800eb2a:	230d      	movs	r3, #13
 800eb2c:	e0a8      	b.n	800ec80 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb30:	891b      	ldrh	r3, [r3, #8]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <find_volume+0x34e>
 800eb36:	230d      	movs	r3, #13
 800eb38:	e0a2      	b.n	800ec80 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3c:	3334      	adds	r3, #52	; 0x34
 800eb3e:	332c      	adds	r3, #44	; 0x2c
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7fe fac7 	bl	800d0d4 <ld_dword>
 800eb46:	4602      	mov	r2, r0
 800eb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4e:	699b      	ldr	r3, [r3, #24]
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	647b      	str	r3, [r7, #68]	; 0x44
 800eb54:	e01f      	b.n	800eb96 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	891b      	ldrh	r3, [r3, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d101      	bne.n	800eb62 <find_volume+0x376>
 800eb5e:	230d      	movs	r3, #13
 800eb60:	e08e      	b.n	800ec80 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb68:	441a      	add	r2, r3
 800eb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eb6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d103      	bne.n	800eb7e <find_volume+0x392>
 800eb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	005b      	lsls	r3, r3, #1
 800eb7c:	e00a      	b.n	800eb94 <find_volume+0x3a8>
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb80:	699a      	ldr	r2, [r3, #24]
 800eb82:	4613      	mov	r3, r2
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	4413      	add	r3, r2
 800eb88:	085a      	lsrs	r2, r3, #1
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	699b      	ldr	r3, [r3, #24]
 800eb8e:	f003 0301 	and.w	r3, r3, #1
 800eb92:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eb94:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb98:	69da      	ldr	r2, [r3, #28]
 800eb9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eba0:	0a5b      	lsrs	r3, r3, #9
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d201      	bcs.n	800ebaa <find_volume+0x3be>
 800eba6:	230d      	movs	r3, #13
 800eba8:	e06a      	b.n	800ec80 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebac:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb0:	615a      	str	r2, [r3, #20]
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	695a      	ldr	r2, [r3, #20]
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ebba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbc:	2280      	movs	r2, #128	; 0x80
 800ebbe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ebc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebc4:	2b03      	cmp	r3, #3
 800ebc6:	d149      	bne.n	800ec5c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	3334      	adds	r3, #52	; 0x34
 800ebcc:	3330      	adds	r3, #48	; 0x30
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fe fa68 	bl	800d0a4 <ld_word>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d140      	bne.n	800ec5c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ebda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebdc:	3301      	adds	r3, #1
 800ebde:	4619      	mov	r1, r3
 800ebe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebe2:	f7fe fd3f 	bl	800d664 <move_window>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d137      	bne.n	800ec5c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800ebec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebee:	2200      	movs	r2, #0
 800ebf0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ebf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf4:	3334      	adds	r3, #52	; 0x34
 800ebf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fe fa52 	bl	800d0a4 <ld_word>
 800ec00:	4603      	mov	r3, r0
 800ec02:	461a      	mov	r2, r3
 800ec04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d127      	bne.n	800ec5c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ec0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0e:	3334      	adds	r3, #52	; 0x34
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe fa5f 	bl	800d0d4 <ld_dword>
 800ec16:	4602      	mov	r2, r0
 800ec18:	4b1b      	ldr	r3, [pc, #108]	; (800ec88 <find_volume+0x49c>)
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d11e      	bne.n	800ec5c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec20:	3334      	adds	r3, #52	; 0x34
 800ec22:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fe fa54 	bl	800d0d4 <ld_dword>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	4b17      	ldr	r3, [pc, #92]	; (800ec8c <find_volume+0x4a0>)
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d113      	bne.n	800ec5c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	3334      	adds	r3, #52	; 0x34
 800ec38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fe fa49 	bl	800d0d4 <ld_dword>
 800ec42:	4602      	mov	r2, r0
 800ec44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec46:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4a:	3334      	adds	r3, #52	; 0x34
 800ec4c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7fe fa3f 	bl	800d0d4 <ld_dword>
 800ec56:	4602      	mov	r2, r0
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec62:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec64:	4b0a      	ldr	r3, [pc, #40]	; (800ec90 <find_volume+0x4a4>)
 800ec66:	881b      	ldrh	r3, [r3, #0]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	4b08      	ldr	r3, [pc, #32]	; (800ec90 <find_volume+0x4a4>)
 800ec6e:	801a      	strh	r2, [r3, #0]
 800ec70:	4b07      	ldr	r3, [pc, #28]	; (800ec90 <find_volume+0x4a4>)
 800ec72:	881a      	ldrh	r2, [r3, #0]
 800ec74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec76:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ec78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec7a:	f7fe fc8b 	bl	800d594 <clear_lock>
#endif
	return FR_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3758      	adds	r7, #88	; 0x58
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	41615252 	.word	0x41615252
 800ec8c:	61417272 	.word	0x61417272
 800ec90:	20000298 	.word	0x20000298

0800ec94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ec9e:	2309      	movs	r3, #9
 800eca0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d02e      	beq.n	800ed06 <validate+0x72>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d02a      	beq.n	800ed06 <validate+0x72>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d025      	beq.n	800ed06 <validate+0x72>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	889a      	ldrh	r2, [r3, #4]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	88db      	ldrh	r3, [r3, #6]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d11e      	bne.n	800ed06 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fe fae8 	bl	800d2a2 <lock_fs>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d014      	beq.n	800ed02 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	785b      	ldrb	r3, [r3, #1]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe f942 	bl	800cf68 <disk_status>
 800ece4:	4603      	mov	r3, r0
 800ece6:	f003 0301 	and.w	r3, r3, #1
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d102      	bne.n	800ecf4 <validate+0x60>
				res = FR_OK;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	73fb      	strb	r3, [r7, #15]
 800ecf2:	e008      	b.n	800ed06 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2100      	movs	r1, #0
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fe fae7 	bl	800d2ce <unlock_fs>
 800ed00:	e001      	b.n	800ed06 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ed02:	230f      	movs	r3, #15
 800ed04:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed06:	7bfb      	ldrb	r3, [r7, #15]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d102      	bne.n	800ed12 <validate+0x7e>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	e000      	b.n	800ed14 <validate+0x80>
 800ed12:	2300      	movs	r3, #0
 800ed14:	683a      	ldr	r2, [r7, #0]
 800ed16:	6013      	str	r3, [r2, #0]
	return res;
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed36:	f107 0310 	add.w	r3, r7, #16
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7ff fcbb 	bl	800e6b6 <get_ldnumber>
 800ed40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	da01      	bge.n	800ed4c <f_mount+0x28>
 800ed48:	230b      	movs	r3, #11
 800ed4a:	e048      	b.n	800edde <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed4c:	4a26      	ldr	r2, [pc, #152]	; (800ede8 <f_mount+0xc4>)
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00f      	beq.n	800ed7c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ed5c:	69b8      	ldr	r0, [r7, #24]
 800ed5e:	f7fe fc19 	bl	800d594 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	4618      	mov	r0, r3
 800ed68:	f001 f828 	bl	800fdbc <ff_del_syncobj>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d101      	bne.n	800ed76 <f_mount+0x52>
 800ed72:	2302      	movs	r3, #2
 800ed74:	e033      	b.n	800edde <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00f      	beq.n	800eda2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2200      	movs	r2, #0
 800ed86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	b2da      	uxtb	r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	330c      	adds	r3, #12
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f000 fff7 	bl	800fd86 <ff_cre_syncobj>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d101      	bne.n	800eda2 <f_mount+0x7e>
 800ed9e:	2302      	movs	r3, #2
 800eda0:	e01d      	b.n	800edde <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	4910      	ldr	r1, [pc, #64]	; (800ede8 <f_mount+0xc4>)
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d002      	beq.n	800edb8 <f_mount+0x94>
 800edb2:	79fb      	ldrb	r3, [r7, #7]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d001      	beq.n	800edbc <f_mount+0x98>
 800edb8:	2300      	movs	r3, #0
 800edba:	e010      	b.n	800edde <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800edbc:	f107 010c 	add.w	r1, r7, #12
 800edc0:	f107 0308 	add.w	r3, r7, #8
 800edc4:	2200      	movs	r2, #0
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7ff fd10 	bl	800e7ec <find_volume>
 800edcc:	4603      	mov	r3, r0
 800edce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	7dfa      	ldrb	r2, [r7, #23]
 800edd4:	4611      	mov	r1, r2
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fe fa79 	bl	800d2ce <unlock_fs>
 800eddc:	7dfb      	ldrb	r3, [r7, #23]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3720      	adds	r7, #32
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	20000294 	.word	0x20000294

0800edec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b09a      	sub	sp, #104	; 0x68
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d101      	bne.n	800ee04 <f_open+0x18>
 800ee00:	2309      	movs	r3, #9
 800ee02:	e1b4      	b.n	800f16e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ee0c:	79fa      	ldrb	r2, [r7, #7]
 800ee0e:	f107 0114 	add.w	r1, r7, #20
 800ee12:	f107 0308 	add.w	r3, r7, #8
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7ff fce8 	bl	800e7ec <find_volume>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ee22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f040 8191 	bne.w	800f14e <f_open+0x362>
		dj.obj.fs = fs;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	f107 0318 	add.w	r3, r7, #24
 800ee36:	4611      	mov	r1, r2
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7ff fbcb 	bl	800e5d4 <follow_path>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d11a      	bne.n	800ee82 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee50:	b25b      	sxtb	r3, r3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	da03      	bge.n	800ee5e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee56:	2306      	movs	r3, #6
 800ee58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee5c:	e011      	b.n	800ee82 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	f023 0301 	bic.w	r3, r3, #1
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bf14      	ite	ne
 800ee68:	2301      	movne	r3, #1
 800ee6a:	2300      	moveq	r3, #0
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	461a      	mov	r2, r3
 800ee70:	f107 0318 	add.w	r3, r7, #24
 800ee74:	4611      	mov	r1, r2
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fe fa44 	bl	800d304 <chk_lock>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee82:	79fb      	ldrb	r3, [r7, #7]
 800ee84:	f003 031c 	and.w	r3, r3, #28
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d07f      	beq.n	800ef8c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ee8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d017      	beq.n	800eec4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee98:	2b04      	cmp	r3, #4
 800ee9a:	d10e      	bne.n	800eeba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee9c:	f7fe fa8e 	bl	800d3bc <enq_lock>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d006      	beq.n	800eeb4 <f_open+0xc8>
 800eea6:	f107 0318 	add.w	r3, r7, #24
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7ff f9ca 	bl	800e244 <dir_register>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	e000      	b.n	800eeb6 <f_open+0xca>
 800eeb4:	2312      	movs	r3, #18
 800eeb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	f043 0308 	orr.w	r3, r3, #8
 800eec0:	71fb      	strb	r3, [r7, #7]
 800eec2:	e010      	b.n	800eee6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eec4:	7fbb      	ldrb	r3, [r7, #30]
 800eec6:	f003 0311 	and.w	r3, r3, #17
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d003      	beq.n	800eed6 <f_open+0xea>
					res = FR_DENIED;
 800eece:	2307      	movs	r3, #7
 800eed0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eed4:	e007      	b.n	800eee6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	f003 0304 	and.w	r3, r3, #4
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <f_open+0xfa>
 800eee0:	2308      	movs	r3, #8
 800eee2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eee6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d168      	bne.n	800efc0 <f_open+0x1d4>
 800eeee:	79fb      	ldrb	r3, [r7, #7]
 800eef0:	f003 0308 	and.w	r3, r3, #8
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d063      	beq.n	800efc0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eef8:	f7fc f9b4 	bl	800b264 <get_fattime>
 800eefc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef00:	330e      	adds	r3, #14
 800ef02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fe f923 	bl	800d150 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0c:	3316      	adds	r3, #22
 800ef0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7fe f91d 	bl	800d150 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	330b      	adds	r3, #11
 800ef1a:	2220      	movs	r2, #32
 800ef1c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef22:	4611      	mov	r1, r2
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7ff f89c 	bl	800e062 <ld_clust>
 800ef2a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef30:	2200      	movs	r2, #0
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7ff f8b4 	bl	800e0a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3a:	331c      	adds	r3, #28
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe f906 	bl	800d150 <st_dword>
					fs->wflag = 1;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	2201      	movs	r2, #1
 800ef48:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d037      	beq.n	800efc0 <f_open+0x1d4>
						dw = fs->winsect;
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef54:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ef56:	f107 0318 	add.w	r3, r7, #24
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe fdc7 	bl	800daf2 <remove_chain>
 800ef64:	4603      	mov	r3, r0
 800ef66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ef6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d126      	bne.n	800efc0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe fb74 	bl	800d664 <move_window>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef86:	3a01      	subs	r2, #1
 800ef88:	611a      	str	r2, [r3, #16]
 800ef8a:	e019      	b.n	800efc0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d115      	bne.n	800efc0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef94:	7fbb      	ldrb	r3, [r7, #30]
 800ef96:	f003 0310 	and.w	r3, r3, #16
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d003      	beq.n	800efa6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ef9e:	2304      	movs	r3, #4
 800efa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800efa4:	e00c      	b.n	800efc0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	f003 0302 	and.w	r3, r3, #2
 800efac:	2b00      	cmp	r3, #0
 800efae:	d007      	beq.n	800efc0 <f_open+0x1d4>
 800efb0:	7fbb      	ldrb	r3, [r7, #30]
 800efb2:	f003 0301 	and.w	r3, r3, #1
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d002      	beq.n	800efc0 <f_open+0x1d4>
						res = FR_DENIED;
 800efba:	2307      	movs	r3, #7
 800efbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800efc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d128      	bne.n	800f01a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	f003 0308 	and.w	r3, r3, #8
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d003      	beq.n	800efda <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800efd2:	79fb      	ldrb	r3, [r7, #7]
 800efd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800efe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efe8:	79fb      	ldrb	r3, [r7, #7]
 800efea:	f023 0301 	bic.w	r3, r3, #1
 800efee:	2b00      	cmp	r3, #0
 800eff0:	bf14      	ite	ne
 800eff2:	2301      	movne	r3, #1
 800eff4:	2300      	moveq	r3, #0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	461a      	mov	r2, r3
 800effa:	f107 0318 	add.w	r3, r7, #24
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe f9fd 	bl	800d400 <inc_lock>
 800f006:	4602      	mov	r2, r0
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d102      	bne.n	800f01a <f_open+0x22e>
 800f014:	2302      	movs	r3, #2
 800f016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f01a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f040 8095 	bne.w	800f14e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f028:	4611      	mov	r1, r2
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7ff f819 	bl	800e062 <ld_clust>
 800f030:	4602      	mov	r2, r0
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f038:	331c      	adds	r3, #28
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fe f84a 	bl	800d0d4 <ld_dword>
 800f040:	4602      	mov	r2, r0
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2200      	movs	r2, #0
 800f04a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	88da      	ldrh	r2, [r3, #6]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	79fa      	ldrb	r2, [r7, #7]
 800f05e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3330      	adds	r3, #48	; 0x30
 800f076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f07a:	2100      	movs	r1, #0
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fe f8b4 	bl	800d1ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f082:	79fb      	ldrb	r3, [r7, #7]
 800f084:	f003 0320 	and.w	r3, r3, #32
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d060      	beq.n	800f14e <f_open+0x362>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d05c      	beq.n	800f14e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	68da      	ldr	r2, [r3, #12]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	895b      	ldrh	r3, [r3, #10]
 800f0a0:	025b      	lsls	r3, r3, #9
 800f0a2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0b0:	e016      	b.n	800f0e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe fb8f 	bl	800d7da <get_fat>
 800f0bc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d802      	bhi.n	800f0ca <f_open+0x2de>
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f0ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d0:	d102      	bne.n	800f0d8 <f_open+0x2ec>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d103      	bne.n	800f0f0 <f_open+0x304>
 800f0e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d8e0      	bhi.n	800f0b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f0f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d127      	bne.n	800f14e <f_open+0x362>
 800f0fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f104:	2b00      	cmp	r3, #0
 800f106:	d022      	beq.n	800f14e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe fb45 	bl	800d79c <clust2sect>
 800f112:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f116:	2b00      	cmp	r3, #0
 800f118:	d103      	bne.n	800f122 <f_open+0x336>
						res = FR_INT_ERR;
 800f11a:	2302      	movs	r3, #2
 800f11c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f120:	e015      	b.n	800f14e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f124:	0a5a      	lsrs	r2, r3, #9
 800f126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f128:	441a      	add	r2, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	7858      	ldrb	r0, [r3, #1]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6a1a      	ldr	r2, [r3, #32]
 800f13c:	2301      	movs	r3, #1
 800f13e:	f7fd ff53 	bl	800cfe8 <disk_read>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <f_open+0x362>
 800f148:	2301      	movs	r3, #1
 800f14a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f14e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f152:	2b00      	cmp	r3, #0
 800f154:	d002      	beq.n	800f15c <f_open+0x370>
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f162:	4611      	mov	r1, r2
 800f164:	4618      	mov	r0, r3
 800f166:	f7fe f8b2 	bl	800d2ce <unlock_fs>
 800f16a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3768      	adds	r7, #104	; 0x68
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b08c      	sub	sp, #48	; 0x30
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	60f8      	str	r0, [r7, #12]
 800f17e:	60b9      	str	r1, [r7, #8]
 800f180:	607a      	str	r2, [r7, #4]
 800f182:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f107 0210 	add.w	r2, r7, #16
 800f194:	4611      	mov	r1, r2
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff fd7c 	bl	800ec94 <validate>
 800f19c:	4603      	mov	r3, r0
 800f19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d107      	bne.n	800f1ba <f_write+0x44>
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	7d5b      	ldrb	r3, [r3, #21]
 800f1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f1b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d009      	beq.n	800f1ce <f_write+0x58>
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fe f883 	bl	800d2ce <unlock_fs>
 800f1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1cc:	e173      	b.n	800f4b6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	7d1b      	ldrb	r3, [r3, #20]
 800f1d2:	f003 0302 	and.w	r3, r3, #2
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <f_write+0x72>
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	2107      	movs	r1, #7
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fe f875 	bl	800d2ce <unlock_fs>
 800f1e4:	2307      	movs	r3, #7
 800f1e6:	e166      	b.n	800f4b6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	699a      	ldr	r2, [r3, #24]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	441a      	add	r2, r3
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	f080 814b 	bcs.w	800f490 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	699b      	ldr	r3, [r3, #24]
 800f1fe:	43db      	mvns	r3, r3
 800f200:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f202:	e145      	b.n	800f490 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f040 8101 	bne.w	800f414 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	699b      	ldr	r3, [r3, #24]
 800f216:	0a5b      	lsrs	r3, r3, #9
 800f218:	693a      	ldr	r2, [r7, #16]
 800f21a:	8952      	ldrh	r2, [r2, #10]
 800f21c:	3a01      	subs	r2, #1
 800f21e:	4013      	ands	r3, r2
 800f220:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d14d      	bne.n	800f2c4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	699b      	ldr	r3, [r3, #24]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d10c      	bne.n	800f24a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d11a      	bne.n	800f272 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2100      	movs	r1, #0
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe fcbb 	bl	800dbbc <create_chain>
 800f246:	62b8      	str	r0, [r7, #40]	; 0x28
 800f248:	e013      	b.n	800f272 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d007      	beq.n	800f262 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	4619      	mov	r1, r3
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f7fe fd47 	bl	800dcec <clmt_clust>
 800f25e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f260:	e007      	b.n	800f272 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f262:	68fa      	ldr	r2, [r7, #12]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	69db      	ldr	r3, [r3, #28]
 800f268:	4619      	mov	r1, r3
 800f26a:	4610      	mov	r0, r2
 800f26c:	f7fe fca6 	bl	800dbbc <create_chain>
 800f270:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 8110 	beq.w	800f49a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d109      	bne.n	800f294 <f_write+0x11e>
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2202      	movs	r2, #2
 800f284:	755a      	strb	r2, [r3, #21]
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	2102      	movs	r1, #2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fe f81f 	bl	800d2ce <unlock_fs>
 800f290:	2302      	movs	r3, #2
 800f292:	e110      	b.n	800f4b6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d109      	bne.n	800f2b0 <f_write+0x13a>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	755a      	strb	r2, [r3, #21]
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	2101      	movs	r1, #1
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fe f811 	bl	800d2ce <unlock_fs>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e102      	b.n	800f4b6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d102      	bne.n	800f2c4 <f_write+0x14e>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	7d1b      	ldrb	r3, [r3, #20]
 800f2c8:	b25b      	sxtb	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	da1d      	bge.n	800f30a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	7858      	ldrb	r0, [r3, #1]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6a1a      	ldr	r2, [r3, #32]
 800f2dc:	2301      	movs	r3, #1
 800f2de:	f7fd fea3 	bl	800d028 <disk_write>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d009      	beq.n	800f2fc <f_write+0x186>
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	755a      	strb	r2, [r3, #21]
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd ffeb 	bl	800d2ce <unlock_fs>
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e0dc      	b.n	800f4b6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	7d1b      	ldrb	r3, [r3, #20]
 800f300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f304:	b2da      	uxtb	r2, r3
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f30a:	693a      	ldr	r2, [r7, #16]
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	69db      	ldr	r3, [r3, #28]
 800f310:	4619      	mov	r1, r3
 800f312:	4610      	mov	r0, r2
 800f314:	f7fe fa42 	bl	800d79c <clust2sect>
 800f318:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d109      	bne.n	800f334 <f_write+0x1be>
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2202      	movs	r2, #2
 800f324:	755a      	strb	r2, [r3, #21]
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	2102      	movs	r1, #2
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fd ffcf 	bl	800d2ce <unlock_fs>
 800f330:	2302      	movs	r3, #2
 800f332:	e0c0      	b.n	800f4b6 <f_write+0x340>
			sect += csect;
 800f334:	697a      	ldr	r2, [r7, #20]
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	4413      	add	r3, r2
 800f33a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	0a5b      	lsrs	r3, r3, #9
 800f340:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d041      	beq.n	800f3cc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f348:	69ba      	ldr	r2, [r7, #24]
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	4413      	add	r3, r2
 800f34e:	693a      	ldr	r2, [r7, #16]
 800f350:	8952      	ldrh	r2, [r2, #10]
 800f352:	4293      	cmp	r3, r2
 800f354:	d905      	bls.n	800f362 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	895b      	ldrh	r3, [r3, #10]
 800f35a:	461a      	mov	r2, r3
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	7858      	ldrb	r0, [r3, #1]
 800f366:	6a3b      	ldr	r3, [r7, #32]
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	69f9      	ldr	r1, [r7, #28]
 800f36c:	f7fd fe5c 	bl	800d028 <disk_write>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d009      	beq.n	800f38a <f_write+0x214>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2201      	movs	r2, #1
 800f37a:	755a      	strb	r2, [r3, #21]
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	2101      	movs	r1, #1
 800f380:	4618      	mov	r0, r3
 800f382:	f7fd ffa4 	bl	800d2ce <unlock_fs>
 800f386:	2301      	movs	r3, #1
 800f388:	e095      	b.n	800f4b6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6a1a      	ldr	r2, [r3, #32]
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	1ad3      	subs	r3, r2, r3
 800f392:	6a3a      	ldr	r2, [r7, #32]
 800f394:	429a      	cmp	r2, r3
 800f396:	d915      	bls.n	800f3c4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6a1a      	ldr	r2, [r3, #32]
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	025b      	lsls	r3, r3, #9
 800f3a8:	69fa      	ldr	r2, [r7, #28]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	f7fd fef9 	bl	800d1a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	7d1b      	ldrb	r3, [r3, #20]
 800f3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3be:	b2da      	uxtb	r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f3c4:	6a3b      	ldr	r3, [r7, #32]
 800f3c6:	025b      	lsls	r3, r3, #9
 800f3c8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f3ca:	e044      	b.n	800f456 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6a1b      	ldr	r3, [r3, #32]
 800f3d0:	697a      	ldr	r2, [r7, #20]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d01b      	beq.n	800f40e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	699a      	ldr	r2, [r3, #24]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d215      	bcs.n	800f40e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	7858      	ldrb	r0, [r3, #1]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	697a      	ldr	r2, [r7, #20]
 800f3f0:	f7fd fdfa 	bl	800cfe8 <disk_read>
 800f3f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d009      	beq.n	800f40e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	755a      	strb	r2, [r3, #21]
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	2101      	movs	r1, #1
 800f404:	4618      	mov	r0, r3
 800f406:	f7fd ff62 	bl	800d2ce <unlock_fs>
 800f40a:	2301      	movs	r3, #1
 800f40c:	e053      	b.n	800f4b6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	697a      	ldr	r2, [r7, #20]
 800f412:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f41c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f420:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	429a      	cmp	r2, r3
 800f428:	d901      	bls.n	800f42e <f_write+0x2b8>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f43c:	4413      	add	r3, r2
 800f43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f440:	69f9      	ldr	r1, [r7, #28]
 800f442:	4618      	mov	r0, r3
 800f444:	f7fd feb0 	bl	800d1a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f450:	b2da      	uxtb	r2, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f456:	69fa      	ldr	r2, [r7, #28]
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	4413      	add	r3, r2
 800f45c:	61fb      	str	r3, [r7, #28]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	699a      	ldr	r2, [r3, #24]
 800f462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f464:	441a      	add	r2, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	619a      	str	r2, [r3, #24]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	68da      	ldr	r2, [r3, #12]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	699b      	ldr	r3, [r3, #24]
 800f472:	429a      	cmp	r2, r3
 800f474:	bf38      	it	cc
 800f476:	461a      	movcc	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	60da      	str	r2, [r3, #12]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f482:	441a      	add	r2, r3
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	601a      	str	r2, [r3, #0]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	f47f aeb6 	bne.w	800f204 <f_write+0x8e>
 800f498:	e000      	b.n	800f49c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f49a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	7d1b      	ldrb	r3, [r3, #20]
 800f4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fd ff0d 	bl	800d2ce <unlock_fs>
 800f4b4:	2300      	movs	r3, #0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3730      	adds	r7, #48	; 0x30
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b086      	sub	sp, #24
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f107 0208 	add.w	r2, r7, #8
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7ff fbe0 	bl	800ec94 <validate>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4d8:	7dfb      	ldrb	r3, [r7, #23]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d16d      	bne.n	800f5ba <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	7d1b      	ldrb	r3, [r3, #20]
 800f4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d067      	beq.n	800f5ba <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	7d1b      	ldrb	r3, [r3, #20]
 800f4ee:	b25b      	sxtb	r3, r3
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	da1a      	bge.n	800f52a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	7858      	ldrb	r0, [r3, #1]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6a1a      	ldr	r2, [r3, #32]
 800f502:	2301      	movs	r3, #1
 800f504:	f7fd fd90 	bl	800d028 <disk_write>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d006      	beq.n	800f51c <f_sync+0x5e>
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2101      	movs	r1, #1
 800f512:	4618      	mov	r0, r3
 800f514:	f7fd fedb 	bl	800d2ce <unlock_fs>
 800f518:	2301      	movs	r3, #1
 800f51a:	e055      	b.n	800f5c8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	7d1b      	ldrb	r3, [r3, #20]
 800f520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f524:	b2da      	uxtb	r2, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f52a:	f7fb fe9b 	bl	800b264 <get_fattime>
 800f52e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f536:	4619      	mov	r1, r3
 800f538:	4610      	mov	r0, r2
 800f53a:	f7fe f893 	bl	800d664 <move_window>
 800f53e:	4603      	mov	r3, r0
 800f540:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f542:	7dfb      	ldrb	r3, [r7, #23]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d138      	bne.n	800f5ba <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f54c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	330b      	adds	r3, #11
 800f552:	781a      	ldrb	r2, [r3, #0]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	330b      	adds	r3, #11
 800f558:	f042 0220 	orr.w	r2, r2, #32
 800f55c:	b2d2      	uxtb	r2, r2
 800f55e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6818      	ldr	r0, [r3, #0]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	461a      	mov	r2, r3
 800f56a:	68f9      	ldr	r1, [r7, #12]
 800f56c:	f7fe fd98 	bl	800e0a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f103 021c 	add.w	r2, r3, #28
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	4619      	mov	r1, r3
 800f57c:	4610      	mov	r0, r2
 800f57e:	f7fd fde7 	bl	800d150 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	3316      	adds	r3, #22
 800f586:	6939      	ldr	r1, [r7, #16]
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fd fde1 	bl	800d150 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	3312      	adds	r3, #18
 800f592:	2100      	movs	r1, #0
 800f594:	4618      	mov	r0, r3
 800f596:	f7fd fdc0 	bl	800d11a <st_word>
					fs->wflag = 1;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2201      	movs	r2, #1
 800f59e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fe f88c 	bl	800d6c0 <sync_fs>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	7d1b      	ldrb	r3, [r3, #20]
 800f5b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5b4:	b2da      	uxtb	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	7dfa      	ldrb	r2, [r7, #23]
 800f5be:	4611      	mov	r1, r2
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fd fe84 	bl	800d2ce <unlock_fs>
 800f5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b090      	sub	sp, #64	; 0x40
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f107 0208 	add.w	r2, r7, #8
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7ff fb56 	bl	800ec94 <validate>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f5ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d103      	bne.n	800f5fe <f_lseek+0x2e>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	7d5b      	ldrb	r3, [r3, #21]
 800f5fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f5fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f602:	2b00      	cmp	r3, #0
 800f604:	d009      	beq.n	800f61a <f_lseek+0x4a>
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f60c:	4611      	mov	r1, r2
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fd fe5d 	bl	800d2ce <unlock_fs>
 800f614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f618:	e229      	b.n	800fa6e <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f000 80ea 	beq.w	800f7f8 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f62a:	d164      	bne.n	800f6f6 <f_lseek+0x126>
			tbl = fp->cltbl;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f630:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f634:	1d1a      	adds	r2, r3, #4
 800f636:	627a      	str	r2, [r7, #36]	; 0x24
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	617b      	str	r3, [r7, #20]
 800f63c:	2302      	movs	r3, #2
 800f63e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d044      	beq.n	800f6d6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64e:	613b      	str	r3, [r7, #16]
 800f650:	2300      	movs	r3, #0
 800f652:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f656:	3302      	adds	r3, #2
 800f658:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	60fb      	str	r3, [r7, #12]
 800f65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f660:	3301      	adds	r3, #1
 800f662:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fe f8b6 	bl	800d7da <get_fat>
 800f66e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	2b01      	cmp	r3, #1
 800f674:	d809      	bhi.n	800f68a <f_lseek+0xba>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2202      	movs	r2, #2
 800f67a:	755a      	strb	r2, [r3, #21]
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	2102      	movs	r1, #2
 800f680:	4618      	mov	r0, r3
 800f682:	f7fd fe24 	bl	800d2ce <unlock_fs>
 800f686:	2302      	movs	r3, #2
 800f688:	e1f1      	b.n	800fa6e <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f690:	d109      	bne.n	800f6a6 <f_lseek+0xd6>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2201      	movs	r2, #1
 800f696:	755a      	strb	r2, [r3, #21]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	2101      	movs	r1, #1
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7fd fe16 	bl	800d2ce <unlock_fs>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e1e3      	b.n	800fa6e <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d0d4      	beq.n	800f65a <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d809      	bhi.n	800f6cc <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ba:	1d1a      	adds	r2, r3, #4
 800f6bc:	627a      	str	r2, [r7, #36]	; 0x24
 800f6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c4:	1d1a      	adds	r2, r3, #4
 800f6c6:	627a      	str	r2, [r7, #36]	; 0x24
 800f6c8:	693a      	ldr	r2, [r7, #16]
 800f6ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	699b      	ldr	r3, [r3, #24]
 800f6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d3ba      	bcc.n	800f64c <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f6de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d803      	bhi.n	800f6ee <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	601a      	str	r2, [r3, #0]
 800f6ec:	e1b6      	b.n	800fa5c <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f6ee:	2311      	movs	r3, #17
 800f6f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f6f4:	e1b2      	b.n	800fa5c <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d902      	bls.n	800f706 <f_lseek+0x136>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 81a4 	beq.w	800fa5c <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	3b01      	subs	r3, #1
 800f718:	4619      	mov	r1, r3
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7fe fae6 	bl	800dcec <clmt_clust>
 800f720:	4602      	mov	r2, r0
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	4619      	mov	r1, r3
 800f72e:	4610      	mov	r0, r2
 800f730:	f7fe f834 	bl	800d79c <clust2sect>
 800f734:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d109      	bne.n	800f750 <f_lseek+0x180>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2202      	movs	r2, #2
 800f740:	755a      	strb	r2, [r3, #21]
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2102      	movs	r1, #2
 800f746:	4618      	mov	r0, r3
 800f748:	f7fd fdc1 	bl	800d2ce <unlock_fs>
 800f74c:	2302      	movs	r3, #2
 800f74e:	e18e      	b.n	800fa6e <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	3b01      	subs	r3, #1
 800f754:	0a5b      	lsrs	r3, r3, #9
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	8952      	ldrh	r2, [r2, #10]
 800f75a:	3a01      	subs	r2, #1
 800f75c:	4013      	ands	r3, r2
 800f75e:	69ba      	ldr	r2, [r7, #24]
 800f760:	4413      	add	r3, r2
 800f762:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	699b      	ldr	r3, [r3, #24]
 800f768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f000 8175 	beq.w	800fa5c <f_lseek+0x48c>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	69ba      	ldr	r2, [r7, #24]
 800f778:	429a      	cmp	r2, r3
 800f77a:	f000 816f 	beq.w	800fa5c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	7d1b      	ldrb	r3, [r3, #20]
 800f782:	b25b      	sxtb	r3, r3
 800f784:	2b00      	cmp	r3, #0
 800f786:	da1d      	bge.n	800f7c4 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	7858      	ldrb	r0, [r3, #1]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a1a      	ldr	r2, [r3, #32]
 800f796:	2301      	movs	r3, #1
 800f798:	f7fd fc46 	bl	800d028 <disk_write>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d009      	beq.n	800f7b6 <f_lseek+0x1e6>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	755a      	strb	r2, [r3, #21]
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	2101      	movs	r1, #1
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fd fd8e 	bl	800d2ce <unlock_fs>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e15b      	b.n	800fa6e <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	7d1b      	ldrb	r3, [r3, #20]
 800f7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	7858      	ldrb	r0, [r3, #1]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	69ba      	ldr	r2, [r7, #24]
 800f7d2:	f7fd fc09 	bl	800cfe8 <disk_read>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d009      	beq.n	800f7f0 <f_lseek+0x220>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	755a      	strb	r2, [r3, #21]
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fd fd71 	bl	800d2ce <unlock_fs>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e13e      	b.n	800fa6e <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	69ba      	ldr	r2, [r7, #24]
 800f7f4:	621a      	str	r2, [r3, #32]
 800f7f6:	e131      	b.n	800fa5c <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	683a      	ldr	r2, [r7, #0]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d908      	bls.n	800f814 <f_lseek+0x244>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	7d1b      	ldrb	r3, [r3, #20]
 800f806:	f003 0302 	and.w	r3, r3, #2
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d102      	bne.n	800f814 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	68db      	ldr	r3, [r3, #12]
 800f812:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	699b      	ldr	r3, [r3, #24]
 800f818:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	637b      	str	r3, [r7, #52]	; 0x34
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f822:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	f000 80c0 	beq.w	800f9ac <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	895b      	ldrh	r3, [r3, #10]
 800f830:	025b      	lsls	r3, r3, #9
 800f832:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d01b      	beq.n	800f872 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	1e5a      	subs	r2, r3, #1
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	fbb2 f2f3 	udiv	r2, r2, r3
 800f844:	6a3b      	ldr	r3, [r7, #32]
 800f846:	1e59      	subs	r1, r3, #1
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f84e:	429a      	cmp	r2, r3
 800f850:	d30f      	bcc.n	800f872 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f852:	6a3b      	ldr	r3, [r7, #32]
 800f854:	1e5a      	subs	r2, r3, #1
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	425b      	negs	r3, r3
 800f85a:	401a      	ands	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	699b      	ldr	r3, [r3, #24]
 800f864:	683a      	ldr	r2, [r7, #0]
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	69db      	ldr	r3, [r3, #28]
 800f86e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f870:	e02c      	b.n	800f8cc <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d123      	bne.n	800f8c6 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2100      	movs	r1, #0
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe f99a 	bl	800dbbc <create_chain>
 800f888:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d109      	bne.n	800f8a4 <f_lseek+0x2d4>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2202      	movs	r2, #2
 800f894:	755a      	strb	r2, [r3, #21]
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	2102      	movs	r1, #2
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fd fd17 	bl	800d2ce <unlock_fs>
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	e0e4      	b.n	800fa6e <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8aa:	d109      	bne.n	800f8c0 <f_lseek+0x2f0>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	755a      	strb	r2, [r3, #21]
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fd fd09 	bl	800d2ce <unlock_fs>
 800f8bc:	2301      	movs	r3, #1
 800f8be:	e0d6      	b.n	800fa6e <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8c4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8ca:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d06c      	beq.n	800f9ac <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800f8d2:	e044      	b.n	800f95e <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800f8d4:	683a      	ldr	r2, [r7, #0]
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	603b      	str	r3, [r7, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	699a      	ldr	r2, [r3, #24]
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	441a      	add	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	7d1b      	ldrb	r3, [r3, #20]
 800f8ec:	f003 0302 	and.w	r3, r3, #2
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00b      	beq.n	800f90c <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe f95f 	bl	800dbbc <create_chain>
 800f8fe:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f902:	2b00      	cmp	r3, #0
 800f904:	d108      	bne.n	800f918 <f_lseek+0x348>
							ofs = 0; break;
 800f906:	2300      	movs	r3, #0
 800f908:	603b      	str	r3, [r7, #0]
 800f90a:	e02c      	b.n	800f966 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f910:	4618      	mov	r0, r3
 800f912:	f7fd ff62 	bl	800d7da <get_fat>
 800f916:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f91e:	d109      	bne.n	800f934 <f_lseek+0x364>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2201      	movs	r2, #1
 800f924:	755a      	strb	r2, [r3, #21]
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2101      	movs	r1, #1
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fd fccf 	bl	800d2ce <unlock_fs>
 800f930:	2301      	movs	r3, #1
 800f932:	e09c      	b.n	800fa6e <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	2b01      	cmp	r3, #1
 800f938:	d904      	bls.n	800f944 <f_lseek+0x374>
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	699b      	ldr	r3, [r3, #24]
 800f93e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f940:	429a      	cmp	r2, r3
 800f942:	d309      	bcc.n	800f958 <f_lseek+0x388>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2202      	movs	r2, #2
 800f948:	755a      	strb	r2, [r3, #21]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2102      	movs	r1, #2
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fd fcbd 	bl	800d2ce <unlock_fs>
 800f954:	2302      	movs	r3, #2
 800f956:	e08a      	b.n	800fa6e <f_lseek+0x49e>
					fp->clust = clst;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f95c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f95e:	683a      	ldr	r2, [r7, #0]
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	429a      	cmp	r2, r3
 800f964:	d8b6      	bhi.n	800f8d4 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	699a      	ldr	r2, [r3, #24]
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	441a      	add	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d017      	beq.n	800f9ac <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f980:	4618      	mov	r0, r3
 800f982:	f7fd ff0b 	bl	800d79c <clust2sect>
 800f986:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d109      	bne.n	800f9a2 <f_lseek+0x3d2>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2202      	movs	r2, #2
 800f992:	755a      	strb	r2, [r3, #21]
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2102      	movs	r1, #2
 800f998:	4618      	mov	r0, r3
 800f99a:	f7fd fc98 	bl	800d2ce <unlock_fs>
 800f99e:	2302      	movs	r3, #2
 800f9a0:	e065      	b.n	800fa6e <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	0a5b      	lsrs	r3, r3, #9
 800f9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9a8:	4413      	add	r3, r2
 800f9aa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	699a      	ldr	r2, [r3, #24]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d90a      	bls.n	800f9ce <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	699a      	ldr	r2, [r3, #24]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	7d1b      	ldrb	r3, [r3, #20]
 800f9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9c8:	b2da      	uxtb	r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	699b      	ldr	r3, [r3, #24]
 800f9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d040      	beq.n	800fa5c <f_lseek+0x48c>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6a1b      	ldr	r3, [r3, #32]
 800f9de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d03b      	beq.n	800fa5c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	7d1b      	ldrb	r3, [r3, #20]
 800f9e8:	b25b      	sxtb	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	da1d      	bge.n	800fa2a <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	7858      	ldrb	r0, [r3, #1]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a1a      	ldr	r2, [r3, #32]
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	f7fd fb13 	bl	800d028 <disk_write>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d009      	beq.n	800fa1c <f_lseek+0x44c>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	755a      	strb	r2, [r3, #21]
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2101      	movs	r1, #1
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fd fc5b 	bl	800d2ce <unlock_fs>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e028      	b.n	800fa6e <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7d1b      	ldrb	r3, [r3, #20]
 800fa20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa24:	b2da      	uxtb	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	7858      	ldrb	r0, [r3, #1]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa34:	2301      	movs	r3, #1
 800fa36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa38:	f7fd fad6 	bl	800cfe8 <disk_read>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d009      	beq.n	800fa56 <f_lseek+0x486>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2201      	movs	r2, #1
 800fa46:	755a      	strb	r2, [r3, #21]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2101      	movs	r1, #1
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fd fc3e 	bl	800d2ce <unlock_fs>
 800fa52:	2301      	movs	r3, #1
 800fa54:	e00b      	b.n	800fa6e <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa5a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa62:	4611      	mov	r1, r2
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fd fc32 	bl	800d2ce <unlock_fs>
 800fa6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3740      	adds	r7, #64	; 0x40
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b086      	sub	sp, #24
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d101      	bne.n	800fa8a <f_opendir+0x14>
 800fa86:	2309      	movs	r3, #9
 800fa88:	e06a      	b.n	800fb60 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800fa8e:	f107 010c 	add.w	r1, r7, #12
 800fa92:	463b      	mov	r3, r7
 800fa94:	2200      	movs	r2, #0
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fe fea8 	bl	800e7ec <find_volume>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800faa0:	7dfb      	ldrb	r3, [r7, #23]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d14f      	bne.n	800fb46 <f_opendir+0xd0>
		obj->fs = fs;
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	4619      	mov	r1, r3
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f7fe fd8f 	bl	800e5d4 <follow_path>
 800fab6:	4603      	mov	r3, r0
 800fab8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800faba:	7dfb      	ldrb	r3, [r7, #23]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d13d      	bne.n	800fb3c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fac6:	b25b      	sxtb	r3, r3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	db12      	blt.n	800faf2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	799b      	ldrb	r3, [r3, #6]
 800fad0:	f003 0310 	and.w	r3, r3, #16
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00a      	beq.n	800faee <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	4619      	mov	r1, r3
 800fae0:	4610      	mov	r0, r2
 800fae2:	f7fe fabe 	bl	800e062 <ld_clust>
 800fae6:	4602      	mov	r2, r0
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	609a      	str	r2, [r3, #8]
 800faec:	e001      	b.n	800faf2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800faee:	2305      	movs	r3, #5
 800faf0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800faf2:	7dfb      	ldrb	r3, [r7, #23]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d121      	bne.n	800fb3c <f_opendir+0xc6>
				obj->id = fs->id;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	88da      	ldrh	r2, [r3, #6]
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fb00:	2100      	movs	r1, #0
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7fe f926 	bl	800dd54 <dir_sdi>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fb0c:	7dfb      	ldrb	r3, [r7, #23]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d114      	bne.n	800fb3c <f_opendir+0xc6>
					if (obj->sclust) {
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00d      	beq.n	800fb36 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7fd fc6f 	bl	800d400 <inc_lock>
 800fb22:	4602      	mov	r2, r0
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d105      	bne.n	800fb3c <f_opendir+0xc6>
 800fb30:	2312      	movs	r3, #18
 800fb32:	75fb      	strb	r3, [r7, #23]
 800fb34:	e002      	b.n	800fb3c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fb3c:	7dfb      	ldrb	r3, [r7, #23]
 800fb3e:	2b04      	cmp	r3, #4
 800fb40:	d101      	bne.n	800fb46 <f_opendir+0xd0>
 800fb42:	2305      	movs	r3, #5
 800fb44:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d002      	beq.n	800fb52 <f_opendir+0xdc>
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	7dfa      	ldrb	r2, [r7, #23]
 800fb56:	4611      	mov	r1, r2
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fd fbb8 	bl	800d2ce <unlock_fs>
 800fb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f107 0208 	add.w	r2, r7, #8
 800fb76:	4611      	mov	r1, r2
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff f88b 	bl	800ec94 <validate>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d115      	bne.n	800fbb4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	691b      	ldr	r3, [r3, #16]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d006      	beq.n	800fb9e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fd fcc1 	bl	800d51c <dec_lock>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fb9e:	7bfb      	ldrb	r3, [r7, #15]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d102      	bne.n	800fbaa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2200      	movs	r2, #0
 800fba8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	2100      	movs	r1, #0
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fd fb8d 	bl	800d2ce <unlock_fs>
#endif
	}
	return res;
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b084      	sub	sp, #16
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f107 0208 	add.w	r2, r7, #8
 800fbce:	4611      	mov	r1, r2
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff f85f 	bl	800ec94 <validate>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d126      	bne.n	800fc2e <f_readdir+0x70>
		if (!fno) {
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d106      	bne.n	800fbf4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7fe f8b3 	bl	800dd54 <dir_sdi>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	73fb      	strb	r3, [r7, #15]
 800fbf2:	e01c      	b.n	800fc2e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7fe fa72 	bl	800e0e0 <dir_read>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	2b04      	cmp	r3, #4
 800fc04:	d101      	bne.n	800fc0a <f_readdir+0x4c>
 800fc06:	2300      	movs	r3, #0
 800fc08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fc0a:	7bfb      	ldrb	r3, [r7, #15]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d10e      	bne.n	800fc2e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fc10:	6839      	ldr	r1, [r7, #0]
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7fe fb48 	bl	800e2a8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fc18:	2100      	movs	r1, #0
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f7fe f915 	bl	800de4a <dir_next>
 800fc20:	4603      	mov	r3, r0
 800fc22:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
 800fc26:	2b04      	cmp	r3, #4
 800fc28:	d101      	bne.n	800fc2e <f_readdir+0x70>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	7bfa      	ldrb	r2, [r7, #15]
 800fc32:	4611      	mov	r1, r2
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7fd fb4a 	bl	800d2ce <unlock_fs>
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fc4e:	6839      	ldr	r1, [r7, #0]
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7ff ffb4 	bl	800fbbe <f_readdir>
 800fc56:	4603      	mov	r3, r0
 800fc58:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fc5a:	7bfb      	ldrb	r3, [r7, #15]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d114      	bne.n	800fc8a <f_findnext+0x46>
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d011      	beq.n	800fc8a <f_findnext+0x46>
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	7a5b      	ldrb	r3, [r3, #9]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00d      	beq.n	800fc8a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	f103 0109 	add.w	r1, r3, #9
 800fc78:	2300      	movs	r3, #0
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f7fe fb9a 	bl	800e3b4 <pattern_matching>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d100      	bne.n	800fc88 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fc86:	e7e2      	b.n	800fc4e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fc88:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800fc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3710      	adds	r7, #16
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
 800fca0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f7ff fee3 	bl	800fa76 <f_opendir>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d105      	bne.n	800fcc6 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800fcba:	68b9      	ldr	r1, [r7, #8]
 800fcbc:	68f8      	ldr	r0, [r7, #12]
 800fcbe:	f7ff ffc1 	bl	800fc44 <f_findnext>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800fcc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b087      	sub	sp, #28
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	4613      	mov	r3, r2
 800fcdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fcde:	2301      	movs	r3, #1
 800fce0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fce6:	4b1f      	ldr	r3, [pc, #124]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fce8:	7a5b      	ldrb	r3, [r3, #9]
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d131      	bne.n	800fd54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fcf0:	4b1c      	ldr	r3, [pc, #112]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fcf2:	7a5b      	ldrb	r3, [r3, #9]
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	4b1a      	ldr	r3, [pc, #104]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fcfe:	4b19      	ldr	r3, [pc, #100]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fd00:	7a5b      	ldrb	r3, [r3, #9]
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	4a17      	ldr	r2, [pc, #92]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4413      	add	r3, r2
 800fd0a:	68fa      	ldr	r2, [r7, #12]
 800fd0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fd0e:	4b15      	ldr	r3, [pc, #84]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fd10:	7a5b      	ldrb	r3, [r3, #9]
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	461a      	mov	r2, r3
 800fd16:	4b13      	ldr	r3, [pc, #76]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fd18:	4413      	add	r3, r2
 800fd1a:	79fa      	ldrb	r2, [r7, #7]
 800fd1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fd1e:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fd20:	7a5b      	ldrb	r3, [r3, #9]
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	1c5a      	adds	r2, r3, #1
 800fd26:	b2d1      	uxtb	r1, r2
 800fd28:	4a0e      	ldr	r2, [pc, #56]	; (800fd64 <FATFS_LinkDriverEx+0x94>)
 800fd2a:	7251      	strb	r1, [r2, #9]
 800fd2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fd2e:	7dbb      	ldrb	r3, [r7, #22]
 800fd30:	3330      	adds	r3, #48	; 0x30
 800fd32:	b2da      	uxtb	r2, r3
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	223a      	movs	r2, #58	; 0x3a
 800fd3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	3302      	adds	r3, #2
 800fd44:	222f      	movs	r2, #47	; 0x2f
 800fd46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	3303      	adds	r3, #3
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fd50:	2300      	movs	r3, #0
 800fd52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	371c      	adds	r7, #28
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	200002bc 	.word	0x200002bc

0800fd68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fd72:	2200      	movs	r2, #0
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f7ff ffaa 	bl	800fcd0 <FATFS_LinkDriverEx>
 800fd7c:	4603      	mov	r3, r0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b084      	sub	sp, #16
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	6039      	str	r1, [r7, #0]
 800fd90:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800fd92:	2200      	movs	r2, #0
 800fd94:	2101      	movs	r1, #1
 800fd96:	2001      	movs	r0, #1
 800fd98:	f000 fb5e 	bl	8010458 <osSemaphoreNew>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	bf14      	ite	ne
 800fdaa:	2301      	movne	r3, #1
 800fdac:	2300      	moveq	r3, #0
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	60fb      	str	r3, [r7, #12]

    return ret;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 fca3 	bl	8010710 <osSemaphoreDelete>
#endif
    return 1;
 800fdca:	2301      	movs	r3, #1
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800fddc:	2300      	movs	r3, #0
 800fdde:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800fde0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fbd5 	bl	8010594 <osSemaphoreAcquire>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d101      	bne.n	800fdf4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3710      	adds	r7, #16
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b082      	sub	sp, #8
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fc2a 	bl	8010660 <osSemaphoreRelease>
#endif
}
 800fe0c:	bf00      	nop
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fe14:	b480      	push	{r7}
 800fe16:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fe18:	bf00      	nop
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
	...

0800fe24 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fe24:	b480      	push	{r7}
 800fe26:	b085      	sub	sp, #20
 800fe28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe2a:	f3ef 8305 	mrs	r3, IPSR
 800fe2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10f      	bne.n	800fe56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe36:	f3ef 8310 	mrs	r3, PRIMASK
 800fe3a:	607b      	str	r3, [r7, #4]
  return(result);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d105      	bne.n	800fe4e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe42:	f3ef 8311 	mrs	r3, BASEPRI
 800fe46:	603b      	str	r3, [r7, #0]
  return(result);
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d007      	beq.n	800fe5e <osKernelInitialize+0x3a>
 800fe4e:	4b0e      	ldr	r3, [pc, #56]	; (800fe88 <osKernelInitialize+0x64>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d103      	bne.n	800fe5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fe56:	f06f 0305 	mvn.w	r3, #5
 800fe5a:	60fb      	str	r3, [r7, #12]
 800fe5c:	e00c      	b.n	800fe78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fe5e:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <osKernelInitialize+0x64>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d105      	bne.n	800fe72 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fe66:	4b08      	ldr	r3, [pc, #32]	; (800fe88 <osKernelInitialize+0x64>)
 800fe68:	2201      	movs	r2, #1
 800fe6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	60fb      	str	r3, [r7, #12]
 800fe70:	e002      	b.n	800fe78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fe72:	f04f 33ff 	mov.w	r3, #4294967295
 800fe76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fe78:	68fb      	ldr	r3, [r7, #12]
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3714      	adds	r7, #20
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	200002c8 	.word	0x200002c8

0800fe8c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800fe92:	f002 fe7b 	bl	8012b8c <xTaskGetSchedulerState>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d004      	beq.n	800fea6 <osKernelGetState+0x1a>
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	d105      	bne.n	800feac <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800fea0:	2302      	movs	r3, #2
 800fea2:	607b      	str	r3, [r7, #4]
      break;
 800fea4:	e00c      	b.n	800fec0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800fea6:	2303      	movs	r3, #3
 800fea8:	607b      	str	r3, [r7, #4]
      break;
 800feaa:	e009      	b.n	800fec0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800feac:	4b07      	ldr	r3, [pc, #28]	; (800fecc <osKernelGetState+0x40>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d102      	bne.n	800feba <osKernelGetState+0x2e>
        state = osKernelReady;
 800feb4:	2301      	movs	r3, #1
 800feb6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800feb8:	e001      	b.n	800febe <osKernelGetState+0x32>
        state = osKernelInactive;
 800feba:	2300      	movs	r3, #0
 800febc:	607b      	str	r3, [r7, #4]
      break;
 800febe:	bf00      	nop
  }

  return (state);
 800fec0:	687b      	ldr	r3, [r7, #4]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	200002c8 	.word	0x200002c8

0800fed0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fed6:	f3ef 8305 	mrs	r3, IPSR
 800feda:	60bb      	str	r3, [r7, #8]
  return(result);
 800fedc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10f      	bne.n	800ff02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fee2:	f3ef 8310 	mrs	r3, PRIMASK
 800fee6:	607b      	str	r3, [r7, #4]
  return(result);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d105      	bne.n	800fefa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800feee:	f3ef 8311 	mrs	r3, BASEPRI
 800fef2:	603b      	str	r3, [r7, #0]
  return(result);
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d007      	beq.n	800ff0a <osKernelStart+0x3a>
 800fefa:	4b0f      	ldr	r3, [pc, #60]	; (800ff38 <osKernelStart+0x68>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	d103      	bne.n	800ff0a <osKernelStart+0x3a>
    stat = osErrorISR;
 800ff02:	f06f 0305 	mvn.w	r3, #5
 800ff06:	60fb      	str	r3, [r7, #12]
 800ff08:	e010      	b.n	800ff2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ff0a:	4b0b      	ldr	r3, [pc, #44]	; (800ff38 <osKernelStart+0x68>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d109      	bne.n	800ff26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ff12:	f7ff ff7f 	bl	800fe14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff16:	4b08      	ldr	r3, [pc, #32]	; (800ff38 <osKernelStart+0x68>)
 800ff18:	2202      	movs	r2, #2
 800ff1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff1c:	f002 f9c8 	bl	80122b0 <vTaskStartScheduler>
      stat = osOK;
 800ff20:	2300      	movs	r3, #0
 800ff22:	60fb      	str	r3, [r7, #12]
 800ff24:	e002      	b.n	800ff2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ff26:	f04f 33ff 	mov.w	r3, #4294967295
 800ff2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	200002c8 	.word	0x200002c8

0800ff3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff42:	f3ef 8305 	mrs	r3, IPSR
 800ff46:	60bb      	str	r3, [r7, #8]
  return(result);
 800ff48:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10f      	bne.n	800ff6e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff4e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff52:	607b      	str	r3, [r7, #4]
  return(result);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d105      	bne.n	800ff66 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff5a:	f3ef 8311 	mrs	r3, BASEPRI
 800ff5e:	603b      	str	r3, [r7, #0]
  return(result);
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d007      	beq.n	800ff76 <osKernelGetTickCount+0x3a>
 800ff66:	4b08      	ldr	r3, [pc, #32]	; (800ff88 <osKernelGetTickCount+0x4c>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b02      	cmp	r3, #2
 800ff6c:	d103      	bne.n	800ff76 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800ff6e:	f002 fac3 	bl	80124f8 <xTaskGetTickCountFromISR>
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	e002      	b.n	800ff7c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800ff76:	f002 faaf 	bl	80124d8 <xTaskGetTickCount>
 800ff7a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	200002c8 	.word	0x200002c8

0800ff8c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800ff8c:	b480      	push	{r7}
 800ff8e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800ff90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	46bd      	mov	sp, r7
 800ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9c:	4770      	bx	lr
	...

0800ffa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b090      	sub	sp, #64	; 0x40
 800ffa4:	af04      	add	r7, sp, #16
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ffac:	2300      	movs	r3, #0
 800ffae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffb0:	f3ef 8305 	mrs	r3, IPSR
 800ffb4:	61fb      	str	r3, [r7, #28]
  return(result);
 800ffb6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f040 808f 	bne.w	80100dc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffbe:	f3ef 8310 	mrs	r3, PRIMASK
 800ffc2:	61bb      	str	r3, [r7, #24]
  return(result);
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d105      	bne.n	800ffd6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffca:	f3ef 8311 	mrs	r3, BASEPRI
 800ffce:	617b      	str	r3, [r7, #20]
  return(result);
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d003      	beq.n	800ffde <osThreadNew+0x3e>
 800ffd6:	4b44      	ldr	r3, [pc, #272]	; (80100e8 <osThreadNew+0x148>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d07e      	beq.n	80100dc <osThreadNew+0x13c>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d07b      	beq.n	80100dc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ffe4:	2380      	movs	r3, #128	; 0x80
 800ffe6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ffe8:	2318      	movs	r3, #24
 800ffea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ffec:	2300      	movs	r3, #0
 800ffee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fff0:	f04f 33ff 	mov.w	r3, #4294967295
 800fff4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d045      	beq.n	8010088 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d002      	beq.n	801000a <osThreadNew+0x6a>
        name = attr->name;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d002      	beq.n	8010018 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	699b      	ldr	r3, [r3, #24]
 8010016:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001a:	2b00      	cmp	r3, #0
 801001c:	d008      	beq.n	8010030 <osThreadNew+0x90>
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	2b38      	cmp	r3, #56	; 0x38
 8010022:	d805      	bhi.n	8010030 <osThreadNew+0x90>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <osThreadNew+0x94>
        return (NULL);
 8010030:	2300      	movs	r3, #0
 8010032:	e054      	b.n	80100de <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	695b      	ldr	r3, [r3, #20]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d003      	beq.n	8010044 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	695b      	ldr	r3, [r3, #20]
 8010040:	089b      	lsrs	r3, r3, #2
 8010042:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00e      	beq.n	801006a <osThreadNew+0xca>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	2b5b      	cmp	r3, #91	; 0x5b
 8010052:	d90a      	bls.n	801006a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010058:	2b00      	cmp	r3, #0
 801005a:	d006      	beq.n	801006a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	695b      	ldr	r3, [r3, #20]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d002      	beq.n	801006a <osThreadNew+0xca>
        mem = 1;
 8010064:	2301      	movs	r3, #1
 8010066:	623b      	str	r3, [r7, #32]
 8010068:	e010      	b.n	801008c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d10c      	bne.n	801008c <osThreadNew+0xec>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d108      	bne.n	801008c <osThreadNew+0xec>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d104      	bne.n	801008c <osThreadNew+0xec>
          mem = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	623b      	str	r3, [r7, #32]
 8010086:	e001      	b.n	801008c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d110      	bne.n	80100b4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801009a:	9202      	str	r2, [sp, #8]
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f001 fea5 	bl	8011df8 <xTaskCreateStatic>
 80100ae:	4603      	mov	r3, r0
 80100b0:	613b      	str	r3, [r7, #16]
 80100b2:	e013      	b.n	80100dc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80100b4:	6a3b      	ldr	r3, [r7, #32]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d110      	bne.n	80100dc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80100ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100bc:	b29a      	uxth	r2, r3
 80100be:	f107 0310 	add.w	r3, r7, #16
 80100c2:	9301      	str	r3, [sp, #4]
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f001 fef3 	bl	8011eb8 <xTaskCreate>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d001      	beq.n	80100dc <osThreadNew+0x13c>
          hTask = NULL;
 80100d8:	2300      	movs	r3, #0
 80100da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80100dc:	693b      	ldr	r3, [r7, #16]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3730      	adds	r7, #48	; 0x30
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	200002c8 	.word	0x200002c8

080100ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100f4:	f3ef 8305 	mrs	r3, IPSR
 80100f8:	613b      	str	r3, [r7, #16]
  return(result);
 80100fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10f      	bne.n	8010120 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010100:	f3ef 8310 	mrs	r3, PRIMASK
 8010104:	60fb      	str	r3, [r7, #12]
  return(result);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d105      	bne.n	8010118 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801010c:	f3ef 8311 	mrs	r3, BASEPRI
 8010110:	60bb      	str	r3, [r7, #8]
  return(result);
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d007      	beq.n	8010128 <osDelay+0x3c>
 8010118:	4b0a      	ldr	r3, [pc, #40]	; (8010144 <osDelay+0x58>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b02      	cmp	r3, #2
 801011e:	d103      	bne.n	8010128 <osDelay+0x3c>
    stat = osErrorISR;
 8010120:	f06f 0305 	mvn.w	r3, #5
 8010124:	617b      	str	r3, [r7, #20]
 8010126:	e007      	b.n	8010138 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010128:	2300      	movs	r3, #0
 801012a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d002      	beq.n	8010138 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f002 f886 	bl	8012244 <vTaskDelay>
    }
  }

  return (stat);
 8010138:	697b      	ldr	r3, [r7, #20]
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	200002c8 	.word	0x200002c8

08010148 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8010148:	b580      	push	{r7, lr}
 801014a:	b088      	sub	sp, #32
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010150:	f3ef 8305 	mrs	r3, IPSR
 8010154:	617b      	str	r3, [r7, #20]
  return(result);
 8010156:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8010158:	2b00      	cmp	r3, #0
 801015a:	d10f      	bne.n	801017c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801015c:	f3ef 8310 	mrs	r3, PRIMASK
 8010160:	613b      	str	r3, [r7, #16]
  return(result);
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d105      	bne.n	8010174 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010168:	f3ef 8311 	mrs	r3, BASEPRI
 801016c:	60fb      	str	r3, [r7, #12]
  return(result);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d007      	beq.n	8010184 <osDelayUntil+0x3c>
 8010174:	4b13      	ldr	r3, [pc, #76]	; (80101c4 <osDelayUntil+0x7c>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b02      	cmp	r3, #2
 801017a:	d103      	bne.n	8010184 <osDelayUntil+0x3c>
    stat = osErrorISR;
 801017c:	f06f 0305 	mvn.w	r3, #5
 8010180:	61fb      	str	r3, [r7, #28]
 8010182:	e019      	b.n	80101b8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8010184:	2300      	movs	r3, #0
 8010186:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8010188:	f002 f9a6 	bl	80124d8 <xTaskGetTickCount>
 801018c:	4603      	mov	r3, r0
 801018e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d009      	beq.n	80101b2 <osDelayUntil+0x6a>
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	db06      	blt.n	80101b2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80101a4:	f107 0308 	add.w	r3, r7, #8
 80101a8:	69b9      	ldr	r1, [r7, #24]
 80101aa:	4618      	mov	r0, r3
 80101ac:	f001 ffca 	bl	8012144 <vTaskDelayUntil>
 80101b0:	e002      	b.n	80101b8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80101b2:	f06f 0303 	mvn.w	r3, #3
 80101b6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80101b8:	69fb      	ldr	r3, [r7, #28]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3720      	adds	r7, #32
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	200002c8 	.word	0x200002c8

080101c8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08a      	sub	sp, #40	; 0x28
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80101d0:	2300      	movs	r3, #0
 80101d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101d4:	f3ef 8305 	mrs	r3, IPSR
 80101d8:	613b      	str	r3, [r7, #16]
  return(result);
 80101da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80101dc:	2b00      	cmp	r3, #0
 80101de:	f040 8085 	bne.w	80102ec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101e2:	f3ef 8310 	mrs	r3, PRIMASK
 80101e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d105      	bne.n	80101fa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101ee:	f3ef 8311 	mrs	r3, BASEPRI
 80101f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d003      	beq.n	8010202 <osMutexNew+0x3a>
 80101fa:	4b3f      	ldr	r3, [pc, #252]	; (80102f8 <osMutexNew+0x130>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b02      	cmp	r3, #2
 8010200:	d074      	beq.n	80102ec <osMutexNew+0x124>
    if (attr != NULL) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d003      	beq.n	8010210 <osMutexNew+0x48>
      type = attr->attr_bits;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	623b      	str	r3, [r7, #32]
 801020e:	e001      	b.n	8010214 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010210:	2300      	movs	r3, #0
 8010212:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010214:	6a3b      	ldr	r3, [r7, #32]
 8010216:	f003 0301 	and.w	r3, r3, #1
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <osMutexNew+0x5c>
      rmtx = 1U;
 801021e:	2301      	movs	r3, #1
 8010220:	61fb      	str	r3, [r7, #28]
 8010222:	e001      	b.n	8010228 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010224:	2300      	movs	r3, #0
 8010226:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010228:	6a3b      	ldr	r3, [r7, #32]
 801022a:	f003 0308 	and.w	r3, r3, #8
 801022e:	2b00      	cmp	r3, #0
 8010230:	d15c      	bne.n	80102ec <osMutexNew+0x124>
      mem = -1;
 8010232:	f04f 33ff 	mov.w	r3, #4294967295
 8010236:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d015      	beq.n	801026a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d006      	beq.n	8010254 <osMutexNew+0x8c>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	2b4f      	cmp	r3, #79	; 0x4f
 801024c:	d902      	bls.n	8010254 <osMutexNew+0x8c>
          mem = 1;
 801024e:	2301      	movs	r3, #1
 8010250:	61bb      	str	r3, [r7, #24]
 8010252:	e00c      	b.n	801026e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d108      	bne.n	801026e <osMutexNew+0xa6>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d104      	bne.n	801026e <osMutexNew+0xa6>
            mem = 0;
 8010264:	2300      	movs	r3, #0
 8010266:	61bb      	str	r3, [r7, #24]
 8010268:	e001      	b.n	801026e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	2b01      	cmp	r3, #1
 8010272:	d112      	bne.n	801029a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d007      	beq.n	801028a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	4619      	mov	r1, r3
 8010280:	2004      	movs	r0, #4
 8010282:	f000 fe4c 	bl	8010f1e <xQueueCreateMutexStatic>
 8010286:	6278      	str	r0, [r7, #36]	; 0x24
 8010288:	e016      	b.n	80102b8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	4619      	mov	r1, r3
 8010290:	2001      	movs	r0, #1
 8010292:	f000 fe44 	bl	8010f1e <xQueueCreateMutexStatic>
 8010296:	6278      	str	r0, [r7, #36]	; 0x24
 8010298:	e00e      	b.n	80102b8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d10b      	bne.n	80102b8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d004      	beq.n	80102b0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80102a6:	2004      	movs	r0, #4
 80102a8:	f000 fe21 	bl	8010eee <xQueueCreateMutex>
 80102ac:	6278      	str	r0, [r7, #36]	; 0x24
 80102ae:	e003      	b.n	80102b8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80102b0:	2001      	movs	r0, #1
 80102b2:	f000 fe1c 	bl	8010eee <xQueueCreateMutex>
 80102b6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80102b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00c      	beq.n	80102d8 <osMutexNew+0x110>
        if (attr != NULL) {
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d003      	beq.n	80102cc <osMutexNew+0x104>
          name = attr->name;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	617b      	str	r3, [r7, #20]
 80102ca:	e001      	b.n	80102d0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80102cc:	2300      	movs	r3, #0
 80102ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80102d0:	6979      	ldr	r1, [r7, #20]
 80102d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102d4:	f001 fd0a 	bl	8011cec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80102d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d006      	beq.n	80102ec <osMutexNew+0x124>
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	f043 0301 	orr.w	r3, r3, #1
 80102ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80102ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3728      	adds	r7, #40	; 0x28
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	200002c8 	.word	0x200002c8

080102fc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b088      	sub	sp, #32
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f023 0301 	bic.w	r3, r3, #1
 801030c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f003 0301 	and.w	r3, r3, #1
 8010314:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010316:	2300      	movs	r3, #0
 8010318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801031a:	f3ef 8305 	mrs	r3, IPSR
 801031e:	613b      	str	r3, [r7, #16]
  return(result);
 8010320:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010322:	2b00      	cmp	r3, #0
 8010324:	d10f      	bne.n	8010346 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010326:	f3ef 8310 	mrs	r3, PRIMASK
 801032a:	60fb      	str	r3, [r7, #12]
  return(result);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d105      	bne.n	801033e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010332:	f3ef 8311 	mrs	r3, BASEPRI
 8010336:	60bb      	str	r3, [r7, #8]
  return(result);
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d007      	beq.n	801034e <osMutexAcquire+0x52>
 801033e:	4b1d      	ldr	r3, [pc, #116]	; (80103b4 <osMutexAcquire+0xb8>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2b02      	cmp	r3, #2
 8010344:	d103      	bne.n	801034e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010346:	f06f 0305 	mvn.w	r3, #5
 801034a:	61fb      	str	r3, [r7, #28]
 801034c:	e02c      	b.n	80103a8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d103      	bne.n	801035c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010354:	f06f 0303 	mvn.w	r3, #3
 8010358:	61fb      	str	r3, [r7, #28]
 801035a:	e025      	b.n	80103a8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d011      	beq.n	8010386 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	69b8      	ldr	r0, [r7, #24]
 8010366:	f000 fe2a 	bl	8010fbe <xQueueTakeMutexRecursive>
 801036a:	4603      	mov	r3, r0
 801036c:	2b01      	cmp	r3, #1
 801036e:	d01b      	beq.n	80103a8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d003      	beq.n	801037e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010376:	f06f 0301 	mvn.w	r3, #1
 801037a:	61fb      	str	r3, [r7, #28]
 801037c:	e014      	b.n	80103a8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801037e:	f06f 0302 	mvn.w	r3, #2
 8010382:	61fb      	str	r3, [r7, #28]
 8010384:	e010      	b.n	80103a8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010386:	6839      	ldr	r1, [r7, #0]
 8010388:	69b8      	ldr	r0, [r7, #24]
 801038a:	f001 f9cf 	bl	801172c <xQueueSemaphoreTake>
 801038e:	4603      	mov	r3, r0
 8010390:	2b01      	cmp	r3, #1
 8010392:	d009      	beq.n	80103a8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801039a:	f06f 0301 	mvn.w	r3, #1
 801039e:	61fb      	str	r3, [r7, #28]
 80103a0:	e002      	b.n	80103a8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80103a2:	f06f 0302 	mvn.w	r3, #2
 80103a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80103a8:	69fb      	ldr	r3, [r7, #28]
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3720      	adds	r7, #32
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	200002c8 	.word	0x200002c8

080103b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f023 0301 	bic.w	r3, r3, #1
 80103c6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f003 0301 	and.w	r3, r3, #1
 80103ce:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80103d0:	2300      	movs	r3, #0
 80103d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103d4:	f3ef 8305 	mrs	r3, IPSR
 80103d8:	613b      	str	r3, [r7, #16]
  return(result);
 80103da:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10f      	bne.n	8010400 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103e0:	f3ef 8310 	mrs	r3, PRIMASK
 80103e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d105      	bne.n	80103f8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103ec:	f3ef 8311 	mrs	r3, BASEPRI
 80103f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d007      	beq.n	8010408 <osMutexRelease+0x50>
 80103f8:	4b16      	ldr	r3, [pc, #88]	; (8010454 <osMutexRelease+0x9c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	d103      	bne.n	8010408 <osMutexRelease+0x50>
    stat = osErrorISR;
 8010400:	f06f 0305 	mvn.w	r3, #5
 8010404:	61fb      	str	r3, [r7, #28]
 8010406:	e01f      	b.n	8010448 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d103      	bne.n	8010416 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801040e:	f06f 0303 	mvn.w	r3, #3
 8010412:	61fb      	str	r3, [r7, #28]
 8010414:	e018      	b.n	8010448 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d009      	beq.n	8010430 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801041c:	69b8      	ldr	r0, [r7, #24]
 801041e:	f000 fd99 	bl	8010f54 <xQueueGiveMutexRecursive>
 8010422:	4603      	mov	r3, r0
 8010424:	2b01      	cmp	r3, #1
 8010426:	d00f      	beq.n	8010448 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010428:	f06f 0302 	mvn.w	r3, #2
 801042c:	61fb      	str	r3, [r7, #28]
 801042e:	e00b      	b.n	8010448 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010430:	2300      	movs	r3, #0
 8010432:	2200      	movs	r2, #0
 8010434:	2100      	movs	r1, #0
 8010436:	69b8      	ldr	r0, [r7, #24]
 8010438:	f000 fe66 	bl	8011108 <xQueueGenericSend>
 801043c:	4603      	mov	r3, r0
 801043e:	2b01      	cmp	r3, #1
 8010440:	d002      	beq.n	8010448 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010442:	f06f 0302 	mvn.w	r3, #2
 8010446:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010448:	69fb      	ldr	r3, [r7, #28]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3720      	adds	r7, #32
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	200002c8 	.word	0x200002c8

08010458 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010458:	b580      	push	{r7, lr}
 801045a:	b08c      	sub	sp, #48	; 0x30
 801045c:	af02      	add	r7, sp, #8
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010464:	2300      	movs	r3, #0
 8010466:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010468:	f3ef 8305 	mrs	r3, IPSR
 801046c:	61bb      	str	r3, [r7, #24]
  return(result);
 801046e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010470:	2b00      	cmp	r3, #0
 8010472:	f040 8087 	bne.w	8010584 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010476:	f3ef 8310 	mrs	r3, PRIMASK
 801047a:	617b      	str	r3, [r7, #20]
  return(result);
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d105      	bne.n	801048e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010482:	f3ef 8311 	mrs	r3, BASEPRI
 8010486:	613b      	str	r3, [r7, #16]
  return(result);
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d003      	beq.n	8010496 <osSemaphoreNew+0x3e>
 801048e:	4b40      	ldr	r3, [pc, #256]	; (8010590 <osSemaphoreNew+0x138>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b02      	cmp	r3, #2
 8010494:	d076      	beq.n	8010584 <osSemaphoreNew+0x12c>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d073      	beq.n	8010584 <osSemaphoreNew+0x12c>
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d86f      	bhi.n	8010584 <osSemaphoreNew+0x12c>
    mem = -1;
 80104a4:	f04f 33ff 	mov.w	r3, #4294967295
 80104a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d015      	beq.n	80104dc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d006      	beq.n	80104c6 <osSemaphoreNew+0x6e>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	2b4f      	cmp	r3, #79	; 0x4f
 80104be:	d902      	bls.n	80104c6 <osSemaphoreNew+0x6e>
        mem = 1;
 80104c0:	2301      	movs	r3, #1
 80104c2:	623b      	str	r3, [r7, #32]
 80104c4:	e00c      	b.n	80104e0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	689b      	ldr	r3, [r3, #8]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d108      	bne.n	80104e0 <osSemaphoreNew+0x88>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d104      	bne.n	80104e0 <osSemaphoreNew+0x88>
          mem = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	623b      	str	r3, [r7, #32]
 80104da:	e001      	b.n	80104e0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80104dc:	2300      	movs	r3, #0
 80104de:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80104e0:	6a3b      	ldr	r3, [r7, #32]
 80104e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e6:	d04d      	beq.n	8010584 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d129      	bne.n	8010542 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80104ee:	6a3b      	ldr	r3, [r7, #32]
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d10b      	bne.n	801050c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	689a      	ldr	r2, [r3, #8]
 80104f8:	2303      	movs	r3, #3
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	4613      	mov	r3, r2
 80104fe:	2200      	movs	r2, #0
 8010500:	2100      	movs	r1, #0
 8010502:	2001      	movs	r0, #1
 8010504:	f000 fbf8 	bl	8010cf8 <xQueueGenericCreateStatic>
 8010508:	6278      	str	r0, [r7, #36]	; 0x24
 801050a:	e005      	b.n	8010518 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801050c:	2203      	movs	r2, #3
 801050e:	2100      	movs	r1, #0
 8010510:	2001      	movs	r0, #1
 8010512:	f000 fc6e 	bl	8010df2 <xQueueGenericCreate>
 8010516:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051a:	2b00      	cmp	r3, #0
 801051c:	d022      	beq.n	8010564 <osSemaphoreNew+0x10c>
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d01f      	beq.n	8010564 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010524:	2300      	movs	r3, #0
 8010526:	2200      	movs	r2, #0
 8010528:	2100      	movs	r1, #0
 801052a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801052c:	f000 fdec 	bl	8011108 <xQueueGenericSend>
 8010530:	4603      	mov	r3, r0
 8010532:	2b01      	cmp	r3, #1
 8010534:	d016      	beq.n	8010564 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010538:	f001 fa8b 	bl	8011a52 <vQueueDelete>
            hSemaphore = NULL;
 801053c:	2300      	movs	r3, #0
 801053e:	627b      	str	r3, [r7, #36]	; 0x24
 8010540:	e010      	b.n	8010564 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8010542:	6a3b      	ldr	r3, [r7, #32]
 8010544:	2b01      	cmp	r3, #1
 8010546:	d108      	bne.n	801055a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	461a      	mov	r2, r3
 801054e:	68b9      	ldr	r1, [r7, #8]
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f000 fd6b 	bl	801102c <xQueueCreateCountingSemaphoreStatic>
 8010556:	6278      	str	r0, [r7, #36]	; 0x24
 8010558:	e004      	b.n	8010564 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801055a:	68b9      	ldr	r1, [r7, #8]
 801055c:	68f8      	ldr	r0, [r7, #12]
 801055e:	f000 fd9e 	bl	801109e <xQueueCreateCountingSemaphore>
 8010562:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00c      	beq.n	8010584 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d003      	beq.n	8010578 <osSemaphoreNew+0x120>
          name = attr->name;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	61fb      	str	r3, [r7, #28]
 8010576:	e001      	b.n	801057c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010578:	2300      	movs	r3, #0
 801057a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801057c:	69f9      	ldr	r1, [r7, #28]
 801057e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010580:	f001 fbb4 	bl	8011cec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010586:	4618      	mov	r0, r3
 8010588:	3728      	adds	r7, #40	; 0x28
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	200002c8 	.word	0x200002c8

08010594 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010594:	b580      	push	{r7, lr}
 8010596:	b088      	sub	sp, #32
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80105a2:	2300      	movs	r3, #0
 80105a4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d103      	bne.n	80105b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80105ac:	f06f 0303 	mvn.w	r3, #3
 80105b0:	61fb      	str	r3, [r7, #28]
 80105b2:	e04b      	b.n	801064c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105b4:	f3ef 8305 	mrs	r3, IPSR
 80105b8:	617b      	str	r3, [r7, #20]
  return(result);
 80105ba:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d10f      	bne.n	80105e0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105c0:	f3ef 8310 	mrs	r3, PRIMASK
 80105c4:	613b      	str	r3, [r7, #16]
  return(result);
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d105      	bne.n	80105d8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105cc:	f3ef 8311 	mrs	r3, BASEPRI
 80105d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d026      	beq.n	8010626 <osSemaphoreAcquire+0x92>
 80105d8:	4b1f      	ldr	r3, [pc, #124]	; (8010658 <osSemaphoreAcquire+0xc4>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b02      	cmp	r3, #2
 80105de:	d122      	bne.n	8010626 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d003      	beq.n	80105ee <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80105e6:	f06f 0303 	mvn.w	r3, #3
 80105ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80105ec:	e02d      	b.n	801064a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80105ee:	2300      	movs	r3, #0
 80105f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80105f2:	f107 0308 	add.w	r3, r7, #8
 80105f6:	461a      	mov	r2, r3
 80105f8:	2100      	movs	r1, #0
 80105fa:	69b8      	ldr	r0, [r7, #24]
 80105fc:	f001 f9a6 	bl	801194c <xQueueReceiveFromISR>
 8010600:	4603      	mov	r3, r0
 8010602:	2b01      	cmp	r3, #1
 8010604:	d003      	beq.n	801060e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010606:	f06f 0302 	mvn.w	r3, #2
 801060a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801060c:	e01d      	b.n	801064a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d01a      	beq.n	801064a <osSemaphoreAcquire+0xb6>
 8010614:	4b11      	ldr	r3, [pc, #68]	; (801065c <osSemaphoreAcquire+0xc8>)
 8010616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801061a:	601a      	str	r2, [r3, #0]
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010624:	e011      	b.n	801064a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010626:	6839      	ldr	r1, [r7, #0]
 8010628:	69b8      	ldr	r0, [r7, #24]
 801062a:	f001 f87f 	bl	801172c <xQueueSemaphoreTake>
 801062e:	4603      	mov	r3, r0
 8010630:	2b01      	cmp	r3, #1
 8010632:	d00b      	beq.n	801064c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d003      	beq.n	8010642 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801063a:	f06f 0301 	mvn.w	r3, #1
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	e004      	b.n	801064c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010642:	f06f 0302 	mvn.w	r3, #2
 8010646:	61fb      	str	r3, [r7, #28]
 8010648:	e000      	b.n	801064c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801064a:	bf00      	nop
      }
    }
  }

  return (stat);
 801064c:	69fb      	ldr	r3, [r7, #28]
}
 801064e:	4618      	mov	r0, r3
 8010650:	3720      	adds	r7, #32
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	200002c8 	.word	0x200002c8
 801065c:	e000ed04 	.word	0xe000ed04

08010660 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010660:	b580      	push	{r7, lr}
 8010662:	b088      	sub	sp, #32
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801066c:	2300      	movs	r3, #0
 801066e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010670:	69bb      	ldr	r3, [r7, #24]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d103      	bne.n	801067e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010676:	f06f 0303 	mvn.w	r3, #3
 801067a:	61fb      	str	r3, [r7, #28]
 801067c:	e03e      	b.n	80106fc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801067e:	f3ef 8305 	mrs	r3, IPSR
 8010682:	617b      	str	r3, [r7, #20]
  return(result);
 8010684:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010686:	2b00      	cmp	r3, #0
 8010688:	d10f      	bne.n	80106aa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801068a:	f3ef 8310 	mrs	r3, PRIMASK
 801068e:	613b      	str	r3, [r7, #16]
  return(result);
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d105      	bne.n	80106a2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010696:	f3ef 8311 	mrs	r3, BASEPRI
 801069a:	60fb      	str	r3, [r7, #12]
  return(result);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d01e      	beq.n	80106e0 <osSemaphoreRelease+0x80>
 80106a2:	4b19      	ldr	r3, [pc, #100]	; (8010708 <osSemaphoreRelease+0xa8>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2b02      	cmp	r3, #2
 80106a8:	d11a      	bne.n	80106e0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80106aa:	2300      	movs	r3, #0
 80106ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106ae:	f107 0308 	add.w	r3, r7, #8
 80106b2:	4619      	mov	r1, r3
 80106b4:	69b8      	ldr	r0, [r7, #24]
 80106b6:	f000 fec5 	bl	8011444 <xQueueGiveFromISR>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d003      	beq.n	80106c8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80106c0:	f06f 0302 	mvn.w	r3, #2
 80106c4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106c6:	e018      	b.n	80106fa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d015      	beq.n	80106fa <osSemaphoreRelease+0x9a>
 80106ce:	4b0f      	ldr	r3, [pc, #60]	; (801070c <osSemaphoreRelease+0xac>)
 80106d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	f3bf 8f4f 	dsb	sy
 80106da:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106de:	e00c      	b.n	80106fa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80106e0:	2300      	movs	r3, #0
 80106e2:	2200      	movs	r2, #0
 80106e4:	2100      	movs	r1, #0
 80106e6:	69b8      	ldr	r0, [r7, #24]
 80106e8:	f000 fd0e 	bl	8011108 <xQueueGenericSend>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d004      	beq.n	80106fc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80106f2:	f06f 0302 	mvn.w	r3, #2
 80106f6:	61fb      	str	r3, [r7, #28]
 80106f8:	e000      	b.n	80106fc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106fa:	bf00      	nop
    }
  }

  return (stat);
 80106fc:	69fb      	ldr	r3, [r7, #28]
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3720      	adds	r7, #32
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	200002c8 	.word	0x200002c8
 801070c:	e000ed04 	.word	0xe000ed04

08010710 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801071c:	f3ef 8305 	mrs	r3, IPSR
 8010720:	617b      	str	r3, [r7, #20]
  return(result);
 8010722:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8010724:	2b00      	cmp	r3, #0
 8010726:	d10f      	bne.n	8010748 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010728:	f3ef 8310 	mrs	r3, PRIMASK
 801072c:	613b      	str	r3, [r7, #16]
  return(result);
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d105      	bne.n	8010740 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010734:	f3ef 8311 	mrs	r3, BASEPRI
 8010738:	60fb      	str	r3, [r7, #12]
  return(result);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d007      	beq.n	8010750 <osSemaphoreDelete+0x40>
 8010740:	4b0d      	ldr	r3, [pc, #52]	; (8010778 <osSemaphoreDelete+0x68>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b02      	cmp	r3, #2
 8010746:	d103      	bne.n	8010750 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8010748:	f06f 0305 	mvn.w	r3, #5
 801074c:	61fb      	str	r3, [r7, #28]
 801074e:	e00e      	b.n	801076e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d103      	bne.n	801075e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8010756:	f06f 0303 	mvn.w	r3, #3
 801075a:	61fb      	str	r3, [r7, #28]
 801075c:	e007      	b.n	801076e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801075e:	69b8      	ldr	r0, [r7, #24]
 8010760:	f001 faec 	bl	8011d3c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8010764:	2300      	movs	r3, #0
 8010766:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8010768:	69b8      	ldr	r0, [r7, #24]
 801076a:	f001 f972 	bl	8011a52 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801076e:	69fb      	ldr	r3, [r7, #28]
}
 8010770:	4618      	mov	r0, r3
 8010772:	3720      	adds	r7, #32
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	200002c8 	.word	0x200002c8

0801077c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801077c:	b580      	push	{r7, lr}
 801077e:	b08c      	sub	sp, #48	; 0x30
 8010780:	af02      	add	r7, sp, #8
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010788:	2300      	movs	r3, #0
 801078a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801078c:	f3ef 8305 	mrs	r3, IPSR
 8010790:	61bb      	str	r3, [r7, #24]
  return(result);
 8010792:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010794:	2b00      	cmp	r3, #0
 8010796:	d170      	bne.n	801087a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010798:	f3ef 8310 	mrs	r3, PRIMASK
 801079c:	617b      	str	r3, [r7, #20]
  return(result);
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d105      	bne.n	80107b0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80107a4:	f3ef 8311 	mrs	r3, BASEPRI
 80107a8:	613b      	str	r3, [r7, #16]
  return(result);
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d003      	beq.n	80107b8 <osMessageQueueNew+0x3c>
 80107b0:	4b34      	ldr	r3, [pc, #208]	; (8010884 <osMessageQueueNew+0x108>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b02      	cmp	r3, #2
 80107b6:	d060      	beq.n	801087a <osMessageQueueNew+0xfe>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d05d      	beq.n	801087a <osMessageQueueNew+0xfe>
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d05a      	beq.n	801087a <osMessageQueueNew+0xfe>
    mem = -1;
 80107c4:	f04f 33ff 	mov.w	r3, #4294967295
 80107c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d029      	beq.n	8010824 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d012      	beq.n	80107fe <osMessageQueueNew+0x82>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	2b4f      	cmp	r3, #79	; 0x4f
 80107de:	d90e      	bls.n	80107fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00a      	beq.n	80107fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	695a      	ldr	r2, [r3, #20]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	68b9      	ldr	r1, [r7, #8]
 80107f0:	fb01 f303 	mul.w	r3, r1, r3
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d302      	bcc.n	80107fe <osMessageQueueNew+0x82>
        mem = 1;
 80107f8:	2301      	movs	r3, #1
 80107fa:	623b      	str	r3, [r7, #32]
 80107fc:	e014      	b.n	8010828 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	689b      	ldr	r3, [r3, #8]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d110      	bne.n	8010828 <osMessageQueueNew+0xac>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d10c      	bne.n	8010828 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010812:	2b00      	cmp	r3, #0
 8010814:	d108      	bne.n	8010828 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	695b      	ldr	r3, [r3, #20]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d104      	bne.n	8010828 <osMessageQueueNew+0xac>
          mem = 0;
 801081e:	2300      	movs	r3, #0
 8010820:	623b      	str	r3, [r7, #32]
 8010822:	e001      	b.n	8010828 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010824:	2300      	movs	r3, #0
 8010826:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010828:	6a3b      	ldr	r3, [r7, #32]
 801082a:	2b01      	cmp	r3, #1
 801082c:	d10c      	bne.n	8010848 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	691a      	ldr	r2, [r3, #16]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6899      	ldr	r1, [r3, #8]
 8010836:	2300      	movs	r3, #0
 8010838:	9300      	str	r3, [sp, #0]
 801083a:	460b      	mov	r3, r1
 801083c:	68b9      	ldr	r1, [r7, #8]
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	f000 fa5a 	bl	8010cf8 <xQueueGenericCreateStatic>
 8010844:	6278      	str	r0, [r7, #36]	; 0x24
 8010846:	e008      	b.n	801085a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010848:	6a3b      	ldr	r3, [r7, #32]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d105      	bne.n	801085a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801084e:	2200      	movs	r2, #0
 8010850:	68b9      	ldr	r1, [r7, #8]
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f000 facd 	bl	8010df2 <xQueueGenericCreate>
 8010858:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00c      	beq.n	801087a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d003      	beq.n	801086e <osMessageQueueNew+0xf2>
        name = attr->name;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	61fb      	str	r3, [r7, #28]
 801086c:	e001      	b.n	8010872 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801086e:	2300      	movs	r3, #0
 8010870:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010872:	69f9      	ldr	r1, [r7, #28]
 8010874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010876:	f001 fa39 	bl	8011cec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801087c:	4618      	mov	r0, r3
 801087e:	3728      	adds	r7, #40	; 0x28
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	200002c8 	.word	0x200002c8

08010888 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010888:	b580      	push	{r7, lr}
 801088a:	b08a      	sub	sp, #40	; 0x28
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	603b      	str	r3, [r7, #0]
 8010894:	4613      	mov	r3, r2
 8010896:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801089c:	2300      	movs	r3, #0
 801089e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108a0:	f3ef 8305 	mrs	r3, IPSR
 80108a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80108a6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10f      	bne.n	80108cc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108ac:	f3ef 8310 	mrs	r3, PRIMASK
 80108b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d105      	bne.n	80108c4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80108b8:	f3ef 8311 	mrs	r3, BASEPRI
 80108bc:	617b      	str	r3, [r7, #20]
  return(result);
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d02c      	beq.n	801091e <osMessageQueuePut+0x96>
 80108c4:	4b28      	ldr	r3, [pc, #160]	; (8010968 <osMessageQueuePut+0xe0>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b02      	cmp	r3, #2
 80108ca:	d128      	bne.n	801091e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108cc:	6a3b      	ldr	r3, [r7, #32]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d005      	beq.n	80108de <osMessageQueuePut+0x56>
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <osMessageQueuePut+0x56>
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d003      	beq.n	80108e6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80108de:	f06f 0303 	mvn.w	r3, #3
 80108e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108e4:	e039      	b.n	801095a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80108e6:	2300      	movs	r3, #0
 80108e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80108ea:	f107 0210 	add.w	r2, r7, #16
 80108ee:	2300      	movs	r3, #0
 80108f0:	68b9      	ldr	r1, [r7, #8]
 80108f2:	6a38      	ldr	r0, [r7, #32]
 80108f4:	f000 fd0a 	bl	801130c <xQueueGenericSendFromISR>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	d003      	beq.n	8010906 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80108fe:	f06f 0302 	mvn.w	r3, #2
 8010902:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010904:	e029      	b.n	801095a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d026      	beq.n	801095a <osMessageQueuePut+0xd2>
 801090c:	4b17      	ldr	r3, [pc, #92]	; (801096c <osMessageQueuePut+0xe4>)
 801090e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	f3bf 8f4f 	dsb	sy
 8010918:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801091c:	e01d      	b.n	801095a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801091e:	6a3b      	ldr	r3, [r7, #32]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d002      	beq.n	801092a <osMessageQueuePut+0xa2>
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d103      	bne.n	8010932 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801092a:	f06f 0303 	mvn.w	r3, #3
 801092e:	627b      	str	r3, [r7, #36]	; 0x24
 8010930:	e014      	b.n	801095c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010932:	2300      	movs	r3, #0
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	68b9      	ldr	r1, [r7, #8]
 8010938:	6a38      	ldr	r0, [r7, #32]
 801093a:	f000 fbe5 	bl	8011108 <xQueueGenericSend>
 801093e:	4603      	mov	r3, r0
 8010940:	2b01      	cmp	r3, #1
 8010942:	d00b      	beq.n	801095c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d003      	beq.n	8010952 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801094a:	f06f 0301 	mvn.w	r3, #1
 801094e:	627b      	str	r3, [r7, #36]	; 0x24
 8010950:	e004      	b.n	801095c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010952:	f06f 0302 	mvn.w	r3, #2
 8010956:	627b      	str	r3, [r7, #36]	; 0x24
 8010958:	e000      	b.n	801095c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801095a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801095e:	4618      	mov	r0, r3
 8010960:	3728      	adds	r7, #40	; 0x28
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	200002c8 	.word	0x200002c8
 801096c:	e000ed04 	.word	0xe000ed04

08010970 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010970:	b580      	push	{r7, lr}
 8010972:	b08a      	sub	sp, #40	; 0x28
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
 801097c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010982:	2300      	movs	r3, #0
 8010984:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010986:	f3ef 8305 	mrs	r3, IPSR
 801098a:	61fb      	str	r3, [r7, #28]
  return(result);
 801098c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10f      	bne.n	80109b2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010992:	f3ef 8310 	mrs	r3, PRIMASK
 8010996:	61bb      	str	r3, [r7, #24]
  return(result);
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d105      	bne.n	80109aa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801099e:	f3ef 8311 	mrs	r3, BASEPRI
 80109a2:	617b      	str	r3, [r7, #20]
  return(result);
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d02c      	beq.n	8010a04 <osMessageQueueGet+0x94>
 80109aa:	4b28      	ldr	r3, [pc, #160]	; (8010a4c <osMessageQueueGet+0xdc>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b02      	cmp	r3, #2
 80109b0:	d128      	bne.n	8010a04 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d005      	beq.n	80109c4 <osMessageQueueGet+0x54>
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d002      	beq.n	80109c4 <osMessageQueueGet+0x54>
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d003      	beq.n	80109cc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80109c4:	f06f 0303 	mvn.w	r3, #3
 80109c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109ca:	e038      	b.n	8010a3e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80109cc:	2300      	movs	r3, #0
 80109ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80109d0:	f107 0310 	add.w	r3, r7, #16
 80109d4:	461a      	mov	r2, r3
 80109d6:	68b9      	ldr	r1, [r7, #8]
 80109d8:	6a38      	ldr	r0, [r7, #32]
 80109da:	f000 ffb7 	bl	801194c <xQueueReceiveFromISR>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d003      	beq.n	80109ec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80109e4:	f06f 0302 	mvn.w	r3, #2
 80109e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109ea:	e028      	b.n	8010a3e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d025      	beq.n	8010a3e <osMessageQueueGet+0xce>
 80109f2:	4b17      	ldr	r3, [pc, #92]	; (8010a50 <osMessageQueueGet+0xe0>)
 80109f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	f3bf 8f4f 	dsb	sy
 80109fe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010a02:	e01c      	b.n	8010a3e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010a04:	6a3b      	ldr	r3, [r7, #32]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d002      	beq.n	8010a10 <osMessageQueueGet+0xa0>
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d103      	bne.n	8010a18 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010a10:	f06f 0303 	mvn.w	r3, #3
 8010a14:	627b      	str	r3, [r7, #36]	; 0x24
 8010a16:	e013      	b.n	8010a40 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010a18:	683a      	ldr	r2, [r7, #0]
 8010a1a:	68b9      	ldr	r1, [r7, #8]
 8010a1c:	6a38      	ldr	r0, [r7, #32]
 8010a1e:	f000 fda3 	bl	8011568 <xQueueReceive>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d00b      	beq.n	8010a40 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d003      	beq.n	8010a36 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010a2e:	f06f 0301 	mvn.w	r3, #1
 8010a32:	627b      	str	r3, [r7, #36]	; 0x24
 8010a34:	e004      	b.n	8010a40 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010a36:	f06f 0302 	mvn.w	r3, #2
 8010a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010a3c:	e000      	b.n	8010a40 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010a3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3728      	adds	r7, #40	; 0x28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	200002c8 	.word	0x200002c8
 8010a50:	e000ed04 	.word	0xe000ed04

08010a54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	4a07      	ldr	r2, [pc, #28]	; (8010a80 <vApplicationGetIdleTaskMemory+0x2c>)
 8010a64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	4a06      	ldr	r2, [pc, #24]	; (8010a84 <vApplicationGetIdleTaskMemory+0x30>)
 8010a6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2280      	movs	r2, #128	; 0x80
 8010a70:	601a      	str	r2, [r3, #0]
}
 8010a72:	bf00      	nop
 8010a74:	3714      	adds	r7, #20
 8010a76:	46bd      	mov	sp, r7
 8010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7c:	4770      	bx	lr
 8010a7e:	bf00      	nop
 8010a80:	200002cc 	.word	0x200002cc
 8010a84:	20000328 	.word	0x20000328

08010a88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	4a07      	ldr	r2, [pc, #28]	; (8010ab4 <vApplicationGetTimerTaskMemory+0x2c>)
 8010a98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	4a06      	ldr	r2, [pc, #24]	; (8010ab8 <vApplicationGetTimerTaskMemory+0x30>)
 8010a9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010aa6:	601a      	str	r2, [r3, #0]
}
 8010aa8:	bf00      	nop
 8010aaa:	3714      	adds	r7, #20
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr
 8010ab4:	20000528 	.word	0x20000528
 8010ab8:	20000584 	.word	0x20000584

08010abc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f103 0208 	add.w	r2, r3, #8
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f103 0208 	add.w	r2, r3, #8
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f103 0208 	add.w	r2, r3, #8
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2200      	movs	r2, #0
 8010aee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010af0:	bf00      	nop
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010b0a:	bf00      	nop
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b16:	b480      	push	{r7}
 8010b18:	b085      	sub	sp, #20
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	689a      	ldr	r2, [r3, #8]
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	683a      	ldr	r2, [r7, #0]
 8010b3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	601a      	str	r2, [r3, #0]
}
 8010b52:	bf00      	nop
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b5e:	b480      	push	{r7}
 8010b60:	b085      	sub	sp, #20
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b74:	d103      	bne.n	8010b7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	691b      	ldr	r3, [r3, #16]
 8010b7a:	60fb      	str	r3, [r7, #12]
 8010b7c:	e00c      	b.n	8010b98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	3308      	adds	r3, #8
 8010b82:	60fb      	str	r3, [r7, #12]
 8010b84:	e002      	b.n	8010b8c <vListInsert+0x2e>
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	60fb      	str	r3, [r7, #12]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d2f6      	bcs.n	8010b86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	685a      	ldr	r2, [r3, #4]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	683a      	ldr	r2, [r7, #0]
 8010ba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	1c5a      	adds	r2, r3, #1
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	601a      	str	r2, [r3, #0]
}
 8010bc4:	bf00      	nop
 8010bc6:	3714      	adds	r7, #20
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr

08010bd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b085      	sub	sp, #20
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	691b      	ldr	r3, [r3, #16]
 8010bdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	6892      	ldr	r2, [r2, #8]
 8010be6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	6852      	ldr	r2, [r2, #4]
 8010bf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d103      	bne.n	8010c04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	689a      	ldr	r2, [r3, #8]
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	1e5a      	subs	r2, r3, #1
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3714      	adds	r7, #20
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d10b      	bne.n	8010c50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3c:	b672      	cpsid	i
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	b662      	cpsie	i
 8010c4c:	60bb      	str	r3, [r7, #8]
 8010c4e:	e7fe      	b.n	8010c4e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010c50:	f002 fdda 	bl	8013808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c5c:	68f9      	ldr	r1, [r7, #12]
 8010c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c60:	fb01 f303 	mul.w	r3, r1, r3
 8010c64:	441a      	add	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c80:	3b01      	subs	r3, #1
 8010c82:	68f9      	ldr	r1, [r7, #12]
 8010c84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c86:	fb01 f303 	mul.w	r3, r1, r3
 8010c8a:	441a      	add	r2, r3
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	22ff      	movs	r2, #255	; 0xff
 8010c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	22ff      	movs	r2, #255	; 0xff
 8010c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d114      	bne.n	8010cd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d01a      	beq.n	8010ce4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	3310      	adds	r3, #16
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f001 fd9c 	bl	80127f0 <xTaskRemoveFromEventList>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d012      	beq.n	8010ce4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010cbe:	4b0d      	ldr	r3, [pc, #52]	; (8010cf4 <xQueueGenericReset+0xd0>)
 8010cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cc4:	601a      	str	r2, [r3, #0]
 8010cc6:	f3bf 8f4f 	dsb	sy
 8010cca:	f3bf 8f6f 	isb	sy
 8010cce:	e009      	b.n	8010ce4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	3310      	adds	r3, #16
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ff fef1 	bl	8010abc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	3324      	adds	r3, #36	; 0x24
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7ff feec 	bl	8010abc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ce4:	f002 fdc2 	bl	801386c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010ce8:	2301      	movs	r3, #1
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3710      	adds	r7, #16
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	e000ed04 	.word	0xe000ed04

08010cf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b08e      	sub	sp, #56	; 0x38
 8010cfc:	af02      	add	r7, sp, #8
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
 8010d04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10b      	bne.n	8010d24 <xQueueGenericCreateStatic+0x2c>
 8010d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d10:	b672      	cpsid	i
 8010d12:	f383 8811 	msr	BASEPRI, r3
 8010d16:	f3bf 8f6f 	isb	sy
 8010d1a:	f3bf 8f4f 	dsb	sy
 8010d1e:	b662      	cpsie	i
 8010d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d22:	e7fe      	b.n	8010d22 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d10b      	bne.n	8010d42 <xQueueGenericCreateStatic+0x4a>
 8010d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2e:	b672      	cpsid	i
 8010d30:	f383 8811 	msr	BASEPRI, r3
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	b662      	cpsie	i
 8010d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d40:	e7fe      	b.n	8010d40 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <xQueueGenericCreateStatic+0x56>
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <xQueueGenericCreateStatic+0x5a>
 8010d4e:	2301      	movs	r3, #1
 8010d50:	e000      	b.n	8010d54 <xQueueGenericCreateStatic+0x5c>
 8010d52:	2300      	movs	r3, #0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d10b      	bne.n	8010d70 <xQueueGenericCreateStatic+0x78>
 8010d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5c:	b672      	cpsid	i
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	b662      	cpsie	i
 8010d6c:	623b      	str	r3, [r7, #32]
 8010d6e:	e7fe      	b.n	8010d6e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d102      	bne.n	8010d7c <xQueueGenericCreateStatic+0x84>
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d101      	bne.n	8010d80 <xQueueGenericCreateStatic+0x88>
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e000      	b.n	8010d82 <xQueueGenericCreateStatic+0x8a>
 8010d80:	2300      	movs	r3, #0
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d10b      	bne.n	8010d9e <xQueueGenericCreateStatic+0xa6>
 8010d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8a:	b672      	cpsid	i
 8010d8c:	f383 8811 	msr	BASEPRI, r3
 8010d90:	f3bf 8f6f 	isb	sy
 8010d94:	f3bf 8f4f 	dsb	sy
 8010d98:	b662      	cpsie	i
 8010d9a:	61fb      	str	r3, [r7, #28]
 8010d9c:	e7fe      	b.n	8010d9c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d9e:	2350      	movs	r3, #80	; 0x50
 8010da0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	2b50      	cmp	r3, #80	; 0x50
 8010da6:	d00b      	beq.n	8010dc0 <xQueueGenericCreateStatic+0xc8>
 8010da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dac:	b672      	cpsid	i
 8010dae:	f383 8811 	msr	BASEPRI, r3
 8010db2:	f3bf 8f6f 	isb	sy
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	b662      	cpsie	i
 8010dbc:	61bb      	str	r3, [r7, #24]
 8010dbe:	e7fe      	b.n	8010dbe <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010dc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00d      	beq.n	8010de8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dce:	2201      	movs	r2, #1
 8010dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dd4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	68b9      	ldr	r1, [r7, #8]
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f000 f846 	bl	8010e74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3730      	adds	r7, #48	; 0x30
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}

08010df2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b08a      	sub	sp, #40	; 0x28
 8010df6:	af02      	add	r7, sp, #8
 8010df8:	60f8      	str	r0, [r7, #12]
 8010dfa:	60b9      	str	r1, [r7, #8]
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d10b      	bne.n	8010e1e <xQueueGenericCreate+0x2c>
 8010e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0a:	b672      	cpsid	i
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	b662      	cpsie	i
 8010e1a:	613b      	str	r3, [r7, #16]
 8010e1c:	e7fe      	b.n	8010e1c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d102      	bne.n	8010e2a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010e24:	2300      	movs	r3, #0
 8010e26:	61fb      	str	r3, [r7, #28]
 8010e28:	e004      	b.n	8010e34 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	68ba      	ldr	r2, [r7, #8]
 8010e2e:	fb02 f303 	mul.w	r3, r2, r3
 8010e32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	3350      	adds	r3, #80	; 0x50
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f002 fe07 	bl	8013a4c <pvPortMalloc>
 8010e3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d011      	beq.n	8010e6a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	3350      	adds	r3, #80	; 0x50
 8010e4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	2200      	movs	r2, #0
 8010e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e58:	79fa      	ldrb	r2, [r7, #7]
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	697a      	ldr	r2, [r7, #20]
 8010e62:	68b9      	ldr	r1, [r7, #8]
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f000 f805 	bl	8010e74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e6a:	69bb      	ldr	r3, [r7, #24]
	}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3720      	adds	r7, #32
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
 8010e80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d103      	bne.n	8010e90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	69ba      	ldr	r2, [r7, #24]
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	e002      	b.n	8010e96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	68fa      	ldr	r2, [r7, #12]
 8010e9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	68ba      	ldr	r2, [r7, #8]
 8010ea0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	69b8      	ldr	r0, [r7, #24]
 8010ea6:	f7ff febd 	bl	8010c24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010eaa:	69bb      	ldr	r3, [r7, #24]
 8010eac:	78fa      	ldrb	r2, [r7, #3]
 8010eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010eb2:	bf00      	nop
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b082      	sub	sp, #8
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d00e      	beq.n	8010ee6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010eda:	2300      	movs	r3, #0
 8010edc:	2200      	movs	r2, #0
 8010ede:	2100      	movs	r1, #0
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f000 f911 	bl	8011108 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010ee6:	bf00      	nop
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b086      	sub	sp, #24
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010ef8:	2301      	movs	r3, #1
 8010efa:	617b      	str	r3, [r7, #20]
 8010efc:	2300      	movs	r3, #0
 8010efe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010f00:	79fb      	ldrb	r3, [r7, #7]
 8010f02:	461a      	mov	r2, r3
 8010f04:	6939      	ldr	r1, [r7, #16]
 8010f06:	6978      	ldr	r0, [r7, #20]
 8010f08:	f7ff ff73 	bl	8010df2 <xQueueGenericCreate>
 8010f0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f7ff ffd3 	bl	8010eba <prvInitialiseMutex>

		return xNewQueue;
 8010f14:	68fb      	ldr	r3, [r7, #12]
	}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b088      	sub	sp, #32
 8010f22:	af02      	add	r7, sp, #8
 8010f24:	4603      	mov	r3, r0
 8010f26:	6039      	str	r1, [r7, #0]
 8010f28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	617b      	str	r3, [r7, #20]
 8010f2e:	2300      	movs	r3, #0
 8010f30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010f32:	79fb      	ldrb	r3, [r7, #7]
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	6939      	ldr	r1, [r7, #16]
 8010f3c:	6978      	ldr	r0, [r7, #20]
 8010f3e:	f7ff fedb 	bl	8010cf8 <xQueueGenericCreateStatic>
 8010f42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010f44:	68f8      	ldr	r0, [r7, #12]
 8010f46:	f7ff ffb8 	bl	8010eba <prvInitialiseMutex>

		return xNewQueue;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3718      	adds	r7, #24
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010f54:	b590      	push	{r4, r7, lr}
 8010f56:	b087      	sub	sp, #28
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d10b      	bne.n	8010f7e <xQueueGiveMutexRecursive+0x2a>
 8010f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6a:	b672      	cpsid	i
 8010f6c:	f383 8811 	msr	BASEPRI, r3
 8010f70:	f3bf 8f6f 	isb	sy
 8010f74:	f3bf 8f4f 	dsb	sy
 8010f78:	b662      	cpsie	i
 8010f7a:	60fb      	str	r3, [r7, #12]
 8010f7c:	e7fe      	b.n	8010f7c <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	689c      	ldr	r4, [r3, #8]
 8010f82:	f001 fdf3 	bl	8012b6c <xTaskGetCurrentTaskHandle>
 8010f86:	4603      	mov	r3, r0
 8010f88:	429c      	cmp	r4, r3
 8010f8a:	d111      	bne.n	8010fb0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	1e5a      	subs	r2, r3, #1
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d105      	bne.n	8010faa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	6938      	ldr	r0, [r7, #16]
 8010fa6:	f000 f8af 	bl	8011108 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010faa:	2301      	movs	r3, #1
 8010fac:	617b      	str	r3, [r7, #20]
 8010fae:	e001      	b.n	8010fb4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010fb4:	697b      	ldr	r3, [r7, #20]
	}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	371c      	adds	r7, #28
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd90      	pop	{r4, r7, pc}

08010fbe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010fbe:	b590      	push	{r4, r7, lr}
 8010fc0:	b087      	sub	sp, #28
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
 8010fc6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d10b      	bne.n	8010fea <xQueueTakeMutexRecursive+0x2c>
 8010fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd6:	b672      	cpsid	i
 8010fd8:	f383 8811 	msr	BASEPRI, r3
 8010fdc:	f3bf 8f6f 	isb	sy
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	b662      	cpsie	i
 8010fe6:	60fb      	str	r3, [r7, #12]
 8010fe8:	e7fe      	b.n	8010fe8 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	689c      	ldr	r4, [r3, #8]
 8010fee:	f001 fdbd 	bl	8012b6c <xTaskGetCurrentTaskHandle>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	429c      	cmp	r4, r3
 8010ff6:	d107      	bne.n	8011008 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011002:	2301      	movs	r3, #1
 8011004:	617b      	str	r3, [r7, #20]
 8011006:	e00c      	b.n	8011022 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011008:	6839      	ldr	r1, [r7, #0]
 801100a:	6938      	ldr	r0, [r7, #16]
 801100c:	f000 fb8e 	bl	801172c <xQueueSemaphoreTake>
 8011010:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d004      	beq.n	8011022 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011022:	697b      	ldr	r3, [r7, #20]
	}
 8011024:	4618      	mov	r0, r3
 8011026:	371c      	adds	r7, #28
 8011028:	46bd      	mov	sp, r7
 801102a:	bd90      	pop	{r4, r7, pc}

0801102c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801102c:	b580      	push	{r7, lr}
 801102e:	b08a      	sub	sp, #40	; 0x28
 8011030:	af02      	add	r7, sp, #8
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d10b      	bne.n	8011056 <xQueueCreateCountingSemaphoreStatic+0x2a>
 801103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011042:	b672      	cpsid	i
 8011044:	f383 8811 	msr	BASEPRI, r3
 8011048:	f3bf 8f6f 	isb	sy
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	b662      	cpsie	i
 8011052:	61bb      	str	r3, [r7, #24]
 8011054:	e7fe      	b.n	8011054 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011056:	68ba      	ldr	r2, [r7, #8]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	429a      	cmp	r2, r3
 801105c:	d90b      	bls.n	8011076 <xQueueCreateCountingSemaphoreStatic+0x4a>
 801105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011062:	b672      	cpsid	i
 8011064:	f383 8811 	msr	BASEPRI, r3
 8011068:	f3bf 8f6f 	isb	sy
 801106c:	f3bf 8f4f 	dsb	sy
 8011070:	b662      	cpsie	i
 8011072:	617b      	str	r3, [r7, #20]
 8011074:	e7fe      	b.n	8011074 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011076:	2302      	movs	r3, #2
 8011078:	9300      	str	r3, [sp, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	2100      	movs	r1, #0
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f7ff fe39 	bl	8010cf8 <xQueueGenericCreateStatic>
 8011086:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011094:	69fb      	ldr	r3, [r7, #28]
	}
 8011096:	4618      	mov	r0, r3
 8011098:	3720      	adds	r7, #32
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b086      	sub	sp, #24
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
 80110a6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d10b      	bne.n	80110c6 <xQueueCreateCountingSemaphore+0x28>
 80110ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b2:	b672      	cpsid	i
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	b662      	cpsie	i
 80110c2:	613b      	str	r3, [r7, #16]
 80110c4:	e7fe      	b.n	80110c4 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80110c6:	683a      	ldr	r2, [r7, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d90b      	bls.n	80110e6 <xQueueCreateCountingSemaphore+0x48>
 80110ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d2:	b672      	cpsid	i
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
 80110e0:	b662      	cpsie	i
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	e7fe      	b.n	80110e4 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80110e6:	2202      	movs	r2, #2
 80110e8:	2100      	movs	r1, #0
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7ff fe81 	bl	8010df2 <xQueueGenericCreate>
 80110f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d002      	beq.n	80110fe <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80110fe:	697b      	ldr	r3, [r7, #20]
	}
 8011100:	4618      	mov	r0, r3
 8011102:	3718      	adds	r7, #24
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b08e      	sub	sp, #56	; 0x38
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
 8011114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011116:	2300      	movs	r3, #0
 8011118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	2b00      	cmp	r3, #0
 8011122:	d10b      	bne.n	801113c <xQueueGenericSend+0x34>
 8011124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011128:	b672      	cpsid	i
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	f3bf 8f6f 	isb	sy
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	b662      	cpsie	i
 8011138:	62bb      	str	r3, [r7, #40]	; 0x28
 801113a:	e7fe      	b.n	801113a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d103      	bne.n	801114a <xQueueGenericSend+0x42>
 8011142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011146:	2b00      	cmp	r3, #0
 8011148:	d101      	bne.n	801114e <xQueueGenericSend+0x46>
 801114a:	2301      	movs	r3, #1
 801114c:	e000      	b.n	8011150 <xQueueGenericSend+0x48>
 801114e:	2300      	movs	r3, #0
 8011150:	2b00      	cmp	r3, #0
 8011152:	d10b      	bne.n	801116c <xQueueGenericSend+0x64>
 8011154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011158:	b672      	cpsid	i
 801115a:	f383 8811 	msr	BASEPRI, r3
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	f3bf 8f4f 	dsb	sy
 8011166:	b662      	cpsie	i
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
 801116a:	e7fe      	b.n	801116a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	2b02      	cmp	r3, #2
 8011170:	d103      	bne.n	801117a <xQueueGenericSend+0x72>
 8011172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011176:	2b01      	cmp	r3, #1
 8011178:	d101      	bne.n	801117e <xQueueGenericSend+0x76>
 801117a:	2301      	movs	r3, #1
 801117c:	e000      	b.n	8011180 <xQueueGenericSend+0x78>
 801117e:	2300      	movs	r3, #0
 8011180:	2b00      	cmp	r3, #0
 8011182:	d10b      	bne.n	801119c <xQueueGenericSend+0x94>
 8011184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011188:	b672      	cpsid	i
 801118a:	f383 8811 	msr	BASEPRI, r3
 801118e:	f3bf 8f6f 	isb	sy
 8011192:	f3bf 8f4f 	dsb	sy
 8011196:	b662      	cpsie	i
 8011198:	623b      	str	r3, [r7, #32]
 801119a:	e7fe      	b.n	801119a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801119c:	f001 fcf6 	bl	8012b8c <xTaskGetSchedulerState>
 80111a0:	4603      	mov	r3, r0
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d102      	bne.n	80111ac <xQueueGenericSend+0xa4>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d101      	bne.n	80111b0 <xQueueGenericSend+0xa8>
 80111ac:	2301      	movs	r3, #1
 80111ae:	e000      	b.n	80111b2 <xQueueGenericSend+0xaa>
 80111b0:	2300      	movs	r3, #0
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d10b      	bne.n	80111ce <xQueueGenericSend+0xc6>
 80111b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ba:	b672      	cpsid	i
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	b662      	cpsie	i
 80111ca:	61fb      	str	r3, [r7, #28]
 80111cc:	e7fe      	b.n	80111cc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111ce:	f002 fb1b 	bl	8013808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111da:	429a      	cmp	r2, r3
 80111dc:	d302      	bcc.n	80111e4 <xQueueGenericSend+0xdc>
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	2b02      	cmp	r3, #2
 80111e2:	d129      	bne.n	8011238 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	68b9      	ldr	r1, [r7, #8]
 80111e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ea:	f000 fc6e 	bl	8011aca <prvCopyDataToQueue>
 80111ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d010      	beq.n	801121a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fa:	3324      	adds	r3, #36	; 0x24
 80111fc:	4618      	mov	r0, r3
 80111fe:	f001 faf7 	bl	80127f0 <xTaskRemoveFromEventList>
 8011202:	4603      	mov	r3, r0
 8011204:	2b00      	cmp	r3, #0
 8011206:	d013      	beq.n	8011230 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011208:	4b3f      	ldr	r3, [pc, #252]	; (8011308 <xQueueGenericSend+0x200>)
 801120a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801120e:	601a      	str	r2, [r3, #0]
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	e00a      	b.n	8011230 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	2b00      	cmp	r3, #0
 801121e:	d007      	beq.n	8011230 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011220:	4b39      	ldr	r3, [pc, #228]	; (8011308 <xQueueGenericSend+0x200>)
 8011222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011226:	601a      	str	r2, [r3, #0]
 8011228:	f3bf 8f4f 	dsb	sy
 801122c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011230:	f002 fb1c 	bl	801386c <vPortExitCritical>
				return pdPASS;
 8011234:	2301      	movs	r3, #1
 8011236:	e063      	b.n	8011300 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d103      	bne.n	8011246 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801123e:	f002 fb15 	bl	801386c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011242:	2300      	movs	r3, #0
 8011244:	e05c      	b.n	8011300 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011248:	2b00      	cmp	r3, #0
 801124a:	d106      	bne.n	801125a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801124c:	f107 0314 	add.w	r3, r7, #20
 8011250:	4618      	mov	r0, r3
 8011252:	f001 fb31 	bl	80128b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011256:	2301      	movs	r3, #1
 8011258:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801125a:	f002 fb07 	bl	801386c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801125e:	f001 f88f 	bl	8012380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011262:	f002 fad1 	bl	8013808 <vPortEnterCritical>
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801126c:	b25b      	sxtb	r3, r3
 801126e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011272:	d103      	bne.n	801127c <xQueueGenericSend+0x174>
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	2200      	movs	r2, #0
 8011278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011282:	b25b      	sxtb	r3, r3
 8011284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011288:	d103      	bne.n	8011292 <xQueueGenericSend+0x18a>
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	2200      	movs	r2, #0
 801128e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011292:	f002 faeb 	bl	801386c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011296:	1d3a      	adds	r2, r7, #4
 8011298:	f107 0314 	add.w	r3, r7, #20
 801129c:	4611      	mov	r1, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f001 fb20 	bl	80128e4 <xTaskCheckForTimeOut>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d124      	bne.n	80112f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80112aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ac:	f000 fd05 	bl	8011cba <prvIsQueueFull>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d018      	beq.n	80112e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80112b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b8:	3310      	adds	r3, #16
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	4611      	mov	r1, r2
 80112be:	4618      	mov	r0, r3
 80112c0:	f001 fa44 	bl	801274c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80112c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112c6:	f000 fc90 	bl	8011bea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80112ca:	f001 f867 	bl	801239c <xTaskResumeAll>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f47f af7c 	bne.w	80111ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80112d6:	4b0c      	ldr	r3, [pc, #48]	; (8011308 <xQueueGenericSend+0x200>)
 80112d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	e772      	b.n	80111ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80112e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ea:	f000 fc7e 	bl	8011bea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112ee:	f001 f855 	bl	801239c <xTaskResumeAll>
 80112f2:	e76c      	b.n	80111ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80112f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f6:	f000 fc78 	bl	8011bea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112fa:	f001 f84f 	bl	801239c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80112fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011300:	4618      	mov	r0, r3
 8011302:	3738      	adds	r7, #56	; 0x38
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}
 8011308:	e000ed04 	.word	0xe000ed04

0801130c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b08e      	sub	sp, #56	; 0x38
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	60b9      	str	r1, [r7, #8]
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011320:	2b00      	cmp	r3, #0
 8011322:	d10b      	bne.n	801133c <xQueueGenericSendFromISR+0x30>
 8011324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011328:	b672      	cpsid	i
 801132a:	f383 8811 	msr	BASEPRI, r3
 801132e:	f3bf 8f6f 	isb	sy
 8011332:	f3bf 8f4f 	dsb	sy
 8011336:	b662      	cpsie	i
 8011338:	627b      	str	r3, [r7, #36]	; 0x24
 801133a:	e7fe      	b.n	801133a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d103      	bne.n	801134a <xQueueGenericSendFromISR+0x3e>
 8011342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <xQueueGenericSendFromISR+0x42>
 801134a:	2301      	movs	r3, #1
 801134c:	e000      	b.n	8011350 <xQueueGenericSendFromISR+0x44>
 801134e:	2300      	movs	r3, #0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d10b      	bne.n	801136c <xQueueGenericSendFromISR+0x60>
 8011354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011358:	b672      	cpsid	i
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
 8011366:	b662      	cpsie	i
 8011368:	623b      	str	r3, [r7, #32]
 801136a:	e7fe      	b.n	801136a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	2b02      	cmp	r3, #2
 8011370:	d103      	bne.n	801137a <xQueueGenericSendFromISR+0x6e>
 8011372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011376:	2b01      	cmp	r3, #1
 8011378:	d101      	bne.n	801137e <xQueueGenericSendFromISR+0x72>
 801137a:	2301      	movs	r3, #1
 801137c:	e000      	b.n	8011380 <xQueueGenericSendFromISR+0x74>
 801137e:	2300      	movs	r3, #0
 8011380:	2b00      	cmp	r3, #0
 8011382:	d10b      	bne.n	801139c <xQueueGenericSendFromISR+0x90>
 8011384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011388:	b672      	cpsid	i
 801138a:	f383 8811 	msr	BASEPRI, r3
 801138e:	f3bf 8f6f 	isb	sy
 8011392:	f3bf 8f4f 	dsb	sy
 8011396:	b662      	cpsie	i
 8011398:	61fb      	str	r3, [r7, #28]
 801139a:	e7fe      	b.n	801139a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801139c:	f002 fb14 	bl	80139c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80113a0:	f3ef 8211 	mrs	r2, BASEPRI
 80113a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a8:	b672      	cpsid	i
 80113aa:	f383 8811 	msr	BASEPRI, r3
 80113ae:	f3bf 8f6f 	isb	sy
 80113b2:	f3bf 8f4f 	dsb	sy
 80113b6:	b662      	cpsie	i
 80113b8:	61ba      	str	r2, [r7, #24]
 80113ba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80113bc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80113c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d302      	bcc.n	80113d2 <xQueueGenericSendFromISR+0xc6>
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2b02      	cmp	r3, #2
 80113d0:	d12c      	bne.n	801142c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80113d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80113dc:	683a      	ldr	r2, [r7, #0]
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113e2:	f000 fb72 	bl	8011aca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80113e6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80113ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ee:	d112      	bne.n	8011416 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d016      	beq.n	8011426 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fa:	3324      	adds	r3, #36	; 0x24
 80113fc:	4618      	mov	r0, r3
 80113fe:	f001 f9f7 	bl	80127f0 <xTaskRemoveFromEventList>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00e      	beq.n	8011426 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d00b      	beq.n	8011426 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2201      	movs	r2, #1
 8011412:	601a      	str	r2, [r3, #0]
 8011414:	e007      	b.n	8011426 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801141a:	3301      	adds	r3, #1
 801141c:	b2db      	uxtb	r3, r3
 801141e:	b25a      	sxtb	r2, r3
 8011420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011426:	2301      	movs	r3, #1
 8011428:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801142a:	e001      	b.n	8011430 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801142c:	2300      	movs	r3, #0
 801142e:	637b      	str	r3, [r7, #52]	; 0x34
 8011430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011432:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801143c:	4618      	mov	r0, r3
 801143e:	3738      	adds	r7, #56	; 0x38
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b08e      	sub	sp, #56	; 0x38
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011454:	2b00      	cmp	r3, #0
 8011456:	d10b      	bne.n	8011470 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145c:	b672      	cpsid	i
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	b662      	cpsie	i
 801146c:	623b      	str	r3, [r7, #32]
 801146e:	e7fe      	b.n	801146e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011474:	2b00      	cmp	r3, #0
 8011476:	d00b      	beq.n	8011490 <xQueueGiveFromISR+0x4c>
 8011478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147c:	b672      	cpsid	i
 801147e:	f383 8811 	msr	BASEPRI, r3
 8011482:	f3bf 8f6f 	isb	sy
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	b662      	cpsie	i
 801148c:	61fb      	str	r3, [r7, #28]
 801148e:	e7fe      	b.n	801148e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d103      	bne.n	80114a0 <xQueueGiveFromISR+0x5c>
 8011498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d101      	bne.n	80114a4 <xQueueGiveFromISR+0x60>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e000      	b.n	80114a6 <xQueueGiveFromISR+0x62>
 80114a4:	2300      	movs	r3, #0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d10b      	bne.n	80114c2 <xQueueGiveFromISR+0x7e>
 80114aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ae:	b672      	cpsid	i
 80114b0:	f383 8811 	msr	BASEPRI, r3
 80114b4:	f3bf 8f6f 	isb	sy
 80114b8:	f3bf 8f4f 	dsb	sy
 80114bc:	b662      	cpsie	i
 80114be:	61bb      	str	r3, [r7, #24]
 80114c0:	e7fe      	b.n	80114c0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114c2:	f002 fa81 	bl	80139c8 <vPortValidateInterruptPriority>
	__asm volatile
 80114c6:	f3ef 8211 	mrs	r2, BASEPRI
 80114ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ce:	b672      	cpsid	i
 80114d0:	f383 8811 	msr	BASEPRI, r3
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	b662      	cpsie	i
 80114de:	617a      	str	r2, [r7, #20]
 80114e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80114e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80114e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80114ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d22b      	bcs.n	801154e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011502:	1c5a      	adds	r2, r3, #1
 8011504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011506:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011510:	d112      	bne.n	8011538 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011516:	2b00      	cmp	r3, #0
 8011518:	d016      	beq.n	8011548 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	3324      	adds	r3, #36	; 0x24
 801151e:	4618      	mov	r0, r3
 8011520:	f001 f966 	bl	80127f0 <xTaskRemoveFromEventList>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00e      	beq.n	8011548 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d00b      	beq.n	8011548 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2201      	movs	r2, #1
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	e007      	b.n	8011548 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801153c:	3301      	adds	r3, #1
 801153e:	b2db      	uxtb	r3, r3
 8011540:	b25a      	sxtb	r2, r3
 8011542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011548:	2301      	movs	r3, #1
 801154a:	637b      	str	r3, [r7, #52]	; 0x34
 801154c:	e001      	b.n	8011552 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801154e:	2300      	movs	r3, #0
 8011550:	637b      	str	r3, [r7, #52]	; 0x34
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801155e:	4618      	mov	r0, r3
 8011560:	3738      	adds	r7, #56	; 0x38
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
	...

08011568 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b08c      	sub	sp, #48	; 0x30
 801156c:	af00      	add	r7, sp, #0
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011574:	2300      	movs	r3, #0
 8011576:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10b      	bne.n	801159a <xQueueReceive+0x32>
	__asm volatile
 8011582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011586:	b672      	cpsid	i
 8011588:	f383 8811 	msr	BASEPRI, r3
 801158c:	f3bf 8f6f 	isb	sy
 8011590:	f3bf 8f4f 	dsb	sy
 8011594:	b662      	cpsie	i
 8011596:	623b      	str	r3, [r7, #32]
 8011598:	e7fe      	b.n	8011598 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d103      	bne.n	80115a8 <xQueueReceive+0x40>
 80115a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d101      	bne.n	80115ac <xQueueReceive+0x44>
 80115a8:	2301      	movs	r3, #1
 80115aa:	e000      	b.n	80115ae <xQueueReceive+0x46>
 80115ac:	2300      	movs	r3, #0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d10b      	bne.n	80115ca <xQueueReceive+0x62>
 80115b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b6:	b672      	cpsid	i
 80115b8:	f383 8811 	msr	BASEPRI, r3
 80115bc:	f3bf 8f6f 	isb	sy
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	b662      	cpsie	i
 80115c6:	61fb      	str	r3, [r7, #28]
 80115c8:	e7fe      	b.n	80115c8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115ca:	f001 fadf 	bl	8012b8c <xTaskGetSchedulerState>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d102      	bne.n	80115da <xQueueReceive+0x72>
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d101      	bne.n	80115de <xQueueReceive+0x76>
 80115da:	2301      	movs	r3, #1
 80115dc:	e000      	b.n	80115e0 <xQueueReceive+0x78>
 80115de:	2300      	movs	r3, #0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10b      	bne.n	80115fc <xQueueReceive+0x94>
 80115e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e8:	b672      	cpsid	i
 80115ea:	f383 8811 	msr	BASEPRI, r3
 80115ee:	f3bf 8f6f 	isb	sy
 80115f2:	f3bf 8f4f 	dsb	sy
 80115f6:	b662      	cpsie	i
 80115f8:	61bb      	str	r3, [r7, #24]
 80115fa:	e7fe      	b.n	80115fa <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115fc:	f002 f904 	bl	8013808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011604:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	2b00      	cmp	r3, #0
 801160a:	d01f      	beq.n	801164c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801160c:	68b9      	ldr	r1, [r7, #8]
 801160e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011610:	f000 fac5 	bl	8011b9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011616:	1e5a      	subs	r2, r3, #1
 8011618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d00f      	beq.n	8011644 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011626:	3310      	adds	r3, #16
 8011628:	4618      	mov	r0, r3
 801162a:	f001 f8e1 	bl	80127f0 <xTaskRemoveFromEventList>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d007      	beq.n	8011644 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011634:	4b3c      	ldr	r3, [pc, #240]	; (8011728 <xQueueReceive+0x1c0>)
 8011636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801163a:	601a      	str	r2, [r3, #0]
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011644:	f002 f912 	bl	801386c <vPortExitCritical>
				return pdPASS;
 8011648:	2301      	movs	r3, #1
 801164a:	e069      	b.n	8011720 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d103      	bne.n	801165a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011652:	f002 f90b 	bl	801386c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011656:	2300      	movs	r3, #0
 8011658:	e062      	b.n	8011720 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165c:	2b00      	cmp	r3, #0
 801165e:	d106      	bne.n	801166e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011660:	f107 0310 	add.w	r3, r7, #16
 8011664:	4618      	mov	r0, r3
 8011666:	f001 f927 	bl	80128b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801166a:	2301      	movs	r3, #1
 801166c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801166e:	f002 f8fd 	bl	801386c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011672:	f000 fe85 	bl	8012380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011676:	f002 f8c7 	bl	8013808 <vPortEnterCritical>
 801167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011680:	b25b      	sxtb	r3, r3
 8011682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011686:	d103      	bne.n	8011690 <xQueueReceive+0x128>
 8011688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168a:	2200      	movs	r2, #0
 801168c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011696:	b25b      	sxtb	r3, r3
 8011698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801169c:	d103      	bne.n	80116a6 <xQueueReceive+0x13e>
 801169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a0:	2200      	movs	r2, #0
 80116a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116a6:	f002 f8e1 	bl	801386c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116aa:	1d3a      	adds	r2, r7, #4
 80116ac:	f107 0310 	add.w	r3, r7, #16
 80116b0:	4611      	mov	r1, r2
 80116b2:	4618      	mov	r0, r3
 80116b4:	f001 f916 	bl	80128e4 <xTaskCheckForTimeOut>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d123      	bne.n	8011706 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116c0:	f000 fae5 	bl	8011c8e <prvIsQueueEmpty>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d017      	beq.n	80116fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80116ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116cc:	3324      	adds	r3, #36	; 0x24
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	4611      	mov	r1, r2
 80116d2:	4618      	mov	r0, r3
 80116d4:	f001 f83a 	bl	801274c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80116d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116da:	f000 fa86 	bl	8011bea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80116de:	f000 fe5d 	bl	801239c <xTaskResumeAll>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d189      	bne.n	80115fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80116e8:	4b0f      	ldr	r3, [pc, #60]	; (8011728 <xQueueReceive+0x1c0>)
 80116ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ee:	601a      	str	r2, [r3, #0]
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	f3bf 8f6f 	isb	sy
 80116f8:	e780      	b.n	80115fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80116fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116fc:	f000 fa75 	bl	8011bea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011700:	f000 fe4c 	bl	801239c <xTaskResumeAll>
 8011704:	e77a      	b.n	80115fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011708:	f000 fa6f 	bl	8011bea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801170c:	f000 fe46 	bl	801239c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011712:	f000 fabc 	bl	8011c8e <prvIsQueueEmpty>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	f43f af6f 	beq.w	80115fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801171e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011720:	4618      	mov	r0, r3
 8011722:	3730      	adds	r7, #48	; 0x30
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	e000ed04 	.word	0xe000ed04

0801172c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08e      	sub	sp, #56	; 0x38
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011736:	2300      	movs	r3, #0
 8011738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801173e:	2300      	movs	r3, #0
 8011740:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011744:	2b00      	cmp	r3, #0
 8011746:	d10b      	bne.n	8011760 <xQueueSemaphoreTake+0x34>
 8011748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174c:	b672      	cpsid	i
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	b662      	cpsie	i
 801175c:	623b      	str	r3, [r7, #32]
 801175e:	e7fe      	b.n	801175e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011764:	2b00      	cmp	r3, #0
 8011766:	d00b      	beq.n	8011780 <xQueueSemaphoreTake+0x54>
 8011768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176c:	b672      	cpsid	i
 801176e:	f383 8811 	msr	BASEPRI, r3
 8011772:	f3bf 8f6f 	isb	sy
 8011776:	f3bf 8f4f 	dsb	sy
 801177a:	b662      	cpsie	i
 801177c:	61fb      	str	r3, [r7, #28]
 801177e:	e7fe      	b.n	801177e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011780:	f001 fa04 	bl	8012b8c <xTaskGetSchedulerState>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d102      	bne.n	8011790 <xQueueSemaphoreTake+0x64>
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <xQueueSemaphoreTake+0x68>
 8011790:	2301      	movs	r3, #1
 8011792:	e000      	b.n	8011796 <xQueueSemaphoreTake+0x6a>
 8011794:	2300      	movs	r3, #0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d10b      	bne.n	80117b2 <xQueueSemaphoreTake+0x86>
 801179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179e:	b672      	cpsid	i
 80117a0:	f383 8811 	msr	BASEPRI, r3
 80117a4:	f3bf 8f6f 	isb	sy
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	b662      	cpsie	i
 80117ae:	61bb      	str	r3, [r7, #24]
 80117b0:	e7fe      	b.n	80117b0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80117b2:	f002 f829 	bl	8013808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d024      	beq.n	801180c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80117c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c4:	1e5a      	subs	r2, r3, #1
 80117c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d104      	bne.n	80117dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80117d2:	f001 fb55 	bl	8012e80 <pvTaskIncrementMutexHeldCount>
 80117d6:	4602      	mov	r2, r0
 80117d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00f      	beq.n	8011804 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e6:	3310      	adds	r3, #16
 80117e8:	4618      	mov	r0, r3
 80117ea:	f001 f801 	bl	80127f0 <xTaskRemoveFromEventList>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d007      	beq.n	8011804 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80117f4:	4b54      	ldr	r3, [pc, #336]	; (8011948 <xQueueSemaphoreTake+0x21c>)
 80117f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117fa:	601a      	str	r2, [r3, #0]
 80117fc:	f3bf 8f4f 	dsb	sy
 8011800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011804:	f002 f832 	bl	801386c <vPortExitCritical>
				return pdPASS;
 8011808:	2301      	movs	r3, #1
 801180a:	e098      	b.n	801193e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d112      	bne.n	8011838 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00b      	beq.n	8011830 <xQueueSemaphoreTake+0x104>
 8011818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181c:	b672      	cpsid	i
 801181e:	f383 8811 	msr	BASEPRI, r3
 8011822:	f3bf 8f6f 	isb	sy
 8011826:	f3bf 8f4f 	dsb	sy
 801182a:	b662      	cpsie	i
 801182c:	617b      	str	r3, [r7, #20]
 801182e:	e7fe      	b.n	801182e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011830:	f002 f81c 	bl	801386c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011834:	2300      	movs	r3, #0
 8011836:	e082      	b.n	801193e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183a:	2b00      	cmp	r3, #0
 801183c:	d106      	bne.n	801184c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801183e:	f107 030c 	add.w	r3, r7, #12
 8011842:	4618      	mov	r0, r3
 8011844:	f001 f838 	bl	80128b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011848:	2301      	movs	r3, #1
 801184a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801184c:	f002 f80e 	bl	801386c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011850:	f000 fd96 	bl	8012380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011854:	f001 ffd8 	bl	8013808 <vPortEnterCritical>
 8011858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801185e:	b25b      	sxtb	r3, r3
 8011860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011864:	d103      	bne.n	801186e <xQueueSemaphoreTake+0x142>
 8011866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011868:	2200      	movs	r2, #0
 801186a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011874:	b25b      	sxtb	r3, r3
 8011876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801187a:	d103      	bne.n	8011884 <xQueueSemaphoreTake+0x158>
 801187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187e:	2200      	movs	r2, #0
 8011880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011884:	f001 fff2 	bl	801386c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011888:	463a      	mov	r2, r7
 801188a:	f107 030c 	add.w	r3, r7, #12
 801188e:	4611      	mov	r1, r2
 8011890:	4618      	mov	r0, r3
 8011892:	f001 f827 	bl	80128e4 <xTaskCheckForTimeOut>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d132      	bne.n	8011902 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801189c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801189e:	f000 f9f6 	bl	8011c8e <prvIsQueueEmpty>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d026      	beq.n	80118f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80118a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d109      	bne.n	80118c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80118b0:	f001 ffaa 	bl	8013808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80118b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b6:	689b      	ldr	r3, [r3, #8]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f001 f985 	bl	8012bc8 <xTaskPriorityInherit>
 80118be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80118c0:	f001 ffd4 	bl	801386c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80118c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c6:	3324      	adds	r3, #36	; 0x24
 80118c8:	683a      	ldr	r2, [r7, #0]
 80118ca:	4611      	mov	r1, r2
 80118cc:	4618      	mov	r0, r3
 80118ce:	f000 ff3d 	bl	801274c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80118d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118d4:	f000 f989 	bl	8011bea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80118d8:	f000 fd60 	bl	801239c <xTaskResumeAll>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f47f af67 	bne.w	80117b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80118e4:	4b18      	ldr	r3, [pc, #96]	; (8011948 <xQueueSemaphoreTake+0x21c>)
 80118e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118ea:	601a      	str	r2, [r3, #0]
 80118ec:	f3bf 8f4f 	dsb	sy
 80118f0:	f3bf 8f6f 	isb	sy
 80118f4:	e75d      	b.n	80117b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80118f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118f8:	f000 f977 	bl	8011bea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80118fc:	f000 fd4e 	bl	801239c <xTaskResumeAll>
 8011900:	e757      	b.n	80117b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011904:	f000 f971 	bl	8011bea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011908:	f000 fd48 	bl	801239c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801190c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801190e:	f000 f9be 	bl	8011c8e <prvIsQueueEmpty>
 8011912:	4603      	mov	r3, r0
 8011914:	2b00      	cmp	r3, #0
 8011916:	f43f af4c 	beq.w	80117b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00d      	beq.n	801193c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011920:	f001 ff72 	bl	8013808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011926:	f000 f8b8 	bl	8011a9a <prvGetDisinheritPriorityAfterTimeout>
 801192a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801192c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192e:	689b      	ldr	r3, [r3, #8]
 8011930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011932:	4618      	mov	r0, r3
 8011934:	f001 fa20 	bl	8012d78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011938:	f001 ff98 	bl	801386c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801193c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801193e:	4618      	mov	r0, r3
 8011940:	3738      	adds	r7, #56	; 0x38
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	e000ed04 	.word	0xe000ed04

0801194c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b08e      	sub	sp, #56	; 0x38
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10b      	bne.n	801197a <xQueueReceiveFromISR+0x2e>
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	b672      	cpsid	i
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	b662      	cpsie	i
 8011976:	623b      	str	r3, [r7, #32]
 8011978:	e7fe      	b.n	8011978 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d103      	bne.n	8011988 <xQueueReceiveFromISR+0x3c>
 8011980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011984:	2b00      	cmp	r3, #0
 8011986:	d101      	bne.n	801198c <xQueueReceiveFromISR+0x40>
 8011988:	2301      	movs	r3, #1
 801198a:	e000      	b.n	801198e <xQueueReceiveFromISR+0x42>
 801198c:	2300      	movs	r3, #0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d10b      	bne.n	80119aa <xQueueReceiveFromISR+0x5e>
 8011992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011996:	b672      	cpsid	i
 8011998:	f383 8811 	msr	BASEPRI, r3
 801199c:	f3bf 8f6f 	isb	sy
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	b662      	cpsie	i
 80119a6:	61fb      	str	r3, [r7, #28]
 80119a8:	e7fe      	b.n	80119a8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80119aa:	f002 f80d 	bl	80139c8 <vPortValidateInterruptPriority>
	__asm volatile
 80119ae:	f3ef 8211 	mrs	r2, BASEPRI
 80119b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b6:	b672      	cpsid	i
 80119b8:	f383 8811 	msr	BASEPRI, r3
 80119bc:	f3bf 8f6f 	isb	sy
 80119c0:	f3bf 8f4f 	dsb	sy
 80119c4:	b662      	cpsie	i
 80119c6:	61ba      	str	r2, [r7, #24]
 80119c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80119ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80119cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80119d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d02f      	beq.n	8011a3a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80119da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80119e4:	68b9      	ldr	r1, [r7, #8]
 80119e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119e8:	f000 f8d9 	bl	8011b9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80119ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ee:	1e5a      	subs	r2, r3, #1
 80119f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80119f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80119f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119fc:	d112      	bne.n	8011a24 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a00:	691b      	ldr	r3, [r3, #16]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d016      	beq.n	8011a34 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a08:	3310      	adds	r3, #16
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f000 fef0 	bl	80127f0 <xTaskRemoveFromEventList>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00e      	beq.n	8011a34 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d00b      	beq.n	8011a34 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	e007      	b.n	8011a34 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a28:	3301      	adds	r3, #1
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	b25a      	sxtb	r2, r3
 8011a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011a34:	2301      	movs	r3, #1
 8011a36:	637b      	str	r3, [r7, #52]	; 0x34
 8011a38:	e001      	b.n	8011a3e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8011a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3738      	adds	r7, #56	; 0x38
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b084      	sub	sp, #16
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d10b      	bne.n	8011a7c <vQueueDelete+0x2a>
	__asm volatile
 8011a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a68:	b672      	cpsid	i
 8011a6a:	f383 8811 	msr	BASEPRI, r3
 8011a6e:	f3bf 8f6f 	isb	sy
 8011a72:	f3bf 8f4f 	dsb	sy
 8011a76:	b662      	cpsie	i
 8011a78:	60bb      	str	r3, [r7, #8]
 8011a7a:	e7fe      	b.n	8011a7a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f000 f95d 	bl	8011d3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d102      	bne.n	8011a92 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011a8c:	68f8      	ldr	r0, [r7, #12]
 8011a8e:	f002 f8a5 	bl	8013bdc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011a92:	bf00      	nop
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011a9a:	b480      	push	{r7}
 8011a9c:	b085      	sub	sp, #20
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d006      	beq.n	8011ab8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011ab4:	60fb      	str	r3, [r7, #12]
 8011ab6:	e001      	b.n	8011abc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011abc:	68fb      	ldr	r3, [r7, #12]
	}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b086      	sub	sp, #24
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	60f8      	str	r0, [r7, #12]
 8011ad2:	60b9      	str	r1, [r7, #8]
 8011ad4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ade:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10d      	bne.n	8011b04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d14d      	bne.n	8011b8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f001 f8cf 	bl	8012c98 <xTaskPriorityDisinherit>
 8011afa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2200      	movs	r2, #0
 8011b00:	609a      	str	r2, [r3, #8]
 8011b02:	e043      	b.n	8011b8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d119      	bne.n	8011b3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	6858      	ldr	r0, [r3, #4]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b12:	461a      	mov	r2, r3
 8011b14:	68b9      	ldr	r1, [r7, #8]
 8011b16:	f002 ff1b 	bl	8014950 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	685a      	ldr	r2, [r3, #4]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b22:	441a      	add	r2, r3
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	685a      	ldr	r2, [r3, #4]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d32b      	bcc.n	8011b8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	605a      	str	r2, [r3, #4]
 8011b3c:	e026      	b.n	8011b8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	68d8      	ldr	r0, [r3, #12]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b46:	461a      	mov	r2, r3
 8011b48:	68b9      	ldr	r1, [r7, #8]
 8011b4a:	f002 ff01 	bl	8014950 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	68da      	ldr	r2, [r3, #12]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b56:	425b      	negs	r3, r3
 8011b58:	441a      	add	r2, r3
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	68da      	ldr	r2, [r3, #12]
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d207      	bcs.n	8011b7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	689a      	ldr	r2, [r3, #8]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b72:	425b      	negs	r3, r3
 8011b74:	441a      	add	r2, r3
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b02      	cmp	r3, #2
 8011b7e:	d105      	bne.n	8011b8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d002      	beq.n	8011b8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	1c5a      	adds	r2, r3, #1
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011b94:	697b      	ldr	r3, [r7, #20]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3718      	adds	r7, #24
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d018      	beq.n	8011be2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	68da      	ldr	r2, [r3, #12]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bb8:	441a      	add	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68da      	ldr	r2, [r3, #12]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	689b      	ldr	r3, [r3, #8]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d303      	bcc.n	8011bd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	68d9      	ldr	r1, [r3, #12]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bda:	461a      	mov	r2, r3
 8011bdc:	6838      	ldr	r0, [r7, #0]
 8011bde:	f002 feb7 	bl	8014950 <memcpy>
	}
}
 8011be2:	bf00      	nop
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b084      	sub	sp, #16
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011bf2:	f001 fe09 	bl	8013808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bfc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011bfe:	e011      	b.n	8011c24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d012      	beq.n	8011c2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	3324      	adds	r3, #36	; 0x24
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 fdef 	bl	80127f0 <xTaskRemoveFromEventList>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d001      	beq.n	8011c1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011c18:	f000 fec8 	bl	80129ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011c1c:	7bfb      	ldrb	r3, [r7, #15]
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	dce9      	bgt.n	8011c00 <prvUnlockQueue+0x16>
 8011c2c:	e000      	b.n	8011c30 <prvUnlockQueue+0x46>
					break;
 8011c2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	22ff      	movs	r2, #255	; 0xff
 8011c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011c38:	f001 fe18 	bl	801386c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011c3c:	f001 fde4 	bl	8013808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c48:	e011      	b.n	8011c6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	691b      	ldr	r3, [r3, #16]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d012      	beq.n	8011c78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	3310      	adds	r3, #16
 8011c56:	4618      	mov	r0, r3
 8011c58:	f000 fdca 	bl	80127f0 <xTaskRemoveFromEventList>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d001      	beq.n	8011c66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011c62:	f000 fea3 	bl	80129ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011c66:	7bbb      	ldrb	r3, [r7, #14]
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	dce9      	bgt.n	8011c4a <prvUnlockQueue+0x60>
 8011c76:	e000      	b.n	8011c7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011c78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	22ff      	movs	r2, #255	; 0xff
 8011c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011c82:	f001 fdf3 	bl	801386c <vPortExitCritical>
}
 8011c86:	bf00      	nop
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011c8e:	b580      	push	{r7, lr}
 8011c90:	b084      	sub	sp, #16
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011c96:	f001 fdb7 	bl	8013808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d102      	bne.n	8011ca8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	60fb      	str	r3, [r7, #12]
 8011ca6:	e001      	b.n	8011cac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011cac:	f001 fdde 	bl	801386c <vPortExitCritical>

	return xReturn;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b084      	sub	sp, #16
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011cc2:	f001 fda1 	bl	8013808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d102      	bne.n	8011cd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	60fb      	str	r3, [r7, #12]
 8011cd6:	e001      	b.n	8011cdc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011cdc:	f001 fdc6 	bl	801386c <vPortExitCritical>

	return xReturn;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
	...

08011cec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011cec:	b480      	push	{r7}
 8011cee:	b085      	sub	sp, #20
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	60fb      	str	r3, [r7, #12]
 8011cfa:	e014      	b.n	8011d26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011cfc:	4a0e      	ldr	r2, [pc, #56]	; (8011d38 <vQueueAddToRegistry+0x4c>)
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d10b      	bne.n	8011d20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011d08:	490b      	ldr	r1, [pc, #44]	; (8011d38 <vQueueAddToRegistry+0x4c>)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	683a      	ldr	r2, [r7, #0]
 8011d0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011d12:	4a09      	ldr	r2, [pc, #36]	; (8011d38 <vQueueAddToRegistry+0x4c>)
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	4413      	add	r3, r2
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011d1e:	e005      	b.n	8011d2c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	3301      	adds	r3, #1
 8011d24:	60fb      	str	r3, [r7, #12]
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2b07      	cmp	r3, #7
 8011d2a:	d9e7      	bls.n	8011cfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011d2c:	bf00      	nop
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	200115c0 	.word	0x200115c0

08011d3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d44:	2300      	movs	r3, #0
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	e016      	b.n	8011d78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011d4a:	4a10      	ldr	r2, [pc, #64]	; (8011d8c <vQueueUnregisterQueue+0x50>)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	00db      	lsls	r3, r3, #3
 8011d50:	4413      	add	r3, r2
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d10b      	bne.n	8011d72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011d5a:	4a0c      	ldr	r2, [pc, #48]	; (8011d8c <vQueueUnregisterQueue+0x50>)
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2100      	movs	r1, #0
 8011d60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011d64:	4a09      	ldr	r2, [pc, #36]	; (8011d8c <vQueueUnregisterQueue+0x50>)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	4413      	add	r3, r2
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	605a      	str	r2, [r3, #4]
				break;
 8011d70:	e005      	b.n	8011d7e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	3301      	adds	r3, #1
 8011d76:	60fb      	str	r3, [r7, #12]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2b07      	cmp	r3, #7
 8011d7c:	d9e5      	bls.n	8011d4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011d7e:	bf00      	nop
 8011d80:	3714      	adds	r7, #20
 8011d82:	46bd      	mov	sp, r7
 8011d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d88:	4770      	bx	lr
 8011d8a:	bf00      	nop
 8011d8c:	200115c0 	.word	0x200115c0

08011d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b086      	sub	sp, #24
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011da0:	f001 fd32 	bl	8013808 <vPortEnterCritical>
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011daa:	b25b      	sxtb	r3, r3
 8011dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011db0:	d103      	bne.n	8011dba <vQueueWaitForMessageRestricted+0x2a>
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	2200      	movs	r2, #0
 8011db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011dc0:	b25b      	sxtb	r3, r3
 8011dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc6:	d103      	bne.n	8011dd0 <vQueueWaitForMessageRestricted+0x40>
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011dd0:	f001 fd4c 	bl	801386c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d106      	bne.n	8011dea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	3324      	adds	r3, #36	; 0x24
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	68b9      	ldr	r1, [r7, #8]
 8011de4:	4618      	mov	r0, r3
 8011de6:	f000 fcd7 	bl	8012798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011dea:	6978      	ldr	r0, [r7, #20]
 8011dec:	f7ff fefd 	bl	8011bea <prvUnlockQueue>
	}
 8011df0:	bf00      	nop
 8011df2:	3718      	adds	r7, #24
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b08e      	sub	sp, #56	; 0x38
 8011dfc:	af04      	add	r7, sp, #16
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
 8011e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d10b      	bne.n	8011e24 <xTaskCreateStatic+0x2c>
 8011e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e10:	b672      	cpsid	i
 8011e12:	f383 8811 	msr	BASEPRI, r3
 8011e16:	f3bf 8f6f 	isb	sy
 8011e1a:	f3bf 8f4f 	dsb	sy
 8011e1e:	b662      	cpsie	i
 8011e20:	623b      	str	r3, [r7, #32]
 8011e22:	e7fe      	b.n	8011e22 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d10b      	bne.n	8011e42 <xTaskCreateStatic+0x4a>
 8011e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2e:	b672      	cpsid	i
 8011e30:	f383 8811 	msr	BASEPRI, r3
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	f3bf 8f4f 	dsb	sy
 8011e3c:	b662      	cpsie	i
 8011e3e:	61fb      	str	r3, [r7, #28]
 8011e40:	e7fe      	b.n	8011e40 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011e42:	235c      	movs	r3, #92	; 0x5c
 8011e44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	2b5c      	cmp	r3, #92	; 0x5c
 8011e4a:	d00b      	beq.n	8011e64 <xTaskCreateStatic+0x6c>
 8011e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e50:	b672      	cpsid	i
 8011e52:	f383 8811 	msr	BASEPRI, r3
 8011e56:	f3bf 8f6f 	isb	sy
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	b662      	cpsie	i
 8011e60:	61bb      	str	r3, [r7, #24]
 8011e62:	e7fe      	b.n	8011e62 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011e64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d01e      	beq.n	8011eaa <xTaskCreateStatic+0xb2>
 8011e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d01b      	beq.n	8011eaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7e:	2202      	movs	r2, #2
 8011e80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011e84:	2300      	movs	r3, #0
 8011e86:	9303      	str	r3, [sp, #12]
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	9302      	str	r3, [sp, #8]
 8011e8c:	f107 0314 	add.w	r3, r7, #20
 8011e90:	9301      	str	r3, [sp, #4]
 8011e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e94:	9300      	str	r3, [sp, #0]
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	68b9      	ldr	r1, [r7, #8]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f000 f850 	bl	8011f42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ea4:	f000 f8de 	bl	8012064 <prvAddNewTaskToReadyList>
 8011ea8:	e001      	b.n	8011eae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011eae:	697b      	ldr	r3, [r7, #20]
	}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3728      	adds	r7, #40	; 0x28
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b08c      	sub	sp, #48	; 0x30
 8011ebc:	af04      	add	r7, sp, #16
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	603b      	str	r3, [r7, #0]
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011ec8:	88fb      	ldrh	r3, [r7, #6]
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f001 fdbd 	bl	8013a4c <pvPortMalloc>
 8011ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d00e      	beq.n	8011ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011eda:	205c      	movs	r0, #92	; 0x5c
 8011edc:	f001 fdb6 	bl	8013a4c <pvPortMalloc>
 8011ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d003      	beq.n	8011ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	697a      	ldr	r2, [r7, #20]
 8011eec:	631a      	str	r2, [r3, #48]	; 0x30
 8011eee:	e005      	b.n	8011efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011ef0:	6978      	ldr	r0, [r7, #20]
 8011ef2:	f001 fe73 	bl	8013bdc <vPortFree>
 8011ef6:	e001      	b.n	8011efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d017      	beq.n	8011f32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011f0a:	88fa      	ldrh	r2, [r7, #6]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	9303      	str	r3, [sp, #12]
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	9302      	str	r3, [sp, #8]
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f16:	9301      	str	r3, [sp, #4]
 8011f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	68b9      	ldr	r1, [r7, #8]
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f000 f80e 	bl	8011f42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f26:	69f8      	ldr	r0, [r7, #28]
 8011f28:	f000 f89c 	bl	8012064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	61bb      	str	r3, [r7, #24]
 8011f30:	e002      	b.n	8011f38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011f32:	f04f 33ff 	mov.w	r3, #4294967295
 8011f36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011f38:	69bb      	ldr	r3, [r7, #24]
	}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3720      	adds	r7, #32
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b088      	sub	sp, #32
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	60f8      	str	r0, [r7, #12]
 8011f4a:	60b9      	str	r1, [r7, #8]
 8011f4c:	607a      	str	r2, [r7, #4]
 8011f4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	461a      	mov	r2, r3
 8011f5a:	21a5      	movs	r1, #165	; 0xa5
 8011f5c:	f002 fd03 	bl	8014966 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f64:	6879      	ldr	r1, [r7, #4]
 8011f66:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011f6a:	440b      	add	r3, r1
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	4413      	add	r3, r2
 8011f70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011f72:	69bb      	ldr	r3, [r7, #24]
 8011f74:	f023 0307 	bic.w	r3, r3, #7
 8011f78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	f003 0307 	and.w	r3, r3, #7
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00b      	beq.n	8011f9c <prvInitialiseNewTask+0x5a>
 8011f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f88:	b672      	cpsid	i
 8011f8a:	f383 8811 	msr	BASEPRI, r3
 8011f8e:	f3bf 8f6f 	isb	sy
 8011f92:	f3bf 8f4f 	dsb	sy
 8011f96:	b662      	cpsie	i
 8011f98:	617b      	str	r3, [r7, #20]
 8011f9a:	e7fe      	b.n	8011f9a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d01f      	beq.n	8011fe2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	61fb      	str	r3, [r7, #28]
 8011fa6:	e012      	b.n	8011fce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011fa8:	68ba      	ldr	r2, [r7, #8]
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	4413      	add	r3, r2
 8011fae:	7819      	ldrb	r1, [r3, #0]
 8011fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	3334      	adds	r3, #52	; 0x34
 8011fb8:	460a      	mov	r2, r1
 8011fba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d006      	beq.n	8011fd6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	61fb      	str	r3, [r7, #28]
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	2b0f      	cmp	r3, #15
 8011fd2:	d9e9      	bls.n	8011fa8 <prvInitialiseNewTask+0x66>
 8011fd4:	e000      	b.n	8011fd8 <prvInitialiseNewTask+0x96>
			{
				break;
 8011fd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011fe0:	e003      	b.n	8011fea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fec:	2b37      	cmp	r3, #55	; 0x37
 8011fee:	d901      	bls.n	8011ff4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011ff0:	2337      	movs	r3, #55	; 0x37
 8011ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ffe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012002:	2200      	movs	r2, #0
 8012004:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012008:	3304      	adds	r3, #4
 801200a:	4618      	mov	r0, r3
 801200c:	f7fe fd76 	bl	8010afc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012012:	3318      	adds	r3, #24
 8012014:	4618      	mov	r0, r3
 8012016:	f7fe fd71 	bl	8010afc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801201c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801201e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801202e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012032:	2200      	movs	r2, #0
 8012034:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012038:	2200      	movs	r2, #0
 801203a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801203e:	683a      	ldr	r2, [r7, #0]
 8012040:	68f9      	ldr	r1, [r7, #12]
 8012042:	69b8      	ldr	r0, [r7, #24]
 8012044:	f001 fad8 	bl	80135f8 <pxPortInitialiseStack>
 8012048:	4602      	mov	r2, r0
 801204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012050:	2b00      	cmp	r3, #0
 8012052:	d002      	beq.n	801205a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801205a:	bf00      	nop
 801205c:	3720      	adds	r7, #32
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801206c:	f001 fbcc 	bl	8013808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012070:	4b2d      	ldr	r3, [pc, #180]	; (8012128 <prvAddNewTaskToReadyList+0xc4>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	3301      	adds	r3, #1
 8012076:	4a2c      	ldr	r2, [pc, #176]	; (8012128 <prvAddNewTaskToReadyList+0xc4>)
 8012078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801207a:	4b2c      	ldr	r3, [pc, #176]	; (801212c <prvAddNewTaskToReadyList+0xc8>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d109      	bne.n	8012096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012082:	4a2a      	ldr	r2, [pc, #168]	; (801212c <prvAddNewTaskToReadyList+0xc8>)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012088:	4b27      	ldr	r3, [pc, #156]	; (8012128 <prvAddNewTaskToReadyList+0xc4>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b01      	cmp	r3, #1
 801208e:	d110      	bne.n	80120b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012090:	f000 fcb0 	bl	80129f4 <prvInitialiseTaskLists>
 8012094:	e00d      	b.n	80120b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012096:	4b26      	ldr	r3, [pc, #152]	; (8012130 <prvAddNewTaskToReadyList+0xcc>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d109      	bne.n	80120b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801209e:	4b23      	ldr	r3, [pc, #140]	; (801212c <prvAddNewTaskToReadyList+0xc8>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d802      	bhi.n	80120b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80120ac:	4a1f      	ldr	r2, [pc, #124]	; (801212c <prvAddNewTaskToReadyList+0xc8>)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80120b2:	4b20      	ldr	r3, [pc, #128]	; (8012134 <prvAddNewTaskToReadyList+0xd0>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	3301      	adds	r3, #1
 80120b8:	4a1e      	ldr	r2, [pc, #120]	; (8012134 <prvAddNewTaskToReadyList+0xd0>)
 80120ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80120bc:	4b1d      	ldr	r3, [pc, #116]	; (8012134 <prvAddNewTaskToReadyList+0xd0>)
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120c8:	4b1b      	ldr	r3, [pc, #108]	; (8012138 <prvAddNewTaskToReadyList+0xd4>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d903      	bls.n	80120d8 <prvAddNewTaskToReadyList+0x74>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120d4:	4a18      	ldr	r2, [pc, #96]	; (8012138 <prvAddNewTaskToReadyList+0xd4>)
 80120d6:	6013      	str	r3, [r2, #0]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120dc:	4613      	mov	r3, r2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	4413      	add	r3, r2
 80120e2:	009b      	lsls	r3, r3, #2
 80120e4:	4a15      	ldr	r2, [pc, #84]	; (801213c <prvAddNewTaskToReadyList+0xd8>)
 80120e6:	441a      	add	r2, r3
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	3304      	adds	r3, #4
 80120ec:	4619      	mov	r1, r3
 80120ee:	4610      	mov	r0, r2
 80120f0:	f7fe fd11 	bl	8010b16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80120f4:	f001 fbba 	bl	801386c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80120f8:	4b0d      	ldr	r3, [pc, #52]	; (8012130 <prvAddNewTaskToReadyList+0xcc>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d00e      	beq.n	801211e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012100:	4b0a      	ldr	r3, [pc, #40]	; (801212c <prvAddNewTaskToReadyList+0xc8>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801210a:	429a      	cmp	r2, r3
 801210c:	d207      	bcs.n	801211e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801210e:	4b0c      	ldr	r3, [pc, #48]	; (8012140 <prvAddNewTaskToReadyList+0xdc>)
 8012110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	f3bf 8f4f 	dsb	sy
 801211a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801211e:	bf00      	nop
 8012120:	3708      	adds	r7, #8
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	20000e58 	.word	0x20000e58
 801212c:	20000984 	.word	0x20000984
 8012130:	20000e64 	.word	0x20000e64
 8012134:	20000e74 	.word	0x20000e74
 8012138:	20000e60 	.word	0x20000e60
 801213c:	20000988 	.word	0x20000988
 8012140:	e000ed04 	.word	0xe000ed04

08012144 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012144:	b580      	push	{r7, lr}
 8012146:	b08a      	sub	sp, #40	; 0x28
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
 801214c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801214e:	2300      	movs	r3, #0
 8012150:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10b      	bne.n	8012170 <vTaskDelayUntil+0x2c>
 8012158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215c:	b672      	cpsid	i
 801215e:	f383 8811 	msr	BASEPRI, r3
 8012162:	f3bf 8f6f 	isb	sy
 8012166:	f3bf 8f4f 	dsb	sy
 801216a:	b662      	cpsie	i
 801216c:	617b      	str	r3, [r7, #20]
 801216e:	e7fe      	b.n	801216e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d10b      	bne.n	801218e <vTaskDelayUntil+0x4a>
 8012176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217a:	b672      	cpsid	i
 801217c:	f383 8811 	msr	BASEPRI, r3
 8012180:	f3bf 8f6f 	isb	sy
 8012184:	f3bf 8f4f 	dsb	sy
 8012188:	b662      	cpsie	i
 801218a:	613b      	str	r3, [r7, #16]
 801218c:	e7fe      	b.n	801218c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 801218e:	4b2a      	ldr	r3, [pc, #168]	; (8012238 <vTaskDelayUntil+0xf4>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d00b      	beq.n	80121ae <vTaskDelayUntil+0x6a>
 8012196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219a:	b672      	cpsid	i
 801219c:	f383 8811 	msr	BASEPRI, r3
 80121a0:	f3bf 8f6f 	isb	sy
 80121a4:	f3bf 8f4f 	dsb	sy
 80121a8:	b662      	cpsie	i
 80121aa:	60fb      	str	r3, [r7, #12]
 80121ac:	e7fe      	b.n	80121ac <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80121ae:	f000 f8e7 	bl	8012380 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80121b2:	4b22      	ldr	r3, [pc, #136]	; (801223c <vTaskDelayUntil+0xf8>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	683a      	ldr	r2, [r7, #0]
 80121be:	4413      	add	r3, r2
 80121c0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	6a3a      	ldr	r2, [r7, #32]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d20b      	bcs.n	80121e4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	69fa      	ldr	r2, [r7, #28]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d211      	bcs.n	80121fa <vTaskDelayUntil+0xb6>
 80121d6:	69fa      	ldr	r2, [r7, #28]
 80121d8:	6a3b      	ldr	r3, [r7, #32]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d90d      	bls.n	80121fa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80121de:	2301      	movs	r3, #1
 80121e0:	627b      	str	r3, [r7, #36]	; 0x24
 80121e2:	e00a      	b.n	80121fa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	69fa      	ldr	r2, [r7, #28]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d303      	bcc.n	80121f6 <vTaskDelayUntil+0xb2>
 80121ee:	69fa      	ldr	r2, [r7, #28]
 80121f0:	6a3b      	ldr	r3, [r7, #32]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d901      	bls.n	80121fa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80121f6:	2301      	movs	r3, #1
 80121f8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	69fa      	ldr	r2, [r7, #28]
 80121fe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012202:	2b00      	cmp	r3, #0
 8012204:	d006      	beq.n	8012214 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012206:	69fa      	ldr	r2, [r7, #28]
 8012208:	6a3b      	ldr	r3, [r7, #32]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	2100      	movs	r1, #0
 801220e:	4618      	mov	r0, r3
 8012210:	f000 fe4a 	bl	8012ea8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012214:	f000 f8c2 	bl	801239c <xTaskResumeAll>
 8012218:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d107      	bne.n	8012230 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8012220:	4b07      	ldr	r3, [pc, #28]	; (8012240 <vTaskDelayUntil+0xfc>)
 8012222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012226:	601a      	str	r2, [r3, #0]
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012230:	bf00      	nop
 8012232:	3728      	adds	r7, #40	; 0x28
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	20000e80 	.word	0x20000e80
 801223c:	20000e5c 	.word	0x20000e5c
 8012240:	e000ed04 	.word	0xe000ed04

08012244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012244:	b580      	push	{r7, lr}
 8012246:	b084      	sub	sp, #16
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801224c:	2300      	movs	r3, #0
 801224e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d018      	beq.n	8012288 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012256:	4b14      	ldr	r3, [pc, #80]	; (80122a8 <vTaskDelay+0x64>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d00b      	beq.n	8012276 <vTaskDelay+0x32>
 801225e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012262:	b672      	cpsid	i
 8012264:	f383 8811 	msr	BASEPRI, r3
 8012268:	f3bf 8f6f 	isb	sy
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	b662      	cpsie	i
 8012272:	60bb      	str	r3, [r7, #8]
 8012274:	e7fe      	b.n	8012274 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8012276:	f000 f883 	bl	8012380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801227a:	2100      	movs	r1, #0
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 fe13 	bl	8012ea8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012282:	f000 f88b 	bl	801239c <xTaskResumeAll>
 8012286:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d107      	bne.n	801229e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801228e:	4b07      	ldr	r3, [pc, #28]	; (80122ac <vTaskDelay+0x68>)
 8012290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012294:	601a      	str	r2, [r3, #0]
 8012296:	f3bf 8f4f 	dsb	sy
 801229a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801229e:	bf00      	nop
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	bf00      	nop
 80122a8:	20000e80 	.word	0x20000e80
 80122ac:	e000ed04 	.word	0xe000ed04

080122b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b08a      	sub	sp, #40	; 0x28
 80122b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80122b6:	2300      	movs	r3, #0
 80122b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80122ba:	2300      	movs	r3, #0
 80122bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80122be:	463a      	mov	r2, r7
 80122c0:	1d39      	adds	r1, r7, #4
 80122c2:	f107 0308 	add.w	r3, r7, #8
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fe fbc4 	bl	8010a54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80122cc:	6839      	ldr	r1, [r7, #0]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	68ba      	ldr	r2, [r7, #8]
 80122d2:	9202      	str	r2, [sp, #8]
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	2300      	movs	r3, #0
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	2300      	movs	r3, #0
 80122dc:	460a      	mov	r2, r1
 80122de:	4922      	ldr	r1, [pc, #136]	; (8012368 <vTaskStartScheduler+0xb8>)
 80122e0:	4822      	ldr	r0, [pc, #136]	; (801236c <vTaskStartScheduler+0xbc>)
 80122e2:	f7ff fd89 	bl	8011df8 <xTaskCreateStatic>
 80122e6:	4602      	mov	r2, r0
 80122e8:	4b21      	ldr	r3, [pc, #132]	; (8012370 <vTaskStartScheduler+0xc0>)
 80122ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80122ec:	4b20      	ldr	r3, [pc, #128]	; (8012370 <vTaskStartScheduler+0xc0>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d002      	beq.n	80122fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80122f4:	2301      	movs	r3, #1
 80122f6:	617b      	str	r3, [r7, #20]
 80122f8:	e001      	b.n	80122fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80122fa:	2300      	movs	r3, #0
 80122fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	2b01      	cmp	r3, #1
 8012302:	d102      	bne.n	801230a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012304:	f000 fe24 	bl	8012f50 <xTimerCreateTimerTask>
 8012308:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	2b01      	cmp	r3, #1
 801230e:	d117      	bne.n	8012340 <vTaskStartScheduler+0x90>
 8012310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012314:	b672      	cpsid	i
 8012316:	f383 8811 	msr	BASEPRI, r3
 801231a:	f3bf 8f6f 	isb	sy
 801231e:	f3bf 8f4f 	dsb	sy
 8012322:	b662      	cpsie	i
 8012324:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012326:	4b13      	ldr	r3, [pc, #76]	; (8012374 <vTaskStartScheduler+0xc4>)
 8012328:	f04f 32ff 	mov.w	r2, #4294967295
 801232c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801232e:	4b12      	ldr	r3, [pc, #72]	; (8012378 <vTaskStartScheduler+0xc8>)
 8012330:	2201      	movs	r2, #1
 8012332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012334:	4b11      	ldr	r3, [pc, #68]	; (801237c <vTaskStartScheduler+0xcc>)
 8012336:	2200      	movs	r2, #0
 8012338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801233a:	f001 f9e9 	bl	8013710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801233e:	e00f      	b.n	8012360 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012346:	d10b      	bne.n	8012360 <vTaskStartScheduler+0xb0>
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	b672      	cpsid	i
 801234e:	f383 8811 	msr	BASEPRI, r3
 8012352:	f3bf 8f6f 	isb	sy
 8012356:	f3bf 8f4f 	dsb	sy
 801235a:	b662      	cpsie	i
 801235c:	60fb      	str	r3, [r7, #12]
 801235e:	e7fe      	b.n	801235e <vTaskStartScheduler+0xae>
}
 8012360:	bf00      	nop
 8012362:	3718      	adds	r7, #24
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	08016840 	.word	0x08016840
 801236c:	080129c5 	.word	0x080129c5
 8012370:	20000e7c 	.word	0x20000e7c
 8012374:	20000e78 	.word	0x20000e78
 8012378:	20000e64 	.word	0x20000e64
 801237c:	20000e5c 	.word	0x20000e5c

08012380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012380:	b480      	push	{r7}
 8012382:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012384:	4b04      	ldr	r3, [pc, #16]	; (8012398 <vTaskSuspendAll+0x18>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	3301      	adds	r3, #1
 801238a:	4a03      	ldr	r2, [pc, #12]	; (8012398 <vTaskSuspendAll+0x18>)
 801238c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801238e:	bf00      	nop
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	20000e80 	.word	0x20000e80

0801239c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80123a2:	2300      	movs	r3, #0
 80123a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80123a6:	2300      	movs	r3, #0
 80123a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80123aa:	4b42      	ldr	r3, [pc, #264]	; (80124b4 <xTaskResumeAll+0x118>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10b      	bne.n	80123ca <xTaskResumeAll+0x2e>
 80123b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b6:	b672      	cpsid	i
 80123b8:	f383 8811 	msr	BASEPRI, r3
 80123bc:	f3bf 8f6f 	isb	sy
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	b662      	cpsie	i
 80123c6:	603b      	str	r3, [r7, #0]
 80123c8:	e7fe      	b.n	80123c8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80123ca:	f001 fa1d 	bl	8013808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80123ce:	4b39      	ldr	r3, [pc, #228]	; (80124b4 <xTaskResumeAll+0x118>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	3b01      	subs	r3, #1
 80123d4:	4a37      	ldr	r2, [pc, #220]	; (80124b4 <xTaskResumeAll+0x118>)
 80123d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123d8:	4b36      	ldr	r3, [pc, #216]	; (80124b4 <xTaskResumeAll+0x118>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d162      	bne.n	80124a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80123e0:	4b35      	ldr	r3, [pc, #212]	; (80124b8 <xTaskResumeAll+0x11c>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d05e      	beq.n	80124a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80123e8:	e02f      	b.n	801244a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123ea:	4b34      	ldr	r3, [pc, #208]	; (80124bc <xTaskResumeAll+0x120>)
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	3318      	adds	r3, #24
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fe fbea 	bl	8010bd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	3304      	adds	r3, #4
 8012400:	4618      	mov	r0, r3
 8012402:	f7fe fbe5 	bl	8010bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801240a:	4b2d      	ldr	r3, [pc, #180]	; (80124c0 <xTaskResumeAll+0x124>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	429a      	cmp	r2, r3
 8012410:	d903      	bls.n	801241a <xTaskResumeAll+0x7e>
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012416:	4a2a      	ldr	r2, [pc, #168]	; (80124c0 <xTaskResumeAll+0x124>)
 8012418:	6013      	str	r3, [r2, #0]
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801241e:	4613      	mov	r3, r2
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	4413      	add	r3, r2
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	4a27      	ldr	r2, [pc, #156]	; (80124c4 <xTaskResumeAll+0x128>)
 8012428:	441a      	add	r2, r3
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	3304      	adds	r3, #4
 801242e:	4619      	mov	r1, r3
 8012430:	4610      	mov	r0, r2
 8012432:	f7fe fb70 	bl	8010b16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801243a:	4b23      	ldr	r3, [pc, #140]	; (80124c8 <xTaskResumeAll+0x12c>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012440:	429a      	cmp	r2, r3
 8012442:	d302      	bcc.n	801244a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012444:	4b21      	ldr	r3, [pc, #132]	; (80124cc <xTaskResumeAll+0x130>)
 8012446:	2201      	movs	r2, #1
 8012448:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801244a:	4b1c      	ldr	r3, [pc, #112]	; (80124bc <xTaskResumeAll+0x120>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1cb      	bne.n	80123ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d001      	beq.n	801245c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012458:	f000 fb68 	bl	8012b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801245c:	4b1c      	ldr	r3, [pc, #112]	; (80124d0 <xTaskResumeAll+0x134>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d010      	beq.n	801248a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012468:	f000 f858 	bl	801251c <xTaskIncrementTick>
 801246c:	4603      	mov	r3, r0
 801246e:	2b00      	cmp	r3, #0
 8012470:	d002      	beq.n	8012478 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012472:	4b16      	ldr	r3, [pc, #88]	; (80124cc <xTaskResumeAll+0x130>)
 8012474:	2201      	movs	r2, #1
 8012476:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	3b01      	subs	r3, #1
 801247c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1f1      	bne.n	8012468 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8012484:	4b12      	ldr	r3, [pc, #72]	; (80124d0 <xTaskResumeAll+0x134>)
 8012486:	2200      	movs	r2, #0
 8012488:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801248a:	4b10      	ldr	r3, [pc, #64]	; (80124cc <xTaskResumeAll+0x130>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d009      	beq.n	80124a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012492:	2301      	movs	r3, #1
 8012494:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012496:	4b0f      	ldr	r3, [pc, #60]	; (80124d4 <xTaskResumeAll+0x138>)
 8012498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801249c:	601a      	str	r2, [r3, #0]
 801249e:	f3bf 8f4f 	dsb	sy
 80124a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124a6:	f001 f9e1 	bl	801386c <vPortExitCritical>

	return xAlreadyYielded;
 80124aa:	68bb      	ldr	r3, [r7, #8]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	20000e80 	.word	0x20000e80
 80124b8:	20000e58 	.word	0x20000e58
 80124bc:	20000e18 	.word	0x20000e18
 80124c0:	20000e60 	.word	0x20000e60
 80124c4:	20000988 	.word	0x20000988
 80124c8:	20000984 	.word	0x20000984
 80124cc:	20000e6c 	.word	0x20000e6c
 80124d0:	20000e68 	.word	0x20000e68
 80124d4:	e000ed04 	.word	0xe000ed04

080124d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80124de:	4b05      	ldr	r3, [pc, #20]	; (80124f4 <xTaskGetTickCount+0x1c>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80124e4:	687b      	ldr	r3, [r7, #4]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	370c      	adds	r7, #12
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
 80124f2:	bf00      	nop
 80124f4:	20000e5c 	.word	0x20000e5c

080124f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80124fe:	f001 fa63 	bl	80139c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012502:	2300      	movs	r3, #0
 8012504:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012506:	4b04      	ldr	r3, [pc, #16]	; (8012518 <xTaskGetTickCountFromISR+0x20>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801250c:	683b      	ldr	r3, [r7, #0]
}
 801250e:	4618      	mov	r0, r3
 8012510:	3708      	adds	r7, #8
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	20000e5c 	.word	0x20000e5c

0801251c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012522:	2300      	movs	r3, #0
 8012524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012526:	4b4f      	ldr	r3, [pc, #316]	; (8012664 <xTaskIncrementTick+0x148>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	f040 808a 	bne.w	8012644 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012530:	4b4d      	ldr	r3, [pc, #308]	; (8012668 <xTaskIncrementTick+0x14c>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	3301      	adds	r3, #1
 8012536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012538:	4a4b      	ldr	r2, [pc, #300]	; (8012668 <xTaskIncrementTick+0x14c>)
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d121      	bne.n	8012588 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012544:	4b49      	ldr	r3, [pc, #292]	; (801266c <xTaskIncrementTick+0x150>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00b      	beq.n	8012566 <xTaskIncrementTick+0x4a>
 801254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012552:	b672      	cpsid	i
 8012554:	f383 8811 	msr	BASEPRI, r3
 8012558:	f3bf 8f6f 	isb	sy
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	b662      	cpsie	i
 8012562:	603b      	str	r3, [r7, #0]
 8012564:	e7fe      	b.n	8012564 <xTaskIncrementTick+0x48>
 8012566:	4b41      	ldr	r3, [pc, #260]	; (801266c <xTaskIncrementTick+0x150>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	60fb      	str	r3, [r7, #12]
 801256c:	4b40      	ldr	r3, [pc, #256]	; (8012670 <xTaskIncrementTick+0x154>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a3e      	ldr	r2, [pc, #248]	; (801266c <xTaskIncrementTick+0x150>)
 8012572:	6013      	str	r3, [r2, #0]
 8012574:	4a3e      	ldr	r2, [pc, #248]	; (8012670 <xTaskIncrementTick+0x154>)
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	6013      	str	r3, [r2, #0]
 801257a:	4b3e      	ldr	r3, [pc, #248]	; (8012674 <xTaskIncrementTick+0x158>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	3301      	adds	r3, #1
 8012580:	4a3c      	ldr	r2, [pc, #240]	; (8012674 <xTaskIncrementTick+0x158>)
 8012582:	6013      	str	r3, [r2, #0]
 8012584:	f000 fad2 	bl	8012b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012588:	4b3b      	ldr	r3, [pc, #236]	; (8012678 <xTaskIncrementTick+0x15c>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	693a      	ldr	r2, [r7, #16]
 801258e:	429a      	cmp	r2, r3
 8012590:	d349      	bcc.n	8012626 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012592:	4b36      	ldr	r3, [pc, #216]	; (801266c <xTaskIncrementTick+0x150>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d104      	bne.n	80125a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801259c:	4b36      	ldr	r3, [pc, #216]	; (8012678 <xTaskIncrementTick+0x15c>)
 801259e:	f04f 32ff 	mov.w	r2, #4294967295
 80125a2:	601a      	str	r2, [r3, #0]
					break;
 80125a4:	e03f      	b.n	8012626 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125a6:	4b31      	ldr	r3, [pc, #196]	; (801266c <xTaskIncrementTick+0x150>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80125b6:	693a      	ldr	r2, [r7, #16]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d203      	bcs.n	80125c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80125be:	4a2e      	ldr	r2, [pc, #184]	; (8012678 <xTaskIncrementTick+0x15c>)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80125c4:	e02f      	b.n	8012626 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	3304      	adds	r3, #4
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fe fb00 	bl	8010bd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d004      	beq.n	80125e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	3318      	adds	r3, #24
 80125dc:	4618      	mov	r0, r3
 80125de:	f7fe faf7 	bl	8010bd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125e6:	4b25      	ldr	r3, [pc, #148]	; (801267c <xTaskIncrementTick+0x160>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d903      	bls.n	80125f6 <xTaskIncrementTick+0xda>
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f2:	4a22      	ldr	r2, [pc, #136]	; (801267c <xTaskIncrementTick+0x160>)
 80125f4:	6013      	str	r3, [r2, #0]
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125fa:	4613      	mov	r3, r2
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	4413      	add	r3, r2
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	4a1f      	ldr	r2, [pc, #124]	; (8012680 <xTaskIncrementTick+0x164>)
 8012604:	441a      	add	r2, r3
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	3304      	adds	r3, #4
 801260a:	4619      	mov	r1, r3
 801260c:	4610      	mov	r0, r2
 801260e:	f7fe fa82 	bl	8010b16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012616:	4b1b      	ldr	r3, [pc, #108]	; (8012684 <xTaskIncrementTick+0x168>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801261c:	429a      	cmp	r2, r3
 801261e:	d3b8      	bcc.n	8012592 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012620:	2301      	movs	r3, #1
 8012622:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012624:	e7b5      	b.n	8012592 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012626:	4b17      	ldr	r3, [pc, #92]	; (8012684 <xTaskIncrementTick+0x168>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801262c:	4914      	ldr	r1, [pc, #80]	; (8012680 <xTaskIncrementTick+0x164>)
 801262e:	4613      	mov	r3, r2
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	4413      	add	r3, r2
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	440b      	add	r3, r1
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	2b01      	cmp	r3, #1
 801263c:	d907      	bls.n	801264e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801263e:	2301      	movs	r3, #1
 8012640:	617b      	str	r3, [r7, #20]
 8012642:	e004      	b.n	801264e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012644:	4b10      	ldr	r3, [pc, #64]	; (8012688 <xTaskIncrementTick+0x16c>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	3301      	adds	r3, #1
 801264a:	4a0f      	ldr	r2, [pc, #60]	; (8012688 <xTaskIncrementTick+0x16c>)
 801264c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801264e:	4b0f      	ldr	r3, [pc, #60]	; (801268c <xTaskIncrementTick+0x170>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d001      	beq.n	801265a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8012656:	2301      	movs	r3, #1
 8012658:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801265a:	697b      	ldr	r3, [r7, #20]
}
 801265c:	4618      	mov	r0, r3
 801265e:	3718      	adds	r7, #24
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	20000e80 	.word	0x20000e80
 8012668:	20000e5c 	.word	0x20000e5c
 801266c:	20000e10 	.word	0x20000e10
 8012670:	20000e14 	.word	0x20000e14
 8012674:	20000e70 	.word	0x20000e70
 8012678:	20000e78 	.word	0x20000e78
 801267c:	20000e60 	.word	0x20000e60
 8012680:	20000988 	.word	0x20000988
 8012684:	20000984 	.word	0x20000984
 8012688:	20000e68 	.word	0x20000e68
 801268c:	20000e6c 	.word	0x20000e6c

08012690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012690:	b480      	push	{r7}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012696:	4b28      	ldr	r3, [pc, #160]	; (8012738 <vTaskSwitchContext+0xa8>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d003      	beq.n	80126a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801269e:	4b27      	ldr	r3, [pc, #156]	; (801273c <vTaskSwitchContext+0xac>)
 80126a0:	2201      	movs	r2, #1
 80126a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80126a4:	e042      	b.n	801272c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80126a6:	4b25      	ldr	r3, [pc, #148]	; (801273c <vTaskSwitchContext+0xac>)
 80126a8:	2200      	movs	r2, #0
 80126aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126ac:	4b24      	ldr	r3, [pc, #144]	; (8012740 <vTaskSwitchContext+0xb0>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	60fb      	str	r3, [r7, #12]
 80126b2:	e011      	b.n	80126d8 <vTaskSwitchContext+0x48>
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10b      	bne.n	80126d2 <vTaskSwitchContext+0x42>
 80126ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126be:	b672      	cpsid	i
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	b662      	cpsie	i
 80126ce:	607b      	str	r3, [r7, #4]
 80126d0:	e7fe      	b.n	80126d0 <vTaskSwitchContext+0x40>
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	3b01      	subs	r3, #1
 80126d6:	60fb      	str	r3, [r7, #12]
 80126d8:	491a      	ldr	r1, [pc, #104]	; (8012744 <vTaskSwitchContext+0xb4>)
 80126da:	68fa      	ldr	r2, [r7, #12]
 80126dc:	4613      	mov	r3, r2
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	4413      	add	r3, r2
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	440b      	add	r3, r1
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d0e3      	beq.n	80126b4 <vTaskSwitchContext+0x24>
 80126ec:	68fa      	ldr	r2, [r7, #12]
 80126ee:	4613      	mov	r3, r2
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	4413      	add	r3, r2
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	4a13      	ldr	r2, [pc, #76]	; (8012744 <vTaskSwitchContext+0xb4>)
 80126f8:	4413      	add	r3, r2
 80126fa:	60bb      	str	r3, [r7, #8]
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	685a      	ldr	r2, [r3, #4]
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	605a      	str	r2, [r3, #4]
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	685a      	ldr	r2, [r3, #4]
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	3308      	adds	r3, #8
 801270e:	429a      	cmp	r2, r3
 8012710:	d104      	bne.n	801271c <vTaskSwitchContext+0x8c>
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	685a      	ldr	r2, [r3, #4]
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	605a      	str	r2, [r3, #4]
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	4a09      	ldr	r2, [pc, #36]	; (8012748 <vTaskSwitchContext+0xb8>)
 8012724:	6013      	str	r3, [r2, #0]
 8012726:	4a06      	ldr	r2, [pc, #24]	; (8012740 <vTaskSwitchContext+0xb0>)
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	6013      	str	r3, [r2, #0]
}
 801272c:	bf00      	nop
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr
 8012738:	20000e80 	.word	0x20000e80
 801273c:	20000e6c 	.word	0x20000e6c
 8012740:	20000e60 	.word	0x20000e60
 8012744:	20000988 	.word	0x20000988
 8012748:	20000984 	.word	0x20000984

0801274c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d10b      	bne.n	8012774 <vTaskPlaceOnEventList+0x28>
 801275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012760:	b672      	cpsid	i
 8012762:	f383 8811 	msr	BASEPRI, r3
 8012766:	f3bf 8f6f 	isb	sy
 801276a:	f3bf 8f4f 	dsb	sy
 801276e:	b662      	cpsie	i
 8012770:	60fb      	str	r3, [r7, #12]
 8012772:	e7fe      	b.n	8012772 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012774:	4b07      	ldr	r3, [pc, #28]	; (8012794 <vTaskPlaceOnEventList+0x48>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	3318      	adds	r3, #24
 801277a:	4619      	mov	r1, r3
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7fe f9ee 	bl	8010b5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012782:	2101      	movs	r1, #1
 8012784:	6838      	ldr	r0, [r7, #0]
 8012786:	f000 fb8f 	bl	8012ea8 <prvAddCurrentTaskToDelayedList>
}
 801278a:	bf00      	nop
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	20000984 	.word	0x20000984

08012798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012798:	b580      	push	{r7, lr}
 801279a:	b086      	sub	sp, #24
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d10b      	bne.n	80127c2 <vTaskPlaceOnEventListRestricted+0x2a>
 80127aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ae:	b672      	cpsid	i
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	b662      	cpsie	i
 80127be:	617b      	str	r3, [r7, #20]
 80127c0:	e7fe      	b.n	80127c0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80127c2:	4b0a      	ldr	r3, [pc, #40]	; (80127ec <vTaskPlaceOnEventListRestricted+0x54>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	3318      	adds	r3, #24
 80127c8:	4619      	mov	r1, r3
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f7fe f9a3 	bl	8010b16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d002      	beq.n	80127dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80127d6:	f04f 33ff 	mov.w	r3, #4294967295
 80127da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80127dc:	6879      	ldr	r1, [r7, #4]
 80127de:	68b8      	ldr	r0, [r7, #8]
 80127e0:	f000 fb62 	bl	8012ea8 <prvAddCurrentTaskToDelayedList>
	}
 80127e4:	bf00      	nop
 80127e6:	3718      	adds	r7, #24
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	20000984 	.word	0x20000984

080127f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10b      	bne.n	801281e <xTaskRemoveFromEventList+0x2e>
 8012806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280a:	b672      	cpsid	i
 801280c:	f383 8811 	msr	BASEPRI, r3
 8012810:	f3bf 8f6f 	isb	sy
 8012814:	f3bf 8f4f 	dsb	sy
 8012818:	b662      	cpsie	i
 801281a:	60fb      	str	r3, [r7, #12]
 801281c:	e7fe      	b.n	801281c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	3318      	adds	r3, #24
 8012822:	4618      	mov	r0, r3
 8012824:	f7fe f9d4 	bl	8010bd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012828:	4b1d      	ldr	r3, [pc, #116]	; (80128a0 <xTaskRemoveFromEventList+0xb0>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d11d      	bne.n	801286c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	3304      	adds	r3, #4
 8012834:	4618      	mov	r0, r3
 8012836:	f7fe f9cb 	bl	8010bd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801283e:	4b19      	ldr	r3, [pc, #100]	; (80128a4 <xTaskRemoveFromEventList+0xb4>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	429a      	cmp	r2, r3
 8012844:	d903      	bls.n	801284e <xTaskRemoveFromEventList+0x5e>
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801284a:	4a16      	ldr	r2, [pc, #88]	; (80128a4 <xTaskRemoveFromEventList+0xb4>)
 801284c:	6013      	str	r3, [r2, #0]
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012852:	4613      	mov	r3, r2
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	4413      	add	r3, r2
 8012858:	009b      	lsls	r3, r3, #2
 801285a:	4a13      	ldr	r2, [pc, #76]	; (80128a8 <xTaskRemoveFromEventList+0xb8>)
 801285c:	441a      	add	r2, r3
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	3304      	adds	r3, #4
 8012862:	4619      	mov	r1, r3
 8012864:	4610      	mov	r0, r2
 8012866:	f7fe f956 	bl	8010b16 <vListInsertEnd>
 801286a:	e005      	b.n	8012878 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	3318      	adds	r3, #24
 8012870:	4619      	mov	r1, r3
 8012872:	480e      	ldr	r0, [pc, #56]	; (80128ac <xTaskRemoveFromEventList+0xbc>)
 8012874:	f7fe f94f 	bl	8010b16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012878:	693b      	ldr	r3, [r7, #16]
 801287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801287c:	4b0c      	ldr	r3, [pc, #48]	; (80128b0 <xTaskRemoveFromEventList+0xc0>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012882:	429a      	cmp	r2, r3
 8012884:	d905      	bls.n	8012892 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012886:	2301      	movs	r3, #1
 8012888:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801288a:	4b0a      	ldr	r3, [pc, #40]	; (80128b4 <xTaskRemoveFromEventList+0xc4>)
 801288c:	2201      	movs	r2, #1
 801288e:	601a      	str	r2, [r3, #0]
 8012890:	e001      	b.n	8012896 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012892:	2300      	movs	r3, #0
 8012894:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012896:	697b      	ldr	r3, [r7, #20]
}
 8012898:	4618      	mov	r0, r3
 801289a:	3718      	adds	r7, #24
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	20000e80 	.word	0x20000e80
 80128a4:	20000e60 	.word	0x20000e60
 80128a8:	20000988 	.word	0x20000988
 80128ac:	20000e18 	.word	0x20000e18
 80128b0:	20000984 	.word	0x20000984
 80128b4:	20000e6c 	.word	0x20000e6c

080128b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80128c0:	4b06      	ldr	r3, [pc, #24]	; (80128dc <vTaskInternalSetTimeOutState+0x24>)
 80128c2:	681a      	ldr	r2, [r3, #0]
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80128c8:	4b05      	ldr	r3, [pc, #20]	; (80128e0 <vTaskInternalSetTimeOutState+0x28>)
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	605a      	str	r2, [r3, #4]
}
 80128d0:	bf00      	nop
 80128d2:	370c      	adds	r7, #12
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr
 80128dc:	20000e70 	.word	0x20000e70
 80128e0:	20000e5c 	.word	0x20000e5c

080128e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b088      	sub	sp, #32
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10b      	bne.n	801290c <xTaskCheckForTimeOut+0x28>
 80128f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f8:	b672      	cpsid	i
 80128fa:	f383 8811 	msr	BASEPRI, r3
 80128fe:	f3bf 8f6f 	isb	sy
 8012902:	f3bf 8f4f 	dsb	sy
 8012906:	b662      	cpsie	i
 8012908:	613b      	str	r3, [r7, #16]
 801290a:	e7fe      	b.n	801290a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d10b      	bne.n	801292a <xTaskCheckForTimeOut+0x46>
 8012912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012916:	b672      	cpsid	i
 8012918:	f383 8811 	msr	BASEPRI, r3
 801291c:	f3bf 8f6f 	isb	sy
 8012920:	f3bf 8f4f 	dsb	sy
 8012924:	b662      	cpsie	i
 8012926:	60fb      	str	r3, [r7, #12]
 8012928:	e7fe      	b.n	8012928 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801292a:	f000 ff6d 	bl	8013808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801292e:	4b1d      	ldr	r3, [pc, #116]	; (80129a4 <xTaskCheckForTimeOut+0xc0>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	69ba      	ldr	r2, [r7, #24]
 801293a:	1ad3      	subs	r3, r2, r3
 801293c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012946:	d102      	bne.n	801294e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012948:	2300      	movs	r3, #0
 801294a:	61fb      	str	r3, [r7, #28]
 801294c:	e023      	b.n	8012996 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	4b15      	ldr	r3, [pc, #84]	; (80129a8 <xTaskCheckForTimeOut+0xc4>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	429a      	cmp	r2, r3
 8012958:	d007      	beq.n	801296a <xTaskCheckForTimeOut+0x86>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	69ba      	ldr	r2, [r7, #24]
 8012960:	429a      	cmp	r2, r3
 8012962:	d302      	bcc.n	801296a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012964:	2301      	movs	r3, #1
 8012966:	61fb      	str	r3, [r7, #28]
 8012968:	e015      	b.n	8012996 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	697a      	ldr	r2, [r7, #20]
 8012970:	429a      	cmp	r2, r3
 8012972:	d20b      	bcs.n	801298c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	1ad2      	subs	r2, r2, r3
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7ff ff99 	bl	80128b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012986:	2300      	movs	r3, #0
 8012988:	61fb      	str	r3, [r7, #28]
 801298a:	e004      	b.n	8012996 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	2200      	movs	r2, #0
 8012990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012992:	2301      	movs	r3, #1
 8012994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012996:	f000 ff69 	bl	801386c <vPortExitCritical>

	return xReturn;
 801299a:	69fb      	ldr	r3, [r7, #28]
}
 801299c:	4618      	mov	r0, r3
 801299e:	3720      	adds	r7, #32
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	20000e5c 	.word	0x20000e5c
 80129a8:	20000e70 	.word	0x20000e70

080129ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80129ac:	b480      	push	{r7}
 80129ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80129b0:	4b03      	ldr	r3, [pc, #12]	; (80129c0 <vTaskMissedYield+0x14>)
 80129b2:	2201      	movs	r2, #1
 80129b4:	601a      	str	r2, [r3, #0]
}
 80129b6:	bf00      	nop
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr
 80129c0:	20000e6c 	.word	0x20000e6c

080129c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80129cc:	f000 f852 	bl	8012a74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80129d0:	4b06      	ldr	r3, [pc, #24]	; (80129ec <prvIdleTask+0x28>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d9f9      	bls.n	80129cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80129d8:	4b05      	ldr	r3, [pc, #20]	; (80129f0 <prvIdleTask+0x2c>)
 80129da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129de:	601a      	str	r2, [r3, #0]
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80129e8:	e7f0      	b.n	80129cc <prvIdleTask+0x8>
 80129ea:	bf00      	nop
 80129ec:	20000988 	.word	0x20000988
 80129f0:	e000ed04 	.word	0xe000ed04

080129f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80129fa:	2300      	movs	r3, #0
 80129fc:	607b      	str	r3, [r7, #4]
 80129fe:	e00c      	b.n	8012a1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	4613      	mov	r3, r2
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	4413      	add	r3, r2
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	4a12      	ldr	r2, [pc, #72]	; (8012a54 <prvInitialiseTaskLists+0x60>)
 8012a0c:	4413      	add	r3, r2
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fe f854 	bl	8010abc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	3301      	adds	r3, #1
 8012a18:	607b      	str	r3, [r7, #4]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2b37      	cmp	r3, #55	; 0x37
 8012a1e:	d9ef      	bls.n	8012a00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012a20:	480d      	ldr	r0, [pc, #52]	; (8012a58 <prvInitialiseTaskLists+0x64>)
 8012a22:	f7fe f84b 	bl	8010abc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012a26:	480d      	ldr	r0, [pc, #52]	; (8012a5c <prvInitialiseTaskLists+0x68>)
 8012a28:	f7fe f848 	bl	8010abc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012a2c:	480c      	ldr	r0, [pc, #48]	; (8012a60 <prvInitialiseTaskLists+0x6c>)
 8012a2e:	f7fe f845 	bl	8010abc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012a32:	480c      	ldr	r0, [pc, #48]	; (8012a64 <prvInitialiseTaskLists+0x70>)
 8012a34:	f7fe f842 	bl	8010abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012a38:	480b      	ldr	r0, [pc, #44]	; (8012a68 <prvInitialiseTaskLists+0x74>)
 8012a3a:	f7fe f83f 	bl	8010abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012a3e:	4b0b      	ldr	r3, [pc, #44]	; (8012a6c <prvInitialiseTaskLists+0x78>)
 8012a40:	4a05      	ldr	r2, [pc, #20]	; (8012a58 <prvInitialiseTaskLists+0x64>)
 8012a42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012a44:	4b0a      	ldr	r3, [pc, #40]	; (8012a70 <prvInitialiseTaskLists+0x7c>)
 8012a46:	4a05      	ldr	r2, [pc, #20]	; (8012a5c <prvInitialiseTaskLists+0x68>)
 8012a48:	601a      	str	r2, [r3, #0]
}
 8012a4a:	bf00      	nop
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	20000988 	.word	0x20000988
 8012a58:	20000de8 	.word	0x20000de8
 8012a5c:	20000dfc 	.word	0x20000dfc
 8012a60:	20000e18 	.word	0x20000e18
 8012a64:	20000e2c 	.word	0x20000e2c
 8012a68:	20000e44 	.word	0x20000e44
 8012a6c:	20000e10 	.word	0x20000e10
 8012a70:	20000e14 	.word	0x20000e14

08012a74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a7a:	e019      	b.n	8012ab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012a7c:	f000 fec4 	bl	8013808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a80:	4b0f      	ldr	r3, [pc, #60]	; (8012ac0 <prvCheckTasksWaitingTermination+0x4c>)
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	3304      	adds	r3, #4
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7fe f89f 	bl	8010bd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012a92:	4b0c      	ldr	r3, [pc, #48]	; (8012ac4 <prvCheckTasksWaitingTermination+0x50>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	3b01      	subs	r3, #1
 8012a98:	4a0a      	ldr	r2, [pc, #40]	; (8012ac4 <prvCheckTasksWaitingTermination+0x50>)
 8012a9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012a9c:	4b0a      	ldr	r3, [pc, #40]	; (8012ac8 <prvCheckTasksWaitingTermination+0x54>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	4a09      	ldr	r2, [pc, #36]	; (8012ac8 <prvCheckTasksWaitingTermination+0x54>)
 8012aa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012aa6:	f000 fee1 	bl	801386c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f000 f80e 	bl	8012acc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ab0:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <prvCheckTasksWaitingTermination+0x54>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d1e1      	bne.n	8012a7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012ab8:	bf00      	nop
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	20000e2c 	.word	0x20000e2c
 8012ac4:	20000e58 	.word	0x20000e58
 8012ac8:	20000e40 	.word	0x20000e40

08012acc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d108      	bne.n	8012af0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f001 f87a 	bl	8013bdc <vPortFree>
				vPortFree( pxTCB );
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f001 f877 	bl	8013bdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012aee:	e019      	b.n	8012b24 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d103      	bne.n	8012b02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f001 f86e 	bl	8013bdc <vPortFree>
	}
 8012b00:	e010      	b.n	8012b24 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d00b      	beq.n	8012b24 <prvDeleteTCB+0x58>
 8012b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b10:	b672      	cpsid	i
 8012b12:	f383 8811 	msr	BASEPRI, r3
 8012b16:	f3bf 8f6f 	isb	sy
 8012b1a:	f3bf 8f4f 	dsb	sy
 8012b1e:	b662      	cpsie	i
 8012b20:	60fb      	str	r3, [r7, #12]
 8012b22:	e7fe      	b.n	8012b22 <prvDeleteTCB+0x56>
	}
 8012b24:	bf00      	nop
 8012b26:	3710      	adds	r7, #16
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b32:	4b0c      	ldr	r3, [pc, #48]	; (8012b64 <prvResetNextTaskUnblockTime+0x38>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d104      	bne.n	8012b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <prvResetNextTaskUnblockTime+0x3c>)
 8012b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012b44:	e008      	b.n	8012b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b46:	4b07      	ldr	r3, [pc, #28]	; (8012b64 <prvResetNextTaskUnblockTime+0x38>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	4a04      	ldr	r2, [pc, #16]	; (8012b68 <prvResetNextTaskUnblockTime+0x3c>)
 8012b56:	6013      	str	r3, [r2, #0]
}
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr
 8012b64:	20000e10 	.word	0x20000e10
 8012b68:	20000e78 	.word	0x20000e78

08012b6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012b72:	4b05      	ldr	r3, [pc, #20]	; (8012b88 <xTaskGetCurrentTaskHandle+0x1c>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012b78:	687b      	ldr	r3, [r7, #4]
	}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	370c      	adds	r7, #12
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	20000984 	.word	0x20000984

08012b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012b92:	4b0b      	ldr	r3, [pc, #44]	; (8012bc0 <xTaskGetSchedulerState+0x34>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d102      	bne.n	8012ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	607b      	str	r3, [r7, #4]
 8012b9e:	e008      	b.n	8012bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ba0:	4b08      	ldr	r3, [pc, #32]	; (8012bc4 <xTaskGetSchedulerState+0x38>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d102      	bne.n	8012bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012ba8:	2302      	movs	r3, #2
 8012baa:	607b      	str	r3, [r7, #4]
 8012bac:	e001      	b.n	8012bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012bb2:	687b      	ldr	r3, [r7, #4]
	}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr
 8012bc0:	20000e64 	.word	0x20000e64
 8012bc4:	20000e80 	.word	0x20000e80

08012bc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d051      	beq.n	8012c82 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be2:	4b2a      	ldr	r3, [pc, #168]	; (8012c8c <xTaskPriorityInherit+0xc4>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d241      	bcs.n	8012c70 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	699b      	ldr	r3, [r3, #24]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	db06      	blt.n	8012c02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bf4:	4b25      	ldr	r3, [pc, #148]	; (8012c8c <xTaskPriorityInherit+0xc4>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	6959      	ldr	r1, [r3, #20]
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c0a:	4613      	mov	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	4413      	add	r3, r2
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	4a1f      	ldr	r2, [pc, #124]	; (8012c90 <xTaskPriorityInherit+0xc8>)
 8012c14:	4413      	add	r3, r2
 8012c16:	4299      	cmp	r1, r3
 8012c18:	d122      	bne.n	8012c60 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7fd ffd6 	bl	8010bd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012c24:	4b19      	ldr	r3, [pc, #100]	; (8012c8c <xTaskPriorityInherit+0xc4>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c32:	4b18      	ldr	r3, [pc, #96]	; (8012c94 <xTaskPriorityInherit+0xcc>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d903      	bls.n	8012c42 <xTaskPriorityInherit+0x7a>
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c3e:	4a15      	ldr	r2, [pc, #84]	; (8012c94 <xTaskPriorityInherit+0xcc>)
 8012c40:	6013      	str	r3, [r2, #0]
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c46:	4613      	mov	r3, r2
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	4413      	add	r3, r2
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	4a10      	ldr	r2, [pc, #64]	; (8012c90 <xTaskPriorityInherit+0xc8>)
 8012c50:	441a      	add	r2, r3
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	3304      	adds	r3, #4
 8012c56:	4619      	mov	r1, r3
 8012c58:	4610      	mov	r0, r2
 8012c5a:	f7fd ff5c 	bl	8010b16 <vListInsertEnd>
 8012c5e:	e004      	b.n	8012c6a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012c60:	4b0a      	ldr	r3, [pc, #40]	; (8012c8c <xTaskPriorityInherit+0xc4>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	60fb      	str	r3, [r7, #12]
 8012c6e:	e008      	b.n	8012c82 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c74:	4b05      	ldr	r3, [pc, #20]	; (8012c8c <xTaskPriorityInherit+0xc4>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d201      	bcs.n	8012c82 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c82:	68fb      	ldr	r3, [r7, #12]
	}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3710      	adds	r7, #16
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	20000984 	.word	0x20000984
 8012c90:	20000988 	.word	0x20000988
 8012c94:	20000e60 	.word	0x20000e60

08012c98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d058      	beq.n	8012d60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012cae:	4b2f      	ldr	r3, [pc, #188]	; (8012d6c <xTaskPriorityDisinherit+0xd4>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	693a      	ldr	r2, [r7, #16]
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d00b      	beq.n	8012cd0 <xTaskPriorityDisinherit+0x38>
 8012cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cbc:	b672      	cpsid	i
 8012cbe:	f383 8811 	msr	BASEPRI, r3
 8012cc2:	f3bf 8f6f 	isb	sy
 8012cc6:	f3bf 8f4f 	dsb	sy
 8012cca:	b662      	cpsie	i
 8012ccc:	60fb      	str	r3, [r7, #12]
 8012cce:	e7fe      	b.n	8012cce <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d10b      	bne.n	8012cf0 <xTaskPriorityDisinherit+0x58>
 8012cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cdc:	b672      	cpsid	i
 8012cde:	f383 8811 	msr	BASEPRI, r3
 8012ce2:	f3bf 8f6f 	isb	sy
 8012ce6:	f3bf 8f4f 	dsb	sy
 8012cea:	b662      	cpsie	i
 8012cec:	60bb      	str	r3, [r7, #8]
 8012cee:	e7fe      	b.n	8012cee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cf4:	1e5a      	subs	r2, r3, #1
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d02c      	beq.n	8012d60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d128      	bne.n	8012d60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	3304      	adds	r3, #4
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fd ff5c 	bl	8010bd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d30:	4b0f      	ldr	r3, [pc, #60]	; (8012d70 <xTaskPriorityDisinherit+0xd8>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d903      	bls.n	8012d40 <xTaskPriorityDisinherit+0xa8>
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d3c:	4a0c      	ldr	r2, [pc, #48]	; (8012d70 <xTaskPriorityDisinherit+0xd8>)
 8012d3e:	6013      	str	r3, [r2, #0]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d44:	4613      	mov	r3, r2
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	4413      	add	r3, r2
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	4a09      	ldr	r2, [pc, #36]	; (8012d74 <xTaskPriorityDisinherit+0xdc>)
 8012d4e:	441a      	add	r2, r3
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	3304      	adds	r3, #4
 8012d54:	4619      	mov	r1, r3
 8012d56:	4610      	mov	r0, r2
 8012d58:	f7fd fedd 	bl	8010b16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d60:	697b      	ldr	r3, [r7, #20]
	}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3718      	adds	r7, #24
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	20000984 	.word	0x20000984
 8012d70:	20000e60 	.word	0x20000e60
 8012d74:	20000988 	.word	0x20000988

08012d78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b088      	sub	sp, #32
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012d86:	2301      	movs	r3, #1
 8012d88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d06c      	beq.n	8012e6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012d90:	69bb      	ldr	r3, [r7, #24]
 8012d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d10b      	bne.n	8012db0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8012d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9c:	b672      	cpsid	i
 8012d9e:	f383 8811 	msr	BASEPRI, r3
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	b662      	cpsie	i
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	e7fe      	b.n	8012dae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012db4:	683a      	ldr	r2, [r7, #0]
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d902      	bls.n	8012dc0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	61fb      	str	r3, [r7, #28]
 8012dbe:	e002      	b.n	8012dc6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012dc0:	69bb      	ldr	r3, [r7, #24]
 8012dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dca:	69fa      	ldr	r2, [r7, #28]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d04c      	beq.n	8012e6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dd4:	697a      	ldr	r2, [r7, #20]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d147      	bne.n	8012e6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012dda:	4b26      	ldr	r3, [pc, #152]	; (8012e74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	69ba      	ldr	r2, [r7, #24]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d10b      	bne.n	8012dfc <vTaskPriorityDisinheritAfterTimeout+0x84>
 8012de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de8:	b672      	cpsid	i
 8012dea:	f383 8811 	msr	BASEPRI, r3
 8012dee:	f3bf 8f6f 	isb	sy
 8012df2:	f3bf 8f4f 	dsb	sy
 8012df6:	b662      	cpsie	i
 8012df8:	60bb      	str	r3, [r7, #8]
 8012dfa:	e7fe      	b.n	8012dfa <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	69fa      	ldr	r2, [r7, #28]
 8012e06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	699b      	ldr	r3, [r3, #24]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	db04      	blt.n	8012e1a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e10:	69fb      	ldr	r3, [r7, #28]
 8012e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e16:	69bb      	ldr	r3, [r7, #24]
 8012e18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	6959      	ldr	r1, [r3, #20]
 8012e1e:	693a      	ldr	r2, [r7, #16]
 8012e20:	4613      	mov	r3, r2
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	4413      	add	r3, r2
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4a13      	ldr	r2, [pc, #76]	; (8012e78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012e2a:	4413      	add	r3, r2
 8012e2c:	4299      	cmp	r1, r3
 8012e2e:	d11c      	bne.n	8012e6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	3304      	adds	r3, #4
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7fd fecb 	bl	8010bd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012e3a:	69bb      	ldr	r3, [r7, #24]
 8012e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e3e:	4b0f      	ldr	r3, [pc, #60]	; (8012e7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d903      	bls.n	8012e4e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e4a:	4a0c      	ldr	r2, [pc, #48]	; (8012e7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012e4c:	6013      	str	r3, [r2, #0]
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e52:	4613      	mov	r3, r2
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	4413      	add	r3, r2
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	4a07      	ldr	r2, [pc, #28]	; (8012e78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012e5c:	441a      	add	r2, r3
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	3304      	adds	r3, #4
 8012e62:	4619      	mov	r1, r3
 8012e64:	4610      	mov	r0, r2
 8012e66:	f7fd fe56 	bl	8010b16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e6a:	bf00      	nop
 8012e6c:	3720      	adds	r7, #32
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20000984 	.word	0x20000984
 8012e78:	20000988 	.word	0x20000988
 8012e7c:	20000e60 	.word	0x20000e60

08012e80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012e80:	b480      	push	{r7}
 8012e82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012e84:	4b07      	ldr	r3, [pc, #28]	; (8012ea4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d004      	beq.n	8012e96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012e8c:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e92:	3201      	adds	r2, #1
 8012e94:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012e96:	4b03      	ldr	r3, [pc, #12]	; (8012ea4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012e98:	681b      	ldr	r3, [r3, #0]
	}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea2:	4770      	bx	lr
 8012ea4:	20000984 	.word	0x20000984

08012ea8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012eb2:	4b21      	ldr	r3, [pc, #132]	; (8012f38 <prvAddCurrentTaskToDelayedList+0x90>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012eb8:	4b20      	ldr	r3, [pc, #128]	; (8012f3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	3304      	adds	r3, #4
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fd fe86 	bl	8010bd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eca:	d10a      	bne.n	8012ee2 <prvAddCurrentTaskToDelayedList+0x3a>
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d007      	beq.n	8012ee2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ed2:	4b1a      	ldr	r3, [pc, #104]	; (8012f3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	3304      	adds	r3, #4
 8012ed8:	4619      	mov	r1, r3
 8012eda:	4819      	ldr	r0, [pc, #100]	; (8012f40 <prvAddCurrentTaskToDelayedList+0x98>)
 8012edc:	f7fd fe1b 	bl	8010b16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012ee0:	e026      	b.n	8012f30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012ee2:	68fa      	ldr	r2, [r7, #12]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012eea:	4b14      	ldr	r3, [pc, #80]	; (8012f3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	68ba      	ldr	r2, [r7, #8]
 8012ef0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d209      	bcs.n	8012f0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012efa:	4b12      	ldr	r3, [pc, #72]	; (8012f44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	4b0f      	ldr	r3, [pc, #60]	; (8012f3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	3304      	adds	r3, #4
 8012f04:	4619      	mov	r1, r3
 8012f06:	4610      	mov	r0, r2
 8012f08:	f7fd fe29 	bl	8010b5e <vListInsert>
}
 8012f0c:	e010      	b.n	8012f30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012f0e:	4b0e      	ldr	r3, [pc, #56]	; (8012f48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	4b0a      	ldr	r3, [pc, #40]	; (8012f3c <prvAddCurrentTaskToDelayedList+0x94>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	3304      	adds	r3, #4
 8012f18:	4619      	mov	r1, r3
 8012f1a:	4610      	mov	r0, r2
 8012f1c:	f7fd fe1f 	bl	8010b5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012f20:	4b0a      	ldr	r3, [pc, #40]	; (8012f4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	68ba      	ldr	r2, [r7, #8]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d202      	bcs.n	8012f30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012f2a:	4a08      	ldr	r2, [pc, #32]	; (8012f4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	6013      	str	r3, [r2, #0]
}
 8012f30:	bf00      	nop
 8012f32:	3710      	adds	r7, #16
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	20000e5c 	.word	0x20000e5c
 8012f3c:	20000984 	.word	0x20000984
 8012f40:	20000e44 	.word	0x20000e44
 8012f44:	20000e14 	.word	0x20000e14
 8012f48:	20000e10 	.word	0x20000e10
 8012f4c:	20000e78 	.word	0x20000e78

08012f50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b08a      	sub	sp, #40	; 0x28
 8012f54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012f56:	2300      	movs	r3, #0
 8012f58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012f5a:	f000 fb0d 	bl	8013578 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012f5e:	4b1d      	ldr	r3, [pc, #116]	; (8012fd4 <xTimerCreateTimerTask+0x84>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d021      	beq.n	8012faa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012f66:	2300      	movs	r3, #0
 8012f68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012f6e:	1d3a      	adds	r2, r7, #4
 8012f70:	f107 0108 	add.w	r1, r7, #8
 8012f74:	f107 030c 	add.w	r3, r7, #12
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fd fd85 	bl	8010a88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012f7e:	6879      	ldr	r1, [r7, #4]
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	68fa      	ldr	r2, [r7, #12]
 8012f84:	9202      	str	r2, [sp, #8]
 8012f86:	9301      	str	r3, [sp, #4]
 8012f88:	2302      	movs	r3, #2
 8012f8a:	9300      	str	r3, [sp, #0]
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	460a      	mov	r2, r1
 8012f90:	4911      	ldr	r1, [pc, #68]	; (8012fd8 <xTimerCreateTimerTask+0x88>)
 8012f92:	4812      	ldr	r0, [pc, #72]	; (8012fdc <xTimerCreateTimerTask+0x8c>)
 8012f94:	f7fe ff30 	bl	8011df8 <xTaskCreateStatic>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	4b11      	ldr	r3, [pc, #68]	; (8012fe0 <xTimerCreateTimerTask+0x90>)
 8012f9c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012f9e:	4b10      	ldr	r3, [pc, #64]	; (8012fe0 <xTimerCreateTimerTask+0x90>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d001      	beq.n	8012faa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10b      	bne.n	8012fc8 <xTimerCreateTimerTask+0x78>
 8012fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb4:	b672      	cpsid	i
 8012fb6:	f383 8811 	msr	BASEPRI, r3
 8012fba:	f3bf 8f6f 	isb	sy
 8012fbe:	f3bf 8f4f 	dsb	sy
 8012fc2:	b662      	cpsie	i
 8012fc4:	613b      	str	r3, [r7, #16]
 8012fc6:	e7fe      	b.n	8012fc6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8012fc8:	697b      	ldr	r3, [r7, #20]
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3718      	adds	r7, #24
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	20000eb4 	.word	0x20000eb4
 8012fd8:	08016848 	.word	0x08016848
 8012fdc:	0801311d 	.word	0x0801311d
 8012fe0:	20000eb8 	.word	0x20000eb8

08012fe4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b08a      	sub	sp, #40	; 0x28
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
 8012ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d10b      	bne.n	8013014 <xTimerGenericCommand+0x30>
 8012ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013000:	b672      	cpsid	i
 8013002:	f383 8811 	msr	BASEPRI, r3
 8013006:	f3bf 8f6f 	isb	sy
 801300a:	f3bf 8f4f 	dsb	sy
 801300e:	b662      	cpsie	i
 8013010:	623b      	str	r3, [r7, #32]
 8013012:	e7fe      	b.n	8013012 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013014:	4b19      	ldr	r3, [pc, #100]	; (801307c <xTimerGenericCommand+0x98>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d02a      	beq.n	8013072 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	2b05      	cmp	r3, #5
 801302c:	dc18      	bgt.n	8013060 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801302e:	f7ff fdad 	bl	8012b8c <xTaskGetSchedulerState>
 8013032:	4603      	mov	r3, r0
 8013034:	2b02      	cmp	r3, #2
 8013036:	d109      	bne.n	801304c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013038:	4b10      	ldr	r3, [pc, #64]	; (801307c <xTimerGenericCommand+0x98>)
 801303a:	6818      	ldr	r0, [r3, #0]
 801303c:	f107 0110 	add.w	r1, r7, #16
 8013040:	2300      	movs	r3, #0
 8013042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013044:	f7fe f860 	bl	8011108 <xQueueGenericSend>
 8013048:	6278      	str	r0, [r7, #36]	; 0x24
 801304a:	e012      	b.n	8013072 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801304c:	4b0b      	ldr	r3, [pc, #44]	; (801307c <xTimerGenericCommand+0x98>)
 801304e:	6818      	ldr	r0, [r3, #0]
 8013050:	f107 0110 	add.w	r1, r7, #16
 8013054:	2300      	movs	r3, #0
 8013056:	2200      	movs	r2, #0
 8013058:	f7fe f856 	bl	8011108 <xQueueGenericSend>
 801305c:	6278      	str	r0, [r7, #36]	; 0x24
 801305e:	e008      	b.n	8013072 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013060:	4b06      	ldr	r3, [pc, #24]	; (801307c <xTimerGenericCommand+0x98>)
 8013062:	6818      	ldr	r0, [r3, #0]
 8013064:	f107 0110 	add.w	r1, r7, #16
 8013068:	2300      	movs	r3, #0
 801306a:	683a      	ldr	r2, [r7, #0]
 801306c:	f7fe f94e 	bl	801130c <xQueueGenericSendFromISR>
 8013070:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013074:	4618      	mov	r0, r3
 8013076:	3728      	adds	r7, #40	; 0x28
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}
 801307c:	20000eb4 	.word	0x20000eb4

08013080 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b088      	sub	sp, #32
 8013084:	af02      	add	r7, sp, #8
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801308a:	4b23      	ldr	r3, [pc, #140]	; (8013118 <prvProcessExpiredTimer+0x98>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	68db      	ldr	r3, [r3, #12]
 8013092:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	3304      	adds	r3, #4
 8013098:	4618      	mov	r0, r3
 801309a:	f7fd fd99 	bl	8010bd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130a4:	f003 0304 	and.w	r3, r3, #4
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d023      	beq.n	80130f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	699a      	ldr	r2, [r3, #24]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	18d1      	adds	r1, r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	683a      	ldr	r2, [r7, #0]
 80130b8:	6978      	ldr	r0, [r7, #20]
 80130ba:	f000 f8d3 	bl	8013264 <prvInsertTimerInActiveList>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d020      	beq.n	8013106 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80130c4:	2300      	movs	r3, #0
 80130c6:	9300      	str	r3, [sp, #0]
 80130c8:	2300      	movs	r3, #0
 80130ca:	687a      	ldr	r2, [r7, #4]
 80130cc:	2100      	movs	r1, #0
 80130ce:	6978      	ldr	r0, [r7, #20]
 80130d0:	f7ff ff88 	bl	8012fe4 <xTimerGenericCommand>
 80130d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d114      	bne.n	8013106 <prvProcessExpiredTimer+0x86>
 80130dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e0:	b672      	cpsid	i
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	b662      	cpsie	i
 80130f0:	60fb      	str	r3, [r7, #12]
 80130f2:	e7fe      	b.n	80130f2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130fa:	f023 0301 	bic.w	r3, r3, #1
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	6a1b      	ldr	r3, [r3, #32]
 801310a:	6978      	ldr	r0, [r7, #20]
 801310c:	4798      	blx	r3
}
 801310e:	bf00      	nop
 8013110:	3718      	adds	r7, #24
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop
 8013118:	20000eac 	.word	0x20000eac

0801311c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013124:	f107 0308 	add.w	r3, r7, #8
 8013128:	4618      	mov	r0, r3
 801312a:	f000 f857 	bl	80131dc <prvGetNextExpireTime>
 801312e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	4619      	mov	r1, r3
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f000 f803 	bl	8013140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801313a:	f000 f8d5 	bl	80132e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801313e:	e7f1      	b.n	8013124 <prvTimerTask+0x8>

08013140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801314a:	f7ff f919 	bl	8012380 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801314e:	f107 0308 	add.w	r3, r7, #8
 8013152:	4618      	mov	r0, r3
 8013154:	f000 f866 	bl	8013224 <prvSampleTimeNow>
 8013158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d130      	bne.n	80131c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d10a      	bne.n	801317c <prvProcessTimerOrBlockTask+0x3c>
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	429a      	cmp	r2, r3
 801316c:	d806      	bhi.n	801317c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801316e:	f7ff f915 	bl	801239c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013172:	68f9      	ldr	r1, [r7, #12]
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7ff ff83 	bl	8013080 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801317a:	e024      	b.n	80131c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d008      	beq.n	8013194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013182:	4b13      	ldr	r3, [pc, #76]	; (80131d0 <prvProcessTimerOrBlockTask+0x90>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d101      	bne.n	8013190 <prvProcessTimerOrBlockTask+0x50>
 801318c:	2301      	movs	r3, #1
 801318e:	e000      	b.n	8013192 <prvProcessTimerOrBlockTask+0x52>
 8013190:	2300      	movs	r3, #0
 8013192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013194:	4b0f      	ldr	r3, [pc, #60]	; (80131d4 <prvProcessTimerOrBlockTask+0x94>)
 8013196:	6818      	ldr	r0, [r3, #0]
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	683a      	ldr	r2, [r7, #0]
 80131a0:	4619      	mov	r1, r3
 80131a2:	f7fe fdf5 	bl	8011d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80131a6:	f7ff f8f9 	bl	801239c <xTaskResumeAll>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d10a      	bne.n	80131c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80131b0:	4b09      	ldr	r3, [pc, #36]	; (80131d8 <prvProcessTimerOrBlockTask+0x98>)
 80131b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131b6:	601a      	str	r2, [r3, #0]
 80131b8:	f3bf 8f4f 	dsb	sy
 80131bc:	f3bf 8f6f 	isb	sy
}
 80131c0:	e001      	b.n	80131c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80131c2:	f7ff f8eb 	bl	801239c <xTaskResumeAll>
}
 80131c6:	bf00      	nop
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	20000eb0 	.word	0x20000eb0
 80131d4:	20000eb4 	.word	0x20000eb4
 80131d8:	e000ed04 	.word	0xe000ed04

080131dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80131e4:	4b0e      	ldr	r3, [pc, #56]	; (8013220 <prvGetNextExpireTime+0x44>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d101      	bne.n	80131f2 <prvGetNextExpireTime+0x16>
 80131ee:	2201      	movs	r2, #1
 80131f0:	e000      	b.n	80131f4 <prvGetNextExpireTime+0x18>
 80131f2:	2200      	movs	r2, #0
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d105      	bne.n	801320c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013200:	4b07      	ldr	r3, [pc, #28]	; (8013220 <prvGetNextExpireTime+0x44>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	60fb      	str	r3, [r7, #12]
 801320a:	e001      	b.n	8013210 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801320c:	2300      	movs	r3, #0
 801320e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013210:	68fb      	ldr	r3, [r7, #12]
}
 8013212:	4618      	mov	r0, r3
 8013214:	3714      	adds	r7, #20
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr
 801321e:	bf00      	nop
 8013220:	20000eac 	.word	0x20000eac

08013224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801322c:	f7ff f954 	bl	80124d8 <xTaskGetTickCount>
 8013230:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013232:	4b0b      	ldr	r3, [pc, #44]	; (8013260 <prvSampleTimeNow+0x3c>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	429a      	cmp	r2, r3
 801323a:	d205      	bcs.n	8013248 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801323c:	f000 f936 	bl	80134ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2201      	movs	r2, #1
 8013244:	601a      	str	r2, [r3, #0]
 8013246:	e002      	b.n	801324e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2200      	movs	r2, #0
 801324c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801324e:	4a04      	ldr	r2, [pc, #16]	; (8013260 <prvSampleTimeNow+0x3c>)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013254:	68fb      	ldr	r3, [r7, #12]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3710      	adds	r7, #16
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	20000ebc 	.word	0x20000ebc

08013264 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
 8013270:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013272:	2300      	movs	r3, #0
 8013274:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	68ba      	ldr	r2, [r7, #8]
 801327a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	68fa      	ldr	r2, [r7, #12]
 8013280:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	429a      	cmp	r2, r3
 8013288:	d812      	bhi.n	80132b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	1ad2      	subs	r2, r2, r3
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	699b      	ldr	r3, [r3, #24]
 8013294:	429a      	cmp	r2, r3
 8013296:	d302      	bcc.n	801329e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013298:	2301      	movs	r3, #1
 801329a:	617b      	str	r3, [r7, #20]
 801329c:	e01b      	b.n	80132d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801329e:	4b10      	ldr	r3, [pc, #64]	; (80132e0 <prvInsertTimerInActiveList+0x7c>)
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	3304      	adds	r3, #4
 80132a6:	4619      	mov	r1, r3
 80132a8:	4610      	mov	r0, r2
 80132aa:	f7fd fc58 	bl	8010b5e <vListInsert>
 80132ae:	e012      	b.n	80132d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d206      	bcs.n	80132c6 <prvInsertTimerInActiveList+0x62>
 80132b8:	68ba      	ldr	r2, [r7, #8]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	429a      	cmp	r2, r3
 80132be:	d302      	bcc.n	80132c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80132c0:	2301      	movs	r3, #1
 80132c2:	617b      	str	r3, [r7, #20]
 80132c4:	e007      	b.n	80132d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80132c6:	4b07      	ldr	r3, [pc, #28]	; (80132e4 <prvInsertTimerInActiveList+0x80>)
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	3304      	adds	r3, #4
 80132ce:	4619      	mov	r1, r3
 80132d0:	4610      	mov	r0, r2
 80132d2:	f7fd fc44 	bl	8010b5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80132d6:	697b      	ldr	r3, [r7, #20]
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3718      	adds	r7, #24
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	20000eb0 	.word	0x20000eb0
 80132e4:	20000eac 	.word	0x20000eac

080132e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b08e      	sub	sp, #56	; 0x38
 80132ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80132ee:	e0cc      	b.n	801348a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	da19      	bge.n	801332a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80132f6:	1d3b      	adds	r3, r7, #4
 80132f8:	3304      	adds	r3, #4
 80132fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80132fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10b      	bne.n	801331a <prvProcessReceivedCommands+0x32>
 8013302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013306:	b672      	cpsid	i
 8013308:	f383 8811 	msr	BASEPRI, r3
 801330c:	f3bf 8f6f 	isb	sy
 8013310:	f3bf 8f4f 	dsb	sy
 8013314:	b662      	cpsie	i
 8013316:	61fb      	str	r3, [r7, #28]
 8013318:	e7fe      	b.n	8013318 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013320:	6850      	ldr	r0, [r2, #4]
 8013322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013324:	6892      	ldr	r2, [r2, #8]
 8013326:	4611      	mov	r1, r2
 8013328:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	f2c0 80ab 	blt.w	8013488 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013338:	695b      	ldr	r3, [r3, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d004      	beq.n	8013348 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013340:	3304      	adds	r3, #4
 8013342:	4618      	mov	r0, r3
 8013344:	f7fd fc44 	bl	8010bd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013348:	463b      	mov	r3, r7
 801334a:	4618      	mov	r0, r3
 801334c:	f7ff ff6a 	bl	8013224 <prvSampleTimeNow>
 8013350:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2b09      	cmp	r3, #9
 8013356:	f200 8098 	bhi.w	801348a <prvProcessReceivedCommands+0x1a2>
 801335a:	a201      	add	r2, pc, #4	; (adr r2, 8013360 <prvProcessReceivedCommands+0x78>)
 801335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013360:	08013389 	.word	0x08013389
 8013364:	08013389 	.word	0x08013389
 8013368:	08013389 	.word	0x08013389
 801336c:	080133ff 	.word	0x080133ff
 8013370:	08013413 	.word	0x08013413
 8013374:	0801345f 	.word	0x0801345f
 8013378:	08013389 	.word	0x08013389
 801337c:	08013389 	.word	0x08013389
 8013380:	080133ff 	.word	0x080133ff
 8013384:	08013413 	.word	0x08013413
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801338e:	f043 0301 	orr.w	r3, r3, #1
 8013392:	b2da      	uxtb	r2, r3
 8013394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801339a:	68ba      	ldr	r2, [r7, #8]
 801339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339e:	699b      	ldr	r3, [r3, #24]
 80133a0:	18d1      	adds	r1, r2, r3
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a8:	f7ff ff5c 	bl	8013264 <prvInsertTimerInActiveList>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d06b      	beq.n	801348a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	6a1b      	ldr	r3, [r3, #32]
 80133b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133c0:	f003 0304 	and.w	r3, r3, #4
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d060      	beq.n	801348a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80133c8:	68ba      	ldr	r2, [r7, #8]
 80133ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133cc:	699b      	ldr	r3, [r3, #24]
 80133ce:	441a      	add	r2, r3
 80133d0:	2300      	movs	r3, #0
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	2300      	movs	r3, #0
 80133d6:	2100      	movs	r1, #0
 80133d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133da:	f7ff fe03 	bl	8012fe4 <xTimerGenericCommand>
 80133de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80133e0:	6a3b      	ldr	r3, [r7, #32]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d151      	bne.n	801348a <prvProcessReceivedCommands+0x1a2>
 80133e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ea:	b672      	cpsid	i
 80133ec:	f383 8811 	msr	BASEPRI, r3
 80133f0:	f3bf 8f6f 	isb	sy
 80133f4:	f3bf 8f4f 	dsb	sy
 80133f8:	b662      	cpsie	i
 80133fa:	61bb      	str	r3, [r7, #24]
 80133fc:	e7fe      	b.n	80133fc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80133fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013404:	f023 0301 	bic.w	r3, r3, #1
 8013408:	b2da      	uxtb	r2, r3
 801340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013410:	e03b      	b.n	801348a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013418:	f043 0301 	orr.w	r3, r3, #1
 801341c:	b2da      	uxtb	r2, r3
 801341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013424:	68ba      	ldr	r2, [r7, #8]
 8013426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013428:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342c:	699b      	ldr	r3, [r3, #24]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d10b      	bne.n	801344a <prvProcessReceivedCommands+0x162>
 8013432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013436:	b672      	cpsid	i
 8013438:	f383 8811 	msr	BASEPRI, r3
 801343c:	f3bf 8f6f 	isb	sy
 8013440:	f3bf 8f4f 	dsb	sy
 8013444:	b662      	cpsie	i
 8013446:	617b      	str	r3, [r7, #20]
 8013448:	e7fe      	b.n	8013448 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344c:	699a      	ldr	r2, [r3, #24]
 801344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013450:	18d1      	adds	r1, r2, r3
 8013452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013458:	f7ff ff04 	bl	8013264 <prvInsertTimerInActiveList>
					break;
 801345c:	e015      	b.n	801348a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013464:	f003 0302 	and.w	r3, r3, #2
 8013468:	2b00      	cmp	r3, #0
 801346a:	d103      	bne.n	8013474 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801346c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801346e:	f000 fbb5 	bl	8013bdc <vPortFree>
 8013472:	e00a      	b.n	801348a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801347a:	f023 0301 	bic.w	r3, r3, #1
 801347e:	b2da      	uxtb	r2, r3
 8013480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013486:	e000      	b.n	801348a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013488:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801348a:	4b07      	ldr	r3, [pc, #28]	; (80134a8 <prvProcessReceivedCommands+0x1c0>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	1d39      	adds	r1, r7, #4
 8013490:	2200      	movs	r2, #0
 8013492:	4618      	mov	r0, r3
 8013494:	f7fe f868 	bl	8011568 <xQueueReceive>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	f47f af28 	bne.w	80132f0 <prvProcessReceivedCommands+0x8>
	}
}
 80134a0:	bf00      	nop
 80134a2:	3730      	adds	r7, #48	; 0x30
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	20000eb4 	.word	0x20000eb4

080134ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b088      	sub	sp, #32
 80134b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80134b2:	e049      	b.n	8013548 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80134b4:	4b2e      	ldr	r3, [pc, #184]	; (8013570 <prvSwitchTimerLists+0xc4>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134be:	4b2c      	ldr	r3, [pc, #176]	; (8013570 <prvSwitchTimerLists+0xc4>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	3304      	adds	r3, #4
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fd fb7f 	bl	8010bd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6a1b      	ldr	r3, [r3, #32]
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134e0:	f003 0304 	and.w	r3, r3, #4
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d02f      	beq.n	8013548 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	699b      	ldr	r3, [r3, #24]
 80134ec:	693a      	ldr	r2, [r7, #16]
 80134ee:	4413      	add	r3, r2
 80134f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80134f2:	68ba      	ldr	r2, [r7, #8]
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d90e      	bls.n	8013518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	68ba      	ldr	r2, [r7, #8]
 80134fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	68fa      	ldr	r2, [r7, #12]
 8013504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013506:	4b1a      	ldr	r3, [pc, #104]	; (8013570 <prvSwitchTimerLists+0xc4>)
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	3304      	adds	r3, #4
 801350e:	4619      	mov	r1, r3
 8013510:	4610      	mov	r0, r2
 8013512:	f7fd fb24 	bl	8010b5e <vListInsert>
 8013516:	e017      	b.n	8013548 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013518:	2300      	movs	r3, #0
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	2300      	movs	r3, #0
 801351e:	693a      	ldr	r2, [r7, #16]
 8013520:	2100      	movs	r1, #0
 8013522:	68f8      	ldr	r0, [r7, #12]
 8013524:	f7ff fd5e 	bl	8012fe4 <xTimerGenericCommand>
 8013528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d10b      	bne.n	8013548 <prvSwitchTimerLists+0x9c>
 8013530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013534:	b672      	cpsid	i
 8013536:	f383 8811 	msr	BASEPRI, r3
 801353a:	f3bf 8f6f 	isb	sy
 801353e:	f3bf 8f4f 	dsb	sy
 8013542:	b662      	cpsie	i
 8013544:	603b      	str	r3, [r7, #0]
 8013546:	e7fe      	b.n	8013546 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013548:	4b09      	ldr	r3, [pc, #36]	; (8013570 <prvSwitchTimerLists+0xc4>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d1b0      	bne.n	80134b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013552:	4b07      	ldr	r3, [pc, #28]	; (8013570 <prvSwitchTimerLists+0xc4>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013558:	4b06      	ldr	r3, [pc, #24]	; (8013574 <prvSwitchTimerLists+0xc8>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	4a04      	ldr	r2, [pc, #16]	; (8013570 <prvSwitchTimerLists+0xc4>)
 801355e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013560:	4a04      	ldr	r2, [pc, #16]	; (8013574 <prvSwitchTimerLists+0xc8>)
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	6013      	str	r3, [r2, #0]
}
 8013566:	bf00      	nop
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	20000eac 	.word	0x20000eac
 8013574:	20000eb0 	.word	0x20000eb0

08013578 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801357e:	f000 f943 	bl	8013808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013582:	4b15      	ldr	r3, [pc, #84]	; (80135d8 <prvCheckForValidListAndQueue+0x60>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d120      	bne.n	80135cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801358a:	4814      	ldr	r0, [pc, #80]	; (80135dc <prvCheckForValidListAndQueue+0x64>)
 801358c:	f7fd fa96 	bl	8010abc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013590:	4813      	ldr	r0, [pc, #76]	; (80135e0 <prvCheckForValidListAndQueue+0x68>)
 8013592:	f7fd fa93 	bl	8010abc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013596:	4b13      	ldr	r3, [pc, #76]	; (80135e4 <prvCheckForValidListAndQueue+0x6c>)
 8013598:	4a10      	ldr	r2, [pc, #64]	; (80135dc <prvCheckForValidListAndQueue+0x64>)
 801359a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801359c:	4b12      	ldr	r3, [pc, #72]	; (80135e8 <prvCheckForValidListAndQueue+0x70>)
 801359e:	4a10      	ldr	r2, [pc, #64]	; (80135e0 <prvCheckForValidListAndQueue+0x68>)
 80135a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80135a2:	2300      	movs	r3, #0
 80135a4:	9300      	str	r3, [sp, #0]
 80135a6:	4b11      	ldr	r3, [pc, #68]	; (80135ec <prvCheckForValidListAndQueue+0x74>)
 80135a8:	4a11      	ldr	r2, [pc, #68]	; (80135f0 <prvCheckForValidListAndQueue+0x78>)
 80135aa:	2110      	movs	r1, #16
 80135ac:	200a      	movs	r0, #10
 80135ae:	f7fd fba3 	bl	8010cf8 <xQueueGenericCreateStatic>
 80135b2:	4602      	mov	r2, r0
 80135b4:	4b08      	ldr	r3, [pc, #32]	; (80135d8 <prvCheckForValidListAndQueue+0x60>)
 80135b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80135b8:	4b07      	ldr	r3, [pc, #28]	; (80135d8 <prvCheckForValidListAndQueue+0x60>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d005      	beq.n	80135cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80135c0:	4b05      	ldr	r3, [pc, #20]	; (80135d8 <prvCheckForValidListAndQueue+0x60>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	490b      	ldr	r1, [pc, #44]	; (80135f4 <prvCheckForValidListAndQueue+0x7c>)
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7fe fb90 	bl	8011cec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80135cc:	f000 f94e 	bl	801386c <vPortExitCritical>
}
 80135d0:	bf00      	nop
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	20000eb4 	.word	0x20000eb4
 80135dc:	20000e84 	.word	0x20000e84
 80135e0:	20000e98 	.word	0x20000e98
 80135e4:	20000eac 	.word	0x20000eac
 80135e8:	20000eb0 	.word	0x20000eb0
 80135ec:	20000f60 	.word	0x20000f60
 80135f0:	20000ec0 	.word	0x20000ec0
 80135f4:	08016850 	.word	0x08016850

080135f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80135f8:	b480      	push	{r7}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	3b04      	subs	r3, #4
 8013608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	3b04      	subs	r3, #4
 8013616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	f023 0201 	bic.w	r2, r3, #1
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	3b04      	subs	r3, #4
 8013626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013628:	4a0c      	ldr	r2, [pc, #48]	; (801365c <pxPortInitialiseStack+0x64>)
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	3b14      	subs	r3, #20
 8013632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	3b04      	subs	r3, #4
 801363e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	f06f 0202 	mvn.w	r2, #2
 8013646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	3b20      	subs	r3, #32
 801364c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801364e:	68fb      	ldr	r3, [r7, #12]
}
 8013650:	4618      	mov	r0, r3
 8013652:	3714      	adds	r7, #20
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr
 801365c:	08013661 	.word	0x08013661

08013660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013660:	b480      	push	{r7}
 8013662:	b085      	sub	sp, #20
 8013664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013666:	2300      	movs	r3, #0
 8013668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801366a:	4b13      	ldr	r3, [pc, #76]	; (80136b8 <prvTaskExitError+0x58>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013672:	d00b      	beq.n	801368c <prvTaskExitError+0x2c>
 8013674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013678:	b672      	cpsid	i
 801367a:	f383 8811 	msr	BASEPRI, r3
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f3bf 8f4f 	dsb	sy
 8013686:	b662      	cpsie	i
 8013688:	60fb      	str	r3, [r7, #12]
 801368a:	e7fe      	b.n	801368a <prvTaskExitError+0x2a>
 801368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013690:	b672      	cpsid	i
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	b662      	cpsie	i
 80136a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80136a2:	bf00      	nop
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d0fc      	beq.n	80136a4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80136aa:	bf00      	nop
 80136ac:	3714      	adds	r7, #20
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr
 80136b6:	bf00      	nop
 80136b8:	2000011c 	.word	0x2000011c
 80136bc:	00000000 	.word	0x00000000

080136c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80136c0:	4b07      	ldr	r3, [pc, #28]	; (80136e0 <pxCurrentTCBConst2>)
 80136c2:	6819      	ldr	r1, [r3, #0]
 80136c4:	6808      	ldr	r0, [r1, #0]
 80136c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ca:	f380 8809 	msr	PSP, r0
 80136ce:	f3bf 8f6f 	isb	sy
 80136d2:	f04f 0000 	mov.w	r0, #0
 80136d6:	f380 8811 	msr	BASEPRI, r0
 80136da:	4770      	bx	lr
 80136dc:	f3af 8000 	nop.w

080136e0 <pxCurrentTCBConst2>:
 80136e0:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80136e4:	bf00      	nop
 80136e6:	bf00      	nop

080136e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80136e8:	4808      	ldr	r0, [pc, #32]	; (801370c <prvPortStartFirstTask+0x24>)
 80136ea:	6800      	ldr	r0, [r0, #0]
 80136ec:	6800      	ldr	r0, [r0, #0]
 80136ee:	f380 8808 	msr	MSP, r0
 80136f2:	f04f 0000 	mov.w	r0, #0
 80136f6:	f380 8814 	msr	CONTROL, r0
 80136fa:	b662      	cpsie	i
 80136fc:	b661      	cpsie	f
 80136fe:	f3bf 8f4f 	dsb	sy
 8013702:	f3bf 8f6f 	isb	sy
 8013706:	df00      	svc	0
 8013708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801370a:	bf00      	nop
 801370c:	e000ed08 	.word	0xe000ed08

08013710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013716:	4b36      	ldr	r3, [pc, #216]	; (80137f0 <xPortStartScheduler+0xe0>)
 8013718:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	b2db      	uxtb	r3, r3
 8013720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	22ff      	movs	r2, #255	; 0xff
 8013726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	b2db      	uxtb	r3, r3
 801372e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013730:	78fb      	ldrb	r3, [r7, #3]
 8013732:	b2db      	uxtb	r3, r3
 8013734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013738:	b2da      	uxtb	r2, r3
 801373a:	4b2e      	ldr	r3, [pc, #184]	; (80137f4 <xPortStartScheduler+0xe4>)
 801373c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801373e:	4b2e      	ldr	r3, [pc, #184]	; (80137f8 <xPortStartScheduler+0xe8>)
 8013740:	2207      	movs	r2, #7
 8013742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013744:	e009      	b.n	801375a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013746:	4b2c      	ldr	r3, [pc, #176]	; (80137f8 <xPortStartScheduler+0xe8>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	3b01      	subs	r3, #1
 801374c:	4a2a      	ldr	r2, [pc, #168]	; (80137f8 <xPortStartScheduler+0xe8>)
 801374e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013750:	78fb      	ldrb	r3, [r7, #3]
 8013752:	b2db      	uxtb	r3, r3
 8013754:	005b      	lsls	r3, r3, #1
 8013756:	b2db      	uxtb	r3, r3
 8013758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801375a:	78fb      	ldrb	r3, [r7, #3]
 801375c:	b2db      	uxtb	r3, r3
 801375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013762:	2b80      	cmp	r3, #128	; 0x80
 8013764:	d0ef      	beq.n	8013746 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013766:	4b24      	ldr	r3, [pc, #144]	; (80137f8 <xPortStartScheduler+0xe8>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f1c3 0307 	rsb	r3, r3, #7
 801376e:	2b04      	cmp	r3, #4
 8013770:	d00b      	beq.n	801378a <xPortStartScheduler+0x7a>
 8013772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013776:	b672      	cpsid	i
 8013778:	f383 8811 	msr	BASEPRI, r3
 801377c:	f3bf 8f6f 	isb	sy
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	b662      	cpsie	i
 8013786:	60bb      	str	r3, [r7, #8]
 8013788:	e7fe      	b.n	8013788 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801378a:	4b1b      	ldr	r3, [pc, #108]	; (80137f8 <xPortStartScheduler+0xe8>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	021b      	lsls	r3, r3, #8
 8013790:	4a19      	ldr	r2, [pc, #100]	; (80137f8 <xPortStartScheduler+0xe8>)
 8013792:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013794:	4b18      	ldr	r3, [pc, #96]	; (80137f8 <xPortStartScheduler+0xe8>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801379c:	4a16      	ldr	r2, [pc, #88]	; (80137f8 <xPortStartScheduler+0xe8>)
 801379e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	b2da      	uxtb	r2, r3
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80137a8:	4b14      	ldr	r3, [pc, #80]	; (80137fc <xPortStartScheduler+0xec>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4a13      	ldr	r2, [pc, #76]	; (80137fc <xPortStartScheduler+0xec>)
 80137ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80137b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80137b4:	4b11      	ldr	r3, [pc, #68]	; (80137fc <xPortStartScheduler+0xec>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	4a10      	ldr	r2, [pc, #64]	; (80137fc <xPortStartScheduler+0xec>)
 80137ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80137be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80137c0:	f000 f8d4 	bl	801396c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80137c4:	4b0e      	ldr	r3, [pc, #56]	; (8013800 <xPortStartScheduler+0xf0>)
 80137c6:	2200      	movs	r2, #0
 80137c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80137ca:	f000 f8f3 	bl	80139b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80137ce:	4b0d      	ldr	r3, [pc, #52]	; (8013804 <xPortStartScheduler+0xf4>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	4a0c      	ldr	r2, [pc, #48]	; (8013804 <xPortStartScheduler+0xf4>)
 80137d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80137d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80137da:	f7ff ff85 	bl	80136e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80137de:	f7fe ff57 	bl	8012690 <vTaskSwitchContext>
	prvTaskExitError();
 80137e2:	f7ff ff3d 	bl	8013660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80137e6:	2300      	movs	r3, #0
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3710      	adds	r7, #16
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	e000e400 	.word	0xe000e400
 80137f4:	20000fb0 	.word	0x20000fb0
 80137f8:	20000fb4 	.word	0x20000fb4
 80137fc:	e000ed20 	.word	0xe000ed20
 8013800:	2000011c 	.word	0x2000011c
 8013804:	e000ef34 	.word	0xe000ef34

08013808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
 801380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013812:	b672      	cpsid	i
 8013814:	f383 8811 	msr	BASEPRI, r3
 8013818:	f3bf 8f6f 	isb	sy
 801381c:	f3bf 8f4f 	dsb	sy
 8013820:	b662      	cpsie	i
 8013822:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013824:	4b0f      	ldr	r3, [pc, #60]	; (8013864 <vPortEnterCritical+0x5c>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	3301      	adds	r3, #1
 801382a:	4a0e      	ldr	r2, [pc, #56]	; (8013864 <vPortEnterCritical+0x5c>)
 801382c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801382e:	4b0d      	ldr	r3, [pc, #52]	; (8013864 <vPortEnterCritical+0x5c>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2b01      	cmp	r3, #1
 8013834:	d110      	bne.n	8013858 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013836:	4b0c      	ldr	r3, [pc, #48]	; (8013868 <vPortEnterCritical+0x60>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	b2db      	uxtb	r3, r3
 801383c:	2b00      	cmp	r3, #0
 801383e:	d00b      	beq.n	8013858 <vPortEnterCritical+0x50>
 8013840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013844:	b672      	cpsid	i
 8013846:	f383 8811 	msr	BASEPRI, r3
 801384a:	f3bf 8f6f 	isb	sy
 801384e:	f3bf 8f4f 	dsb	sy
 8013852:	b662      	cpsie	i
 8013854:	603b      	str	r3, [r7, #0]
 8013856:	e7fe      	b.n	8013856 <vPortEnterCritical+0x4e>
	}
}
 8013858:	bf00      	nop
 801385a:	370c      	adds	r7, #12
 801385c:	46bd      	mov	sp, r7
 801385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013862:	4770      	bx	lr
 8013864:	2000011c 	.word	0x2000011c
 8013868:	e000ed04 	.word	0xe000ed04

0801386c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801386c:	b480      	push	{r7}
 801386e:	b083      	sub	sp, #12
 8013870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013872:	4b12      	ldr	r3, [pc, #72]	; (80138bc <vPortExitCritical+0x50>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d10b      	bne.n	8013892 <vPortExitCritical+0x26>
 801387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801387e:	b672      	cpsid	i
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	b662      	cpsie	i
 801388e:	607b      	str	r3, [r7, #4]
 8013890:	e7fe      	b.n	8013890 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8013892:	4b0a      	ldr	r3, [pc, #40]	; (80138bc <vPortExitCritical+0x50>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	3b01      	subs	r3, #1
 8013898:	4a08      	ldr	r2, [pc, #32]	; (80138bc <vPortExitCritical+0x50>)
 801389a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801389c:	4b07      	ldr	r3, [pc, #28]	; (80138bc <vPortExitCritical+0x50>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d104      	bne.n	80138ae <vPortExitCritical+0x42>
 80138a4:	2300      	movs	r3, #0
 80138a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80138ae:	bf00      	nop
 80138b0:	370c      	adds	r7, #12
 80138b2:	46bd      	mov	sp, r7
 80138b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b8:	4770      	bx	lr
 80138ba:	bf00      	nop
 80138bc:	2000011c 	.word	0x2000011c

080138c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80138c0:	f3ef 8009 	mrs	r0, PSP
 80138c4:	f3bf 8f6f 	isb	sy
 80138c8:	4b15      	ldr	r3, [pc, #84]	; (8013920 <pxCurrentTCBConst>)
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	f01e 0f10 	tst.w	lr, #16
 80138d0:	bf08      	it	eq
 80138d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80138d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138da:	6010      	str	r0, [r2, #0]
 80138dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80138e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80138e4:	b672      	cpsid	i
 80138e6:	f380 8811 	msr	BASEPRI, r0
 80138ea:	f3bf 8f4f 	dsb	sy
 80138ee:	f3bf 8f6f 	isb	sy
 80138f2:	b662      	cpsie	i
 80138f4:	f7fe fecc 	bl	8012690 <vTaskSwitchContext>
 80138f8:	f04f 0000 	mov.w	r0, #0
 80138fc:	f380 8811 	msr	BASEPRI, r0
 8013900:	bc09      	pop	{r0, r3}
 8013902:	6819      	ldr	r1, [r3, #0]
 8013904:	6808      	ldr	r0, [r1, #0]
 8013906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801390a:	f01e 0f10 	tst.w	lr, #16
 801390e:	bf08      	it	eq
 8013910:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013914:	f380 8809 	msr	PSP, r0
 8013918:	f3bf 8f6f 	isb	sy
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop

08013920 <pxCurrentTCBConst>:
 8013920:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013924:	bf00      	nop
 8013926:	bf00      	nop

08013928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
	__asm volatile
 801392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013932:	b672      	cpsid	i
 8013934:	f383 8811 	msr	BASEPRI, r3
 8013938:	f3bf 8f6f 	isb	sy
 801393c:	f3bf 8f4f 	dsb	sy
 8013940:	b662      	cpsie	i
 8013942:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013944:	f7fe fdea 	bl	801251c <xTaskIncrementTick>
 8013948:	4603      	mov	r3, r0
 801394a:	2b00      	cmp	r3, #0
 801394c:	d003      	beq.n	8013956 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801394e:	4b06      	ldr	r3, [pc, #24]	; (8013968 <SysTick_Handler+0x40>)
 8013950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013954:	601a      	str	r2, [r3, #0]
 8013956:	2300      	movs	r3, #0
 8013958:	603b      	str	r3, [r7, #0]
	__asm volatile
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013960:	bf00      	nop
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	e000ed04 	.word	0xe000ed04

0801396c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801396c:	b480      	push	{r7}
 801396e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013970:	4b0b      	ldr	r3, [pc, #44]	; (80139a0 <vPortSetupTimerInterrupt+0x34>)
 8013972:	2200      	movs	r2, #0
 8013974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013976:	4b0b      	ldr	r3, [pc, #44]	; (80139a4 <vPortSetupTimerInterrupt+0x38>)
 8013978:	2200      	movs	r2, #0
 801397a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801397c:	4b0a      	ldr	r3, [pc, #40]	; (80139a8 <vPortSetupTimerInterrupt+0x3c>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4a0a      	ldr	r2, [pc, #40]	; (80139ac <vPortSetupTimerInterrupt+0x40>)
 8013982:	fba2 2303 	umull	r2, r3, r2, r3
 8013986:	099b      	lsrs	r3, r3, #6
 8013988:	4a09      	ldr	r2, [pc, #36]	; (80139b0 <vPortSetupTimerInterrupt+0x44>)
 801398a:	3b01      	subs	r3, #1
 801398c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801398e:	4b04      	ldr	r3, [pc, #16]	; (80139a0 <vPortSetupTimerInterrupt+0x34>)
 8013990:	2207      	movs	r2, #7
 8013992:	601a      	str	r2, [r3, #0]
}
 8013994:	bf00      	nop
 8013996:	46bd      	mov	sp, r7
 8013998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop
 80139a0:	e000e010 	.word	0xe000e010
 80139a4:	e000e018 	.word	0xe000e018
 80139a8:	20000000 	.word	0x20000000
 80139ac:	10624dd3 	.word	0x10624dd3
 80139b0:	e000e014 	.word	0xe000e014

080139b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80139b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80139c4 <vPortEnableVFP+0x10>
 80139b8:	6801      	ldr	r1, [r0, #0]
 80139ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80139be:	6001      	str	r1, [r0, #0]
 80139c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80139c2:	bf00      	nop
 80139c4:	e000ed88 	.word	0xe000ed88

080139c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80139ce:	f3ef 8305 	mrs	r3, IPSR
 80139d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	2b0f      	cmp	r3, #15
 80139d8:	d915      	bls.n	8013a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80139da:	4a18      	ldr	r2, [pc, #96]	; (8013a3c <vPortValidateInterruptPriority+0x74>)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	4413      	add	r3, r2
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80139e4:	4b16      	ldr	r3, [pc, #88]	; (8013a40 <vPortValidateInterruptPriority+0x78>)
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	7afa      	ldrb	r2, [r7, #11]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d20b      	bcs.n	8013a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80139ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f2:	b672      	cpsid	i
 80139f4:	f383 8811 	msr	BASEPRI, r3
 80139f8:	f3bf 8f6f 	isb	sy
 80139fc:	f3bf 8f4f 	dsb	sy
 8013a00:	b662      	cpsie	i
 8013a02:	607b      	str	r3, [r7, #4]
 8013a04:	e7fe      	b.n	8013a04 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013a06:	4b0f      	ldr	r3, [pc, #60]	; (8013a44 <vPortValidateInterruptPriority+0x7c>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013a0e:	4b0e      	ldr	r3, [pc, #56]	; (8013a48 <vPortValidateInterruptPriority+0x80>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d90b      	bls.n	8013a2e <vPortValidateInterruptPriority+0x66>
 8013a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1a:	b672      	cpsid	i
 8013a1c:	f383 8811 	msr	BASEPRI, r3
 8013a20:	f3bf 8f6f 	isb	sy
 8013a24:	f3bf 8f4f 	dsb	sy
 8013a28:	b662      	cpsie	i
 8013a2a:	603b      	str	r3, [r7, #0]
 8013a2c:	e7fe      	b.n	8013a2c <vPortValidateInterruptPriority+0x64>
	}
 8013a2e:	bf00      	nop
 8013a30:	3714      	adds	r7, #20
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr
 8013a3a:	bf00      	nop
 8013a3c:	e000e3f0 	.word	0xe000e3f0
 8013a40:	20000fb0 	.word	0x20000fb0
 8013a44:	e000ed0c 	.word	0xe000ed0c
 8013a48:	20000fb4 	.word	0x20000fb4

08013a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b08a      	sub	sp, #40	; 0x28
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013a54:	2300      	movs	r3, #0
 8013a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013a58:	f7fe fc92 	bl	8012380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013a5c:	4b5a      	ldr	r3, [pc, #360]	; (8013bc8 <pvPortMalloc+0x17c>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d101      	bne.n	8013a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013a64:	f000 f916 	bl	8013c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013a68:	4b58      	ldr	r3, [pc, #352]	; (8013bcc <pvPortMalloc+0x180>)
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4013      	ands	r3, r2
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f040 8090 	bne.w	8013b96 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d01e      	beq.n	8013aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013a7c:	2208      	movs	r2, #8
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	4413      	add	r3, r2
 8013a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f003 0307 	and.w	r3, r3, #7
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d015      	beq.n	8013aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f023 0307 	bic.w	r3, r3, #7
 8013a94:	3308      	adds	r3, #8
 8013a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f003 0307 	and.w	r3, r3, #7
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d00b      	beq.n	8013aba <pvPortMalloc+0x6e>
 8013aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa6:	b672      	cpsid	i
 8013aa8:	f383 8811 	msr	BASEPRI, r3
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f3bf 8f4f 	dsb	sy
 8013ab4:	b662      	cpsie	i
 8013ab6:	617b      	str	r3, [r7, #20]
 8013ab8:	e7fe      	b.n	8013ab8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d06a      	beq.n	8013b96 <pvPortMalloc+0x14a>
 8013ac0:	4b43      	ldr	r3, [pc, #268]	; (8013bd0 <pvPortMalloc+0x184>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d865      	bhi.n	8013b96 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013aca:	4b42      	ldr	r3, [pc, #264]	; (8013bd4 <pvPortMalloc+0x188>)
 8013acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013ace:	4b41      	ldr	r3, [pc, #260]	; (8013bd4 <pvPortMalloc+0x188>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ad4:	e004      	b.n	8013ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d903      	bls.n	8013af2 <pvPortMalloc+0xa6>
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d1f1      	bne.n	8013ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013af2:	4b35      	ldr	r3, [pc, #212]	; (8013bc8 <pvPortMalloc+0x17c>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d04c      	beq.n	8013b96 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013afc:	6a3b      	ldr	r3, [r7, #32]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2208      	movs	r2, #8
 8013b02:	4413      	add	r3, r2
 8013b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	6a3b      	ldr	r3, [r7, #32]
 8013b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b10:	685a      	ldr	r2, [r3, #4]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	1ad2      	subs	r2, r2, r3
 8013b16:	2308      	movs	r3, #8
 8013b18:	005b      	lsls	r3, r3, #1
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d920      	bls.n	8013b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4413      	add	r3, r2
 8013b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	f003 0307 	and.w	r3, r3, #7
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d00b      	beq.n	8013b48 <pvPortMalloc+0xfc>
 8013b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b34:	b672      	cpsid	i
 8013b36:	f383 8811 	msr	BASEPRI, r3
 8013b3a:	f3bf 8f6f 	isb	sy
 8013b3e:	f3bf 8f4f 	dsb	sy
 8013b42:	b662      	cpsie	i
 8013b44:	613b      	str	r3, [r7, #16]
 8013b46:	e7fe      	b.n	8013b46 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4a:	685a      	ldr	r2, [r3, #4]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	1ad2      	subs	r2, r2, r3
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013b5a:	69b8      	ldr	r0, [r7, #24]
 8013b5c:	f000 f8fc 	bl	8013d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013b60:	4b1b      	ldr	r3, [pc, #108]	; (8013bd0 <pvPortMalloc+0x184>)
 8013b62:	681a      	ldr	r2, [r3, #0]
 8013b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	1ad3      	subs	r3, r2, r3
 8013b6a:	4a19      	ldr	r2, [pc, #100]	; (8013bd0 <pvPortMalloc+0x184>)
 8013b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013b6e:	4b18      	ldr	r3, [pc, #96]	; (8013bd0 <pvPortMalloc+0x184>)
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	4b19      	ldr	r3, [pc, #100]	; (8013bd8 <pvPortMalloc+0x18c>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d203      	bcs.n	8013b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013b7a:	4b15      	ldr	r3, [pc, #84]	; (8013bd0 <pvPortMalloc+0x184>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4a16      	ldr	r2, [pc, #88]	; (8013bd8 <pvPortMalloc+0x18c>)
 8013b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b84:	685a      	ldr	r2, [r3, #4]
 8013b86:	4b11      	ldr	r3, [pc, #68]	; (8013bcc <pvPortMalloc+0x180>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	431a      	orrs	r2, r3
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b92:	2200      	movs	r2, #0
 8013b94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013b96:	f7fe fc01 	bl	801239c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	f003 0307 	and.w	r3, r3, #7
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d00b      	beq.n	8013bbc <pvPortMalloc+0x170>
 8013ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba8:	b672      	cpsid	i
 8013baa:	f383 8811 	msr	BASEPRI, r3
 8013bae:	f3bf 8f6f 	isb	sy
 8013bb2:	f3bf 8f4f 	dsb	sy
 8013bb6:	b662      	cpsie	i
 8013bb8:	60fb      	str	r3, [r7, #12]
 8013bba:	e7fe      	b.n	8013bba <pvPortMalloc+0x16e>
	return pvReturn;
 8013bbc:	69fb      	ldr	r3, [r7, #28]
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3728      	adds	r7, #40	; 0x28
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	200087c0 	.word	0x200087c0
 8013bcc:	200087cc 	.word	0x200087cc
 8013bd0:	200087c4 	.word	0x200087c4
 8013bd4:	200087b8 	.word	0x200087b8
 8013bd8:	200087c8 	.word	0x200087c8

08013bdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b086      	sub	sp, #24
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d04a      	beq.n	8013c84 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013bee:	2308      	movs	r3, #8
 8013bf0:	425b      	negs	r3, r3
 8013bf2:	697a      	ldr	r2, [r7, #20]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	685a      	ldr	r2, [r3, #4]
 8013c00:	4b22      	ldr	r3, [pc, #136]	; (8013c8c <vPortFree+0xb0>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	4013      	ands	r3, r2
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d10b      	bne.n	8013c22 <vPortFree+0x46>
 8013c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0e:	b672      	cpsid	i
 8013c10:	f383 8811 	msr	BASEPRI, r3
 8013c14:	f3bf 8f6f 	isb	sy
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	b662      	cpsie	i
 8013c1e:	60fb      	str	r3, [r7, #12]
 8013c20:	e7fe      	b.n	8013c20 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d00b      	beq.n	8013c42 <vPortFree+0x66>
 8013c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c2e:	b672      	cpsid	i
 8013c30:	f383 8811 	msr	BASEPRI, r3
 8013c34:	f3bf 8f6f 	isb	sy
 8013c38:	f3bf 8f4f 	dsb	sy
 8013c3c:	b662      	cpsie	i
 8013c3e:	60bb      	str	r3, [r7, #8]
 8013c40:	e7fe      	b.n	8013c40 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013c42:	693b      	ldr	r3, [r7, #16]
 8013c44:	685a      	ldr	r2, [r3, #4]
 8013c46:	4b11      	ldr	r3, [pc, #68]	; (8013c8c <vPortFree+0xb0>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	4013      	ands	r3, r2
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d019      	beq.n	8013c84 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d115      	bne.n	8013c84 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	685a      	ldr	r2, [r3, #4]
 8013c5c:	4b0b      	ldr	r3, [pc, #44]	; (8013c8c <vPortFree+0xb0>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	43db      	mvns	r3, r3
 8013c62:	401a      	ands	r2, r3
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013c68:	f7fe fb8a 	bl	8012380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	685a      	ldr	r2, [r3, #4]
 8013c70:	4b07      	ldr	r3, [pc, #28]	; (8013c90 <vPortFree+0xb4>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	4413      	add	r3, r2
 8013c76:	4a06      	ldr	r2, [pc, #24]	; (8013c90 <vPortFree+0xb4>)
 8013c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013c7a:	6938      	ldr	r0, [r7, #16]
 8013c7c:	f000 f86c 	bl	8013d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013c80:	f7fe fb8c 	bl	801239c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013c84:	bf00      	nop
 8013c86:	3718      	adds	r7, #24
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	200087cc 	.word	0x200087cc
 8013c90:	200087c4 	.word	0x200087c4

08013c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013c94:	b480      	push	{r7}
 8013c96:	b085      	sub	sp, #20
 8013c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013c9a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8013c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013ca0:	4b27      	ldr	r3, [pc, #156]	; (8013d40 <prvHeapInit+0xac>)
 8013ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f003 0307 	and.w	r3, r3, #7
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d00c      	beq.n	8013cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	3307      	adds	r3, #7
 8013cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f023 0307 	bic.w	r3, r3, #7
 8013cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	1ad3      	subs	r3, r2, r3
 8013cc2:	4a1f      	ldr	r2, [pc, #124]	; (8013d40 <prvHeapInit+0xac>)
 8013cc4:	4413      	add	r3, r2
 8013cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ccc:	4a1d      	ldr	r2, [pc, #116]	; (8013d44 <prvHeapInit+0xb0>)
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013cd2:	4b1c      	ldr	r3, [pc, #112]	; (8013d44 <prvHeapInit+0xb0>)
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	68ba      	ldr	r2, [r7, #8]
 8013cdc:	4413      	add	r3, r2
 8013cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013ce0:	2208      	movs	r2, #8
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	1a9b      	subs	r3, r3, r2
 8013ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f023 0307 	bic.w	r3, r3, #7
 8013cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	4a15      	ldr	r2, [pc, #84]	; (8013d48 <prvHeapInit+0xb4>)
 8013cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013cf6:	4b14      	ldr	r3, [pc, #80]	; (8013d48 <prvHeapInit+0xb4>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013cfe:	4b12      	ldr	r3, [pc, #72]	; (8013d48 <prvHeapInit+0xb4>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	2200      	movs	r2, #0
 8013d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	1ad2      	subs	r2, r2, r3
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013d14:	4b0c      	ldr	r3, [pc, #48]	; (8013d48 <prvHeapInit+0xb4>)
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	4a0a      	ldr	r2, [pc, #40]	; (8013d4c <prvHeapInit+0xb8>)
 8013d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	4a09      	ldr	r2, [pc, #36]	; (8013d50 <prvHeapInit+0xbc>)
 8013d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013d2c:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <prvHeapInit+0xc0>)
 8013d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013d32:	601a      	str	r2, [r3, #0]
}
 8013d34:	bf00      	nop
 8013d36:	3714      	adds	r7, #20
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr
 8013d40:	20000fb8 	.word	0x20000fb8
 8013d44:	200087b8 	.word	0x200087b8
 8013d48:	200087c0 	.word	0x200087c0
 8013d4c:	200087c8 	.word	0x200087c8
 8013d50:	200087c4 	.word	0x200087c4
 8013d54:	200087cc 	.word	0x200087cc

08013d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013d60:	4b28      	ldr	r3, [pc, #160]	; (8013e04 <prvInsertBlockIntoFreeList+0xac>)
 8013d62:	60fb      	str	r3, [r7, #12]
 8013d64:	e002      	b.n	8013d6c <prvInsertBlockIntoFreeList+0x14>
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	60fb      	str	r3, [r7, #12]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d8f7      	bhi.n	8013d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	68ba      	ldr	r2, [r7, #8]
 8013d80:	4413      	add	r3, r2
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d108      	bne.n	8013d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	685a      	ldr	r2, [r3, #4]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	441a      	add	r2, r3
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	441a      	add	r2, r3
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d118      	bne.n	8013de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	4b15      	ldr	r3, [pc, #84]	; (8013e08 <prvInsertBlockIntoFreeList+0xb0>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d00d      	beq.n	8013dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	685a      	ldr	r2, [r3, #4]
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	685b      	ldr	r3, [r3, #4]
 8013dc4:	441a      	add	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	681a      	ldr	r2, [r3, #0]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	601a      	str	r2, [r3, #0]
 8013dd4:	e008      	b.n	8013de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013dd6:	4b0c      	ldr	r3, [pc, #48]	; (8013e08 <prvInsertBlockIntoFreeList+0xb0>)
 8013dd8:	681a      	ldr	r2, [r3, #0]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	601a      	str	r2, [r3, #0]
 8013dde:	e003      	b.n	8013de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013de8:	68fa      	ldr	r2, [r7, #12]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d002      	beq.n	8013df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013df6:	bf00      	nop
 8013df8:	3714      	adds	r7, #20
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e00:	4770      	bx	lr
 8013e02:	bf00      	nop
 8013e04:	200087b8 	.word	0x200087b8
 8013e08:	200087c0 	.word	0x200087c0

08013e0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013e10:	2200      	movs	r2, #0
 8013e12:	4912      	ldr	r1, [pc, #72]	; (8013e5c <MX_USB_DEVICE_Init+0x50>)
 8013e14:	4812      	ldr	r0, [pc, #72]	; (8013e60 <MX_USB_DEVICE_Init+0x54>)
 8013e16:	f7f7 ff77 	bl	800bd08 <USBD_Init>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d001      	beq.n	8013e24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013e20:	f7ed fb60 	bl	80014e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013e24:	490f      	ldr	r1, [pc, #60]	; (8013e64 <MX_USB_DEVICE_Init+0x58>)
 8013e26:	480e      	ldr	r0, [pc, #56]	; (8013e60 <MX_USB_DEVICE_Init+0x54>)
 8013e28:	f7f7 ffa4 	bl	800bd74 <USBD_RegisterClass>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d001      	beq.n	8013e36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013e32:	f7ed fb57 	bl	80014e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013e36:	490c      	ldr	r1, [pc, #48]	; (8013e68 <MX_USB_DEVICE_Init+0x5c>)
 8013e38:	4809      	ldr	r0, [pc, #36]	; (8013e60 <MX_USB_DEVICE_Init+0x54>)
 8013e3a:	f7f7 fec9 	bl	800bbd0 <USBD_CDC_RegisterInterface>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d001      	beq.n	8013e48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013e44:	f7ed fb4e 	bl	80014e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013e48:	4805      	ldr	r0, [pc, #20]	; (8013e60 <MX_USB_DEVICE_Init+0x54>)
 8013e4a:	f7f7 ffb4 	bl	800bdb6 <USBD_Start>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d001      	beq.n	8013e58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013e54:	f7ed fb46 	bl	80014e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013e58:	bf00      	nop
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	20000134 	.word	0x20000134
 8013e60:	20011600 	.word	0x20011600
 8013e64:	20000018 	.word	0x20000018
 8013e68:	20000120 	.word	0x20000120

08013e6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013e70:	2200      	movs	r2, #0
 8013e72:	4905      	ldr	r1, [pc, #20]	; (8013e88 <CDC_Init_FS+0x1c>)
 8013e74:	4805      	ldr	r0, [pc, #20]	; (8013e8c <CDC_Init_FS+0x20>)
 8013e76:	f7f7 fec0 	bl	800bbfa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013e7a:	4905      	ldr	r1, [pc, #20]	; (8013e90 <CDC_Init_FS+0x24>)
 8013e7c:	4803      	ldr	r0, [pc, #12]	; (8013e8c <CDC_Init_FS+0x20>)
 8013e7e:	f7f7 fed5 	bl	800bc2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013e82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	200120d0 	.word	0x200120d0
 8013e8c:	20011600 	.word	0x20011600
 8013e90:	200118d0 	.word	0x200118d0

08013e94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013e94:	b480      	push	{r7}
 8013e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013e98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr

08013ea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013ea4:	b480      	push	{r7}
 8013ea6:	b083      	sub	sp, #12
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	4603      	mov	r3, r0
 8013eac:	6039      	str	r1, [r7, #0]
 8013eae:	71fb      	strb	r3, [r7, #7]
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013eb4:	79fb      	ldrb	r3, [r7, #7]
 8013eb6:	2b23      	cmp	r3, #35	; 0x23
 8013eb8:	d84a      	bhi.n	8013f50 <CDC_Control_FS+0xac>
 8013eba:	a201      	add	r2, pc, #4	; (adr r2, 8013ec0 <CDC_Control_FS+0x1c>)
 8013ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ec0:	08013f51 	.word	0x08013f51
 8013ec4:	08013f51 	.word	0x08013f51
 8013ec8:	08013f51 	.word	0x08013f51
 8013ecc:	08013f51 	.word	0x08013f51
 8013ed0:	08013f51 	.word	0x08013f51
 8013ed4:	08013f51 	.word	0x08013f51
 8013ed8:	08013f51 	.word	0x08013f51
 8013edc:	08013f51 	.word	0x08013f51
 8013ee0:	08013f51 	.word	0x08013f51
 8013ee4:	08013f51 	.word	0x08013f51
 8013ee8:	08013f51 	.word	0x08013f51
 8013eec:	08013f51 	.word	0x08013f51
 8013ef0:	08013f51 	.word	0x08013f51
 8013ef4:	08013f51 	.word	0x08013f51
 8013ef8:	08013f51 	.word	0x08013f51
 8013efc:	08013f51 	.word	0x08013f51
 8013f00:	08013f51 	.word	0x08013f51
 8013f04:	08013f51 	.word	0x08013f51
 8013f08:	08013f51 	.word	0x08013f51
 8013f0c:	08013f51 	.word	0x08013f51
 8013f10:	08013f51 	.word	0x08013f51
 8013f14:	08013f51 	.word	0x08013f51
 8013f18:	08013f51 	.word	0x08013f51
 8013f1c:	08013f51 	.word	0x08013f51
 8013f20:	08013f51 	.word	0x08013f51
 8013f24:	08013f51 	.word	0x08013f51
 8013f28:	08013f51 	.word	0x08013f51
 8013f2c:	08013f51 	.word	0x08013f51
 8013f30:	08013f51 	.word	0x08013f51
 8013f34:	08013f51 	.word	0x08013f51
 8013f38:	08013f51 	.word	0x08013f51
 8013f3c:	08013f51 	.word	0x08013f51
 8013f40:	08013f51 	.word	0x08013f51
 8013f44:	08013f51 	.word	0x08013f51
 8013f48:	08013f51 	.word	0x08013f51
 8013f4c:	08013f51 	.word	0x08013f51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013f50:	bf00      	nop
  }

  return (USBD_OK);
 8013f52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	370c      	adds	r7, #12
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr

08013f60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013f6a:	6879      	ldr	r1, [r7, #4]
 8013f6c:	4805      	ldr	r0, [pc, #20]	; (8013f84 <CDC_Receive_FS+0x24>)
 8013f6e:	f7f7 fe5d 	bl	800bc2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013f72:	4804      	ldr	r0, [pc, #16]	; (8013f84 <CDC_Receive_FS+0x24>)
 8013f74:	f7f7 fe9e 	bl	800bcb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013f78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	20011600 	.word	0x20011600

08013f88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	460b      	mov	r3, r1
 8013f92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013f94:	2300      	movs	r3, #0
 8013f96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013f98:	4b0d      	ldr	r3, [pc, #52]	; (8013fd0 <CDC_Transmit_FS+0x48>)
 8013f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d001      	beq.n	8013fae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013faa:	2301      	movs	r3, #1
 8013fac:	e00b      	b.n	8013fc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013fae:	887b      	ldrh	r3, [r7, #2]
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	6879      	ldr	r1, [r7, #4]
 8013fb4:	4806      	ldr	r0, [pc, #24]	; (8013fd0 <CDC_Transmit_FS+0x48>)
 8013fb6:	f7f7 fe20 	bl	800bbfa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013fba:	4805      	ldr	r0, [pc, #20]	; (8013fd0 <CDC_Transmit_FS+0x48>)
 8013fbc:	f7f7 fe4a 	bl	800bc54 <USBD_CDC_TransmitPacket>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	20011600 	.word	0x20011600

08013fd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013fd4:	b480      	push	{r7}
 8013fd6:	b087      	sub	sp, #28
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	60f8      	str	r0, [r7, #12]
 8013fdc:	60b9      	str	r1, [r7, #8]
 8013fde:	4613      	mov	r3, r2
 8013fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	371c      	adds	r7, #28
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr
	...

08013ff8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	4603      	mov	r3, r0
 8014000:	6039      	str	r1, [r7, #0]
 8014002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	2212      	movs	r2, #18
 8014008:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801400a:	4b03      	ldr	r3, [pc, #12]	; (8014018 <USBD_FS_DeviceDescriptor+0x20>)
}
 801400c:	4618      	mov	r0, r3
 801400e:	370c      	adds	r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr
 8014018:	20000154 	.word	0x20000154

0801401c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801401c:	b480      	push	{r7}
 801401e:	b083      	sub	sp, #12
 8014020:	af00      	add	r7, sp, #0
 8014022:	4603      	mov	r3, r0
 8014024:	6039      	str	r1, [r7, #0]
 8014026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	2204      	movs	r2, #4
 801402c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801402e:	4b03      	ldr	r3, [pc, #12]	; (801403c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014030:	4618      	mov	r0, r3
 8014032:	370c      	adds	r7, #12
 8014034:	46bd      	mov	sp, r7
 8014036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403a:	4770      	bx	lr
 801403c:	20000174 	.word	0x20000174

08014040 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	4603      	mov	r3, r0
 8014048:	6039      	str	r1, [r7, #0]
 801404a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801404c:	79fb      	ldrb	r3, [r7, #7]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d105      	bne.n	801405e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	4907      	ldr	r1, [pc, #28]	; (8014074 <USBD_FS_ProductStrDescriptor+0x34>)
 8014056:	4808      	ldr	r0, [pc, #32]	; (8014078 <USBD_FS_ProductStrDescriptor+0x38>)
 8014058:	f7f8 fea5 	bl	800cda6 <USBD_GetString>
 801405c:	e004      	b.n	8014068 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	4904      	ldr	r1, [pc, #16]	; (8014074 <USBD_FS_ProductStrDescriptor+0x34>)
 8014062:	4805      	ldr	r0, [pc, #20]	; (8014078 <USBD_FS_ProductStrDescriptor+0x38>)
 8014064:	f7f8 fe9f 	bl	800cda6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014068:	4b02      	ldr	r3, [pc, #8]	; (8014074 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801406a:	4618      	mov	r0, r3
 801406c:	3708      	adds	r7, #8
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	200128d0 	.word	0x200128d0
 8014078:	08016858 	.word	0x08016858

0801407c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	4603      	mov	r3, r0
 8014084:	6039      	str	r1, [r7, #0]
 8014086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	4904      	ldr	r1, [pc, #16]	; (801409c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801408c:	4804      	ldr	r0, [pc, #16]	; (80140a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801408e:	f7f8 fe8a 	bl	800cda6 <USBD_GetString>
  return USBD_StrDesc;
 8014092:	4b02      	ldr	r3, [pc, #8]	; (801409c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014094:	4618      	mov	r0, r3
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	200128d0 	.word	0x200128d0
 80140a0:	08016870 	.word	0x08016870

080140a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	4603      	mov	r3, r0
 80140ac:	6039      	str	r1, [r7, #0]
 80140ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	221a      	movs	r2, #26
 80140b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80140b6:	f000 f855 	bl	8014164 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80140ba:	4b02      	ldr	r3, [pc, #8]	; (80140c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}
 80140c4:	20000178 	.word	0x20000178

080140c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	4603      	mov	r3, r0
 80140d0:	6039      	str	r1, [r7, #0]
 80140d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80140d4:	79fb      	ldrb	r3, [r7, #7]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d105      	bne.n	80140e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80140da:	683a      	ldr	r2, [r7, #0]
 80140dc:	4907      	ldr	r1, [pc, #28]	; (80140fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80140de:	4808      	ldr	r0, [pc, #32]	; (8014100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80140e0:	f7f8 fe61 	bl	800cda6 <USBD_GetString>
 80140e4:	e004      	b.n	80140f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80140e6:	683a      	ldr	r2, [r7, #0]
 80140e8:	4904      	ldr	r1, [pc, #16]	; (80140fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80140ea:	4805      	ldr	r0, [pc, #20]	; (8014100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80140ec:	f7f8 fe5b 	bl	800cda6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80140f0:	4b02      	ldr	r3, [pc, #8]	; (80140fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3708      	adds	r7, #8
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	200128d0 	.word	0x200128d0
 8014100:	08016884 	.word	0x08016884

08014104 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	4603      	mov	r3, r0
 801410c:	6039      	str	r1, [r7, #0]
 801410e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014110:	79fb      	ldrb	r3, [r7, #7]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d105      	bne.n	8014122 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014116:	683a      	ldr	r2, [r7, #0]
 8014118:	4907      	ldr	r1, [pc, #28]	; (8014138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801411a:	4808      	ldr	r0, [pc, #32]	; (801413c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801411c:	f7f8 fe43 	bl	800cda6 <USBD_GetString>
 8014120:	e004      	b.n	801412c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	4904      	ldr	r1, [pc, #16]	; (8014138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014126:	4805      	ldr	r0, [pc, #20]	; (801413c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014128:	f7f8 fe3d 	bl	800cda6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801412c:	4b02      	ldr	r3, [pc, #8]	; (8014138 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801412e:	4618      	mov	r0, r3
 8014130:	3708      	adds	r7, #8
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	200128d0 	.word	0x200128d0
 801413c:	08016890 	.word	0x08016890

08014140 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014140:	b480      	push	{r7}
 8014142:	b083      	sub	sp, #12
 8014144:	af00      	add	r7, sp, #0
 8014146:	4603      	mov	r3, r0
 8014148:	6039      	str	r1, [r7, #0]
 801414a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	220c      	movs	r2, #12
 8014150:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8014152:	4b03      	ldr	r3, [pc, #12]	; (8014160 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8014154:	4618      	mov	r0, r3
 8014156:	370c      	adds	r7, #12
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr
 8014160:	20000168 	.word	0x20000168

08014164 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801416a:	4b0f      	ldr	r3, [pc, #60]	; (80141a8 <Get_SerialNum+0x44>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014170:	4b0e      	ldr	r3, [pc, #56]	; (80141ac <Get_SerialNum+0x48>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014176:	4b0e      	ldr	r3, [pc, #56]	; (80141b0 <Get_SerialNum+0x4c>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801417c:	68fa      	ldr	r2, [r7, #12]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	4413      	add	r3, r2
 8014182:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d009      	beq.n	801419e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801418a:	2208      	movs	r2, #8
 801418c:	4909      	ldr	r1, [pc, #36]	; (80141b4 <Get_SerialNum+0x50>)
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	f000 f814 	bl	80141bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014194:	2204      	movs	r2, #4
 8014196:	4908      	ldr	r1, [pc, #32]	; (80141b8 <Get_SerialNum+0x54>)
 8014198:	68b8      	ldr	r0, [r7, #8]
 801419a:	f000 f80f 	bl	80141bc <IntToUnicode>
  }
}
 801419e:	bf00      	nop
 80141a0:	3710      	adds	r7, #16
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	1ff0f420 	.word	0x1ff0f420
 80141ac:	1ff0f424 	.word	0x1ff0f424
 80141b0:	1ff0f428 	.word	0x1ff0f428
 80141b4:	2000017a 	.word	0x2000017a
 80141b8:	2000018a 	.word	0x2000018a

080141bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80141bc:	b480      	push	{r7}
 80141be:	b087      	sub	sp, #28
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	4613      	mov	r3, r2
 80141c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80141ca:	2300      	movs	r3, #0
 80141cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80141ce:	2300      	movs	r3, #0
 80141d0:	75fb      	strb	r3, [r7, #23]
 80141d2:	e027      	b.n	8014224 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	0f1b      	lsrs	r3, r3, #28
 80141d8:	2b09      	cmp	r3, #9
 80141da:	d80b      	bhi.n	80141f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	0f1b      	lsrs	r3, r3, #28
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	7dfb      	ldrb	r3, [r7, #23]
 80141e4:	005b      	lsls	r3, r3, #1
 80141e6:	4619      	mov	r1, r3
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	440b      	add	r3, r1
 80141ec:	3230      	adds	r2, #48	; 0x30
 80141ee:	b2d2      	uxtb	r2, r2
 80141f0:	701a      	strb	r2, [r3, #0]
 80141f2:	e00a      	b.n	801420a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	0f1b      	lsrs	r3, r3, #28
 80141f8:	b2da      	uxtb	r2, r3
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
 80141fc:	005b      	lsls	r3, r3, #1
 80141fe:	4619      	mov	r1, r3
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	440b      	add	r3, r1
 8014204:	3237      	adds	r2, #55	; 0x37
 8014206:	b2d2      	uxtb	r2, r2
 8014208:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	011b      	lsls	r3, r3, #4
 801420e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014210:	7dfb      	ldrb	r3, [r7, #23]
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	3301      	adds	r3, #1
 8014216:	68ba      	ldr	r2, [r7, #8]
 8014218:	4413      	add	r3, r2
 801421a:	2200      	movs	r2, #0
 801421c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801421e:	7dfb      	ldrb	r3, [r7, #23]
 8014220:	3301      	adds	r3, #1
 8014222:	75fb      	strb	r3, [r7, #23]
 8014224:	7dfa      	ldrb	r2, [r7, #23]
 8014226:	79fb      	ldrb	r3, [r7, #7]
 8014228:	429a      	cmp	r2, r3
 801422a:	d3d3      	bcc.n	80141d4 <IntToUnicode+0x18>
  }
}
 801422c:	bf00      	nop
 801422e:	371c      	adds	r7, #28
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr

08014238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b08a      	sub	sp, #40	; 0x28
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014240:	f107 0314 	add.w	r3, r7, #20
 8014244:	2200      	movs	r2, #0
 8014246:	601a      	str	r2, [r3, #0]
 8014248:	605a      	str	r2, [r3, #4]
 801424a:	609a      	str	r2, [r3, #8]
 801424c:	60da      	str	r2, [r3, #12]
 801424e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014258:	d13c      	bne.n	80142d4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801425a:	4b20      	ldr	r3, [pc, #128]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 801425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801425e:	4a1f      	ldr	r2, [pc, #124]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 8014260:	f043 0301 	orr.w	r3, r3, #1
 8014264:	6313      	str	r3, [r2, #48]	; 0x30
 8014266:	4b1d      	ldr	r3, [pc, #116]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 8014268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801426a:	f003 0301 	and.w	r3, r3, #1
 801426e:	613b      	str	r3, [r7, #16]
 8014270:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014272:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014278:	2302      	movs	r3, #2
 801427a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801427c:	2300      	movs	r3, #0
 801427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014280:	2303      	movs	r3, #3
 8014282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014284:	230a      	movs	r3, #10
 8014286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014288:	f107 0314 	add.w	r3, r7, #20
 801428c:	4619      	mov	r1, r3
 801428e:	4814      	ldr	r0, [pc, #80]	; (80142e0 <HAL_PCD_MspInit+0xa8>)
 8014290:	f7ef ff92 	bl	80041b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014294:	4b11      	ldr	r3, [pc, #68]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 8014296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014298:	4a10      	ldr	r2, [pc, #64]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 801429a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801429e:	6353      	str	r3, [r2, #52]	; 0x34
 80142a0:	4b0e      	ldr	r3, [pc, #56]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 80142a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142a8:	60fb      	str	r3, [r7, #12]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	4b0b      	ldr	r3, [pc, #44]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 80142ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142b0:	4a0a      	ldr	r2, [pc, #40]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 80142b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80142b6:	6453      	str	r3, [r2, #68]	; 0x44
 80142b8:	4b08      	ldr	r3, [pc, #32]	; (80142dc <HAL_PCD_MspInit+0xa4>)
 80142ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142c0:	60bb      	str	r3, [r7, #8]
 80142c2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80142c4:	2200      	movs	r2, #0
 80142c6:	2105      	movs	r1, #5
 80142c8:	2043      	movs	r0, #67	; 0x43
 80142ca:	f7ef fba7 	bl	8003a1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80142ce:	2043      	movs	r0, #67	; 0x43
 80142d0:	f7ef fbc0 	bl	8003a54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80142d4:	bf00      	nop
 80142d6:	3728      	adds	r7, #40	; 0x28
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	40023800 	.word	0x40023800
 80142e0:	40020000 	.word	0x40020000

080142e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80142f8:	4619      	mov	r1, r3
 80142fa:	4610      	mov	r0, r2
 80142fc:	f7f7 fda6 	bl	800be4c <USBD_LL_SetupStage>
}
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	460b      	mov	r3, r1
 8014312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801431a:	78fa      	ldrb	r2, [r7, #3]
 801431c:	6879      	ldr	r1, [r7, #4]
 801431e:	4613      	mov	r3, r2
 8014320:	00db      	lsls	r3, r3, #3
 8014322:	1a9b      	subs	r3, r3, r2
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	440b      	add	r3, r1
 8014328:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	78fb      	ldrb	r3, [r7, #3]
 8014330:	4619      	mov	r1, r3
 8014332:	f7f7 fdde 	bl	800bef2 <USBD_LL_DataOutStage>
}
 8014336:	bf00      	nop
 8014338:	3708      	adds	r7, #8
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801433e:	b580      	push	{r7, lr}
 8014340:	b082      	sub	sp, #8
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
 8014346:	460b      	mov	r3, r1
 8014348:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8014350:	78fa      	ldrb	r2, [r7, #3]
 8014352:	6879      	ldr	r1, [r7, #4]
 8014354:	4613      	mov	r3, r2
 8014356:	00db      	lsls	r3, r3, #3
 8014358:	1a9b      	subs	r3, r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	440b      	add	r3, r1
 801435e:	3348      	adds	r3, #72	; 0x48
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	78fb      	ldrb	r3, [r7, #3]
 8014364:	4619      	mov	r1, r3
 8014366:	f7f7 fe27 	bl	800bfb8 <USBD_LL_DataInStage>
}
 801436a:	bf00      	nop
 801436c:	3708      	adds	r7, #8
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}

08014372 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b082      	sub	sp, #8
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014380:	4618      	mov	r0, r3
 8014382:	f7f7 ff2b 	bl	800c1dc <USBD_LL_SOF>
}
 8014386:	bf00      	nop
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801438e:	b580      	push	{r7, lr}
 8014390:	b084      	sub	sp, #16
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014396:	2301      	movs	r3, #1
 8014398:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d102      	bne.n	80143a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80143a2:	2300      	movs	r3, #0
 80143a4:	73fb      	strb	r3, [r7, #15]
 80143a6:	e008      	b.n	80143ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	2b02      	cmp	r3, #2
 80143ae:	d102      	bne.n	80143b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80143b0:	2301      	movs	r3, #1
 80143b2:	73fb      	strb	r3, [r7, #15]
 80143b4:	e001      	b.n	80143ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80143b6:	f7ed f895 	bl	80014e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80143c0:	7bfa      	ldrb	r2, [r7, #15]
 80143c2:	4611      	mov	r1, r2
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7f7 fece 	bl	800c166 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7f7 fe87 	bl	800c0e4 <USBD_LL_Reset>
}
 80143d6:	bf00      	nop
 80143d8:	3710      	adds	r7, #16
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
	...

080143e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7f7 fec9 	bl	800c186 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	6812      	ldr	r2, [r2, #0]
 8014402:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014406:	f043 0301 	orr.w	r3, r3, #1
 801440a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6a1b      	ldr	r3, [r3, #32]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d005      	beq.n	8014420 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014414:	4b04      	ldr	r3, [pc, #16]	; (8014428 <HAL_PCD_SuspendCallback+0x48>)
 8014416:	691b      	ldr	r3, [r3, #16]
 8014418:	4a03      	ldr	r2, [pc, #12]	; (8014428 <HAL_PCD_SuspendCallback+0x48>)
 801441a:	f043 0306 	orr.w	r3, r3, #6
 801441e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014420:	bf00      	nop
 8014422:	3708      	adds	r7, #8
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}
 8014428:	e000ed00 	.word	0xe000ed00

0801442c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801443a:	4618      	mov	r0, r3
 801443c:	f7f7 feb8 	bl	800c1b0 <USBD_LL_Resume>
}
 8014440:	bf00      	nop
 8014442:	3708      	adds	r7, #8
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b082      	sub	sp, #8
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	460b      	mov	r3, r1
 8014452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801445a:	78fa      	ldrb	r2, [r7, #3]
 801445c:	4611      	mov	r1, r2
 801445e:	4618      	mov	r0, r3
 8014460:	f7f7 fee3 	bl	800c22a <USBD_LL_IsoOUTIncomplete>
}
 8014464:	bf00      	nop
 8014466:	3708      	adds	r7, #8
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}

0801446c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	460b      	mov	r3, r1
 8014476:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801447e:	78fa      	ldrb	r2, [r7, #3]
 8014480:	4611      	mov	r1, r2
 8014482:	4618      	mov	r0, r3
 8014484:	f7f7 fec4 	bl	800c210 <USBD_LL_IsoINIncomplete>
}
 8014488:	bf00      	nop
 801448a:	3708      	adds	r7, #8
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014490:	b580      	push	{r7, lr}
 8014492:	b082      	sub	sp, #8
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801449e:	4618      	mov	r0, r3
 80144a0:	f7f7 fed0 	bl	800c244 <USBD_LL_DevConnected>
}
 80144a4:	bf00      	nop
 80144a6:	3708      	adds	r7, #8
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7f7 fecd 	bl	800c25a <USBD_LL_DevDisconnected>
}
 80144c0:	bf00      	nop
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d13c      	bne.n	8014552 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80144d8:	4a20      	ldr	r2, [pc, #128]	; (801455c <USBD_LL_Init+0x94>)
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	4a1e      	ldr	r2, [pc, #120]	; (801455c <USBD_LL_Init+0x94>)
 80144e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80144e8:	4b1c      	ldr	r3, [pc, #112]	; (801455c <USBD_LL_Init+0x94>)
 80144ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80144ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80144f0:	4b1a      	ldr	r3, [pc, #104]	; (801455c <USBD_LL_Init+0x94>)
 80144f2:	2206      	movs	r2, #6
 80144f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80144f6:	4b19      	ldr	r3, [pc, #100]	; (801455c <USBD_LL_Init+0x94>)
 80144f8:	2202      	movs	r2, #2
 80144fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80144fc:	4b17      	ldr	r3, [pc, #92]	; (801455c <USBD_LL_Init+0x94>)
 80144fe:	2200      	movs	r2, #0
 8014500:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014502:	4b16      	ldr	r3, [pc, #88]	; (801455c <USBD_LL_Init+0x94>)
 8014504:	2202      	movs	r2, #2
 8014506:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014508:	4b14      	ldr	r3, [pc, #80]	; (801455c <USBD_LL_Init+0x94>)
 801450a:	2200      	movs	r2, #0
 801450c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801450e:	4b13      	ldr	r3, [pc, #76]	; (801455c <USBD_LL_Init+0x94>)
 8014510:	2200      	movs	r2, #0
 8014512:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014514:	4b11      	ldr	r3, [pc, #68]	; (801455c <USBD_LL_Init+0x94>)
 8014516:	2200      	movs	r2, #0
 8014518:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801451a:	4b10      	ldr	r3, [pc, #64]	; (801455c <USBD_LL_Init+0x94>)
 801451c:	2200      	movs	r2, #0
 801451e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014520:	4b0e      	ldr	r3, [pc, #56]	; (801455c <USBD_LL_Init+0x94>)
 8014522:	2200      	movs	r2, #0
 8014524:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014526:	480d      	ldr	r0, [pc, #52]	; (801455c <USBD_LL_Init+0x94>)
 8014528:	f7f0 f823 	bl	8004572 <HAL_PCD_Init>
 801452c:	4603      	mov	r3, r0
 801452e:	2b00      	cmp	r3, #0
 8014530:	d001      	beq.n	8014536 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014532:	f7ec ffd7 	bl	80014e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014536:	2180      	movs	r1, #128	; 0x80
 8014538:	4808      	ldr	r0, [pc, #32]	; (801455c <USBD_LL_Init+0x94>)
 801453a:	f7f1 f9a4 	bl	8005886 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801453e:	2240      	movs	r2, #64	; 0x40
 8014540:	2100      	movs	r1, #0
 8014542:	4806      	ldr	r0, [pc, #24]	; (801455c <USBD_LL_Init+0x94>)
 8014544:	f7f1 f958 	bl	80057f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014548:	2280      	movs	r2, #128	; 0x80
 801454a:	2101      	movs	r1, #1
 801454c:	4803      	ldr	r0, [pc, #12]	; (801455c <USBD_LL_Init+0x94>)
 801454e:	f7f1 f953 	bl	80057f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014552:	2300      	movs	r3, #0
}
 8014554:	4618      	mov	r0, r3
 8014556:	3708      	adds	r7, #8
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}
 801455c:	20012ad0 	.word	0x20012ad0

08014560 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014568:	2300      	movs	r3, #0
 801456a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801456c:	2300      	movs	r3, #0
 801456e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014576:	4618      	mov	r0, r3
 8014578:	f7f0 f91f 	bl	80047ba <HAL_PCD_Start>
 801457c:	4603      	mov	r3, r0
 801457e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014580:	7bfb      	ldrb	r3, [r7, #15]
 8014582:	4618      	mov	r0, r3
 8014584:	f000 f97e 	bl	8014884 <USBD_Get_USB_Status>
 8014588:	4603      	mov	r3, r0
 801458a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801458c:	7bbb      	ldrb	r3, [r7, #14]
}
 801458e:	4618      	mov	r0, r3
 8014590:	3710      	adds	r7, #16
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}

08014596 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014596:	b580      	push	{r7, lr}
 8014598:	b084      	sub	sp, #16
 801459a:	af00      	add	r7, sp, #0
 801459c:	6078      	str	r0, [r7, #4]
 801459e:	4608      	mov	r0, r1
 80145a0:	4611      	mov	r1, r2
 80145a2:	461a      	mov	r2, r3
 80145a4:	4603      	mov	r3, r0
 80145a6:	70fb      	strb	r3, [r7, #3]
 80145a8:	460b      	mov	r3, r1
 80145aa:	70bb      	strb	r3, [r7, #2]
 80145ac:	4613      	mov	r3, r2
 80145ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145b0:	2300      	movs	r3, #0
 80145b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80145be:	78bb      	ldrb	r3, [r7, #2]
 80145c0:	883a      	ldrh	r2, [r7, #0]
 80145c2:	78f9      	ldrb	r1, [r7, #3]
 80145c4:	f7f0 fd1f 	bl	8005006 <HAL_PCD_EP_Open>
 80145c8:	4603      	mov	r3, r0
 80145ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80145cc:	7bfb      	ldrb	r3, [r7, #15]
 80145ce:	4618      	mov	r0, r3
 80145d0:	f000 f958 	bl	8014884 <USBD_Get_USB_Status>
 80145d4:	4603      	mov	r3, r0
 80145d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80145d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80145da:	4618      	mov	r0, r3
 80145dc:	3710      	adds	r7, #16
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}

080145e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80145e2:	b580      	push	{r7, lr}
 80145e4:	b084      	sub	sp, #16
 80145e6:	af00      	add	r7, sp, #0
 80145e8:	6078      	str	r0, [r7, #4]
 80145ea:	460b      	mov	r3, r1
 80145ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145ee:	2300      	movs	r3, #0
 80145f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145f2:	2300      	movs	r3, #0
 80145f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80145fc:	78fa      	ldrb	r2, [r7, #3]
 80145fe:	4611      	mov	r1, r2
 8014600:	4618      	mov	r0, r3
 8014602:	f7f0 fd68 	bl	80050d6 <HAL_PCD_EP_Close>
 8014606:	4603      	mov	r3, r0
 8014608:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801460a:	7bfb      	ldrb	r3, [r7, #15]
 801460c:	4618      	mov	r0, r3
 801460e:	f000 f939 	bl	8014884 <USBD_Get_USB_Status>
 8014612:	4603      	mov	r3, r0
 8014614:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8014616:	7bbb      	ldrb	r3, [r7, #14]
}
 8014618:	4618      	mov	r0, r3
 801461a:	3710      	adds	r7, #16
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}

08014620 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	460b      	mov	r3, r1
 801462a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801462c:	2300      	movs	r3, #0
 801462e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014630:	2300      	movs	r3, #0
 8014632:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801463a:	78fa      	ldrb	r2, [r7, #3]
 801463c:	4611      	mov	r1, r2
 801463e:	4618      	mov	r0, r3
 8014640:	f7f0 fe40 	bl	80052c4 <HAL_PCD_EP_SetStall>
 8014644:	4603      	mov	r3, r0
 8014646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014648:	7bfb      	ldrb	r3, [r7, #15]
 801464a:	4618      	mov	r0, r3
 801464c:	f000 f91a 	bl	8014884 <USBD_Get_USB_Status>
 8014650:	4603      	mov	r3, r0
 8014652:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014654:	7bbb      	ldrb	r3, [r7, #14]
}
 8014656:	4618      	mov	r0, r3
 8014658:	3710      	adds	r7, #16
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b084      	sub	sp, #16
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	460b      	mov	r3, r1
 8014668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801466a:	2300      	movs	r3, #0
 801466c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801466e:	2300      	movs	r3, #0
 8014670:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014678:	78fa      	ldrb	r2, [r7, #3]
 801467a:	4611      	mov	r1, r2
 801467c:	4618      	mov	r0, r3
 801467e:	f7f0 fe85 	bl	800538c <HAL_PCD_EP_ClrStall>
 8014682:	4603      	mov	r3, r0
 8014684:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8014686:	7bfb      	ldrb	r3, [r7, #15]
 8014688:	4618      	mov	r0, r3
 801468a:	f000 f8fb 	bl	8014884 <USBD_Get_USB_Status>
 801468e:	4603      	mov	r3, r0
 8014690:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014692:	7bbb      	ldrb	r3, [r7, #14]
}
 8014694:	4618      	mov	r0, r3
 8014696:	3710      	adds	r7, #16
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}

0801469c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801469c:	b480      	push	{r7}
 801469e:	b085      	sub	sp, #20
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	460b      	mov	r3, r1
 80146a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80146ae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80146b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	da0b      	bge.n	80146d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80146b8:	78fb      	ldrb	r3, [r7, #3]
 80146ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146be:	68f9      	ldr	r1, [r7, #12]
 80146c0:	4613      	mov	r3, r2
 80146c2:	00db      	lsls	r3, r3, #3
 80146c4:	1a9b      	subs	r3, r3, r2
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	440b      	add	r3, r1
 80146ca:	333e      	adds	r3, #62	; 0x3e
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	e00b      	b.n	80146e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80146d0:	78fb      	ldrb	r3, [r7, #3]
 80146d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146d6:	68f9      	ldr	r1, [r7, #12]
 80146d8:	4613      	mov	r3, r2
 80146da:	00db      	lsls	r3, r3, #3
 80146dc:	1a9b      	subs	r3, r3, r2
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	440b      	add	r3, r1
 80146e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80146e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3714      	adds	r7, #20
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr

080146f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	460b      	mov	r3, r1
 80146fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014700:	2300      	movs	r3, #0
 8014702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014704:	2300      	movs	r3, #0
 8014706:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801470e:	78fa      	ldrb	r2, [r7, #3]
 8014710:	4611      	mov	r1, r2
 8014712:	4618      	mov	r0, r3
 8014714:	f7f0 fc52 	bl	8004fbc <HAL_PCD_SetAddress>
 8014718:	4603      	mov	r3, r0
 801471a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801471c:	7bfb      	ldrb	r3, [r7, #15]
 801471e:	4618      	mov	r0, r3
 8014720:	f000 f8b0 	bl	8014884 <USBD_Get_USB_Status>
 8014724:	4603      	mov	r3, r0
 8014726:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014728:	7bbb      	ldrb	r3, [r7, #14]
}
 801472a:	4618      	mov	r0, r3
 801472c:	3710      	adds	r7, #16
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b086      	sub	sp, #24
 8014736:	af00      	add	r7, sp, #0
 8014738:	60f8      	str	r0, [r7, #12]
 801473a:	607a      	str	r2, [r7, #4]
 801473c:	603b      	str	r3, [r7, #0]
 801473e:	460b      	mov	r3, r1
 8014740:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014742:	2300      	movs	r3, #0
 8014744:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014746:	2300      	movs	r3, #0
 8014748:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014750:	7af9      	ldrb	r1, [r7, #11]
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	687a      	ldr	r2, [r7, #4]
 8014756:	f7f0 fd6b 	bl	8005230 <HAL_PCD_EP_Transmit>
 801475a:	4603      	mov	r3, r0
 801475c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801475e:	7dfb      	ldrb	r3, [r7, #23]
 8014760:	4618      	mov	r0, r3
 8014762:	f000 f88f 	bl	8014884 <USBD_Get_USB_Status>
 8014766:	4603      	mov	r3, r0
 8014768:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801476a:	7dbb      	ldrb	r3, [r7, #22]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3718      	adds	r7, #24
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	607a      	str	r2, [r7, #4]
 801477e:	603b      	str	r3, [r7, #0]
 8014780:	460b      	mov	r3, r1
 8014782:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014784:	2300      	movs	r3, #0
 8014786:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014788:	2300      	movs	r3, #0
 801478a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014792:	7af9      	ldrb	r1, [r7, #11]
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	687a      	ldr	r2, [r7, #4]
 8014798:	f7f0 fce7 	bl	800516a <HAL_PCD_EP_Receive>
 801479c:	4603      	mov	r3, r0
 801479e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80147a0:	7dfb      	ldrb	r3, [r7, #23]
 80147a2:	4618      	mov	r0, r3
 80147a4:	f000 f86e 	bl	8014884 <USBD_Get_USB_Status>
 80147a8:	4603      	mov	r3, r0
 80147aa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80147ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3718      	adds	r7, #24
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}

080147b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147b6:	b580      	push	{r7, lr}
 80147b8:	b082      	sub	sp, #8
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]
 80147be:	460b      	mov	r3, r1
 80147c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80147c8:	78fa      	ldrb	r2, [r7, #3]
 80147ca:	4611      	mov	r1, r2
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7f0 fd17 	bl	8005200 <HAL_PCD_EP_GetRxCount>
 80147d2:	4603      	mov	r3, r0
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3708      	adds	r7, #8
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	460b      	mov	r3, r1
 80147e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80147e8:	78fb      	ldrb	r3, [r7, #3]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d002      	beq.n	80147f4 <HAL_PCDEx_LPM_Callback+0x18>
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d01f      	beq.n	8014832 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80147f2:	e03b      	b.n	801486c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6a1b      	ldr	r3, [r3, #32]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d007      	beq.n	801480c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80147fc:	f000 f83c 	bl	8014878 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014800:	4b1c      	ldr	r3, [pc, #112]	; (8014874 <HAL_PCDEx_LPM_Callback+0x98>)
 8014802:	691b      	ldr	r3, [r3, #16]
 8014804:	4a1b      	ldr	r2, [pc, #108]	; (8014874 <HAL_PCDEx_LPM_Callback+0x98>)
 8014806:	f023 0306 	bic.w	r3, r3, #6
 801480a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	687a      	ldr	r2, [r7, #4]
 8014818:	6812      	ldr	r2, [r2, #0]
 801481a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801481e:	f023 0301 	bic.w	r3, r3, #1
 8014822:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801482a:	4618      	mov	r0, r3
 801482c:	f7f7 fcc0 	bl	800c1b0 <USBD_LL_Resume>
    break;
 8014830:	e01c      	b.n	801486c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	687a      	ldr	r2, [r7, #4]
 801483e:	6812      	ldr	r2, [r2, #0]
 8014840:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014844:	f043 0301 	orr.w	r3, r3, #1
 8014848:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014850:	4618      	mov	r0, r3
 8014852:	f7f7 fc98 	bl	800c186 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6a1b      	ldr	r3, [r3, #32]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d005      	beq.n	801486a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801485e:	4b05      	ldr	r3, [pc, #20]	; (8014874 <HAL_PCDEx_LPM_Callback+0x98>)
 8014860:	691b      	ldr	r3, [r3, #16]
 8014862:	4a04      	ldr	r2, [pc, #16]	; (8014874 <HAL_PCDEx_LPM_Callback+0x98>)
 8014864:	f043 0306 	orr.w	r3, r3, #6
 8014868:	6113      	str	r3, [r2, #16]
    break;   
 801486a:	bf00      	nop
}
 801486c:	bf00      	nop
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	e000ed00 	.word	0xe000ed00

08014878 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801487c:	f7ec fc3a 	bl	80010f4 <SystemClock_Config>
}
 8014880:	bf00      	nop
 8014882:	bd80      	pop	{r7, pc}

08014884 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014884:	b480      	push	{r7}
 8014886:	b085      	sub	sp, #20
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801488e:	2300      	movs	r3, #0
 8014890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014892:	79fb      	ldrb	r3, [r7, #7]
 8014894:	2b03      	cmp	r3, #3
 8014896:	d817      	bhi.n	80148c8 <USBD_Get_USB_Status+0x44>
 8014898:	a201      	add	r2, pc, #4	; (adr r2, 80148a0 <USBD_Get_USB_Status+0x1c>)
 801489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801489e:	bf00      	nop
 80148a0:	080148b1 	.word	0x080148b1
 80148a4:	080148b7 	.word	0x080148b7
 80148a8:	080148bd 	.word	0x080148bd
 80148ac:	080148c3 	.word	0x080148c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80148b0:	2300      	movs	r3, #0
 80148b2:	73fb      	strb	r3, [r7, #15]
    break;
 80148b4:	e00b      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80148b6:	2303      	movs	r3, #3
 80148b8:	73fb      	strb	r3, [r7, #15]
    break;
 80148ba:	e008      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80148bc:	2301      	movs	r3, #1
 80148be:	73fb      	strb	r3, [r7, #15]
    break;
 80148c0:	e005      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80148c2:	2303      	movs	r3, #3
 80148c4:	73fb      	strb	r3, [r7, #15]
    break;
 80148c6:	e002      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80148c8:	2303      	movs	r3, #3
 80148ca:	73fb      	strb	r3, [r7, #15]
    break;
 80148cc:	bf00      	nop
  }
  return usb_status;
 80148ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3714      	adds	r7, #20
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <__errno>:
 80148dc:	4b01      	ldr	r3, [pc, #4]	; (80148e4 <__errno+0x8>)
 80148de:	6818      	ldr	r0, [r3, #0]
 80148e0:	4770      	bx	lr
 80148e2:	bf00      	nop
 80148e4:	20000194 	.word	0x20000194

080148e8 <__libc_init_array>:
 80148e8:	b570      	push	{r4, r5, r6, lr}
 80148ea:	4e0d      	ldr	r6, [pc, #52]	; (8014920 <__libc_init_array+0x38>)
 80148ec:	4c0d      	ldr	r4, [pc, #52]	; (8014924 <__libc_init_array+0x3c>)
 80148ee:	1ba4      	subs	r4, r4, r6
 80148f0:	10a4      	asrs	r4, r4, #2
 80148f2:	2500      	movs	r5, #0
 80148f4:	42a5      	cmp	r5, r4
 80148f6:	d109      	bne.n	801490c <__libc_init_array+0x24>
 80148f8:	4e0b      	ldr	r6, [pc, #44]	; (8014928 <__libc_init_array+0x40>)
 80148fa:	4c0c      	ldr	r4, [pc, #48]	; (801492c <__libc_init_array+0x44>)
 80148fc:	f001 fd56 	bl	80163ac <_init>
 8014900:	1ba4      	subs	r4, r4, r6
 8014902:	10a4      	asrs	r4, r4, #2
 8014904:	2500      	movs	r5, #0
 8014906:	42a5      	cmp	r5, r4
 8014908:	d105      	bne.n	8014916 <__libc_init_array+0x2e>
 801490a:	bd70      	pop	{r4, r5, r6, pc}
 801490c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014910:	4798      	blx	r3
 8014912:	3501      	adds	r5, #1
 8014914:	e7ee      	b.n	80148f4 <__libc_init_array+0xc>
 8014916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801491a:	4798      	blx	r3
 801491c:	3501      	adds	r5, #1
 801491e:	e7f2      	b.n	8014906 <__libc_init_array+0x1e>
 8014920:	08016a88 	.word	0x08016a88
 8014924:	08016a88 	.word	0x08016a88
 8014928:	08016a88 	.word	0x08016a88
 801492c:	08016a8c 	.word	0x08016a8c

08014930 <malloc>:
 8014930:	4b02      	ldr	r3, [pc, #8]	; (801493c <malloc+0xc>)
 8014932:	4601      	mov	r1, r0
 8014934:	6818      	ldr	r0, [r3, #0]
 8014936:	f000 b86d 	b.w	8014a14 <_malloc_r>
 801493a:	bf00      	nop
 801493c:	20000194 	.word	0x20000194

08014940 <free>:
 8014940:	4b02      	ldr	r3, [pc, #8]	; (801494c <free+0xc>)
 8014942:	4601      	mov	r1, r0
 8014944:	6818      	ldr	r0, [r3, #0]
 8014946:	f000 b817 	b.w	8014978 <_free_r>
 801494a:	bf00      	nop
 801494c:	20000194 	.word	0x20000194

08014950 <memcpy>:
 8014950:	b510      	push	{r4, lr}
 8014952:	1e43      	subs	r3, r0, #1
 8014954:	440a      	add	r2, r1
 8014956:	4291      	cmp	r1, r2
 8014958:	d100      	bne.n	801495c <memcpy+0xc>
 801495a:	bd10      	pop	{r4, pc}
 801495c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014960:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014964:	e7f7      	b.n	8014956 <memcpy+0x6>

08014966 <memset>:
 8014966:	4402      	add	r2, r0
 8014968:	4603      	mov	r3, r0
 801496a:	4293      	cmp	r3, r2
 801496c:	d100      	bne.n	8014970 <memset+0xa>
 801496e:	4770      	bx	lr
 8014970:	f803 1b01 	strb.w	r1, [r3], #1
 8014974:	e7f9      	b.n	801496a <memset+0x4>
	...

08014978 <_free_r>:
 8014978:	b538      	push	{r3, r4, r5, lr}
 801497a:	4605      	mov	r5, r0
 801497c:	2900      	cmp	r1, #0
 801497e:	d045      	beq.n	8014a0c <_free_r+0x94>
 8014980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014984:	1f0c      	subs	r4, r1, #4
 8014986:	2b00      	cmp	r3, #0
 8014988:	bfb8      	it	lt
 801498a:	18e4      	addlt	r4, r4, r3
 801498c:	f000 f91a 	bl	8014bc4 <__malloc_lock>
 8014990:	4a1f      	ldr	r2, [pc, #124]	; (8014a10 <_free_r+0x98>)
 8014992:	6813      	ldr	r3, [r2, #0]
 8014994:	4610      	mov	r0, r2
 8014996:	b933      	cbnz	r3, 80149a6 <_free_r+0x2e>
 8014998:	6063      	str	r3, [r4, #4]
 801499a:	6014      	str	r4, [r2, #0]
 801499c:	4628      	mov	r0, r5
 801499e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149a2:	f000 b910 	b.w	8014bc6 <__malloc_unlock>
 80149a6:	42a3      	cmp	r3, r4
 80149a8:	d90c      	bls.n	80149c4 <_free_r+0x4c>
 80149aa:	6821      	ldr	r1, [r4, #0]
 80149ac:	1862      	adds	r2, r4, r1
 80149ae:	4293      	cmp	r3, r2
 80149b0:	bf04      	itt	eq
 80149b2:	681a      	ldreq	r2, [r3, #0]
 80149b4:	685b      	ldreq	r3, [r3, #4]
 80149b6:	6063      	str	r3, [r4, #4]
 80149b8:	bf04      	itt	eq
 80149ba:	1852      	addeq	r2, r2, r1
 80149bc:	6022      	streq	r2, [r4, #0]
 80149be:	6004      	str	r4, [r0, #0]
 80149c0:	e7ec      	b.n	801499c <_free_r+0x24>
 80149c2:	4613      	mov	r3, r2
 80149c4:	685a      	ldr	r2, [r3, #4]
 80149c6:	b10a      	cbz	r2, 80149cc <_free_r+0x54>
 80149c8:	42a2      	cmp	r2, r4
 80149ca:	d9fa      	bls.n	80149c2 <_free_r+0x4a>
 80149cc:	6819      	ldr	r1, [r3, #0]
 80149ce:	1858      	adds	r0, r3, r1
 80149d0:	42a0      	cmp	r0, r4
 80149d2:	d10b      	bne.n	80149ec <_free_r+0x74>
 80149d4:	6820      	ldr	r0, [r4, #0]
 80149d6:	4401      	add	r1, r0
 80149d8:	1858      	adds	r0, r3, r1
 80149da:	4282      	cmp	r2, r0
 80149dc:	6019      	str	r1, [r3, #0]
 80149de:	d1dd      	bne.n	801499c <_free_r+0x24>
 80149e0:	6810      	ldr	r0, [r2, #0]
 80149e2:	6852      	ldr	r2, [r2, #4]
 80149e4:	605a      	str	r2, [r3, #4]
 80149e6:	4401      	add	r1, r0
 80149e8:	6019      	str	r1, [r3, #0]
 80149ea:	e7d7      	b.n	801499c <_free_r+0x24>
 80149ec:	d902      	bls.n	80149f4 <_free_r+0x7c>
 80149ee:	230c      	movs	r3, #12
 80149f0:	602b      	str	r3, [r5, #0]
 80149f2:	e7d3      	b.n	801499c <_free_r+0x24>
 80149f4:	6820      	ldr	r0, [r4, #0]
 80149f6:	1821      	adds	r1, r4, r0
 80149f8:	428a      	cmp	r2, r1
 80149fa:	bf04      	itt	eq
 80149fc:	6811      	ldreq	r1, [r2, #0]
 80149fe:	6852      	ldreq	r2, [r2, #4]
 8014a00:	6062      	str	r2, [r4, #4]
 8014a02:	bf04      	itt	eq
 8014a04:	1809      	addeq	r1, r1, r0
 8014a06:	6021      	streq	r1, [r4, #0]
 8014a08:	605c      	str	r4, [r3, #4]
 8014a0a:	e7c7      	b.n	801499c <_free_r+0x24>
 8014a0c:	bd38      	pop	{r3, r4, r5, pc}
 8014a0e:	bf00      	nop
 8014a10:	200087d0 	.word	0x200087d0

08014a14 <_malloc_r>:
 8014a14:	b570      	push	{r4, r5, r6, lr}
 8014a16:	1ccd      	adds	r5, r1, #3
 8014a18:	f025 0503 	bic.w	r5, r5, #3
 8014a1c:	3508      	adds	r5, #8
 8014a1e:	2d0c      	cmp	r5, #12
 8014a20:	bf38      	it	cc
 8014a22:	250c      	movcc	r5, #12
 8014a24:	2d00      	cmp	r5, #0
 8014a26:	4606      	mov	r6, r0
 8014a28:	db01      	blt.n	8014a2e <_malloc_r+0x1a>
 8014a2a:	42a9      	cmp	r1, r5
 8014a2c:	d903      	bls.n	8014a36 <_malloc_r+0x22>
 8014a2e:	230c      	movs	r3, #12
 8014a30:	6033      	str	r3, [r6, #0]
 8014a32:	2000      	movs	r0, #0
 8014a34:	bd70      	pop	{r4, r5, r6, pc}
 8014a36:	f000 f8c5 	bl	8014bc4 <__malloc_lock>
 8014a3a:	4a21      	ldr	r2, [pc, #132]	; (8014ac0 <_malloc_r+0xac>)
 8014a3c:	6814      	ldr	r4, [r2, #0]
 8014a3e:	4621      	mov	r1, r4
 8014a40:	b991      	cbnz	r1, 8014a68 <_malloc_r+0x54>
 8014a42:	4c20      	ldr	r4, [pc, #128]	; (8014ac4 <_malloc_r+0xb0>)
 8014a44:	6823      	ldr	r3, [r4, #0]
 8014a46:	b91b      	cbnz	r3, 8014a50 <_malloc_r+0x3c>
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f000 f83d 	bl	8014ac8 <_sbrk_r>
 8014a4e:	6020      	str	r0, [r4, #0]
 8014a50:	4629      	mov	r1, r5
 8014a52:	4630      	mov	r0, r6
 8014a54:	f000 f838 	bl	8014ac8 <_sbrk_r>
 8014a58:	1c43      	adds	r3, r0, #1
 8014a5a:	d124      	bne.n	8014aa6 <_malloc_r+0x92>
 8014a5c:	230c      	movs	r3, #12
 8014a5e:	6033      	str	r3, [r6, #0]
 8014a60:	4630      	mov	r0, r6
 8014a62:	f000 f8b0 	bl	8014bc6 <__malloc_unlock>
 8014a66:	e7e4      	b.n	8014a32 <_malloc_r+0x1e>
 8014a68:	680b      	ldr	r3, [r1, #0]
 8014a6a:	1b5b      	subs	r3, r3, r5
 8014a6c:	d418      	bmi.n	8014aa0 <_malloc_r+0x8c>
 8014a6e:	2b0b      	cmp	r3, #11
 8014a70:	d90f      	bls.n	8014a92 <_malloc_r+0x7e>
 8014a72:	600b      	str	r3, [r1, #0]
 8014a74:	50cd      	str	r5, [r1, r3]
 8014a76:	18cc      	adds	r4, r1, r3
 8014a78:	4630      	mov	r0, r6
 8014a7a:	f000 f8a4 	bl	8014bc6 <__malloc_unlock>
 8014a7e:	f104 000b 	add.w	r0, r4, #11
 8014a82:	1d23      	adds	r3, r4, #4
 8014a84:	f020 0007 	bic.w	r0, r0, #7
 8014a88:	1ac3      	subs	r3, r0, r3
 8014a8a:	d0d3      	beq.n	8014a34 <_malloc_r+0x20>
 8014a8c:	425a      	negs	r2, r3
 8014a8e:	50e2      	str	r2, [r4, r3]
 8014a90:	e7d0      	b.n	8014a34 <_malloc_r+0x20>
 8014a92:	428c      	cmp	r4, r1
 8014a94:	684b      	ldr	r3, [r1, #4]
 8014a96:	bf16      	itet	ne
 8014a98:	6063      	strne	r3, [r4, #4]
 8014a9a:	6013      	streq	r3, [r2, #0]
 8014a9c:	460c      	movne	r4, r1
 8014a9e:	e7eb      	b.n	8014a78 <_malloc_r+0x64>
 8014aa0:	460c      	mov	r4, r1
 8014aa2:	6849      	ldr	r1, [r1, #4]
 8014aa4:	e7cc      	b.n	8014a40 <_malloc_r+0x2c>
 8014aa6:	1cc4      	adds	r4, r0, #3
 8014aa8:	f024 0403 	bic.w	r4, r4, #3
 8014aac:	42a0      	cmp	r0, r4
 8014aae:	d005      	beq.n	8014abc <_malloc_r+0xa8>
 8014ab0:	1a21      	subs	r1, r4, r0
 8014ab2:	4630      	mov	r0, r6
 8014ab4:	f000 f808 	bl	8014ac8 <_sbrk_r>
 8014ab8:	3001      	adds	r0, #1
 8014aba:	d0cf      	beq.n	8014a5c <_malloc_r+0x48>
 8014abc:	6025      	str	r5, [r4, #0]
 8014abe:	e7db      	b.n	8014a78 <_malloc_r+0x64>
 8014ac0:	200087d0 	.word	0x200087d0
 8014ac4:	200087d4 	.word	0x200087d4

08014ac8 <_sbrk_r>:
 8014ac8:	b538      	push	{r3, r4, r5, lr}
 8014aca:	4c06      	ldr	r4, [pc, #24]	; (8014ae4 <_sbrk_r+0x1c>)
 8014acc:	2300      	movs	r3, #0
 8014ace:	4605      	mov	r5, r0
 8014ad0:	4608      	mov	r0, r1
 8014ad2:	6023      	str	r3, [r4, #0]
 8014ad4:	f7ec ffde 	bl	8001a94 <_sbrk>
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	d102      	bne.n	8014ae2 <_sbrk_r+0x1a>
 8014adc:	6823      	ldr	r3, [r4, #0]
 8014ade:	b103      	cbz	r3, 8014ae2 <_sbrk_r+0x1a>
 8014ae0:	602b      	str	r3, [r5, #0]
 8014ae2:	bd38      	pop	{r3, r4, r5, pc}
 8014ae4:	20012ed4 	.word	0x20012ed4

08014ae8 <sniprintf>:
 8014ae8:	b40c      	push	{r2, r3}
 8014aea:	b530      	push	{r4, r5, lr}
 8014aec:	4b17      	ldr	r3, [pc, #92]	; (8014b4c <sniprintf+0x64>)
 8014aee:	1e0c      	subs	r4, r1, #0
 8014af0:	b09d      	sub	sp, #116	; 0x74
 8014af2:	681d      	ldr	r5, [r3, #0]
 8014af4:	da08      	bge.n	8014b08 <sniprintf+0x20>
 8014af6:	238b      	movs	r3, #139	; 0x8b
 8014af8:	602b      	str	r3, [r5, #0]
 8014afa:	f04f 30ff 	mov.w	r0, #4294967295
 8014afe:	b01d      	add	sp, #116	; 0x74
 8014b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b04:	b002      	add	sp, #8
 8014b06:	4770      	bx	lr
 8014b08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014b0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b10:	bf14      	ite	ne
 8014b12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b16:	4623      	moveq	r3, r4
 8014b18:	9304      	str	r3, [sp, #16]
 8014b1a:	9307      	str	r3, [sp, #28]
 8014b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b20:	9002      	str	r0, [sp, #8]
 8014b22:	9006      	str	r0, [sp, #24]
 8014b24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014b2a:	ab21      	add	r3, sp, #132	; 0x84
 8014b2c:	a902      	add	r1, sp, #8
 8014b2e:	4628      	mov	r0, r5
 8014b30:	9301      	str	r3, [sp, #4]
 8014b32:	f000 f8a3 	bl	8014c7c <_svfiprintf_r>
 8014b36:	1c43      	adds	r3, r0, #1
 8014b38:	bfbc      	itt	lt
 8014b3a:	238b      	movlt	r3, #139	; 0x8b
 8014b3c:	602b      	strlt	r3, [r5, #0]
 8014b3e:	2c00      	cmp	r4, #0
 8014b40:	d0dd      	beq.n	8014afe <sniprintf+0x16>
 8014b42:	9b02      	ldr	r3, [sp, #8]
 8014b44:	2200      	movs	r2, #0
 8014b46:	701a      	strb	r2, [r3, #0]
 8014b48:	e7d9      	b.n	8014afe <sniprintf+0x16>
 8014b4a:	bf00      	nop
 8014b4c:	20000194 	.word	0x20000194

08014b50 <_vsniprintf_r>:
 8014b50:	b530      	push	{r4, r5, lr}
 8014b52:	1e14      	subs	r4, r2, #0
 8014b54:	4605      	mov	r5, r0
 8014b56:	b09b      	sub	sp, #108	; 0x6c
 8014b58:	4618      	mov	r0, r3
 8014b5a:	da05      	bge.n	8014b68 <_vsniprintf_r+0x18>
 8014b5c:	238b      	movs	r3, #139	; 0x8b
 8014b5e:	602b      	str	r3, [r5, #0]
 8014b60:	f04f 30ff 	mov.w	r0, #4294967295
 8014b64:	b01b      	add	sp, #108	; 0x6c
 8014b66:	bd30      	pop	{r4, r5, pc}
 8014b68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014b6c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014b70:	bf14      	ite	ne
 8014b72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b76:	4623      	moveq	r3, r4
 8014b78:	9302      	str	r3, [sp, #8]
 8014b7a:	9305      	str	r3, [sp, #20]
 8014b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b80:	9100      	str	r1, [sp, #0]
 8014b82:	9104      	str	r1, [sp, #16]
 8014b84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014b88:	4602      	mov	r2, r0
 8014b8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014b8c:	4669      	mov	r1, sp
 8014b8e:	4628      	mov	r0, r5
 8014b90:	f000 f874 	bl	8014c7c <_svfiprintf_r>
 8014b94:	1c43      	adds	r3, r0, #1
 8014b96:	bfbc      	itt	lt
 8014b98:	238b      	movlt	r3, #139	; 0x8b
 8014b9a:	602b      	strlt	r3, [r5, #0]
 8014b9c:	2c00      	cmp	r4, #0
 8014b9e:	d0e1      	beq.n	8014b64 <_vsniprintf_r+0x14>
 8014ba0:	9b00      	ldr	r3, [sp, #0]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	701a      	strb	r2, [r3, #0]
 8014ba6:	e7dd      	b.n	8014b64 <_vsniprintf_r+0x14>

08014ba8 <vsniprintf>:
 8014ba8:	b507      	push	{r0, r1, r2, lr}
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	4613      	mov	r3, r2
 8014bae:	460a      	mov	r2, r1
 8014bb0:	4601      	mov	r1, r0
 8014bb2:	4803      	ldr	r0, [pc, #12]	; (8014bc0 <vsniprintf+0x18>)
 8014bb4:	6800      	ldr	r0, [r0, #0]
 8014bb6:	f7ff ffcb 	bl	8014b50 <_vsniprintf_r>
 8014bba:	b003      	add	sp, #12
 8014bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bc0:	20000194 	.word	0x20000194

08014bc4 <__malloc_lock>:
 8014bc4:	4770      	bx	lr

08014bc6 <__malloc_unlock>:
 8014bc6:	4770      	bx	lr

08014bc8 <__ssputs_r>:
 8014bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bcc:	688e      	ldr	r6, [r1, #8]
 8014bce:	429e      	cmp	r6, r3
 8014bd0:	4682      	mov	sl, r0
 8014bd2:	460c      	mov	r4, r1
 8014bd4:	4690      	mov	r8, r2
 8014bd6:	4699      	mov	r9, r3
 8014bd8:	d837      	bhi.n	8014c4a <__ssputs_r+0x82>
 8014bda:	898a      	ldrh	r2, [r1, #12]
 8014bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014be0:	d031      	beq.n	8014c46 <__ssputs_r+0x7e>
 8014be2:	6825      	ldr	r5, [r4, #0]
 8014be4:	6909      	ldr	r1, [r1, #16]
 8014be6:	1a6f      	subs	r7, r5, r1
 8014be8:	6965      	ldr	r5, [r4, #20]
 8014bea:	2302      	movs	r3, #2
 8014bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bf0:	fb95 f5f3 	sdiv	r5, r5, r3
 8014bf4:	f109 0301 	add.w	r3, r9, #1
 8014bf8:	443b      	add	r3, r7
 8014bfa:	429d      	cmp	r5, r3
 8014bfc:	bf38      	it	cc
 8014bfe:	461d      	movcc	r5, r3
 8014c00:	0553      	lsls	r3, r2, #21
 8014c02:	d530      	bpl.n	8014c66 <__ssputs_r+0x9e>
 8014c04:	4629      	mov	r1, r5
 8014c06:	f7ff ff05 	bl	8014a14 <_malloc_r>
 8014c0a:	4606      	mov	r6, r0
 8014c0c:	b950      	cbnz	r0, 8014c24 <__ssputs_r+0x5c>
 8014c0e:	230c      	movs	r3, #12
 8014c10:	f8ca 3000 	str.w	r3, [sl]
 8014c14:	89a3      	ldrh	r3, [r4, #12]
 8014c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c1a:	81a3      	strh	r3, [r4, #12]
 8014c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c24:	463a      	mov	r2, r7
 8014c26:	6921      	ldr	r1, [r4, #16]
 8014c28:	f7ff fe92 	bl	8014950 <memcpy>
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c36:	81a3      	strh	r3, [r4, #12]
 8014c38:	6126      	str	r6, [r4, #16]
 8014c3a:	6165      	str	r5, [r4, #20]
 8014c3c:	443e      	add	r6, r7
 8014c3e:	1bed      	subs	r5, r5, r7
 8014c40:	6026      	str	r6, [r4, #0]
 8014c42:	60a5      	str	r5, [r4, #8]
 8014c44:	464e      	mov	r6, r9
 8014c46:	454e      	cmp	r6, r9
 8014c48:	d900      	bls.n	8014c4c <__ssputs_r+0x84>
 8014c4a:	464e      	mov	r6, r9
 8014c4c:	4632      	mov	r2, r6
 8014c4e:	4641      	mov	r1, r8
 8014c50:	6820      	ldr	r0, [r4, #0]
 8014c52:	f000 fa93 	bl	801517c <memmove>
 8014c56:	68a3      	ldr	r3, [r4, #8]
 8014c58:	1b9b      	subs	r3, r3, r6
 8014c5a:	60a3      	str	r3, [r4, #8]
 8014c5c:	6823      	ldr	r3, [r4, #0]
 8014c5e:	441e      	add	r6, r3
 8014c60:	6026      	str	r6, [r4, #0]
 8014c62:	2000      	movs	r0, #0
 8014c64:	e7dc      	b.n	8014c20 <__ssputs_r+0x58>
 8014c66:	462a      	mov	r2, r5
 8014c68:	f000 faa1 	bl	80151ae <_realloc_r>
 8014c6c:	4606      	mov	r6, r0
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d1e2      	bne.n	8014c38 <__ssputs_r+0x70>
 8014c72:	6921      	ldr	r1, [r4, #16]
 8014c74:	4650      	mov	r0, sl
 8014c76:	f7ff fe7f 	bl	8014978 <_free_r>
 8014c7a:	e7c8      	b.n	8014c0e <__ssputs_r+0x46>

08014c7c <_svfiprintf_r>:
 8014c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c80:	461d      	mov	r5, r3
 8014c82:	898b      	ldrh	r3, [r1, #12]
 8014c84:	061f      	lsls	r7, r3, #24
 8014c86:	b09d      	sub	sp, #116	; 0x74
 8014c88:	4680      	mov	r8, r0
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	4616      	mov	r6, r2
 8014c8e:	d50f      	bpl.n	8014cb0 <_svfiprintf_r+0x34>
 8014c90:	690b      	ldr	r3, [r1, #16]
 8014c92:	b96b      	cbnz	r3, 8014cb0 <_svfiprintf_r+0x34>
 8014c94:	2140      	movs	r1, #64	; 0x40
 8014c96:	f7ff febd 	bl	8014a14 <_malloc_r>
 8014c9a:	6020      	str	r0, [r4, #0]
 8014c9c:	6120      	str	r0, [r4, #16]
 8014c9e:	b928      	cbnz	r0, 8014cac <_svfiprintf_r+0x30>
 8014ca0:	230c      	movs	r3, #12
 8014ca2:	f8c8 3000 	str.w	r3, [r8]
 8014ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8014caa:	e0c8      	b.n	8014e3e <_svfiprintf_r+0x1c2>
 8014cac:	2340      	movs	r3, #64	; 0x40
 8014cae:	6163      	str	r3, [r4, #20]
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8014cb4:	2320      	movs	r3, #32
 8014cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cba:	2330      	movs	r3, #48	; 0x30
 8014cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cc0:	9503      	str	r5, [sp, #12]
 8014cc2:	f04f 0b01 	mov.w	fp, #1
 8014cc6:	4637      	mov	r7, r6
 8014cc8:	463d      	mov	r5, r7
 8014cca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014cce:	b10b      	cbz	r3, 8014cd4 <_svfiprintf_r+0x58>
 8014cd0:	2b25      	cmp	r3, #37	; 0x25
 8014cd2:	d13e      	bne.n	8014d52 <_svfiprintf_r+0xd6>
 8014cd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8014cd8:	d00b      	beq.n	8014cf2 <_svfiprintf_r+0x76>
 8014cda:	4653      	mov	r3, sl
 8014cdc:	4632      	mov	r2, r6
 8014cde:	4621      	mov	r1, r4
 8014ce0:	4640      	mov	r0, r8
 8014ce2:	f7ff ff71 	bl	8014bc8 <__ssputs_r>
 8014ce6:	3001      	adds	r0, #1
 8014ce8:	f000 80a4 	beq.w	8014e34 <_svfiprintf_r+0x1b8>
 8014cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cee:	4453      	add	r3, sl
 8014cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8014cf2:	783b      	ldrb	r3, [r7, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f000 809d 	beq.w	8014e34 <_svfiprintf_r+0x1b8>
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8014d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d04:	9304      	str	r3, [sp, #16]
 8014d06:	9307      	str	r3, [sp, #28]
 8014d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8014d0e:	462f      	mov	r7, r5
 8014d10:	2205      	movs	r2, #5
 8014d12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014d16:	4850      	ldr	r0, [pc, #320]	; (8014e58 <_svfiprintf_r+0x1dc>)
 8014d18:	f7eb fa82 	bl	8000220 <memchr>
 8014d1c:	9b04      	ldr	r3, [sp, #16]
 8014d1e:	b9d0      	cbnz	r0, 8014d56 <_svfiprintf_r+0xda>
 8014d20:	06d9      	lsls	r1, r3, #27
 8014d22:	bf44      	itt	mi
 8014d24:	2220      	movmi	r2, #32
 8014d26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d2a:	071a      	lsls	r2, r3, #28
 8014d2c:	bf44      	itt	mi
 8014d2e:	222b      	movmi	r2, #43	; 0x2b
 8014d30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d34:	782a      	ldrb	r2, [r5, #0]
 8014d36:	2a2a      	cmp	r2, #42	; 0x2a
 8014d38:	d015      	beq.n	8014d66 <_svfiprintf_r+0xea>
 8014d3a:	9a07      	ldr	r2, [sp, #28]
 8014d3c:	462f      	mov	r7, r5
 8014d3e:	2000      	movs	r0, #0
 8014d40:	250a      	movs	r5, #10
 8014d42:	4639      	mov	r1, r7
 8014d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d48:	3b30      	subs	r3, #48	; 0x30
 8014d4a:	2b09      	cmp	r3, #9
 8014d4c:	d94d      	bls.n	8014dea <_svfiprintf_r+0x16e>
 8014d4e:	b1b8      	cbz	r0, 8014d80 <_svfiprintf_r+0x104>
 8014d50:	e00f      	b.n	8014d72 <_svfiprintf_r+0xf6>
 8014d52:	462f      	mov	r7, r5
 8014d54:	e7b8      	b.n	8014cc8 <_svfiprintf_r+0x4c>
 8014d56:	4a40      	ldr	r2, [pc, #256]	; (8014e58 <_svfiprintf_r+0x1dc>)
 8014d58:	1a80      	subs	r0, r0, r2
 8014d5a:	fa0b f000 	lsl.w	r0, fp, r0
 8014d5e:	4318      	orrs	r0, r3
 8014d60:	9004      	str	r0, [sp, #16]
 8014d62:	463d      	mov	r5, r7
 8014d64:	e7d3      	b.n	8014d0e <_svfiprintf_r+0x92>
 8014d66:	9a03      	ldr	r2, [sp, #12]
 8014d68:	1d11      	adds	r1, r2, #4
 8014d6a:	6812      	ldr	r2, [r2, #0]
 8014d6c:	9103      	str	r1, [sp, #12]
 8014d6e:	2a00      	cmp	r2, #0
 8014d70:	db01      	blt.n	8014d76 <_svfiprintf_r+0xfa>
 8014d72:	9207      	str	r2, [sp, #28]
 8014d74:	e004      	b.n	8014d80 <_svfiprintf_r+0x104>
 8014d76:	4252      	negs	r2, r2
 8014d78:	f043 0302 	orr.w	r3, r3, #2
 8014d7c:	9207      	str	r2, [sp, #28]
 8014d7e:	9304      	str	r3, [sp, #16]
 8014d80:	783b      	ldrb	r3, [r7, #0]
 8014d82:	2b2e      	cmp	r3, #46	; 0x2e
 8014d84:	d10c      	bne.n	8014da0 <_svfiprintf_r+0x124>
 8014d86:	787b      	ldrb	r3, [r7, #1]
 8014d88:	2b2a      	cmp	r3, #42	; 0x2a
 8014d8a:	d133      	bne.n	8014df4 <_svfiprintf_r+0x178>
 8014d8c:	9b03      	ldr	r3, [sp, #12]
 8014d8e:	1d1a      	adds	r2, r3, #4
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	9203      	str	r2, [sp, #12]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	bfb8      	it	lt
 8014d98:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d9c:	3702      	adds	r7, #2
 8014d9e:	9305      	str	r3, [sp, #20]
 8014da0:	4d2e      	ldr	r5, [pc, #184]	; (8014e5c <_svfiprintf_r+0x1e0>)
 8014da2:	7839      	ldrb	r1, [r7, #0]
 8014da4:	2203      	movs	r2, #3
 8014da6:	4628      	mov	r0, r5
 8014da8:	f7eb fa3a 	bl	8000220 <memchr>
 8014dac:	b138      	cbz	r0, 8014dbe <_svfiprintf_r+0x142>
 8014dae:	2340      	movs	r3, #64	; 0x40
 8014db0:	1b40      	subs	r0, r0, r5
 8014db2:	fa03 f000 	lsl.w	r0, r3, r0
 8014db6:	9b04      	ldr	r3, [sp, #16]
 8014db8:	4303      	orrs	r3, r0
 8014dba:	3701      	adds	r7, #1
 8014dbc:	9304      	str	r3, [sp, #16]
 8014dbe:	7839      	ldrb	r1, [r7, #0]
 8014dc0:	4827      	ldr	r0, [pc, #156]	; (8014e60 <_svfiprintf_r+0x1e4>)
 8014dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014dc6:	2206      	movs	r2, #6
 8014dc8:	1c7e      	adds	r6, r7, #1
 8014dca:	f7eb fa29 	bl	8000220 <memchr>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	d038      	beq.n	8014e44 <_svfiprintf_r+0x1c8>
 8014dd2:	4b24      	ldr	r3, [pc, #144]	; (8014e64 <_svfiprintf_r+0x1e8>)
 8014dd4:	bb13      	cbnz	r3, 8014e1c <_svfiprintf_r+0x1a0>
 8014dd6:	9b03      	ldr	r3, [sp, #12]
 8014dd8:	3307      	adds	r3, #7
 8014dda:	f023 0307 	bic.w	r3, r3, #7
 8014dde:	3308      	adds	r3, #8
 8014de0:	9303      	str	r3, [sp, #12]
 8014de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014de4:	444b      	add	r3, r9
 8014de6:	9309      	str	r3, [sp, #36]	; 0x24
 8014de8:	e76d      	b.n	8014cc6 <_svfiprintf_r+0x4a>
 8014dea:	fb05 3202 	mla	r2, r5, r2, r3
 8014dee:	2001      	movs	r0, #1
 8014df0:	460f      	mov	r7, r1
 8014df2:	e7a6      	b.n	8014d42 <_svfiprintf_r+0xc6>
 8014df4:	2300      	movs	r3, #0
 8014df6:	3701      	adds	r7, #1
 8014df8:	9305      	str	r3, [sp, #20]
 8014dfa:	4619      	mov	r1, r3
 8014dfc:	250a      	movs	r5, #10
 8014dfe:	4638      	mov	r0, r7
 8014e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e04:	3a30      	subs	r2, #48	; 0x30
 8014e06:	2a09      	cmp	r2, #9
 8014e08:	d903      	bls.n	8014e12 <_svfiprintf_r+0x196>
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d0c8      	beq.n	8014da0 <_svfiprintf_r+0x124>
 8014e0e:	9105      	str	r1, [sp, #20]
 8014e10:	e7c6      	b.n	8014da0 <_svfiprintf_r+0x124>
 8014e12:	fb05 2101 	mla	r1, r5, r1, r2
 8014e16:	2301      	movs	r3, #1
 8014e18:	4607      	mov	r7, r0
 8014e1a:	e7f0      	b.n	8014dfe <_svfiprintf_r+0x182>
 8014e1c:	ab03      	add	r3, sp, #12
 8014e1e:	9300      	str	r3, [sp, #0]
 8014e20:	4622      	mov	r2, r4
 8014e22:	4b11      	ldr	r3, [pc, #68]	; (8014e68 <_svfiprintf_r+0x1ec>)
 8014e24:	a904      	add	r1, sp, #16
 8014e26:	4640      	mov	r0, r8
 8014e28:	f3af 8000 	nop.w
 8014e2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014e30:	4681      	mov	r9, r0
 8014e32:	d1d6      	bne.n	8014de2 <_svfiprintf_r+0x166>
 8014e34:	89a3      	ldrh	r3, [r4, #12]
 8014e36:	065b      	lsls	r3, r3, #25
 8014e38:	f53f af35 	bmi.w	8014ca6 <_svfiprintf_r+0x2a>
 8014e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e3e:	b01d      	add	sp, #116	; 0x74
 8014e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e44:	ab03      	add	r3, sp, #12
 8014e46:	9300      	str	r3, [sp, #0]
 8014e48:	4622      	mov	r2, r4
 8014e4a:	4b07      	ldr	r3, [pc, #28]	; (8014e68 <_svfiprintf_r+0x1ec>)
 8014e4c:	a904      	add	r1, sp, #16
 8014e4e:	4640      	mov	r0, r8
 8014e50:	f000 f882 	bl	8014f58 <_printf_i>
 8014e54:	e7ea      	b.n	8014e2c <_svfiprintf_r+0x1b0>
 8014e56:	bf00      	nop
 8014e58:	08016a08 	.word	0x08016a08
 8014e5c:	08016a0e 	.word	0x08016a0e
 8014e60:	08016a12 	.word	0x08016a12
 8014e64:	00000000 	.word	0x00000000
 8014e68:	08014bc9 	.word	0x08014bc9

08014e6c <_printf_common>:
 8014e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e70:	4691      	mov	r9, r2
 8014e72:	461f      	mov	r7, r3
 8014e74:	688a      	ldr	r2, [r1, #8]
 8014e76:	690b      	ldr	r3, [r1, #16]
 8014e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	bfb8      	it	lt
 8014e80:	4613      	movlt	r3, r2
 8014e82:	f8c9 3000 	str.w	r3, [r9]
 8014e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e8a:	4606      	mov	r6, r0
 8014e8c:	460c      	mov	r4, r1
 8014e8e:	b112      	cbz	r2, 8014e96 <_printf_common+0x2a>
 8014e90:	3301      	adds	r3, #1
 8014e92:	f8c9 3000 	str.w	r3, [r9]
 8014e96:	6823      	ldr	r3, [r4, #0]
 8014e98:	0699      	lsls	r1, r3, #26
 8014e9a:	bf42      	ittt	mi
 8014e9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014ea0:	3302      	addmi	r3, #2
 8014ea2:	f8c9 3000 	strmi.w	r3, [r9]
 8014ea6:	6825      	ldr	r5, [r4, #0]
 8014ea8:	f015 0506 	ands.w	r5, r5, #6
 8014eac:	d107      	bne.n	8014ebe <_printf_common+0x52>
 8014eae:	f104 0a19 	add.w	sl, r4, #25
 8014eb2:	68e3      	ldr	r3, [r4, #12]
 8014eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8014eb8:	1a9b      	subs	r3, r3, r2
 8014eba:	42ab      	cmp	r3, r5
 8014ebc:	dc28      	bgt.n	8014f10 <_printf_common+0xa4>
 8014ebe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014ec2:	6822      	ldr	r2, [r4, #0]
 8014ec4:	3300      	adds	r3, #0
 8014ec6:	bf18      	it	ne
 8014ec8:	2301      	movne	r3, #1
 8014eca:	0692      	lsls	r2, r2, #26
 8014ecc:	d42d      	bmi.n	8014f2a <_printf_common+0xbe>
 8014ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ed2:	4639      	mov	r1, r7
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	47c0      	blx	r8
 8014ed8:	3001      	adds	r0, #1
 8014eda:	d020      	beq.n	8014f1e <_printf_common+0xb2>
 8014edc:	6823      	ldr	r3, [r4, #0]
 8014ede:	68e5      	ldr	r5, [r4, #12]
 8014ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8014ee4:	f003 0306 	and.w	r3, r3, #6
 8014ee8:	2b04      	cmp	r3, #4
 8014eea:	bf08      	it	eq
 8014eec:	1aad      	subeq	r5, r5, r2
 8014eee:	68a3      	ldr	r3, [r4, #8]
 8014ef0:	6922      	ldr	r2, [r4, #16]
 8014ef2:	bf0c      	ite	eq
 8014ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ef8:	2500      	movne	r5, #0
 8014efa:	4293      	cmp	r3, r2
 8014efc:	bfc4      	itt	gt
 8014efe:	1a9b      	subgt	r3, r3, r2
 8014f00:	18ed      	addgt	r5, r5, r3
 8014f02:	f04f 0900 	mov.w	r9, #0
 8014f06:	341a      	adds	r4, #26
 8014f08:	454d      	cmp	r5, r9
 8014f0a:	d11a      	bne.n	8014f42 <_printf_common+0xd6>
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	e008      	b.n	8014f22 <_printf_common+0xb6>
 8014f10:	2301      	movs	r3, #1
 8014f12:	4652      	mov	r2, sl
 8014f14:	4639      	mov	r1, r7
 8014f16:	4630      	mov	r0, r6
 8014f18:	47c0      	blx	r8
 8014f1a:	3001      	adds	r0, #1
 8014f1c:	d103      	bne.n	8014f26 <_printf_common+0xba>
 8014f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8014f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f26:	3501      	adds	r5, #1
 8014f28:	e7c3      	b.n	8014eb2 <_printf_common+0x46>
 8014f2a:	18e1      	adds	r1, r4, r3
 8014f2c:	1c5a      	adds	r2, r3, #1
 8014f2e:	2030      	movs	r0, #48	; 0x30
 8014f30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f34:	4422      	add	r2, r4
 8014f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f3e:	3302      	adds	r3, #2
 8014f40:	e7c5      	b.n	8014ece <_printf_common+0x62>
 8014f42:	2301      	movs	r3, #1
 8014f44:	4622      	mov	r2, r4
 8014f46:	4639      	mov	r1, r7
 8014f48:	4630      	mov	r0, r6
 8014f4a:	47c0      	blx	r8
 8014f4c:	3001      	adds	r0, #1
 8014f4e:	d0e6      	beq.n	8014f1e <_printf_common+0xb2>
 8014f50:	f109 0901 	add.w	r9, r9, #1
 8014f54:	e7d8      	b.n	8014f08 <_printf_common+0x9c>
	...

08014f58 <_printf_i>:
 8014f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014f60:	460c      	mov	r4, r1
 8014f62:	7e09      	ldrb	r1, [r1, #24]
 8014f64:	b085      	sub	sp, #20
 8014f66:	296e      	cmp	r1, #110	; 0x6e
 8014f68:	4617      	mov	r7, r2
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	4698      	mov	r8, r3
 8014f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f70:	f000 80b3 	beq.w	80150da <_printf_i+0x182>
 8014f74:	d822      	bhi.n	8014fbc <_printf_i+0x64>
 8014f76:	2963      	cmp	r1, #99	; 0x63
 8014f78:	d036      	beq.n	8014fe8 <_printf_i+0x90>
 8014f7a:	d80a      	bhi.n	8014f92 <_printf_i+0x3a>
 8014f7c:	2900      	cmp	r1, #0
 8014f7e:	f000 80b9 	beq.w	80150f4 <_printf_i+0x19c>
 8014f82:	2958      	cmp	r1, #88	; 0x58
 8014f84:	f000 8083 	beq.w	801508e <_printf_i+0x136>
 8014f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014f90:	e032      	b.n	8014ff8 <_printf_i+0xa0>
 8014f92:	2964      	cmp	r1, #100	; 0x64
 8014f94:	d001      	beq.n	8014f9a <_printf_i+0x42>
 8014f96:	2969      	cmp	r1, #105	; 0x69
 8014f98:	d1f6      	bne.n	8014f88 <_printf_i+0x30>
 8014f9a:	6820      	ldr	r0, [r4, #0]
 8014f9c:	6813      	ldr	r3, [r2, #0]
 8014f9e:	0605      	lsls	r5, r0, #24
 8014fa0:	f103 0104 	add.w	r1, r3, #4
 8014fa4:	d52a      	bpl.n	8014ffc <_printf_i+0xa4>
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	6011      	str	r1, [r2, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	da03      	bge.n	8014fb6 <_printf_i+0x5e>
 8014fae:	222d      	movs	r2, #45	; 0x2d
 8014fb0:	425b      	negs	r3, r3
 8014fb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014fb6:	486f      	ldr	r0, [pc, #444]	; (8015174 <_printf_i+0x21c>)
 8014fb8:	220a      	movs	r2, #10
 8014fba:	e039      	b.n	8015030 <_printf_i+0xd8>
 8014fbc:	2973      	cmp	r1, #115	; 0x73
 8014fbe:	f000 809d 	beq.w	80150fc <_printf_i+0x1a4>
 8014fc2:	d808      	bhi.n	8014fd6 <_printf_i+0x7e>
 8014fc4:	296f      	cmp	r1, #111	; 0x6f
 8014fc6:	d020      	beq.n	801500a <_printf_i+0xb2>
 8014fc8:	2970      	cmp	r1, #112	; 0x70
 8014fca:	d1dd      	bne.n	8014f88 <_printf_i+0x30>
 8014fcc:	6823      	ldr	r3, [r4, #0]
 8014fce:	f043 0320 	orr.w	r3, r3, #32
 8014fd2:	6023      	str	r3, [r4, #0]
 8014fd4:	e003      	b.n	8014fde <_printf_i+0x86>
 8014fd6:	2975      	cmp	r1, #117	; 0x75
 8014fd8:	d017      	beq.n	801500a <_printf_i+0xb2>
 8014fda:	2978      	cmp	r1, #120	; 0x78
 8014fdc:	d1d4      	bne.n	8014f88 <_printf_i+0x30>
 8014fde:	2378      	movs	r3, #120	; 0x78
 8014fe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014fe4:	4864      	ldr	r0, [pc, #400]	; (8015178 <_printf_i+0x220>)
 8014fe6:	e055      	b.n	8015094 <_printf_i+0x13c>
 8014fe8:	6813      	ldr	r3, [r2, #0]
 8014fea:	1d19      	adds	r1, r3, #4
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	6011      	str	r1, [r2, #0]
 8014ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e08c      	b.n	8015116 <_printf_i+0x1be>
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	6011      	str	r1, [r2, #0]
 8015000:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015004:	bf18      	it	ne
 8015006:	b21b      	sxthne	r3, r3
 8015008:	e7cf      	b.n	8014faa <_printf_i+0x52>
 801500a:	6813      	ldr	r3, [r2, #0]
 801500c:	6825      	ldr	r5, [r4, #0]
 801500e:	1d18      	adds	r0, r3, #4
 8015010:	6010      	str	r0, [r2, #0]
 8015012:	0628      	lsls	r0, r5, #24
 8015014:	d501      	bpl.n	801501a <_printf_i+0xc2>
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	e002      	b.n	8015020 <_printf_i+0xc8>
 801501a:	0668      	lsls	r0, r5, #25
 801501c:	d5fb      	bpl.n	8015016 <_printf_i+0xbe>
 801501e:	881b      	ldrh	r3, [r3, #0]
 8015020:	4854      	ldr	r0, [pc, #336]	; (8015174 <_printf_i+0x21c>)
 8015022:	296f      	cmp	r1, #111	; 0x6f
 8015024:	bf14      	ite	ne
 8015026:	220a      	movne	r2, #10
 8015028:	2208      	moveq	r2, #8
 801502a:	2100      	movs	r1, #0
 801502c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015030:	6865      	ldr	r5, [r4, #4]
 8015032:	60a5      	str	r5, [r4, #8]
 8015034:	2d00      	cmp	r5, #0
 8015036:	f2c0 8095 	blt.w	8015164 <_printf_i+0x20c>
 801503a:	6821      	ldr	r1, [r4, #0]
 801503c:	f021 0104 	bic.w	r1, r1, #4
 8015040:	6021      	str	r1, [r4, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d13d      	bne.n	80150c2 <_printf_i+0x16a>
 8015046:	2d00      	cmp	r5, #0
 8015048:	f040 808e 	bne.w	8015168 <_printf_i+0x210>
 801504c:	4665      	mov	r5, ip
 801504e:	2a08      	cmp	r2, #8
 8015050:	d10b      	bne.n	801506a <_printf_i+0x112>
 8015052:	6823      	ldr	r3, [r4, #0]
 8015054:	07db      	lsls	r3, r3, #31
 8015056:	d508      	bpl.n	801506a <_printf_i+0x112>
 8015058:	6923      	ldr	r3, [r4, #16]
 801505a:	6862      	ldr	r2, [r4, #4]
 801505c:	429a      	cmp	r2, r3
 801505e:	bfde      	ittt	le
 8015060:	2330      	movle	r3, #48	; 0x30
 8015062:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015066:	f105 35ff 	addle.w	r5, r5, #4294967295
 801506a:	ebac 0305 	sub.w	r3, ip, r5
 801506e:	6123      	str	r3, [r4, #16]
 8015070:	f8cd 8000 	str.w	r8, [sp]
 8015074:	463b      	mov	r3, r7
 8015076:	aa03      	add	r2, sp, #12
 8015078:	4621      	mov	r1, r4
 801507a:	4630      	mov	r0, r6
 801507c:	f7ff fef6 	bl	8014e6c <_printf_common>
 8015080:	3001      	adds	r0, #1
 8015082:	d14d      	bne.n	8015120 <_printf_i+0x1c8>
 8015084:	f04f 30ff 	mov.w	r0, #4294967295
 8015088:	b005      	add	sp, #20
 801508a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801508e:	4839      	ldr	r0, [pc, #228]	; (8015174 <_printf_i+0x21c>)
 8015090:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015094:	6813      	ldr	r3, [r2, #0]
 8015096:	6821      	ldr	r1, [r4, #0]
 8015098:	1d1d      	adds	r5, r3, #4
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	6015      	str	r5, [r2, #0]
 801509e:	060a      	lsls	r2, r1, #24
 80150a0:	d50b      	bpl.n	80150ba <_printf_i+0x162>
 80150a2:	07ca      	lsls	r2, r1, #31
 80150a4:	bf44      	itt	mi
 80150a6:	f041 0120 	orrmi.w	r1, r1, #32
 80150aa:	6021      	strmi	r1, [r4, #0]
 80150ac:	b91b      	cbnz	r3, 80150b6 <_printf_i+0x15e>
 80150ae:	6822      	ldr	r2, [r4, #0]
 80150b0:	f022 0220 	bic.w	r2, r2, #32
 80150b4:	6022      	str	r2, [r4, #0]
 80150b6:	2210      	movs	r2, #16
 80150b8:	e7b7      	b.n	801502a <_printf_i+0xd2>
 80150ba:	064d      	lsls	r5, r1, #25
 80150bc:	bf48      	it	mi
 80150be:	b29b      	uxthmi	r3, r3
 80150c0:	e7ef      	b.n	80150a2 <_printf_i+0x14a>
 80150c2:	4665      	mov	r5, ip
 80150c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80150c8:	fb02 3311 	mls	r3, r2, r1, r3
 80150cc:	5cc3      	ldrb	r3, [r0, r3]
 80150ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80150d2:	460b      	mov	r3, r1
 80150d4:	2900      	cmp	r1, #0
 80150d6:	d1f5      	bne.n	80150c4 <_printf_i+0x16c>
 80150d8:	e7b9      	b.n	801504e <_printf_i+0xf6>
 80150da:	6813      	ldr	r3, [r2, #0]
 80150dc:	6825      	ldr	r5, [r4, #0]
 80150de:	6961      	ldr	r1, [r4, #20]
 80150e0:	1d18      	adds	r0, r3, #4
 80150e2:	6010      	str	r0, [r2, #0]
 80150e4:	0628      	lsls	r0, r5, #24
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	d501      	bpl.n	80150ee <_printf_i+0x196>
 80150ea:	6019      	str	r1, [r3, #0]
 80150ec:	e002      	b.n	80150f4 <_printf_i+0x19c>
 80150ee:	066a      	lsls	r2, r5, #25
 80150f0:	d5fb      	bpl.n	80150ea <_printf_i+0x192>
 80150f2:	8019      	strh	r1, [r3, #0]
 80150f4:	2300      	movs	r3, #0
 80150f6:	6123      	str	r3, [r4, #16]
 80150f8:	4665      	mov	r5, ip
 80150fa:	e7b9      	b.n	8015070 <_printf_i+0x118>
 80150fc:	6813      	ldr	r3, [r2, #0]
 80150fe:	1d19      	adds	r1, r3, #4
 8015100:	6011      	str	r1, [r2, #0]
 8015102:	681d      	ldr	r5, [r3, #0]
 8015104:	6862      	ldr	r2, [r4, #4]
 8015106:	2100      	movs	r1, #0
 8015108:	4628      	mov	r0, r5
 801510a:	f7eb f889 	bl	8000220 <memchr>
 801510e:	b108      	cbz	r0, 8015114 <_printf_i+0x1bc>
 8015110:	1b40      	subs	r0, r0, r5
 8015112:	6060      	str	r0, [r4, #4]
 8015114:	6863      	ldr	r3, [r4, #4]
 8015116:	6123      	str	r3, [r4, #16]
 8015118:	2300      	movs	r3, #0
 801511a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801511e:	e7a7      	b.n	8015070 <_printf_i+0x118>
 8015120:	6923      	ldr	r3, [r4, #16]
 8015122:	462a      	mov	r2, r5
 8015124:	4639      	mov	r1, r7
 8015126:	4630      	mov	r0, r6
 8015128:	47c0      	blx	r8
 801512a:	3001      	adds	r0, #1
 801512c:	d0aa      	beq.n	8015084 <_printf_i+0x12c>
 801512e:	6823      	ldr	r3, [r4, #0]
 8015130:	079b      	lsls	r3, r3, #30
 8015132:	d413      	bmi.n	801515c <_printf_i+0x204>
 8015134:	68e0      	ldr	r0, [r4, #12]
 8015136:	9b03      	ldr	r3, [sp, #12]
 8015138:	4298      	cmp	r0, r3
 801513a:	bfb8      	it	lt
 801513c:	4618      	movlt	r0, r3
 801513e:	e7a3      	b.n	8015088 <_printf_i+0x130>
 8015140:	2301      	movs	r3, #1
 8015142:	464a      	mov	r2, r9
 8015144:	4639      	mov	r1, r7
 8015146:	4630      	mov	r0, r6
 8015148:	47c0      	blx	r8
 801514a:	3001      	adds	r0, #1
 801514c:	d09a      	beq.n	8015084 <_printf_i+0x12c>
 801514e:	3501      	adds	r5, #1
 8015150:	68e3      	ldr	r3, [r4, #12]
 8015152:	9a03      	ldr	r2, [sp, #12]
 8015154:	1a9b      	subs	r3, r3, r2
 8015156:	42ab      	cmp	r3, r5
 8015158:	dcf2      	bgt.n	8015140 <_printf_i+0x1e8>
 801515a:	e7eb      	b.n	8015134 <_printf_i+0x1dc>
 801515c:	2500      	movs	r5, #0
 801515e:	f104 0919 	add.w	r9, r4, #25
 8015162:	e7f5      	b.n	8015150 <_printf_i+0x1f8>
 8015164:	2b00      	cmp	r3, #0
 8015166:	d1ac      	bne.n	80150c2 <_printf_i+0x16a>
 8015168:	7803      	ldrb	r3, [r0, #0]
 801516a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801516e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015172:	e76c      	b.n	801504e <_printf_i+0xf6>
 8015174:	08016a19 	.word	0x08016a19
 8015178:	08016a2a 	.word	0x08016a2a

0801517c <memmove>:
 801517c:	4288      	cmp	r0, r1
 801517e:	b510      	push	{r4, lr}
 8015180:	eb01 0302 	add.w	r3, r1, r2
 8015184:	d807      	bhi.n	8015196 <memmove+0x1a>
 8015186:	1e42      	subs	r2, r0, #1
 8015188:	4299      	cmp	r1, r3
 801518a:	d00a      	beq.n	80151a2 <memmove+0x26>
 801518c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015190:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015194:	e7f8      	b.n	8015188 <memmove+0xc>
 8015196:	4283      	cmp	r3, r0
 8015198:	d9f5      	bls.n	8015186 <memmove+0xa>
 801519a:	1881      	adds	r1, r0, r2
 801519c:	1ad2      	subs	r2, r2, r3
 801519e:	42d3      	cmn	r3, r2
 80151a0:	d100      	bne.n	80151a4 <memmove+0x28>
 80151a2:	bd10      	pop	{r4, pc}
 80151a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80151ac:	e7f7      	b.n	801519e <memmove+0x22>

080151ae <_realloc_r>:
 80151ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b0:	4607      	mov	r7, r0
 80151b2:	4614      	mov	r4, r2
 80151b4:	460e      	mov	r6, r1
 80151b6:	b921      	cbnz	r1, 80151c2 <_realloc_r+0x14>
 80151b8:	4611      	mov	r1, r2
 80151ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80151be:	f7ff bc29 	b.w	8014a14 <_malloc_r>
 80151c2:	b922      	cbnz	r2, 80151ce <_realloc_r+0x20>
 80151c4:	f7ff fbd8 	bl	8014978 <_free_r>
 80151c8:	4625      	mov	r5, r4
 80151ca:	4628      	mov	r0, r5
 80151cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151ce:	f000 f814 	bl	80151fa <_malloc_usable_size_r>
 80151d2:	42a0      	cmp	r0, r4
 80151d4:	d20f      	bcs.n	80151f6 <_realloc_r+0x48>
 80151d6:	4621      	mov	r1, r4
 80151d8:	4638      	mov	r0, r7
 80151da:	f7ff fc1b 	bl	8014a14 <_malloc_r>
 80151de:	4605      	mov	r5, r0
 80151e0:	2800      	cmp	r0, #0
 80151e2:	d0f2      	beq.n	80151ca <_realloc_r+0x1c>
 80151e4:	4631      	mov	r1, r6
 80151e6:	4622      	mov	r2, r4
 80151e8:	f7ff fbb2 	bl	8014950 <memcpy>
 80151ec:	4631      	mov	r1, r6
 80151ee:	4638      	mov	r0, r7
 80151f0:	f7ff fbc2 	bl	8014978 <_free_r>
 80151f4:	e7e9      	b.n	80151ca <_realloc_r+0x1c>
 80151f6:	4635      	mov	r5, r6
 80151f8:	e7e7      	b.n	80151ca <_realloc_r+0x1c>

080151fa <_malloc_usable_size_r>:
 80151fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151fe:	1f18      	subs	r0, r3, #4
 8015200:	2b00      	cmp	r3, #0
 8015202:	bfbc      	itt	lt
 8015204:	580b      	ldrlt	r3, [r1, r0]
 8015206:	18c0      	addlt	r0, r0, r3
 8015208:	4770      	bx	lr

0801520a <fmax>:
 801520a:	b508      	push	{r3, lr}
 801520c:	ed2d 8b04 	vpush	{d8-d9}
 8015210:	eeb0 8a40 	vmov.f32	s16, s0
 8015214:	eef0 8a60 	vmov.f32	s17, s1
 8015218:	eeb0 9a41 	vmov.f32	s18, s2
 801521c:	eef0 9a61 	vmov.f32	s19, s3
 8015220:	f000 f842 	bl	80152a8 <__fpclassifyd>
 8015224:	b168      	cbz	r0, 8015242 <fmax+0x38>
 8015226:	eeb0 0a49 	vmov.f32	s0, s18
 801522a:	eef0 0a69 	vmov.f32	s1, s19
 801522e:	f000 f83b 	bl	80152a8 <__fpclassifyd>
 8015232:	b150      	cbz	r0, 801524a <fmax+0x40>
 8015234:	ec53 2b19 	vmov	r2, r3, d9
 8015238:	ec51 0b18 	vmov	r0, r1, d8
 801523c:	f7eb fc8c 	bl	8000b58 <__aeabi_dcmpgt>
 8015240:	b918      	cbnz	r0, 801524a <fmax+0x40>
 8015242:	eeb0 8a49 	vmov.f32	s16, s18
 8015246:	eef0 8a69 	vmov.f32	s17, s19
 801524a:	eeb0 0a48 	vmov.f32	s0, s16
 801524e:	eef0 0a68 	vmov.f32	s1, s17
 8015252:	ecbd 8b04 	vpop	{d8-d9}
 8015256:	bd08      	pop	{r3, pc}

08015258 <fmin>:
 8015258:	b508      	push	{r3, lr}
 801525a:	ed2d 8b04 	vpush	{d8-d9}
 801525e:	eeb0 8a40 	vmov.f32	s16, s0
 8015262:	eef0 8a60 	vmov.f32	s17, s1
 8015266:	eeb0 9a41 	vmov.f32	s18, s2
 801526a:	eef0 9a61 	vmov.f32	s19, s3
 801526e:	f000 f81b 	bl	80152a8 <__fpclassifyd>
 8015272:	b168      	cbz	r0, 8015290 <fmin+0x38>
 8015274:	eeb0 0a49 	vmov.f32	s0, s18
 8015278:	eef0 0a69 	vmov.f32	s1, s19
 801527c:	f000 f814 	bl	80152a8 <__fpclassifyd>
 8015280:	b150      	cbz	r0, 8015298 <fmin+0x40>
 8015282:	ec53 2b19 	vmov	r2, r3, d9
 8015286:	ec51 0b18 	vmov	r0, r1, d8
 801528a:	f7eb fc47 	bl	8000b1c <__aeabi_dcmplt>
 801528e:	b918      	cbnz	r0, 8015298 <fmin+0x40>
 8015290:	eeb0 8a49 	vmov.f32	s16, s18
 8015294:	eef0 8a69 	vmov.f32	s17, s19
 8015298:	eeb0 0a48 	vmov.f32	s0, s16
 801529c:	eef0 0a68 	vmov.f32	s1, s17
 80152a0:	ecbd 8b04 	vpop	{d8-d9}
 80152a4:	bd08      	pop	{r3, pc}
	...

080152a8 <__fpclassifyd>:
 80152a8:	ec51 0b10 	vmov	r0, r1, d0
 80152ac:	f031 4200 	bics.w	r2, r1, #2147483648	; 0x80000000
 80152b0:	b510      	push	{r4, lr}
 80152b2:	460b      	mov	r3, r1
 80152b4:	d01b      	beq.n	80152ee <__fpclassifyd+0x46>
 80152b6:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80152ba:	490f      	ldr	r1, [pc, #60]	; (80152f8 <__fpclassifyd+0x50>)
 80152bc:	428c      	cmp	r4, r1
 80152be:	d910      	bls.n	80152e2 <__fpclassifyd+0x3a>
 80152c0:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80152c4:	490c      	ldr	r1, [pc, #48]	; (80152f8 <__fpclassifyd+0x50>)
 80152c6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80152ca:	428b      	cmp	r3, r1
 80152cc:	d909      	bls.n	80152e2 <__fpclassifyd+0x3a>
 80152ce:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80152d2:	d308      	bcc.n	80152e6 <__fpclassifyd+0x3e>
 80152d4:	4b09      	ldr	r3, [pc, #36]	; (80152fc <__fpclassifyd+0x54>)
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d107      	bne.n	80152ea <__fpclassifyd+0x42>
 80152da:	fab0 f080 	clz	r0, r0
 80152de:	0940      	lsrs	r0, r0, #5
 80152e0:	bd10      	pop	{r4, pc}
 80152e2:	2004      	movs	r0, #4
 80152e4:	e7fc      	b.n	80152e0 <__fpclassifyd+0x38>
 80152e6:	2003      	movs	r0, #3
 80152e8:	e7fa      	b.n	80152e0 <__fpclassifyd+0x38>
 80152ea:	2000      	movs	r0, #0
 80152ec:	e7f8      	b.n	80152e0 <__fpclassifyd+0x38>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d1e6      	bne.n	80152c0 <__fpclassifyd+0x18>
 80152f2:	2002      	movs	r0, #2
 80152f4:	e7f4      	b.n	80152e0 <__fpclassifyd+0x38>
 80152f6:	bf00      	nop
 80152f8:	7fdfffff 	.word	0x7fdfffff
 80152fc:	7ff00000 	.word	0x7ff00000

08015300 <pow>:
 8015300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015304:	ed2d 8b04 	vpush	{d8-d9}
 8015308:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80155dc <pow+0x2dc>
 801530c:	b08d      	sub	sp, #52	; 0x34
 801530e:	ec57 6b10 	vmov	r6, r7, d0
 8015312:	ec55 4b11 	vmov	r4, r5, d1
 8015316:	f000 f963 	bl	80155e0 <__ieee754_pow>
 801531a:	f999 3000 	ldrsb.w	r3, [r9]
 801531e:	9300      	str	r3, [sp, #0]
 8015320:	3301      	adds	r3, #1
 8015322:	eeb0 8a40 	vmov.f32	s16, s0
 8015326:	eef0 8a60 	vmov.f32	s17, s1
 801532a:	46c8      	mov	r8, r9
 801532c:	d05f      	beq.n	80153ee <pow+0xee>
 801532e:	4622      	mov	r2, r4
 8015330:	462b      	mov	r3, r5
 8015332:	4620      	mov	r0, r4
 8015334:	4629      	mov	r1, r5
 8015336:	f7eb fc19 	bl	8000b6c <__aeabi_dcmpun>
 801533a:	4683      	mov	fp, r0
 801533c:	2800      	cmp	r0, #0
 801533e:	d156      	bne.n	80153ee <pow+0xee>
 8015340:	4632      	mov	r2, r6
 8015342:	463b      	mov	r3, r7
 8015344:	4630      	mov	r0, r6
 8015346:	4639      	mov	r1, r7
 8015348:	f7eb fc10 	bl	8000b6c <__aeabi_dcmpun>
 801534c:	9001      	str	r0, [sp, #4]
 801534e:	b1e8      	cbz	r0, 801538c <pow+0x8c>
 8015350:	2200      	movs	r2, #0
 8015352:	2300      	movs	r3, #0
 8015354:	4620      	mov	r0, r4
 8015356:	4629      	mov	r1, r5
 8015358:	f7eb fbd6 	bl	8000b08 <__aeabi_dcmpeq>
 801535c:	2800      	cmp	r0, #0
 801535e:	d046      	beq.n	80153ee <pow+0xee>
 8015360:	2301      	movs	r3, #1
 8015362:	9302      	str	r3, [sp, #8]
 8015364:	4b96      	ldr	r3, [pc, #600]	; (80155c0 <pow+0x2c0>)
 8015366:	9303      	str	r3, [sp, #12]
 8015368:	4b96      	ldr	r3, [pc, #600]	; (80155c4 <pow+0x2c4>)
 801536a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801536e:	2200      	movs	r2, #0
 8015370:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015374:	9b00      	ldr	r3, [sp, #0]
 8015376:	2b02      	cmp	r3, #2
 8015378:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801537c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015380:	d033      	beq.n	80153ea <pow+0xea>
 8015382:	a802      	add	r0, sp, #8
 8015384:	f000 fefb 	bl	801617e <matherr>
 8015388:	bb48      	cbnz	r0, 80153de <pow+0xde>
 801538a:	e05d      	b.n	8015448 <pow+0x148>
 801538c:	f04f 0a00 	mov.w	sl, #0
 8015390:	f04f 0b00 	mov.w	fp, #0
 8015394:	4652      	mov	r2, sl
 8015396:	465b      	mov	r3, fp
 8015398:	4630      	mov	r0, r6
 801539a:	4639      	mov	r1, r7
 801539c:	f7eb fbb4 	bl	8000b08 <__aeabi_dcmpeq>
 80153a0:	ec4b ab19 	vmov	d9, sl, fp
 80153a4:	2800      	cmp	r0, #0
 80153a6:	d054      	beq.n	8015452 <pow+0x152>
 80153a8:	4652      	mov	r2, sl
 80153aa:	465b      	mov	r3, fp
 80153ac:	4620      	mov	r0, r4
 80153ae:	4629      	mov	r1, r5
 80153b0:	f7eb fbaa 	bl	8000b08 <__aeabi_dcmpeq>
 80153b4:	4680      	mov	r8, r0
 80153b6:	b318      	cbz	r0, 8015400 <pow+0x100>
 80153b8:	2301      	movs	r3, #1
 80153ba:	9302      	str	r3, [sp, #8]
 80153bc:	4b80      	ldr	r3, [pc, #512]	; (80155c0 <pow+0x2c0>)
 80153be:	9303      	str	r3, [sp, #12]
 80153c0:	9b01      	ldr	r3, [sp, #4]
 80153c2:	930a      	str	r3, [sp, #40]	; 0x28
 80153c4:	9b00      	ldr	r3, [sp, #0]
 80153c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80153ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80153ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d0d5      	beq.n	8015382 <pow+0x82>
 80153d6:	4b7b      	ldr	r3, [pc, #492]	; (80155c4 <pow+0x2c4>)
 80153d8:	2200      	movs	r2, #0
 80153da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80153de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153e0:	b11b      	cbz	r3, 80153ea <pow+0xea>
 80153e2:	f7ff fa7b 	bl	80148dc <__errno>
 80153e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153e8:	6003      	str	r3, [r0, #0]
 80153ea:	ed9d 8b08 	vldr	d8, [sp, #32]
 80153ee:	eeb0 0a48 	vmov.f32	s0, s16
 80153f2:	eef0 0a68 	vmov.f32	s1, s17
 80153f6:	b00d      	add	sp, #52	; 0x34
 80153f8:	ecbd 8b04 	vpop	{d8-d9}
 80153fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015400:	ec45 4b10 	vmov	d0, r4, r5
 8015404:	f000 feb3 	bl	801616e <finite>
 8015408:	2800      	cmp	r0, #0
 801540a:	d0f0      	beq.n	80153ee <pow+0xee>
 801540c:	4652      	mov	r2, sl
 801540e:	465b      	mov	r3, fp
 8015410:	4620      	mov	r0, r4
 8015412:	4629      	mov	r1, r5
 8015414:	f7eb fb82 	bl	8000b1c <__aeabi_dcmplt>
 8015418:	2800      	cmp	r0, #0
 801541a:	d0e8      	beq.n	80153ee <pow+0xee>
 801541c:	2301      	movs	r3, #1
 801541e:	9302      	str	r3, [sp, #8]
 8015420:	4b67      	ldr	r3, [pc, #412]	; (80155c0 <pow+0x2c0>)
 8015422:	9303      	str	r3, [sp, #12]
 8015424:	f999 3000 	ldrsb.w	r3, [r9]
 8015428:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801542c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015430:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015434:	b913      	cbnz	r3, 801543c <pow+0x13c>
 8015436:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801543a:	e7a2      	b.n	8015382 <pow+0x82>
 801543c:	4962      	ldr	r1, [pc, #392]	; (80155c8 <pow+0x2c8>)
 801543e:	2000      	movs	r0, #0
 8015440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015444:	2b02      	cmp	r3, #2
 8015446:	d19c      	bne.n	8015382 <pow+0x82>
 8015448:	f7ff fa48 	bl	80148dc <__errno>
 801544c:	2321      	movs	r3, #33	; 0x21
 801544e:	6003      	str	r3, [r0, #0]
 8015450:	e7c5      	b.n	80153de <pow+0xde>
 8015452:	eeb0 0a48 	vmov.f32	s0, s16
 8015456:	eef0 0a68 	vmov.f32	s1, s17
 801545a:	f000 fe88 	bl	801616e <finite>
 801545e:	9000      	str	r0, [sp, #0]
 8015460:	2800      	cmp	r0, #0
 8015462:	f040 8081 	bne.w	8015568 <pow+0x268>
 8015466:	ec47 6b10 	vmov	d0, r6, r7
 801546a:	f000 fe80 	bl	801616e <finite>
 801546e:	2800      	cmp	r0, #0
 8015470:	d07a      	beq.n	8015568 <pow+0x268>
 8015472:	ec45 4b10 	vmov	d0, r4, r5
 8015476:	f000 fe7a 	bl	801616e <finite>
 801547a:	2800      	cmp	r0, #0
 801547c:	d074      	beq.n	8015568 <pow+0x268>
 801547e:	ec53 2b18 	vmov	r2, r3, d8
 8015482:	ee18 0a10 	vmov	r0, s16
 8015486:	4619      	mov	r1, r3
 8015488:	f7eb fb70 	bl	8000b6c <__aeabi_dcmpun>
 801548c:	f999 9000 	ldrsb.w	r9, [r9]
 8015490:	4b4b      	ldr	r3, [pc, #300]	; (80155c0 <pow+0x2c0>)
 8015492:	b1b0      	cbz	r0, 80154c2 <pow+0x1c2>
 8015494:	2201      	movs	r2, #1
 8015496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801549a:	9b00      	ldr	r3, [sp, #0]
 801549c:	930a      	str	r3, [sp, #40]	; 0x28
 801549e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80154a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80154a6:	f1b9 0f00 	cmp.w	r9, #0
 80154aa:	d0c4      	beq.n	8015436 <pow+0x136>
 80154ac:	4652      	mov	r2, sl
 80154ae:	465b      	mov	r3, fp
 80154b0:	4650      	mov	r0, sl
 80154b2:	4659      	mov	r1, fp
 80154b4:	f7eb f9ea 	bl	800088c <__aeabi_ddiv>
 80154b8:	f1b9 0f02 	cmp.w	r9, #2
 80154bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80154c0:	e7c1      	b.n	8015446 <pow+0x146>
 80154c2:	2203      	movs	r2, #3
 80154c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80154c8:	900a      	str	r0, [sp, #40]	; 0x28
 80154ca:	4629      	mov	r1, r5
 80154cc:	4620      	mov	r0, r4
 80154ce:	2200      	movs	r2, #0
 80154d0:	4b3e      	ldr	r3, [pc, #248]	; (80155cc <pow+0x2cc>)
 80154d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80154d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80154da:	f7eb f8ad 	bl	8000638 <__aeabi_dmul>
 80154de:	4604      	mov	r4, r0
 80154e0:	460d      	mov	r5, r1
 80154e2:	f1b9 0f00 	cmp.w	r9, #0
 80154e6:	d124      	bne.n	8015532 <pow+0x232>
 80154e8:	4b39      	ldr	r3, [pc, #228]	; (80155d0 <pow+0x2d0>)
 80154ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80154ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80154f2:	4630      	mov	r0, r6
 80154f4:	4652      	mov	r2, sl
 80154f6:	465b      	mov	r3, fp
 80154f8:	4639      	mov	r1, r7
 80154fa:	f7eb fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80154fe:	2800      	cmp	r0, #0
 8015500:	d056      	beq.n	80155b0 <pow+0x2b0>
 8015502:	ec45 4b10 	vmov	d0, r4, r5
 8015506:	f000 fe47 	bl	8016198 <rint>
 801550a:	4622      	mov	r2, r4
 801550c:	462b      	mov	r3, r5
 801550e:	ec51 0b10 	vmov	r0, r1, d0
 8015512:	f7eb faf9 	bl	8000b08 <__aeabi_dcmpeq>
 8015516:	b920      	cbnz	r0, 8015522 <pow+0x222>
 8015518:	4b2e      	ldr	r3, [pc, #184]	; (80155d4 <pow+0x2d4>)
 801551a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801551e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015522:	f998 3000 	ldrsb.w	r3, [r8]
 8015526:	2b02      	cmp	r3, #2
 8015528:	d142      	bne.n	80155b0 <pow+0x2b0>
 801552a:	f7ff f9d7 	bl	80148dc <__errno>
 801552e:	2322      	movs	r3, #34	; 0x22
 8015530:	e78d      	b.n	801544e <pow+0x14e>
 8015532:	4b29      	ldr	r3, [pc, #164]	; (80155d8 <pow+0x2d8>)
 8015534:	2200      	movs	r2, #0
 8015536:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801553a:	4630      	mov	r0, r6
 801553c:	4652      	mov	r2, sl
 801553e:	465b      	mov	r3, fp
 8015540:	4639      	mov	r1, r7
 8015542:	f7eb faeb 	bl	8000b1c <__aeabi_dcmplt>
 8015546:	2800      	cmp	r0, #0
 8015548:	d0eb      	beq.n	8015522 <pow+0x222>
 801554a:	ec45 4b10 	vmov	d0, r4, r5
 801554e:	f000 fe23 	bl	8016198 <rint>
 8015552:	4622      	mov	r2, r4
 8015554:	462b      	mov	r3, r5
 8015556:	ec51 0b10 	vmov	r0, r1, d0
 801555a:	f7eb fad5 	bl	8000b08 <__aeabi_dcmpeq>
 801555e:	2800      	cmp	r0, #0
 8015560:	d1df      	bne.n	8015522 <pow+0x222>
 8015562:	2200      	movs	r2, #0
 8015564:	4b18      	ldr	r3, [pc, #96]	; (80155c8 <pow+0x2c8>)
 8015566:	e7da      	b.n	801551e <pow+0x21e>
 8015568:	2200      	movs	r2, #0
 801556a:	2300      	movs	r3, #0
 801556c:	ec51 0b18 	vmov	r0, r1, d8
 8015570:	f7eb faca 	bl	8000b08 <__aeabi_dcmpeq>
 8015574:	2800      	cmp	r0, #0
 8015576:	f43f af3a 	beq.w	80153ee <pow+0xee>
 801557a:	ec47 6b10 	vmov	d0, r6, r7
 801557e:	f000 fdf6 	bl	801616e <finite>
 8015582:	2800      	cmp	r0, #0
 8015584:	f43f af33 	beq.w	80153ee <pow+0xee>
 8015588:	ec45 4b10 	vmov	d0, r4, r5
 801558c:	f000 fdef 	bl	801616e <finite>
 8015590:	2800      	cmp	r0, #0
 8015592:	f43f af2c 	beq.w	80153ee <pow+0xee>
 8015596:	2304      	movs	r3, #4
 8015598:	9302      	str	r3, [sp, #8]
 801559a:	4b09      	ldr	r3, [pc, #36]	; (80155c0 <pow+0x2c0>)
 801559c:	9303      	str	r3, [sp, #12]
 801559e:	2300      	movs	r3, #0
 80155a0:	930a      	str	r3, [sp, #40]	; 0x28
 80155a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80155a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80155aa:	ed8d 9b08 	vstr	d9, [sp, #32]
 80155ae:	e7b8      	b.n	8015522 <pow+0x222>
 80155b0:	a802      	add	r0, sp, #8
 80155b2:	f000 fde4 	bl	801617e <matherr>
 80155b6:	2800      	cmp	r0, #0
 80155b8:	f47f af11 	bne.w	80153de <pow+0xde>
 80155bc:	e7b5      	b.n	801552a <pow+0x22a>
 80155be:	bf00      	nop
 80155c0:	08016a3b 	.word	0x08016a3b
 80155c4:	3ff00000 	.word	0x3ff00000
 80155c8:	fff00000 	.word	0xfff00000
 80155cc:	3fe00000 	.word	0x3fe00000
 80155d0:	47efffff 	.word	0x47efffff
 80155d4:	c7efffff 	.word	0xc7efffff
 80155d8:	7ff00000 	.word	0x7ff00000
 80155dc:	200001f8 	.word	0x200001f8

080155e0 <__ieee754_pow>:
 80155e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155e4:	b091      	sub	sp, #68	; 0x44
 80155e6:	ed8d 1b00 	vstr	d1, [sp]
 80155ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 80155ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80155f2:	ea58 0302 	orrs.w	r3, r8, r2
 80155f6:	ec57 6b10 	vmov	r6, r7, d0
 80155fa:	f000 84be 	beq.w	8015f7a <__ieee754_pow+0x99a>
 80155fe:	4b7a      	ldr	r3, [pc, #488]	; (80157e8 <__ieee754_pow+0x208>)
 8015600:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8015604:	429c      	cmp	r4, r3
 8015606:	463d      	mov	r5, r7
 8015608:	ee10 aa10 	vmov	sl, s0
 801560c:	dc09      	bgt.n	8015622 <__ieee754_pow+0x42>
 801560e:	d103      	bne.n	8015618 <__ieee754_pow+0x38>
 8015610:	b93e      	cbnz	r6, 8015622 <__ieee754_pow+0x42>
 8015612:	45a0      	cmp	r8, r4
 8015614:	dc0d      	bgt.n	8015632 <__ieee754_pow+0x52>
 8015616:	e001      	b.n	801561c <__ieee754_pow+0x3c>
 8015618:	4598      	cmp	r8, r3
 801561a:	dc02      	bgt.n	8015622 <__ieee754_pow+0x42>
 801561c:	4598      	cmp	r8, r3
 801561e:	d10e      	bne.n	801563e <__ieee754_pow+0x5e>
 8015620:	b16a      	cbz	r2, 801563e <__ieee754_pow+0x5e>
 8015622:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015626:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801562a:	ea54 030a 	orrs.w	r3, r4, sl
 801562e:	f000 84a4 	beq.w	8015f7a <__ieee754_pow+0x99a>
 8015632:	486e      	ldr	r0, [pc, #440]	; (80157ec <__ieee754_pow+0x20c>)
 8015634:	b011      	add	sp, #68	; 0x44
 8015636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801563a:	f000 bda5 	b.w	8016188 <nan>
 801563e:	2d00      	cmp	r5, #0
 8015640:	da53      	bge.n	80156ea <__ieee754_pow+0x10a>
 8015642:	4b6b      	ldr	r3, [pc, #428]	; (80157f0 <__ieee754_pow+0x210>)
 8015644:	4598      	cmp	r8, r3
 8015646:	dc4d      	bgt.n	80156e4 <__ieee754_pow+0x104>
 8015648:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801564c:	4598      	cmp	r8, r3
 801564e:	dd4c      	ble.n	80156ea <__ieee754_pow+0x10a>
 8015650:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015654:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015658:	2b14      	cmp	r3, #20
 801565a:	dd26      	ble.n	80156aa <__ieee754_pow+0xca>
 801565c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015660:	fa22 f103 	lsr.w	r1, r2, r3
 8015664:	fa01 f303 	lsl.w	r3, r1, r3
 8015668:	4293      	cmp	r3, r2
 801566a:	d13e      	bne.n	80156ea <__ieee754_pow+0x10a>
 801566c:	f001 0101 	and.w	r1, r1, #1
 8015670:	f1c1 0b02 	rsb	fp, r1, #2
 8015674:	2a00      	cmp	r2, #0
 8015676:	d15b      	bne.n	8015730 <__ieee754_pow+0x150>
 8015678:	4b5b      	ldr	r3, [pc, #364]	; (80157e8 <__ieee754_pow+0x208>)
 801567a:	4598      	cmp	r8, r3
 801567c:	d124      	bne.n	80156c8 <__ieee754_pow+0xe8>
 801567e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015682:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015686:	ea53 030a 	orrs.w	r3, r3, sl
 801568a:	f000 8476 	beq.w	8015f7a <__ieee754_pow+0x99a>
 801568e:	4b59      	ldr	r3, [pc, #356]	; (80157f4 <__ieee754_pow+0x214>)
 8015690:	429c      	cmp	r4, r3
 8015692:	dd2d      	ble.n	80156f0 <__ieee754_pow+0x110>
 8015694:	f1b9 0f00 	cmp.w	r9, #0
 8015698:	f280 8473 	bge.w	8015f82 <__ieee754_pow+0x9a2>
 801569c:	2000      	movs	r0, #0
 801569e:	2100      	movs	r1, #0
 80156a0:	ec41 0b10 	vmov	d0, r0, r1
 80156a4:	b011      	add	sp, #68	; 0x44
 80156a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156aa:	2a00      	cmp	r2, #0
 80156ac:	d13e      	bne.n	801572c <__ieee754_pow+0x14c>
 80156ae:	f1c3 0314 	rsb	r3, r3, #20
 80156b2:	fa48 f103 	asr.w	r1, r8, r3
 80156b6:	fa01 f303 	lsl.w	r3, r1, r3
 80156ba:	4543      	cmp	r3, r8
 80156bc:	f040 8469 	bne.w	8015f92 <__ieee754_pow+0x9b2>
 80156c0:	f001 0101 	and.w	r1, r1, #1
 80156c4:	f1c1 0b02 	rsb	fp, r1, #2
 80156c8:	4b4b      	ldr	r3, [pc, #300]	; (80157f8 <__ieee754_pow+0x218>)
 80156ca:	4598      	cmp	r8, r3
 80156cc:	d118      	bne.n	8015700 <__ieee754_pow+0x120>
 80156ce:	f1b9 0f00 	cmp.w	r9, #0
 80156d2:	f280 845a 	bge.w	8015f8a <__ieee754_pow+0x9aa>
 80156d6:	4948      	ldr	r1, [pc, #288]	; (80157f8 <__ieee754_pow+0x218>)
 80156d8:	4632      	mov	r2, r6
 80156da:	463b      	mov	r3, r7
 80156dc:	2000      	movs	r0, #0
 80156de:	f7eb f8d5 	bl	800088c <__aeabi_ddiv>
 80156e2:	e7dd      	b.n	80156a0 <__ieee754_pow+0xc0>
 80156e4:	f04f 0b02 	mov.w	fp, #2
 80156e8:	e7c4      	b.n	8015674 <__ieee754_pow+0x94>
 80156ea:	f04f 0b00 	mov.w	fp, #0
 80156ee:	e7c1      	b.n	8015674 <__ieee754_pow+0x94>
 80156f0:	f1b9 0f00 	cmp.w	r9, #0
 80156f4:	dad2      	bge.n	801569c <__ieee754_pow+0xbc>
 80156f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80156fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80156fe:	e7cf      	b.n	80156a0 <__ieee754_pow+0xc0>
 8015700:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015704:	d106      	bne.n	8015714 <__ieee754_pow+0x134>
 8015706:	4632      	mov	r2, r6
 8015708:	463b      	mov	r3, r7
 801570a:	4610      	mov	r0, r2
 801570c:	4619      	mov	r1, r3
 801570e:	f7ea ff93 	bl	8000638 <__aeabi_dmul>
 8015712:	e7c5      	b.n	80156a0 <__ieee754_pow+0xc0>
 8015714:	4b39      	ldr	r3, [pc, #228]	; (80157fc <__ieee754_pow+0x21c>)
 8015716:	4599      	cmp	r9, r3
 8015718:	d10a      	bne.n	8015730 <__ieee754_pow+0x150>
 801571a:	2d00      	cmp	r5, #0
 801571c:	db08      	blt.n	8015730 <__ieee754_pow+0x150>
 801571e:	ec47 6b10 	vmov	d0, r6, r7
 8015722:	b011      	add	sp, #68	; 0x44
 8015724:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015728:	f000 bc68 	b.w	8015ffc <__ieee754_sqrt>
 801572c:	f04f 0b00 	mov.w	fp, #0
 8015730:	ec47 6b10 	vmov	d0, r6, r7
 8015734:	f000 fd12 	bl	801615c <fabs>
 8015738:	ec51 0b10 	vmov	r0, r1, d0
 801573c:	f1ba 0f00 	cmp.w	sl, #0
 8015740:	d127      	bne.n	8015792 <__ieee754_pow+0x1b2>
 8015742:	b124      	cbz	r4, 801574e <__ieee754_pow+0x16e>
 8015744:	4b2c      	ldr	r3, [pc, #176]	; (80157f8 <__ieee754_pow+0x218>)
 8015746:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801574a:	429a      	cmp	r2, r3
 801574c:	d121      	bne.n	8015792 <__ieee754_pow+0x1b2>
 801574e:	f1b9 0f00 	cmp.w	r9, #0
 8015752:	da05      	bge.n	8015760 <__ieee754_pow+0x180>
 8015754:	4602      	mov	r2, r0
 8015756:	460b      	mov	r3, r1
 8015758:	2000      	movs	r0, #0
 801575a:	4927      	ldr	r1, [pc, #156]	; (80157f8 <__ieee754_pow+0x218>)
 801575c:	f7eb f896 	bl	800088c <__aeabi_ddiv>
 8015760:	2d00      	cmp	r5, #0
 8015762:	da9d      	bge.n	80156a0 <__ieee754_pow+0xc0>
 8015764:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015768:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801576c:	ea54 030b 	orrs.w	r3, r4, fp
 8015770:	d108      	bne.n	8015784 <__ieee754_pow+0x1a4>
 8015772:	4602      	mov	r2, r0
 8015774:	460b      	mov	r3, r1
 8015776:	4610      	mov	r0, r2
 8015778:	4619      	mov	r1, r3
 801577a:	f7ea fda5 	bl	80002c8 <__aeabi_dsub>
 801577e:	4602      	mov	r2, r0
 8015780:	460b      	mov	r3, r1
 8015782:	e7ac      	b.n	80156de <__ieee754_pow+0xfe>
 8015784:	f1bb 0f01 	cmp.w	fp, #1
 8015788:	d18a      	bne.n	80156a0 <__ieee754_pow+0xc0>
 801578a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801578e:	4619      	mov	r1, r3
 8015790:	e786      	b.n	80156a0 <__ieee754_pow+0xc0>
 8015792:	0fed      	lsrs	r5, r5, #31
 8015794:	1e6b      	subs	r3, r5, #1
 8015796:	930d      	str	r3, [sp, #52]	; 0x34
 8015798:	ea5b 0303 	orrs.w	r3, fp, r3
 801579c:	d102      	bne.n	80157a4 <__ieee754_pow+0x1c4>
 801579e:	4632      	mov	r2, r6
 80157a0:	463b      	mov	r3, r7
 80157a2:	e7e8      	b.n	8015776 <__ieee754_pow+0x196>
 80157a4:	4b16      	ldr	r3, [pc, #88]	; (8015800 <__ieee754_pow+0x220>)
 80157a6:	4598      	cmp	r8, r3
 80157a8:	f340 80fe 	ble.w	80159a8 <__ieee754_pow+0x3c8>
 80157ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80157b0:	4598      	cmp	r8, r3
 80157b2:	dd0a      	ble.n	80157ca <__ieee754_pow+0x1ea>
 80157b4:	4b0f      	ldr	r3, [pc, #60]	; (80157f4 <__ieee754_pow+0x214>)
 80157b6:	429c      	cmp	r4, r3
 80157b8:	dc0d      	bgt.n	80157d6 <__ieee754_pow+0x1f6>
 80157ba:	f1b9 0f00 	cmp.w	r9, #0
 80157be:	f6bf af6d 	bge.w	801569c <__ieee754_pow+0xbc>
 80157c2:	a307      	add	r3, pc, #28	; (adr r3, 80157e0 <__ieee754_pow+0x200>)
 80157c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c8:	e79f      	b.n	801570a <__ieee754_pow+0x12a>
 80157ca:	4b0e      	ldr	r3, [pc, #56]	; (8015804 <__ieee754_pow+0x224>)
 80157cc:	429c      	cmp	r4, r3
 80157ce:	ddf4      	ble.n	80157ba <__ieee754_pow+0x1da>
 80157d0:	4b09      	ldr	r3, [pc, #36]	; (80157f8 <__ieee754_pow+0x218>)
 80157d2:	429c      	cmp	r4, r3
 80157d4:	dd18      	ble.n	8015808 <__ieee754_pow+0x228>
 80157d6:	f1b9 0f00 	cmp.w	r9, #0
 80157da:	dcf2      	bgt.n	80157c2 <__ieee754_pow+0x1e2>
 80157dc:	e75e      	b.n	801569c <__ieee754_pow+0xbc>
 80157de:	bf00      	nop
 80157e0:	8800759c 	.word	0x8800759c
 80157e4:	7e37e43c 	.word	0x7e37e43c
 80157e8:	7ff00000 	.word	0x7ff00000
 80157ec:	08016a0d 	.word	0x08016a0d
 80157f0:	433fffff 	.word	0x433fffff
 80157f4:	3fefffff 	.word	0x3fefffff
 80157f8:	3ff00000 	.word	0x3ff00000
 80157fc:	3fe00000 	.word	0x3fe00000
 8015800:	41e00000 	.word	0x41e00000
 8015804:	3feffffe 	.word	0x3feffffe
 8015808:	2200      	movs	r2, #0
 801580a:	4b63      	ldr	r3, [pc, #396]	; (8015998 <__ieee754_pow+0x3b8>)
 801580c:	f7ea fd5c 	bl	80002c8 <__aeabi_dsub>
 8015810:	a355      	add	r3, pc, #340	; (adr r3, 8015968 <__ieee754_pow+0x388>)
 8015812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015816:	4604      	mov	r4, r0
 8015818:	460d      	mov	r5, r1
 801581a:	f7ea ff0d 	bl	8000638 <__aeabi_dmul>
 801581e:	a354      	add	r3, pc, #336	; (adr r3, 8015970 <__ieee754_pow+0x390>)
 8015820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	4620      	mov	r0, r4
 801582a:	4629      	mov	r1, r5
 801582c:	f7ea ff04 	bl	8000638 <__aeabi_dmul>
 8015830:	2200      	movs	r2, #0
 8015832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015836:	4b59      	ldr	r3, [pc, #356]	; (801599c <__ieee754_pow+0x3bc>)
 8015838:	4620      	mov	r0, r4
 801583a:	4629      	mov	r1, r5
 801583c:	f7ea fefc 	bl	8000638 <__aeabi_dmul>
 8015840:	4602      	mov	r2, r0
 8015842:	460b      	mov	r3, r1
 8015844:	a14c      	add	r1, pc, #304	; (adr r1, 8015978 <__ieee754_pow+0x398>)
 8015846:	e9d1 0100 	ldrd	r0, r1, [r1]
 801584a:	f7ea fd3d 	bl	80002c8 <__aeabi_dsub>
 801584e:	4622      	mov	r2, r4
 8015850:	462b      	mov	r3, r5
 8015852:	f7ea fef1 	bl	8000638 <__aeabi_dmul>
 8015856:	4602      	mov	r2, r0
 8015858:	460b      	mov	r3, r1
 801585a:	2000      	movs	r0, #0
 801585c:	4950      	ldr	r1, [pc, #320]	; (80159a0 <__ieee754_pow+0x3c0>)
 801585e:	f7ea fd33 	bl	80002c8 <__aeabi_dsub>
 8015862:	4622      	mov	r2, r4
 8015864:	462b      	mov	r3, r5
 8015866:	4680      	mov	r8, r0
 8015868:	4689      	mov	r9, r1
 801586a:	4620      	mov	r0, r4
 801586c:	4629      	mov	r1, r5
 801586e:	f7ea fee3 	bl	8000638 <__aeabi_dmul>
 8015872:	4602      	mov	r2, r0
 8015874:	460b      	mov	r3, r1
 8015876:	4640      	mov	r0, r8
 8015878:	4649      	mov	r1, r9
 801587a:	f7ea fedd 	bl	8000638 <__aeabi_dmul>
 801587e:	a340      	add	r3, pc, #256	; (adr r3, 8015980 <__ieee754_pow+0x3a0>)
 8015880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015884:	f7ea fed8 	bl	8000638 <__aeabi_dmul>
 8015888:	4602      	mov	r2, r0
 801588a:	460b      	mov	r3, r1
 801588c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015890:	f7ea fd1a 	bl	80002c8 <__aeabi_dsub>
 8015894:	4602      	mov	r2, r0
 8015896:	460b      	mov	r3, r1
 8015898:	4604      	mov	r4, r0
 801589a:	460d      	mov	r5, r1
 801589c:	4630      	mov	r0, r6
 801589e:	4639      	mov	r1, r7
 80158a0:	f7ea fd14 	bl	80002cc <__adddf3>
 80158a4:	2000      	movs	r0, #0
 80158a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158aa:	4632      	mov	r2, r6
 80158ac:	463b      	mov	r3, r7
 80158ae:	f7ea fd0b 	bl	80002c8 <__aeabi_dsub>
 80158b2:	4602      	mov	r2, r0
 80158b4:	460b      	mov	r3, r1
 80158b6:	4620      	mov	r0, r4
 80158b8:	4629      	mov	r1, r5
 80158ba:	f7ea fd05 	bl	80002c8 <__aeabi_dsub>
 80158be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80158c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80158c4:	4313      	orrs	r3, r2
 80158c6:	4606      	mov	r6, r0
 80158c8:	460f      	mov	r7, r1
 80158ca:	f040 81eb 	bne.w	8015ca4 <__ieee754_pow+0x6c4>
 80158ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015988 <__ieee754_pow+0x3a8>
 80158d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80158d6:	2400      	movs	r4, #0
 80158d8:	4622      	mov	r2, r4
 80158da:	462b      	mov	r3, r5
 80158dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80158e4:	f7ea fcf0 	bl	80002c8 <__aeabi_dsub>
 80158e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80158ec:	f7ea fea4 	bl	8000638 <__aeabi_dmul>
 80158f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158f4:	4680      	mov	r8, r0
 80158f6:	4689      	mov	r9, r1
 80158f8:	4630      	mov	r0, r6
 80158fa:	4639      	mov	r1, r7
 80158fc:	f7ea fe9c 	bl	8000638 <__aeabi_dmul>
 8015900:	4602      	mov	r2, r0
 8015902:	460b      	mov	r3, r1
 8015904:	4640      	mov	r0, r8
 8015906:	4649      	mov	r1, r9
 8015908:	f7ea fce0 	bl	80002cc <__adddf3>
 801590c:	4622      	mov	r2, r4
 801590e:	462b      	mov	r3, r5
 8015910:	4680      	mov	r8, r0
 8015912:	4689      	mov	r9, r1
 8015914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015918:	f7ea fe8e 	bl	8000638 <__aeabi_dmul>
 801591c:	460b      	mov	r3, r1
 801591e:	4604      	mov	r4, r0
 8015920:	460d      	mov	r5, r1
 8015922:	4602      	mov	r2, r0
 8015924:	4649      	mov	r1, r9
 8015926:	4640      	mov	r0, r8
 8015928:	e9cd 4500 	strd	r4, r5, [sp]
 801592c:	f7ea fcce 	bl	80002cc <__adddf3>
 8015930:	4b1c      	ldr	r3, [pc, #112]	; (80159a4 <__ieee754_pow+0x3c4>)
 8015932:	4299      	cmp	r1, r3
 8015934:	4606      	mov	r6, r0
 8015936:	460f      	mov	r7, r1
 8015938:	468b      	mov	fp, r1
 801593a:	f340 82f7 	ble.w	8015f2c <__ieee754_pow+0x94c>
 801593e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015942:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015946:	4303      	orrs	r3, r0
 8015948:	f000 81ea 	beq.w	8015d20 <__ieee754_pow+0x740>
 801594c:	a310      	add	r3, pc, #64	; (adr r3, 8015990 <__ieee754_pow+0x3b0>)
 801594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015956:	f7ea fe6f 	bl	8000638 <__aeabi_dmul>
 801595a:	a30d      	add	r3, pc, #52	; (adr r3, 8015990 <__ieee754_pow+0x3b0>)
 801595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015960:	e6d5      	b.n	801570e <__ieee754_pow+0x12e>
 8015962:	bf00      	nop
 8015964:	f3af 8000 	nop.w
 8015968:	60000000 	.word	0x60000000
 801596c:	3ff71547 	.word	0x3ff71547
 8015970:	f85ddf44 	.word	0xf85ddf44
 8015974:	3e54ae0b 	.word	0x3e54ae0b
 8015978:	55555555 	.word	0x55555555
 801597c:	3fd55555 	.word	0x3fd55555
 8015980:	652b82fe 	.word	0x652b82fe
 8015984:	3ff71547 	.word	0x3ff71547
 8015988:	00000000 	.word	0x00000000
 801598c:	bff00000 	.word	0xbff00000
 8015990:	8800759c 	.word	0x8800759c
 8015994:	7e37e43c 	.word	0x7e37e43c
 8015998:	3ff00000 	.word	0x3ff00000
 801599c:	3fd00000 	.word	0x3fd00000
 80159a0:	3fe00000 	.word	0x3fe00000
 80159a4:	408fffff 	.word	0x408fffff
 80159a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80159ac:	f04f 0200 	mov.w	r2, #0
 80159b0:	da05      	bge.n	80159be <__ieee754_pow+0x3de>
 80159b2:	4bd3      	ldr	r3, [pc, #844]	; (8015d00 <__ieee754_pow+0x720>)
 80159b4:	f7ea fe40 	bl	8000638 <__aeabi_dmul>
 80159b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80159bc:	460c      	mov	r4, r1
 80159be:	1523      	asrs	r3, r4, #20
 80159c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80159c4:	4413      	add	r3, r2
 80159c6:	9309      	str	r3, [sp, #36]	; 0x24
 80159c8:	4bce      	ldr	r3, [pc, #824]	; (8015d04 <__ieee754_pow+0x724>)
 80159ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80159ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80159d2:	429c      	cmp	r4, r3
 80159d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80159d8:	dd08      	ble.n	80159ec <__ieee754_pow+0x40c>
 80159da:	4bcb      	ldr	r3, [pc, #812]	; (8015d08 <__ieee754_pow+0x728>)
 80159dc:	429c      	cmp	r4, r3
 80159de:	f340 815e 	ble.w	8015c9e <__ieee754_pow+0x6be>
 80159e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e4:	3301      	adds	r3, #1
 80159e6:	9309      	str	r3, [sp, #36]	; 0x24
 80159e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80159ec:	f04f 0a00 	mov.w	sl, #0
 80159f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80159f4:	930c      	str	r3, [sp, #48]	; 0x30
 80159f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159f8:	4bc4      	ldr	r3, [pc, #784]	; (8015d0c <__ieee754_pow+0x72c>)
 80159fa:	4413      	add	r3, r2
 80159fc:	ed93 7b00 	vldr	d7, [r3]
 8015a00:	4629      	mov	r1, r5
 8015a02:	ec53 2b17 	vmov	r2, r3, d7
 8015a06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015a0e:	f7ea fc5b 	bl	80002c8 <__aeabi_dsub>
 8015a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015a16:	4606      	mov	r6, r0
 8015a18:	460f      	mov	r7, r1
 8015a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a1e:	f7ea fc55 	bl	80002cc <__adddf3>
 8015a22:	4602      	mov	r2, r0
 8015a24:	460b      	mov	r3, r1
 8015a26:	2000      	movs	r0, #0
 8015a28:	49b9      	ldr	r1, [pc, #740]	; (8015d10 <__ieee754_pow+0x730>)
 8015a2a:	f7ea ff2f 	bl	800088c <__aeabi_ddiv>
 8015a2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015a32:	4602      	mov	r2, r0
 8015a34:	460b      	mov	r3, r1
 8015a36:	4630      	mov	r0, r6
 8015a38:	4639      	mov	r1, r7
 8015a3a:	f7ea fdfd 	bl	8000638 <__aeabi_dmul>
 8015a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	9302      	str	r3, [sp, #8]
 8015a4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015a52:	106d      	asrs	r5, r5, #1
 8015a54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015a58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015a62:	4640      	mov	r0, r8
 8015a64:	4649      	mov	r1, r9
 8015a66:	4614      	mov	r4, r2
 8015a68:	461d      	mov	r5, r3
 8015a6a:	f7ea fde5 	bl	8000638 <__aeabi_dmul>
 8015a6e:	4602      	mov	r2, r0
 8015a70:	460b      	mov	r3, r1
 8015a72:	4630      	mov	r0, r6
 8015a74:	4639      	mov	r1, r7
 8015a76:	f7ea fc27 	bl	80002c8 <__aeabi_dsub>
 8015a7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015a7e:	4606      	mov	r6, r0
 8015a80:	460f      	mov	r7, r1
 8015a82:	4620      	mov	r0, r4
 8015a84:	4629      	mov	r1, r5
 8015a86:	f7ea fc1f 	bl	80002c8 <__aeabi_dsub>
 8015a8a:	4602      	mov	r2, r0
 8015a8c:	460b      	mov	r3, r1
 8015a8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015a92:	f7ea fc19 	bl	80002c8 <__aeabi_dsub>
 8015a96:	4642      	mov	r2, r8
 8015a98:	464b      	mov	r3, r9
 8015a9a:	f7ea fdcd 	bl	8000638 <__aeabi_dmul>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	4630      	mov	r0, r6
 8015aa4:	4639      	mov	r1, r7
 8015aa6:	f7ea fc0f 	bl	80002c8 <__aeabi_dsub>
 8015aaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015aae:	f7ea fdc3 	bl	8000638 <__aeabi_dmul>
 8015ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015aba:	4610      	mov	r0, r2
 8015abc:	4619      	mov	r1, r3
 8015abe:	f7ea fdbb 	bl	8000638 <__aeabi_dmul>
 8015ac2:	a37b      	add	r3, pc, #492	; (adr r3, 8015cb0 <__ieee754_pow+0x6d0>)
 8015ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac8:	4604      	mov	r4, r0
 8015aca:	460d      	mov	r5, r1
 8015acc:	f7ea fdb4 	bl	8000638 <__aeabi_dmul>
 8015ad0:	a379      	add	r3, pc, #484	; (adr r3, 8015cb8 <__ieee754_pow+0x6d8>)
 8015ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad6:	f7ea fbf9 	bl	80002cc <__adddf3>
 8015ada:	4622      	mov	r2, r4
 8015adc:	462b      	mov	r3, r5
 8015ade:	f7ea fdab 	bl	8000638 <__aeabi_dmul>
 8015ae2:	a377      	add	r3, pc, #476	; (adr r3, 8015cc0 <__ieee754_pow+0x6e0>)
 8015ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae8:	f7ea fbf0 	bl	80002cc <__adddf3>
 8015aec:	4622      	mov	r2, r4
 8015aee:	462b      	mov	r3, r5
 8015af0:	f7ea fda2 	bl	8000638 <__aeabi_dmul>
 8015af4:	a374      	add	r3, pc, #464	; (adr r3, 8015cc8 <__ieee754_pow+0x6e8>)
 8015af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015afa:	f7ea fbe7 	bl	80002cc <__adddf3>
 8015afe:	4622      	mov	r2, r4
 8015b00:	462b      	mov	r3, r5
 8015b02:	f7ea fd99 	bl	8000638 <__aeabi_dmul>
 8015b06:	a372      	add	r3, pc, #456	; (adr r3, 8015cd0 <__ieee754_pow+0x6f0>)
 8015b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0c:	f7ea fbde 	bl	80002cc <__adddf3>
 8015b10:	4622      	mov	r2, r4
 8015b12:	462b      	mov	r3, r5
 8015b14:	f7ea fd90 	bl	8000638 <__aeabi_dmul>
 8015b18:	a36f      	add	r3, pc, #444	; (adr r3, 8015cd8 <__ieee754_pow+0x6f8>)
 8015b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1e:	f7ea fbd5 	bl	80002cc <__adddf3>
 8015b22:	4622      	mov	r2, r4
 8015b24:	4606      	mov	r6, r0
 8015b26:	460f      	mov	r7, r1
 8015b28:	462b      	mov	r3, r5
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	4629      	mov	r1, r5
 8015b2e:	f7ea fd83 	bl	8000638 <__aeabi_dmul>
 8015b32:	4602      	mov	r2, r0
 8015b34:	460b      	mov	r3, r1
 8015b36:	4630      	mov	r0, r6
 8015b38:	4639      	mov	r1, r7
 8015b3a:	f7ea fd7d 	bl	8000638 <__aeabi_dmul>
 8015b3e:	4642      	mov	r2, r8
 8015b40:	4604      	mov	r4, r0
 8015b42:	460d      	mov	r5, r1
 8015b44:	464b      	mov	r3, r9
 8015b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015b4a:	f7ea fbbf 	bl	80002cc <__adddf3>
 8015b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015b52:	f7ea fd71 	bl	8000638 <__aeabi_dmul>
 8015b56:	4622      	mov	r2, r4
 8015b58:	462b      	mov	r3, r5
 8015b5a:	f7ea fbb7 	bl	80002cc <__adddf3>
 8015b5e:	4642      	mov	r2, r8
 8015b60:	4606      	mov	r6, r0
 8015b62:	460f      	mov	r7, r1
 8015b64:	464b      	mov	r3, r9
 8015b66:	4640      	mov	r0, r8
 8015b68:	4649      	mov	r1, r9
 8015b6a:	f7ea fd65 	bl	8000638 <__aeabi_dmul>
 8015b6e:	2200      	movs	r2, #0
 8015b70:	4b68      	ldr	r3, [pc, #416]	; (8015d14 <__ieee754_pow+0x734>)
 8015b72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015b76:	f7ea fba9 	bl	80002cc <__adddf3>
 8015b7a:	4632      	mov	r2, r6
 8015b7c:	463b      	mov	r3, r7
 8015b7e:	f7ea fba5 	bl	80002cc <__adddf3>
 8015b82:	9802      	ldr	r0, [sp, #8]
 8015b84:	460d      	mov	r5, r1
 8015b86:	4604      	mov	r4, r0
 8015b88:	4602      	mov	r2, r0
 8015b8a:	460b      	mov	r3, r1
 8015b8c:	4640      	mov	r0, r8
 8015b8e:	4649      	mov	r1, r9
 8015b90:	f7ea fd52 	bl	8000638 <__aeabi_dmul>
 8015b94:	2200      	movs	r2, #0
 8015b96:	4680      	mov	r8, r0
 8015b98:	4689      	mov	r9, r1
 8015b9a:	4b5e      	ldr	r3, [pc, #376]	; (8015d14 <__ieee754_pow+0x734>)
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	4629      	mov	r1, r5
 8015ba0:	f7ea fb92 	bl	80002c8 <__aeabi_dsub>
 8015ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015ba8:	f7ea fb8e 	bl	80002c8 <__aeabi_dsub>
 8015bac:	4602      	mov	r2, r0
 8015bae:	460b      	mov	r3, r1
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	4639      	mov	r1, r7
 8015bb4:	f7ea fb88 	bl	80002c8 <__aeabi_dsub>
 8015bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bbc:	f7ea fd3c 	bl	8000638 <__aeabi_dmul>
 8015bc0:	4622      	mov	r2, r4
 8015bc2:	4606      	mov	r6, r0
 8015bc4:	460f      	mov	r7, r1
 8015bc6:	462b      	mov	r3, r5
 8015bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015bcc:	f7ea fd34 	bl	8000638 <__aeabi_dmul>
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	460b      	mov	r3, r1
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	4639      	mov	r1, r7
 8015bd8:	f7ea fb78 	bl	80002cc <__adddf3>
 8015bdc:	4606      	mov	r6, r0
 8015bde:	460f      	mov	r7, r1
 8015be0:	4602      	mov	r2, r0
 8015be2:	460b      	mov	r3, r1
 8015be4:	4640      	mov	r0, r8
 8015be6:	4649      	mov	r1, r9
 8015be8:	f7ea fb70 	bl	80002cc <__adddf3>
 8015bec:	9802      	ldr	r0, [sp, #8]
 8015bee:	a33c      	add	r3, pc, #240	; (adr r3, 8015ce0 <__ieee754_pow+0x700>)
 8015bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf4:	4604      	mov	r4, r0
 8015bf6:	460d      	mov	r5, r1
 8015bf8:	f7ea fd1e 	bl	8000638 <__aeabi_dmul>
 8015bfc:	4642      	mov	r2, r8
 8015bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c02:	464b      	mov	r3, r9
 8015c04:	4620      	mov	r0, r4
 8015c06:	4629      	mov	r1, r5
 8015c08:	f7ea fb5e 	bl	80002c8 <__aeabi_dsub>
 8015c0c:	4602      	mov	r2, r0
 8015c0e:	460b      	mov	r3, r1
 8015c10:	4630      	mov	r0, r6
 8015c12:	4639      	mov	r1, r7
 8015c14:	f7ea fb58 	bl	80002c8 <__aeabi_dsub>
 8015c18:	a333      	add	r3, pc, #204	; (adr r3, 8015ce8 <__ieee754_pow+0x708>)
 8015c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1e:	f7ea fd0b 	bl	8000638 <__aeabi_dmul>
 8015c22:	a333      	add	r3, pc, #204	; (adr r3, 8015cf0 <__ieee754_pow+0x710>)
 8015c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c28:	4606      	mov	r6, r0
 8015c2a:	460f      	mov	r7, r1
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	4629      	mov	r1, r5
 8015c30:	f7ea fd02 	bl	8000638 <__aeabi_dmul>
 8015c34:	4602      	mov	r2, r0
 8015c36:	460b      	mov	r3, r1
 8015c38:	4630      	mov	r0, r6
 8015c3a:	4639      	mov	r1, r7
 8015c3c:	f7ea fb46 	bl	80002cc <__adddf3>
 8015c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c42:	4b35      	ldr	r3, [pc, #212]	; (8015d18 <__ieee754_pow+0x738>)
 8015c44:	4413      	add	r3, r2
 8015c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c4a:	f7ea fb3f 	bl	80002cc <__adddf3>
 8015c4e:	4604      	mov	r4, r0
 8015c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c52:	460d      	mov	r5, r1
 8015c54:	f7ea fc86 	bl	8000564 <__aeabi_i2d>
 8015c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c5a:	4b30      	ldr	r3, [pc, #192]	; (8015d1c <__ieee754_pow+0x73c>)
 8015c5c:	4413      	add	r3, r2
 8015c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015c62:	4606      	mov	r6, r0
 8015c64:	460f      	mov	r7, r1
 8015c66:	4622      	mov	r2, r4
 8015c68:	462b      	mov	r3, r5
 8015c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c6e:	f7ea fb2d 	bl	80002cc <__adddf3>
 8015c72:	4642      	mov	r2, r8
 8015c74:	464b      	mov	r3, r9
 8015c76:	f7ea fb29 	bl	80002cc <__adddf3>
 8015c7a:	4632      	mov	r2, r6
 8015c7c:	463b      	mov	r3, r7
 8015c7e:	f7ea fb25 	bl	80002cc <__adddf3>
 8015c82:	9802      	ldr	r0, [sp, #8]
 8015c84:	4632      	mov	r2, r6
 8015c86:	463b      	mov	r3, r7
 8015c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c8c:	f7ea fb1c 	bl	80002c8 <__aeabi_dsub>
 8015c90:	4642      	mov	r2, r8
 8015c92:	464b      	mov	r3, r9
 8015c94:	f7ea fb18 	bl	80002c8 <__aeabi_dsub>
 8015c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015c9c:	e607      	b.n	80158ae <__ieee754_pow+0x2ce>
 8015c9e:	f04f 0a01 	mov.w	sl, #1
 8015ca2:	e6a5      	b.n	80159f0 <__ieee754_pow+0x410>
 8015ca4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015cf8 <__ieee754_pow+0x718>
 8015ca8:	e613      	b.n	80158d2 <__ieee754_pow+0x2f2>
 8015caa:	bf00      	nop
 8015cac:	f3af 8000 	nop.w
 8015cb0:	4a454eef 	.word	0x4a454eef
 8015cb4:	3fca7e28 	.word	0x3fca7e28
 8015cb8:	93c9db65 	.word	0x93c9db65
 8015cbc:	3fcd864a 	.word	0x3fcd864a
 8015cc0:	a91d4101 	.word	0xa91d4101
 8015cc4:	3fd17460 	.word	0x3fd17460
 8015cc8:	518f264d 	.word	0x518f264d
 8015ccc:	3fd55555 	.word	0x3fd55555
 8015cd0:	db6fabff 	.word	0xdb6fabff
 8015cd4:	3fdb6db6 	.word	0x3fdb6db6
 8015cd8:	33333303 	.word	0x33333303
 8015cdc:	3fe33333 	.word	0x3fe33333
 8015ce0:	e0000000 	.word	0xe0000000
 8015ce4:	3feec709 	.word	0x3feec709
 8015ce8:	dc3a03fd 	.word	0xdc3a03fd
 8015cec:	3feec709 	.word	0x3feec709
 8015cf0:	145b01f5 	.word	0x145b01f5
 8015cf4:	be3e2fe0 	.word	0xbe3e2fe0
 8015cf8:	00000000 	.word	0x00000000
 8015cfc:	3ff00000 	.word	0x3ff00000
 8015d00:	43400000 	.word	0x43400000
 8015d04:	0003988e 	.word	0x0003988e
 8015d08:	000bb679 	.word	0x000bb679
 8015d0c:	08016a40 	.word	0x08016a40
 8015d10:	3ff00000 	.word	0x3ff00000
 8015d14:	40080000 	.word	0x40080000
 8015d18:	08016a60 	.word	0x08016a60
 8015d1c:	08016a50 	.word	0x08016a50
 8015d20:	a3b4      	add	r3, pc, #720	; (adr r3, 8015ff4 <__ieee754_pow+0xa14>)
 8015d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d26:	4640      	mov	r0, r8
 8015d28:	4649      	mov	r1, r9
 8015d2a:	f7ea facf 	bl	80002cc <__adddf3>
 8015d2e:	4622      	mov	r2, r4
 8015d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d34:	462b      	mov	r3, r5
 8015d36:	4630      	mov	r0, r6
 8015d38:	4639      	mov	r1, r7
 8015d3a:	f7ea fac5 	bl	80002c8 <__aeabi_dsub>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	460b      	mov	r3, r1
 8015d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015d46:	f7ea ff07 	bl	8000b58 <__aeabi_dcmpgt>
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	f47f adfe 	bne.w	801594c <__ieee754_pow+0x36c>
 8015d50:	4aa3      	ldr	r2, [pc, #652]	; (8015fe0 <__ieee754_pow+0xa00>)
 8015d52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015d56:	4293      	cmp	r3, r2
 8015d58:	f340 810a 	ble.w	8015f70 <__ieee754_pow+0x990>
 8015d5c:	151b      	asrs	r3, r3, #20
 8015d5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015d62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015d66:	fa4a f303 	asr.w	r3, sl, r3
 8015d6a:	445b      	add	r3, fp
 8015d6c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015d70:	4e9c      	ldr	r6, [pc, #624]	; (8015fe4 <__ieee754_pow+0xa04>)
 8015d72:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015d76:	4116      	asrs	r6, r2
 8015d78:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015d7c:	2000      	movs	r0, #0
 8015d7e:	ea23 0106 	bic.w	r1, r3, r6
 8015d82:	f1c2 0214 	rsb	r2, r2, #20
 8015d86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015d8a:	fa4a fa02 	asr.w	sl, sl, r2
 8015d8e:	f1bb 0f00 	cmp.w	fp, #0
 8015d92:	4602      	mov	r2, r0
 8015d94:	460b      	mov	r3, r1
 8015d96:	4620      	mov	r0, r4
 8015d98:	4629      	mov	r1, r5
 8015d9a:	bfb8      	it	lt
 8015d9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8015da0:	f7ea fa92 	bl	80002c8 <__aeabi_dsub>
 8015da4:	e9cd 0100 	strd	r0, r1, [sp]
 8015da8:	4642      	mov	r2, r8
 8015daa:	464b      	mov	r3, r9
 8015dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015db0:	f7ea fa8c 	bl	80002cc <__adddf3>
 8015db4:	2000      	movs	r0, #0
 8015db6:	a378      	add	r3, pc, #480	; (adr r3, 8015f98 <__ieee754_pow+0x9b8>)
 8015db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dbc:	4604      	mov	r4, r0
 8015dbe:	460d      	mov	r5, r1
 8015dc0:	f7ea fc3a 	bl	8000638 <__aeabi_dmul>
 8015dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015dc8:	4606      	mov	r6, r0
 8015dca:	460f      	mov	r7, r1
 8015dcc:	4620      	mov	r0, r4
 8015dce:	4629      	mov	r1, r5
 8015dd0:	f7ea fa7a 	bl	80002c8 <__aeabi_dsub>
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	460b      	mov	r3, r1
 8015dd8:	4640      	mov	r0, r8
 8015dda:	4649      	mov	r1, r9
 8015ddc:	f7ea fa74 	bl	80002c8 <__aeabi_dsub>
 8015de0:	a36f      	add	r3, pc, #444	; (adr r3, 8015fa0 <__ieee754_pow+0x9c0>)
 8015de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de6:	f7ea fc27 	bl	8000638 <__aeabi_dmul>
 8015dea:	a36f      	add	r3, pc, #444	; (adr r3, 8015fa8 <__ieee754_pow+0x9c8>)
 8015dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df0:	4680      	mov	r8, r0
 8015df2:	4689      	mov	r9, r1
 8015df4:	4620      	mov	r0, r4
 8015df6:	4629      	mov	r1, r5
 8015df8:	f7ea fc1e 	bl	8000638 <__aeabi_dmul>
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	460b      	mov	r3, r1
 8015e00:	4640      	mov	r0, r8
 8015e02:	4649      	mov	r1, r9
 8015e04:	f7ea fa62 	bl	80002cc <__adddf3>
 8015e08:	4604      	mov	r4, r0
 8015e0a:	460d      	mov	r5, r1
 8015e0c:	4602      	mov	r2, r0
 8015e0e:	460b      	mov	r3, r1
 8015e10:	4630      	mov	r0, r6
 8015e12:	4639      	mov	r1, r7
 8015e14:	f7ea fa5a 	bl	80002cc <__adddf3>
 8015e18:	4632      	mov	r2, r6
 8015e1a:	463b      	mov	r3, r7
 8015e1c:	4680      	mov	r8, r0
 8015e1e:	4689      	mov	r9, r1
 8015e20:	f7ea fa52 	bl	80002c8 <__aeabi_dsub>
 8015e24:	4602      	mov	r2, r0
 8015e26:	460b      	mov	r3, r1
 8015e28:	4620      	mov	r0, r4
 8015e2a:	4629      	mov	r1, r5
 8015e2c:	f7ea fa4c 	bl	80002c8 <__aeabi_dsub>
 8015e30:	4642      	mov	r2, r8
 8015e32:	4606      	mov	r6, r0
 8015e34:	460f      	mov	r7, r1
 8015e36:	464b      	mov	r3, r9
 8015e38:	4640      	mov	r0, r8
 8015e3a:	4649      	mov	r1, r9
 8015e3c:	f7ea fbfc 	bl	8000638 <__aeabi_dmul>
 8015e40:	a35b      	add	r3, pc, #364	; (adr r3, 8015fb0 <__ieee754_pow+0x9d0>)
 8015e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e46:	4604      	mov	r4, r0
 8015e48:	460d      	mov	r5, r1
 8015e4a:	f7ea fbf5 	bl	8000638 <__aeabi_dmul>
 8015e4e:	a35a      	add	r3, pc, #360	; (adr r3, 8015fb8 <__ieee754_pow+0x9d8>)
 8015e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e54:	f7ea fa38 	bl	80002c8 <__aeabi_dsub>
 8015e58:	4622      	mov	r2, r4
 8015e5a:	462b      	mov	r3, r5
 8015e5c:	f7ea fbec 	bl	8000638 <__aeabi_dmul>
 8015e60:	a357      	add	r3, pc, #348	; (adr r3, 8015fc0 <__ieee754_pow+0x9e0>)
 8015e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e66:	f7ea fa31 	bl	80002cc <__adddf3>
 8015e6a:	4622      	mov	r2, r4
 8015e6c:	462b      	mov	r3, r5
 8015e6e:	f7ea fbe3 	bl	8000638 <__aeabi_dmul>
 8015e72:	a355      	add	r3, pc, #340	; (adr r3, 8015fc8 <__ieee754_pow+0x9e8>)
 8015e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e78:	f7ea fa26 	bl	80002c8 <__aeabi_dsub>
 8015e7c:	4622      	mov	r2, r4
 8015e7e:	462b      	mov	r3, r5
 8015e80:	f7ea fbda 	bl	8000638 <__aeabi_dmul>
 8015e84:	a352      	add	r3, pc, #328	; (adr r3, 8015fd0 <__ieee754_pow+0x9f0>)
 8015e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e8a:	f7ea fa1f 	bl	80002cc <__adddf3>
 8015e8e:	4622      	mov	r2, r4
 8015e90:	462b      	mov	r3, r5
 8015e92:	f7ea fbd1 	bl	8000638 <__aeabi_dmul>
 8015e96:	4602      	mov	r2, r0
 8015e98:	460b      	mov	r3, r1
 8015e9a:	4640      	mov	r0, r8
 8015e9c:	4649      	mov	r1, r9
 8015e9e:	f7ea fa13 	bl	80002c8 <__aeabi_dsub>
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	460d      	mov	r5, r1
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	4640      	mov	r0, r8
 8015eac:	4649      	mov	r1, r9
 8015eae:	f7ea fbc3 	bl	8000638 <__aeabi_dmul>
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8015eb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015ebc:	4620      	mov	r0, r4
 8015ebe:	4629      	mov	r1, r5
 8015ec0:	f7ea fa02 	bl	80002c8 <__aeabi_dsub>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	460b      	mov	r3, r1
 8015ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ecc:	f7ea fcde 	bl	800088c <__aeabi_ddiv>
 8015ed0:	4632      	mov	r2, r6
 8015ed2:	4604      	mov	r4, r0
 8015ed4:	460d      	mov	r5, r1
 8015ed6:	463b      	mov	r3, r7
 8015ed8:	4640      	mov	r0, r8
 8015eda:	4649      	mov	r1, r9
 8015edc:	f7ea fbac 	bl	8000638 <__aeabi_dmul>
 8015ee0:	4632      	mov	r2, r6
 8015ee2:	463b      	mov	r3, r7
 8015ee4:	f7ea f9f2 	bl	80002cc <__adddf3>
 8015ee8:	4602      	mov	r2, r0
 8015eea:	460b      	mov	r3, r1
 8015eec:	4620      	mov	r0, r4
 8015eee:	4629      	mov	r1, r5
 8015ef0:	f7ea f9ea 	bl	80002c8 <__aeabi_dsub>
 8015ef4:	4642      	mov	r2, r8
 8015ef6:	464b      	mov	r3, r9
 8015ef8:	f7ea f9e6 	bl	80002c8 <__aeabi_dsub>
 8015efc:	4602      	mov	r2, r0
 8015efe:	460b      	mov	r3, r1
 8015f00:	2000      	movs	r0, #0
 8015f02:	4939      	ldr	r1, [pc, #228]	; (8015fe8 <__ieee754_pow+0xa08>)
 8015f04:	f7ea f9e0 	bl	80002c8 <__aeabi_dsub>
 8015f08:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015f0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015f10:	4602      	mov	r2, r0
 8015f12:	460b      	mov	r3, r1
 8015f14:	da2f      	bge.n	8015f76 <__ieee754_pow+0x996>
 8015f16:	4650      	mov	r0, sl
 8015f18:	ec43 2b10 	vmov	d0, r2, r3
 8015f1c:	f000 f9c0 	bl	80162a0 <scalbn>
 8015f20:	ec51 0b10 	vmov	r0, r1, d0
 8015f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015f28:	f7ff bbf1 	b.w	801570e <__ieee754_pow+0x12e>
 8015f2c:	4b2f      	ldr	r3, [pc, #188]	; (8015fec <__ieee754_pow+0xa0c>)
 8015f2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015f32:	429e      	cmp	r6, r3
 8015f34:	f77f af0c 	ble.w	8015d50 <__ieee754_pow+0x770>
 8015f38:	4b2d      	ldr	r3, [pc, #180]	; (8015ff0 <__ieee754_pow+0xa10>)
 8015f3a:	440b      	add	r3, r1
 8015f3c:	4303      	orrs	r3, r0
 8015f3e:	d00b      	beq.n	8015f58 <__ieee754_pow+0x978>
 8015f40:	a325      	add	r3, pc, #148	; (adr r3, 8015fd8 <__ieee754_pow+0x9f8>)
 8015f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f4a:	f7ea fb75 	bl	8000638 <__aeabi_dmul>
 8015f4e:	a322      	add	r3, pc, #136	; (adr r3, 8015fd8 <__ieee754_pow+0x9f8>)
 8015f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f54:	f7ff bbdb 	b.w	801570e <__ieee754_pow+0x12e>
 8015f58:	4622      	mov	r2, r4
 8015f5a:	462b      	mov	r3, r5
 8015f5c:	f7ea f9b4 	bl	80002c8 <__aeabi_dsub>
 8015f60:	4642      	mov	r2, r8
 8015f62:	464b      	mov	r3, r9
 8015f64:	f7ea fdee 	bl	8000b44 <__aeabi_dcmpge>
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	f43f aef1 	beq.w	8015d50 <__ieee754_pow+0x770>
 8015f6e:	e7e7      	b.n	8015f40 <__ieee754_pow+0x960>
 8015f70:	f04f 0a00 	mov.w	sl, #0
 8015f74:	e718      	b.n	8015da8 <__ieee754_pow+0x7c8>
 8015f76:	4621      	mov	r1, r4
 8015f78:	e7d4      	b.n	8015f24 <__ieee754_pow+0x944>
 8015f7a:	2000      	movs	r0, #0
 8015f7c:	491a      	ldr	r1, [pc, #104]	; (8015fe8 <__ieee754_pow+0xa08>)
 8015f7e:	f7ff bb8f 	b.w	80156a0 <__ieee754_pow+0xc0>
 8015f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f86:	f7ff bb8b 	b.w	80156a0 <__ieee754_pow+0xc0>
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	4639      	mov	r1, r7
 8015f8e:	f7ff bb87 	b.w	80156a0 <__ieee754_pow+0xc0>
 8015f92:	4693      	mov	fp, r2
 8015f94:	f7ff bb98 	b.w	80156c8 <__ieee754_pow+0xe8>
 8015f98:	00000000 	.word	0x00000000
 8015f9c:	3fe62e43 	.word	0x3fe62e43
 8015fa0:	fefa39ef 	.word	0xfefa39ef
 8015fa4:	3fe62e42 	.word	0x3fe62e42
 8015fa8:	0ca86c39 	.word	0x0ca86c39
 8015fac:	be205c61 	.word	0xbe205c61
 8015fb0:	72bea4d0 	.word	0x72bea4d0
 8015fb4:	3e663769 	.word	0x3e663769
 8015fb8:	c5d26bf1 	.word	0xc5d26bf1
 8015fbc:	3ebbbd41 	.word	0x3ebbbd41
 8015fc0:	af25de2c 	.word	0xaf25de2c
 8015fc4:	3f11566a 	.word	0x3f11566a
 8015fc8:	16bebd93 	.word	0x16bebd93
 8015fcc:	3f66c16c 	.word	0x3f66c16c
 8015fd0:	5555553e 	.word	0x5555553e
 8015fd4:	3fc55555 	.word	0x3fc55555
 8015fd8:	c2f8f359 	.word	0xc2f8f359
 8015fdc:	01a56e1f 	.word	0x01a56e1f
 8015fe0:	3fe00000 	.word	0x3fe00000
 8015fe4:	000fffff 	.word	0x000fffff
 8015fe8:	3ff00000 	.word	0x3ff00000
 8015fec:	4090cbff 	.word	0x4090cbff
 8015ff0:	3f6f3400 	.word	0x3f6f3400
 8015ff4:	652b82fe 	.word	0x652b82fe
 8015ff8:	3c971547 	.word	0x3c971547

08015ffc <__ieee754_sqrt>:
 8015ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016000:	4955      	ldr	r1, [pc, #340]	; (8016158 <__ieee754_sqrt+0x15c>)
 8016002:	ec55 4b10 	vmov	r4, r5, d0
 8016006:	43a9      	bics	r1, r5
 8016008:	462b      	mov	r3, r5
 801600a:	462a      	mov	r2, r5
 801600c:	d112      	bne.n	8016034 <__ieee754_sqrt+0x38>
 801600e:	ee10 2a10 	vmov	r2, s0
 8016012:	ee10 0a10 	vmov	r0, s0
 8016016:	4629      	mov	r1, r5
 8016018:	f7ea fb0e 	bl	8000638 <__aeabi_dmul>
 801601c:	4602      	mov	r2, r0
 801601e:	460b      	mov	r3, r1
 8016020:	4620      	mov	r0, r4
 8016022:	4629      	mov	r1, r5
 8016024:	f7ea f952 	bl	80002cc <__adddf3>
 8016028:	4604      	mov	r4, r0
 801602a:	460d      	mov	r5, r1
 801602c:	ec45 4b10 	vmov	d0, r4, r5
 8016030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016034:	2d00      	cmp	r5, #0
 8016036:	ee10 0a10 	vmov	r0, s0
 801603a:	4621      	mov	r1, r4
 801603c:	dc0f      	bgt.n	801605e <__ieee754_sqrt+0x62>
 801603e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016042:	4330      	orrs	r0, r6
 8016044:	d0f2      	beq.n	801602c <__ieee754_sqrt+0x30>
 8016046:	b155      	cbz	r5, 801605e <__ieee754_sqrt+0x62>
 8016048:	ee10 2a10 	vmov	r2, s0
 801604c:	4620      	mov	r0, r4
 801604e:	4629      	mov	r1, r5
 8016050:	f7ea f93a 	bl	80002c8 <__aeabi_dsub>
 8016054:	4602      	mov	r2, r0
 8016056:	460b      	mov	r3, r1
 8016058:	f7ea fc18 	bl	800088c <__aeabi_ddiv>
 801605c:	e7e4      	b.n	8016028 <__ieee754_sqrt+0x2c>
 801605e:	151b      	asrs	r3, r3, #20
 8016060:	d073      	beq.n	801614a <__ieee754_sqrt+0x14e>
 8016062:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016066:	07dd      	lsls	r5, r3, #31
 8016068:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801606c:	bf48      	it	mi
 801606e:	0fc8      	lsrmi	r0, r1, #31
 8016070:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016074:	bf44      	itt	mi
 8016076:	0049      	lslmi	r1, r1, #1
 8016078:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801607c:	2500      	movs	r5, #0
 801607e:	1058      	asrs	r0, r3, #1
 8016080:	0fcb      	lsrs	r3, r1, #31
 8016082:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016086:	0049      	lsls	r1, r1, #1
 8016088:	2316      	movs	r3, #22
 801608a:	462c      	mov	r4, r5
 801608c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016090:	19a7      	adds	r7, r4, r6
 8016092:	4297      	cmp	r7, r2
 8016094:	bfde      	ittt	le
 8016096:	19bc      	addle	r4, r7, r6
 8016098:	1bd2      	suble	r2, r2, r7
 801609a:	19ad      	addle	r5, r5, r6
 801609c:	0fcf      	lsrs	r7, r1, #31
 801609e:	3b01      	subs	r3, #1
 80160a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80160a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80160a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80160ac:	d1f0      	bne.n	8016090 <__ieee754_sqrt+0x94>
 80160ae:	f04f 0c20 	mov.w	ip, #32
 80160b2:	469e      	mov	lr, r3
 80160b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80160b8:	42a2      	cmp	r2, r4
 80160ba:	eb06 070e 	add.w	r7, r6, lr
 80160be:	dc02      	bgt.n	80160c6 <__ieee754_sqrt+0xca>
 80160c0:	d112      	bne.n	80160e8 <__ieee754_sqrt+0xec>
 80160c2:	428f      	cmp	r7, r1
 80160c4:	d810      	bhi.n	80160e8 <__ieee754_sqrt+0xec>
 80160c6:	2f00      	cmp	r7, #0
 80160c8:	eb07 0e06 	add.w	lr, r7, r6
 80160cc:	da42      	bge.n	8016154 <__ieee754_sqrt+0x158>
 80160ce:	f1be 0f00 	cmp.w	lr, #0
 80160d2:	db3f      	blt.n	8016154 <__ieee754_sqrt+0x158>
 80160d4:	f104 0801 	add.w	r8, r4, #1
 80160d8:	1b12      	subs	r2, r2, r4
 80160da:	428f      	cmp	r7, r1
 80160dc:	bf88      	it	hi
 80160de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80160e2:	1bc9      	subs	r1, r1, r7
 80160e4:	4433      	add	r3, r6
 80160e6:	4644      	mov	r4, r8
 80160e8:	0052      	lsls	r2, r2, #1
 80160ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80160ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80160f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80160f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80160fa:	d1dd      	bne.n	80160b8 <__ieee754_sqrt+0xbc>
 80160fc:	430a      	orrs	r2, r1
 80160fe:	d006      	beq.n	801610e <__ieee754_sqrt+0x112>
 8016100:	1c5c      	adds	r4, r3, #1
 8016102:	bf13      	iteet	ne
 8016104:	3301      	addne	r3, #1
 8016106:	3501      	addeq	r5, #1
 8016108:	4663      	moveq	r3, ip
 801610a:	f023 0301 	bicne.w	r3, r3, #1
 801610e:	106a      	asrs	r2, r5, #1
 8016110:	085b      	lsrs	r3, r3, #1
 8016112:	07e9      	lsls	r1, r5, #31
 8016114:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016118:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801611c:	bf48      	it	mi
 801611e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016122:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016126:	461c      	mov	r4, r3
 8016128:	e780      	b.n	801602c <__ieee754_sqrt+0x30>
 801612a:	0aca      	lsrs	r2, r1, #11
 801612c:	3815      	subs	r0, #21
 801612e:	0549      	lsls	r1, r1, #21
 8016130:	2a00      	cmp	r2, #0
 8016132:	d0fa      	beq.n	801612a <__ieee754_sqrt+0x12e>
 8016134:	02d6      	lsls	r6, r2, #11
 8016136:	d50a      	bpl.n	801614e <__ieee754_sqrt+0x152>
 8016138:	f1c3 0420 	rsb	r4, r3, #32
 801613c:	fa21 f404 	lsr.w	r4, r1, r4
 8016140:	1e5d      	subs	r5, r3, #1
 8016142:	4099      	lsls	r1, r3
 8016144:	4322      	orrs	r2, r4
 8016146:	1b43      	subs	r3, r0, r5
 8016148:	e78b      	b.n	8016062 <__ieee754_sqrt+0x66>
 801614a:	4618      	mov	r0, r3
 801614c:	e7f0      	b.n	8016130 <__ieee754_sqrt+0x134>
 801614e:	0052      	lsls	r2, r2, #1
 8016150:	3301      	adds	r3, #1
 8016152:	e7ef      	b.n	8016134 <__ieee754_sqrt+0x138>
 8016154:	46a0      	mov	r8, r4
 8016156:	e7bf      	b.n	80160d8 <__ieee754_sqrt+0xdc>
 8016158:	7ff00000 	.word	0x7ff00000

0801615c <fabs>:
 801615c:	ec51 0b10 	vmov	r0, r1, d0
 8016160:	ee10 2a10 	vmov	r2, s0
 8016164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016168:	ec43 2b10 	vmov	d0, r2, r3
 801616c:	4770      	bx	lr

0801616e <finite>:
 801616e:	ee10 3a90 	vmov	r3, s1
 8016172:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016176:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801617a:	0fc0      	lsrs	r0, r0, #31
 801617c:	4770      	bx	lr

0801617e <matherr>:
 801617e:	2000      	movs	r0, #0
 8016180:	4770      	bx	lr
 8016182:	0000      	movs	r0, r0
 8016184:	0000      	movs	r0, r0
	...

08016188 <nan>:
 8016188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016190 <nan+0x8>
 801618c:	4770      	bx	lr
 801618e:	bf00      	nop
 8016190:	00000000 	.word	0x00000000
 8016194:	7ff80000 	.word	0x7ff80000

08016198 <rint>:
 8016198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801619a:	ec51 0b10 	vmov	r0, r1, d0
 801619e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80161a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80161a6:	2e13      	cmp	r6, #19
 80161a8:	460b      	mov	r3, r1
 80161aa:	ee10 4a10 	vmov	r4, s0
 80161ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80161b2:	dc56      	bgt.n	8016262 <rint+0xca>
 80161b4:	2e00      	cmp	r6, #0
 80161b6:	da2b      	bge.n	8016210 <rint+0x78>
 80161b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80161bc:	4302      	orrs	r2, r0
 80161be:	d023      	beq.n	8016208 <rint+0x70>
 80161c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80161c4:	4302      	orrs	r2, r0
 80161c6:	4254      	negs	r4, r2
 80161c8:	4314      	orrs	r4, r2
 80161ca:	0c4b      	lsrs	r3, r1, #17
 80161cc:	0b24      	lsrs	r4, r4, #12
 80161ce:	045b      	lsls	r3, r3, #17
 80161d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80161d4:	ea44 0103 	orr.w	r1, r4, r3
 80161d8:	460b      	mov	r3, r1
 80161da:	492f      	ldr	r1, [pc, #188]	; (8016298 <rint+0x100>)
 80161dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80161e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80161e4:	4602      	mov	r2, r0
 80161e6:	4639      	mov	r1, r7
 80161e8:	4630      	mov	r0, r6
 80161ea:	f7ea f86f 	bl	80002cc <__adddf3>
 80161ee:	e9cd 0100 	strd	r0, r1, [sp]
 80161f2:	463b      	mov	r3, r7
 80161f4:	4632      	mov	r2, r6
 80161f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80161fa:	f7ea f865 	bl	80002c8 <__aeabi_dsub>
 80161fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016202:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016206:	4639      	mov	r1, r7
 8016208:	ec41 0b10 	vmov	d0, r0, r1
 801620c:	b003      	add	sp, #12
 801620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016210:	4a22      	ldr	r2, [pc, #136]	; (801629c <rint+0x104>)
 8016212:	4132      	asrs	r2, r6
 8016214:	ea01 0702 	and.w	r7, r1, r2
 8016218:	4307      	orrs	r7, r0
 801621a:	d0f5      	beq.n	8016208 <rint+0x70>
 801621c:	0852      	lsrs	r2, r2, #1
 801621e:	4011      	ands	r1, r2
 8016220:	430c      	orrs	r4, r1
 8016222:	d00b      	beq.n	801623c <rint+0xa4>
 8016224:	ea23 0202 	bic.w	r2, r3, r2
 8016228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801622c:	2e13      	cmp	r6, #19
 801622e:	fa43 f306 	asr.w	r3, r3, r6
 8016232:	bf0c      	ite	eq
 8016234:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016238:	2400      	movne	r4, #0
 801623a:	4313      	orrs	r3, r2
 801623c:	4916      	ldr	r1, [pc, #88]	; (8016298 <rint+0x100>)
 801623e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016242:	4622      	mov	r2, r4
 8016244:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016248:	4620      	mov	r0, r4
 801624a:	4629      	mov	r1, r5
 801624c:	f7ea f83e 	bl	80002cc <__adddf3>
 8016250:	e9cd 0100 	strd	r0, r1, [sp]
 8016254:	4622      	mov	r2, r4
 8016256:	462b      	mov	r3, r5
 8016258:	e9dd 0100 	ldrd	r0, r1, [sp]
 801625c:	f7ea f834 	bl	80002c8 <__aeabi_dsub>
 8016260:	e7d2      	b.n	8016208 <rint+0x70>
 8016262:	2e33      	cmp	r6, #51	; 0x33
 8016264:	dd07      	ble.n	8016276 <rint+0xde>
 8016266:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801626a:	d1cd      	bne.n	8016208 <rint+0x70>
 801626c:	ee10 2a10 	vmov	r2, s0
 8016270:	f7ea f82c 	bl	80002cc <__adddf3>
 8016274:	e7c8      	b.n	8016208 <rint+0x70>
 8016276:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801627a:	f04f 32ff 	mov.w	r2, #4294967295
 801627e:	40f2      	lsrs	r2, r6
 8016280:	4210      	tst	r0, r2
 8016282:	d0c1      	beq.n	8016208 <rint+0x70>
 8016284:	0852      	lsrs	r2, r2, #1
 8016286:	4210      	tst	r0, r2
 8016288:	bf1f      	itttt	ne
 801628a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801628e:	ea20 0202 	bicne.w	r2, r0, r2
 8016292:	4134      	asrne	r4, r6
 8016294:	4314      	orrne	r4, r2
 8016296:	e7d1      	b.n	801623c <rint+0xa4>
 8016298:	08016a70 	.word	0x08016a70
 801629c:	000fffff 	.word	0x000fffff

080162a0 <scalbn>:
 80162a0:	b570      	push	{r4, r5, r6, lr}
 80162a2:	ec55 4b10 	vmov	r4, r5, d0
 80162a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80162aa:	4606      	mov	r6, r0
 80162ac:	462b      	mov	r3, r5
 80162ae:	b9aa      	cbnz	r2, 80162dc <scalbn+0x3c>
 80162b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80162b4:	4323      	orrs	r3, r4
 80162b6:	d03b      	beq.n	8016330 <scalbn+0x90>
 80162b8:	4b31      	ldr	r3, [pc, #196]	; (8016380 <scalbn+0xe0>)
 80162ba:	4629      	mov	r1, r5
 80162bc:	2200      	movs	r2, #0
 80162be:	ee10 0a10 	vmov	r0, s0
 80162c2:	f7ea f9b9 	bl	8000638 <__aeabi_dmul>
 80162c6:	4b2f      	ldr	r3, [pc, #188]	; (8016384 <scalbn+0xe4>)
 80162c8:	429e      	cmp	r6, r3
 80162ca:	4604      	mov	r4, r0
 80162cc:	460d      	mov	r5, r1
 80162ce:	da12      	bge.n	80162f6 <scalbn+0x56>
 80162d0:	a327      	add	r3, pc, #156	; (adr r3, 8016370 <scalbn+0xd0>)
 80162d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d6:	f7ea f9af 	bl	8000638 <__aeabi_dmul>
 80162da:	e009      	b.n	80162f0 <scalbn+0x50>
 80162dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80162e0:	428a      	cmp	r2, r1
 80162e2:	d10c      	bne.n	80162fe <scalbn+0x5e>
 80162e4:	ee10 2a10 	vmov	r2, s0
 80162e8:	4620      	mov	r0, r4
 80162ea:	4629      	mov	r1, r5
 80162ec:	f7e9 ffee 	bl	80002cc <__adddf3>
 80162f0:	4604      	mov	r4, r0
 80162f2:	460d      	mov	r5, r1
 80162f4:	e01c      	b.n	8016330 <scalbn+0x90>
 80162f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80162fa:	460b      	mov	r3, r1
 80162fc:	3a36      	subs	r2, #54	; 0x36
 80162fe:	4432      	add	r2, r6
 8016300:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016304:	428a      	cmp	r2, r1
 8016306:	dd0b      	ble.n	8016320 <scalbn+0x80>
 8016308:	ec45 4b11 	vmov	d1, r4, r5
 801630c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016378 <scalbn+0xd8>
 8016310:	f000 f83c 	bl	801638c <copysign>
 8016314:	a318      	add	r3, pc, #96	; (adr r3, 8016378 <scalbn+0xd8>)
 8016316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631a:	ec51 0b10 	vmov	r0, r1, d0
 801631e:	e7da      	b.n	80162d6 <scalbn+0x36>
 8016320:	2a00      	cmp	r2, #0
 8016322:	dd08      	ble.n	8016336 <scalbn+0x96>
 8016324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801632c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016330:	ec45 4b10 	vmov	d0, r4, r5
 8016334:	bd70      	pop	{r4, r5, r6, pc}
 8016336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801633a:	da0d      	bge.n	8016358 <scalbn+0xb8>
 801633c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016340:	429e      	cmp	r6, r3
 8016342:	ec45 4b11 	vmov	d1, r4, r5
 8016346:	dce1      	bgt.n	801630c <scalbn+0x6c>
 8016348:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016370 <scalbn+0xd0>
 801634c:	f000 f81e 	bl	801638c <copysign>
 8016350:	a307      	add	r3, pc, #28	; (adr r3, 8016370 <scalbn+0xd0>)
 8016352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016356:	e7e0      	b.n	801631a <scalbn+0x7a>
 8016358:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801635c:	3236      	adds	r2, #54	; 0x36
 801635e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016366:	4620      	mov	r0, r4
 8016368:	4629      	mov	r1, r5
 801636a:	2200      	movs	r2, #0
 801636c:	4b06      	ldr	r3, [pc, #24]	; (8016388 <scalbn+0xe8>)
 801636e:	e7b2      	b.n	80162d6 <scalbn+0x36>
 8016370:	c2f8f359 	.word	0xc2f8f359
 8016374:	01a56e1f 	.word	0x01a56e1f
 8016378:	8800759c 	.word	0x8800759c
 801637c:	7e37e43c 	.word	0x7e37e43c
 8016380:	43500000 	.word	0x43500000
 8016384:	ffff3cb0 	.word	0xffff3cb0
 8016388:	3c900000 	.word	0x3c900000

0801638c <copysign>:
 801638c:	ec51 0b10 	vmov	r0, r1, d0
 8016390:	ee11 0a90 	vmov	r0, s3
 8016394:	ee10 2a10 	vmov	r2, s0
 8016398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801639c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80163a0:	ea41 0300 	orr.w	r3, r1, r0
 80163a4:	ec43 2b10 	vmov	d0, r2, r3
 80163a8:	4770      	bx	lr
	...

080163ac <_init>:
 80163ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ae:	bf00      	nop
 80163b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163b2:	bc08      	pop	{r3}
 80163b4:	469e      	mov	lr, r3
 80163b6:	4770      	bx	lr

080163b8 <_fini>:
 80163b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ba:	bf00      	nop
 80163bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163be:	bc08      	pop	{r3}
 80163c0:	469e      	mov	lr, r3
 80163c2:	4770      	bx	lr
