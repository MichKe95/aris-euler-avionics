
sensor_board_rev3_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800e330  0800e330  0001e330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5a0  0800e5a0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5a0  0800e5a0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5a0  0800e5a0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5a0  0800e5a0  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5a4  0800e5a4  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce5c  200001f4  0800e79c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d050  0800e79c  0002d050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031459  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005992  00000000  00000000  0005167d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fe8  00000000  00000000  00057010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d50  00000000  00000000  00058ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000913a  00000000  00000000  0005ad48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f0ae  00000000  00000000  00063e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e45b9  00000000  00000000  00082f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001674e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008828  00000000  00000000  00167564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e318 	.word	0x0800e318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800e318 	.word	0x0800e318

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08d      	sub	sp, #52	; 0x34
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f001 fdd2 	bl	800261a <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USB_DEVICE_Init();
 8000a76:	f00c fa81 	bl	800cf7c <MX_USB_DEVICE_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f891 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f9cf 	bl	8000e20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a82:	f000 f911 	bl	8000ca8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a86:	f000 f94f 	bl	8000d28 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a8a:	f000 f98b 	bl	8000da4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a8e:	f008 fde5 	bl	800965c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  /* Barometer Mutex */
  const osMutexAttr_t baro_mutex_attr = {
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <main+0xdc>)
 8000a94:	f107 0420 	add.w	r4, r7, #32
 8000a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  baro_mutex = osMutexNew(&baro_mutex_attr);
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 ff8a 	bl	80099bc <osMutexNew>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <main+0xe0>)
 8000aac:	601a      	str	r2, [r3, #0]
  /* IMU Mutex */
  const osMutexAttr_t imu_mutex_attr = {
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <main+0xe4>)
 8000ab0:	f107 0410 	add.w	r4, r7, #16
 8000ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  imu_mutex = osMutexNew(&imu_mutex_attr);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 ff7c 	bl	80099bc <osMutexNew>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <main+0xe8>)
 8000ac8:	601a      	str	r2, [r3, #0]


#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <main+0xec>)
 8000acc:	463c      	mov	r4, r7
 8000ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 ff70 	bl	80099bc <osMutexNew>
 8000adc:	4602      	mov	r2, r0
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <main+0xf0>)
 8000ae0:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  preprocess_queue = osMessageQueueNew(PREPROCESS_QUEUE_SIZE, sizeof(imu_data_t), NULL);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	211c      	movs	r1, #28
 8000ae6:	2020      	movs	r0, #32
 8000ae8:	f009 f8b0 	bl	8009c4c <osMessageQueueNew>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <main+0xf4>)
 8000af0:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <main+0xf8>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	481c      	ldr	r0, [pc, #112]	; (8000b68 <main+0xfc>)
 8000af8:	f008 fe4c 	bl	8009794 <osThreadNew>
 8000afc:	4602      	mov	r2, r0
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <main+0x100>)
 8000b00:	601a      	str	r2, [r3, #0]

  /* creation of task_baro_read */
  task_baro_readHandle = osThreadNew(vTaskBaroRead, NULL, &task_baro_read_attributes);
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <main+0x104>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	481b      	ldr	r0, [pc, #108]	; (8000b74 <main+0x108>)
 8000b08:	f008 fe44 	bl	8009794 <osThreadNew>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <main+0x10c>)
 8000b10:	601a      	str	r2, [r3, #0]

  /* creation of task_imu_read */
  task_imu_readHandle = osThreadNew(vTaskImuRead, NULL, &task_imu_read_attributes);
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <main+0x110>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <main+0x114>)
 8000b18:	f008 fe3c 	bl	8009794 <osThreadNew>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <main+0x118>)
 8000b20:	601a      	str	r2, [r3, #0]

  /* creation of task_send_to_mb */
  task_send_to_mbHandle = osThreadNew(vTaskSendToMb, NULL, &task_send_to_mb_attributes);
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <main+0x11c>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4819      	ldr	r0, [pc, #100]	; (8000b8c <main+0x120>)
 8000b28:	f008 fe34 	bl	8009794 <osThreadNew>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <main+0x124>)
 8000b30:	601a      	str	r2, [r3, #0]

  /* creation of task_preprocess */
  task_preprocessHandle = osThreadNew(vTaskPreprocess, NULL, &task_preprocess_attributes);
 8000b32:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <main+0x128>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <main+0x12c>)
 8000b38:	f008 fe2c 	bl	8009794 <osThreadNew>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <main+0x130>)
 8000b40:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b42:	f008 fdbf 	bl	80096c4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <main+0xda>
 8000b48:	0800e388 	.word	0x0800e388
 8000b4c:	2000c0bc 	.word	0x2000c0bc
 8000b50:	0800e3a4 	.word	0x0800e3a4
 8000b54:	20005f34 	.word	0x20005f34
 8000b58:	0800e3c0 	.word	0x0800e3c0
 8000b5c:	2000c034 	.word	0x2000c034
 8000b60:	20001dc8 	.word	0x20001dc8
 8000b64:	0800e470 	.word	0x0800e470
 8000b68:	08000ee5 	.word	0x08000ee5
 8000b6c:	20001d68 	.word	0x20001d68
 8000b70:	0800e494 	.word	0x0800e494
 8000b74:	08001349 	.word	0x08001349
 8000b78:	2000a02c 	.word	0x2000a02c
 8000b7c:	0800e4b8 	.word	0x0800e4b8
 8000b80:	080017ed 	.word	0x080017ed
 8000b84:	2000c09c 	.word	0x2000c09c
 8000b88:	0800e4dc 	.word	0x0800e4dc
 8000b8c:	08002491 	.word	0x08002491
 8000b90:	20006028 	.word	0x20006028
 8000b94:	0800e500 	.word	0x0800e500
 8000b98:	08002141 	.word	0x08002141
 8000b9c:	2000a030 	.word	0x2000a030

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0ae      	sub	sp, #184	; 0xb8
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000baa:	2244      	movs	r2, #68	; 0x44
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00c ff93 	bl	800dada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2260      	movs	r2, #96	; 0x60
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00c ff85 	bl	800dada <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bf8:	2328      	movs	r3, #40	; 0x28
 8000bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fcb7 	bl	8004588 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c20:	f000 f97c 	bl	8000f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 f8c2 	bl	8004dc8 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4a:	f000 f967 	bl	8000f1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000c4e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000c52:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c66:	2318      	movs	r3, #24
 8000c68:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000c76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c7a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fac2 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c8a:	f000 f947 	bl	8000f1c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c92:	f003 fc13 	bl	80044bc <HAL_PWREx_ControlVoltageScaling>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000c9c:	f000 f93e 	bl	8000f1c <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	37b8      	adds	r7, #184	; 0xb8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <MX_I2C1_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ce4:	f001 ffa8 	bl	8002c38 <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 f915 	bl	8000f1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cf6:	f002 fbf9 	bl	80034ec <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 f90c 	bl	8000f1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000d08:	f002 fc3b 	bl	8003582 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f903 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20001ee8 	.word	0x20001ee8
 8000d20:	40005400 	.word	0x40005400
 8000d24:	00702991 	.word	0x00702991

08000d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <MX_SPI1_Init+0x78>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d5e:	2218      	movs	r2, #24
 8000d60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d76:	2207      	movs	r2, #7
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d88:	f004 fd72 	bl	8005870 <HAL_SPI_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 f8c3 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000c038 	.word	0x2000c038
 8000da0:	40013000 	.word	0x40013000

08000da4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_SPI2_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dda:	2238      	movs	r2, #56	; 0x38
 8000ddc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000df2:	2207      	movs	r2, #7
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dfe:	2208      	movs	r2, #8
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000e04:	f004 fd34 	bl	8005870 <HAL_SPI_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f000 f885 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20001dcc 	.word	0x20001dcc
 8000e1c:	40003800 	.word	0x40003800

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f001 febf 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_GPIO_Init+0xc0>)
 8000e92:	f001 feb9 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e96:	2310      	movs	r3, #16
 8000e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 fd30 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_GPIO_Init+0xc0>)
 8000ece:	f001 fd21 	bl	8002914 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000eec:	f00c f846 	bl	800cf7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f008 fcf5 	bl	80098e0 <osDelay>
 8000ef6:	e7fb      	b.n	8000ef0 <StartDefaultTask+0xc>

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0a:	f001 fb9f 	bl	800264c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40012c00 	.word	0x40012c00

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	210f      	movs	r1, #15
 8000f66:	f06f 0001 	mvn.w	r0, #1
 8000f6a:	f001 fc67 	bl	800283c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_I2C_MspInit+0x80>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d129      	bne.n	8000ff2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f001 fc9d 	bl	8002914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <HAL_SPI_MspInit+0xec>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d129      	bne.n	800107a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800102c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001030:	6613      	str	r3, [r2, #96]	; 0x60
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001056:	23c2      	movs	r3, #194	; 0xc2
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001066:	2305      	movs	r3, #5
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f001 fc4e 	bl	8002914 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001078:	e035      	b.n	80010e6 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <HAL_SPI_MspInit+0xf4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d130      	bne.n	80010e6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6593      	str	r3, [r2, #88]	; 0x58
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80010b4:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c6:	2305      	movs	r3, #5
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <HAL_SPI_MspInit+0xf8>)
 80010d2:	f001 fc1f 	bl	8002914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	2024      	movs	r0, #36	; 0x24
 80010dc:	f001 fbae 	bl	800283c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010e0:	2024      	movs	r0, #36	; 0x24
 80010e2:	f001 fbc7 	bl	8002874 <HAL_NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40013000 	.word	0x40013000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40003800 	.word	0x40003800
 80010fc:	48000400 	.word	0x48000400

08001100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	2019      	movs	r0, #25
 8001116:	f001 fb91 	bl	800283c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800111a:	2019      	movs	r0, #25
 800111c:	f001 fbaa 	bl	8002874 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_InitTick+0x9c>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_InitTick+0x9c>)
 8001126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112a:	6613      	str	r3, [r2, #96]	; 0x60
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_InitTick+0x9c>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001138:	f107 0210 	add.w	r2, r7, #16
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f003 ffce 	bl	80050e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001148:	f003 ffb6 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 800114c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_InitTick+0xa0>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9b      	lsrs	r3, r3, #18
 8001158:	3b01      	subs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_InitTick+0xa4>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <HAL_InitTick+0xa8>)
 8001160:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_InitTick+0xa4>)
 8001164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001168:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_InitTick+0xa4>)
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_InitTick+0xa4>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_InitTick+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <HAL_InitTick+0xa4>)
 800117e:	f005 fb37 	bl	80067f0 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d104      	bne.n	8001192 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <HAL_InitTick+0xa4>)
 800118a:	f005 fb67 	bl	800685c <HAL_TIM_Base_Start_IT>
 800118e:	4603      	mov	r3, r0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	431bde83 	.word	0x431bde83
 80011a4:	2000c0c0 	.word	0x2000c0c0
 80011a8:	40012c00 	.word	0x40012c00

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011e6:	f005 fb63 	bl	80068b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000c0c0 	.word	0x2000c0c0

080011f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <SPI2_IRQHandler+0x10>)
 80011fa:	f005 f865 	bl	80062c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20001dcc 	.word	0x20001dcc

08001208 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <USB_IRQHandler+0x10>)
 800120e:	f002 fb0e 	bl	800382e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000cdd8 	.word	0x2000cdd8

0800121c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x50>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x16>
		heap_end = &end;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_sbrk+0x50>)
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <_sbrk+0x54>)
 8001230:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <_sbrk+0x50>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <_sbrk+0x50>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	466a      	mov	r2, sp
 8001242:	4293      	cmp	r3, r2
 8001244:	d907      	bls.n	8001256 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001246:	f00c fc13 	bl	800da70 <__errno>
 800124a:	4602      	mov	r2, r0
 800124c:	230c      	movs	r3, #12
 800124e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	e006      	b.n	8001264 <_sbrk+0x48>
	}

	heap_end += incr;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <_sbrk+0x50>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <_sbrk+0x50>)
 8001260:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000210 	.word	0x20000210
 8001270:	2000d050 	.word	0x2000d050

08001274 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <SystemInit+0x64>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <SystemInit+0x64>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <SystemInit+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <SystemInit+0x68>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <SystemInit+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <SystemInit+0x68>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <SystemInit+0x68>)
 80012a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <SystemInit+0x68>)
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <SystemInit+0x68>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <SystemInit+0x68>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <SystemInit+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SystemInit+0x64>)
 80012c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ca:	609a      	str	r2, [r3, #8]
#endif
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	40021000 	.word	0x40021000

080012e0 <UsbPrint>:
#include <stdio.h>
#include <stdarg.h>

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 80012e0:	b40f      	push	{r0, r1, r2, r3}
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <UsbPrint+0x60>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f008 fbfc 	bl	8009af0 <osMutexAcquire>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d118      	bne.n	8001330 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	21c8      	movs	r1, #200	; 0xc8
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <UsbPrint+0x64>)
 800130c:	f00c fc1a 	bl	800db44 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <UsbPrint+0x64>)
 8001312:	f7fe ff5d 	bl	80001d0 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29b      	uxth	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <UsbPrint+0x64>)
 800131e:	f00b feeb 	bl	800d0f8 <CDC_Transmit_FS>
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <UsbPrint+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f008 fc3e 	bl	8009bac <osMutexRelease>
	}
#endif
	return ret;
 8001330:	79fb      	ldrb	r3, [r7, #7]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800133c:	b004      	add	sp, #16
 800133e:	4770      	bx	lr
 8001340:	2000c034 	.word	0x2000c034
 8001344:	20005f60 	.word	0x20005f60

08001348 <vTaskBaroRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskBaroRead(void *argument) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	int32_t temperature;
	int32_t pressure;

	/* needed for calculation of temperature and pressure. Is read out in initialization */
	uint16_t coefficients[6];
	vInitBaroRead(coefficients);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f839 	bl	80013cc <vInitBaroRead>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800135a:	f008 f9e9 	bl	8009730 <osKernelGetTickCount>
 800135e:	6278      	str	r0, [r7, #36]	; 0x24
	tick_update = osKernelGetTickFreq() / BARO_SAMPLING_FREQ;
 8001360:	f008 fa0e 	bl	8009780 <osKernelGetTickFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <vTaskBaroRead+0x78>)
 8001368:	fba3 2302 	umull	r2, r3, r3, r2
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	623b      	str	r3, [r7, #32]
	while (1) {
		tick_count += tick_update;
 8001370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	4413      	add	r3, r2
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
		vReadBaro(&temperature, &pressure, coefficients);
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	f107 0118 	add.w	r1, r7, #24
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f8ff 	bl	8001588 <vReadBaro>

//		UsbPrint("P: %ld; T: %ld; t: %ld\n", pressure,
//				temperature, tick_count);

		/* If the Mutex is acquired we write the data into the right variable */
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <vTaskBaroRead+0x7c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f008 fbad 	bl	8009af0 <osMutexAcquire>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10d      	bne.n	80013b8 <vTaskBaroRead+0x70>
			baro_data_to_mb.temperature = temperature;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <vTaskBaroRead+0x80>)
 80013a0:	6053      	str	r3, [r2, #4]
			baro_data_to_mb.pressure = pressure;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <vTaskBaroRead+0x80>)
 80013a6:	6013      	str	r3, [r2, #0]
			baro_data_to_mb.ts = tick_count;
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <vTaskBaroRead+0x80>)
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	6093      	str	r3, [r2, #8]
			osMutexRelease(baro_mutex);
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <vTaskBaroRead+0x7c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f008 fbfa 	bl	8009bac <osMutexRelease>
		}

		osDelayUntil(tick_count);
 80013b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ba:	f008 fabf 	bl	800993c <osDelayUntil>
		tick_count += tick_update;
 80013be:	e7d7      	b.n	8001370 <vTaskBaroRead+0x28>
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	2000c0bc 	.word	0x2000c0bc
 80013c8:	20001d5c 	.word	0x20001d5c

080013cc <vInitBaroRead>:
	}
}

void vInitBaroRead(uint16_t coefficients[]) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	6078      	str	r0, [r7, #4]
	uint8_t command;
	uint8_t read_buffer[2];
	uint32_t wait_reset_time;
	wait_reset_time = 3 * osKernelGetTickFreq() / 1000;
 80013d4:	f008 f9d4 	bl	8009780 <osKernelGetTickFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	4a67      	ldr	r2, [pc, #412]	; (8001580 <vInitBaroRead+0x1b4>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	60fb      	str	r3, [r7, #12]

	/* Reset */
	command = BARO_COMMAND_RESET;
 80013ea:	231e      	movs	r3, #30
 80013ec:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDRESS, &command, BARO_COMMAND_LENGTH,
 80013ee:	f107 020b 	add.w	r2, r7, #11
 80013f2:	230a      	movs	r3, #10
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	21ee      	movs	r1, #238	; 0xee
 80013fa:	4862      	ldr	r0, [pc, #392]	; (8001584 <vInitBaroRead+0x1b8>)
 80013fc:	f001 fcac 	bl	8002d58 <HAL_I2C_Master_Transmit>
	BARO_I2C_TIMEOUT);
	osDelay(wait_reset_time);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f008 fa6d 	bl	80098e0 <osDelay>

	/* PROM Read (Coefficients) */
	READ_BARO_COEFF(0, command, coefficients);
 8001406:	23a2      	movs	r3, #162	; 0xa2
 8001408:	72fb      	strb	r3, [r7, #11]
 800140a:	f107 020b 	add.w	r2, r7, #11
 800140e:	230a      	movs	r3, #10
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	21ee      	movs	r1, #238	; 0xee
 8001416:	485b      	ldr	r0, [pc, #364]	; (8001584 <vInitBaroRead+0x1b8>)
 8001418:	f001 fc9e 	bl	8002d58 <HAL_I2C_Master_Transmit>
 800141c:	f107 0208 	add.w	r2, r7, #8
 8001420:	230a      	movs	r3, #10
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2302      	movs	r3, #2
 8001426:	21ee      	movs	r1, #238	; 0xee
 8001428:	4856      	ldr	r0, [pc, #344]	; (8001584 <vInitBaroRead+0x1b8>)
 800142a:	f001 fd89 	bl	8002f40 <HAL_I2C_Master_Receive>
 800142e:	7a3b      	ldrb	r3, [r7, #8]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21a      	sxth	r2, r3
 8001434:	7a7b      	ldrb	r3, [r7, #9]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b21b      	sxth	r3, r3
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(1, command, coefficients);
 8001442:	23a4      	movs	r3, #164	; 0xa4
 8001444:	72fb      	strb	r3, [r7, #11]
 8001446:	f107 020b 	add.w	r2, r7, #11
 800144a:	230a      	movs	r3, #10
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	21ee      	movs	r1, #238	; 0xee
 8001452:	484c      	ldr	r0, [pc, #304]	; (8001584 <vInitBaroRead+0x1b8>)
 8001454:	f001 fc80 	bl	8002d58 <HAL_I2C_Master_Transmit>
 8001458:	f107 0208 	add.w	r2, r7, #8
 800145c:	230a      	movs	r3, #10
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2302      	movs	r3, #2
 8001462:	21ee      	movs	r1, #238	; 0xee
 8001464:	4847      	ldr	r0, [pc, #284]	; (8001584 <vInitBaroRead+0x1b8>)
 8001466:	f001 fd6b 	bl	8002f40 <HAL_I2C_Master_Receive>
 800146a:	7a3b      	ldrb	r3, [r7, #8]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7a7b      	ldrb	r3, [r7, #9]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3302      	adds	r3, #2
 800147c:	b292      	uxth	r2, r2
 800147e:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(2, command, coefficients);
 8001480:	23a6      	movs	r3, #166	; 0xa6
 8001482:	72fb      	strb	r3, [r7, #11]
 8001484:	f107 020b 	add.w	r2, r7, #11
 8001488:	230a      	movs	r3, #10
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	21ee      	movs	r1, #238	; 0xee
 8001490:	483c      	ldr	r0, [pc, #240]	; (8001584 <vInitBaroRead+0x1b8>)
 8001492:	f001 fc61 	bl	8002d58 <HAL_I2C_Master_Transmit>
 8001496:	f107 0208 	add.w	r2, r7, #8
 800149a:	230a      	movs	r3, #10
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2302      	movs	r3, #2
 80014a0:	21ee      	movs	r1, #238	; 0xee
 80014a2:	4838      	ldr	r0, [pc, #224]	; (8001584 <vInitBaroRead+0x1b8>)
 80014a4:	f001 fd4c 	bl	8002f40 <HAL_I2C_Master_Receive>
 80014a8:	7a3b      	ldrb	r3, [r7, #8]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	7a7b      	ldrb	r3, [r7, #9]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3304      	adds	r3, #4
 80014ba:	b292      	uxth	r2, r2
 80014bc:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(3, command, coefficients);
 80014be:	23a8      	movs	r3, #168	; 0xa8
 80014c0:	72fb      	strb	r3, [r7, #11]
 80014c2:	f107 020b 	add.w	r2, r7, #11
 80014c6:	230a      	movs	r3, #10
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	21ee      	movs	r1, #238	; 0xee
 80014ce:	482d      	ldr	r0, [pc, #180]	; (8001584 <vInitBaroRead+0x1b8>)
 80014d0:	f001 fc42 	bl	8002d58 <HAL_I2C_Master_Transmit>
 80014d4:	f107 0208 	add.w	r2, r7, #8
 80014d8:	230a      	movs	r3, #10
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2302      	movs	r3, #2
 80014de:	21ee      	movs	r1, #238	; 0xee
 80014e0:	4828      	ldr	r0, [pc, #160]	; (8001584 <vInitBaroRead+0x1b8>)
 80014e2:	f001 fd2d 	bl	8002f40 <HAL_I2C_Master_Receive>
 80014e6:	7a3b      	ldrb	r3, [r7, #8]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	7a7b      	ldrb	r3, [r7, #9]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3306      	adds	r3, #6
 80014f8:	b292      	uxth	r2, r2
 80014fa:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(4, command, coefficients);
 80014fc:	23aa      	movs	r3, #170	; 0xaa
 80014fe:	72fb      	strb	r3, [r7, #11]
 8001500:	f107 020b 	add.w	r2, r7, #11
 8001504:	230a      	movs	r3, #10
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	21ee      	movs	r1, #238	; 0xee
 800150c:	481d      	ldr	r0, [pc, #116]	; (8001584 <vInitBaroRead+0x1b8>)
 800150e:	f001 fc23 	bl	8002d58 <HAL_I2C_Master_Transmit>
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	230a      	movs	r3, #10
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2302      	movs	r3, #2
 800151c:	21ee      	movs	r1, #238	; 0xee
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <vInitBaroRead+0x1b8>)
 8001520:	f001 fd0e 	bl	8002f40 <HAL_I2C_Master_Receive>
 8001524:	7a3b      	ldrb	r3, [r7, #8]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7a7b      	ldrb	r3, [r7, #9]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3308      	adds	r3, #8
 8001536:	b292      	uxth	r2, r2
 8001538:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(5, command, coefficients);
 800153a:	23ac      	movs	r3, #172	; 0xac
 800153c:	72fb      	strb	r3, [r7, #11]
 800153e:	f107 020b 	add.w	r2, r7, #11
 8001542:	230a      	movs	r3, #10
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	21ee      	movs	r1, #238	; 0xee
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <vInitBaroRead+0x1b8>)
 800154c:	f001 fc04 	bl	8002d58 <HAL_I2C_Master_Transmit>
 8001550:	f107 0208 	add.w	r2, r7, #8
 8001554:	230a      	movs	r3, #10
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2302      	movs	r3, #2
 800155a:	21ee      	movs	r1, #238	; 0xee
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <vInitBaroRead+0x1b8>)
 800155e:	f001 fcef 	bl	8002f40 <HAL_I2C_Master_Receive>
 8001562:	7a3b      	ldrb	r3, [r7, #8]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7a7b      	ldrb	r3, [r7, #9]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	330a      	adds	r3, #10
 8001574:	b292      	uxth	r2, r2
 8001576:	801a      	strh	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	10624dd3 	.word	0x10624dd3
 8001584:	20001ee8 	.word	0x20001ee8

08001588 <vReadBaro>:

void vReadBaro(int32_t *temperature, int32_t *pressure, uint16_t coefficients[]) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	uint8_t read_buffer[3];
	uint32_t wait_time_OSR;

	switch (BARO_OSR) {
	case 0:
		CALC_TEMP_PRESS(256, wait_time_OSR, command, pressure_raw,
 8001594:	f008 f8f4 	bl	8009780 <osKernelGetTickFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b36      	ldr	r3, [pc, #216]	; (8001674 <vReadBaro+0xec>)
 800159c:	fba3 2302 	umull	r2, r3, r3, r2
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
 80015a4:	2340      	movs	r3, #64	; 0x40
 80015a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015aa:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80015ae:	230a      	movs	r3, #10
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	21ee      	movs	r1, #238	; 0xee
 80015b6:	4830      	ldr	r0, [pc, #192]	; (8001678 <vReadBaro+0xf0>)
 80015b8:	f001 fbce 	bl	8002d58 <HAL_I2C_Master_Transmit>
 80015bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015be:	f008 f98f 	bl	80098e0 <osDelay>
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015c8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80015cc:	230a      	movs	r3, #10
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	21ee      	movs	r1, #238	; 0xee
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <vReadBaro+0xf0>)
 80015d6:	f001 fbbf 	bl	8002d58 <HAL_I2C_Master_Transmit>
 80015da:	f107 0214 	add.w	r2, r7, #20
 80015de:	230a      	movs	r3, #10
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2303      	movs	r3, #3
 80015e4:	21ee      	movs	r1, #238	; 0xee
 80015e6:	4824      	ldr	r0, [pc, #144]	; (8001678 <vReadBaro+0xf0>)
 80015e8:	f001 fcaa 	bl	8002f40 <HAL_I2C_Master_Receive>
 80015ec:	7d3b      	ldrb	r3, [r7, #20]
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	7d7b      	ldrb	r3, [r7, #21]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4313      	orrs	r3, r2
 80015f6:	7dba      	ldrb	r2, [r7, #22]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	2350      	movs	r3, #80	; 0x50
 80015fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001602:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001606:	230a      	movs	r3, #10
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2301      	movs	r3, #1
 800160c:	21ee      	movs	r1, #238	; 0xee
 800160e:	481a      	ldr	r0, [pc, #104]	; (8001678 <vReadBaro+0xf0>)
 8001610:	f001 fba2 	bl	8002d58 <HAL_I2C_Master_Transmit>
 8001614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001616:	f008 f963 	bl	80098e0 <osDelay>
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001620:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001624:	230a      	movs	r3, #10
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	21ee      	movs	r1, #238	; 0xee
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <vReadBaro+0xf0>)
 800162e:	f001 fb93 	bl	8002d58 <HAL_I2C_Master_Transmit>
 8001632:	f107 0214 	add.w	r2, r7, #20
 8001636:	230a      	movs	r3, #10
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2303      	movs	r3, #3
 800163c:	21ee      	movs	r1, #238	; 0xee
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <vReadBaro+0xf0>)
 8001640:	f001 fc7e 	bl	8002f40 <HAL_I2C_Master_Receive>
 8001644:	7d3b      	ldrb	r3, [r7, #20]
 8001646:	041a      	lsls	r2, r3, #16
 8001648:	7d7b      	ldrb	r3, [r7, #21]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4313      	orrs	r3, r2
 800164e:	7dba      	ldrb	r2, [r7, #22]
 8001650:	4313      	orrs	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	f107 0118 	add.w	r1, r7, #24
 8001658:	f107 021c 	add.w	r2, r7, #28
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f809 	bl	800167c <vCalculateTempPressure>
				temperature_raw, temperature, pressure, coefficients)
		;
		break;
 800166a:	bf00      	nop
		/* defaults to OSR 256 */
		CALC_TEMP_PRESS(256, wait_time_OSR, command, pressure_raw,
				temperature_raw, temperature, pressure, coefficients)
		;
	}
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	10624dd3 	.word	0x10624dd3
 8001678:	20001ee8 	.word	0x20001ee8

0800167c <vCalculateTempPressure>:

/* this is how we have to calculate temperature and Pressure which is written in the Datasheet */
void vCalculateTempPressure(int32_t *temperature, int32_t *pressure,
		uint32_t *temperature_raw, uint32_t *pressure_raw,
		uint16_t coefficients[]) {
 800167c:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8001680:	b08b      	sub	sp, #44	; 0x2c
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
	int64_t dT;
	int64_t OFF, SENS;

	dT = *temperature_raw - ((uint32_t) coefficients[4] << 8);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001692:	3308      	adds	r3, #8
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f04f 0400 	mov.w	r4, #0
 800169e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	/* Temperature in 2000  = 20.00° C */
	*temperature = (int32_t) 2000 + (dT * coefficients[5] >> 23);
 80016a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016a4:	330a      	adds	r3, #10
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f04f 0400 	mov.w	r4, #0
 80016ae:	6a3a      	ldr	r2, [r7, #32]
 80016b0:	fb04 f102 	mul.w	r1, r4, r2
 80016b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b6:	fb03 f202 	mul.w	r2, r3, r2
 80016ba:	440a      	add	r2, r1
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	fba1 3403 	umull	r3, r4, r1, r3
 80016c2:	4422      	add	r2, r4
 80016c4:	4614      	mov	r4, r2
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	0dd9      	lsrs	r1, r3, #23
 80016d0:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 80016d4:	15e2      	asrs	r2, r4, #23
 80016d6:	460b      	mov	r3, r1
 80016d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]

	OFF = ((int64_t) coefficients[1] << 17) + ((coefficients[3] * dT) >> 6);
 80016e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e4:	3302      	adds	r3, #2
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f04f 0400 	mov.w	r4, #0
 80016ee:	ea4f 39d3 	mov.w	r9, r3, lsr #15
 80016f2:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80016f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f8:	3306      	adds	r3, #6
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f04f 0400 	mov.w	r4, #0
 8001702:	6a3a      	ldr	r2, [r7, #32]
 8001704:	fb04 f102 	mul.w	r1, r4, r2
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	fb03 f202 	mul.w	r2, r3, r2
 800170e:	1888      	adds	r0, r1, r2
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	fba2 1203 	umull	r1, r2, r2, r3
 8001716:	1883      	adds	r3, r0, r2
 8001718:	461a      	mov	r2, r3
 800171a:	f04f 0b00 	mov.w	fp, #0
 800171e:	f04f 0c00 	mov.w	ip, #0
 8001722:	ea4f 1b91 	mov.w	fp, r1, lsr #6
 8001726:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 800172a:	ea4f 1ca2 	mov.w	ip, r2, asr #6
 800172e:	eb1b 0308 	adds.w	r3, fp, r8
 8001732:	eb4c 0409 	adc.w	r4, ip, r9
 8001736:	e9c7 3406 	strd	r3, r4, [r7, #24]
	SENS = ((int64_t) coefficients[0] << 16) + ((coefficients[2] * dT) >> 7);
 800173a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	0c1e      	lsrs	r6, r3, #16
 8001746:	041d      	lsls	r5, r3, #16
 8001748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800174a:	3304      	adds	r3, #4
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	6a3a      	ldr	r2, [r7, #32]
 8001756:	fb04 f102 	mul.w	r1, r4, r2
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	fb03 f202 	mul.w	r2, r3, r2
 8001760:	1888      	adds	r0, r1, r2
 8001762:	6a3a      	ldr	r2, [r7, #32]
 8001764:	fba2 1203 	umull	r1, r2, r2, r3
 8001768:	1883      	adds	r3, r0, r2
 800176a:	461a      	mov	r2, r3
 800176c:	f04f 0800 	mov.w	r8, #0
 8001770:	f04f 0900 	mov.w	r9, #0
 8001774:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8001778:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 800177c:	ea4f 19e2 	mov.w	r9, r2, asr #7
 8001780:	eb18 0305 	adds.w	r3, r8, r5
 8001784:	eb49 0406 	adc.w	r4, r9, r6
 8001788:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* Pressure in 110002 = 1100.02 mbar */
	*pressure = (int32_t) ((((*pressure_raw * SENS) >> 21) - OFF) >> 15);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f04f 0400 	mov.w	r4, #0
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	fb04 f102 	mul.w	r1, r4, r2
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	fb03 f202 	mul.w	r2, r3, r2
 80017a0:	1888      	adds	r0, r1, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	fba2 1203 	umull	r1, r2, r2, r3
 80017a8:	1883      	adds	r3, r0, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	f04f 0400 	mov.w	r4, #0
 80017b4:	0d4b      	lsrs	r3, r1, #21
 80017b6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80017ba:	1554      	asrs	r4, r2, #21
 80017bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017c0:	1a5b      	subs	r3, r3, r1
 80017c2:	eb64 0402 	sbc.w	r4, r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	4626      	mov	r6, r4
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	0beb      	lsrs	r3, r5, #15
 80017d4:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80017d8:	13f4      	asrs	r4, r6, #15
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	372c      	adds	r7, #44	; 0x2c
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80017ea:	4770      	bx	lr

080017ec <vTaskImuRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskImuRead(void *argument) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b09a      	sub	sp, #104	; 0x68
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;

	/* initialize data variables */
	int16_t gyroscope_data[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 80017f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	809a      	strh	r2, [r3, #4]
	int16_t acceleration[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 80017fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	809a      	strh	r2, [r3, #4]
	int16_t offset[6] = { 0 };
 8001808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]

	/* initialize counter as we want to average over 4 samples every time */
	int8_t counter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	/* initialize queue message */
	imu_data_t queue_data = { 0 };
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	619a      	str	r2, [r3, #24]

	vInitImu20600Read(offset);
 800182e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f8de 	bl	80019f4 <vInitImu20600Read>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001838:	f007 ff7a 	bl	8009730 <osKernelGetTickCount>
 800183c:	6678      	str	r0, [r7, #100]	; 0x64
	tick_update = osKernelGetTickFreq() / IMU20601_SAMPLING_FREQ;
 800183e:	f007 ff9f 	bl	8009780 <osKernelGetTickFreq>
 8001842:	4602      	mov	r2, r0
 8001844:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <vTaskImuRead+0x1f8>)
 8001846:	fba3 2302 	umull	r2, r3, r3, r2
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	65fb      	str	r3, [r7, #92]	; 0x5c
	for (;;) {
		tick_count += tick_update;
 800184e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	4413      	add	r3, r2
 8001854:	667b      	str	r3, [r7, #100]	; 0x64
		vReadImu20600(gyroscope_data, acceleration, offset);
 8001856:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800185a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800185e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fb7c 	bl	8001f60 <vReadImu20600>
		float test[3] = { 0 };
 8001868:	f107 0318 	add.w	r3, r7, #24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]

		test[0] = (float)acceleration[0]/1024;
 8001874:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001880:	eddf 6a59 	vldr	s13, [pc, #356]	; 80019e8 <vTaskImuRead+0x1fc>
 8001884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001888:	edc7 7a06 	vstr	s15, [r7, #24]
		test[1] = (float)acceleration[1]/1024;
 800188c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001898:	eddf 6a53 	vldr	s13, [pc, #332]	; 80019e8 <vTaskImuRead+0x1fc>
 800189c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a0:	edc7 7a07 	vstr	s15, [r7, #28]
		test[2] = (float)acceleration[2]/1024;
 80018a4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b0:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80019e8 <vTaskImuRead+0x1fc>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc7 7a08 	vstr	s15, [r7, #32]

		float test2[3] = { 0 };
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]

		test2[0] = (float)gyroscope_data[0] /65;
 80018c8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d4:	eddf 6a45 	vldr	s13, [pc, #276]	; 80019ec <vTaskImuRead+0x200>
 80018d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018dc:	edc7 7a03 	vstr	s15, [r7, #12]
		test2[1] = (float)gyroscope_data[1] /65;
 80018e0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ec:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80019ec <vTaskImuRead+0x200>
 80018f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f4:	edc7 7a04 	vstr	s15, [r7, #16]
		test2[2] = (float)gyroscope_data[2] /65;
 80018f8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	eddf 6a39 	vldr	s13, [pc, #228]	; 80019ec <vTaskImuRead+0x200>
 8001908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190c:	edc7 7a05 	vstr	s15, [r7, #20]
//		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
//				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
//				acceleration[0], acceleration[1], acceleration[2], tick_count);

		//TODO [nstojosk] : can this overflow?
		queue_data.gyro_x += gyroscope_data[0];
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8001916:	4413      	add	r3, r2
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
		queue_data.gyro_y += gyroscope_data[1];
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8001920:	4413      	add	r3, r2
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
		queue_data.gyro_z += gyroscope_data[2];
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 800192a:	4413      	add	r3, r2
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
		queue_data.acc_x += acceleration[0];
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001930:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001934:	4413      	add	r3, r2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
		queue_data.acc_y += acceleration[1];
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800193e:	4413      	add	r3, r2
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
		queue_data.acc_z += acceleration[2];
 8001942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001944:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8001948:	4413      	add	r3, r2
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
		++counter;
 800194c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001950:	3301      	adds	r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		if (counter == 4) {
 8001958:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 800195c:	2b04      	cmp	r3, #4
 800195e:	d13d      	bne.n	80019dc <vTaskImuRead+0x1f0>
			/* reset counter */
			counter = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

			/* Average Data */
			queue_data.gyro_x /= 4;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	2b00      	cmp	r3, #0
 800196a:	da00      	bge.n	800196e <vTaskImuRead+0x182>
 800196c:	3303      	adds	r3, #3
 800196e:	109b      	asrs	r3, r3, #2
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
			queue_data.gyro_y /= 4;
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	da00      	bge.n	800197a <vTaskImuRead+0x18e>
 8001978:	3303      	adds	r3, #3
 800197a:	109b      	asrs	r3, r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
			queue_data.gyro_z /= 4;
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	da00      	bge.n	8001986 <vTaskImuRead+0x19a>
 8001984:	3303      	adds	r3, #3
 8001986:	109b      	asrs	r3, r3, #2
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
			queue_data.acc_x /= 4;
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198c:	2b00      	cmp	r3, #0
 800198e:	da00      	bge.n	8001992 <vTaskImuRead+0x1a6>
 8001990:	3303      	adds	r3, #3
 8001992:	109b      	asrs	r3, r3, #2
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
			queue_data.acc_y /= 4;
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	2b00      	cmp	r3, #0
 800199a:	da00      	bge.n	800199e <vTaskImuRead+0x1b2>
 800199c:	3303      	adds	r3, #3
 800199e:	109b      	asrs	r3, r3, #2
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
			queue_data.acc_z /= 4;
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da00      	bge.n	80019aa <vTaskImuRead+0x1be>
 80019a8:	3303      	adds	r3, #3
 80019aa:	109b      	asrs	r3, r3, #2
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
			/* I dont know it this works with the overflow of the tick_count! */
			queue_data.ts = tick_count;
 80019ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Send Data to Queue */
			osMessageQueuePut(preprocess_queue, &queue_data, 0U, 0U);
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <vTaskImuRead+0x204>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80019ba:	2300      	movs	r3, #0
 80019bc:	2200      	movs	r2, #0
 80019be:	f008 f9cb 	bl	8009d58 <osMessageQueuePut>

			/* reset queue value */
			queue_data = EMPTY_IMU;
 80019c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	619a      	str	r2, [r3, #24]
			counter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		}
		osDelayUntil(tick_count);
 80019dc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80019de:	f007 ffad 	bl	800993c <osDelayUntil>
	for (;;) {
 80019e2:	e734      	b.n	800184e <vTaskImuRead+0x62>
 80019e4:	51eb851f 	.word	0x51eb851f
 80019e8:	44800000 	.word	0x44800000
 80019ec:	42820000 	.word	0x42820000
 80019f0:	20001dc8 	.word	0x20001dc8

080019f4 <vInitImu20600Read>:
	}
}

void vInitImu20600Read(int16_t offset[]) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b094      	sub	sp, #80	; 0x50
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	osDelayUntil(2000);
 80019fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a00:	f007 ff9c 	bl	800993c <osDelayUntil>
	while (1) {
		HAL_Delay(1);
 8001a04:	2001      	movs	r0, #1
 8001a06:	f000 fe3f 	bl	8002688 <HAL_Delay>
		/* sensor management 1 */
		/* Reset Sensor */
		uint8_t register_sensor_powerMgmt1[2] = { 0 };
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		register_sensor_powerMgmt1[0] = IMU20601_COMMAND_POWER_MANAGMENT1_WRITE;
 8001a10:	236b      	movs	r3, #107	; 0x6b
 8001a12:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		register_sensor_powerMgmt1[1] =
				(reset_conf << 7 | SENS_sleep_EN << 6 | SENS_clk_src << 0);
 8001a16:	2301      	movs	r3, #1
 8001a18:	01db      	lsls	r3, r3, #7
 8001a1a:	b25a      	sxtb	r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	019b      	lsls	r3, r3, #6
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	2301      	movs	r3, #1
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt1[1] =
 8001a30:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2110      	movs	r1, #16
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f001 f8e4 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt1,
 8001a40:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001a44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a48:	2202      	movs	r2, #2
 8001a4a:	48e5      	ldr	r0, [pc, #916]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001a4c:	f003 ff9a 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f001 f8d6 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f000 fe13 	bl	8002688 <HAL_Delay>

		/* Wake Up Chip */
		register_sensor_powerMgmt1[1] =
				(SENS_sleep_EN << 6 | SENS_clk_src << 0);
 8001a62:	2300      	movs	r3, #0
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	b25a      	sxtb	r2, r3
 8001a68:	2301      	movs	r3, #1
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	b25b      	sxtb	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt1[1] =
 8001a72:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2110      	movs	r1, #16
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f001 f8c3 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt1,
 8001a82:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001a86:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	48d4      	ldr	r0, [pc, #848]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001a8e:	f003 ff79 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a92:	2201      	movs	r2, #1
 8001a94:	2110      	movs	r1, #16
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f001 f8b5 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f000 fdf2 	bl	8002688 <HAL_Delay>

		/* Read Register */

		uint8_t tx = 0xEB;
 8001aa4:	23eb      	movs	r3, #235	; 0xeb
 8001aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint8_t rx = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab8:	f001 f8a6 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx,
 8001abc:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8001ac0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	48c6      	ldr	r0, [pc, #792]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001ac8:	f003 ff5c 	bl	8005984 <HAL_SPI_Transmit>
				1, IMU20601_SPI_TIMEOUT);
		HAL_SPI_Receive(&hspi1, &rx,
 8001acc:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001ad0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	48c2      	ldr	r0, [pc, #776]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001ad8:	f004 f8ba 	bl	8005c50 <HAL_SPI_Receive>
				1, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2110      	movs	r1, #16
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae4:	f001 f890 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f000 fdcd 	bl	8002688 <HAL_Delay>

		/* Disable I2C Mode */
		uint8_t register_sensor_control[2] = { 0 };
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		register_sensor_control[0] = IMU20601_COMMAND_USER_CONTROL_WRITE;
 8001af4:	236a      	movs	r3, #106	; 0x6a
 8001af6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		register_sensor_control[1] = (SENS_FIFO_EN << 6 | I2C_DISABLE << 4 | 1);
 8001afa:	2300      	movs	r3, #0
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	2301      	movs	r3, #1
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2110      	movs	r1, #16
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f001 f873 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_control,
 8001b22:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001b26:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	48ac      	ldr	r0, [pc, #688]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001b2e:	f003 ff29 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	2110      	movs	r1, #16
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f001 f865 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f000 fda2 	bl	8002688 <HAL_Delay>

		/* Read Register */

		tx = 0xEA;
 8001b44:	23ea      	movs	r3, #234	; 0xea
 8001b46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rx = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2110      	movs	r1, #16
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f001 f856 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx,
 8001b5c:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8001b60:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b64:	2201      	movs	r2, #1
 8001b66:	489e      	ldr	r0, [pc, #632]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001b68:	f003 ff0c 	bl	8005984 <HAL_SPI_Transmit>
				1, IMU20601_SPI_TIMEOUT);
		HAL_SPI_Receive(&hspi1, &rx,
 8001b6c:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001b70:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b74:	2201      	movs	r2, #1
 8001b76:	489a      	ldr	r0, [pc, #616]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001b78:	f004 f86a 	bl	8005c50 <HAL_SPI_Receive>
				1, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2110      	movs	r1, #16
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f001 f840 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f000 fd7d 	bl	8002688 <HAL_Delay>

		/* Configure Gyroscope */
		uint8_t register_gyro_config[2] = { 0 };
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		register_gyro_config[0] = IMU20601_COMMAND_GYROSCOPE_CONFIGURATION_WRITE;
 8001b94:	231b      	movs	r3, #27
 8001b96:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		register_gyro_config[1] = (GYRO_SELFTEST << 5 | GYRO_RANGE << 3
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	015b      	lsls	r3, r3, #5
 8001b9e:	b25a      	sxtb	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	b25b      	sxtb	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b25a      	sxtb	r2, r3
				| GYRO_FILTER);
 8001baa:	2302      	movs	r3, #2
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
		register_gyro_config[1] = (GYRO_SELFTEST << 5 | GYRO_RANGE << 3
 8001bb4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2110      	movs	r1, #16
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f001 f822 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_gyro_config,
 8001bc4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001bc8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4884      	ldr	r0, [pc, #528]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001bd0:	f003 fed8 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f001 f814 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f000 fd51 	bl	8002688 <HAL_Delay>

		/* Read Register */

		tx = 0x9B;
 8001be6:	239b      	movs	r3, #155	; 0x9b
 8001be8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rx = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f001 f805 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx,
 8001bfe:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8001c02:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c06:	2201      	movs	r2, #1
 8001c08:	4875      	ldr	r0, [pc, #468]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001c0a:	f003 febb 	bl	8005984 <HAL_SPI_Transmit>
				1, IMU20601_SPI_TIMEOUT);
		HAL_SPI_Receive(&hspi1, &rx,
 8001c0e:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001c12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c16:	2201      	movs	r2, #1
 8001c18:	4871      	ldr	r0, [pc, #452]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001c1a:	f004 f819 	bl	8005c50 <HAL_SPI_Receive>
				1, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2110      	movs	r1, #16
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f000 ffef 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f000 fd2c 	bl	8002688 <HAL_Delay>

		/* Configure Accelerometer */
		uint8_t register_acc_config[2] = { 0 };
 8001c30:	2300      	movs	r3, #0
 8001c32:	87bb      	strh	r3, [r7, #60]	; 0x3c
		register_acc_config[0] = IMU20601_COMMAND_ACCELEROMETER_CONFIGURATION1_WRITE;
 8001c34:	231c      	movs	r3, #28
 8001c36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		register_acc_config[1] = (ACC_SELFTEST << 5 | ACC_RANGE << 3);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	b25a      	sxtb	r2, r3
 8001c40:	2303      	movs	r3, #3
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		uint8_t register_acc_config2[2] = { 0 };
 8001c50:	2300      	movs	r3, #0
 8001c52:	873b      	strh	r3, [r7, #56]	; 0x38
		register_acc_config2[0] = IMU20601_COMMAND_ACCELEROMETER_CONFIGURATION2_WRITE;
 8001c54:	231d      	movs	r3, #29
 8001c56:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		register_acc_config2[1] = (ACC_AVGFILTER << 3 | ACC_FILTER);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	b25a      	sxtb	r2, r3
 8001c60:	2304      	movs	r3, #4
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2110      	movs	r1, #16
 8001c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c76:	f000 ffc7 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_acc_config,
 8001c7a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001c7e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c82:	2202      	movs	r2, #2
 8001c84:	4856      	ldr	r0, [pc, #344]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001c86:	f003 fe7d 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f000 ffb9 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 fcf6 	bl	8002688 <HAL_Delay>

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f000 ffb0 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_acc_config2,
 8001ca8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	484b      	ldr	r0, [pc, #300]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001cb4:	f003 fe66 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2110      	movs	r1, #16
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f000 ffa2 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f000 fcdf 	bl	8002688 <HAL_Delay>

		/* Read Register */

		tx = 0x9C;
 8001cca:	239c      	movs	r3, #156	; 0x9c
 8001ccc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rx = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2110      	movs	r1, #16
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f000 ff93 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx,
 8001ce2:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8001ce6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cea:	2201      	movs	r2, #1
 8001cec:	483c      	ldr	r0, [pc, #240]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001cee:	f003 fe49 	bl	8005984 <HAL_SPI_Transmit>
				1, IMU20601_SPI_TIMEOUT);
		HAL_SPI_Receive(&hspi1, &rx,
 8001cf2:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001cf6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4838      	ldr	r0, [pc, #224]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001cfe:	f003 ffa7 	bl	8005c50 <HAL_SPI_Receive>
				1, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d02:	2201      	movs	r2, #1
 8001d04:	2110      	movs	r1, #16
 8001d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0a:	f000 ff7d 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f000 fcba 	bl	8002688 <HAL_Delay>

		/* Read Register */

		tx = 0x9D;
 8001d14:	239d      	movs	r3, #157	; 0x9d
 8001d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rx = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2110      	movs	r1, #16
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f000 ff6e 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx,
 8001d2c:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8001d30:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d34:	2201      	movs	r2, #1
 8001d36:	482a      	ldr	r0, [pc, #168]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001d38:	f003 fe24 	bl	8005984 <HAL_SPI_Transmit>
				1, IMU20601_SPI_TIMEOUT);
		HAL_SPI_Receive(&hspi1, &rx,
 8001d3c:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001d40:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d44:	2201      	movs	r2, #1
 8001d46:	4826      	ldr	r0, [pc, #152]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001d48:	f003 ff82 	bl	8005c50 <HAL_SPI_Receive>
				1, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2110      	movs	r1, #16
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f000 ff58 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f000 fc95 	bl	8002688 <HAL_Delay>

		/* FIFO disable */
		uint8_t register_FIFO[2] = { 0 };
 8001d5e:	2300      	movs	r3, #0
 8001d60:	86bb      	strh	r3, [r7, #52]	; 0x34
		register_FIFO[0] = IMU20601_COMMAND_FIFO_ENABLE_WRITE;
 8001d62:	2323      	movs	r3, #35	; 0x23
 8001d64:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		register_FIFO[1] = (GYRO_FIFO_EN << 4 | ACC_FIFO_EN << 3);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	b25a      	sxtb	r2, r3
 8001d6e:	2300      	movs	r3, #0
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2110      	movs	r1, #16
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f000 ff3f 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_FIFO,
 8001d8a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d8e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d92:	2202      	movs	r2, #2
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001d96:	f003 fdf5 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH,
				IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da2:	f000 ff31 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fc6e 	bl	8002688 <HAL_Delay>

		/* Read Register */

		tx = 0xA3;
 8001dac:	23a3      	movs	r3, #163	; 0xa3
 8001dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rx = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2110      	movs	r1, #16
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f000 ff22 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx,
 8001dc4:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8001dc8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4804      	ldr	r0, [pc, #16]	; (8001de0 <vInitImu20600Read+0x3ec>)
 8001dd0:	f003 fdd8 	bl	8005984 <HAL_SPI_Transmit>
				1, IMU20601_SPI_TIMEOUT);
		HAL_SPI_Receive(&hspi1, &rx,
 8001dd4:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001dd8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ddc:	2201      	movs	r2, #1
 8001dde:	e001      	b.n	8001de4 <vInitImu20600Read+0x3f0>
 8001de0:	2000c038 	.word	0x2000c038
 8001de4:	485d      	ldr	r0, [pc, #372]	; (8001f5c <vInitImu20600Read+0x568>)
 8001de6:	f003 ff33 	bl	8005c50 <HAL_SPI_Receive>
				1, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2110      	movs	r1, #16
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df2:	f000 ff09 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fc46 	bl	8002688 <HAL_Delay>


		/* sensor management 2 */
		uint8_t register_sensor_powerMgmt2[2] = { 0 };
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	863b      	strh	r3, [r7, #48]	; 0x30
		register_sensor_powerMgmt2[0] = IMU20601_COMMAND_POWER_MANAGMENT2_WRITE;
 8001e00:	236c      	movs	r3, #108	; 0x6c
 8001e02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		register_sensor_powerMgmt2[1] = (SENS_acc_axis_EN << 3
 8001e06:	2300      	movs	r3, #0
 8001e08:	00db      	lsls	r3, r3, #3
				| SENS_gyri_axis_EN << 0);
 8001e0a:	b25a      	sxtb	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt2[1] = (SENS_acc_axis_EN << 3
 8001e16:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f000 fef1 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt2,
 8001e26:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001e2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e2e:	2202      	movs	r2, #2
 8001e30:	484a      	ldr	r0, [pc, #296]	; (8001f5c <vInitImu20600Read+0x568>)
 8001e32:	f003 fda7 	bl	8005984 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2110      	movs	r1, #16
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3e:	f000 fee3 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f000 fc20 	bl	8002688 <HAL_Delay>

		/* Read Register */

		tx = 0xEC;
 8001e48:	23ec      	movs	r3, #236	; 0xec
 8001e4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rx = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2110      	movs	r1, #16
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f000 fed4 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx,
 8001e60:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8001e64:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e68:	2201      	movs	r2, #1
 8001e6a:	483c      	ldr	r0, [pc, #240]	; (8001f5c <vInitImu20600Read+0x568>)
 8001e6c:	f003 fd8a 	bl	8005984 <HAL_SPI_Transmit>
				1, IMU20601_SPI_TIMEOUT);
		HAL_SPI_Receive(&hspi1, &rx,
 8001e70:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8001e74:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4838      	ldr	r0, [pc, #224]	; (8001f5c <vInitImu20600Read+0x568>)
 8001e7c:	f003 fee8 	bl	8005c50 <HAL_SPI_Receive>
				1, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2110      	movs	r1, #16
 8001e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e88:	f000 febe 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f000 fbfb 	bl	8002688 <HAL_Delay>


		/* Test if what we measure is possible */
		int16_t gyroscope_data[3]; /* 0 = x, 1 = y, 2 = z */
		int16_t acceleration[3]; /* 0 = x, 1 = y, 2 = z */
		int32_t offsetholder[6] = { 0 };
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	615a      	str	r2, [r3, #20]
		for(int k = 0; k < 1024; k++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea8:	e028      	b.n	8001efc <vInitImu20600Read+0x508>
			vReadImu20600(gyroscope_data, acceleration, offset);
 8001eaa:	f107 0120 	add.w	r1, r7, #32
 8001eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f853 	bl	8001f60 <vReadImu20600>
			offsetholder[0] += (int32_t) acceleration[0];
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
			offsetholder[1] += (int32_t)acceleration[1];
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
			offsetholder[2] += (int32_t)acceleration[2];
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001ed4:	4413      	add	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
			offsetholder[3] += (int32_t)gyroscope_data[0];
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8001ede:	4413      	add	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
			offsetholder[4] += (int32_t)gyroscope_data[1];
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001ee8:	4413      	add	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
			offsetholder[5] += (int32_t)gyroscope_data[2];
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001ef2:	4413      	add	r3, r2
 8001ef4:	61fb      	str	r3, [r7, #28]
		for(int k = 0; k < 1024; k++){
 8001ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ef8:	3301      	adds	r3, #1
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f02:	dbd2      	blt.n	8001eaa <vInitImu20600Read+0x4b6>
		}
		offset[0] = offsetholder[0] >> 10;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	129b      	asrs	r3, r3, #10
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	801a      	strh	r2, [r3, #0]
		offset[1] = offsetholder[1] >> 10;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	129a      	asrs	r2, r3, #10
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3302      	adds	r3, #2
 8001f16:	b212      	sxth	r2, r2
 8001f18:	801a      	strh	r2, [r3, #0]
		offset[2] = (offsetholder[2] >> 10) - (1 << 10) ;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	129b      	asrs	r3, r3, #10
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	b212      	sxth	r2, r2
 8001f2c:	801a      	strh	r2, [r3, #0]
		offset[3] = offsetholder[3] >> 10;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	129a      	asrs	r2, r3, #10
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3306      	adds	r3, #6
 8001f36:	b212      	sxth	r2, r2
 8001f38:	801a      	strh	r2, [r3, #0]
		offset[4] = offsetholder[4] >> 10;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	129a      	asrs	r2, r3, #10
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3308      	adds	r3, #8
 8001f42:	b212      	sxth	r2, r2
 8001f44:	801a      	strh	r2, [r3, #0]
		offset[5] = offsetholder[5] >> 10;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	129a      	asrs	r2, r3, #10
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	330a      	adds	r3, #10
 8001f4e:	b212      	sxth	r2, r2
 8001f50:	801a      	strh	r2, [r3, #0]
//		if (((abs_value > 0.25 && abs_value < 2.25)
//				&& (test2[0] > -50 && test2[0] < 50
//						&& test2[1] > -50 && test2[1] < 50
//						&& test2[2] > -50 && test2[2] < 50))) {
			/* initialization successful */
			break;
 8001f52:	bf00      	nop
//		}
	}
}
 8001f54:	bf00      	nop
 8001f56:	3750      	adds	r7, #80	; 0x50
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000c038 	.word	0x2000c038

08001f60 <vReadImu20600>:

void vReadImu20600(int16_t gyroscope_data[], int16_t acceleration[], int16_t offset[]) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]

	/* Read Accelerometer Data */
	uint8_t bufferAcc[6] = { 0 };
 8001f6c:	f107 0320 	add.w	r3, r7, #32
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	809a      	strh	r2, [r3, #4]
	uint8_t commandaccread = IMU20601_COMMAND_ACC_READ;
 8001f76:	23bb      	movs	r3, #187	; 0xbb
 8001f78:	77fb      	strb	r3, [r7, #31]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2110      	movs	r1, #16
 8001f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f82:	f000 fe41 	bl	8002c08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &commandaccread, 1, IMU20601_SPI_TIMEOUT);
 8001f86:	f107 011f 	add.w	r1, r7, #31
 8001f8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4869      	ldr	r0, [pc, #420]	; (8002138 <vReadImu20600+0x1d8>)
 8001f92:	f003 fcf7 	bl	8005984 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, bufferAcc, 6, IMU20601_SPI_TIMEOUT);
 8001f96:	f107 0120 	add.w	r1, r7, #32
 8001f9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	4865      	ldr	r0, [pc, #404]	; (8002138 <vReadImu20600+0x1d8>)
 8001fa2:	f003 fe55 	bl	8005c50 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2110      	movs	r1, #16
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f000 fe2b 	bl	8002c08 <HAL_GPIO_WritePin>

	acceleration[0] = bufferAcc[0] << 8 | bufferAcc[1];
 8001fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	801a      	strh	r2, [r3, #0]
	acceleration[1] = bufferAcc[2] << 8 | bufferAcc[3];
 8001fc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b219      	sxth	r1, r3
 8001fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	b212      	sxth	r2, r2
 8001fde:	801a      	strh	r2, [r3, #0]
	acceleration[2] = bufferAcc[4] << 8 | bufferAcc[5];
 8001fe0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b219      	sxth	r1, r3
 8001fe8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	b212      	sxth	r2, r2
 8001ff6:	801a      	strh	r2, [r3, #0]

	acceleration[0] = acceleration[0] - offset[0];
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002006:	b29b      	uxth	r3, r3
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	b29b      	uxth	r3, r3
 800200c:	b21a      	sxth	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	801a      	strh	r2, [r3, #0]
	acceleration[1] = acceleration[1] - offset[1];
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3302      	adds	r3, #2
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3302      	adds	r3, #2
 8002020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002024:	b29b      	uxth	r3, r3
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	b29a      	uxth	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3302      	adds	r3, #2
 800202e:	b212      	sxth	r2, r2
 8002030:	801a      	strh	r2, [r3, #0]
	acceleration[2] = acceleration[2] - offset[2];
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3304      	adds	r3, #4
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002044:	b29b      	uxth	r3, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	b29a      	uxth	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3304      	adds	r3, #4
 800204e:	b212      	sxth	r2, r2
 8002050:	801a      	strh	r2, [r3, #0]


	/* Read Gyroscope Data */
	uint8_t bufferGyro[6] = { 0 };
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	809a      	strh	r2, [r3, #4]
	uint8_t commandgyroread = IMU20601_COMMAND_GYRO_READ;
 800205c:	23c3      	movs	r3, #195	; 0xc3
 800205e:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002068:	f000 fdce 	bl	8002c08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &commandgyroread, 1, IMU20601_SPI_TIMEOUT);
 800206c:	f107 0117 	add.w	r1, r7, #23
 8002070:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002074:	2201      	movs	r2, #1
 8002076:	4830      	ldr	r0, [pc, #192]	; (8002138 <vReadImu20600+0x1d8>)
 8002078:	f003 fc84 	bl	8005984 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, bufferGyro, 6, IMU20601_SPI_TIMEOUT);
 800207c:	f107 0118 	add.w	r1, r7, #24
 8002080:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002084:	2206      	movs	r2, #6
 8002086:	482c      	ldr	r0, [pc, #176]	; (8002138 <vReadImu20600+0x1d8>)
 8002088:	f003 fde2 	bl	8005c50 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2110      	movs	r1, #16
 8002090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002094:	f000 fdb8 	bl	8002c08 <HAL_GPIO_WritePin>

	gyroscope_data[0] = bufferGyro[0] << 8 | bufferGyro[1];
 8002098:	7e3b      	ldrb	r3, [r7, #24]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b21a      	sxth	r2, r3
 800209e:	7e7b      	ldrb	r3, [r7, #25]
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21a      	sxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	801a      	strh	r2, [r3, #0]
	gyroscope_data[1] = bufferGyro[2] << 8 | bufferGyro[3];
 80020aa:	7ebb      	ldrb	r3, [r7, #26]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b219      	sxth	r1, r3
 80020b0:	7efb      	ldrb	r3, [r7, #27]
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3302      	adds	r3, #2
 80020b8:	430a      	orrs	r2, r1
 80020ba:	b212      	sxth	r2, r2
 80020bc:	801a      	strh	r2, [r3, #0]
	gyroscope_data[2] = bufferGyro[4] << 8 | bufferGyro[5];
 80020be:	7f3b      	ldrb	r3, [r7, #28]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b219      	sxth	r1, r3
 80020c4:	7f7b      	ldrb	r3, [r7, #29]
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3304      	adds	r3, #4
 80020cc:	430a      	orrs	r2, r1
 80020ce:	b212      	sxth	r2, r2
 80020d0:	801a      	strh	r2, [r3, #0]

	gyroscope_data[0] = gyroscope_data[0] - offset[3];
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3306      	adds	r3, #6
 80020de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	801a      	strh	r2, [r3, #0]
	gyroscope_data[1] = gyroscope_data[1] - offset[4];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3302      	adds	r3, #2
 80020f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3308      	adds	r3, #8
 80020fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002100:	b29b      	uxth	r3, r3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3302      	adds	r3, #2
 800210a:	b212      	sxth	r2, r2
 800210c:	801a      	strh	r2, [r3, #0]
	gyroscope_data[2] = gyroscope_data[2] - offset[5];
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3304      	adds	r3, #4
 8002112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	330a      	adds	r3, #10
 800211c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002120:	b29b      	uxth	r3, r3
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3304      	adds	r3, #4
 800212a:	b212      	sxth	r2, r2
 800212c:	801a      	strh	r2, [r3, #0]


}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	; 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000c038 	.word	0x2000c038
 800213c:	00000000 	.word	0x00000000

08002140 <vTaskPreprocess>:
 *      Author: Jonas
 */

#include "tasks/task_preprocess.h"

void vTaskPreprocess(void *argument) {
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	b093      	sub	sp, #76	; 0x4c
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	/* registers for the Filter */
	int32_t registers[4] = { 0 };
 8002148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]

	int32_t filtered_acc_z;
	int32_t raw_acc_z;

	/* Queue data and Status Initialization */
	imu_data_t queue_data = { 0 };
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	615a      	str	r2, [r3, #20]
 8002168:	619a      	str	r2, [r3, #24]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 800216a:	f007 fae1 	bl	8009730 <osKernelGetTickCount>
 800216e:	6478      	str	r0, [r7, #68]	; 0x44
	tick_update = osKernelGetTickFreq() / SAMPLING_RATE_PREP;
 8002170:	f007 fb06 	bl	8009780 <osKernelGetTickFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4bc2      	ldr	r3, [pc, #776]	; (8002480 <vTaskPreprocess+0x340>)
 8002178:	fba3 2302 	umull	r2, r3, r3, r2
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	643b      	str	r3, [r7, #64]	; 0x40

	/* Infinite loop */
	for (;;) {
		tick_count += tick_update;
 8002180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002184:	4413      	add	r3, r2
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
		if (osMessageQueueGet(preprocess_queue, &queue_data, NULL,
 8002188:	4bbe      	ldr	r3, [pc, #760]	; (8002484 <vTaskPreprocess+0x344>)
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	f107 010c 	add.w	r1, r7, #12
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
 8002194:	2200      	movs	r2, #0
 8002196:	f007 fe53 	bl	8009e40 <osMessageQueueGet>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ef      	bne.n	8002180 <vTaskPreprocess+0x40>
		osWaitForever) == osOK) {
			raw_acc_z = queue_data.acc_z;
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			filtered_acc_z = A0
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 80021a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021a6:	f7fe f9bd 	bl	8000524 <__aeabi_i2d>
 80021aa:	4605      	mov	r5, r0
 80021ac:	460e      	mov	r6, r1
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9b7 	bl	8000524 <__aeabi_i2d>
 80021b6:	a4a4      	add	r4, pc, #656	; (adr r4, 8002448 <vTaskPreprocess+0x308>)
 80021b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021bc:	461a      	mov	r2, r3
 80021be:	4623      	mov	r3, r4
 80021c0:	f7fe fa1a 	bl	80005f8 <__aeabi_dmul>
 80021c4:	4603      	mov	r3, r0
 80021c6:	460c      	mov	r4, r1
 80021c8:	461a      	mov	r2, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	4628      	mov	r0, r5
 80021ce:	4631      	mov	r1, r6
 80021d0:	f7fe f85c 	bl	800028c <__adddf3>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	461d      	mov	r5, r3
 80021da:	4626      	mov	r6, r4
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f9a0 	bl	8000524 <__aeabi_i2d>
 80021e4:	a49a      	add	r4, pc, #616	; (adr r4, 8002450 <vTaskPreprocess+0x310>)
 80021e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	4623      	mov	r3, r4
 80021ee:	f7fe fa03 	bl	80005f8 <__aeabi_dmul>
 80021f2:	4603      	mov	r3, r0
 80021f4:	460c      	mov	r4, r1
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	4628      	mov	r0, r5
 80021fc:	4631      	mov	r1, r6
 80021fe:	f7fe f845 	bl	800028c <__adddf3>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	461d      	mov	r5, r3
 8002208:	4626      	mov	r6, r4
							+ B3 * registers[2] + B4 * registers[3]) +
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f989 	bl	8000524 <__aeabi_i2d>
 8002212:	a491      	add	r4, pc, #580	; (adr r4, 8002458 <vTaskPreprocess+0x318>)
 8002214:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002218:	461a      	mov	r2, r3
 800221a:	4623      	mov	r3, r4
 800221c:	f7fe f9ec 	bl	80005f8 <__aeabi_dmul>
 8002220:	4603      	mov	r3, r0
 8002222:	460c      	mov	r4, r1
 8002224:	461a      	mov	r2, r3
 8002226:	4623      	mov	r3, r4
 8002228:	4628      	mov	r0, r5
 800222a:	4631      	mov	r1, r6
 800222c:	f7fe f82e 	bl	800028c <__adddf3>
 8002230:	4603      	mov	r3, r0
 8002232:	460c      	mov	r4, r1
 8002234:	461d      	mov	r5, r3
 8002236:	4626      	mov	r6, r4
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f972 	bl	8000524 <__aeabi_i2d>
 8002240:	a487      	add	r4, pc, #540	; (adr r4, 8002460 <vTaskPreprocess+0x320>)
 8002242:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	f7fe f9d5 	bl	80005f8 <__aeabi_dmul>
 800224e:	4603      	mov	r3, r0
 8002250:	460c      	mov	r4, r1
 8002252:	461a      	mov	r2, r3
 8002254:	4623      	mov	r3, r4
 8002256:	4628      	mov	r0, r5
 8002258:	4631      	mov	r1, r6
 800225a:	f7fe f817 	bl	800028c <__adddf3>
 800225e:	4603      	mov	r3, r0
 8002260:	460c      	mov	r4, r1
 8002262:	4618      	mov	r0, r3
 8002264:	4621      	mov	r1, r4
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8002266:	a480      	add	r4, pc, #512	; (adr r4, 8002468 <vTaskPreprocess+0x328>)
 8002268:	e9d4 3400 	ldrd	r3, r4, [r4]
 800226c:	461a      	mov	r2, r3
 800226e:	4623      	mov	r3, r4
 8002270:	f7fe f9c2 	bl	80005f8 <__aeabi_dmul>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	461d      	mov	r5, r3
 800227a:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f950 	bl	8000524 <__aeabi_i2d>
 8002284:	a47a      	add	r4, pc, #488	; (adr r4, 8002470 <vTaskPreprocess+0x330>)
 8002286:	e9d4 3400 	ldrd	r3, r4, [r4]
 800228a:	461a      	mov	r2, r3
 800228c:	4623      	mov	r3, r4
 800228e:	f7fe f9b3 	bl	80005f8 <__aeabi_dmul>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
							+ B3 * registers[2] + B4 * registers[3]) +
 8002296:	461a      	mov	r2, r3
 8002298:	4623      	mov	r3, r4
 800229a:	4628      	mov	r0, r5
 800229c:	4631      	mov	r1, r6
 800229e:	f7fd fff5 	bl	800028c <__adddf3>
 80022a2:	4603      	mov	r3, r0
 80022a4:	460c      	mov	r4, r1
 80022a6:	461d      	mov	r5, r3
 80022a8:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f939 	bl	8000524 <__aeabi_i2d>
 80022b2:	a471      	add	r4, pc, #452	; (adr r4, 8002478 <vTaskPreprocess+0x338>)
 80022b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	f7fe f99c 	bl	80005f8 <__aeabi_dmul>
 80022c0:	4603      	mov	r3, r0
 80022c2:	460c      	mov	r4, r1
 80022c4:	461a      	mov	r2, r3
 80022c6:	4623      	mov	r3, r4
 80022c8:	4628      	mov	r0, r5
 80022ca:	4631      	mov	r1, r6
 80022cc:	f7fd ffde 	bl	800028c <__adddf3>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	461d      	mov	r5, r3
 80022d6:	4626      	mov	r6, r4
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f922 	bl	8000524 <__aeabi_i2d>
 80022e0:	a463      	add	r4, pc, #396	; (adr r4, 8002470 <vTaskPreprocess+0x330>)
 80022e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	f7fe f985 	bl	80005f8 <__aeabi_dmul>
 80022ee:	4603      	mov	r3, r0
 80022f0:	460c      	mov	r4, r1
 80022f2:	461a      	mov	r2, r3
 80022f4:	4623      	mov	r3, r4
 80022f6:	4628      	mov	r0, r5
 80022f8:	4631      	mov	r1, r6
 80022fa:	f7fd ffc7 	bl	800028c <__adddf3>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	461d      	mov	r5, r3
 8002304:	4626      	mov	r6, r4
					+ A4 * registers[3];
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f90b 	bl	8000524 <__aeabi_i2d>
 800230e:	a456      	add	r4, pc, #344	; (adr r4, 8002468 <vTaskPreprocess+0x328>)
 8002310:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002314:	461a      	mov	r2, r3
 8002316:	4623      	mov	r3, r4
 8002318:	f7fe f96e 	bl	80005f8 <__aeabi_dmul>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	461a      	mov	r2, r3
 8002322:	4623      	mov	r3, r4
 8002324:	4628      	mov	r0, r5
 8002326:	4631      	mov	r1, r6
 8002328:	f7fd ffb0 	bl	800028c <__adddf3>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
			filtered_acc_z = A0
 8002330:	4618      	mov	r0, r3
 8002332:	4621      	mov	r1, r4
 8002334:	f7fe fb72 	bl	8000a1c <__aeabi_d2iz>
 8002338:	4603      	mov	r3, r0
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
			registers[3] = registers[2];
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
			registers[2] = registers[1];
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
			registers[1] = registers[0];
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8002348:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800234a:	f7fe f8eb 	bl	8000524 <__aeabi_i2d>
 800234e:	4605      	mov	r5, r0
 8002350:	460e      	mov	r6, r1
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8e5 	bl	8000524 <__aeabi_i2d>
 800235a:	a43b      	add	r4, pc, #236	; (adr r4, 8002448 <vTaskPreprocess+0x308>)
 800235c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	f7fe f948 	bl	80005f8 <__aeabi_dmul>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	4628      	mov	r0, r5
 8002372:	4631      	mov	r1, r6
 8002374:	f7fd ff8a 	bl	800028c <__adddf3>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	461d      	mov	r5, r3
 800237e:	4626      	mov	r6, r4
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f8ce 	bl	8000524 <__aeabi_i2d>
 8002388:	a431      	add	r4, pc, #196	; (adr r4, 8002450 <vTaskPreprocess+0x310>)
 800238a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800238e:	461a      	mov	r2, r3
 8002390:	4623      	mov	r3, r4
 8002392:	f7fe f931 	bl	80005f8 <__aeabi_dmul>
 8002396:	4603      	mov	r3, r0
 8002398:	460c      	mov	r4, r1
 800239a:	461a      	mov	r2, r3
 800239c:	4623      	mov	r3, r4
 800239e:	4628      	mov	r0, r5
 80023a0:	4631      	mov	r1, r6
 80023a2:	f7fd ff73 	bl	800028c <__adddf3>
 80023a6:	4603      	mov	r3, r0
 80023a8:	460c      	mov	r4, r1
 80023aa:	461d      	mov	r5, r3
 80023ac:	4626      	mov	r6, r4
					+ B3 * registers[2] + B4 * registers[3];
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8b7 	bl	8000524 <__aeabi_i2d>
 80023b6:	a428      	add	r4, pc, #160	; (adr r4, 8002458 <vTaskPreprocess+0x318>)
 80023b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023bc:	461a      	mov	r2, r3
 80023be:	4623      	mov	r3, r4
 80023c0:	f7fe f91a 	bl	80005f8 <__aeabi_dmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	461a      	mov	r2, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	4628      	mov	r0, r5
 80023ce:	4631      	mov	r1, r6
 80023d0:	f7fd ff5c 	bl	800028c <__adddf3>
 80023d4:	4603      	mov	r3, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	461d      	mov	r5, r3
 80023da:	4626      	mov	r6, r4
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f8a0 	bl	8000524 <__aeabi_i2d>
 80023e4:	a41e      	add	r4, pc, #120	; (adr r4, 8002460 <vTaskPreprocess+0x320>)
 80023e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4623      	mov	r3, r4
 80023ee:	f7fe f903 	bl	80005f8 <__aeabi_dmul>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	461a      	mov	r2, r3
 80023f8:	4623      	mov	r3, r4
 80023fa:	4628      	mov	r0, r5
 80023fc:	4631      	mov	r1, r6
 80023fe:	f7fd ff45 	bl	800028c <__adddf3>
 8002402:	4603      	mov	r3, r0
 8002404:	460c      	mov	r4, r1
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8002406:	4618      	mov	r0, r3
 8002408:	4621      	mov	r1, r4
 800240a:	f7fe fb07 	bl	8000a1c <__aeabi_d2iz>
 800240e:	4603      	mov	r3, r0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Write Result into Motherboard Variable if Mutex is available */
			if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <vTaskPreprocess+0x348>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f007 fb69 	bl	8009af0 <osMutexAcquire>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f aead 	bne.w	8002180 <vTaskPreprocess+0x40>
				imu_data_to_mb = queue_data;
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <vTaskPreprocess+0x34c>)
 8002428:	461d      	mov	r5, r3
 800242a:	f107 040c 	add.w	r4, r7, #12
 800242e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002432:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002436:	e885 0007 	stmia.w	r5, {r0, r1, r2}
//				imu_data_to_mb.acc_z = filtered_acc_z; /* Insert filtered data */
				osMutexRelease(imu_mutex);
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <vTaskPreprocess+0x348>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f007 fbb4 	bl	8009bac <osMutexRelease>
		tick_count += tick_update;
 8002444:	e69c      	b.n	8002180 <vTaskPreprocess+0x40>
 8002446:	bf00      	nop
 8002448:	1c708e5c 	.word	0x1c708e5c
 800244c:	bfdc71c7 	.word	0xbfdc71c7
 8002450:	bd4fbd69 	.word	0xbd4fbd69
 8002454:	bfb2f684 	.word	0xbfb2f684
 8002458:	80e71b2d 	.word	0x80e71b2d
 800245c:	bf76796e 	.word	0xbf76796e
 8002460:	e17eb593 	.word	0xe17eb593
 8002464:	bf23fa32 	.word	0xbf23fa32
 8002468:	3a1a0235 	.word	0x3a1a0235
 800246c:	3fee7bb0 	.word	0x3fee7bb0
 8002470:	3eeef58e 	.word	0x3eeef58e
 8002474:	400e7bb0 	.word	0x400e7bb0
 8002478:	2b9381a8 	.word	0x2b9381a8
 800247c:	4016dcc4 	.word	0x4016dcc4
 8002480:	cccccccd 	.word	0xcccccccd
 8002484:	20001dc8 	.word	0x20001dc8
 8002488:	20005f34 	.word	0x20005f34
 800248c:	2000c0a0 	.word	0x2000c0a0

08002490 <vTaskSendToMb>:

/* include */
#include "tasks/task_send_to_mb.h"
uint8_t baro_buffer[12] = { 0 };

void vTaskSendToMb(void *argument) {
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	b093      	sub	sp, #76	; 0x4c
 8002494:	af04      	add	r7, sp, #16
 8002496:	6078      	str	r0, [r7, #4]

	/* Local Data Variable initialization */
	imu_data_t last_imu_data = { 0 };
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	615a      	str	r2, [r3, #20]
 80024aa:	619a      	str	r2, [r3, #24]
	baro_data_t last_baro_data = { 0 };
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 80024b8:	f007 f93a 	bl	8009730 <osKernelGetTickCount>
 80024bc:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / MB_SAMPLING_RATE;
 80024be:	f007 f95f 	bl	8009780 <osKernelGetTickFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <vTaskSendToMb+0x118>)
 80024c6:	fba3 2302 	umull	r2, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30

	for (;;) {
		tick_count += tick_update;
 80024ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	4413      	add	r3, r2
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34

		/* acquire current Data */
		if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 80024d6:	4b35      	ldr	r3, [pc, #212]	; (80025ac <vTaskSendToMb+0x11c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f007 fb07 	bl	8009af0 <osMutexAcquire>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10e      	bne.n	8002506 <vTaskSendToMb+0x76>
			last_imu_data = imu_data_to_mb;
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <vTaskSendToMb+0x120>)
 80024ea:	f107 0414 	add.w	r4, r7, #20
 80024ee:	461d      	mov	r5, r3
 80024f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(imu_mutex);
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <vTaskSendToMb+0x11c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f007 fb53 	bl	8009bac <osMutexRelease>
		}

		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <vTaskSendToMb+0x124>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f007 faef 	bl	8009af0 <osMutexAcquire>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <vTaskSendToMb+0x9e>
			last_baro_data = baro_data_to_mb;
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <vTaskSendToMb+0x128>)
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(baro_mutex);
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <vTaskSendToMb+0x124>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f007 fb3f 	bl	8009bac <osMutexRelease>
		}

		fullsb_data.baro = last_baro_data;
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <vTaskSendToMb+0x12c>)
 8002530:	461c      	mov	r4, r3
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800253a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		fullsb_data.imu = last_imu_data;
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <vTaskSendToMb+0x12c>)
 8002540:	f103 040c 	add.w	r4, r3, #12
 8002544:	f107 0514 	add.w	r5, r7, #20
 8002548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002550:	e884 0007 	stmia.w	r4, {r0, r1, r2}

//		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu\n", last_baro_data.pressure,
//				last_baro_data.temperature, last_baro_data.ts);
//
		UsbPrint(
 8002554:	697c      	ldr	r4, [r7, #20]
 8002556:	69bd      	ldr	r5, [r7, #24]
 8002558:	69fe      	ldr	r6, [r7, #28]
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002562:	9003      	str	r0, [sp, #12]
 8002564:	9102      	str	r1, [sp, #8]
 8002566:	9201      	str	r2, [sp, #4]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	4633      	mov	r3, r6
 800256c:	462a      	mov	r2, r5
 800256e:	4621      	mov	r1, r4
 8002570:	4813      	ldr	r0, [pc, #76]	; (80025c0 <vTaskSendToMb+0x130>)
 8002572:	f7fe feb5 	bl	80012e0 <UsbPrint>
				"[DBG] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				last_imu_data.gyro_x, last_imu_data.gyro_y,
				last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
				last_imu_data.acc_z, last_imu_data.ts);

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002580:	f000 fb42 	bl	8002c08 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &fullsb_data, sizeof(fullsb_data), SPI_TIMEOUT);
 8002584:	231e      	movs	r3, #30
 8002586:	2228      	movs	r2, #40	; 0x28
 8002588:	490c      	ldr	r1, [pc, #48]	; (80025bc <vTaskSendToMb+0x12c>)
 800258a:	480e      	ldr	r0, [pc, #56]	; (80025c4 <vTaskSendToMb+0x134>)
 800258c:	f003 f9fa 	bl	8005984 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259a:	f000 fb35 	bl	8002c08 <HAL_GPIO_WritePin>




		osDelayUntil(tick_count);
 800259e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025a0:	f007 f9cc 	bl	800993c <osDelayUntil>
		tick_count += tick_update;
 80025a4:	e793      	b.n	80024ce <vTaskSendToMb+0x3e>
 80025a6:	bf00      	nop
 80025a8:	51eb851f 	.word	0x51eb851f
 80025ac:	20005f34 	.word	0x20005f34
 80025b0:	2000c0a0 	.word	0x2000c0a0
 80025b4:	2000c0bc 	.word	0x2000c0bc
 80025b8:	20001d5c 	.word	0x20001d5c
 80025bc:	20005f38 	.word	0x20005f38
 80025c0:	0800e3d0 	.word	0x0800e3d0
 80025c4:	20001dcc 	.word	0x20001dcc

080025c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002600 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025ce:	e003      	b.n	80025d8 <LoopCopyDataInit>

080025d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025d6:	3104      	adds	r1, #4

080025d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025d8:	480b      	ldr	r0, [pc, #44]	; (8002608 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <LoopForever+0xe>)
	adds	r2, r0, r1
 80025dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025e0:	d3f6      	bcc.n	80025d0 <CopyDataInit>
	ldr	r2, =_sbss
 80025e2:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025e4:	e002      	b.n	80025ec <LoopFillZerobss>

080025e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025e8:	f842 3b04 	str.w	r3, [r2], #4

080025ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <LoopForever+0x16>)
	cmp	r2, r3
 80025ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025f0:	d3f9      	bcc.n	80025e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025f2:	f7fe fe3f 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f6:	f00b fa41 	bl	800da7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025fa:	f7fe fa37 	bl	8000a6c <main>

080025fe <LoopForever>:

LoopForever:
    b LoopForever
 80025fe:	e7fe      	b.n	80025fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002600:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002604:	0800e5a8 	.word	0x0800e5a8
	ldr	r0, =_sdata
 8002608:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800260c:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8002610:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8002614:	2000d050 	.word	0x2000d050

08002618 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC1_IRQHandler>

0800261a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f000 f8fe 	bl	8002826 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fd68 	bl	8001100 <HAL_InitTick>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	e001      	b.n	8002640 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800263c:	f7fe fc76 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002640:	79fb      	ldrb	r3, [r7, #7]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_IncTick+0x1c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_IncTick+0x20>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4413      	add	r3, r2
 800265a:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_IncTick+0x1c>)
 800265c:	6013      	str	r3, [r2, #0]
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	2000c100 	.word	0x2000c100
 800266c:	20000008 	.word	0x20000008

08002670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return uwTick;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_GetTick+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	2000c100 	.word	0x2000c100

08002688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff ffee 	bl	8002670 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d004      	beq.n	80026ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_Delay+0x40>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ac:	bf00      	nop
 80026ae:	f7ff ffdf 	bl	8002670 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d8f7      	bhi.n	80026ae <HAL_Delay+0x26>
  {
  }
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000008 	.word	0x20000008

080026cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <__NVIC_GetPriorityGrouping+0x18>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0307 	and.w	r3, r3, #7
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db0b      	blt.n	800275a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	4907      	ldr	r1, [pc, #28]	; (8002768 <__NVIC_EnableIRQ+0x38>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2001      	movs	r0, #1
 8002752:	fa00 f202 	lsl.w	r2, r0, r2
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	; (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
         );
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ff4c 	bl	80026cc <__NVIC_SetPriorityGrouping>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800284e:	f7ff ff61 	bl	8002714 <__NVIC_GetPriorityGrouping>
 8002852:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	f7ff ffb1 	bl	80027c0 <NVIC_EncodePriority>
 800285e:	4602      	mov	r2, r0
 8002860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff80 	bl	800276c <__NVIC_SetPriority>
}
 800286c:	bf00      	nop
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff54 	bl	8002730 <__NVIC_EnableIRQ>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d005      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	e029      	b.n	8002908 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 020e 	bic.w	r2, r2, #14
 80028c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f003 021c 	and.w	r2, r3, #28
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f202 	lsl.w	r2, r1, r2
 80028e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
    }
  }
  return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002922:	e154      	b.n	8002bce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	4013      	ands	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8146 	beq.w	8002bc8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d00b      	beq.n	800295c <HAL_GPIO_Init+0x48>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d007      	beq.n	800295c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002950:	2b11      	cmp	r3, #17
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b12      	cmp	r3, #18
 800295a:	d130      	bne.n	80029be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002992:	2201      	movs	r2, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 0201 	and.w	r2, r3, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0xea>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b12      	cmp	r3, #18
 80029fc:	d123      	bne.n	8002a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0203 	and.w	r2, r3, #3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80a0 	beq.w	8002bc8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a88:	4b58      	ldr	r3, [pc, #352]	; (8002bec <HAL_GPIO_Init+0x2d8>)
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8c:	4a57      	ldr	r2, [pc, #348]	; (8002bec <HAL_GPIO_Init+0x2d8>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6613      	str	r3, [r2, #96]	; 0x60
 8002a94:	4b55      	ldr	r3, [pc, #340]	; (8002bec <HAL_GPIO_Init+0x2d8>)
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aa0:	4a53      	ldr	r2, [pc, #332]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aca:	d019      	beq.n	8002b00 <HAL_GPIO_Init+0x1ec>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a49      	ldr	r2, [pc, #292]	; (8002bf4 <HAL_GPIO_Init+0x2e0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_GPIO_Init+0x1e8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a48      	ldr	r2, [pc, #288]	; (8002bf8 <HAL_GPIO_Init+0x2e4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_Init+0x1e4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_GPIO_Init+0x2e8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x1e0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a46      	ldr	r2, [pc, #280]	; (8002c00 <HAL_GPIO_Init+0x2ec>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_Init+0x1dc>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e008      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af0:	2307      	movs	r3, #7
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af4:	2303      	movs	r3, #3
 8002af6:	e004      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002b00:	2300      	movs	r3, #0
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	f002 0203 	and.w	r2, r2, #3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4093      	lsls	r3, r2
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b12:	4937      	ldr	r1, [pc, #220]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b44:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b98:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_GPIO_Init+0x2f0>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f aea3 	bne.w	8002924 <HAL_GPIO_Init+0x10>
  }
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	48000400 	.word	0x48000400
 8002bf8:	48000800 	.word	0x48000800
 8002bfc:	48000c00 	.word	0x48000c00
 8002c00:	48001000 	.word	0x48001000
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
 8002c14:	4613      	mov	r3, r2
 8002c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e081      	b.n	8002d4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe f98c 	bl	8000f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	e006      	b.n	8002cc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d104      	bne.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	ea42 0103 	orr.w	r1, r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69d9      	ldr	r1, [r3, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1a      	ldr	r2, [r3, #32]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	817b      	strh	r3, [r7, #10]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 80da 	bne.w	8002f2e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_I2C_Master_Transmit+0x30>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0d3      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1d8>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d90:	f7ff fc6e 	bl	8002670 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2319      	movs	r3, #25
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f9e6 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0be      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	; 0x21
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	893a      	ldrh	r2, [r7, #8]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2bff      	cmp	r3, #255	; 0xff
 8002de2:	d90e      	bls.n	8002e02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	22ff      	movs	r2, #255	; 0xff
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	8979      	ldrh	r1, [r7, #10]
 8002df2:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <HAL_I2C_Master_Transmit+0x1e0>)
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fb48 	bl	8003490 <I2C_TransferConfig>
 8002e00:	e06c      	b.n	8002edc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	8979      	ldrh	r1, [r7, #10]
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <HAL_I2C_Master_Transmit+0x1e0>)
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fb37 	bl	8003490 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e22:	e05b      	b.n	8002edc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6a39      	ldr	r1, [r7, #32]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f9e3 	bl	80031f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e07b      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d034      	beq.n	8002edc <HAL_I2C_Master_Transmit+0x184>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d130      	bne.n	8002edc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f975 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e04d      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2bff      	cmp	r3, #255	; 0xff
 8002e9c:	d90e      	bls.n	8002ebc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	2300      	movs	r3, #0
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 faeb 	bl	8003490 <I2C_TransferConfig>
 8002eba:	e00f      	b.n	8002edc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	8979      	ldrh	r1, [r7, #10]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fada 	bl	8003490 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d19e      	bne.n	8002e24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f9c2 	bl	8003274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e01a      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2220      	movs	r2, #32
 8002f00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_I2C_Master_Transmit+0x1e4>)
 8002f0e:	400b      	ands	r3, r1
 8002f10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	80002000 	.word	0x80002000
 8002f3c:	fe00e800 	.word	0xfe00e800

08002f40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
 8002f50:	4613      	mov	r3, r2
 8002f52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	f040 80db 	bne.w	8003118 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2C_Master_Receive+0x30>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0d4      	b.n	800311a <HAL_I2C_Master_Receive+0x1da>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f78:	f7ff fb7a 	bl	8002670 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2319      	movs	r3, #25
 8002f84:	2201      	movs	r2, #1
 8002f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f8f2 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0bf      	b.n	800311a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2222      	movs	r2, #34	; 0x22
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	893a      	ldrh	r2, [r7, #8]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2bff      	cmp	r3, #255	; 0xff
 8002fca:	d90e      	bls.n	8002fea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	4b52      	ldr	r3, [pc, #328]	; (8003124 <HAL_I2C_Master_Receive+0x1e4>)
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa54 	bl	8003490 <I2C_TransferConfig>
 8002fe8:	e06d      	b.n	80030c6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	4b49      	ldr	r3, [pc, #292]	; (8003124 <HAL_I2C_Master_Receive+0x1e4>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fa43 	bl	8003490 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800300a:	e05c      	b.n	80030c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f96b 	bl	80032ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e07c      	b.n	800311a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d034      	beq.n	80030c6 <HAL_I2C_Master_Receive+0x186>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d130      	bne.n	80030c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2200      	movs	r2, #0
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f880 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e04d      	b.n	800311a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	2bff      	cmp	r3, #255	; 0xff
 8003086:	d90e      	bls.n	80030a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	22ff      	movs	r2, #255	; 0xff
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f9f6 	bl	8003490 <I2C_TransferConfig>
 80030a4:	e00f      	b.n	80030c6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f9e5 	bl	8003490 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d19d      	bne.n	800300c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	6a39      	ldr	r1, [r7, #32]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f8cd 	bl	8003274 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e01a      	b.n	800311a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <HAL_I2C_Master_Receive+0x1e8>)
 80030f8:	400b      	ands	r3, r1
 80030fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	80002400 	.word	0x80002400
 8003128:	fe00e800 	.word	0xfe00e800

0800312c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d103      	bne.n	800314a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d007      	beq.n	8003168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	619a      	str	r2, [r3, #24]
  }
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003184:	e022      	b.n	80031cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d01e      	beq.n	80031cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7ff fa6f 	bl	8002670 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d113      	bne.n	80031cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e00f      	b.n	80031ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	429a      	cmp	r2, r3
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d0cd      	beq.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003200:	e02c      	b.n	800325c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f8dc 	bl	80033c4 <I2C_IsAcknowledgeFailed>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e02a      	b.n	800326c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d01e      	beq.n	800325c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7ff fa27 	bl	8002670 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d113      	bne.n	800325c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d1cb      	bne.n	8003202 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003280:	e028      	b.n	80032d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f89c 	bl	80033c4 <I2C_IsAcknowledgeFailed>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e026      	b.n	80032e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7ff f9eb 	bl	8002670 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d113      	bne.n	80032d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e007      	b.n	80032e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d1cf      	bne.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f8:	e055      	b.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f860 	bl	80033c4 <I2C_IsAcknowledgeFailed>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e053      	b.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d129      	bne.n	8003370 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d105      	bne.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e03f      	b.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2220      	movs	r2, #32
 800333c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800334a:	400b      	ands	r3, r1
 800334c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e022      	b.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7ff f97e 	bl	8002670 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d1a2      	bne.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	fe00e800 	.word	0xfe00e800

080033c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d151      	bne.n	8003482 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033de:	e022      	b.n	8003426 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d01e      	beq.n	8003426 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e8:	f7ff f942 	bl	8002670 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <I2C_IsAcknowledgeFailed+0x3a>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d113      	bne.n	8003426 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e02e      	b.n	8003484 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d1d5      	bne.n	80033e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2210      	movs	r2, #16
 800343a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2220      	movs	r2, #32
 8003442:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fe71 	bl	800312c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <I2C_IsAcknowledgeFailed+0xc8>)
 8003456:	400b      	ands	r3, r1
 8003458:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f043 0204 	orr.w	r2, r3, #4
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	fe00e800 	.word	0xfe00e800

08003490 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	817b      	strh	r3, [r7, #10]
 800349e:	4613      	mov	r3, r2
 80034a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	0d5b      	lsrs	r3, r3, #21
 80034ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <I2C_TransferConfig+0x58>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	43db      	mvns	r3, r3
 80034b6:	ea02 0103 	and.w	r1, r2, r3
 80034ba:	897b      	ldrh	r3, [r7, #10]
 80034bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034c0:	7a7b      	ldrb	r3, [r7, #9]
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	03ff63ff 	.word	0x03ff63ff

080034ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d138      	bne.n	8003574 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800350c:	2302      	movs	r3, #2
 800350e:	e032      	b.n	8003576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	; 0x24
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800353e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b20      	cmp	r3, #32
 8003596:	d139      	bne.n	800360c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e033      	b.n	800360e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2224      	movs	r2, #36	; 0x24
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800361a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361c:	b08b      	sub	sp, #44	; 0x2c
 800361e:	af06      	add	r7, sp, #24
 8003620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0da      	b.n	80037e2 <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f009 fe9f 	bl	800d384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2203      	movs	r2, #3
 800364a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fb20 	bl	8006c98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	687e      	ldr	r6, [r7, #4]
 8003660:	466d      	mov	r5, sp
 8003662:	f106 0410 	add.w	r4, r6, #16
 8003666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	602b      	str	r3, [r5, #0]
 800366e:	1d33      	adds	r3, r6, #4
 8003670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	f003 fae6 	bl	8006c44 <USB_CoreInit>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0ab      	b.n	80037e2 <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fb1c 	bl	8006cce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e035      	b.n	8003708 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	015b      	lsls	r3, r3, #5
 80036a2:	4413      	add	r3, r2
 80036a4:	3329      	adds	r3, #41	; 0x29
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	015b      	lsls	r3, r3, #5
 80036b0:	4413      	add	r3, r2
 80036b2:	3328      	adds	r3, #40	; 0x28
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	b291      	uxth	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	015b      	lsls	r3, r3, #5
 80036c2:	4413      	add	r3, r2
 80036c4:	3336      	adds	r3, #54	; 0x36
 80036c6:	460a      	mov	r2, r1
 80036c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	015b      	lsls	r3, r3, #5
 80036d0:	4413      	add	r3, r2
 80036d2:	332b      	adds	r3, #43	; 0x2b
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	015b      	lsls	r3, r3, #5
 80036de:	4413      	add	r3, r2
 80036e0:	3338      	adds	r3, #56	; 0x38
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	015b      	lsls	r3, r3, #5
 80036ec:	4413      	add	r3, r2
 80036ee:	333c      	adds	r3, #60	; 0x3c
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	3302      	adds	r3, #2
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	4413      	add	r3, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	3301      	adds	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d3c4      	bcc.n	800369c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	e031      	b.n	800377c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	015b      	lsls	r3, r3, #5
 800371e:	4413      	add	r3, r2
 8003720:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	015b      	lsls	r3, r3, #5
 800372e:	4413      	add	r3, r2
 8003730:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	015b      	lsls	r3, r3, #5
 800373e:	4413      	add	r3, r2
 8003740:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	015b      	lsls	r3, r3, #5
 800374e:	4413      	add	r3, r2
 8003750:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	015b      	lsls	r3, r3, #5
 800375e:	4413      	add	r3, r2
 8003760:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	330a      	adds	r3, #10
 800376e:	015b      	lsls	r3, r3, #5
 8003770:	4413      	add	r3, r2
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	3301      	adds	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d3c8      	bcc.n	8003718 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	687e      	ldr	r6, [r7, #4]
 800378e:	466d      	mov	r5, sp
 8003790:	f106 0410 	add.w	r4, r6, #16
 8003794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	1d33      	adds	r3, r6, #4
 800379e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a0:	6838      	ldr	r0, [r7, #0]
 80037a2:	f003 faa1 	bl	8006ce8 <USB_DevInit>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e014      	b.n	80037e2 <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d102      	bne.n	80037d6 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fe3a 	bl	800444a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fae7 	bl	8007dae <USB_DevDisconnect>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_PCD_Start+0x16>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e012      	b.n	8003826 <HAL_PCD_Start+0x3c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f004 fab7 	bl	8007d80 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f003 fa25 	bl	8006c66 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f004 facc 	bl	8007dd8 <USB_ReadInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384a:	d102      	bne.n	8003852 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fb33 	bl	8003eb8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f004 fabe 	bl	8007dd8 <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d112      	bne.n	800388e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	b292      	uxth	r2, r2
 800387c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f009 fdf4 	bl	800d46e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003886:	2100      	movs	r1, #0
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f91e 	bl	8003aca <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f004 faa0 	bl	8007dd8 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a2:	d10b      	bne.n	80038bc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038b6:	b292      	uxth	r2, r2
 80038b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 fa89 	bl	8007dd8 <USB_ReadInterrupts>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d10b      	bne.n	80038ea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e4:	b292      	uxth	r2, r2
 80038e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 fa72 	bl	8007dd8 <USB_ReadInterrupts>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d133      	bne.n	8003968 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0204 	bic.w	r2, r2, #4
 8003912:	b292      	uxth	r2, r2
 8003914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0208 	bic.w	r2, r2, #8
 800392a:	b292      	uxth	r2, r2
 800392c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003942:	2100      	movs	r1, #0
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f00a f83f 	bl	800d9c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f009 fdc8 	bl	800d4e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003962:	b292      	uxth	r2, r2
 8003964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f004 fa33 	bl	8007dd8 <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d126      	bne.n	80039cc <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0208 	orr.w	r2, r2, #8
 8003990:	b292      	uxth	r2, r2
 8003992:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a8:	b292      	uxth	r2, r2
 80039aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0204 	orr.w	r2, r2, #4
 80039c0:	b292      	uxth	r2, r2
 80039c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f009 fd70 	bl	800d4ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f004 fa01 	bl	8007dd8 <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d13f      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039f2:	b292      	uxth	r2, r2
 80039f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d12b      	bne.n	8003a5a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0204 	orr.w	r2, r2, #4
 8003a14:	b292      	uxth	r2, r2
 8003a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0208 	orr.w	r2, r2, #8
 8003a2c:	b292      	uxth	r2, r2
 8003a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a50:	2101      	movs	r1, #1
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f009 ffb8 	bl	800d9c8 <HAL_PCDEx_LPM_Callback>
 8003a58:	e002      	b.n	8003a60 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f009 fd26 	bl	800d4ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f004 f9b7 	bl	8007dd8 <USB_ReadInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a74:	d10e      	bne.n	8003a94 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f009 fcdf 	bl	800d452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 f99d 	bl	8007dd8 <USB_ReadInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003abc:	b292      	uxth	r2, r2
 8003abe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_PCD_SetAddress+0x1a>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e013      	b.n	8003b0c <HAL_PCD_SetAddress+0x42>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f004 f92b 	bl	8007d58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	70fb      	strb	r3, [r7, #3]
 8003b26:	460b      	mov	r3, r1
 8003b28:	803b      	strh	r3, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da0b      	bge.n	8003b52 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	015b      	lsls	r3, r3, #5
 8003b42:	3328      	adds	r3, #40	; 0x28
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	705a      	strb	r2, [r3, #1]
 8003b50:	e00b      	b.n	8003b6a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	015b      	lsls	r3, r3, #5
 8003b5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b76:	883a      	ldrh	r2, [r7, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	78ba      	ldrb	r2, [r7, #2]
 8003b80:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b94:	78bb      	ldrb	r3, [r7, #2]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d102      	bne.n	8003ba0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_PCD_EP_Open+0x9a>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e00e      	b.n	8003bcc <HAL_PCD_EP_Open+0xb8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 f8b7 	bl	8006d30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003bca:	7afb      	ldrb	r3, [r7, #11]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	da0b      	bge.n	8003c00 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	015b      	lsls	r3, r3, #5
 8003bf0:	3328      	adds	r3, #40	; 0x28
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	705a      	strb	r2, [r3, #1]
 8003bfe:	e00b      	b.n	8003c18 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	015b      	lsls	r3, r3, #5
 8003c08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_PCD_EP_Close+0x5e>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e00e      	b.n	8003c50 <HAL_PCD_EP_Close+0x7c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fb65 	bl	8007310 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	460b      	mov	r3, r1
 8003c66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	7afb      	ldrb	r3, [r7, #11]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	015b      	lsls	r3, r3, #5
 8003c70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c92:	7afb      	ldrb	r3, [r7, #11]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6979      	ldr	r1, [r7, #20]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f003 fcc4 	bl	800763c <USB_EPStartXfer>
 8003cb4:	e005      	b.n	8003cc2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6979      	ldr	r1, [r7, #20]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 fcbd 	bl	800763c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	330a      	adds	r3, #10
 8003ce2:	015b      	lsls	r3, r3, #5
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	460b      	mov	r3, r1
 8003d04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	7afb      	ldrb	r3, [r7, #11]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	3328      	adds	r3, #40	; 0x28
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 fc76 	bl	800763c <USB_EPStartXfer>
 8003d50:	e005      	b.n	8003d5e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f003 fc6f 	bl	800763c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	f003 0207 	and.w	r2, r3, #7
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d901      	bls.n	8003d86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e046      	b.n	8003e14 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	da0b      	bge.n	8003da6 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	015b      	lsls	r3, r3, #5
 8003d96:	3328      	adds	r3, #40	; 0x28
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	705a      	strb	r2, [r3, #1]
 8003da4:	e009      	b.n	8003dba <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	015b      	lsls	r3, r3, #5
 8003daa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_PCD_EP_SetStall+0x72>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e01c      	b.n	8003e14 <HAL_PCD_EP_SetStall+0xac>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68f9      	ldr	r1, [r7, #12]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f003 fedf 	bl	8007bac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d108      	bne.n	8003e0a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f003 fff7 	bl	8007df8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 020f 	and.w	r2, r3, #15
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d901      	bls.n	8003e3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e03a      	b.n	8003eb0 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da0b      	bge.n	8003e5a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	015b      	lsls	r3, r3, #5
 8003e4a:	3328      	adds	r3, #40	; 0x28
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	705a      	strb	r2, [r3, #1]
 8003e58:	e00b      	b.n	8003e72 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	015b      	lsls	r3, r3, #5
 8003e62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_PCD_EP_ClrStall+0x76>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e00e      	b.n	8003eb0 <HAL_PCD_EP_ClrStall+0x94>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f003 fec5 	bl	8007c30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ec0:	e274      	b.n	80043ac <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eca:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ecc:	8afb      	ldrh	r3, [r7, #22]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003ed6:	7d7b      	ldrb	r3, [r7, #21]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 813c 	bne.w	8004156 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ede:	8afb      	ldrh	r3, [r7, #22]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d14f      	bne.n	8003f88 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef8:	b29c      	uxth	r4, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3328      	adds	r3, #40	; 0x28
 8003f0e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	441a      	add	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f46:	2100      	movs	r1, #0
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f009 fa6b 	bl	800d424 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8228 	beq.w	80043ac <PCD_EP_ISR_Handler+0x4f4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8223 	bne.w	80043ac <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f86:	e211      	b.n	80043ac <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f8e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f98:	8a7b      	ldrh	r3, [r7, #18]
 8003f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d031      	beq.n	8004006 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f003 ff58 	bl	8007e92 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b29c      	uxth	r4, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f009 f9e6 	bl	800d3d0 <HAL_PCD_SetupStageCallback>
 8004004:	e1d2      	b.n	80043ac <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f280 81ce 	bge.w	80043ac <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29a      	uxth	r2, r3
 8004018:	f640 738f 	movw	r3, #3983	; 0xf8f
 800401c:	4013      	ands	r3, r2
 800401e:	b29c      	uxth	r4, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004028:	b292      	uxth	r2, r2
 800402a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4413      	add	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	4413      	add	r3, r2
 8004046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d019      	beq.n	8004090 <PCD_EP_ISR_Handler+0x1d8>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6959      	ldr	r1, [r3, #20]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004074:	b29b      	uxth	r3, r3
 8004076:	f003 ff0c 	bl	8007e92 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	441a      	add	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004088:	2100      	movs	r1, #0
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f009 f9b2 	bl	800d3f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461c      	mov	r4, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	441c      	add	r4, r3
 80040a2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80040a6:	461c      	mov	r4, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10e      	bne.n	80040ce <PCD_EP_ISR_Handler+0x216>
 80040b0:	8823      	ldrh	r3, [r4, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8023      	strh	r3, [r4, #0]
 80040bc:	8823      	ldrh	r3, [r4, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8023      	strh	r3, [r4, #0]
 80040cc:	e02d      	b.n	800412a <PCD_EP_ISR_Handler+0x272>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b3e      	cmp	r3, #62	; 0x3e
 80040d4:	d812      	bhi.n	80040fc <PCD_EP_ISR_Handler+0x244>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <PCD_EP_ISR_Handler+0x238>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3301      	adds	r3, #1
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8023      	strh	r3, [r4, #0]
 80040fa:	e016      	b.n	800412a <PCD_EP_ISR_Handler+0x272>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <PCD_EP_ISR_Handler+0x25e>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	3b01      	subs	r3, #1
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	b29b      	uxth	r3, r3
 800411a:	029b      	lsls	r3, r3, #10
 800411c:	b29b      	uxth	r3, r3
 800411e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004126:	b29b      	uxth	r3, r3
 8004128:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	b29c      	uxth	r4, r3
 800413c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004140:	b29c      	uxth	r4, r3
 8004142:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004146:	b29c      	uxth	r4, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b9e      	ldr	r3, [pc, #632]	; (80043c8 <PCD_EP_ISR_Handler+0x510>)
 800414e:	4323      	orrs	r3, r4
 8004150:	b29b      	uxth	r3, r3
 8004152:	8013      	strh	r3, [r2, #0]
 8004154:	e12a      	b.n	80043ac <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	7d7b      	ldrb	r3, [r7, #21]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004166:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f280 80cb 	bge.w	8004306 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	7d7b      	ldrb	r3, [r7, #21]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29a      	uxth	r2, r3
 8004180:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004184:	4013      	ands	r3, r2
 8004186:	b29c      	uxth	r4, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	7d7b      	ldrb	r3, [r7, #21]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004198:	b292      	uxth	r2, r2
 800419a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800419c:	7d7b      	ldrb	r3, [r7, #21]
 800419e:	015b      	lsls	r3, r3, #5
 80041a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	7b1b      	ldrb	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d11f      	bne.n	80041f2 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80041d8:	8bfb      	ldrh	r3, [r7, #30]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d06e      	beq.n	80042bc <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6959      	ldr	r1, [r3, #20]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88da      	ldrh	r2, [r3, #6]
 80041ea:	8bfb      	ldrh	r3, [r7, #30]
 80041ec:	f003 fe51 	bl	8007e92 <USB_ReadPMA>
 80041f0:	e064      	b.n	80042bc <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420c:	b29c      	uxth	r4, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	4b6b      	ldr	r3, [pc, #428]	; (80043cc <PCD_EP_ISR_Handler+0x514>)
 800421e:	4323      	orrs	r3, r4
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01f      	beq.n	800427e <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004246:	b29b      	uxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	4413      	add	r3, r2
 8004258:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004262:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004264:	8bfb      	ldrh	r3, [r7, #30]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d028      	beq.n	80042bc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6959      	ldr	r1, [r3, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	891a      	ldrh	r2, [r3, #8]
 8004276:	8bfb      	ldrh	r3, [r7, #30]
 8004278:	f003 fe0b 	bl	8007e92 <USB_ReadPMA>
 800427c:	e01e      	b.n	80042bc <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	4413      	add	r3, r2
 8004298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6959      	ldr	r1, [r3, #20]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	895a      	ldrh	r2, [r3, #10]
 80042b6:	8bfb      	ldrh	r3, [r7, #30]
 80042b8:	f003 fdeb 	bl	8007e92 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	8bfb      	ldrh	r3, [r7, #30]
 80042c2:	441a      	add	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	8bfb      	ldrh	r3, [r7, #30]
 80042ce:	441a      	add	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <PCD_EP_ISR_Handler+0x42e>
 80042dc:	8bfa      	ldrh	r2, [r7, #30]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d206      	bcs.n	80042f4 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f009 f881 	bl	800d3f4 <HAL_PCD_DataOutStageCallback>
 80042f2:	e008      	b.n	8004306 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	7819      	ldrb	r1, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fca9 	bl	8003c58 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004306:	8a7b      	ldrh	r3, [r7, #18]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d04d      	beq.n	80043ac <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004310:	7d7b      	ldrb	r3, [r7, #21]
 8004312:	015b      	lsls	r3, r3, #5
 8004314:	3328      	adds	r3, #40	; 0x28
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	7d7b      	ldrb	r3, [r7, #21]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	b29c      	uxth	r4, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	7d7b      	ldrb	r3, [r7, #21]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434a:	b29b      	uxth	r3, r3
 800434c:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	4413      	add	r3, r2
 8004368:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	441a      	add	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f009 f846 	bl	800d424 <HAL_PCD_DataInStageCallback>
 8004398:	e008      	b.n	80043ac <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	7819      	ldrb	r1, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fca5 	bl	8003cf6 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f6ff ad82 	blt.w	8003ec2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3724      	adds	r7, #36	; 0x24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}
 80043c8:	ffff8080 	.word	0xffff8080
 80043cc:	ffff80c0 	.word	0xffff80c0

080043d0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	817b      	strh	r3, [r7, #10]
 80043de:	4613      	mov	r3, r2
 80043e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	015b      	lsls	r3, r3, #5
 80043f6:	3328      	adds	r3, #40	; 0x28
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e006      	b.n	800440e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004400:	897b      	ldrh	r3, [r7, #10]
 8004402:	015b      	lsls	r3, r3, #5
 8004404:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800440e:	893b      	ldrh	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	b29a      	uxth	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	80da      	strh	r2, [r3, #6]
 8004422:	e00b      	b.n	800443c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2201      	movs	r2, #1
 8004428:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	b29a      	uxth	r2, r3
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b29a      	uxth	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800446e:	b29b      	uxth	r3, r3
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004482:	b29b      	uxth	r3, r3
 8004484:	f043 0302 	orr.w	r3, r3, #2
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40007000 	.word	0x40007000

080044bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ca:	d130      	bne.n	800452e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044cc:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d038      	beq.n	800454c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2232      	movs	r2, #50	; 0x32
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	0c9b      	lsrs	r3, r3, #18
 80044fc:	3301      	adds	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004500:	e002      	b.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b01      	subs	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004514:	d102      	bne.n	800451c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f2      	bne.n	8004502 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004528:	d110      	bne.n	800454c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e00f      	b.n	800454e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453a:	d007      	beq.n	800454c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800453c:	4b07      	ldr	r3, [pc, #28]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004544:	4a05      	ldr	r2, [pc, #20]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40007000 	.word	0x40007000
 8004560:	20000000 	.word	0x20000000
 8004564:	431bde83 	.word	0x431bde83

08004568 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_PWREx_EnableVddUSB+0x1c>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004576:	6053      	str	r3, [r2, #4]
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40007000 	.word	0x40007000

08004588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f000 bc11 	b.w	8004dbe <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459c:	4ba0      	ldr	r3, [pc, #640]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a6:	4b9e      	ldr	r3, [pc, #632]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80e4 	beq.w	8004786 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4c>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	f040 808b 	bne.w	80046e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	f040 8087 	bne.w	80046e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045d4:	4b92      	ldr	r3, [pc, #584]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_OscConfig+0x64>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e3e8      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	4b8b      	ldr	r3, [pc, #556]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_RCC_OscConfig+0x7e>
 80045fc:	4b88      	ldr	r3, [pc, #544]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004604:	e005      	b.n	8004612 <HAL_RCC_OscConfig+0x8a>
 8004606:	4b86      	ldr	r3, [pc, #536]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004612:	4293      	cmp	r3, r2
 8004614:	d223      	bcs.n	800465e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fd94 	bl	8005148 <RCC_SetFlashLatencyFromMSIRange>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e3c9      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800462a:	4b7d      	ldr	r3, [pc, #500]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7c      	ldr	r2, [pc, #496]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004630:	f043 0308 	orr.w	r3, r3, #8
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b7a      	ldr	r3, [pc, #488]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	4977      	ldr	r1, [pc, #476]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004648:	4b75      	ldr	r3, [pc, #468]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	4972      	ldr	r1, [pc, #456]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
 800465c:	e025      	b.n	80046aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465e:	4b70      	ldr	r3, [pc, #448]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6f      	ldr	r2, [pc, #444]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b6d      	ldr	r3, [pc, #436]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	496a      	ldr	r1, [pc, #424]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	4965      	ldr	r1, [pc, #404]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fd54 	bl	8005148 <RCC_SetFlashLatencyFromMSIRange>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e389      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046aa:	f000 fc6f 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 80046ae:	4601      	mov	r1, r0
 80046b0:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	4a5a      	ldr	r2, [pc, #360]	; (8004824 <HAL_RCC_OscConfig+0x29c>)
 80046bc:	5cd3      	ldrb	r3, [r2, r3]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	fa21 f303 	lsr.w	r3, r1, r3
 80046c6:	4a58      	ldr	r2, [pc, #352]	; (8004828 <HAL_RCC_OscConfig+0x2a0>)
 80046c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046ca:	4b58      	ldr	r3, [pc, #352]	; (800482c <HAL_RCC_OscConfig+0x2a4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fd16 	bl	8001100 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
 80046d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d052      	beq.n	8004784 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	e36d      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d032      	beq.n	8004750 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046ea:	4b4d      	ldr	r3, [pc, #308]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4c      	ldr	r2, [pc, #304]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f6:	f7fd ffbb 	bl	8002670 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046fe:	f7fd ffb7 	bl	8002670 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e356      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004710:	4b43      	ldr	r3, [pc, #268]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800471c:	4b40      	ldr	r3, [pc, #256]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a3f      	ldr	r2, [pc, #252]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004722:	f043 0308 	orr.w	r3, r3, #8
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	493a      	ldr	r1, [pc, #232]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	4935      	ldr	r1, [pc, #212]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
 800474e:	e01a      	b.n	8004786 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004750:	4b33      	ldr	r3, [pc, #204]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a32      	ldr	r2, [pc, #200]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800475c:	f7fd ff88 	bl	8002670 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004764:	f7fd ff84 	bl	8002670 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e323      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004776:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x1dc>
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004784:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d073      	beq.n	800487a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x21c>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d10e      	bne.n	80047bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d10b      	bne.n	80047bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d063      	beq.n	8004878 <HAL_RCC_OscConfig+0x2f0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d15f      	bne.n	8004878 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e300      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCC_OscConfig+0x24c>
 80047c6:	4b16      	ldr	r3, [pc, #88]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a15      	ldr	r2, [pc, #84]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e01d      	b.n	8004810 <HAL_RCC_OscConfig+0x288>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x270>
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a0f      	ldr	r2, [pc, #60]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a0c      	ldr	r2, [pc, #48]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e00b      	b.n	8004810 <HAL_RCC_OscConfig+0x288>
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a08      	ldr	r2, [pc, #32]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a05      	ldr	r2, [pc, #20]	; (8004820 <HAL_RCC_OscConfig+0x298>)
 800480a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01b      	beq.n	8004850 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd ff2a 	bl	8002670 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481e:	e010      	b.n	8004842 <HAL_RCC_OscConfig+0x2ba>
 8004820:	40021000 	.word	0x40021000
 8004824:	0800e524 	.word	0x0800e524
 8004828:	20000000 	.word	0x20000000
 800482c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fd ff1e 	bl	8002670 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e2bd      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004842:	4baf      	ldr	r3, [pc, #700]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x2a8>
 800484e:	e014      	b.n	800487a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fd ff0e 	bl	8002670 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004858:	f7fd ff0a 	bl	8002670 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e2a9      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800486a:	4ba5      	ldr	r3, [pc, #660]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x2d0>
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d060      	beq.n	8004948 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d005      	beq.n	8004898 <HAL_RCC_OscConfig+0x310>
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d119      	bne.n	80048c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d116      	bne.n	80048c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004898:	4b99      	ldr	r3, [pc, #612]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_OscConfig+0x328>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e286      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b0:	4b93      	ldr	r3, [pc, #588]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	4990      	ldr	r1, [pc, #576]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c4:	e040      	b.n	8004948 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d023      	beq.n	8004916 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ce:	4b8c      	ldr	r3, [pc, #560]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a8b      	ldr	r2, [pc, #556]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048da:	f7fd fec9 	bl	8002670 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e2:	f7fd fec5 	bl	8002670 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e264      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f4:	4b82      	ldr	r3, [pc, #520]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004900:	4b7f      	ldr	r3, [pc, #508]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	497c      	ldr	r1, [pc, #496]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
 8004914:	e018      	b.n	8004948 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004916:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a79      	ldr	r2, [pc, #484]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 800491c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004922:	f7fd fea5 	bl	8002670 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492a:	f7fd fea1 	bl	8002670 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e240      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800493c:	4b70      	ldr	r3, [pc, #448]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f0      	bne.n	800492a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d03c      	beq.n	80049ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01c      	beq.n	8004996 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495c:	4b68      	ldr	r3, [pc, #416]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 800495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004962:	4a67      	ldr	r2, [pc, #412]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd fe80 	bl	8002670 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004974:	f7fd fe7c 	bl	8002670 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e21b      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004986:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ef      	beq.n	8004974 <HAL_RCC_OscConfig+0x3ec>
 8004994:	e01b      	b.n	80049ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004996:	4b5a      	ldr	r3, [pc, #360]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800499c:	4a58      	ldr	r2, [pc, #352]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fd fe63 	bl	8002670 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ae:	f7fd fe5f 	bl	8002670 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e1fe      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049c0:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80049c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ef      	bne.n	80049ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80a6 	beq.w	8004b28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049e0:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ec:	4b44      	ldr	r3, [pc, #272]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	4a43      	ldr	r2, [pc, #268]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f6:	6593      	str	r3, [r2, #88]	; 0x58
 80049f8:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_RCC_OscConfig+0x57c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d118      	bne.n	8004a46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a14:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_RCC_OscConfig+0x57c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3a      	ldr	r2, [pc, #232]	; (8004b04 <HAL_RCC_OscConfig+0x57c>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a20:	f7fd fe26 	bl	8002670 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a28:	f7fd fe22 	bl	8002670 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1c1      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3a:	4b32      	ldr	r3, [pc, #200]	; (8004b04 <HAL_RCC_OscConfig+0x57c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d108      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4d8>
 8004a4e:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a5e:	e024      	b.n	8004aaa <HAL_RCC_OscConfig+0x522>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d110      	bne.n	8004a8a <HAL_RCC_OscConfig+0x502>
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	4a24      	ldr	r2, [pc, #144]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a88:	e00f      	b.n	8004aaa <HAL_RCC_OscConfig+0x522>
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a90:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a9a:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004aa2:	f023 0304 	bic.w	r3, r3, #4
 8004aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab2:	f7fd fddd 	bl	8002670 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd fdd9 	bl	8002670 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e176      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_OscConfig+0x578>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ed      	beq.n	8004aba <HAL_RCC_OscConfig+0x532>
 8004ade:	e01a      	b.n	8004b16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fd fdc6 	bl	8002670 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ae6:	e00f      	b.n	8004b08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fd fdc2 	bl	8002670 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d906      	bls.n	8004b08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e15f      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b08:	4baa      	ldr	r3, [pc, #680]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e8      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b16:	7ffb      	ldrb	r3, [r7, #31]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1c:	4ba5      	ldr	r3, [pc, #660]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	4aa4      	ldr	r2, [pc, #656]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d03c      	beq.n	8004bae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01c      	beq.n	8004b76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b3c:	4b9d      	ldr	r3, [pc, #628]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b42:	4a9c      	ldr	r2, [pc, #624]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fd fd90 	bl	8002670 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b54:	f7fd fd8c 	bl	8002670 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e12b      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b66:	4b93      	ldr	r3, [pc, #588]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ef      	beq.n	8004b54 <HAL_RCC_OscConfig+0x5cc>
 8004b74:	e01b      	b.n	8004bae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b76:	4b8f      	ldr	r3, [pc, #572]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b7c:	4a8d      	ldr	r2, [pc, #564]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fd fd73 	bl	8002670 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b8e:	f7fd fd6f 	bl	8002670 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e10e      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ba0:	4b84      	ldr	r3, [pc, #528]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ef      	bne.n	8004b8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8102 	beq.w	8004dbc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f040 80c5 	bne.w	8004d4c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bc2:	4b7c      	ldr	r3, [pc, #496]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f003 0203 	and.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d12c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	3b01      	subs	r3, #1
 8004be2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d123      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d11b      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d113      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	3b01      	subs	r3, #1
 8004c16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d067      	beq.n	8004d00 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d062      	beq.n	8004cfc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c36:	4b5f      	ldr	r3, [pc, #380]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0bb      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c46:	4b5b      	ldr	r3, [pc, #364]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5a      	ldr	r2, [pc, #360]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c52:	f7fd fd0d 	bl	8002670 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5a:	f7fd fd09 	bl	8002670 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e0a8      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c6c:	4b51      	ldr	r3, [pc, #324]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c78:	4b4e      	ldr	r3, [pc, #312]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	4b4e      	ldr	r3, [pc, #312]	; (8004db8 <HAL_RCC_OscConfig+0x830>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	0112      	lsls	r2, r2, #4
 8004c8c:	4311      	orrs	r1, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c92:	0212      	lsls	r2, r2, #8
 8004c94:	4311      	orrs	r1, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c9a:	0852      	lsrs	r2, r2, #1
 8004c9c:	3a01      	subs	r2, #1
 8004c9e:	0552      	lsls	r2, r2, #21
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ca6:	0852      	lsrs	r2, r2, #1
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0652      	lsls	r2, r2, #25
 8004cac:	4311      	orrs	r1, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb2:	06d2      	lsls	r2, r2, #27
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	493f      	ldr	r1, [pc, #252]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b3d      	ldr	r3, [pc, #244]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3c      	ldr	r2, [pc, #240]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc8:	4b3a      	ldr	r3, [pc, #232]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a39      	ldr	r2, [pc, #228]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cd4:	f7fd fccc 	bl	8002670 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fcc8 	bl	8002670 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e067      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cee:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cfa:	e05f      	b.n	8004dbc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e05e      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d00:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d157      	bne.n	8004dbc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a25      	ldr	r2, [pc, #148]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d24:	f7fd fca4 	bl	8002670 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd fca0 	bl	8002670 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e03f      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x7a4>
 8004d4a:	e037      	b.n	8004dbc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d02d      	beq.n	8004dae <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d70:	f023 0303 	bic.w	r3, r3, #3
 8004d74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d76:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	4a0e      	ldr	r2, [pc, #56]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004d7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7fd fc73 	bl	8002670 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8e:	f7fd fc6f 	bl	8002670 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e00e      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <HAL_RCC_OscConfig+0x82c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <HAL_RCC_OscConfig+0x806>
 8004dac:	e006      	b.n	8004dbc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e005      	b.n	8004dbe <HAL_RCC_OscConfig+0x836>
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop

08004dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0c8      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b66      	ldr	r3, [pc, #408]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d910      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 0207 	bic.w	r2, r3, #7
 8004df2:	4961      	ldr	r1, [pc, #388]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b5f      	ldr	r3, [pc, #380]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0b0      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d04c      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e20:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d121      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e09e      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e38:	4b50      	ldr	r3, [pc, #320]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d115      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e092      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e50:	4b4a      	ldr	r3, [pc, #296]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e086      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e60:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e07e      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e70:	4b42      	ldr	r3, [pc, #264]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f023 0203 	bic.w	r2, r3, #3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	493f      	ldr	r1, [pc, #252]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e82:	f7fd fbf5 	bl	8002670 <HAL_GetTick>
 8004e86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8a:	f7fd fbf1 	bl	8002670 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e066      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea0:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 020c 	and.w	r2, r3, #12
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d1eb      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebe:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	492c      	ldr	r1, [pc, #176]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d210      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 0207 	bic.w	r2, r3, #7
 8004ee6:	4924      	ldr	r1, [pc, #144]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_RCC_ClockConfig+0x1b0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e036      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4918      	ldr	r1, [pc, #96]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4910      	ldr	r1, [pc, #64]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f3e:	f000 f825 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8004f42:	4601      	mov	r1, r0
 8004f44:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <HAL_RCC_ClockConfig+0x1b4>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004f50:	5cd3      	ldrb	r3, [r2, r3]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	fa21 f303 	lsr.w	r3, r1, r3
 8004f5a:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x1c0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc f8cc 	bl	8001100 <HAL_InitTick>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40022000 	.word	0x40022000
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	0800e524 	.word	0x0800e524
 8004f84:	20000000 	.word	0x20000000
 8004f88:	20000004 	.word	0x20000004

08004f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	4b3d      	ldr	r3, [pc, #244]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d121      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d11e      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc0:	4b33      	ldr	r3, [pc, #204]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e005      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fdc:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d102      	bne.n	800500a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e004      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d101      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 8005012:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d133      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0xa4>
 800502a:	2b03      	cmp	r3, #3
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0xaa>
 800502e:	e005      	b.n	800503c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005032:	617b      	str	r3, [r7, #20]
      break;
 8005034:	e005      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005036:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 8005038:	617b      	str	r3, [r7, #20]
      break;
 800503a:	e002      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	617b      	str	r3, [r7, #20]
      break;
 8005040:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	3301      	adds	r3, #1
 800504e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005050:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	fb02 f203 	mul.w	r2, r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_GetSysClockFreq+0x104>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	0e5b      	lsrs	r3, r3, #25
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	3301      	adds	r3, #1
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005082:	69bb      	ldr	r3, [r7, #24]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3724      	adds	r7, #36	; 0x24
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40021000 	.word	0x40021000
 8005094:	0800e53c 	.word	0x0800e53c
 8005098:	00f42400 	.word	0x00f42400
 800509c:	007a1200 	.word	0x007a1200

080050a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a6:	681b      	ldr	r3, [r3, #0]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000

080050b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050bc:	f7ff fff0 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050c0:	4601      	mov	r1, r0
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0adb      	lsrs	r3, r3, #11
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050ce:	5cd3      	ldrb	r3, [r2, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	0800e534 	.word	0x0800e534

080050e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	220f      	movs	r2, #15
 80050f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80050f4:	4b12      	ldr	r3, [pc, #72]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0203 	and.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_RCC_GetClockConfig+0x60>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0207 	and.w	r2, r3, #7
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000
 8005144:	40022000 	.word	0x40022000

08005148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005154:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005160:	f7ff f99e 	bl	80044a0 <HAL_PWREx_GetVoltageRange>
 8005164:	6178      	str	r0, [r7, #20]
 8005166:	e014      	b.n	8005192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	4a24      	ldr	r2, [pc, #144]	; (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800516e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005172:	6593      	str	r3, [r2, #88]	; 0x58
 8005174:	4b22      	ldr	r3, [pc, #136]	; (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005180:	f7ff f98e 	bl	80044a0 <HAL_PWREx_GetVoltageRange>
 8005184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005186:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	4a1d      	ldr	r2, [pc, #116]	; (8005200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800518c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005190:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005198:	d10b      	bne.n	80051b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d919      	bls.n	80051d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2ba0      	cmp	r3, #160	; 0xa0
 80051a4:	d902      	bls.n	80051ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051a6:	2302      	movs	r3, #2
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	e013      	b.n	80051d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051ac:	2301      	movs	r3, #1
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	e010      	b.n	80051d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d902      	bls.n	80051be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051b8:	2303      	movs	r3, #3
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	e00a      	b.n	80051d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b80      	cmp	r3, #128	; 0x80
 80051c2:	d102      	bne.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051c4:	2302      	movs	r3, #2
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e004      	b.n	80051d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d101      	bne.n	80051d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051d0:	2301      	movs	r3, #1
 80051d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 0207 	bic.w	r2, r3, #7
 80051dc:	4909      	ldr	r1, [pc, #36]	; (8005204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d001      	beq.n	80051f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40021000 	.word	0x40021000
 8005204:	40022000 	.word	0x40022000

08005208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005210:	2300      	movs	r3, #0
 8005212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005214:	2300      	movs	r3, #0
 8005216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02f      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800522c:	d005      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800522e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005232:	d015      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005238:	e00f      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800523a:	4b5d      	ldr	r3, [pc, #372]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4a5c      	ldr	r2, [pc, #368]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005244:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005246:	e00c      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fa1e 	bl	8005690 <RCCEx_PLLSAI1_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	74fb      	strb	r3, [r7, #19]
      break;
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8005260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005262:	7cfb      	ldrb	r3, [r7, #19]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005268:	4b51      	ldr	r3, [pc, #324]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	494e      	ldr	r1, [pc, #312]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800527e:	e001      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 809e 	beq.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005292:	2300      	movs	r3, #0
 8005294:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005296:	4b46      	ldr	r3, [pc, #280]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ac:	4b40      	ldr	r3, [pc, #256]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	4a3f      	ldr	r2, [pc, #252]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
 80052b8:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c4:	2301      	movs	r3, #1
 80052c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c8:	4b3a      	ldr	r3, [pc, #232]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a39      	ldr	r2, [pc, #228]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052d4:	f7fd f9cc 	bl	8002670 <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052da:	e009      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052dc:	f7fd f9c8 	bl	8002670 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d902      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	74fb      	strb	r3, [r7, #19]
        break;
 80052ee:	e005      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052f0:	4b30      	ldr	r3, [pc, #192]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ef      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d15a      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005302:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01e      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	429a      	cmp	r2, r3
 800531c:	d019      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800531e:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005328:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800532a:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800533a:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005340:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800534a:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d016      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fd f988 	bl	8002670 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005362:	e00b      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005364:	f7fd f984 	bl	8002670 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d902      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	74fb      	strb	r3, [r7, #19]
            break;
 800537a:	e006      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0ec      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	4904      	ldr	r1, [pc, #16]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053a6:	e009      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	74bb      	strb	r3, [r7, #18]
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053bc:	7c7b      	ldrb	r3, [r7, #17]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c2:	4bb2      	ldr	r3, [pc, #712]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	4ab1      	ldr	r2, [pc, #708]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053da:	4bac      	ldr	r3, [pc, #688]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f023 0203 	bic.w	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	49a8      	ldr	r1, [pc, #672]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053fc:	4ba3      	ldr	r3, [pc, #652]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 020c 	bic.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	49a0      	ldr	r1, [pc, #640]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800541e:	4b9b      	ldr	r3, [pc, #620]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	4997      	ldr	r1, [pc, #604]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005440:	4b92      	ldr	r3, [pc, #584]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	498f      	ldr	r1, [pc, #572]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005462:	4b8a      	ldr	r3, [pc, #552]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	4986      	ldr	r1, [pc, #536]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005484:	4b81      	ldr	r3, [pc, #516]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	497e      	ldr	r1, [pc, #504]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054a6:	4b79      	ldr	r3, [pc, #484]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	4975      	ldr	r1, [pc, #468]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054c8:	4b70      	ldr	r3, [pc, #448]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	496d      	ldr	r1, [pc, #436]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ea:	4b68      	ldr	r3, [pc, #416]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	4964      	ldr	r1, [pc, #400]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d028      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800550c:	4b5f      	ldr	r3, [pc, #380]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551a:	495c      	ldr	r1, [pc, #368]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552a:	d106      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800552c:	4b57      	ldr	r3, [pc, #348]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a56      	ldr	r2, [pc, #344]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005536:	60d3      	str	r3, [r2, #12]
 8005538:	e011      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005542:	d10c      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	2101      	movs	r1, #1
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f8a0 	bl	8005690 <RCCEx_PLLSAI1_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d028      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800556a:	4b48      	ldr	r3, [pc, #288]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005578:	4944      	ldr	r1, [pc, #272]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005588:	d106      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558a:	4b40      	ldr	r3, [pc, #256]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4a3f      	ldr	r2, [pc, #252]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005594:	60d3      	str	r3, [r2, #12]
 8005596:	e011      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	2101      	movs	r1, #1
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f871 	bl	8005690 <RCCEx_PLLSAI1_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d028      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055c8:	4b30      	ldr	r3, [pc, #192]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d6:	492d      	ldr	r1, [pc, #180]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e6:	d106      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a27      	ldr	r2, [pc, #156]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f2:	60d3      	str	r3, [r2, #12]
 80055f4:	e011      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055fe:	d10c      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f842 	bl	8005690 <RCCEx_PLLSAI1_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01c      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005626:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	4915      	ldr	r1, [pc, #84]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005644:	d10c      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3304      	adds	r3, #4
 800564a:	2102      	movs	r1, #2
 800564c:	4618      	mov	r0, r3
 800564e:	f000 f81f 	bl	8005690 <RCCEx_PLLSAI1_Config>
 8005652:	4603      	mov	r3, r0
 8005654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005656:	7cfb      	ldrb	r3, [r7, #19]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 800565c:	7cfb      	ldrb	r3, [r7, #19]
 800565e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800566c:	4b07      	ldr	r3, [pc, #28]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	4904      	ldr	r1, [pc, #16]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005682:	7cbb      	ldrb	r3, [r7, #18]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000

08005690 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800569e:	4b73      	ldr	r3, [pc, #460]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056aa:	4b70      	ldr	r3, [pc, #448]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0203 	and.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d10d      	bne.n	80056d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
       ||
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056c2:	4b6a      	ldr	r3, [pc, #424]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	091b      	lsrs	r3, r3, #4
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
       ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d044      	beq.n	8005760 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
 80056da:	e041      	b.n	8005760 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d00c      	beq.n	80056fe <RCCEx_PLLSAI1_Config+0x6e>
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d013      	beq.n	8005710 <RCCEx_PLLSAI1_Config+0x80>
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d120      	bne.n	800572e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056ec:	4b5f      	ldr	r3, [pc, #380]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11d      	bne.n	8005734 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fc:	e01a      	b.n	8005734 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056fe:	4b5b      	ldr	r3, [pc, #364]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	2b00      	cmp	r3, #0
 8005708:	d116      	bne.n	8005738 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570e:	e013      	b.n	8005738 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005710:	4b56      	ldr	r3, [pc, #344]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10f      	bne.n	800573c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800571c:	4b53      	ldr	r3, [pc, #332]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800572c:	e006      	b.n	800573c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e004      	b.n	800573e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005734:	bf00      	nop
 8005736:	e002      	b.n	800573e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005738:	bf00      	nop
 800573a:	e000      	b.n	800573e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800573c:	bf00      	nop
    }

    if(status == HAL_OK)
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005744:	4b49      	ldr	r3, [pc, #292]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	3b01      	subs	r3, #1
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	430b      	orrs	r3, r1
 800575a:	4944      	ldr	r1, [pc, #272]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d17c      	bne.n	8005860 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005766:	4b41      	ldr	r3, [pc, #260]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a40      	ldr	r2, [pc, #256]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 800576c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005772:	f7fc ff7d 	bl	8002670 <HAL_GetTick>
 8005776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005778:	e009      	b.n	800578e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800577a:	f7fc ff79 	bl	8002670 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d902      	bls.n	800578e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	73fb      	strb	r3, [r7, #15]
        break;
 800578c:	e005      	b.n	800579a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800578e:	4b37      	ldr	r3, [pc, #220]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1ef      	bne.n	800577a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d15f      	bne.n	8005860 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d110      	bne.n	80057c8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a6:	4b31      	ldr	r3, [pc, #196]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80057ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6892      	ldr	r2, [r2, #8]
 80057b6:	0211      	lsls	r1, r2, #8
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68d2      	ldr	r2, [r2, #12]
 80057bc:	06d2      	lsls	r2, r2, #27
 80057be:	430a      	orrs	r2, r1
 80057c0:	492a      	ldr	r1, [pc, #168]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	610b      	str	r3, [r1, #16]
 80057c6:	e027      	b.n	8005818 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d112      	bne.n	80057f4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	0211      	lsls	r1, r2, #8
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6912      	ldr	r2, [r2, #16]
 80057e4:	0852      	lsrs	r2, r2, #1
 80057e6:	3a01      	subs	r2, #1
 80057e8:	0552      	lsls	r2, r2, #21
 80057ea:	430a      	orrs	r2, r1
 80057ec:	491f      	ldr	r1, [pc, #124]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	610b      	str	r3, [r1, #16]
 80057f2:	e011      	b.n	8005818 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6892      	ldr	r2, [r2, #8]
 8005804:	0211      	lsls	r1, r2, #8
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6952      	ldr	r2, [r2, #20]
 800580a:	0852      	lsrs	r2, r2, #1
 800580c:	3a01      	subs	r2, #1
 800580e:	0652      	lsls	r2, r2, #25
 8005810:	430a      	orrs	r2, r1
 8005812:	4916      	ldr	r1, [pc, #88]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005818:	4b14      	ldr	r3, [pc, #80]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a13      	ldr	r2, [pc, #76]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 800581e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005822:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fc ff24 	bl	8002670 <HAL_GetTick>
 8005828:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800582a:	e009      	b.n	8005840 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800582c:	f7fc ff20 	bl	8002670 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d902      	bls.n	8005840 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	73fb      	strb	r3, [r7, #15]
          break;
 800583e:	e005      	b.n	800584c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0ef      	beq.n	800582c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	4904      	ldr	r1, [pc, #16]	; (800586c <RCCEx_PLLSAI1_Config+0x1dc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000

08005870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07c      	b.n	800597c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fb fbb1 	bl	8001004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2202      	movs	r2, #2
 80058a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c2:	d902      	bls.n	80058ca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e002      	b.n	80058d0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058d8:	d007      	beq.n	80058ea <HAL_SPI_Init+0x7a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e2:	d002      	beq.n	80058ea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058fa:	d903      	bls.n	8005904 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
 8005902:	e002      	b.n	800590a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	ea42 0103 	orr.w	r1, r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	f003 0204 	and.w	r2, r3, #4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	ea42 0103 	orr.w	r1, r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_SPI_Transmit+0x22>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e150      	b.n	8005c48 <HAL_SPI_Transmit+0x2c4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ae:	f7fc fe5f 	bl	8002670 <HAL_GetTick>
 80059b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
 80059c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059c8:	e135      	b.n	8005c36 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_SPI_Transmit+0x52>
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059da:	e12c      	b.n	8005c36 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2203      	movs	r2, #3
 80059e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a26:	d107      	bne.n	8005a38 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d007      	beq.n	8005a56 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a5e:	d94b      	bls.n	8005af8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_Transmit+0xea>
 8005a68:	8afb      	ldrh	r3, [r7, #22]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d13e      	bne.n	8005aec <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	881a      	ldrh	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	1c9a      	adds	r2, r3, #2
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a92:	e02b      	b.n	8005aec <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d112      	bne.n	8005ac8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	881a      	ldrh	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ac6:	e011      	b.n	8005aec <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac8:	f7fc fdd2 	bl	8002670 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d803      	bhi.n	8005ae0 <HAL_SPI_Transmit+0x15c>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d102      	bne.n	8005ae6 <HAL_SPI_Transmit+0x162>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005aea:	e0a4      	b.n	8005c36 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ce      	bne.n	8005a94 <HAL_SPI_Transmit+0x110>
 8005af6:	e07c      	b.n	8005bf2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_SPI_Transmit+0x182>
 8005b00:	8afb      	ldrh	r3, [r7, #22]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d170      	bne.n	8005be8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d912      	bls.n	8005b36 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b02      	subs	r3, #2
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b34:	e058      	b.n	8005be8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b5c:	e044      	b.n	8005be8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d12b      	bne.n	8005bc4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d912      	bls.n	8005b9c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	881a      	ldrh	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b02      	subs	r3, #2
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b9a:	e025      	b.n	8005be8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	7812      	ldrb	r2, [r2, #0]
 8005ba8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bc2:	e011      	b.n	8005be8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc4:	f7fc fd54 	bl	8002670 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d803      	bhi.n	8005bdc <HAL_SPI_Transmit+0x258>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d102      	bne.n	8005be2 <HAL_SPI_Transmit+0x25e>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005be6:	e026      	b.n	8005c36 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1b5      	bne.n	8005b5e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 fdb4 	bl	8006764 <SPI_EndRxTxTransaction>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e000      	b.n	8005c36 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005c34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c6c:	d112      	bne.n	8005c94 <HAL_SPI_Receive+0x44>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10e      	bne.n	8005c94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f908 	bl	8005ea0 <HAL_SPI_TransmitReceive>
 8005c90:	4603      	mov	r3, r0
 8005c92:	e101      	b.n	8005e98 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_SPI_Receive+0x52>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e0fa      	b.n	8005e98 <HAL_SPI_Receive+0x248>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005caa:	f7fc fce1 	bl	8002670 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d002      	beq.n	8005cc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cc0:	e0e1      	b.n	8005e86 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_SPI_Receive+0x7e>
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d102      	bne.n	8005cd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cd2:	e0d8      	b.n	8005e86 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d1e:	d908      	bls.n	8005d32 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d2e:	605a      	str	r2, [r3, #4]
 8005d30:	e007      	b.n	8005d42 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d40:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d4a:	d107      	bne.n	8005d5c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d007      	beq.n	8005d7a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d82:	d867      	bhi.n	8005e54 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d84:	e030      	b.n	8005de8 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d117      	bne.n	8005dc4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f103 020c 	add.w	r2, r3, #12
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005dc2:	e011      	b.n	8005de8 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc4:	f7fc fc54 	bl	8002670 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d803      	bhi.n	8005ddc <HAL_SPI_Receive+0x18c>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d102      	bne.n	8005de2 <HAL_SPI_Receive+0x192>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005de6:	e04e      	b.n	8005e86 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1c8      	bne.n	8005d86 <HAL_SPI_Receive+0x136>
 8005df4:	e034      	b.n	8005e60 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d115      	bne.n	8005e30 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e2e:	e011      	b.n	8005e54 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e30:	f7fc fc1e 	bl	8002670 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d803      	bhi.n	8005e48 <HAL_SPI_Receive+0x1f8>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d102      	bne.n	8005e4e <HAL_SPI_Receive+0x1fe>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e52:	e018      	b.n	8005e86 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1ca      	bne.n	8005df6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fc25 	bl	80066b4 <SPI_EndRxTransaction>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]
 8005e82:	e000      	b.n	8005e86 <HAL_SPI_Receive+0x236>
  }

error :
 8005e84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x26>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e1fb      	b.n	80062be <HAL_SPI_TransmitReceive+0x41e>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ece:	f7fc fbcf 	bl	8002670 <HAL_GetTick>
 8005ed2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eda:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005ee2:	887b      	ldrh	r3, [r7, #2]
 8005ee4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ee6:	887b      	ldrh	r3, [r7, #2]
 8005ee8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eea:	7efb      	ldrb	r3, [r7, #27]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d00e      	beq.n	8005f0e <HAL_SPI_TransmitReceive+0x6e>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef6:	d106      	bne.n	8005f06 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <HAL_SPI_TransmitReceive+0x66>
 8005f00:	7efb      	ldrb	r3, [r7, #27]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d003      	beq.n	8005f0e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
 8005f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f0c:	e1cd      	b.n	80062aa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_SPI_TransmitReceive+0x80>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_SPI_TransmitReceive+0x80>
 8005f1a:	887b      	ldrh	r3, [r7, #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f26:	e1c0      	b.n	80062aa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d003      	beq.n	8005f3c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2205      	movs	r2, #5
 8005f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	887a      	ldrh	r2, [r7, #2]
 8005f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	887a      	ldrh	r2, [r7, #2]
 8005f62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	887a      	ldrh	r2, [r7, #2]
 8005f68:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f7e:	d802      	bhi.n	8005f86 <HAL_SPI_TransmitReceive+0xe6>
 8005f80:	8a3b      	ldrh	r3, [r7, #16]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d908      	bls.n	8005f98 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	e007      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fa6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d007      	beq.n	8005fc6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fce:	d97c      	bls.n	80060ca <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x13e>
 8005fd8:	8a7b      	ldrh	r3, [r7, #18]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d169      	bne.n	80060b2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	881a      	ldrh	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006002:	e056      	b.n	80060b2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	d11b      	bne.n	800604a <HAL_SPI_TransmitReceive+0x1aa>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d016      	beq.n	800604a <HAL_SPI_TransmitReceive+0x1aa>
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	2b01      	cmp	r3, #1
 8006020:	d113      	bne.n	800604a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	881a      	ldrh	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b01      	cmp	r3, #1
 8006056:	d11c      	bne.n	8006092 <HAL_SPI_TransmitReceive+0x1f2>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d016      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	b292      	uxth	r2, r2
 8006070:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	1c9a      	adds	r2, r3, #2
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800608e:	2301      	movs	r3, #1
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006092:	f7fc faed 	bl	8002670 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609e:	429a      	cmp	r2, r3
 80060a0:	d807      	bhi.n	80060b2 <HAL_SPI_TransmitReceive+0x212>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d003      	beq.n	80060b2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80060b0:	e0fb      	b.n	80062aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1a3      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x164>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d19d      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x164>
 80060c8:	e0df      	b.n	800628a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_SPI_TransmitReceive+0x23a>
 80060d2:	8a7b      	ldrh	r3, [r7, #18]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	f040 80cb 	bne.w	8006270 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d912      	bls.n	800610a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	1c9a      	adds	r2, r3, #2
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b02      	subs	r3, #2
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006108:	e0b2      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	7812      	ldrb	r2, [r2, #0]
 8006116:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006130:	e09e      	b.n	8006270 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d134      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x30a>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d02f      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x30a>
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	2b01      	cmp	r3, #1
 800614e:	d12c      	bne.n	80061aa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d912      	bls.n	8006180 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b02      	subs	r3, #2
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800617e:	e012      	b.n	80061a6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d148      	bne.n	800624a <HAL_SPI_TransmitReceive+0x3aa>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d042      	beq.n	800624a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d923      	bls.n	8006218 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	b292      	uxth	r2, r2
 80061dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	1c9a      	adds	r2, r3, #2
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b02      	subs	r3, #2
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	d81f      	bhi.n	8006246 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	e016      	b.n	8006246 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f103 020c 	add.w	r2, r3, #12
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006246:	2301      	movs	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800624a:	f7fc fa11 	bl	8002670 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006256:	429a      	cmp	r2, r3
 8006258:	d803      	bhi.n	8006262 <HAL_SPI_TransmitReceive+0x3c2>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d102      	bne.n	8006268 <HAL_SPI_TransmitReceive+0x3c8>
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800626e:	e01c      	b.n	80062aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	f47f af5b 	bne.w	8006132 <HAL_SPI_TransmitReceive+0x292>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	f47f af54 	bne.w	8006132 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fa68 	bl	8006764 <SPI_EndRxTxTransaction>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d006      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	661a      	str	r2, [r3, #96]	; 0x60
 80062a6:	e000      	b.n	80062aa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80062a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	099b      	lsrs	r3, r3, #6
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10f      	bne.n	800630c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	099b      	lsrs	r3, r3, #6
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d004      	beq.n	800630c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
    return;
 800630a:	e0d8      	b.n	80064be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	085b      	lsrs	r3, r3, #1
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_SPI_IRQHandler+0x66>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	09db      	lsrs	r3, r3, #7
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
    return;
 800632c:	e0c7      	b.n	80064be <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10c      	bne.n	8006354 <HAL_SPI_IRQHandler+0x8c>
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	099b      	lsrs	r3, r3, #6
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_SPI_IRQHandler+0x8c>
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	0a1b      	lsrs	r3, r3, #8
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80b5 	beq.w	80064be <HAL_SPI_IRQHandler+0x1f6>
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80ae 	beq.w	80064be <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	099b      	lsrs	r3, r3, #6
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d023      	beq.n	80063b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d011      	beq.n	800639e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637e:	f043 0204 	orr.w	r2, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	e00b      	b.n	80063b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	693b      	ldr	r3, [r7, #16]
        return;
 80063b4:	e083      	b.n	80064be <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d014      	beq.n	80063ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fc:	f043 0208 	orr.w	r2, r3, #8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006404:	2300      	movs	r3, #0
 8006406:	60bb      	str	r3, [r7, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006416:	2b00      	cmp	r3, #0
 8006418:	d050      	beq.n	80064bc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006428:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_SPI_IRQHandler+0x17e>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d034      	beq.n	80064b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0203 	bic.w	r2, r2, #3
 8006454:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	2b00      	cmp	r3, #0
 800645c:	d011      	beq.n	8006482 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006462:	4a18      	ldr	r2, [pc, #96]	; (80064c4 <HAL_SPI_IRQHandler+0x1fc>)
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646a:	4618      	mov	r0, r3
 800646c:	f7fc fa10 	bl	8002890 <HAL_DMA_Abort_IT>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	2b00      	cmp	r3, #0
 8006488:	d016      	beq.n	80064b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	4a0d      	ldr	r2, [pc, #52]	; (80064c4 <HAL_SPI_IRQHandler+0x1fc>)
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	4618      	mov	r0, r3
 8006498:	f7fc f9fa 	bl	8002890 <HAL_DMA_Abort_IT>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80064ae:	e003      	b.n	80064b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f809 	bl	80064c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80064b6:	e000      	b.n	80064ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80064b8:	bf00      	nop
    return;
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
  }
}
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	080064dd 	.word	0x080064dd

080064c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff ffe5 	bl	80064c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	4613      	mov	r3, r2
 8006514:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006516:	e04c      	b.n	80065b2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d048      	beq.n	80065b2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006520:	f7fc f8a6 	bl	8002670 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d902      	bls.n	8006536 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d13d      	bne.n	80065b2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800654e:	d111      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	d004      	beq.n	8006564 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006562:	d107      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657c:	d10f      	bne.n	800659e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800659c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e00f      	b.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4013      	ands	r3, r2
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	bf0c      	ite	eq
 80065c2:	2301      	moveq	r3, #1
 80065c4:	2300      	movne	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d1a3      	bne.n	8006518 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80065e8:	e057      	b.n	800669a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065f0:	d106      	bne.n	8006600 <SPI_WaitFifoStateUntilTimeout+0x26>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d048      	beq.n	800669a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006608:	f7fc f832 	bl	8002670 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d902      	bls.n	800661e <SPI_WaitFifoStateUntilTimeout+0x44>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d13d      	bne.n	800669a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800662c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006636:	d111      	bne.n	800665c <SPI_WaitFifoStateUntilTimeout+0x82>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006640:	d004      	beq.n	800664c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d107      	bne.n	800665c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006664:	d10f      	bne.n	8006686 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e008      	b.n	80066ac <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d19f      	bne.n	80065ea <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066c8:	d111      	bne.n	80066ee <SPI_EndRxTransaction+0x3a>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d2:	d004      	beq.n	80066de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066dc:	d107      	bne.n	80066ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2180      	movs	r1, #128	; 0x80
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff ff04 	bl	8006506 <SPI_WaitFlagStateUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	f043 0220 	orr.w	r2, r3, #32
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e023      	b.n	800675c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800671c:	d11d      	bne.n	800675a <SPI_EndRxTransaction+0xa6>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006726:	d004      	beq.n	8006732 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006730:	d113      	bne.n	800675a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff4b 	bl	80065da <SPI_WaitFifoStateUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e000      	b.n	800675c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff ff2c 	bl	80065da <SPI_WaitFifoStateUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678c:	f043 0220 	orr.w	r2, r3, #32
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e027      	b.n	80067e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff feaf 	bl	8006506 <SPI_WaitFlagStateUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e014      	b.n	80067e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff ff05 	bl	80065da <SPI_WaitFifoStateUntilTimeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067da:	f043 0220 	orr.w	r2, r3, #32
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e000      	b.n	80067e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e01d      	b.n	800683e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f815 	bl	8006846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f000 f986 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <HAL_TIM_Base_Start_IT+0x50>)
 800687c:	4013      	ands	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b06      	cmp	r3, #6
 8006884:	d00b      	beq.n	800689e <HAL_TIM_Base_Start_IT+0x42>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688c:	d007      	beq.n	800689e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	00010007 	.word	0x00010007

080068b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d122      	bne.n	800690c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d11b      	bne.n	800690c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0202 	mvn.w	r2, #2
 80068dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f905 	bl	8006b02 <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8f7 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f908 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b04      	cmp	r3, #4
 8006918:	d122      	bne.n	8006960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b04      	cmp	r3, #4
 8006926:	d11b      	bne.n	8006960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0204 	mvn.w	r2, #4
 8006930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f8db 	bl	8006b02 <HAL_TIM_IC_CaptureCallback>
 800694c:	e005      	b.n	800695a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f8cd 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f8de 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b08      	cmp	r3, #8
 800696c:	d122      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b08      	cmp	r3, #8
 800697a:	d11b      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0208 	mvn.w	r2, #8
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2204      	movs	r2, #4
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8b1 	bl	8006b02 <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8a3 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8b4 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b10      	cmp	r3, #16
 80069c0:	d122      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d11b      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0210 	mvn.w	r2, #16
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2208      	movs	r2, #8
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f887 	bl	8006b02 <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f879 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f88a 	bl	8006b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10e      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d107      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0201 	mvn.w	r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fa fa62 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3e:	2b80      	cmp	r3, #128	; 0x80
 8006a40:	d10e      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d107      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8de 	bl	8006c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6e:	d10e      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b80      	cmp	r3, #128	; 0x80
 8006a7c:	d107      	bne.n	8006a8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f8d1 	bl	8006c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d10e      	bne.n	8006aba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d107      	bne.n	8006aba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f838 	bl	8006b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d10e      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d107      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0220 	mvn.w	r2, #32
 8006ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f891 	bl	8006c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a2a      	ldr	r2, [pc, #168]	; (8006bfc <TIM_Base_SetConfig+0xbc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_Base_SetConfig+0x20>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5e:	d108      	bne.n	8006b72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <TIM_Base_SetConfig+0xbc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00b      	beq.n	8006b92 <TIM_Base_SetConfig+0x52>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b80:	d007      	beq.n	8006b92 <TIM_Base_SetConfig+0x52>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1e      	ldr	r2, [pc, #120]	; (8006c00 <TIM_Base_SetConfig+0xc0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_Base_SetConfig+0x52>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <TIM_Base_SetConfig+0xc4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d108      	bne.n	8006ba4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <TIM_Base_SetConfig+0xbc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d007      	beq.n	8006be0 <TIM_Base_SetConfig+0xa0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a0b      	ldr	r2, [pc, #44]	; (8006c00 <TIM_Base_SetConfig+0xc0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_Base_SetConfig+0xa0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a0a      	ldr	r2, [pc, #40]	; (8006c04 <TIM_Base_SetConfig+0xc4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d103      	bne.n	8006be8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	615a      	str	r2, [r3, #20]
}
 8006bee:	bf00      	nop
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400

08006c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c44:	b084      	sub	sp, #16
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	f107 0014 	add.w	r0, r7, #20
 8006c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	b004      	add	sp, #16
 8006c64:	4770      	bx	lr

08006c66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c6e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ca0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ca4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ce8:	b084      	sub	sp, #16
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	f107 0014 	add.w	r0, r7, #20
 8006cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ffa3 	bl	8006c66 <USB_EnableGlobalInt>

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d2c:	b004      	add	sp, #16
 8006d2e:	4770      	bx	lr

08006d30 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d30:	b490      	push	{r4, r7}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	78db      	ldrb	r3, [r3, #3]
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d819      	bhi.n	8006d92 <USB_ActivateEndpoint+0x62>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USB_ActivateEndpoint+0x34>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d89 	.word	0x08006d89
 8006d6c:	08006d99 	.word	0x08006d99
 8006d70:	08006d7f 	.word	0x08006d7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d74:	89bb      	ldrh	r3, [r7, #12]
 8006d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d7a:	81bb      	strh	r3, [r7, #12]
      break;
 8006d7c:	e00d      	b.n	8006d9a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d7e:	89bb      	ldrh	r3, [r7, #12]
 8006d80:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d84:	81bb      	strh	r3, [r7, #12]
      break;
 8006d86:	e008      	b.n	8006d9a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d88:	89bb      	ldrh	r3, [r7, #12]
 8006d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d8e:	81bb      	strh	r3, [r7, #12]
      break;
 8006d90:	e003      	b.n	8006d9a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
      break;
 8006d96:	e000      	b.n	8006d9a <USB_ActivateEndpoint+0x6a>
      break;
 8006d98:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	89bb      	ldrh	r3, [r7, #12]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	b21b      	sxth	r3, r3
 8006dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	b21a      	sxth	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b21b      	sxth	r3, r3
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	b21b      	sxth	r3, r3
 8006dde:	b29c      	uxth	r4, r3
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	4b8a      	ldr	r3, [pc, #552]	; (8007014 <USB_ActivateEndpoint+0x2e4>)
 8006dec:	4323      	orrs	r3, r4
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	7b1b      	ldrb	r3, [r3, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 8112 	bne.w	8007020 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d067      	beq.n	8006ed4 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e04:	687c      	ldr	r4, [r7, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	441c      	add	r4, r3
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	4423      	add	r3, r4
 8006e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e1c:	461c      	mov	r4, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	88db      	ldrh	r3, [r3, #6]
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29c      	uxth	r4, r3
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d014      	beq.n	8006e6e <USB_ActivateEndpoint+0x13e>
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	b29c      	uxth	r4, r3
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	4b6c      	ldr	r3, [pc, #432]	; (8007018 <USB_ActivateEndpoint+0x2e8>)
 8006e68:	4323      	orrs	r3, r4
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	78db      	ldrb	r3, [r3, #3]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d018      	beq.n	8006ea8 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8c:	b29c      	uxth	r4, r3
 8006e8e:	f084 0320 	eor.w	r3, r4, #32
 8006e92:	b29c      	uxth	r4, r3
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	4b5d      	ldr	r3, [pc, #372]	; (8007014 <USB_ActivateEndpoint+0x2e4>)
 8006ea0:	4323      	orrs	r3, r4
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]
 8006ea6:	e22b      	b.n	8007300 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ebe:	b29c      	uxth	r4, r3
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	441a      	add	r2, r3
 8006eca:	4b52      	ldr	r3, [pc, #328]	; (8007014 <USB_ActivateEndpoint+0x2e4>)
 8006ecc:	4323      	orrs	r3, r4
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	8013      	strh	r3, [r2, #0]
 8006ed2:	e215      	b.n	8007300 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ed4:	687c      	ldr	r4, [r7, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	441c      	add	r4, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	4423      	add	r3, r4
 8006ee8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eec:	461c      	mov	r4, r3
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	88db      	ldrh	r3, [r3, #6]
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006efc:	687c      	ldr	r4, [r7, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	441c      	add	r4, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	4423      	add	r3, r4
 8006f10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f14:	461c      	mov	r4, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10e      	bne.n	8006f3c <USB_ActivateEndpoint+0x20c>
 8006f1e:	8823      	ldrh	r3, [r4, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8023      	strh	r3, [r4, #0]
 8006f2a:	8823      	ldrh	r3, [r4, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8023      	strh	r3, [r4, #0]
 8006f3a:	e02d      	b.n	8006f98 <USB_ActivateEndpoint+0x268>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b3e      	cmp	r3, #62	; 0x3e
 8006f42:	d812      	bhi.n	8006f6a <USB_ActivateEndpoint+0x23a>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <USB_ActivateEndpoint+0x22e>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	029b      	lsls	r3, r3, #10
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	8023      	strh	r3, [r4, #0]
 8006f68:	e016      	b.n	8006f98 <USB_ActivateEndpoint+0x268>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <USB_ActivateEndpoint+0x254>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	029b      	lsls	r3, r3, #10
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29c      	uxth	r4, r3
 8006fa6:	4623      	mov	r3, r4
 8006fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d014      	beq.n	8006fda <USB_ActivateEndpoint+0x2aa>
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	b29c      	uxth	r4, r3
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <USB_ActivateEndpoint+0x2ec>)
 8006fd4:	4323      	orrs	r3, r4
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff0:	b29c      	uxth	r4, r3
 8006ff2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006ff6:	b29c      	uxth	r4, r3
 8006ff8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006ffc:	b29c      	uxth	r4, r3
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <USB_ActivateEndpoint+0x2e4>)
 800700a:	4323      	orrs	r3, r4
 800700c:	b29b      	uxth	r3, r3
 800700e:	8013      	strh	r3, [r2, #0]
 8007010:	e176      	b.n	8007300 <USB_ActivateEndpoint+0x5d0>
 8007012:	bf00      	nop
 8007014:	ffff8080 	.word	0xffff8080
 8007018:	ffff80c0 	.word	0xffff80c0
 800701c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	b29c      	uxth	r4, r3
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	4b96      	ldr	r3, [pc, #600]	; (800729c <USB_ActivateEndpoint+0x56c>)
 8007044:	4323      	orrs	r3, r4
 8007046:	b29b      	uxth	r3, r3
 8007048:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800704a:	687c      	ldr	r4, [r7, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007052:	b29b      	uxth	r3, r3
 8007054:	441c      	add	r4, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	4423      	add	r3, r4
 800705e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007062:	461c      	mov	r4, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	891b      	ldrh	r3, [r3, #8]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	b29b      	uxth	r3, r3
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	b29b      	uxth	r3, r3
 8007070:	8023      	strh	r3, [r4, #0]
 8007072:	687c      	ldr	r4, [r7, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707a:	b29b      	uxth	r3, r3
 800707c:	441c      	add	r4, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4423      	add	r3, r4
 8007086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800708a:	461c      	mov	r4, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	895b      	ldrh	r3, [r3, #10]
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	b29b      	uxth	r3, r3
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	b29b      	uxth	r3, r3
 8007098:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f040 8088 	bne.w	80071b4 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29c      	uxth	r4, r3
 80070b2:	4623      	mov	r3, r4
 80070b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d014      	beq.n	80070e6 <USB_ActivateEndpoint+0x3b6>
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	b29c      	uxth	r4, r3
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	4b70      	ldr	r3, [pc, #448]	; (80072a0 <USB_ActivateEndpoint+0x570>)
 80070e0:	4323      	orrs	r3, r4
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29c      	uxth	r4, r3
 80070f4:	4623      	mov	r3, r4
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d014      	beq.n	8007128 <USB_ActivateEndpoint+0x3f8>
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007114:	b29c      	uxth	r4, r3
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	4b60      	ldr	r3, [pc, #384]	; (80072a4 <USB_ActivateEndpoint+0x574>)
 8007122:	4323      	orrs	r3, r4
 8007124:	b29b      	uxth	r3, r3
 8007126:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	b29c      	uxth	r4, r3
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	4b56      	ldr	r3, [pc, #344]	; (80072a4 <USB_ActivateEndpoint+0x574>)
 800714c:	4323      	orrs	r3, r4
 800714e:	b29b      	uxth	r3, r3
 8007150:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007168:	b29c      	uxth	r4, r3
 800716a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800716e:	b29c      	uxth	r4, r3
 8007170:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007174:	b29c      	uxth	r4, r3
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	441a      	add	r2, r3
 8007180:	4b49      	ldr	r3, [pc, #292]	; (80072a8 <USB_ActivateEndpoint+0x578>)
 8007182:	4323      	orrs	r3, r4
 8007184:	b29b      	uxth	r3, r3
 8007186:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719e:	b29c      	uxth	r4, r3
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	441a      	add	r2, r3
 80071aa:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <USB_ActivateEndpoint+0x578>)
 80071ac:	4323      	orrs	r3, r4
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]
 80071b2:	e0a5      	b.n	8007300 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29c      	uxth	r4, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d014      	beq.n	80071f6 <USB_ActivateEndpoint+0x4c6>
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	b29c      	uxth	r4, r3
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <USB_ActivateEndpoint+0x570>)
 80071f0:	4323      	orrs	r3, r4
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29c      	uxth	r4, r3
 8007204:	4623      	mov	r3, r4
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d014      	beq.n	8007238 <USB_ActivateEndpoint+0x508>
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	b29c      	uxth	r4, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <USB_ActivateEndpoint+0x574>)
 8007232:	4323      	orrs	r3, r4
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	b29c      	uxth	r4, r3
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <USB_ActivateEndpoint+0x570>)
 800725c:	4323      	orrs	r3, r4
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	78db      	ldrb	r3, [r3, #3]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d020      	beq.n	80072ac <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007280:	b29c      	uxth	r4, r3
 8007282:	f084 0320 	eor.w	r3, r4, #32
 8007286:	b29c      	uxth	r4, r3
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <USB_ActivateEndpoint+0x578>)
 8007294:	4323      	orrs	r3, r4
 8007296:	b29b      	uxth	r3, r3
 8007298:	8013      	strh	r3, [r2, #0]
 800729a:	e01c      	b.n	80072d6 <USB_ActivateEndpoint+0x5a6>
 800729c:	ffff8180 	.word	0xffff8180
 80072a0:	ffffc080 	.word	0xffffc080
 80072a4:	ffff80c0 	.word	0xffff80c0
 80072a8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c2:	b29c      	uxth	r4, r3
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <USB_ActivateEndpoint+0x5dc>)
 80072d0:	4323      	orrs	r3, r4
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ec:	b29c      	uxth	r4, r3
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	4b04      	ldr	r3, [pc, #16]	; (800730c <USB_ActivateEndpoint+0x5dc>)
 80072fa:	4323      	orrs	r3, r4
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bc90      	pop	{r4, r7}
 800730a:	4770      	bx	lr
 800730c:	ffff8080 	.word	0xffff8080

08007310 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007310:	b490      	push	{r4, r7}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	7b1b      	ldrb	r3, [r3, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d171      	bne.n	8007406 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d036      	beq.n	8007398 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29c      	uxth	r4, r3
 8007338:	4623      	mov	r3, r4
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d014      	beq.n	800736c <USB_DeactivateEndpoint+0x5c>
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007358:	b29c      	uxth	r4, r3
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	441a      	add	r2, r3
 8007364:	4b6b      	ldr	r3, [pc, #428]	; (8007514 <USB_DeactivateEndpoint+0x204>)
 8007366:	4323      	orrs	r3, r4
 8007368:	b29b      	uxth	r3, r3
 800736a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007382:	b29c      	uxth	r4, r3
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	441a      	add	r2, r3
 800738e:	4b62      	ldr	r3, [pc, #392]	; (8007518 <USB_DeactivateEndpoint+0x208>)
 8007390:	4323      	orrs	r3, r4
 8007392:	b29b      	uxth	r3, r3
 8007394:	8013      	strh	r3, [r2, #0]
 8007396:	e144      	b.n	8007622 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29c      	uxth	r4, r3
 80073a6:	4623      	mov	r3, r4
 80073a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d014      	beq.n	80073da <USB_DeactivateEndpoint+0xca>
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	b29c      	uxth	r4, r3
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	4b52      	ldr	r3, [pc, #328]	; (800751c <USB_DeactivateEndpoint+0x20c>)
 80073d4:	4323      	orrs	r3, r4
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	b29c      	uxth	r4, r3
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	4b46      	ldr	r3, [pc, #280]	; (8007518 <USB_DeactivateEndpoint+0x208>)
 80073fe:	4323      	orrs	r3, r4
 8007400:	b29b      	uxth	r3, r3
 8007402:	8013      	strh	r3, [r2, #0]
 8007404:	e10d      	b.n	8007622 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f040 8088 	bne.w	8007520 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29c      	uxth	r4, r3
 800741e:	4623      	mov	r3, r4
 8007420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d014      	beq.n	8007452 <USB_DeactivateEndpoint+0x142>
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29b      	uxth	r3, r3
 8007436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743e:	b29c      	uxth	r4, r3
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	4b34      	ldr	r3, [pc, #208]	; (800751c <USB_DeactivateEndpoint+0x20c>)
 800744c:	4323      	orrs	r3, r4
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29c      	uxth	r4, r3
 8007460:	4623      	mov	r3, r4
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d014      	beq.n	8007494 <USB_DeactivateEndpoint+0x184>
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007480:	b29c      	uxth	r4, r3
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	4b21      	ldr	r3, [pc, #132]	; (8007514 <USB_DeactivateEndpoint+0x204>)
 800748e:	4323      	orrs	r3, r4
 8007490:	b29b      	uxth	r3, r3
 8007492:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074aa:	b29c      	uxth	r4, r3
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	441a      	add	r2, r3
 80074b6:	4b17      	ldr	r3, [pc, #92]	; (8007514 <USB_DeactivateEndpoint+0x204>)
 80074b8:	4323      	orrs	r3, r4
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d4:	b29c      	uxth	r4, r3
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	441a      	add	r2, r3
 80074e0:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <USB_DeactivateEndpoint+0x208>)
 80074e2:	4323      	orrs	r3, r4
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fe:	b29c      	uxth	r4, r3
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	441a      	add	r2, r3
 800750a:	4b03      	ldr	r3, [pc, #12]	; (8007518 <USB_DeactivateEndpoint+0x208>)
 800750c:	4323      	orrs	r3, r4
 800750e:	b29b      	uxth	r3, r3
 8007510:	8013      	strh	r3, [r2, #0]
 8007512:	e086      	b.n	8007622 <USB_DeactivateEndpoint+0x312>
 8007514:	ffff80c0 	.word	0xffff80c0
 8007518:	ffff8080 	.word	0xffff8080
 800751c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29c      	uxth	r4, r3
 800752e:	4623      	mov	r3, r4
 8007530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d014      	beq.n	8007562 <USB_DeactivateEndpoint+0x252>
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	b29c      	uxth	r4, r3
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	441a      	add	r2, r3
 800755a:	4b35      	ldr	r3, [pc, #212]	; (8007630 <USB_DeactivateEndpoint+0x320>)
 800755c:	4323      	orrs	r3, r4
 800755e:	b29b      	uxth	r3, r3
 8007560:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	b29c      	uxth	r4, r3
 8007570:	4623      	mov	r3, r4
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d014      	beq.n	80075a4 <USB_DeactivateEndpoint+0x294>
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007590:	b29c      	uxth	r4, r3
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	441a      	add	r2, r3
 800759c:	4b25      	ldr	r3, [pc, #148]	; (8007634 <USB_DeactivateEndpoint+0x324>)
 800759e:	4323      	orrs	r3, r4
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	b29c      	uxth	r4, r3
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	4b1a      	ldr	r3, [pc, #104]	; (8007630 <USB_DeactivateEndpoint+0x320>)
 80075c8:	4323      	orrs	r3, r4
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e4:	b29c      	uxth	r4, r3
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	441a      	add	r2, r3
 80075f0:	4b11      	ldr	r3, [pc, #68]	; (8007638 <USB_DeactivateEndpoint+0x328>)
 80075f2:	4323      	orrs	r3, r4
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800760a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760e:	b29c      	uxth	r4, r3
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	441a      	add	r2, r3
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <USB_DeactivateEndpoint+0x328>)
 800761c:	4323      	orrs	r3, r4
 800761e:	b29b      	uxth	r3, r3
 8007620:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bc90      	pop	{r4, r7}
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	ffffc080 	.word	0xffffc080
 8007634:	ffff80c0 	.word	0xffff80c0
 8007638:	ffff8080 	.word	0xffff8080

0800763c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800763c:	b590      	push	{r4, r7, lr}
 800763e:	b08d      	sub	sp, #52	; 0x34
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b01      	cmp	r3, #1
 800764c:	f040 8160 	bne.w	8007910 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	429a      	cmp	r2, r3
 800765a:	d909      	bls.n	8007670 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	619a      	str	r2, [r3, #24]
 800766e:	e005      	b.n	800767c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2200      	movs	r2, #0
 800767a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	7b1b      	ldrb	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d119      	bne.n	80076b8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	6959      	ldr	r1, [r3, #20]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	88da      	ldrh	r2, [r3, #6]
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	b29b      	uxth	r3, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fbbd 	bl	8007e10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007696:	687c      	ldr	r4, [r7, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769e:	b29b      	uxth	r3, r3
 80076a0:	441c      	add	r4, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	4423      	add	r3, r4
 80076aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076ae:	461c      	mov	r4, r3
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8023      	strh	r3, [r4, #0]
 80076b6:	e10f      	b.n	80078d8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d065      	beq.n	800779a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076ce:	687c      	ldr	r4, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d148      	bne.n	800776a <USB_EPStartXfer+0x12e>
 80076d8:	687c      	ldr	r4, [r7, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	441c      	add	r4, r3
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4423      	add	r3, r4
 80076ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076f0:	461c      	mov	r4, r3
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10e      	bne.n	8007716 <USB_EPStartXfer+0xda>
 80076f8:	8823      	ldrh	r3, [r4, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007700:	b29b      	uxth	r3, r3
 8007702:	8023      	strh	r3, [r4, #0]
 8007704:	8823      	ldrh	r3, [r4, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007710:	b29b      	uxth	r3, r3
 8007712:	8023      	strh	r3, [r4, #0]
 8007714:	e03d      	b.n	8007792 <USB_EPStartXfer+0x156>
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	2b3e      	cmp	r3, #62	; 0x3e
 800771a:	d810      	bhi.n	800773e <USB_EPStartXfer+0x102>
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	085b      	lsrs	r3, r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <USB_EPStartXfer+0xf6>
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	3301      	adds	r3, #1
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	b29b      	uxth	r3, r3
 8007736:	029b      	lsls	r3, r3, #10
 8007738:	b29b      	uxth	r3, r3
 800773a:	8023      	strh	r3, [r4, #0]
 800773c:	e029      	b.n	8007792 <USB_EPStartXfer+0x156>
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <USB_EPStartXfer+0x118>
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	3b01      	subs	r3, #1
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	b29b      	uxth	r3, r3
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	b29b      	uxth	r3, r3
 800775c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007764:	b29b      	uxth	r3, r3
 8007766:	8023      	strh	r3, [r4, #0]
 8007768:	e013      	b.n	8007792 <USB_EPStartXfer+0x156>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10f      	bne.n	8007792 <USB_EPStartXfer+0x156>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007778:	b29b      	uxth	r3, r3
 800777a:	441c      	add	r4, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	4423      	add	r3, r4
 8007784:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	895b      	ldrh	r3, [r3, #10]
 8007796:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007798:	e063      	b.n	8007862 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d148      	bne.n	8007834 <USB_EPStartXfer+0x1f8>
 80077a2:	687c      	ldr	r4, [r7, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	441c      	add	r4, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4423      	add	r3, r4
 80077b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077ba:	461c      	mov	r4, r3
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10e      	bne.n	80077e0 <USB_EPStartXfer+0x1a4>
 80077c2:	8823      	ldrh	r3, [r4, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	8023      	strh	r3, [r4, #0]
 80077ce:	8823      	ldrh	r3, [r4, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8023      	strh	r3, [r4, #0]
 80077de:	e03d      	b.n	800785c <USB_EPStartXfer+0x220>
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	2b3e      	cmp	r3, #62	; 0x3e
 80077e4:	d810      	bhi.n	8007808 <USB_EPStartXfer+0x1cc>
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	623b      	str	r3, [r7, #32]
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <USB_EPStartXfer+0x1c0>
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	3301      	adds	r3, #1
 80077fa:	623b      	str	r3, [r7, #32]
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	029b      	lsls	r3, r3, #10
 8007802:	b29b      	uxth	r3, r3
 8007804:	8023      	strh	r3, [r4, #0]
 8007806:	e029      	b.n	800785c <USB_EPStartXfer+0x220>
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	623b      	str	r3, [r7, #32]
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <USB_EPStartXfer+0x1e2>
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	3b01      	subs	r3, #1
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	b29b      	uxth	r3, r3
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	b29b      	uxth	r3, r3
 8007826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782e:	b29b      	uxth	r3, r3
 8007830:	8023      	strh	r3, [r4, #0]
 8007832:	e013      	b.n	800785c <USB_EPStartXfer+0x220>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d10f      	bne.n	800785c <USB_EPStartXfer+0x220>
 800783c:	687c      	ldr	r4, [r7, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007844:	b29b      	uxth	r3, r3
 8007846:	441c      	add	r4, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	4423      	add	r3, r4
 8007850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007854:	461c      	mov	r4, r3
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	b29b      	uxth	r3, r3
 800785a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	891b      	ldrh	r3, [r3, #8]
 8007860:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6959      	ldr	r1, [r3, #20]
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	b29b      	uxth	r3, r3
 800786a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 facf 	bl	8007e10 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d115      	bne.n	80078a6 <USB_EPStartXfer+0x26a>
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007890:	b29c      	uxth	r4, r3
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	4b9a      	ldr	r3, [pc, #616]	; (8007b08 <USB_EPStartXfer+0x4cc>)
 800789e:	4323      	orrs	r3, r4
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	8013      	strh	r3, [r2, #0]
 80078a4:	e018      	b.n	80078d8 <USB_EPStartXfer+0x29c>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d114      	bne.n	80078d8 <USB_EPStartXfer+0x29c>
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c4:	b29c      	uxth	r4, r3
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	441a      	add	r2, r3
 80078d0:	4b8e      	ldr	r3, [pc, #568]	; (8007b0c <USB_EPStartXfer+0x4d0>)
 80078d2:	4323      	orrs	r3, r4
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ee:	b29c      	uxth	r4, r3
 80078f0:	f084 0310 	eor.w	r3, r4, #16
 80078f4:	b29c      	uxth	r4, r3
 80078f6:	f084 0320 	eor.w	r3, r4, #32
 80078fa:	b29c      	uxth	r4, r3
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	441a      	add	r2, r3
 8007906:	4b82      	ldr	r3, [pc, #520]	; (8007b10 <USB_EPStartXfer+0x4d4>)
 8007908:	4323      	orrs	r3, r4
 800790a:	b29b      	uxth	r3, r3
 800790c:	8013      	strh	r3, [r2, #0]
 800790e:	e146      	b.n	8007b9e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	699a      	ldr	r2, [r3, #24]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	429a      	cmp	r2, r3
 800791a:	d909      	bls.n	8007930 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	619a      	str	r2, [r3, #24]
 800792e:	e005      	b.n	800793c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2200      	movs	r2, #0
 800793a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	7b1b      	ldrb	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d148      	bne.n	80079d6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007944:	687c      	ldr	r4, [r7, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	441c      	add	r4, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	4423      	add	r3, r4
 8007958:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800795c:	461c      	mov	r4, r3
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10e      	bne.n	8007982 <USB_EPStartXfer+0x346>
 8007964:	8823      	ldrh	r3, [r4, #0]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800796c:	b29b      	uxth	r3, r3
 800796e:	8023      	strh	r3, [r4, #0]
 8007970:	8823      	ldrh	r3, [r4, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797c:	b29b      	uxth	r3, r3
 800797e:	8023      	strh	r3, [r4, #0]
 8007980:	e0f2      	b.n	8007b68 <USB_EPStartXfer+0x52c>
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	2b3e      	cmp	r3, #62	; 0x3e
 8007986:	d810      	bhi.n	80079aa <USB_EPStartXfer+0x36e>
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <USB_EPStartXfer+0x362>
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	3301      	adds	r3, #1
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	029b      	lsls	r3, r3, #10
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	8023      	strh	r3, [r4, #0]
 80079a8:	e0de      	b.n	8007b68 <USB_EPStartXfer+0x52c>
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	095b      	lsrs	r3, r3, #5
 80079ae:	61fb      	str	r3, [r7, #28]
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <USB_EPStartXfer+0x384>
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	3b01      	subs	r3, #1
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	029b      	lsls	r3, r3, #10
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	8023      	strh	r3, [r4, #0]
 80079d4:	e0c8      	b.n	8007b68 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d148      	bne.n	8007a70 <USB_EPStartXfer+0x434>
 80079de:	687c      	ldr	r4, [r7, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	441c      	add	r4, r3
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4423      	add	r3, r4
 80079f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079f6:	461c      	mov	r4, r3
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10e      	bne.n	8007a1c <USB_EPStartXfer+0x3e0>
 80079fe:	8823      	ldrh	r3, [r4, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	8023      	strh	r3, [r4, #0]
 8007a0a:	8823      	ldrh	r3, [r4, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	8023      	strh	r3, [r4, #0]
 8007a1a:	e03d      	b.n	8007a98 <USB_EPStartXfer+0x45c>
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a20:	d810      	bhi.n	8007a44 <USB_EPStartXfer+0x408>
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <USB_EPStartXfer+0x3fc>
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	029b      	lsls	r3, r3, #10
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8023      	strh	r3, [r4, #0]
 8007a42:	e029      	b.n	8007a98 <USB_EPStartXfer+0x45c>
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <USB_EPStartXfer+0x41e>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	029b      	lsls	r3, r3, #10
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8023      	strh	r3, [r4, #0]
 8007a6e:	e013      	b.n	8007a98 <USB_EPStartXfer+0x45c>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d10f      	bne.n	8007a98 <USB_EPStartXfer+0x45c>
 8007a78:	687c      	ldr	r4, [r7, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	441c      	add	r4, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	4423      	add	r3, r4
 8007a8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a90:	461c      	mov	r4, r3
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	8023      	strh	r3, [r4, #0]
 8007a98:	687c      	ldr	r4, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d14e      	bne.n	8007b40 <USB_EPStartXfer+0x504>
 8007aa2:	687c      	ldr	r4, [r7, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	441c      	add	r4, r3
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4423      	add	r3, r4
 8007ab6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007aba:	461c      	mov	r4, r3
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10e      	bne.n	8007ae0 <USB_EPStartXfer+0x4a4>
 8007ac2:	8823      	ldrh	r3, [r4, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8023      	strh	r3, [r4, #0]
 8007ace:	8823      	ldrh	r3, [r4, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	8023      	strh	r3, [r4, #0]
 8007ade:	e043      	b.n	8007b68 <USB_EPStartXfer+0x52c>
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ae4:	d816      	bhi.n	8007b14 <USB_EPStartXfer+0x4d8>
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	085b      	lsrs	r3, r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <USB_EPStartXfer+0x4c0>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	3301      	adds	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	029b      	lsls	r3, r3, #10
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8023      	strh	r3, [r4, #0]
 8007b06:	e02f      	b.n	8007b68 <USB_EPStartXfer+0x52c>
 8007b08:	ffff80c0 	.word	0xffff80c0
 8007b0c:	ffffc080 	.word	0xffffc080
 8007b10:	ffff8080 	.word	0xffff8080
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <USB_EPStartXfer+0x4ee>
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	8023      	strh	r3, [r4, #0]
 8007b3e:	e013      	b.n	8007b68 <USB_EPStartXfer+0x52c>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	785b      	ldrb	r3, [r3, #1]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10f      	bne.n	8007b68 <USB_EPStartXfer+0x52c>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	441c      	add	r4, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4423      	add	r3, r4
 8007b5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b5e:	613b      	str	r3, [r7, #16]
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	b29c      	uxth	r4, r3
 8007b80:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b84:	b29c      	uxth	r4, r3
 8007b86:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b8a:	b29c      	uxth	r4, r3
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <USB_EPStartXfer+0x56c>)
 8007b98:	4323      	orrs	r3, r4
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3734      	adds	r7, #52	; 0x34
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd90      	pop	{r4, r7, pc}
 8007ba8:	ffff8080 	.word	0xffff8080

08007bac <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bac:	b490      	push	{r4, r7}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d018      	beq.n	8007bf0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd4:	b29c      	uxth	r4, r3
 8007bd6:	f084 0310 	eor.w	r3, r4, #16
 8007bda:	b29c      	uxth	r4, r3
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	4b11      	ldr	r3, [pc, #68]	; (8007c2c <USB_EPSetStall+0x80>)
 8007be8:	4323      	orrs	r3, r4
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	8013      	strh	r3, [r2, #0]
 8007bee:	e017      	b.n	8007c20 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	b29c      	uxth	r4, r3
 8007c08:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007c0c:	b29c      	uxth	r4, r3
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <USB_EPSetStall+0x80>)
 8007c1a:	4323      	orrs	r3, r4
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc90      	pop	{r4, r7}
 8007c2a:	4770      	bx	lr
 8007c2c:	ffff8080 	.word	0xffff8080

08007c30 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c30:	b490      	push	{r4, r7}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	7b1b      	ldrb	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d17d      	bne.n	8007d3e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d03d      	beq.n	8007cc6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29c      	uxth	r4, r3
 8007c58:	4623      	mov	r3, r4
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d014      	beq.n	8007c8c <USB_EPClearStall+0x5c>
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c78:	b29c      	uxth	r4, r3
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	441a      	add	r2, r3
 8007c84:	4b31      	ldr	r3, [pc, #196]	; (8007d4c <USB_EPClearStall+0x11c>)
 8007c86:	4323      	orrs	r3, r4
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	78db      	ldrb	r3, [r3, #3]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d054      	beq.n	8007d3e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007caa:	b29c      	uxth	r4, r3
 8007cac:	f084 0320 	eor.w	r3, r4, #32
 8007cb0:	b29c      	uxth	r4, r3
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	441a      	add	r2, r3
 8007cbc:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <USB_EPClearStall+0x120>)
 8007cbe:	4323      	orrs	r3, r4
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	8013      	strh	r3, [r2, #0]
 8007cc4:	e03b      	b.n	8007d3e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29c      	uxth	r4, r3
 8007cd4:	4623      	mov	r3, r4
 8007cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d014      	beq.n	8007d08 <USB_EPClearStall+0xd8>
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf4:	b29c      	uxth	r4, r3
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	441a      	add	r2, r3
 8007d00:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <USB_EPClearStall+0x124>)
 8007d02:	4323      	orrs	r3, r4
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	b29c      	uxth	r4, r3
 8007d20:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007d24:	b29c      	uxth	r4, r3
 8007d26:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007d2a:	b29c      	uxth	r4, r3
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	441a      	add	r2, r3
 8007d36:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <USB_EPClearStall+0x120>)
 8007d38:	4323      	orrs	r3, r4
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc90      	pop	{r4, r7}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	ffff80c0 	.word	0xffff80c0
 8007d50:	ffff8080 	.word	0xffff8080
 8007d54:	ffffc080 	.word	0xffffc080

08007d58 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2280      	movs	r2, #128	; 0x80
 8007d6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007dea:	68fb      	ldr	r3, [r7, #12]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b08d      	sub	sp, #52	; 0x34
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	460b      	mov	r3, r1
 8007e20:	80fb      	strh	r3, [r7, #6]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e26:	88bb      	ldrh	r3, [r7, #4]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e46:	e01b      	b.n	8007e80 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	3301      	adds	r3, #1
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	021b      	lsls	r3, r3, #8
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	3302      	adds	r3, #2
 8007e72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	3301      	adds	r3, #1
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e0      	bne.n	8007e48 <USB_WritePMA+0x38>
  }
}
 8007e86:	bf00      	nop
 8007e88:	3734      	adds	r7, #52	; 0x34
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b08b      	sub	sp, #44	; 0x2c
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	80fb      	strh	r3, [r7, #6]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ea8:	88bb      	ldrh	r3, [r7, #4]
 8007eaa:	085b      	lsrs	r3, r3, #1
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007eb8:	88fa      	ldrh	r2, [r7, #6]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ec2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec8:	e018      	b.n	8007efc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e3      	bne.n	8007eca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007f02:	88bb      	ldrh	r3, [r7, #4]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f1e:	bf00      	nop
 8007f20:	372c      	adds	r7, #44	; 0x2c
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7c1b      	ldrb	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d115      	bne.n	8007f6e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f46:	2202      	movs	r2, #2
 8007f48:	2181      	movs	r1, #129	; 0x81
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f005 fb78 	bl	800d640 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f005 fb6e 	bl	800d640 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007f6c:	e012      	b.n	8007f94 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f6e:	2340      	movs	r3, #64	; 0x40
 8007f70:	2202      	movs	r2, #2
 8007f72:	2181      	movs	r1, #129	; 0x81
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f005 fb63 	bl	800d640 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f80:	2340      	movs	r3, #64	; 0x40
 8007f82:	2202      	movs	r2, #2
 8007f84:	2101      	movs	r1, #1
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f005 fb5a 	bl	800d640 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f94:	2308      	movs	r3, #8
 8007f96:	2203      	movs	r2, #3
 8007f98:	2182      	movs	r1, #130	; 0x82
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f005 fb50 	bl	800d640 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fa6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007faa:	f005 fd43 	bl	800da34 <USBD_static_malloc>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
 8007fc4:	e026      	b.n	8008014 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	7c1b      	ldrb	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d109      	bne.n	8008004 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f005 fc95 	bl	800d92c <USBD_LL_PrepareReceive>
 8008002:	e007      	b.n	8008014 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	2101      	movs	r1, #1
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f005 fc8c 	bl	800d92c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800802e:	2181      	movs	r1, #129	; 0x81
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f005 fb43 	bl	800d6bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800803c:	2101      	movs	r1, #1
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f005 fb3c 	bl	800d6bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800804c:	2182      	movs	r1, #130	; 0x82
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f005 fb34 	bl	800d6bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00e      	beq.n	8008082 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008074:	4618      	mov	r0, r3
 8008076:	f005 fceb 	bl	800da50 <USBD_static_free>
    pdev->pClassData = NULL;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d039      	beq.n	800812a <USBD_CDC_Setup+0x9e>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d17c      	bne.n	80081b4 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	88db      	ldrh	r3, [r3, #6]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d029      	beq.n	8008116 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b25b      	sxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	da11      	bge.n	80080f0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80080d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	88d2      	ldrh	r2, [r2, #6]
 80080de:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080e0:	6939      	ldr	r1, [r7, #16]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	88db      	ldrh	r3, [r3, #6]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fa2b 	bl	8009544 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80080ee:	e068      	b.n	80081c2 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	785a      	ldrb	r2, [r3, #1]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	88db      	ldrh	r3, [r3, #6]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008106:	6939      	ldr	r1, [r7, #16]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	88db      	ldrh	r3, [r3, #6]
 800810c:	461a      	mov	r2, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fa46 	bl	80095a0 <USBD_CtlPrepareRx>
      break;
 8008114:	e055      	b.n	80081c2 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	7850      	ldrb	r0, [r2, #1]
 8008122:	2200      	movs	r2, #0
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	4798      	blx	r3
      break;
 8008128:	e04b      	b.n	80081c2 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	2b0a      	cmp	r3, #10
 8008130:	d017      	beq.n	8008162 <USBD_CDC_Setup+0xd6>
 8008132:	2b0b      	cmp	r3, #11
 8008134:	d029      	beq.n	800818a <USBD_CDC_Setup+0xfe>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d133      	bne.n	80081a2 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008140:	2b03      	cmp	r3, #3
 8008142:	d107      	bne.n	8008154 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008144:	f107 030c 	add.w	r3, r7, #12
 8008148:	2202      	movs	r2, #2
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 f9f9 	bl	8009544 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008152:	e02e      	b.n	80081b2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 f989 	bl	800946e <USBD_CtlError>
            ret = USBD_FAIL;
 800815c:	2302      	movs	r3, #2
 800815e:	75fb      	strb	r3, [r7, #23]
          break;
 8008160:	e027      	b.n	80081b2 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008168:	2b03      	cmp	r3, #3
 800816a:	d107      	bne.n	800817c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800816c:	f107 030f 	add.w	r3, r7, #15
 8008170:	2201      	movs	r2, #1
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 f9e5 	bl	8009544 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800817a:	e01a      	b.n	80081b2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f975 	bl	800946e <USBD_CtlError>
            ret = USBD_FAIL;
 8008184:	2302      	movs	r3, #2
 8008186:	75fb      	strb	r3, [r7, #23]
          break;
 8008188:	e013      	b.n	80081b2 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	2b03      	cmp	r3, #3
 8008192:	d00d      	beq.n	80081b0 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f969 	bl	800946e <USBD_CtlError>
            ret = USBD_FAIL;
 800819c:	2302      	movs	r3, #2
 800819e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081a0:	e006      	b.n	80081b0 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f962 	bl	800946e <USBD_CtlError>
          ret = USBD_FAIL;
 80081aa:	2302      	movs	r3, #2
 80081ac:	75fb      	strb	r3, [r7, #23]
          break;
 80081ae:	e000      	b.n	80081b2 <USBD_CDC_Setup+0x126>
          break;
 80081b0:	bf00      	nop
      }
      break;
 80081b2:	e006      	b.n	80081c2 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 f959 	bl	800946e <USBD_CtlError>
      ret = USBD_FAIL;
 80081bc:	2302      	movs	r3, #2
 80081be:	75fb      	strb	r3, [r7, #23]
      break;
 80081c0:	bf00      	nop
  }

  return ret;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d037      	beq.n	8008262 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	331c      	adds	r3, #28
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d026      	beq.n	8008256 <USBD_CDC_DataIn+0x8a>
 8008208:	78fa      	ldrb	r2, [r7, #3]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	331c      	adds	r3, #28
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	0152      	lsls	r2, r2, #5
 8008220:	440a      	add	r2, r1
 8008222:	3238      	adds	r2, #56	; 0x38
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	fbb3 f1f2 	udiv	r1, r3, r2
 800822a:	fb02 f201 	mul.w	r2, r2, r1
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d110      	bne.n	8008256 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	331c      	adds	r3, #28
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008248:	78f9      	ldrb	r1, [r7, #3]
 800824a:	2300      	movs	r3, #0
 800824c:	2200      	movs	r2, #0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f005 fb32 	bl	800d8b8 <USBD_LL_Transmit>
 8008254:	e003      	b.n	800825e <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	e000      	b.n	8008264 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008262:	2302      	movs	r3, #2
  }
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f005 fb8b 	bl	800d9a0 <USBD_LL_GetRxDataSize>
 800828a:	4602      	mov	r2, r0
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00d      	beq.n	80082b8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082b0:	4611      	mov	r1, r2
 80082b2:	4798      	blx	r3

    return USBD_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e000      	b.n	80082ba <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80082b8:	2302      	movs	r3, #2
  }
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d015      	beq.n	8008308 <USBD_CDC_EP0_RxReady+0x46>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082e2:	2bff      	cmp	r3, #255	; 0xff
 80082e4:	d010      	beq.n	8008308 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80082f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082fc:	b292      	uxth	r2, r2
 80082fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	22ff      	movs	r2, #255	; 0xff
 8008304:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2243      	movs	r2, #67	; 0x43
 8008320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008322:	4b03      	ldr	r3, [pc, #12]	; (8008330 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	20000094 	.word	0x20000094

08008334 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2243      	movs	r2, #67	; 0x43
 8008340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008342:	4b03      	ldr	r3, [pc, #12]	; (8008350 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	20000050 	.word	0x20000050

08008354 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2243      	movs	r2, #67	; 0x43
 8008360:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008362:	4b03      	ldr	r3, [pc, #12]	; (8008370 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	200000d8 	.word	0x200000d8

08008374 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	220a      	movs	r2, #10
 8008380:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008382:	4b03      	ldr	r3, [pc, #12]	; (8008390 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	2000000c 	.word	0x2000000c

08008394 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b087      	sub	sp, #28
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	4613      	mov	r3, r2
 80083ce:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083e0:	88fa      	ldrh	r2, [r7, #6]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01c      	beq.n	8008472 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800843e:	2b00      	cmp	r3, #0
 8008440:	d115      	bne.n	800846e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008460:	b29b      	uxth	r3, r3
 8008462:	2181      	movs	r1, #129	; 0x81
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f005 fa27 	bl	800d8b8 <USBD_LL_Transmit>

      return USBD_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e002      	b.n	8008474 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008472:	2302      	movs	r3, #2
  }
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d017      	beq.n	80084c6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7c1b      	ldrb	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084a8:	2101      	movs	r1, #1
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f005 fa3e 	bl	800d92c <USBD_LL_PrepareReceive>
 80084b0:	e007      	b.n	80084c2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084b8:	2340      	movs	r3, #64	; 0x40
 80084ba:	2101      	movs	r1, #1
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f005 fa35 	bl	800d92c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e000      	b.n	80084c8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80084c6:	2302      	movs	r3, #2
  }
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084e4:	2302      	movs	r3, #2
 80084e6:	e01a      	b.n	800851e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	79fa      	ldrb	r2, [r7, #7]
 8008514:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f004 fffe 	bl	800d518 <USBD_LL_Init>

  return USBD_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008526:	b480      	push	{r7}
 8008528:	b085      	sub	sp, #20
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d006      	beq.n	8008548 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
 8008546:	e001      	b.n	800854c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008548:	2302      	movs	r3, #2
 800854a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f005 f83a 	bl	800d5dc <USBD_LL_Start>

  return USBD_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008594:	2302      	movs	r3, #2
 8008596:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	4611      	mov	r1, r2
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	78fa      	ldrb	r2, [r7, #3]
 80085dc:	4611      	mov	r1, r2
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3

  return USBD_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fef8 	bl	80093f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008612:	461a      	mov	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008620:	f003 031f 	and.w	r3, r3, #31
 8008624:	2b01      	cmp	r3, #1
 8008626:	d00c      	beq.n	8008642 <USBD_LL_SetupStage+0x56>
 8008628:	2b01      	cmp	r3, #1
 800862a:	d302      	bcc.n	8008632 <USBD_LL_SetupStage+0x46>
 800862c:	2b02      	cmp	r3, #2
 800862e:	d010      	beq.n	8008652 <USBD_LL_SetupStage+0x66>
 8008630:	e017      	b.n	8008662 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9ce 	bl	80089dc <USBD_StdDevReq>
      break;
 8008640:	e01a      	b.n	8008678 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa30 	bl	8008ab0 <USBD_StdItfReq>
      break;
 8008650:	e012      	b.n	8008678 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa6e 	bl	8008b3c <USBD_StdEPReq>
      break;
 8008660:	e00a      	b.n	8008678 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800866c:	b2db      	uxtb	r3, r3
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f005 f859 	bl	800d728 <USBD_LL_StallEP>
      break;
 8008676:	bf00      	nop
  }

  return USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b086      	sub	sp, #24
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	460b      	mov	r3, r1
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d14b      	bne.n	800872e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800869c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d134      	bne.n	8008712 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d919      	bls.n	80086e8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	1ad2      	subs	r2, r2, r3
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d203      	bcs.n	80086d6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	e002      	b.n	80086dc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086da:	b29b      	uxth	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 ff7b 	bl	80095dc <USBD_CtlContinueRx>
 80086e6:	e038      	b.n	800875a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d105      	bne.n	800870a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 ff78 	bl	8009600 <USBD_CtlSendStatus>
 8008710:	e023      	b.n	800875a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008718:	2b05      	cmp	r3, #5
 800871a:	d11e      	bne.n	800875a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008724:	2100      	movs	r1, #0
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f004 fffe 	bl	800d728 <USBD_LL_StallEP>
 800872c:	e015      	b.n	800875a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00d      	beq.n	8008756 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008740:	2b03      	cmp	r3, #3
 8008742:	d108      	bne.n	8008756 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	7afa      	ldrb	r2, [r7, #11]
 800874e:	4611      	mov	r1, r2
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	4798      	blx	r3
 8008754:	e001      	b.n	800875a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	e000      	b.n	800875c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	460b      	mov	r3, r1
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d17f      	bne.n	8008878 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3314      	adds	r3, #20
 800877c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008784:	2b02      	cmp	r3, #2
 8008786:	d15c      	bne.n	8008842 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	429a      	cmp	r2, r3
 8008792:	d915      	bls.n	80087c0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	1ad2      	subs	r2, r2, r3
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fee5 	bl	800957c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f005 f8b7 	bl	800d92c <USBD_LL_PrepareReceive>
 80087be:	e04e      	b.n	800885e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	6912      	ldr	r2, [r2, #16]
 80087c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80087cc:	fb02 f201 	mul.w	r2, r2, r1
 80087d0:	1a9b      	subs	r3, r3, r2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d11c      	bne.n	8008810 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087de:	429a      	cmp	r2, r3
 80087e0:	d316      	bcc.n	8008810 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	689a      	ldr	r2, [r3, #8]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d20f      	bcs.n	8008810 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087f0:	2200      	movs	r2, #0
 80087f2:	2100      	movs	r1, #0
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fec1 	bl	800957c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008802:	2300      	movs	r3, #0
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f005 f88f 	bl	800d92c <USBD_LL_PrepareReceive>
 800880e:	e026      	b.n	800885e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008822:	2b03      	cmp	r3, #3
 8008824:	d105      	bne.n	8008832 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008832:	2180      	movs	r1, #128	; 0x80
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f004 ff77 	bl	800d728 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 fef3 	bl	8009626 <USBD_CtlReceiveStatus>
 8008840:	e00d      	b.n	800885e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008848:	2b04      	cmp	r3, #4
 800884a:	d004      	beq.n	8008856 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008856:	2180      	movs	r1, #128	; 0x80
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f004 ff65 	bl	800d728 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d11d      	bne.n	80088a4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff fe82 	bl	8008572 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008876:	e015      	b.n	80088a4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00d      	beq.n	80088a0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800888a:	2b03      	cmp	r3, #3
 800888c:	d108      	bne.n	80088a0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	7afa      	ldrb	r2, [r7, #11]
 8008898:	4611      	mov	r1, r2
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	4798      	blx	r3
 800889e:	e001      	b.n	80088a4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088a0:	2302      	movs	r3, #2
 80088a2:	e000      	b.n	80088a6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088b6:	2340      	movs	r3, #64	; 0x40
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f004 febf 	bl	800d640 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2240      	movs	r2, #64	; 0x40
 80088ce:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088d2:	2340      	movs	r3, #64	; 0x40
 80088d4:	2200      	movs	r2, #0
 80088d6:	2180      	movs	r1, #128	; 0x80
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f004 feb1 	bl	800d640 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2240      	movs	r2, #64	; 0x40
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6852      	ldr	r2, [r2, #4]
 800891e:	b2d2      	uxtb	r2, r2
 8008920:	4611      	mov	r1, r2
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	4798      	blx	r3
  }

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2204      	movs	r2, #4
 8008968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008988:	2b04      	cmp	r3, #4
 800898a:	d105      	bne.n	8008998 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d10b      	bne.n	80089d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	d004      	beq.n	8008a00 <USBD_StdDevReq+0x24>
 80089f6:	2b40      	cmp	r3, #64	; 0x40
 80089f8:	d002      	beq.n	8008a00 <USBD_StdDevReq+0x24>
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d008      	beq.n	8008a10 <USBD_StdDevReq+0x34>
 80089fe:	e04c      	b.n	8008a9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
      break;
 8008a0e:	e049      	b.n	8008aa4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	785b      	ldrb	r3, [r3, #1]
 8008a14:	2b09      	cmp	r3, #9
 8008a16:	d83a      	bhi.n	8008a8e <USBD_StdDevReq+0xb2>
 8008a18:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <USBD_StdDevReq+0x44>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a71 	.word	0x08008a71
 8008a24:	08008a85 	.word	0x08008a85
 8008a28:	08008a8f 	.word	0x08008a8f
 8008a2c:	08008a7b 	.word	0x08008a7b
 8008a30:	08008a8f 	.word	0x08008a8f
 8008a34:	08008a53 	.word	0x08008a53
 8008a38:	08008a49 	.word	0x08008a49
 8008a3c:	08008a8f 	.word	0x08008a8f
 8008a40:	08008a67 	.word	0x08008a67
 8008a44:	08008a5d 	.word	0x08008a5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f9d4 	bl	8008df8 <USBD_GetDescriptor>
          break;
 8008a50:	e022      	b.n	8008a98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fb61 	bl	800911c <USBD_SetAddress>
          break;
 8008a5a:	e01d      	b.n	8008a98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fb9e 	bl	80091a0 <USBD_SetConfig>
          break;
 8008a64:	e018      	b.n	8008a98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc27 	bl	80092bc <USBD_GetConfig>
          break;
 8008a6e:	e013      	b.n	8008a98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fc56 	bl	8009324 <USBD_GetStatus>
          break;
 8008a78:	e00e      	b.n	8008a98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fc84 	bl	800938a <USBD_SetFeature>
          break;
 8008a82:	e009      	b.n	8008a98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fc93 	bl	80093b2 <USBD_ClrFeature>
          break;
 8008a8c:	e004      	b.n	8008a98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fcec 	bl	800946e <USBD_CtlError>
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fce6 	bl	800946e <USBD_CtlError>
      break;
 8008aa2:	bf00      	nop
  }

  return ret;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop

08008ab0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d003      	beq.n	8008ad2 <USBD_StdItfReq+0x22>
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	d001      	beq.n	8008ad2 <USBD_StdItfReq+0x22>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d12a      	bne.n	8008b28 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d81d      	bhi.n	8008b1a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	889b      	ldrh	r3, [r3, #4]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d813      	bhi.n	8008b10 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	88db      	ldrh	r3, [r3, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d110      	bne.n	8008b24 <USBD_StdItfReq+0x74>
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10d      	bne.n	8008b24 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fd79 	bl	8009600 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b0e:	e009      	b.n	8008b24 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fcab 	bl	800946e <USBD_CtlError>
          break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fca6 	bl	800946e <USBD_CtlError>
          break;
 8008b22:	e000      	b.n	8008b26 <USBD_StdItfReq+0x76>
          break;
 8008b24:	bf00      	nop
      }
      break;
 8008b26:	e004      	b.n	8008b32 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fc9f 	bl	800946e <USBD_CtlError>
      break;
 8008b30:	bf00      	nop
  }

  return USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	889b      	ldrh	r3, [r3, #4]
 8008b4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d004      	beq.n	8008b66 <USBD_StdEPReq+0x2a>
 8008b5c:	2b40      	cmp	r3, #64	; 0x40
 8008b5e:	d002      	beq.n	8008b66 <USBD_StdEPReq+0x2a>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d008      	beq.n	8008b76 <USBD_StdEPReq+0x3a>
 8008b64:	e13d      	b.n	8008de2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	4798      	blx	r3
      break;
 8008b74:	e13a      	b.n	8008dec <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d10a      	bne.n	8008b98 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	4798      	blx	r3
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	e12a      	b.n	8008dee <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	785b      	ldrb	r3, [r3, #1]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d03e      	beq.n	8008c1e <USBD_StdEPReq+0xe2>
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d002      	beq.n	8008baa <USBD_StdEPReq+0x6e>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d070      	beq.n	8008c8a <USBD_StdEPReq+0x14e>
 8008ba8:	e115      	b.n	8008dd6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d002      	beq.n	8008bba <USBD_StdEPReq+0x7e>
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d015      	beq.n	8008be4 <USBD_StdEPReq+0xa8>
 8008bb8:	e02b      	b.n	8008c12 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00c      	beq.n	8008bda <USBD_StdEPReq+0x9e>
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d009      	beq.n	8008bda <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f004 fdac 	bl	800d728 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bd0:	2180      	movs	r1, #128	; 0x80
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f004 fda8 	bl	800d728 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bd8:	e020      	b.n	8008c1c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fc46 	bl	800946e <USBD_CtlError>
              break;
 8008be2:	e01b      	b.n	8008c1c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	885b      	ldrh	r3, [r3, #2]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10e      	bne.n	8008c0a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00b      	beq.n	8008c0a <USBD_StdEPReq+0xce>
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	2b80      	cmp	r3, #128	; 0x80
 8008bf6:	d008      	beq.n	8008c0a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	88db      	ldrh	r3, [r3, #6]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f004 fd8f 	bl	800d728 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fcf8 	bl	8009600 <USBD_CtlSendStatus>

              break;
 8008c10:	e004      	b.n	8008c1c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fc2a 	bl	800946e <USBD_CtlError>
              break;
 8008c1a:	bf00      	nop
          }
          break;
 8008c1c:	e0e0      	b.n	8008de0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d002      	beq.n	8008c2e <USBD_StdEPReq+0xf2>
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d015      	beq.n	8008c58 <USBD_StdEPReq+0x11c>
 8008c2c:	e026      	b.n	8008c7c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00c      	beq.n	8008c4e <USBD_StdEPReq+0x112>
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b80      	cmp	r3, #128	; 0x80
 8008c38:	d009      	beq.n	8008c4e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f004 fd72 	bl	800d728 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c44:	2180      	movs	r1, #128	; 0x80
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f004 fd6e 	bl	800d728 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c4c:	e01c      	b.n	8008c88 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fc0c 	bl	800946e <USBD_CtlError>
              break;
 8008c56:	e017      	b.n	8008c88 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	885b      	ldrh	r3, [r3, #2]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d112      	bne.n	8008c86 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d004      	beq.n	8008c74 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f004 fd90 	bl	800d794 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fcc3 	bl	8009600 <USBD_CtlSendStatus>
              }
              break;
 8008c7a:	e004      	b.n	8008c86 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fbf5 	bl	800946e <USBD_CtlError>
              break;
 8008c84:	e000      	b.n	8008c88 <USBD_StdEPReq+0x14c>
              break;
 8008c86:	bf00      	nop
          }
          break;
 8008c88:	e0aa      	b.n	8008de0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d002      	beq.n	8008c9a <USBD_StdEPReq+0x15e>
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d032      	beq.n	8008cfe <USBD_StdEPReq+0x1c2>
 8008c98:	e097      	b.n	8008dca <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <USBD_StdEPReq+0x174>
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d004      	beq.n	8008cb0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fbe0 	bl	800946e <USBD_CtlError>
                break;
 8008cae:	e091      	b.n	8008dd4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	da0b      	bge.n	8008cd0 <USBD_StdEPReq+0x194>
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	3310      	adds	r3, #16
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4413      	add	r3, r2
 8008ccc:	3304      	adds	r3, #4
 8008cce:	e00b      	b.n	8008ce8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fc24 	bl	8009544 <USBD_CtlSendData>
              break;
 8008cfc:	e06a      	b.n	8008dd4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da11      	bge.n	8008d2a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	f003 020f 	and.w	r2, r3, #15
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	3318      	adds	r3, #24
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d117      	bne.n	8008d50 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fba3 	bl	800946e <USBD_CtlError>
                  break;
 8008d28:	e054      	b.n	8008dd4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	f003 020f 	and.w	r2, r3, #15
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fb90 	bl	800946e <USBD_CtlError>
                  break;
 8008d4e:	e041      	b.n	8008dd4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da0b      	bge.n	8008d70 <USBD_StdEPReq+0x234>
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	3310      	adds	r3, #16
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	e00b      	b.n	8008d88 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	4413      	add	r3, r2
 8008d86:	3304      	adds	r3, #4
 8008d88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <USBD_StdEPReq+0x25a>
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	2b80      	cmp	r3, #128	; 0x80
 8008d94:	d103      	bne.n	8008d9e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e00e      	b.n	8008dbc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f004 fd2c 	bl	800d800 <USBD_LL_IsStallEP>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2201      	movs	r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e002      	b.n	8008dbc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fbbe 	bl	8009544 <USBD_CtlSendData>
              break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fb4e 	bl	800946e <USBD_CtlError>
              break;
 8008dd2:	bf00      	nop
          }
          break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb48 	bl	800946e <USBD_CtlError>
          break;
 8008dde:	bf00      	nop
      }
      break;
 8008de0:	e004      	b.n	8008dec <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fb42 	bl	800946e <USBD_CtlError>
      break;
 8008dea:	bf00      	nop
  }

  return ret;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	2b0e      	cmp	r3, #14
 8008e1a:	f200 8152 	bhi.w	80090c2 <USBD_GetDescriptor+0x2ca>
 8008e1e:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBD_GetDescriptor+0x2c>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e95 	.word	0x08008e95
 8008e28:	08008ead 	.word	0x08008ead
 8008e2c:	08008eed 	.word	0x08008eed
 8008e30:	080090c3 	.word	0x080090c3
 8008e34:	080090c3 	.word	0x080090c3
 8008e38:	08009063 	.word	0x08009063
 8008e3c:	0800908f 	.word	0x0800908f
 8008e40:	080090c3 	.word	0x080090c3
 8008e44:	080090c3 	.word	0x080090c3
 8008e48:	080090c3 	.word	0x080090c3
 8008e4c:	080090c3 	.word	0x080090c3
 8008e50:	080090c3 	.word	0x080090c3
 8008e54:	080090c3 	.word	0x080090c3
 8008e58:	080090c3 	.word	0x080090c3
 8008e5c:	08008e61 	.word	0x08008e61
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7c12      	ldrb	r2, [r2, #16]
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e82:	e126      	b.n	80090d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 faf1 	bl	800946e <USBD_CtlError>
        err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
      break;
 8008e92:	e11e      	b.n	80090d2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	7c12      	ldrb	r2, [r2, #16]
 8008ea0:	f107 0108 	add.w	r1, r7, #8
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4798      	blx	r3
 8008ea8:	60f8      	str	r0, [r7, #12]
      break;
 8008eaa:	e112      	b.n	80090d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	7c1b      	ldrb	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10d      	bne.n	8008ed0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	f107 0208 	add.w	r2, r7, #8
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
 8008ec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	2202      	movs	r2, #2
 8008ecc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ece:	e100      	b.n	80090d2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	f107 0208 	add.w	r2, r7, #8
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
 8008ee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	701a      	strb	r2, [r3, #0]
      break;
 8008eea:	e0f2      	b.n	80090d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	885b      	ldrh	r3, [r3, #2]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	f200 80ac 	bhi.w	8009050 <USBD_GetDescriptor+0x258>
 8008ef8:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBD_GetDescriptor+0x108>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f19 	.word	0x08008f19
 8008f04:	08008f4d 	.word	0x08008f4d
 8008f08:	08008f81 	.word	0x08008f81
 8008f0c:	08008fb5 	.word	0x08008fb5
 8008f10:	08008fe9 	.word	0x08008fe9
 8008f14:	0800901d 	.word	0x0800901d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7c12      	ldrb	r2, [r2, #16]
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
 8008f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3a:	e091      	b.n	8009060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa95 	bl	800946e <USBD_CtlError>
            err++;
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	3301      	adds	r3, #1
 8008f48:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4a:	e089      	b.n	8009060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f6e:	e077      	b.n	8009060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa7b 	bl	800946e <USBD_CtlError>
            err++;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f7e:	e06f      	b.n	8009060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	7c12      	ldrb	r2, [r2, #16]
 8008f98:	f107 0108 	add.w	r1, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fa2:	e05d      	b.n	8009060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa61 	bl	800946e <USBD_CtlError>
            err++;
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fb2:	e055      	b.n	8009060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	7c12      	ldrb	r2, [r2, #16]
 8008fcc:	f107 0108 	add.w	r1, r7, #8
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fd6:	e043      	b.n	8009060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa47 	bl	800946e <USBD_CtlError>
            err++;
 8008fe0:	7afb      	ldrb	r3, [r7, #11]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fe6:	e03b      	b.n	8009060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7c12      	ldrb	r2, [r2, #16]
 8009000:	f107 0108 	add.w	r1, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900a:	e029      	b.n	8009060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa2d 	bl	800946e <USBD_CtlError>
            err++;
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	3301      	adds	r3, #1
 8009018:	72fb      	strb	r3, [r7, #11]
          break;
 800901a:	e021      	b.n	8009060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	7c12      	ldrb	r2, [r2, #16]
 8009034:	f107 0108 	add.w	r1, r7, #8
 8009038:	4610      	mov	r0, r2
 800903a:	4798      	blx	r3
 800903c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903e:	e00f      	b.n	8009060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa13 	bl	800946e <USBD_CtlError>
            err++;
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	3301      	adds	r3, #1
 800904c:	72fb      	strb	r3, [r7, #11]
          break;
 800904e:	e007      	b.n	8009060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa0b 	bl	800946e <USBD_CtlError>
          err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800905e:	e038      	b.n	80090d2 <USBD_GetDescriptor+0x2da>
 8009060:	e037      	b.n	80090d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	7c1b      	ldrb	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d109      	bne.n	800907e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009072:	f107 0208 	add.w	r2, r7, #8
 8009076:	4610      	mov	r0, r2
 8009078:	4798      	blx	r3
 800907a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800907c:	e029      	b.n	80090d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9f4 	bl	800946e <USBD_CtlError>
        err++;
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	3301      	adds	r3, #1
 800908a:	72fb      	strb	r3, [r7, #11]
      break;
 800908c:	e021      	b.n	80090d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7c1b      	ldrb	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10d      	bne.n	80090b2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	f107 0208 	add.w	r2, r7, #8
 80090a2:	4610      	mov	r0, r2
 80090a4:	4798      	blx	r3
 80090a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	2207      	movs	r2, #7
 80090ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b0:	e00f      	b.n	80090d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f9da 	bl	800946e <USBD_CtlError>
        err++;
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	3301      	adds	r3, #1
 80090be:	72fb      	strb	r3, [r7, #11]
      break;
 80090c0:	e007      	b.n	80090d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f9d2 	bl	800946e <USBD_CtlError>
      err++;
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	3301      	adds	r3, #1
 80090ce:	72fb      	strb	r3, [r7, #11]
      break;
 80090d0:	bf00      	nop
  }

  if (err != 0U)
 80090d2:	7afb      	ldrb	r3, [r7, #11]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d11c      	bne.n	8009112 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090d8:	893b      	ldrh	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d011      	beq.n	8009102 <USBD_GetDescriptor+0x30a>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00d      	beq.n	8009102 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	88da      	ldrh	r2, [r3, #6]
 80090ea:	893b      	ldrh	r3, [r7, #8]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	bf28      	it	cs
 80090f0:	4613      	movcs	r3, r2
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090f6:	893b      	ldrh	r3, [r7, #8]
 80090f8:	461a      	mov	r2, r3
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fa21 	bl	8009544 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	88db      	ldrh	r3, [r3, #6]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d104      	bne.n	8009114 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa78 	bl	8009600 <USBD_CtlSendStatus>
 8009110:	e000      	b.n	8009114 <USBD_GetDescriptor+0x31c>
    return;
 8009112:	bf00      	nop
    }
  }
}
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop

0800911c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	889b      	ldrh	r3, [r3, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d130      	bne.n	8009190 <USBD_SetAddress+0x74>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	88db      	ldrh	r3, [r3, #6]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d12c      	bne.n	8009190 <USBD_SetAddress+0x74>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	2b7f      	cmp	r3, #127	; 0x7f
 800913c:	d828      	bhi.n	8009190 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	885b      	ldrh	r3, [r3, #2]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009150:	2b03      	cmp	r3, #3
 8009152:	d104      	bne.n	800915e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f989 	bl	800946e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915c:	e01c      	b.n	8009198 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	7bfa      	ldrb	r2, [r7, #15]
 8009162:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f004 fb6e 	bl	800d84c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fa45 	bl	8009600 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009184:	e008      	b.n	8009198 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918e:	e003      	b.n	8009198 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f96b 	bl	800946e <USBD_CtlError>
  }
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	885b      	ldrh	r3, [r3, #2]
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	4b41      	ldr	r3, [pc, #260]	; (80092b8 <USBD_SetConfig+0x118>)
 80091b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091b4:	4b40      	ldr	r3, [pc, #256]	; (80092b8 <USBD_SetConfig+0x118>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d904      	bls.n	80091c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f955 	bl	800946e <USBD_CtlError>
 80091c4:	e075      	b.n	80092b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d002      	beq.n	80091d6 <USBD_SetConfig+0x36>
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d023      	beq.n	800921c <USBD_SetConfig+0x7c>
 80091d4:	e062      	b.n	800929c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091d6:	4b38      	ldr	r3, [pc, #224]	; (80092b8 <USBD_SetConfig+0x118>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01a      	beq.n	8009214 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091de:	4b36      	ldr	r3, [pc, #216]	; (80092b8 <USBD_SetConfig+0x118>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2203      	movs	r2, #3
 80091ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091f0:	4b31      	ldr	r3, [pc, #196]	; (80092b8 <USBD_SetConfig+0x118>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff f9c6 	bl	8008588 <USBD_SetClassConfig>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d104      	bne.n	800920c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f932 	bl	800946e <USBD_CtlError>
            return;
 800920a:	e052      	b.n	80092b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f9f7 	bl	8009600 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009212:	e04e      	b.n	80092b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f9f3 	bl	8009600 <USBD_CtlSendStatus>
        break;
 800921a:	e04a      	b.n	80092b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800921c:	4b26      	ldr	r3, [pc, #152]	; (80092b8 <USBD_SetConfig+0x118>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d112      	bne.n	800924a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800922c:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <USBD_SetConfig+0x118>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009236:	4b20      	ldr	r3, [pc, #128]	; (80092b8 <USBD_SetConfig+0x118>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff f9c2 	bl	80085c6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f9dc 	bl	8009600 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009248:	e033      	b.n	80092b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800924a:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <USBD_SetConfig+0x118>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	429a      	cmp	r2, r3
 8009256:	d01d      	beq.n	8009294 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff f9b0 	bl	80085c6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <USBD_SetConfig+0x118>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009270:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <USBD_SetConfig+0x118>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff f986 	bl	8008588 <USBD_SetClassConfig>
 800927c:	4603      	mov	r3, r0
 800927e:	2b02      	cmp	r3, #2
 8009280:	d104      	bne.n	800928c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f8f2 	bl	800946e <USBD_CtlError>
            return;
 800928a:	e012      	b.n	80092b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f9b7 	bl	8009600 <USBD_CtlSendStatus>
        break;
 8009292:	e00e      	b.n	80092b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f9b3 	bl	8009600 <USBD_CtlSendStatus>
        break;
 800929a:	e00a      	b.n	80092b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f8e5 	bl	800946e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092a4:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <USBD_SetConfig+0x118>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff f98b 	bl	80085c6 <USBD_ClrClassConfig>
        break;
 80092b0:	bf00      	nop
    }
  }
}
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	20000214 	.word	0x20000214

080092bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	88db      	ldrh	r3, [r3, #6]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d004      	beq.n	80092d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f8cc 	bl	800946e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092d6:	e021      	b.n	800931c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092de:	2b01      	cmp	r3, #1
 80092e0:	db17      	blt.n	8009312 <USBD_GetConfig+0x56>
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	dd02      	ble.n	80092ec <USBD_GetConfig+0x30>
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d00b      	beq.n	8009302 <USBD_GetConfig+0x46>
 80092ea:	e012      	b.n	8009312 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3308      	adds	r3, #8
 80092f6:	2201      	movs	r2, #1
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f922 	bl	8009544 <USBD_CtlSendData>
        break;
 8009300:	e00c      	b.n	800931c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3304      	adds	r3, #4
 8009306:	2201      	movs	r2, #1
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f91a 	bl	8009544 <USBD_CtlSendData>
        break;
 8009310:	e004      	b.n	800931c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f8aa 	bl	800946e <USBD_CtlError>
        break;
 800931a:	bf00      	nop
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009334:	3b01      	subs	r3, #1
 8009336:	2b02      	cmp	r3, #2
 8009338:	d81e      	bhi.n	8009378 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	88db      	ldrh	r3, [r3, #6]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d004      	beq.n	800934c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f892 	bl	800946e <USBD_CtlError>
        break;
 800934a:	e01a      	b.n	8009382 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f043 0202 	orr.w	r2, r3, #2
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	330c      	adds	r3, #12
 800936c:	2202      	movs	r2, #2
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f8e7 	bl	8009544 <USBD_CtlSendData>
      break;
 8009376:	e004      	b.n	8009382 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f877 	bl	800946e <USBD_CtlError>
      break;
 8009380:	bf00      	nop
  }
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b082      	sub	sp, #8
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	885b      	ldrh	r3, [r3, #2]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d106      	bne.n	80093aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f92b 	bl	8009600 <USBD_CtlSendStatus>
  }
}
 80093aa:	bf00      	nop
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c2:	3b01      	subs	r3, #1
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d80b      	bhi.n	80093e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	885b      	ldrh	r3, [r3, #2]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10c      	bne.n	80093ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f911 	bl	8009600 <USBD_CtlSendStatus>
      }
      break;
 80093de:	e004      	b.n	80093ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f843 	bl	800946e <USBD_CtlError>
      break;
 80093e8:	e000      	b.n	80093ec <USBD_ClrFeature+0x3a>
      break;
 80093ea:	bf00      	nop
  }
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	781a      	ldrb	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	785a      	ldrb	r2, [r3, #1]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	3302      	adds	r3, #2
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	b29a      	uxth	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	3303      	adds	r3, #3
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	b29b      	uxth	r3, r3
 800941e:	021b      	lsls	r3, r3, #8
 8009420:	b29b      	uxth	r3, r3
 8009422:	4413      	add	r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	3304      	adds	r3, #4
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b29a      	uxth	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	3305      	adds	r3, #5
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	021b      	lsls	r3, r3, #8
 800943c:	b29b      	uxth	r3, r3
 800943e:	4413      	add	r3, r2
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3306      	adds	r3, #6
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	b29a      	uxth	r2, r3
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	3307      	adds	r3, #7
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	b29b      	uxth	r3, r3
 800945a:	4413      	add	r3, r2
 800945c:	b29a      	uxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	80da      	strh	r2, [r3, #6]

}
 8009462:	bf00      	nop
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009478:	2180      	movs	r1, #128	; 0x80
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f004 f954 	bl	800d728 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009480:	2100      	movs	r1, #0
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f004 f950 	bl	800d728 <USBD_LL_StallEP>
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d032      	beq.n	800950c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 f834 	bl	8009514 <USBD_GetLen>
 80094ac:	4603      	mov	r3, r0
 80094ae:	3301      	adds	r3, #1
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	75fa      	strb	r2, [r7, #23]
 80094c0:	461a      	mov	r2, r3
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	4413      	add	r3, r2
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	7812      	ldrb	r2, [r2, #0]
 80094ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	75fa      	strb	r2, [r7, #23]
 80094d2:	461a      	mov	r2, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4413      	add	r3, r2
 80094d8:	2203      	movs	r2, #3
 80094da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094dc:	e012      	b.n	8009504 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	60fa      	str	r2, [r7, #12]
 80094e4:	7dfa      	ldrb	r2, [r7, #23]
 80094e6:	1c51      	adds	r1, r2, #1
 80094e8:	75f9      	strb	r1, [r7, #23]
 80094ea:	4611      	mov	r1, r2
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	440a      	add	r2, r1
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	75fa      	strb	r2, [r7, #23]
 80094fa:	461a      	mov	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	4413      	add	r3, r2
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e8      	bne.n	80094de <USBD_GetString+0x4e>
    }
  }
}
 800950c:	bf00      	nop
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009520:	e005      	b.n	800952e <USBD_GetLen+0x1a>
  {
    len++;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	3301      	adds	r3, #1
 8009526:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3301      	adds	r3, #1
 800952c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1f5      	bne.n	8009522 <USBD_GetLen+0xe>
  }

  return len;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2202      	movs	r2, #2
 8009556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800955a:	88fa      	ldrh	r2, [r7, #6]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009560:	88fa      	ldrh	r2, [r7, #6]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009566:	88fb      	ldrh	r3, [r7, #6]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	2100      	movs	r1, #0
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f004 f9a3 	bl	800d8b8 <USBD_LL_Transmit>

  return USBD_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	2100      	movs	r1, #0
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f004 f991 	bl	800d8b8 <USBD_LL_Transmit>

  return USBD_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2203      	movs	r2, #3
 80095b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095b6:	88fa      	ldrh	r2, [r7, #6]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095be:	88fa      	ldrh	r2, [r7, #6]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	2100      	movs	r1, #0
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f004 f9ad 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	2100      	movs	r1, #0
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f004 f99b 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2204      	movs	r2, #4
 800960c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009610:	2300      	movs	r3, #0
 8009612:	2200      	movs	r2, #0
 8009614:	2100      	movs	r1, #0
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f004 f94e 	bl	800d8b8 <USBD_LL_Transmit>

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b082      	sub	sp, #8
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2205      	movs	r2, #5
 8009632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009636:	2300      	movs	r3, #0
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f004 f975 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009650:	bf00      	nop
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
	...

0800965c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009662:	f3ef 8305 	mrs	r3, IPSR
 8009666:	60bb      	str	r3, [r7, #8]
  return(result);
 8009668:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10f      	bne.n	800968e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800966e:	f3ef 8310 	mrs	r3, PRIMASK
 8009672:	607b      	str	r3, [r7, #4]
  return(result);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d105      	bne.n	8009686 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800967a:	f3ef 8311 	mrs	r3, BASEPRI
 800967e:	603b      	str	r3, [r7, #0]
  return(result);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d007      	beq.n	8009696 <osKernelInitialize+0x3a>
 8009686:	4b0e      	ldr	r3, [pc, #56]	; (80096c0 <osKernelInitialize+0x64>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b02      	cmp	r3, #2
 800968c:	d103      	bne.n	8009696 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800968e:	f06f 0305 	mvn.w	r3, #5
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	e00c      	b.n	80096b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009696:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <osKernelInitialize+0x64>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d105      	bne.n	80096aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800969e:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <osKernelInitialize+0x64>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	e002      	b.n	80096b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80096b0:	68fb      	ldr	r3, [r7, #12]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	20000218 	.word	0x20000218

080096c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ca:	f3ef 8305 	mrs	r3, IPSR
 80096ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80096d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10f      	bne.n	80096f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096d6:	f3ef 8310 	mrs	r3, PRIMASK
 80096da:	607b      	str	r3, [r7, #4]
  return(result);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096e2:	f3ef 8311 	mrs	r3, BASEPRI
 80096e6:	603b      	str	r3, [r7, #0]
  return(result);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d007      	beq.n	80096fe <osKernelStart+0x3a>
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <osKernelStart+0x68>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d103      	bne.n	80096fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80096f6:	f06f 0305 	mvn.w	r3, #5
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	e010      	b.n	8009720 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <osKernelStart+0x68>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d109      	bne.n	800971a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009706:	f7ff ffa1 	bl	800964c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800970a:	4b08      	ldr	r3, [pc, #32]	; (800972c <osKernelStart+0x68>)
 800970c:	2202      	movs	r2, #2
 800970e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009710:	f001 fea2 	bl	800b458 <vTaskStartScheduler>
      stat = osOK;
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	e002      	b.n	8009720 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800971a:	f04f 33ff 	mov.w	r3, #4294967295
 800971e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009720:	68fb      	ldr	r3, [r7, #12]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000218 	.word	0x20000218

08009730 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009736:	f3ef 8305 	mrs	r3, IPSR
 800973a:	60bb      	str	r3, [r7, #8]
  return(result);
 800973c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10f      	bne.n	8009762 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009742:	f3ef 8310 	mrs	r3, PRIMASK
 8009746:	607b      	str	r3, [r7, #4]
  return(result);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d105      	bne.n	800975a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800974e:	f3ef 8311 	mrs	r3, BASEPRI
 8009752:	603b      	str	r3, [r7, #0]
  return(result);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <osKernelGetTickCount+0x3a>
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <osKernelGetTickCount+0x4c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d103      	bne.n	800976a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009762:	f001 ff97 	bl	800b694 <xTaskGetTickCountFromISR>
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	e002      	b.n	8009770 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800976a:	f001 ff83 	bl	800b674 <xTaskGetTickCount>
 800976e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009770:	68fb      	ldr	r3, [r7, #12]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000218 	.word	0x20000218

08009780 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009788:	4618      	mov	r0, r3
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
	...

08009794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b090      	sub	sp, #64	; 0x40
 8009798:	af04      	add	r7, sp, #16
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a4:	f3ef 8305 	mrs	r3, IPSR
 80097a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80097aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 808f 	bne.w	80098d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097b2:	f3ef 8310 	mrs	r3, PRIMASK
 80097b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097be:	f3ef 8311 	mrs	r3, BASEPRI
 80097c2:	617b      	str	r3, [r7, #20]
  return(result);
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <osThreadNew+0x3e>
 80097ca:	4b44      	ldr	r3, [pc, #272]	; (80098dc <osThreadNew+0x148>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d07e      	beq.n	80098d0 <osThreadNew+0x13c>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d07b      	beq.n	80098d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80097d8:	2380      	movs	r3, #128	; 0x80
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80097dc:	2318      	movs	r3, #24
 80097de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80097e0:	2300      	movs	r3, #0
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80097e4:	f04f 33ff 	mov.w	r3, #4294967295
 80097e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d045      	beq.n	800987c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <osThreadNew+0x6a>
        name = attr->name;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	2b00      	cmp	r3, #0
 8009810:	d008      	beq.n	8009824 <osThreadNew+0x90>
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	2b38      	cmp	r3, #56	; 0x38
 8009816:	d805      	bhi.n	8009824 <osThreadNew+0x90>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <osThreadNew+0x94>
        return (NULL);
 8009824:	2300      	movs	r3, #0
 8009826:	e054      	b.n	80098d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	089b      	lsrs	r3, r3, #2
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00e      	beq.n	800985e <osThreadNew+0xca>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	2b5b      	cmp	r3, #91	; 0x5b
 8009846:	d90a      	bls.n	800985e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800984c:	2b00      	cmp	r3, #0
 800984e:	d006      	beq.n	800985e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <osThreadNew+0xca>
        mem = 1;
 8009858:	2301      	movs	r3, #1
 800985a:	623b      	str	r3, [r7, #32]
 800985c:	e010      	b.n	8009880 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10c      	bne.n	8009880 <osThreadNew+0xec>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d108      	bne.n	8009880 <osThreadNew+0xec>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d104      	bne.n	8009880 <osThreadNew+0xec>
          mem = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	623b      	str	r3, [r7, #32]
 800987a:	e001      	b.n	8009880 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d110      	bne.n	80098a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800988e:	9202      	str	r2, [sp, #8]
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800989a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f001 fb8f 	bl	800afc0 <xTaskCreateStatic>
 80098a2:	4603      	mov	r3, r0
 80098a4:	613b      	str	r3, [r7, #16]
 80098a6:	e013      	b.n	80098d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d110      	bne.n	80098d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	f107 0310 	add.w	r3, r7, #16
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f001 fbd7 	bl	800b074 <xTaskCreate>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d001      	beq.n	80098d0 <osThreadNew+0x13c>
          hTask = NULL;
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80098d0:	693b      	ldr	r3, [r7, #16]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3730      	adds	r7, #48	; 0x30
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000218 	.word	0x20000218

080098e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e8:	f3ef 8305 	mrs	r3, IPSR
 80098ec:	613b      	str	r3, [r7, #16]
  return(result);
 80098ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10f      	bne.n	8009914 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f4:	f3ef 8310 	mrs	r3, PRIMASK
 80098f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d105      	bne.n	800990c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009900:	f3ef 8311 	mrs	r3, BASEPRI
 8009904:	60bb      	str	r3, [r7, #8]
  return(result);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d007      	beq.n	800991c <osDelay+0x3c>
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <osDelay+0x58>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b02      	cmp	r3, #2
 8009912:	d103      	bne.n	800991c <osDelay+0x3c>
    stat = osErrorISR;
 8009914:	f06f 0305 	mvn.w	r3, #5
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	e007      	b.n	800992c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <osDelay+0x4c>
      vTaskDelay(ticks);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 fd62 	bl	800b3f0 <vTaskDelay>
    }
  }

  return (stat);
 800992c:	697b      	ldr	r3, [r7, #20]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20000218 	.word	0x20000218

0800993c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009944:	f3ef 8305 	mrs	r3, IPSR
 8009948:	617b      	str	r3, [r7, #20]
  return(result);
 800994a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10f      	bne.n	8009970 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009950:	f3ef 8310 	mrs	r3, PRIMASK
 8009954:	613b      	str	r3, [r7, #16]
  return(result);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d105      	bne.n	8009968 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800995c:	f3ef 8311 	mrs	r3, BASEPRI
 8009960:	60fb      	str	r3, [r7, #12]
  return(result);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d007      	beq.n	8009978 <osDelayUntil+0x3c>
 8009968:	4b13      	ldr	r3, [pc, #76]	; (80099b8 <osDelayUntil+0x7c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b02      	cmp	r3, #2
 800996e:	d103      	bne.n	8009978 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8009970:	f06f 0305 	mvn.w	r3, #5
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	e019      	b.n	80099ac <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8009978:	2300      	movs	r3, #0
 800997a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800997c:	f001 fe7a 	bl	800b674 <xTaskGetTickCount>
 8009980:	4603      	mov	r3, r0
 8009982:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d009      	beq.n	80099a6 <osDelayUntil+0x6a>
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	2b00      	cmp	r3, #0
 8009996:	db06      	blt.n	80099a6 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	69b9      	ldr	r1, [r7, #24]
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 fcac 	bl	800b2fc <vTaskDelayUntil>
 80099a4:	e002      	b.n	80099ac <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80099a6:	f06f 0303 	mvn.w	r3, #3
 80099aa:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80099ac:	69fb      	ldr	r3, [r7, #28]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000218 	.word	0x20000218

080099bc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	; 0x28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80099c4:	2300      	movs	r3, #0
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c8:	f3ef 8305 	mrs	r3, IPSR
 80099cc:	613b      	str	r3, [r7, #16]
  return(result);
 80099ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f040 8085 	bne.w	8009ae0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099d6:	f3ef 8310 	mrs	r3, PRIMASK
 80099da:	60fb      	str	r3, [r7, #12]
  return(result);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d105      	bne.n	80099ee <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099e2:	f3ef 8311 	mrs	r3, BASEPRI
 80099e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <osMutexNew+0x3a>
 80099ee:	4b3f      	ldr	r3, [pc, #252]	; (8009aec <osMutexNew+0x130>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d074      	beq.n	8009ae0 <osMutexNew+0x124>
    if (attr != NULL) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <osMutexNew+0x48>
      type = attr->attr_bits;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	623b      	str	r3, [r7, #32]
 8009a02:	e001      	b.n	8009a08 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <osMutexNew+0x5c>
      rmtx = 1U;
 8009a12:	2301      	movs	r3, #1
 8009a14:	61fb      	str	r3, [r7, #28]
 8009a16:	e001      	b.n	8009a1c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	f003 0308 	and.w	r3, r3, #8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d15c      	bne.n	8009ae0 <osMutexNew+0x124>
      mem = -1;
 8009a26:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d015      	beq.n	8009a5e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d006      	beq.n	8009a48 <osMutexNew+0x8c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	2b4f      	cmp	r3, #79	; 0x4f
 8009a40:	d902      	bls.n	8009a48 <osMutexNew+0x8c>
          mem = 1;
 8009a42:	2301      	movs	r3, #1
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	e00c      	b.n	8009a62 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d108      	bne.n	8009a62 <osMutexNew+0xa6>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d104      	bne.n	8009a62 <osMutexNew+0xa6>
            mem = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61bb      	str	r3, [r7, #24]
 8009a5c:	e001      	b.n	8009a62 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d112      	bne.n	8009a8e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d007      	beq.n	8009a7e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	4619      	mov	r1, r3
 8009a74:	2004      	movs	r0, #4
 8009a76:	f000 fcac 	bl	800a3d2 <xQueueCreateMutexStatic>
 8009a7a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a7c:	e016      	b.n	8009aac <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	4619      	mov	r1, r3
 8009a84:	2001      	movs	r0, #1
 8009a86:	f000 fca4 	bl	800a3d2 <xQueueCreateMutexStatic>
 8009a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a8c:	e00e      	b.n	8009aac <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10b      	bne.n	8009aac <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d004      	beq.n	8009aa4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009a9a:	2004      	movs	r0, #4
 8009a9c:	f000 fc81 	bl	800a3a2 <xQueueCreateMutex>
 8009aa0:	6278      	str	r0, [r7, #36]	; 0x24
 8009aa2:	e003      	b.n	8009aac <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	f000 fc7c 	bl	800a3a2 <xQueueCreateMutex>
 8009aaa:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00c      	beq.n	8009acc <osMutexNew+0x110>
        if (attr != NULL) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <osMutexNew+0x104>
          name = attr->name;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	e001      	b.n	8009ac4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009ac4:	6979      	ldr	r1, [r7, #20]
 8009ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ac8:	f001 fa1e 	bl	800af08 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d006      	beq.n	8009ae0 <osMutexNew+0x124>
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	f043 0301 	orr.w	r3, r3, #1
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3728      	adds	r7, #40	; 0x28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000218 	.word	0x20000218

08009af0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f023 0301 	bic.w	r3, r3, #1
 8009b00:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b0e:	f3ef 8305 	mrs	r3, IPSR
 8009b12:	613b      	str	r3, [r7, #16]
  return(result);
 8009b14:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10f      	bne.n	8009b3a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d105      	bne.n	8009b32 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b26:	f3ef 8311 	mrs	r3, BASEPRI
 8009b2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d007      	beq.n	8009b42 <osMutexAcquire+0x52>
 8009b32:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <osMutexAcquire+0xb8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d103      	bne.n	8009b42 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009b3a:	f06f 0305 	mvn.w	r3, #5
 8009b3e:	61fb      	str	r3, [r7, #28]
 8009b40:	e02c      	b.n	8009b9c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d103      	bne.n	8009b50 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009b48:	f06f 0303 	mvn.w	r3, #3
 8009b4c:	61fb      	str	r3, [r7, #28]
 8009b4e:	e025      	b.n	8009b9c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d011      	beq.n	8009b7a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	69b8      	ldr	r0, [r7, #24]
 8009b5a:	f000 fc88 	bl	800a46e <xQueueTakeMutexRecursive>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d01b      	beq.n	8009b9c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009b6a:	f06f 0301 	mvn.w	r3, #1
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	e014      	b.n	8009b9c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009b72:	f06f 0302 	mvn.w	r3, #2
 8009b76:	61fb      	str	r3, [r7, #28]
 8009b78:	e010      	b.n	8009b9c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	69b8      	ldr	r0, [r7, #24]
 8009b7e:	f000 ff15 	bl	800a9ac <xQueueSemaphoreTake>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d009      	beq.n	8009b9c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009b8e:	f06f 0301 	mvn.w	r3, #1
 8009b92:	61fb      	str	r3, [r7, #28]
 8009b94:	e002      	b.n	8009b9c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009b96:	f06f 0302 	mvn.w	r3, #2
 8009b9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009b9c:	69fb      	ldr	r3, [r7, #28]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20000218 	.word	0x20000218

08009bac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f023 0301 	bic.w	r3, r3, #1
 8009bba:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bc8:	f3ef 8305 	mrs	r3, IPSR
 8009bcc:	613b      	str	r3, [r7, #16]
  return(result);
 8009bce:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10f      	bne.n	8009bf4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d105      	bne.n	8009bec <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009be0:	f3ef 8311 	mrs	r3, BASEPRI
 8009be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <osMutexRelease+0x50>
 8009bec:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <osMutexRelease+0x9c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d103      	bne.n	8009bfc <osMutexRelease+0x50>
    stat = osErrorISR;
 8009bf4:	f06f 0305 	mvn.w	r3, #5
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	e01f      	b.n	8009c3c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009c02:	f06f 0303 	mvn.w	r3, #3
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e018      	b.n	8009c3c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009c10:	69b8      	ldr	r0, [r7, #24]
 8009c12:	f000 fbf9 	bl	800a408 <xQueueGiveMutexRecursive>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d00f      	beq.n	8009c3c <osMutexRelease+0x90>
        stat = osErrorResource;
 8009c1c:	f06f 0302 	mvn.w	r3, #2
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	e00b      	b.n	8009c3c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009c24:	2300      	movs	r3, #0
 8009c26:	2200      	movs	r2, #0
 8009c28:	2100      	movs	r1, #0
 8009c2a:	69b8      	ldr	r0, [r7, #24]
 8009c2c:	f000 fc54 	bl	800a4d8 <xQueueGenericSend>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d002      	beq.n	8009c3c <osMutexRelease+0x90>
        stat = osErrorResource;
 8009c36:	f06f 0302 	mvn.w	r3, #2
 8009c3a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009c3c:	69fb      	ldr	r3, [r7, #28]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000218 	.word	0x20000218

08009c4c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08c      	sub	sp, #48	; 0x30
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c5c:	f3ef 8305 	mrs	r3, IPSR
 8009c60:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c62:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d170      	bne.n	8009d4a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c68:	f3ef 8310 	mrs	r3, PRIMASK
 8009c6c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d105      	bne.n	8009c80 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c74:	f3ef 8311 	mrs	r3, BASEPRI
 8009c78:	613b      	str	r3, [r7, #16]
  return(result);
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <osMessageQueueNew+0x3c>
 8009c80:	4b34      	ldr	r3, [pc, #208]	; (8009d54 <osMessageQueueNew+0x108>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d060      	beq.n	8009d4a <osMessageQueueNew+0xfe>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d05d      	beq.n	8009d4a <osMessageQueueNew+0xfe>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d05a      	beq.n	8009d4a <osMessageQueueNew+0xfe>
    mem = -1;
 8009c94:	f04f 33ff 	mov.w	r3, #4294967295
 8009c98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d029      	beq.n	8009cf4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d012      	beq.n	8009cce <osMessageQueueNew+0x82>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	2b4f      	cmp	r3, #79	; 0x4f
 8009cae:	d90e      	bls.n	8009cce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	695a      	ldr	r2, [r3, #20]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d302      	bcc.n	8009cce <osMessageQueueNew+0x82>
        mem = 1;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	623b      	str	r3, [r7, #32]
 8009ccc:	e014      	b.n	8009cf8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d110      	bne.n	8009cf8 <osMessageQueueNew+0xac>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10c      	bne.n	8009cf8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d108      	bne.n	8009cf8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <osMessageQueueNew+0xac>
          mem = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	623b      	str	r3, [r7, #32]
 8009cf2:	e001      	b.n	8009cf8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d10c      	bne.n	8009d18 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691a      	ldr	r2, [r3, #16]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6899      	ldr	r1, [r3, #8]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 fa58 	bl	800a1c4 <xQueueGenericCreateStatic>
 8009d14:	6278      	str	r0, [r7, #36]	; 0x24
 8009d16:	e008      	b.n	8009d2a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d105      	bne.n	8009d2a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	68b9      	ldr	r1, [r7, #8]
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 fac1 	bl	800a2aa <xQueueGenericCreate>
 8009d28:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00c      	beq.n	8009d4a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <osMessageQueueNew+0xf2>
        name = attr->name;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	e001      	b.n	8009d42 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d42:	69f9      	ldr	r1, [r7, #28]
 8009d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d46:	f001 f8df 	bl	800af08 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3728      	adds	r7, #40	; 0x28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	20000218 	.word	0x20000218

08009d58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08a      	sub	sp, #40	; 0x28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	4613      	mov	r3, r2
 8009d66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d70:	f3ef 8305 	mrs	r3, IPSR
 8009d74:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d76:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10f      	bne.n	8009d9c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d80:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d105      	bne.n	8009d94 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d88:	f3ef 8311 	mrs	r3, BASEPRI
 8009d8c:	617b      	str	r3, [r7, #20]
  return(result);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d02c      	beq.n	8009dee <osMessageQueuePut+0x96>
 8009d94:	4b28      	ldr	r3, [pc, #160]	; (8009e38 <osMessageQueuePut+0xe0>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d128      	bne.n	8009dee <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d005      	beq.n	8009dae <osMessageQueuePut+0x56>
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <osMessageQueuePut+0x56>
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009dae:	f06f 0303 	mvn.w	r3, #3
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009db4:	e039      	b.n	8009e2a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009db6:	2300      	movs	r3, #0
 8009db8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009dba:	f107 0210 	add.w	r2, r7, #16
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	68b9      	ldr	r1, [r7, #8]
 8009dc2:	6a38      	ldr	r0, [r7, #32]
 8009dc4:	f000 fc82 	bl	800a6cc <xQueueGenericSendFromISR>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d003      	beq.n	8009dd6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009dce:	f06f 0302 	mvn.w	r3, #2
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009dd4:	e029      	b.n	8009e2a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d026      	beq.n	8009e2a <osMessageQueuePut+0xd2>
 8009ddc:	4b17      	ldr	r3, [pc, #92]	; (8009e3c <osMessageQueuePut+0xe4>)
 8009dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009dec:	e01d      	b.n	8009e2a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <osMessageQueuePut+0xa2>
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d103      	bne.n	8009e02 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009dfa:	f06f 0303 	mvn.w	r3, #3
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8009e00:	e014      	b.n	8009e2c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009e02:	2300      	movs	r3, #0
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	68b9      	ldr	r1, [r7, #8]
 8009e08:	6a38      	ldr	r0, [r7, #32]
 8009e0a:	f000 fb65 	bl	800a4d8 <xQueueGenericSend>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d00b      	beq.n	8009e2c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009e1a:	f06f 0301 	mvn.w	r3, #1
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e20:	e004      	b.n	8009e2c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009e22:	f06f 0302 	mvn.w	r3, #2
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
 8009e28:	e000      	b.n	8009e2c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e2a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3728      	adds	r7, #40	; 0x28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000218 	.word	0x20000218
 8009e3c:	e000ed04 	.word	0xe000ed04

08009e40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08a      	sub	sp, #40	; 0x28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e56:	f3ef 8305 	mrs	r3, IPSR
 8009e5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e5c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10f      	bne.n	8009e82 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e62:	f3ef 8310 	mrs	r3, PRIMASK
 8009e66:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d105      	bne.n	8009e7a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8009e72:	617b      	str	r3, [r7, #20]
  return(result);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d02c      	beq.n	8009ed4 <osMessageQueueGet+0x94>
 8009e7a:	4b28      	ldr	r3, [pc, #160]	; (8009f1c <osMessageQueueGet+0xdc>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d128      	bne.n	8009ed4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d005      	beq.n	8009e94 <osMessageQueueGet+0x54>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <osMessageQueueGet+0x54>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009e94:	f06f 0303 	mvn.w	r3, #3
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e9a:	e038      	b.n	8009f0e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009ea0:	f107 0310 	add.w	r3, r7, #16
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	6a38      	ldr	r0, [r7, #32]
 8009eaa:	f000 fe87 	bl	800abbc <xQueueReceiveFromISR>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d003      	beq.n	8009ebc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009eb4:	f06f 0302 	mvn.w	r3, #2
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009eba:	e028      	b.n	8009f0e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d025      	beq.n	8009f0e <osMessageQueueGet+0xce>
 8009ec2:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <osMessageQueueGet+0xe0>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ed2:	e01c      	b.n	8009f0e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <osMessageQueueGet+0xa0>
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d103      	bne.n	8009ee8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009ee0:	f06f 0303 	mvn.w	r3, #3
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee6:	e013      	b.n	8009f10 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	6a38      	ldr	r0, [r7, #32]
 8009eee:	f000 fc81 	bl	800a7f4 <xQueueReceive>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d00b      	beq.n	8009f10 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009efe:	f06f 0301 	mvn.w	r3, #1
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
 8009f04:	e004      	b.n	8009f10 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009f06:	f06f 0302 	mvn.w	r3, #2
 8009f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0c:	e000      	b.n	8009f10 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009f0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3728      	adds	r7, #40	; 0x28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000218 	.word	0x20000218
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4a07      	ldr	r2, [pc, #28]	; (8009f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	4a06      	ldr	r2, [pc, #24]	; (8009f54 <vApplicationGetIdleTaskMemory+0x30>)
 8009f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2280      	movs	r2, #128	; 0x80
 8009f40:	601a      	str	r2, [r3, #0]
}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	2000021c 	.word	0x2000021c
 8009f54:	20000278 	.word	0x20000278

08009f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	4a06      	ldr	r2, [pc, #24]	; (8009f88 <vApplicationGetTimerTaskMemory+0x30>)
 8009f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f76:	601a      	str	r2, [r3, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	20000478 	.word	0x20000478
 8009f88:	200004d4 	.word	0x200004d4

08009f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f103 0208 	add.w	r2, r3, #8
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f103 0208 	add.w	r2, r3, #8
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f103 0208 	add.w	r2, r3, #8
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fda:	bf00      	nop
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	1c5a      	adds	r2, r3, #1
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bf00      	nop
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a02e:	b480      	push	{r7}
 800a030:	b085      	sub	sp, #20
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a044:	d103      	bne.n	800a04e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	e00c      	b.n	800a068 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3308      	adds	r3, #8
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e002      	b.n	800a05c <vListInsert+0x2e>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	429a      	cmp	r2, r3
 800a066:	d2f6      	bcs.n	800a056 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	6892      	ldr	r2, [r2, #8]
 800a0b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	6852      	ldr	r2, [r2, #4]
 800a0c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d103      	bne.n	800a0d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689a      	ldr	r2, [r3, #8]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	1e5a      	subs	r2, r3, #1
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d109      	bne.n	800a11c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	60bb      	str	r3, [r7, #8]
 800a11a:	e7fe      	b.n	800a11a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a11c:	f002 fc3e 	bl	800c99c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a128:	68f9      	ldr	r1, [r7, #12]
 800a12a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a12c:	fb01 f303 	mul.w	r3, r1, r3
 800a130:	441a      	add	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14c:	3b01      	subs	r3, #1
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	441a      	add	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	22ff      	movs	r2, #255	; 0xff
 800a160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	22ff      	movs	r2, #255	; 0xff
 800a168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d114      	bne.n	800a19c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01a      	beq.n	800a1b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3310      	adds	r3, #16
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 fbfc 	bl	800b97c <xTaskRemoveFromEventList>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d012      	beq.n	800a1b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a18a:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <xQueueGenericReset+0xcc>)
 800a18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	e009      	b.n	800a1b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3310      	adds	r3, #16
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff fef3 	bl	8009f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3324      	adds	r3, #36	; 0x24
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff feee 	bl	8009f8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1b0:	f002 fc22 	bl	800c9f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1b4:	2301      	movs	r3, #1
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08e      	sub	sp, #56	; 0x38
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d109      	bne.n	800a1ec <xQueueGenericCreateStatic+0x28>
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1ea:	e7fe      	b.n	800a1ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d109      	bne.n	800a206 <xQueueGenericCreateStatic+0x42>
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
 800a204:	e7fe      	b.n	800a204 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <xQueueGenericCreateStatic+0x4e>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <xQueueGenericCreateStatic+0x52>
 800a212:	2301      	movs	r3, #1
 800a214:	e000      	b.n	800a218 <xQueueGenericCreateStatic+0x54>
 800a216:	2300      	movs	r3, #0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d109      	bne.n	800a230 <xQueueGenericCreateStatic+0x6c>
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	623b      	str	r3, [r7, #32]
 800a22e:	e7fe      	b.n	800a22e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d102      	bne.n	800a23c <xQueueGenericCreateStatic+0x78>
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <xQueueGenericCreateStatic+0x7c>
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <xQueueGenericCreateStatic+0x7e>
 800a240:	2300      	movs	r3, #0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <xQueueGenericCreateStatic+0x96>
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	61fb      	str	r3, [r7, #28]
 800a258:	e7fe      	b.n	800a258 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a25a:	2350      	movs	r3, #80	; 0x50
 800a25c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b50      	cmp	r3, #80	; 0x50
 800a262:	d009      	beq.n	800a278 <xQueueGenericCreateStatic+0xb4>
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	61bb      	str	r3, [r7, #24]
 800a276:	e7fe      	b.n	800a276 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a278:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00d      	beq.n	800a2a0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	2201      	movs	r2, #1
 800a288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a28c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	4613      	mov	r3, r2
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68b9      	ldr	r1, [r7, #8]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 f844 	bl	800a328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3730      	adds	r7, #48	; 0x30
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b08a      	sub	sp, #40	; 0x28
 800a2ae:	af02      	add	r7, sp, #8
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d109      	bne.n	800a2d2 <xQueueGenericCreate+0x28>
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	e7fe      	b.n	800a2d0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61fb      	str	r3, [r7, #28]
 800a2dc:	e004      	b.n	800a2e8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	fb02 f303 	mul.w	r3, r2, r3
 800a2e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3350      	adds	r3, #80	; 0x50
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f002 fc6f 	bl	800cbd0 <pvPortMalloc>
 800a2f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d011      	beq.n	800a31e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	3350      	adds	r3, #80	; 0x50
 800a302:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a30c:	79fa      	ldrb	r2, [r7, #7]
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	4613      	mov	r3, r2
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	68b9      	ldr	r1, [r7, #8]
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f805 	bl	800a328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a31e:	69bb      	ldr	r3, [r7, #24]
	}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d103      	bne.n	800a344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	e002      	b.n	800a34a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a356:	2101      	movs	r1, #1
 800a358:	69b8      	ldr	r0, [r7, #24]
 800a35a:	f7ff fecb 	bl	800a0f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	78fa      	ldrb	r2, [r7, #3]
 800a362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a366:	bf00      	nop
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00e      	beq.n	800a39a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a38e:	2300      	movs	r3, #0
 800a390:	2200      	movs	r2, #0
 800a392:	2100      	movs	r1, #0
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f89f 	bl	800a4d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	6939      	ldr	r1, [r7, #16]
 800a3ba:	6978      	ldr	r0, [r7, #20]
 800a3bc:	f7ff ff75 	bl	800a2aa <xQueueGenericCreate>
 800a3c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7ff ffd3 	bl	800a36e <prvInitialiseMutex>

		return xNewQueue;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
	}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b088      	sub	sp, #32
 800a3d6:	af02      	add	r7, sp, #8
 800a3d8:	4603      	mov	r3, r0
 800a3da:	6039      	str	r1, [r7, #0]
 800a3dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	617b      	str	r3, [r7, #20]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	6939      	ldr	r1, [r7, #16]
 800a3f0:	6978      	ldr	r0, [r7, #20]
 800a3f2:	f7ff fee7 	bl	800a1c4 <xQueueGenericCreateStatic>
 800a3f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f7ff ffb8 	bl	800a36e <prvInitialiseMutex>

		return xNewQueue;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
	}
 800a400:	4618      	mov	r0, r3
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <xQueueGiveMutexRecursive+0x26>
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	e7fe      	b.n	800a42c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	689c      	ldr	r4, [r3, #8]
 800a432:	f001 fc59 	bl	800bce8 <xTaskGetCurrentTaskHandle>
 800a436:	4603      	mov	r3, r0
 800a438:	429c      	cmp	r4, r3
 800a43a:	d111      	bne.n	800a460 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	1e5a      	subs	r2, r3, #1
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d105      	bne.n	800a45a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a44e:	2300      	movs	r3, #0
 800a450:	2200      	movs	r2, #0
 800a452:	2100      	movs	r1, #0
 800a454:	6938      	ldr	r0, [r7, #16]
 800a456:	f000 f83f 	bl	800a4d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a45a:	2301      	movs	r3, #1
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	e001      	b.n	800a464 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a464:	697b      	ldr	r3, [r7, #20]
	}
 800a466:	4618      	mov	r0, r3
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd90      	pop	{r4, r7, pc}

0800a46e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a46e:	b590      	push	{r4, r7, lr}
 800a470:	b087      	sub	sp, #28
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d109      	bne.n	800a496 <xQueueTakeMutexRecursive+0x28>
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e7fe      	b.n	800a494 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	689c      	ldr	r4, [r3, #8]
 800a49a:	f001 fc25 	bl	800bce8 <xTaskGetCurrentTaskHandle>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	429c      	cmp	r4, r3
 800a4a2:	d107      	bne.n	800a4b4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]
 800a4b2:	e00c      	b.n	800a4ce <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6938      	ldr	r0, [r7, #16]
 800a4b8:	f000 fa78 	bl	800a9ac <xQueueSemaphoreTake>
 800a4bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d004      	beq.n	800a4ce <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a4ce:	697b      	ldr	r3, [r7, #20]
	}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd90      	pop	{r4, r7, pc}

0800a4d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08e      	sub	sp, #56	; 0x38
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <xQueueGenericSend+0x30>
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
 800a506:	e7fe      	b.n	800a506 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <xQueueGenericSend+0x3e>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <xQueueGenericSend+0x42>
 800a516:	2301      	movs	r3, #1
 800a518:	e000      	b.n	800a51c <xQueueGenericSend+0x44>
 800a51a:	2300      	movs	r3, #0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d109      	bne.n	800a534 <xQueueGenericSend+0x5c>
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
 800a532:	e7fe      	b.n	800a532 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b02      	cmp	r3, #2
 800a538:	d103      	bne.n	800a542 <xQueueGenericSend+0x6a>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <xQueueGenericSend+0x6e>
 800a542:	2301      	movs	r3, #1
 800a544:	e000      	b.n	800a548 <xQueueGenericSend+0x70>
 800a546:	2300      	movs	r3, #0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d109      	bne.n	800a560 <xQueueGenericSend+0x88>
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	623b      	str	r3, [r7, #32]
 800a55e:	e7fe      	b.n	800a55e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a560:	f001 fbd2 	bl	800bd08 <xTaskGetSchedulerState>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <xQueueGenericSend+0x98>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d101      	bne.n	800a574 <xQueueGenericSend+0x9c>
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <xQueueGenericSend+0x9e>
 800a574:	2300      	movs	r3, #0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d109      	bne.n	800a58e <xQueueGenericSend+0xb6>
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	e7fe      	b.n	800a58c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a58e:	f002 fa05 	bl	800c99c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d302      	bcc.n	800a5a4 <xQueueGenericSend+0xcc>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d129      	bne.n	800a5f8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5aa:	f000 fb9c 	bl	800ace6 <prvCopyDataToQueue>
 800a5ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d010      	beq.n	800a5da <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	3324      	adds	r3, #36	; 0x24
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f001 f9dd 	bl	800b97c <xTaskRemoveFromEventList>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d013      	beq.n	800a5f0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5c8:	4b3f      	ldr	r3, [pc, #252]	; (800a6c8 <xQueueGenericSend+0x1f0>)
 800a5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	e00a      	b.n	800a5f0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d007      	beq.n	800a5f0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5e0:	4b39      	ldr	r3, [pc, #228]	; (800a6c8 <xQueueGenericSend+0x1f0>)
 800a5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5f0:	f002 fa02 	bl	800c9f8 <vPortExitCritical>
				return pdPASS;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e063      	b.n	800a6c0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d103      	bne.n	800a606 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5fe:	f002 f9fb 	bl	800c9f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a602:	2300      	movs	r3, #0
 800a604:	e05c      	b.n	800a6c0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d106      	bne.n	800a61a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a60c:	f107 0314 	add.w	r3, r7, #20
 800a610:	4618      	mov	r0, r3
 800a612:	f001 fa15 	bl	800ba40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a616:	2301      	movs	r3, #1
 800a618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a61a:	f002 f9ed 	bl	800c9f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a61e:	f000 ff7f 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a622:	f002 f9bb 	bl	800c99c <vPortEnterCritical>
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a62c:	b25b      	sxtb	r3, r3
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d103      	bne.n	800a63c <xQueueGenericSend+0x164>
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a642:	b25b      	sxtb	r3, r3
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a648:	d103      	bne.n	800a652 <xQueueGenericSend+0x17a>
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a652:	f002 f9d1 	bl	800c9f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a656:	1d3a      	adds	r2, r7, #4
 800a658:	f107 0314 	add.w	r3, r7, #20
 800a65c:	4611      	mov	r1, r2
 800a65e:	4618      	mov	r0, r3
 800a660:	f001 fa04 	bl	800ba6c <xTaskCheckForTimeOut>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d124      	bne.n	800a6b4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a66a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a66c:	f000 fc33 	bl	800aed6 <prvIsQueueFull>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d018      	beq.n	800a6a8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	3310      	adds	r3, #16
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	4611      	mov	r1, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 f92e 	bl	800b8e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a686:	f000 fbbe 	bl	800ae06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a68a:	f000 ff57 	bl	800b53c <xTaskResumeAll>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	f47f af7c 	bne.w	800a58e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a696:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <xQueueGenericSend+0x1f0>)
 800a698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	e772      	b.n	800a58e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6aa:	f000 fbac 	bl	800ae06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6ae:	f000 ff45 	bl	800b53c <xTaskResumeAll>
 800a6b2:	e76c      	b.n	800a58e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6b6:	f000 fba6 	bl	800ae06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ba:	f000 ff3f 	bl	800b53c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3738      	adds	r7, #56	; 0x38
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08e      	sub	sp, #56	; 0x38
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d109      	bne.n	800a6f8 <xQueueGenericSendFromISR+0x2c>
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f6:	e7fe      	b.n	800a6f6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d103      	bne.n	800a706 <xQueueGenericSendFromISR+0x3a>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <xQueueGenericSendFromISR+0x3e>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <xQueueGenericSendFromISR+0x40>
 800a70a:	2300      	movs	r3, #0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <xQueueGenericSendFromISR+0x58>
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	623b      	str	r3, [r7, #32]
 800a722:	e7fe      	b.n	800a722 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d103      	bne.n	800a732 <xQueueGenericSendFromISR+0x66>
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d101      	bne.n	800a736 <xQueueGenericSendFromISR+0x6a>
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <xQueueGenericSendFromISR+0x6c>
 800a736:	2300      	movs	r3, #0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d109      	bne.n	800a750 <xQueueGenericSendFromISR+0x84>
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	e7fe      	b.n	800a74e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a750:	f002 fa00 	bl	800cb54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a754:	f3ef 8211 	mrs	r2, BASEPRI
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	61ba      	str	r2, [r7, #24]
 800a76a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a76c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a76e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a778:	429a      	cmp	r2, r3
 800a77a:	d302      	bcc.n	800a782 <xQueueGenericSendFromISR+0xb6>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d12c      	bne.n	800a7dc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	68b9      	ldr	r1, [r7, #8]
 800a790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a792:	f000 faa8 	bl	800ace6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a796:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	d112      	bne.n	800a7c6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d016      	beq.n	800a7d6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	3324      	adds	r3, #36	; 0x24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f001 f8e5 	bl	800b97c <xTaskRemoveFromEventList>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00e      	beq.n	800a7d6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	e007      	b.n	800a7d6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	b25a      	sxtb	r2, r3
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a7da:	e001      	b.n	800a7e0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3738      	adds	r7, #56	; 0x38
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08c      	sub	sp, #48	; 0x30
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a800:	2300      	movs	r3, #0
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <xQueueReceive+0x2e>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	623b      	str	r3, [r7, #32]
 800a820:	e7fe      	b.n	800a820 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d103      	bne.n	800a830 <xQueueReceive+0x3c>
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <xQueueReceive+0x40>
 800a830:	2301      	movs	r3, #1
 800a832:	e000      	b.n	800a836 <xQueueReceive+0x42>
 800a834:	2300      	movs	r3, #0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d109      	bne.n	800a84e <xQueueReceive+0x5a>
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e7fe      	b.n	800a84c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a84e:	f001 fa5b 	bl	800bd08 <xTaskGetSchedulerState>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d102      	bne.n	800a85e <xQueueReceive+0x6a>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <xQueueReceive+0x6e>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <xQueueReceive+0x70>
 800a862:	2300      	movs	r3, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d109      	bne.n	800a87c <xQueueReceive+0x88>
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	61bb      	str	r3, [r7, #24]
 800a87a:	e7fe      	b.n	800a87a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a87c:	f002 f88e 	bl	800c99c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01f      	beq.n	800a8cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a88c:	68b9      	ldr	r1, [r7, #8]
 800a88e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a890:	f000 fa93 	bl	800adba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	1e5a      	subs	r2, r3, #1
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00f      	beq.n	800a8c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	3310      	adds	r3, #16
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 f867 	bl	800b97c <xTaskRemoveFromEventList>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d007      	beq.n	800a8c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8b4:	4b3c      	ldr	r3, [pc, #240]	; (800a9a8 <xQueueReceive+0x1b4>)
 800a8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8c4:	f002 f898 	bl	800c9f8 <vPortExitCritical>
				return pdPASS;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e069      	b.n	800a9a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8d2:	f002 f891 	bl	800c9f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e062      	b.n	800a9a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8e0:	f107 0310 	add.w	r3, r7, #16
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f001 f8ab 	bl	800ba40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8ee:	f002 f883 	bl	800c9f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8f2:	f000 fe15 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8f6:	f002 f851 	bl	800c99c <vPortEnterCritical>
 800a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a900:	b25b      	sxtb	r3, r3
 800a902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a906:	d103      	bne.n	800a910 <xQueueReceive+0x11c>
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a916:	b25b      	sxtb	r3, r3
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91c:	d103      	bne.n	800a926 <xQueueReceive+0x132>
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a926:	f002 f867 	bl	800c9f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a92a:	1d3a      	adds	r2, r7, #4
 800a92c:	f107 0310 	add.w	r3, r7, #16
 800a930:	4611      	mov	r1, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f001 f89a 	bl	800ba6c <xTaskCheckForTimeOut>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d123      	bne.n	800a986 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a93e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a940:	f000 fab3 	bl	800aeaa <prvIsQueueEmpty>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d017      	beq.n	800a97a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	3324      	adds	r3, #36	; 0x24
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	4611      	mov	r1, r2
 800a952:	4618      	mov	r0, r3
 800a954:	f000 ffc4 	bl	800b8e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a95a:	f000 fa54 	bl	800ae06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a95e:	f000 fded 	bl	800b53c <xTaskResumeAll>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d189      	bne.n	800a87c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a968:	4b0f      	ldr	r3, [pc, #60]	; (800a9a8 <xQueueReceive+0x1b4>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	e780      	b.n	800a87c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a97a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a97c:	f000 fa43 	bl	800ae06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a980:	f000 fddc 	bl	800b53c <xTaskResumeAll>
 800a984:	e77a      	b.n	800a87c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a988:	f000 fa3d 	bl	800ae06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a98c:	f000 fdd6 	bl	800b53c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a992:	f000 fa8a 	bl	800aeaa <prvIsQueueEmpty>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f43f af6f 	beq.w	800a87c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a99e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3730      	adds	r7, #48	; 0x30
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	e000ed04 	.word	0xe000ed04

0800a9ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08e      	sub	sp, #56	; 0x38
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d109      	bne.n	800a9dc <xQueueSemaphoreTake+0x30>
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	623b      	str	r3, [r7, #32]
 800a9da:	e7fe      	b.n	800a9da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <xQueueSemaphoreTake+0x4c>
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	61fb      	str	r3, [r7, #28]
 800a9f6:	e7fe      	b.n	800a9f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9f8:	f001 f986 	bl	800bd08 <xTaskGetSchedulerState>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d102      	bne.n	800aa08 <xQueueSemaphoreTake+0x5c>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <xQueueSemaphoreTake+0x60>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e000      	b.n	800aa0e <xQueueSemaphoreTake+0x62>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d109      	bne.n	800aa26 <xQueueSemaphoreTake+0x7a>
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	61bb      	str	r3, [r7, #24]
 800aa24:	e7fe      	b.n	800aa24 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa26:	f001 ffb9 	bl	800c99c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d024      	beq.n	800aa80 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	1e5a      	subs	r2, r3, #1
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d104      	bne.n	800aa50 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa46:	f001 fad1 	bl	800bfec <pvTaskIncrementMutexHeldCount>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00f      	beq.n	800aa78 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	3310      	adds	r3, #16
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 ff8d 	bl	800b97c <xTaskRemoveFromEventList>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d007      	beq.n	800aa78 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa68:	4b53      	ldr	r3, [pc, #332]	; (800abb8 <xQueueSemaphoreTake+0x20c>)
 800aa6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa78:	f001 ffbe 	bl	800c9f8 <vPortExitCritical>
				return pdPASS;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e096      	b.n	800abae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d110      	bne.n	800aaa8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d009      	beq.n	800aaa0 <xQueueSemaphoreTake+0xf4>
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e7fe      	b.n	800aa9e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aaa0:	f001 ffaa 	bl	800c9f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e082      	b.n	800abae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaae:	f107 030c 	add.w	r3, r7, #12
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 ffc4 	bl	800ba40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aab8:	2301      	movs	r3, #1
 800aaba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aabc:	f001 ff9c 	bl	800c9f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac0:	f000 fd2e 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac4:	f001 ff6a 	bl	800c99c <vPortEnterCritical>
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aace:	b25b      	sxtb	r3, r3
 800aad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad4:	d103      	bne.n	800aade <xQueueSemaphoreTake+0x132>
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aae4:	b25b      	sxtb	r3, r3
 800aae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaea:	d103      	bne.n	800aaf4 <xQueueSemaphoreTake+0x148>
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf4:	f001 ff80 	bl	800c9f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf8:	463a      	mov	r2, r7
 800aafa:	f107 030c 	add.w	r3, r7, #12
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 ffb3 	bl	800ba6c <xTaskCheckForTimeOut>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d132      	bne.n	800ab72 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab0e:	f000 f9cc 	bl	800aeaa <prvIsQueueEmpty>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d026      	beq.n	800ab66 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d109      	bne.n	800ab34 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800ab20:	f001 ff3c 	bl	800c99c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 f90b 	bl	800bd44 <xTaskPriorityInherit>
 800ab2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ab30:	f001 ff62 	bl	800c9f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab36:	3324      	adds	r3, #36	; 0x24
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 fecf 	bl	800b8e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab44:	f000 f95f 	bl	800ae06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab48:	f000 fcf8 	bl	800b53c <xTaskResumeAll>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f47f af69 	bne.w	800aa26 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ab54:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <xQueueSemaphoreTake+0x20c>)
 800ab56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	e75f      	b.n	800aa26 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab68:	f000 f94d 	bl	800ae06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab6c:	f000 fce6 	bl	800b53c <xTaskResumeAll>
 800ab70:	e759      	b.n	800aa26 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab74:	f000 f947 	bl	800ae06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab78:	f000 fce0 	bl	800b53c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab7e:	f000 f994 	bl	800aeaa <prvIsQueueEmpty>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f43f af4e 	beq.w	800aa26 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00d      	beq.n	800abac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ab90:	f001 ff04 	bl	800c99c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab96:	f000 f88e 	bl	800acb6 <prvGetDisinheritPriorityAfterTimeout>
 800ab9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 f9a2 	bl	800beec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aba8:	f001 ff26 	bl	800c9f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3738      	adds	r7, #56	; 0x38
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08e      	sub	sp, #56	; 0x38
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d109      	bne.n	800abe6 <xQueueReceiveFromISR+0x2a>
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	623b      	str	r3, [r7, #32]
 800abe4:	e7fe      	b.n	800abe4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d103      	bne.n	800abf4 <xQueueReceiveFromISR+0x38>
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <xQueueReceiveFromISR+0x3c>
 800abf4:	2301      	movs	r3, #1
 800abf6:	e000      	b.n	800abfa <xQueueReceiveFromISR+0x3e>
 800abf8:	2300      	movs	r3, #0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d109      	bne.n	800ac12 <xQueueReceiveFromISR+0x56>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	e7fe      	b.n	800ac10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac12:	f001 ff9f 	bl	800cb54 <vPortValidateInterruptPriority>
	__asm volatile
 800ac16:	f3ef 8211 	mrs	r2, BASEPRI
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	61ba      	str	r2, [r7, #24]
 800ac2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ac2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d02f      	beq.n	800ac9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac4c:	f000 f8b5 	bl	800adba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	1e5a      	subs	r2, r3, #1
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac60:	d112      	bne.n	800ac88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d016      	beq.n	800ac98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	3310      	adds	r3, #16
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fe84 	bl	800b97c <xTaskRemoveFromEventList>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00e      	beq.n	800ac98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	e007      	b.n	800ac98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	b25a      	sxtb	r2, r3
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9c:	e001      	b.n	800aca2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3738      	adds	r7, #56	; 0x38
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800acb6:	b480      	push	{r7}
 800acb8:	b085      	sub	sp, #20
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	e001      	b.n	800acd8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800acd8:	68fb      	ldr	r3, [r7, #12]
	}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b086      	sub	sp, #24
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10d      	bne.n	800ad20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d14d      	bne.n	800ada8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f001 f87f 	bl	800be14 <xTaskPriorityDisinherit>
 800ad16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	609a      	str	r2, [r3, #8]
 800ad1e:	e043      	b.n	800ada8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d119      	bne.n	800ad5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6858      	ldr	r0, [r3, #4]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2e:	461a      	mov	r2, r3
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	f002 fec7 	bl	800dac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	685a      	ldr	r2, [r3, #4]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	441a      	add	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d32b      	bcc.n	800ada8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	605a      	str	r2, [r3, #4]
 800ad58:	e026      	b.n	800ada8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	68d8      	ldr	r0, [r3, #12]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	461a      	mov	r2, r3
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	f002 fead 	bl	800dac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad72:	425b      	negs	r3, r3
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d207      	bcs.n	800ad96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	689a      	ldr	r2, [r3, #8]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	425b      	negs	r3, r3
 800ad90:	441a      	add	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d105      	bne.n	800ada8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800adb0:	697b      	ldr	r3, [r7, #20]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3718      	adds	r7, #24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b082      	sub	sp, #8
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d018      	beq.n	800adfe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add4:	441a      	add	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d303      	bcc.n	800adee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68d9      	ldr	r1, [r3, #12]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf6:	461a      	mov	r2, r3
 800adf8:	6838      	ldr	r0, [r7, #0]
 800adfa:	f002 fe63 	bl	800dac4 <memcpy>
	}
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae0e:	f001 fdc5 	bl	800c99c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae1a:	e011      	b.n	800ae40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d012      	beq.n	800ae4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3324      	adds	r3, #36	; 0x24
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fda7 	bl	800b97c <xTaskRemoveFromEventList>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae34:	f000 fe7a 	bl	800bb2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dce9      	bgt.n	800ae1c <prvUnlockQueue+0x16>
 800ae48:	e000      	b.n	800ae4c <prvUnlockQueue+0x46>
					break;
 800ae4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	22ff      	movs	r2, #255	; 0xff
 800ae50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae54:	f001 fdd0 	bl	800c9f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae58:	f001 fda0 	bl	800c99c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae64:	e011      	b.n	800ae8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d012      	beq.n	800ae94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3310      	adds	r3, #16
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 fd82 	bl	800b97c <xTaskRemoveFromEventList>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae7e:	f000 fe55 	bl	800bb2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	3b01      	subs	r3, #1
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dce9      	bgt.n	800ae66 <prvUnlockQueue+0x60>
 800ae92:	e000      	b.n	800ae96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	22ff      	movs	r2, #255	; 0xff
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ae9e:	f001 fdab 	bl	800c9f8 <vPortExitCritical>
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aeb2:	f001 fd73 	bl	800c99c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d102      	bne.n	800aec4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	60fb      	str	r3, [r7, #12]
 800aec2:	e001      	b.n	800aec8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aec8:	f001 fd96 	bl	800c9f8 <vPortExitCritical>

	return xReturn;
 800aecc:	68fb      	ldr	r3, [r7, #12]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b084      	sub	sp, #16
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aede:	f001 fd5d 	bl	800c99c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d102      	bne.n	800aef4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aeee:	2301      	movs	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	e001      	b.n	800aef8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aef8:	f001 fd7e 	bl	800c9f8 <vPortExitCritical>

	return xReturn;
 800aefc:	68fb      	ldr	r3, [r7, #12]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	e014      	b.n	800af42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af18:	4a0e      	ldr	r2, [pc, #56]	; (800af54 <vQueueAddToRegistry+0x4c>)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10b      	bne.n	800af3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af24:	490b      	ldr	r1, [pc, #44]	; (800af54 <vQueueAddToRegistry+0x4c>)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af2e:	4a09      	ldr	r2, [pc, #36]	; (800af54 <vQueueAddToRegistry+0x4c>)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	4413      	add	r3, r2
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af3a:	e005      	b.n	800af48 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2b07      	cmp	r3, #7
 800af46:	d9e7      	bls.n	800af18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af48:	bf00      	nop
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	2000c104 	.word	0x2000c104

0800af58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af68:	f001 fd18 	bl	800c99c <vPortEnterCritical>
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af72:	b25b      	sxtb	r3, r3
 800af74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af78:	d103      	bne.n	800af82 <vQueueWaitForMessageRestricted+0x2a>
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af88:	b25b      	sxtb	r3, r3
 800af8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8e:	d103      	bne.n	800af98 <vQueueWaitForMessageRestricted+0x40>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af98:	f001 fd2e 	bl	800c9f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d106      	bne.n	800afb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	3324      	adds	r3, #36	; 0x24
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fcbb 	bl	800b928 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afb2:	6978      	ldr	r0, [r7, #20]
 800afb4:	f7ff ff27 	bl	800ae06 <prvUnlockQueue>
	}
 800afb8:	bf00      	nop
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08e      	sub	sp, #56	; 0x38
 800afc4:	af04      	add	r7, sp, #16
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800afce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d109      	bne.n	800afe8 <xTaskCreateStatic+0x28>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	623b      	str	r3, [r7, #32]
 800afe6:	e7fe      	b.n	800afe6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	2b00      	cmp	r3, #0
 800afec:	d109      	bne.n	800b002 <xTaskCreateStatic+0x42>
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	61fb      	str	r3, [r7, #28]
 800b000:	e7fe      	b.n	800b000 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b002:	235c      	movs	r3, #92	; 0x5c
 800b004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b5c      	cmp	r3, #92	; 0x5c
 800b00a:	d009      	beq.n	800b020 <xTaskCreateStatic+0x60>
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	61bb      	str	r3, [r7, #24]
 800b01e:	e7fe      	b.n	800b01e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b020:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01e      	beq.n	800b066 <xTaskCreateStatic+0xa6>
 800b028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d01b      	beq.n	800b066 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b036:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	2202      	movs	r2, #2
 800b03c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b040:	2300      	movs	r3, #0
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	9302      	str	r3, [sp, #8]
 800b048:	f107 0314 	add.w	r3, r7, #20
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	68b9      	ldr	r1, [r7, #8]
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 f850 	bl	800b0fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b05e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b060:	f000 f8dc 	bl	800b21c <prvAddNewTaskToReadyList>
 800b064:	e001      	b.n	800b06a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b06a:	697b      	ldr	r3, [r7, #20]
	}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3728      	adds	r7, #40	; 0x28
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08c      	sub	sp, #48	; 0x30
 800b078:	af04      	add	r7, sp, #16
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	4613      	mov	r3, r2
 800b082:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b084:	88fb      	ldrh	r3, [r7, #6]
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4618      	mov	r0, r3
 800b08a:	f001 fda1 	bl	800cbd0 <pvPortMalloc>
 800b08e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00e      	beq.n	800b0b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b096:	205c      	movs	r0, #92	; 0x5c
 800b098:	f001 fd9a 	bl	800cbd0 <pvPortMalloc>
 800b09c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d003      	beq.n	800b0ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	631a      	str	r2, [r3, #48]	; 0x30
 800b0aa:	e005      	b.n	800b0b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0ac:	6978      	ldr	r0, [r7, #20]
 800b0ae:	f001 fe51 	bl	800cd54 <vPortFree>
 800b0b2:	e001      	b.n	800b0b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d017      	beq.n	800b0ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0c6:	88fa      	ldrh	r2, [r7, #6]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9303      	str	r3, [sp, #12]
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f80e 	bl	800b0fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0e2:	69f8      	ldr	r0, [r7, #28]
 800b0e4:	f000 f89a 	bl	800b21c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	61bb      	str	r3, [r7, #24]
 800b0ec:	e002      	b.n	800b0f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0f4:	69bb      	ldr	r3, [r7, #24]
	}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b088      	sub	sp, #32
 800b102:	af00      	add	r7, sp, #0
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	60b9      	str	r1, [r7, #8]
 800b108:	607a      	str	r2, [r7, #4]
 800b10a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	461a      	mov	r2, r3
 800b116:	21a5      	movs	r1, #165	; 0xa5
 800b118:	f002 fcdf 	bl	800dada <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b126:	3b01      	subs	r3, #1
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	f023 0307 	bic.w	r3, r3, #7
 800b134:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	f003 0307 	and.w	r3, r3, #7
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d009      	beq.n	800b154 <prvInitialiseNewTask+0x56>
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	617b      	str	r3, [r7, #20]
 800b152:	e7fe      	b.n	800b152 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d01f      	beq.n	800b19a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b15a:	2300      	movs	r3, #0
 800b15c:	61fb      	str	r3, [r7, #28]
 800b15e:	e012      	b.n	800b186 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	7819      	ldrb	r1, [r3, #0]
 800b168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	4413      	add	r3, r2
 800b16e:	3334      	adds	r3, #52	; 0x34
 800b170:	460a      	mov	r2, r1
 800b172:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	4413      	add	r3, r2
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d006      	beq.n	800b18e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	3301      	adds	r3, #1
 800b184:	61fb      	str	r3, [r7, #28]
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	2b0f      	cmp	r3, #15
 800b18a:	d9e9      	bls.n	800b160 <prvInitialiseNewTask+0x62>
 800b18c:	e000      	b.n	800b190 <prvInitialiseNewTask+0x92>
			{
				break;
 800b18e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b198:	e003      	b.n	800b1a2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	2b37      	cmp	r3, #55	; 0x37
 800b1a6:	d901      	bls.n	800b1ac <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1a8:	2337      	movs	r3, #55	; 0x37
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe ff02 	bl	8009fcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	3318      	adds	r3, #24
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fefd 	bl	8009fcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	68f9      	ldr	r1, [r7, #12]
 800b1fa:	69b8      	ldr	r0, [r7, #24]
 800b1fc:	f001 faa4 	bl	800c748 <pxPortInitialiseStack>
 800b200:	4602      	mov	r2, r0
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b212:	bf00      	nop
 800b214:	3720      	adds	r7, #32
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b224:	f001 fbba 	bl	800c99c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b228:	4b2d      	ldr	r3, [pc, #180]	; (800b2e0 <prvAddNewTaskToReadyList+0xc4>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3301      	adds	r3, #1
 800b22e:	4a2c      	ldr	r2, [pc, #176]	; (800b2e0 <prvAddNewTaskToReadyList+0xc4>)
 800b230:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b232:	4b2c      	ldr	r3, [pc, #176]	; (800b2e4 <prvAddNewTaskToReadyList+0xc8>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b23a:	4a2a      	ldr	r2, [pc, #168]	; (800b2e4 <prvAddNewTaskToReadyList+0xc8>)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b240:	4b27      	ldr	r3, [pc, #156]	; (800b2e0 <prvAddNewTaskToReadyList+0xc4>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d110      	bne.n	800b26a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b248:	f000 fc94 	bl	800bb74 <prvInitialiseTaskLists>
 800b24c:	e00d      	b.n	800b26a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b24e:	4b26      	ldr	r3, [pc, #152]	; (800b2e8 <prvAddNewTaskToReadyList+0xcc>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d109      	bne.n	800b26a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b256:	4b23      	ldr	r3, [pc, #140]	; (800b2e4 <prvAddNewTaskToReadyList+0xc8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	429a      	cmp	r2, r3
 800b262:	d802      	bhi.n	800b26a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b264:	4a1f      	ldr	r2, [pc, #124]	; (800b2e4 <prvAddNewTaskToReadyList+0xc8>)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b26a:	4b20      	ldr	r3, [pc, #128]	; (800b2ec <prvAddNewTaskToReadyList+0xd0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3301      	adds	r3, #1
 800b270:	4a1e      	ldr	r2, [pc, #120]	; (800b2ec <prvAddNewTaskToReadyList+0xd0>)
 800b272:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b274:	4b1d      	ldr	r3, [pc, #116]	; (800b2ec <prvAddNewTaskToReadyList+0xd0>)
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b280:	4b1b      	ldr	r3, [pc, #108]	; (800b2f0 <prvAddNewTaskToReadyList+0xd4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d903      	bls.n	800b290 <prvAddNewTaskToReadyList+0x74>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	4a18      	ldr	r2, [pc, #96]	; (800b2f0 <prvAddNewTaskToReadyList+0xd4>)
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	4613      	mov	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4a15      	ldr	r2, [pc, #84]	; (800b2f4 <prvAddNewTaskToReadyList+0xd8>)
 800b29e:	441a      	add	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f7fe fe9d 	bl	8009fe6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2ac:	f001 fba4 	bl	800c9f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2b0:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <prvAddNewTaskToReadyList+0xcc>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00e      	beq.n	800b2d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <prvAddNewTaskToReadyList+0xc8>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d207      	bcs.n	800b2d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <prvAddNewTaskToReadyList+0xdc>)
 800b2c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000da8 	.word	0x20000da8
 800b2e4:	200008d4 	.word	0x200008d4
 800b2e8:	20000db4 	.word	0x20000db4
 800b2ec:	20000dc4 	.word	0x20000dc4
 800b2f0:	20000db0 	.word	0x20000db0
 800b2f4:	200008d8 	.word	0x200008d8
 800b2f8:	e000ed04 	.word	0xe000ed04

0800b2fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	; 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b306:	2300      	movs	r3, #0
 800b308:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d109      	bne.n	800b324 <vTaskDelayUntil+0x28>
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	617b      	str	r3, [r7, #20]
 800b322:	e7fe      	b.n	800b322 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <vTaskDelayUntil+0x42>
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	613b      	str	r3, [r7, #16]
 800b33c:	e7fe      	b.n	800b33c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800b33e:	4b29      	ldr	r3, [pc, #164]	; (800b3e4 <vTaskDelayUntil+0xe8>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d009      	beq.n	800b35a <vTaskDelayUntil+0x5e>
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	e7fe      	b.n	800b358 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800b35a:	f000 f8e1 	bl	800b520 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b35e:	4b22      	ldr	r3, [pc, #136]	; (800b3e8 <vTaskDelayUntil+0xec>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	4413      	add	r3, r2
 800b36c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6a3a      	ldr	r2, [r7, #32]
 800b374:	429a      	cmp	r2, r3
 800b376:	d20b      	bcs.n	800b390 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	69fa      	ldr	r2, [r7, #28]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d211      	bcs.n	800b3a6 <vTaskDelayUntil+0xaa>
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	429a      	cmp	r2, r3
 800b388:	d90d      	bls.n	800b3a6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b38a:	2301      	movs	r3, #1
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
 800b38e:	e00a      	b.n	800b3a6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	69fa      	ldr	r2, [r7, #28]
 800b396:	429a      	cmp	r2, r3
 800b398:	d303      	bcc.n	800b3a2 <vTaskDelayUntil+0xa6>
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d901      	bls.n	800b3a6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	69fa      	ldr	r2, [r7, #28]
 800b3aa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d006      	beq.n	800b3c0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b3b2:	69fa      	ldr	r2, [r7, #28]
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 fe2a 	bl	800c014 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b3c0:	f000 f8bc 	bl	800b53c <xTaskResumeAll>
 800b3c4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d107      	bne.n	800b3dc <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800b3cc:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <vTaskDelayUntil+0xf0>)
 800b3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3dc:	bf00      	nop
 800b3de:	3728      	adds	r7, #40	; 0x28
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	20000dd0 	.word	0x20000dd0
 800b3e8:	20000dac 	.word	0x20000dac
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d016      	beq.n	800b430 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b402:	4b13      	ldr	r3, [pc, #76]	; (800b450 <vTaskDelay+0x60>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d009      	beq.n	800b41e <vTaskDelay+0x2e>
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	60bb      	str	r3, [r7, #8]
 800b41c:	e7fe      	b.n	800b41c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b41e:	f000 f87f 	bl	800b520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b422:	2100      	movs	r1, #0
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fdf5 	bl	800c014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b42a:	f000 f887 	bl	800b53c <xTaskResumeAll>
 800b42e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d107      	bne.n	800b446 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b436:	4b07      	ldr	r3, [pc, #28]	; (800b454 <vTaskDelay+0x64>)
 800b438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20000dd0 	.word	0x20000dd0
 800b454:	e000ed04 	.word	0xe000ed04

0800b458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08a      	sub	sp, #40	; 0x28
 800b45c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b462:	2300      	movs	r3, #0
 800b464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b466:	463a      	mov	r2, r7
 800b468:	1d39      	adds	r1, r7, #4
 800b46a:	f107 0308 	add.w	r3, r7, #8
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe fd58 	bl	8009f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	9202      	str	r2, [sp, #8]
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	2300      	movs	r3, #0
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	2300      	movs	r3, #0
 800b484:	460a      	mov	r2, r1
 800b486:	4920      	ldr	r1, [pc, #128]	; (800b508 <vTaskStartScheduler+0xb0>)
 800b488:	4820      	ldr	r0, [pc, #128]	; (800b50c <vTaskStartScheduler+0xb4>)
 800b48a:	f7ff fd99 	bl	800afc0 <xTaskCreateStatic>
 800b48e:	4602      	mov	r2, r0
 800b490:	4b1f      	ldr	r3, [pc, #124]	; (800b510 <vTaskStartScheduler+0xb8>)
 800b492:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b494:	4b1e      	ldr	r3, [pc, #120]	; (800b510 <vTaskStartScheduler+0xb8>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b49c:	2301      	movs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e001      	b.n	800b4a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d102      	bne.n	800b4b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4ac:	f000 fe06 	bl	800c0bc <xTimerCreateTimerTask>
 800b4b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d115      	bne.n	800b4e4 <vTaskStartScheduler+0x8c>
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4ca:	4b12      	ldr	r3, [pc, #72]	; (800b514 <vTaskStartScheduler+0xbc>)
 800b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4d2:	4b11      	ldr	r3, [pc, #68]	; (800b518 <vTaskStartScheduler+0xc0>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4d8:	4b10      	ldr	r3, [pc, #64]	; (800b51c <vTaskStartScheduler+0xc4>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4de:	f001 f9bf 	bl	800c860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4e2:	e00d      	b.n	800b500 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ea:	d109      	bne.n	800b500 <vTaskStartScheduler+0xa8>
 800b4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	e7fe      	b.n	800b4fe <vTaskStartScheduler+0xa6>
}
 800b500:	bf00      	nop
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	0800e410 	.word	0x0800e410
 800b50c:	0800bb45 	.word	0x0800bb45
 800b510:	20000dcc 	.word	0x20000dcc
 800b514:	20000dc8 	.word	0x20000dc8
 800b518:	20000db4 	.word	0x20000db4
 800b51c:	20000dac 	.word	0x20000dac

0800b520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b524:	4b04      	ldr	r3, [pc, #16]	; (800b538 <vTaskSuspendAll+0x18>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	4a03      	ldr	r2, [pc, #12]	; (800b538 <vTaskSuspendAll+0x18>)
 800b52c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b52e:	bf00      	nop
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	20000dd0 	.word	0x20000dd0

0800b53c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b546:	2300      	movs	r3, #0
 800b548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b54a:	4b41      	ldr	r3, [pc, #260]	; (800b650 <xTaskResumeAll+0x114>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d109      	bne.n	800b566 <xTaskResumeAll+0x2a>
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	603b      	str	r3, [r7, #0]
 800b564:	e7fe      	b.n	800b564 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b566:	f001 fa19 	bl	800c99c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b56a:	4b39      	ldr	r3, [pc, #228]	; (800b650 <xTaskResumeAll+0x114>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3b01      	subs	r3, #1
 800b570:	4a37      	ldr	r2, [pc, #220]	; (800b650 <xTaskResumeAll+0x114>)
 800b572:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b574:	4b36      	ldr	r3, [pc, #216]	; (800b650 <xTaskResumeAll+0x114>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d162      	bne.n	800b642 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b57c:	4b35      	ldr	r3, [pc, #212]	; (800b654 <xTaskResumeAll+0x118>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d05e      	beq.n	800b642 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b584:	e02f      	b.n	800b5e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b586:	4b34      	ldr	r3, [pc, #208]	; (800b658 <xTaskResumeAll+0x11c>)
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3318      	adds	r3, #24
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe fd84 	bl	800a0a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3304      	adds	r3, #4
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe fd7f 	bl	800a0a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a6:	4b2d      	ldr	r3, [pc, #180]	; (800b65c <xTaskResumeAll+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d903      	bls.n	800b5b6 <xTaskResumeAll+0x7a>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b2:	4a2a      	ldr	r2, [pc, #168]	; (800b65c <xTaskResumeAll+0x120>)
 800b5b4:	6013      	str	r3, [r2, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4a27      	ldr	r2, [pc, #156]	; (800b660 <xTaskResumeAll+0x124>)
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	f7fe fd0a 	bl	8009fe6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d6:	4b23      	ldr	r3, [pc, #140]	; (800b664 <xTaskResumeAll+0x128>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d302      	bcc.n	800b5e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b5e0:	4b21      	ldr	r3, [pc, #132]	; (800b668 <xTaskResumeAll+0x12c>)
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5e6:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <xTaskResumeAll+0x11c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1cb      	bne.n	800b586 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5f4:	f000 fb58 	bl	800bca8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b5f8:	4b1c      	ldr	r3, [pc, #112]	; (800b66c <xTaskResumeAll+0x130>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d010      	beq.n	800b626 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b604:	f000 f858 	bl	800b6b8 <xTaskIncrementTick>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b60e:	4b16      	ldr	r3, [pc, #88]	; (800b668 <xTaskResumeAll+0x12c>)
 800b610:	2201      	movs	r2, #1
 800b612:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3b01      	subs	r3, #1
 800b618:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1f1      	bne.n	800b604 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b620:	4b12      	ldr	r3, [pc, #72]	; (800b66c <xTaskResumeAll+0x130>)
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b626:	4b10      	ldr	r3, [pc, #64]	; (800b668 <xTaskResumeAll+0x12c>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b62e:	2301      	movs	r3, #1
 800b630:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b632:	4b0f      	ldr	r3, [pc, #60]	; (800b670 <xTaskResumeAll+0x134>)
 800b634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b642:	f001 f9d9 	bl	800c9f8 <vPortExitCritical>

	return xAlreadyYielded;
 800b646:	68bb      	ldr	r3, [r7, #8]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20000dd0 	.word	0x20000dd0
 800b654:	20000da8 	.word	0x20000da8
 800b658:	20000d68 	.word	0x20000d68
 800b65c:	20000db0 	.word	0x20000db0
 800b660:	200008d8 	.word	0x200008d8
 800b664:	200008d4 	.word	0x200008d4
 800b668:	20000dbc 	.word	0x20000dbc
 800b66c:	20000db8 	.word	0x20000db8
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b67a:	4b05      	ldr	r3, [pc, #20]	; (800b690 <xTaskGetTickCount+0x1c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b680:	687b      	ldr	r3, [r7, #4]
}
 800b682:	4618      	mov	r0, r3
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	20000dac 	.word	0x20000dac

0800b694 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b69a:	f001 fa5b 	bl	800cb54 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b69e:	2300      	movs	r3, #0
 800b6a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b6a2:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <xTaskGetTickCountFromISR+0x20>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6a8:	683b      	ldr	r3, [r7, #0]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000dac 	.word	0x20000dac

0800b6b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c2:	4b4e      	ldr	r3, [pc, #312]	; (800b7fc <xTaskIncrementTick+0x144>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f040 8088 	bne.w	800b7dc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6cc:	4b4c      	ldr	r3, [pc, #304]	; (800b800 <xTaskIncrementTick+0x148>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6d4:	4a4a      	ldr	r2, [pc, #296]	; (800b800 <xTaskIncrementTick+0x148>)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d11f      	bne.n	800b720 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6e0:	4b48      	ldr	r3, [pc, #288]	; (800b804 <xTaskIncrementTick+0x14c>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d009      	beq.n	800b6fe <xTaskIncrementTick+0x46>
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	603b      	str	r3, [r7, #0]
 800b6fc:	e7fe      	b.n	800b6fc <xTaskIncrementTick+0x44>
 800b6fe:	4b41      	ldr	r3, [pc, #260]	; (800b804 <xTaskIncrementTick+0x14c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	4b40      	ldr	r3, [pc, #256]	; (800b808 <xTaskIncrementTick+0x150>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a3e      	ldr	r2, [pc, #248]	; (800b804 <xTaskIncrementTick+0x14c>)
 800b70a:	6013      	str	r3, [r2, #0]
 800b70c:	4a3e      	ldr	r2, [pc, #248]	; (800b808 <xTaskIncrementTick+0x150>)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6013      	str	r3, [r2, #0]
 800b712:	4b3e      	ldr	r3, [pc, #248]	; (800b80c <xTaskIncrementTick+0x154>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3301      	adds	r3, #1
 800b718:	4a3c      	ldr	r2, [pc, #240]	; (800b80c <xTaskIncrementTick+0x154>)
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	f000 fac4 	bl	800bca8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b720:	4b3b      	ldr	r3, [pc, #236]	; (800b810 <xTaskIncrementTick+0x158>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	429a      	cmp	r2, r3
 800b728:	d349      	bcc.n	800b7be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b72a:	4b36      	ldr	r3, [pc, #216]	; (800b804 <xTaskIncrementTick+0x14c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d104      	bne.n	800b73e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b734:	4b36      	ldr	r3, [pc, #216]	; (800b810 <xTaskIncrementTick+0x158>)
 800b736:	f04f 32ff 	mov.w	r2, #4294967295
 800b73a:	601a      	str	r2, [r3, #0]
					break;
 800b73c:	e03f      	b.n	800b7be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b73e:	4b31      	ldr	r3, [pc, #196]	; (800b804 <xTaskIncrementTick+0x14c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	429a      	cmp	r2, r3
 800b754:	d203      	bcs.n	800b75e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b756:	4a2e      	ldr	r2, [pc, #184]	; (800b810 <xTaskIncrementTick+0x158>)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b75c:	e02f      	b.n	800b7be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	3304      	adds	r3, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7fe fc9c 	bl	800a0a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d004      	beq.n	800b77a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3318      	adds	r3, #24
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe fc93 	bl	800a0a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77e:	4b25      	ldr	r3, [pc, #148]	; (800b814 <xTaskIncrementTick+0x15c>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	429a      	cmp	r2, r3
 800b784:	d903      	bls.n	800b78e <xTaskIncrementTick+0xd6>
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78a:	4a22      	ldr	r2, [pc, #136]	; (800b814 <xTaskIncrementTick+0x15c>)
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4a1f      	ldr	r2, [pc, #124]	; (800b818 <xTaskIncrementTick+0x160>)
 800b79c:	441a      	add	r2, r3
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	f7fe fc1e 	bl	8009fe6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ae:	4b1b      	ldr	r3, [pc, #108]	; (800b81c <xTaskIncrementTick+0x164>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d3b8      	bcc.n	800b72a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7bc:	e7b5      	b.n	800b72a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7be:	4b17      	ldr	r3, [pc, #92]	; (800b81c <xTaskIncrementTick+0x164>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c4:	4914      	ldr	r1, [pc, #80]	; (800b818 <xTaskIncrementTick+0x160>)
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	440b      	add	r3, r1
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d907      	bls.n	800b7e6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	e004      	b.n	800b7e6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b7dc:	4b10      	ldr	r3, [pc, #64]	; (800b820 <xTaskIncrementTick+0x168>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	4a0f      	ldr	r2, [pc, #60]	; (800b820 <xTaskIncrementTick+0x168>)
 800b7e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b7e6:	4b0f      	ldr	r3, [pc, #60]	; (800b824 <xTaskIncrementTick+0x16c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b7f2:	697b      	ldr	r3, [r7, #20]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	20000dd0 	.word	0x20000dd0
 800b800:	20000dac 	.word	0x20000dac
 800b804:	20000d60 	.word	0x20000d60
 800b808:	20000d64 	.word	0x20000d64
 800b80c:	20000dc0 	.word	0x20000dc0
 800b810:	20000dc8 	.word	0x20000dc8
 800b814:	20000db0 	.word	0x20000db0
 800b818:	200008d8 	.word	0x200008d8
 800b81c:	200008d4 	.word	0x200008d4
 800b820:	20000db8 	.word	0x20000db8
 800b824:	20000dbc 	.word	0x20000dbc

0800b828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b82e:	4b27      	ldr	r3, [pc, #156]	; (800b8cc <vTaskSwitchContext+0xa4>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b836:	4b26      	ldr	r3, [pc, #152]	; (800b8d0 <vTaskSwitchContext+0xa8>)
 800b838:	2201      	movs	r2, #1
 800b83a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b83c:	e040      	b.n	800b8c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b83e:	4b24      	ldr	r3, [pc, #144]	; (800b8d0 <vTaskSwitchContext+0xa8>)
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b844:	4b23      	ldr	r3, [pc, #140]	; (800b8d4 <vTaskSwitchContext+0xac>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	e00f      	b.n	800b86c <vTaskSwitchContext+0x44>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d109      	bne.n	800b866 <vTaskSwitchContext+0x3e>
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	e7fe      	b.n	800b864 <vTaskSwitchContext+0x3c>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3b01      	subs	r3, #1
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	491a      	ldr	r1, [pc, #104]	; (800b8d8 <vTaskSwitchContext+0xb0>)
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	4613      	mov	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	440b      	add	r3, r1
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d0e5      	beq.n	800b84c <vTaskSwitchContext+0x24>
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4613      	mov	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4a13      	ldr	r2, [pc, #76]	; (800b8d8 <vTaskSwitchContext+0xb0>)
 800b88c:	4413      	add	r3, r2
 800b88e:	60bb      	str	r3, [r7, #8]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	605a      	str	r2, [r3, #4]
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d104      	bne.n	800b8b0 <vTaskSwitchContext+0x88>
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	605a      	str	r2, [r3, #4]
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	4a09      	ldr	r2, [pc, #36]	; (800b8dc <vTaskSwitchContext+0xb4>)
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	4a06      	ldr	r2, [pc, #24]	; (800b8d4 <vTaskSwitchContext+0xac>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6013      	str	r3, [r2, #0]
}
 800b8c0:	bf00      	nop
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	20000dd0 	.word	0x20000dd0
 800b8d0:	20000dbc 	.word	0x20000dbc
 800b8d4:	20000db0 	.word	0x20000db0
 800b8d8:	200008d8 	.word	0x200008d8
 800b8dc:	200008d4 	.word	0x200008d4

0800b8e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d109      	bne.n	800b904 <vTaskPlaceOnEventList+0x24>
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	e7fe      	b.n	800b902 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b904:	4b07      	ldr	r3, [pc, #28]	; (800b924 <vTaskPlaceOnEventList+0x44>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3318      	adds	r3, #24
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7fe fb8e 	bl	800a02e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b912:	2101      	movs	r1, #1
 800b914:	6838      	ldr	r0, [r7, #0]
 800b916:	f000 fb7d 	bl	800c014 <prvAddCurrentTaskToDelayedList>
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	200008d4 	.word	0x200008d4

0800b928 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d109      	bne.n	800b94e <vTaskPlaceOnEventListRestricted+0x26>
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	617b      	str	r3, [r7, #20]
 800b94c:	e7fe      	b.n	800b94c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b94e:	4b0a      	ldr	r3, [pc, #40]	; (800b978 <vTaskPlaceOnEventListRestricted+0x50>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	3318      	adds	r3, #24
 800b954:	4619      	mov	r1, r3
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7fe fb45 	bl	8009fe6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d002      	beq.n	800b968 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b962:	f04f 33ff 	mov.w	r3, #4294967295
 800b966:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b968:	6879      	ldr	r1, [r7, #4]
 800b96a:	68b8      	ldr	r0, [r7, #8]
 800b96c:	f000 fb52 	bl	800c014 <prvAddCurrentTaskToDelayedList>
	}
 800b970:	bf00      	nop
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	200008d4 	.word	0x200008d4

0800b97c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d109      	bne.n	800b9a6 <xTaskRemoveFromEventList+0x2a>
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	e7fe      	b.n	800b9a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	3318      	adds	r3, #24
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe fb78 	bl	800a0a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9b0:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <xTaskRemoveFromEventList+0xac>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d11d      	bne.n	800b9f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe fb6f 	bl	800a0a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c6:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <xTaskRemoveFromEventList+0xb0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d903      	bls.n	800b9d6 <xTaskRemoveFromEventList+0x5a>
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d2:	4a16      	ldr	r2, [pc, #88]	; (800ba2c <xTaskRemoveFromEventList+0xb0>)
 800b9d4:	6013      	str	r3, [r2, #0]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9da:	4613      	mov	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4a13      	ldr	r2, [pc, #76]	; (800ba30 <xTaskRemoveFromEventList+0xb4>)
 800b9e4:	441a      	add	r2, r3
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	f7fe fafa 	bl	8009fe6 <vListInsertEnd>
 800b9f2:	e005      	b.n	800ba00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	3318      	adds	r3, #24
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	480e      	ldr	r0, [pc, #56]	; (800ba34 <xTaskRemoveFromEventList+0xb8>)
 800b9fc:	f7fe faf3 	bl	8009fe6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba04:	4b0c      	ldr	r3, [pc, #48]	; (800ba38 <xTaskRemoveFromEventList+0xbc>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d905      	bls.n	800ba1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba12:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <xTaskRemoveFromEventList+0xc0>)
 800ba14:	2201      	movs	r2, #1
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	e001      	b.n	800ba1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba1e:	697b      	ldr	r3, [r7, #20]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	20000dd0 	.word	0x20000dd0
 800ba2c:	20000db0 	.word	0x20000db0
 800ba30:	200008d8 	.word	0x200008d8
 800ba34:	20000d68 	.word	0x20000d68
 800ba38:	200008d4 	.word	0x200008d4
 800ba3c:	20000dbc 	.word	0x20000dbc

0800ba40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba48:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <vTaskInternalSetTimeOutState+0x24>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba50:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <vTaskInternalSetTimeOutState+0x28>)
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	605a      	str	r2, [r3, #4]
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	20000dc0 	.word	0x20000dc0
 800ba68:	20000dac 	.word	0x20000dac

0800ba6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d109      	bne.n	800ba90 <xTaskCheckForTimeOut+0x24>
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	e7fe      	b.n	800ba8e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d109      	bne.n	800baaa <xTaskCheckForTimeOut+0x3e>
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	60fb      	str	r3, [r7, #12]
 800baa8:	e7fe      	b.n	800baa8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800baaa:	f000 ff77 	bl	800c99c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800baae:	4b1d      	ldr	r3, [pc, #116]	; (800bb24 <xTaskCheckForTimeOut+0xb8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	69ba      	ldr	r2, [r7, #24]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac6:	d102      	bne.n	800bace <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bac8:	2300      	movs	r3, #0
 800baca:	61fb      	str	r3, [r7, #28]
 800bacc:	e023      	b.n	800bb16 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b15      	ldr	r3, [pc, #84]	; (800bb28 <xTaskCheckForTimeOut+0xbc>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d007      	beq.n	800baea <xTaskCheckForTimeOut+0x7e>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d302      	bcc.n	800baea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bae4:	2301      	movs	r3, #1
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	e015      	b.n	800bb16 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d20b      	bcs.n	800bb0c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	1ad2      	subs	r2, r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff ff9d 	bl	800ba40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	e004      	b.n	800bb16 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb12:	2301      	movs	r3, #1
 800bb14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb16:	f000 ff6f 	bl	800c9f8 <vPortExitCritical>

	return xReturn;
 800bb1a:	69fb      	ldr	r3, [r7, #28]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3720      	adds	r7, #32
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20000dac 	.word	0x20000dac
 800bb28:	20000dc0 	.word	0x20000dc0

0800bb2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb30:	4b03      	ldr	r3, [pc, #12]	; (800bb40 <vTaskMissedYield+0x14>)
 800bb32:	2201      	movs	r2, #1
 800bb34:	601a      	str	r2, [r3, #0]
}
 800bb36:	bf00      	nop
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	20000dbc 	.word	0x20000dbc

0800bb44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb4c:	f000 f852 	bl	800bbf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb50:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <prvIdleTask+0x28>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d9f9      	bls.n	800bb4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <prvIdleTask+0x2c>)
 800bb5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb5e:	601a      	str	r2, [r3, #0]
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb68:	e7f0      	b.n	800bb4c <prvIdleTask+0x8>
 800bb6a:	bf00      	nop
 800bb6c:	200008d8 	.word	0x200008d8
 800bb70:	e000ed04 	.word	0xe000ed04

0800bb74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	607b      	str	r3, [r7, #4]
 800bb7e:	e00c      	b.n	800bb9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4a12      	ldr	r2, [pc, #72]	; (800bbd4 <prvInitialiseTaskLists+0x60>)
 800bb8c:	4413      	add	r3, r2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe f9fc 	bl	8009f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	3301      	adds	r3, #1
 800bb98:	607b      	str	r3, [r7, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b37      	cmp	r3, #55	; 0x37
 800bb9e:	d9ef      	bls.n	800bb80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bba0:	480d      	ldr	r0, [pc, #52]	; (800bbd8 <prvInitialiseTaskLists+0x64>)
 800bba2:	f7fe f9f3 	bl	8009f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bba6:	480d      	ldr	r0, [pc, #52]	; (800bbdc <prvInitialiseTaskLists+0x68>)
 800bba8:	f7fe f9f0 	bl	8009f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbac:	480c      	ldr	r0, [pc, #48]	; (800bbe0 <prvInitialiseTaskLists+0x6c>)
 800bbae:	f7fe f9ed 	bl	8009f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbb2:	480c      	ldr	r0, [pc, #48]	; (800bbe4 <prvInitialiseTaskLists+0x70>)
 800bbb4:	f7fe f9ea 	bl	8009f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbb8:	480b      	ldr	r0, [pc, #44]	; (800bbe8 <prvInitialiseTaskLists+0x74>)
 800bbba:	f7fe f9e7 	bl	8009f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <prvInitialiseTaskLists+0x78>)
 800bbc0:	4a05      	ldr	r2, [pc, #20]	; (800bbd8 <prvInitialiseTaskLists+0x64>)
 800bbc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <prvInitialiseTaskLists+0x7c>)
 800bbc6:	4a05      	ldr	r2, [pc, #20]	; (800bbdc <prvInitialiseTaskLists+0x68>)
 800bbc8:	601a      	str	r2, [r3, #0]
}
 800bbca:	bf00      	nop
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	200008d8 	.word	0x200008d8
 800bbd8:	20000d38 	.word	0x20000d38
 800bbdc:	20000d4c 	.word	0x20000d4c
 800bbe0:	20000d68 	.word	0x20000d68
 800bbe4:	20000d7c 	.word	0x20000d7c
 800bbe8:	20000d94 	.word	0x20000d94
 800bbec:	20000d60 	.word	0x20000d60
 800bbf0:	20000d64 	.word	0x20000d64

0800bbf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbfa:	e019      	b.n	800bc30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbfc:	f000 fece 	bl	800c99c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc00:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <prvCheckTasksWaitingTermination+0x4c>)
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe fa47 	bl	800a0a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc12:	4b0c      	ldr	r3, [pc, #48]	; (800bc44 <prvCheckTasksWaitingTermination+0x50>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	4a0a      	ldr	r2, [pc, #40]	; (800bc44 <prvCheckTasksWaitingTermination+0x50>)
 800bc1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc1c:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <prvCheckTasksWaitingTermination+0x54>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3b01      	subs	r3, #1
 800bc22:	4a09      	ldr	r2, [pc, #36]	; (800bc48 <prvCheckTasksWaitingTermination+0x54>)
 800bc24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc26:	f000 fee7 	bl	800c9f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f80e 	bl	800bc4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <prvCheckTasksWaitingTermination+0x54>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1e1      	bne.n	800bbfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc38:	bf00      	nop
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000d7c 	.word	0x20000d7c
 800bc44:	20000da8 	.word	0x20000da8
 800bc48:	20000d90 	.word	0x20000d90

0800bc4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d108      	bne.n	800bc70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc62:	4618      	mov	r0, r3
 800bc64:	f001 f876 	bl	800cd54 <vPortFree>
				vPortFree( pxTCB );
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 f873 	bl	800cd54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc6e:	e017      	b.n	800bca0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d103      	bne.n	800bc82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f001 f86a 	bl	800cd54 <vPortFree>
	}
 800bc80:	e00e      	b.n	800bca0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d009      	beq.n	800bca0 <prvDeleteTCB+0x54>
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e7fe      	b.n	800bc9e <prvDeleteTCB+0x52>
	}
 800bca0:	bf00      	nop
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcae:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <prvResetNextTaskUnblockTime+0x38>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d104      	bne.n	800bcc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <prvResetNextTaskUnblockTime+0x3c>)
 800bcba:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcc0:	e008      	b.n	800bcd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc2:	4b07      	ldr	r3, [pc, #28]	; (800bce0 <prvResetNextTaskUnblockTime+0x38>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	4a04      	ldr	r2, [pc, #16]	; (800bce4 <prvResetNextTaskUnblockTime+0x3c>)
 800bcd2:	6013      	str	r3, [r2, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	20000d60 	.word	0x20000d60
 800bce4:	20000dc8 	.word	0x20000dc8

0800bce8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bcee:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <xTaskGetCurrentTaskHandle+0x1c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bcf4:	687b      	ldr	r3, [r7, #4]
	}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	200008d4 	.word	0x200008d4

0800bd08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd0e:	4b0b      	ldr	r3, [pc, #44]	; (800bd3c <xTaskGetSchedulerState+0x34>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd16:	2301      	movs	r3, #1
 800bd18:	607b      	str	r3, [r7, #4]
 800bd1a:	e008      	b.n	800bd2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd1c:	4b08      	ldr	r3, [pc, #32]	; (800bd40 <xTaskGetSchedulerState+0x38>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd24:	2302      	movs	r3, #2
 800bd26:	607b      	str	r3, [r7, #4]
 800bd28:	e001      	b.n	800bd2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd2e:	687b      	ldr	r3, [r7, #4]
	}
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	20000db4 	.word	0x20000db4
 800bd40:	20000dd0 	.word	0x20000dd0

0800bd44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d051      	beq.n	800bdfe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd5e:	4b2a      	ldr	r3, [pc, #168]	; (800be08 <xTaskPriorityInherit+0xc4>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d241      	bcs.n	800bdec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	db06      	blt.n	800bd7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd70:	4b25      	ldr	r3, [pc, #148]	; (800be08 <xTaskPriorityInherit+0xc4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	6959      	ldr	r1, [r3, #20]
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4a1f      	ldr	r2, [pc, #124]	; (800be0c <xTaskPriorityInherit+0xc8>)
 800bd90:	4413      	add	r3, r2
 800bd92:	4299      	cmp	r1, r3
 800bd94:	d122      	bne.n	800bddc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe f980 	bl	800a0a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bda0:	4b19      	ldr	r3, [pc, #100]	; (800be08 <xTaskPriorityInherit+0xc4>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdae:	4b18      	ldr	r3, [pc, #96]	; (800be10 <xTaskPriorityInherit+0xcc>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d903      	bls.n	800bdbe <xTaskPriorityInherit+0x7a>
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdba:	4a15      	ldr	r2, [pc, #84]	; (800be10 <xTaskPriorityInherit+0xcc>)
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4a10      	ldr	r2, [pc, #64]	; (800be0c <xTaskPriorityInherit+0xc8>)
 800bdcc:	441a      	add	r2, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	f7fe f906 	bl	8009fe6 <vListInsertEnd>
 800bdda:	e004      	b.n	800bde6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bddc:	4b0a      	ldr	r3, [pc, #40]	; (800be08 <xTaskPriorityInherit+0xc4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bde6:	2301      	movs	r3, #1
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	e008      	b.n	800bdfe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <xTaskPriorityInherit+0xc4>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d201      	bcs.n	800bdfe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
	}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	200008d4 	.word	0x200008d4
 800be0c:	200008d8 	.word	0x200008d8
 800be10:	20000db0 	.word	0x20000db0

0800be14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be20:	2300      	movs	r3, #0
 800be22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d054      	beq.n	800bed4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be2a:	4b2d      	ldr	r3, [pc, #180]	; (800bee0 <xTaskPriorityDisinherit+0xcc>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	429a      	cmp	r2, r3
 800be32:	d009      	beq.n	800be48 <xTaskPriorityDisinherit+0x34>
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	e7fe      	b.n	800be46 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <xTaskPriorityDisinherit+0x50>
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	e7fe      	b.n	800be62 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be68:	1e5a      	subs	r2, r3, #1
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be76:	429a      	cmp	r2, r3
 800be78:	d02c      	beq.n	800bed4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d128      	bne.n	800bed4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	3304      	adds	r3, #4
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe f90a 	bl	800a0a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea4:	4b0f      	ldr	r3, [pc, #60]	; (800bee4 <xTaskPriorityDisinherit+0xd0>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d903      	bls.n	800beb4 <xTaskPriorityDisinherit+0xa0>
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb0:	4a0c      	ldr	r2, [pc, #48]	; (800bee4 <xTaskPriorityDisinherit+0xd0>)
 800beb2:	6013      	str	r3, [r2, #0]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4a09      	ldr	r2, [pc, #36]	; (800bee8 <xTaskPriorityDisinherit+0xd4>)
 800bec2:	441a      	add	r2, r3
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f7fe f88b 	bl	8009fe6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bed0:	2301      	movs	r3, #1
 800bed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bed4:	697b      	ldr	r3, [r7, #20]
	}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	200008d4 	.word	0x200008d4
 800bee4:	20000db0 	.word	0x20000db0
 800bee8:	200008d8 	.word	0x200008d8

0800beec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800befa:	2301      	movs	r3, #1
 800befc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d068      	beq.n	800bfd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d109      	bne.n	800bf20 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	60fb      	str	r3, [r7, #12]
 800bf1e:	e7fe      	b.n	800bf1e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d902      	bls.n	800bf30 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	61fb      	str	r3, [r7, #28]
 800bf2e:	e002      	b.n	800bf36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	69fa      	ldr	r2, [r7, #28]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d04a      	beq.n	800bfd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d145      	bne.n	800bfd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf4a:	4b25      	ldr	r3, [pc, #148]	; (800bfe0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d109      	bne.n	800bf68 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	60bb      	str	r3, [r7, #8]
 800bf66:	e7fe      	b.n	800bf66 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	69fa      	ldr	r2, [r7, #28]
 800bf72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	db04      	blt.n	800bf86 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	6959      	ldr	r1, [r3, #20]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4a13      	ldr	r2, [pc, #76]	; (800bfe4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bf96:	4413      	add	r3, r2
 800bf98:	4299      	cmp	r1, r3
 800bf9a:	d11c      	bne.n	800bfd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fe f87d 	bl	800a0a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfaa:	4b0f      	ldr	r3, [pc, #60]	; (800bfe8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d903      	bls.n	800bfba <vTaskPriorityDisinheritAfterTimeout+0xce>
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb6:	4a0c      	ldr	r2, [pc, #48]	; (800bfe8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4a07      	ldr	r2, [pc, #28]	; (800bfe4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bfc8:	441a      	add	r2, r3
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4619      	mov	r1, r3
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	f7fe f808 	bl	8009fe6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfd6:	bf00      	nop
 800bfd8:	3720      	adds	r7, #32
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	200008d4 	.word	0x200008d4
 800bfe4:	200008d8 	.word	0x200008d8
 800bfe8:	20000db0 	.word	0x20000db0

0800bfec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bff0:	4b07      	ldr	r3, [pc, #28]	; (800c010 <pvTaskIncrementMutexHeldCount+0x24>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d004      	beq.n	800c002 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bff8:	4b05      	ldr	r3, [pc, #20]	; (800c010 <pvTaskIncrementMutexHeldCount+0x24>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bffe:	3201      	adds	r2, #1
 800c000:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c002:	4b03      	ldr	r3, [pc, #12]	; (800c010 <pvTaskIncrementMutexHeldCount+0x24>)
 800c004:	681b      	ldr	r3, [r3, #0]
	}
 800c006:	4618      	mov	r0, r3
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	200008d4 	.word	0x200008d4

0800c014 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c01e:	4b21      	ldr	r3, [pc, #132]	; (800c0a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c024:	4b20      	ldr	r3, [pc, #128]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	3304      	adds	r3, #4
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe f838 	bl	800a0a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c036:	d10a      	bne.n	800c04e <prvAddCurrentTaskToDelayedList+0x3a>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d007      	beq.n	800c04e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c03e:	4b1a      	ldr	r3, [pc, #104]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3304      	adds	r3, #4
 800c044:	4619      	mov	r1, r3
 800c046:	4819      	ldr	r0, [pc, #100]	; (800c0ac <prvAddCurrentTaskToDelayedList+0x98>)
 800c048:	f7fd ffcd 	bl	8009fe6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c04c:	e026      	b.n	800c09c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4413      	add	r3, r2
 800c054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c056:	4b14      	ldr	r3, [pc, #80]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	429a      	cmp	r2, r3
 800c064:	d209      	bcs.n	800c07a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c066:	4b12      	ldr	r3, [pc, #72]	; (800c0b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	4b0f      	ldr	r3, [pc, #60]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3304      	adds	r3, #4
 800c070:	4619      	mov	r1, r3
 800c072:	4610      	mov	r0, r2
 800c074:	f7fd ffdb 	bl	800a02e <vListInsert>
}
 800c078:	e010      	b.n	800c09c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c07a:	4b0e      	ldr	r3, [pc, #56]	; (800c0b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	4b0a      	ldr	r3, [pc, #40]	; (800c0a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3304      	adds	r3, #4
 800c084:	4619      	mov	r1, r3
 800c086:	4610      	mov	r0, r2
 800c088:	f7fd ffd1 	bl	800a02e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c08c:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	429a      	cmp	r2, r3
 800c094:	d202      	bcs.n	800c09c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c096:	4a08      	ldr	r2, [pc, #32]	; (800c0b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	6013      	str	r3, [r2, #0]
}
 800c09c:	bf00      	nop
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20000dac 	.word	0x20000dac
 800c0a8:	200008d4 	.word	0x200008d4
 800c0ac:	20000d94 	.word	0x20000d94
 800c0b0:	20000d64 	.word	0x20000d64
 800c0b4:	20000d60 	.word	0x20000d60
 800c0b8:	20000dc8 	.word	0x20000dc8

0800c0bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08a      	sub	sp, #40	; 0x28
 800c0c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0c6:	f000 faff 	bl	800c6c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0ca:	4b1c      	ldr	r3, [pc, #112]	; (800c13c <xTimerCreateTimerTask+0x80>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d021      	beq.n	800c116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0da:	1d3a      	adds	r2, r7, #4
 800c0dc:	f107 0108 	add.w	r1, r7, #8
 800c0e0:	f107 030c 	add.w	r3, r7, #12
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fd ff37 	bl	8009f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	9202      	str	r2, [sp, #8]
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	2302      	movs	r3, #2
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	460a      	mov	r2, r1
 800c0fc:	4910      	ldr	r1, [pc, #64]	; (800c140 <xTimerCreateTimerTask+0x84>)
 800c0fe:	4811      	ldr	r0, [pc, #68]	; (800c144 <xTimerCreateTimerTask+0x88>)
 800c100:	f7fe ff5e 	bl	800afc0 <xTaskCreateStatic>
 800c104:	4602      	mov	r2, r0
 800c106:	4b10      	ldr	r3, [pc, #64]	; (800c148 <xTimerCreateTimerTask+0x8c>)
 800c108:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c10a:	4b0f      	ldr	r3, [pc, #60]	; (800c148 <xTimerCreateTimerTask+0x8c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d001      	beq.n	800c116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c112:	2301      	movs	r3, #1
 800c114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d109      	bne.n	800c130 <xTimerCreateTimerTask+0x74>
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	613b      	str	r3, [r7, #16]
 800c12e:	e7fe      	b.n	800c12e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c130:	697b      	ldr	r3, [r7, #20]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	20000e04 	.word	0x20000e04
 800c140:	0800e418 	.word	0x0800e418
 800c144:	0800c27d 	.word	0x0800c27d
 800c148:	20000e08 	.word	0x20000e08

0800c14c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08a      	sub	sp, #40	; 0x28
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
 800c158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d109      	bne.n	800c178 <xTimerGenericCommand+0x2c>
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	623b      	str	r3, [r7, #32]
 800c176:	e7fe      	b.n	800c176 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c178:	4b19      	ldr	r3, [pc, #100]	; (800c1e0 <xTimerGenericCommand+0x94>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d02a      	beq.n	800c1d6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2b05      	cmp	r3, #5
 800c190:	dc18      	bgt.n	800c1c4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c192:	f7ff fdb9 	bl	800bd08 <xTaskGetSchedulerState>
 800c196:	4603      	mov	r3, r0
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d109      	bne.n	800c1b0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c19c:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <xTimerGenericCommand+0x94>)
 800c19e:	6818      	ldr	r0, [r3, #0]
 800c1a0:	f107 0110 	add.w	r1, r7, #16
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a8:	f7fe f996 	bl	800a4d8 <xQueueGenericSend>
 800c1ac:	6278      	str	r0, [r7, #36]	; 0x24
 800c1ae:	e012      	b.n	800c1d6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <xTimerGenericCommand+0x94>)
 800c1b2:	6818      	ldr	r0, [r3, #0]
 800c1b4:	f107 0110 	add.w	r1, r7, #16
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f7fe f98c 	bl	800a4d8 <xQueueGenericSend>
 800c1c0:	6278      	str	r0, [r7, #36]	; 0x24
 800c1c2:	e008      	b.n	800c1d6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1c4:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <xTimerGenericCommand+0x94>)
 800c1c6:	6818      	ldr	r0, [r3, #0]
 800c1c8:	f107 0110 	add.w	r1, r7, #16
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	f7fe fa7c 	bl	800a6cc <xQueueGenericSendFromISR>
 800c1d4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3728      	adds	r7, #40	; 0x28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	20000e04 	.word	0x20000e04

0800c1e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ee:	4b22      	ldr	r3, [pc, #136]	; (800c278 <prvProcessExpiredTimer+0x94>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fd ff4f 	bl	800a0a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d021      	beq.n	800c254 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	699a      	ldr	r2, [r3, #24]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	18d1      	adds	r1, r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	6978      	ldr	r0, [r7, #20]
 800c21e:	f000 f8d1 	bl	800c3c4 <prvInsertTimerInActiveList>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d01e      	beq.n	800c266 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c228:	2300      	movs	r3, #0
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	2300      	movs	r3, #0
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	2100      	movs	r1, #0
 800c232:	6978      	ldr	r0, [r7, #20]
 800c234:	f7ff ff8a 	bl	800c14c <xTimerGenericCommand>
 800c238:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d112      	bne.n	800c266 <prvProcessExpiredTimer+0x82>
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	e7fe      	b.n	800c252 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c25a:	f023 0301 	bic.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	6978      	ldr	r0, [r7, #20]
 800c26c:	4798      	blx	r3
}
 800c26e:	bf00      	nop
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20000dfc 	.word	0x20000dfc

0800c27c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c284:	f107 0308 	add.w	r3, r7, #8
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 f857 	bl	800c33c <prvGetNextExpireTime>
 800c28e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	4619      	mov	r1, r3
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 f803 	bl	800c2a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c29a:	f000 f8d5 	bl	800c448 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c29e:	e7f1      	b.n	800c284 <prvTimerTask+0x8>

0800c2a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2aa:	f7ff f939 	bl	800b520 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2ae:	f107 0308 	add.w	r3, r7, #8
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 f866 	bl	800c384 <prvSampleTimeNow>
 800c2b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d130      	bne.n	800c322 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10a      	bne.n	800c2dc <prvProcessTimerOrBlockTask+0x3c>
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d806      	bhi.n	800c2dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2ce:	f7ff f935 	bl	800b53c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2d2:	68f9      	ldr	r1, [r7, #12]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff85 	bl	800c1e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2da:	e024      	b.n	800c326 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d008      	beq.n	800c2f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2e2:	4b13      	ldr	r3, [pc, #76]	; (800c330 <prvProcessTimerOrBlockTask+0x90>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <prvProcessTimerOrBlockTask+0x50>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e000      	b.n	800c2f2 <prvProcessTimerOrBlockTask+0x52>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2f4:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <prvProcessTimerOrBlockTask+0x94>)
 800c2f6:	6818      	ldr	r0, [r3, #0]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	4619      	mov	r1, r3
 800c302:	f7fe fe29 	bl	800af58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c306:	f7ff f919 	bl	800b53c <xTaskResumeAll>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10a      	bne.n	800c326 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c310:	4b09      	ldr	r3, [pc, #36]	; (800c338 <prvProcessTimerOrBlockTask+0x98>)
 800c312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	f3bf 8f6f 	isb	sy
}
 800c320:	e001      	b.n	800c326 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c322:	f7ff f90b 	bl	800b53c <xTaskResumeAll>
}
 800c326:	bf00      	nop
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20000e00 	.word	0x20000e00
 800c334:	20000e04 	.word	0x20000e04
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c344:	4b0e      	ldr	r3, [pc, #56]	; (800c380 <prvGetNextExpireTime+0x44>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <prvGetNextExpireTime+0x16>
 800c34e:	2201      	movs	r2, #1
 800c350:	e000      	b.n	800c354 <prvGetNextExpireTime+0x18>
 800c352:	2200      	movs	r2, #0
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d105      	bne.n	800c36c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c360:	4b07      	ldr	r3, [pc, #28]	; (800c380 <prvGetNextExpireTime+0x44>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	e001      	b.n	800c370 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c370:	68fb      	ldr	r3, [r7, #12]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	20000dfc 	.word	0x20000dfc

0800c384 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c38c:	f7ff f972 	bl	800b674 <xTaskGetTickCount>
 800c390:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c392:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <prvSampleTimeNow+0x3c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d205      	bcs.n	800c3a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c39c:	f000 f930 	bl	800c600 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	e002      	b.n	800c3ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3ae:	4a04      	ldr	r2, [pc, #16]	; (800c3c0 <prvSampleTimeNow+0x3c>)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20000e0c 	.word	0x20000e0c

0800c3c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d812      	bhi.n	800c410 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	1ad2      	subs	r2, r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d302      	bcc.n	800c3fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	617b      	str	r3, [r7, #20]
 800c3fc:	e01b      	b.n	800c436 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3fe:	4b10      	ldr	r3, [pc, #64]	; (800c440 <prvInsertTimerInActiveList+0x7c>)
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	3304      	adds	r3, #4
 800c406:	4619      	mov	r1, r3
 800c408:	4610      	mov	r0, r2
 800c40a:	f7fd fe10 	bl	800a02e <vListInsert>
 800c40e:	e012      	b.n	800c436 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d206      	bcs.n	800c426 <prvInsertTimerInActiveList+0x62>
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d302      	bcc.n	800c426 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c420:	2301      	movs	r3, #1
 800c422:	617b      	str	r3, [r7, #20]
 800c424:	e007      	b.n	800c436 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c426:	4b07      	ldr	r3, [pc, #28]	; (800c444 <prvInsertTimerInActiveList+0x80>)
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3304      	adds	r3, #4
 800c42e:	4619      	mov	r1, r3
 800c430:	4610      	mov	r0, r2
 800c432:	f7fd fdfc 	bl	800a02e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c436:	697b      	ldr	r3, [r7, #20]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	20000e00 	.word	0x20000e00
 800c444:	20000dfc 	.word	0x20000dfc

0800c448 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08e      	sub	sp, #56	; 0x38
 800c44c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c44e:	e0c6      	b.n	800c5de <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	da17      	bge.n	800c486 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c456:	1d3b      	adds	r3, r7, #4
 800c458:	3304      	adds	r3, #4
 800c45a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d109      	bne.n	800c476 <prvProcessReceivedCommands+0x2e>
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	e7fe      	b.n	800c474 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c47c:	6850      	ldr	r0, [r2, #4]
 800c47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c480:	6892      	ldr	r2, [r2, #8]
 800c482:	4611      	mov	r1, r2
 800c484:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f2c0 80a7 	blt.w	800c5dc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d004      	beq.n	800c4a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49c:	3304      	adds	r3, #4
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fd fdfe 	bl	800a0a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4a4:	463b      	mov	r3, r7
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff ff6c 	bl	800c384 <prvSampleTimeNow>
 800c4ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b09      	cmp	r3, #9
 800c4b2:	f200 8094 	bhi.w	800c5de <prvProcessReceivedCommands+0x196>
 800c4b6:	a201      	add	r2, pc, #4	; (adr r2, 800c4bc <prvProcessReceivedCommands+0x74>)
 800c4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4bc:	0800c4e5 	.word	0x0800c4e5
 800c4c0:	0800c4e5 	.word	0x0800c4e5
 800c4c4:	0800c4e5 	.word	0x0800c4e5
 800c4c8:	0800c557 	.word	0x0800c557
 800c4cc:	0800c56b 	.word	0x0800c56b
 800c4d0:	0800c5b3 	.word	0x0800c5b3
 800c4d4:	0800c4e5 	.word	0x0800c4e5
 800c4d8:	0800c4e5 	.word	0x0800c4e5
 800c4dc:	0800c557 	.word	0x0800c557
 800c4e0:	0800c56b 	.word	0x0800c56b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4ea:	f043 0301 	orr.w	r3, r3, #1
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	18d1      	adds	r1, r2, r3
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c504:	f7ff ff5e 	bl	800c3c4 <prvInsertTimerInActiveList>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d067      	beq.n	800c5de <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c514:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d05c      	beq.n	800c5de <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	441a      	add	r2, r3
 800c52c:	2300      	movs	r3, #0
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	2300      	movs	r3, #0
 800c532:	2100      	movs	r1, #0
 800c534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c536:	f7ff fe09 	bl	800c14c <xTimerGenericCommand>
 800c53a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d14d      	bne.n	800c5de <prvProcessReceivedCommands+0x196>
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	61bb      	str	r3, [r7, #24]
 800c554:	e7fe      	b.n	800c554 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c55c:	f023 0301 	bic.w	r3, r3, #1
 800c560:	b2da      	uxtb	r2, r3
 800c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c564:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c568:	e039      	b.n	800c5de <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c570:	f043 0301 	orr.w	r3, r3, #1
 800c574:	b2da      	uxtb	r2, r3
 800c576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c580:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c584:	699b      	ldr	r3, [r3, #24]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d109      	bne.n	800c59e <prvProcessReceivedCommands+0x156>
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	617b      	str	r3, [r7, #20]
 800c59c:	e7fe      	b.n	800c59c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	699a      	ldr	r2, [r3, #24]
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	18d1      	adds	r1, r2, r3
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5ac:	f7ff ff0a 	bl	800c3c4 <prvInsertTimerInActiveList>
					break;
 800c5b0:	e015      	b.n	800c5de <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5c2:	f000 fbc7 	bl	800cd54 <vPortFree>
 800c5c6:	e00a      	b.n	800c5de <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5ce:	f023 0301 	bic.w	r3, r3, #1
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5da:	e000      	b.n	800c5de <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c5dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5de:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <prvProcessReceivedCommands+0x1b4>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	1d39      	adds	r1, r7, #4
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe f904 	bl	800a7f4 <xQueueReceive>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f47f af2e 	bne.w	800c450 <prvProcessReceivedCommands+0x8>
	}
}
 800c5f4:	bf00      	nop
 800c5f6:	3730      	adds	r7, #48	; 0x30
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	20000e04 	.word	0x20000e04

0800c600 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c606:	e047      	b.n	800c698 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c608:	4b2d      	ldr	r3, [pc, #180]	; (800c6c0 <prvSwitchTimerLists+0xc0>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c612:	4b2b      	ldr	r3, [pc, #172]	; (800c6c0 <prvSwitchTimerLists+0xc0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	3304      	adds	r3, #4
 800c620:	4618      	mov	r0, r3
 800c622:	f7fd fd3d 	bl	800a0a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c634:	f003 0304 	and.w	r3, r3, #4
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d02d      	beq.n	800c698 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	4413      	add	r3, r2
 800c644:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d90e      	bls.n	800c66c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c65a:	4b19      	ldr	r3, [pc, #100]	; (800c6c0 <prvSwitchTimerLists+0xc0>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3304      	adds	r3, #4
 800c662:	4619      	mov	r1, r3
 800c664:	4610      	mov	r0, r2
 800c666:	f7fd fce2 	bl	800a02e <vListInsert>
 800c66a:	e015      	b.n	800c698 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c66c:	2300      	movs	r3, #0
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	2300      	movs	r3, #0
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	2100      	movs	r1, #0
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f7ff fd68 	bl	800c14c <xTimerGenericCommand>
 800c67c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d109      	bne.n	800c698 <prvSwitchTimerLists+0x98>
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	603b      	str	r3, [r7, #0]
 800c696:	e7fe      	b.n	800c696 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c698:	4b09      	ldr	r3, [pc, #36]	; (800c6c0 <prvSwitchTimerLists+0xc0>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1b2      	bne.n	800c608 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6a2:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <prvSwitchTimerLists+0xc0>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6a8:	4b06      	ldr	r3, [pc, #24]	; (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a04      	ldr	r2, [pc, #16]	; (800c6c0 <prvSwitchTimerLists+0xc0>)
 800c6ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6b0:	4a04      	ldr	r2, [pc, #16]	; (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	6013      	str	r3, [r2, #0]
}
 800c6b6:	bf00      	nop
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	20000dfc 	.word	0x20000dfc
 800c6c4:	20000e00 	.word	0x20000e00

0800c6c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6ce:	f000 f965 	bl	800c99c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6d2:	4b15      	ldr	r3, [pc, #84]	; (800c728 <prvCheckForValidListAndQueue+0x60>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d120      	bne.n	800c71c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6da:	4814      	ldr	r0, [pc, #80]	; (800c72c <prvCheckForValidListAndQueue+0x64>)
 800c6dc:	f7fd fc56 	bl	8009f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6e0:	4813      	ldr	r0, [pc, #76]	; (800c730 <prvCheckForValidListAndQueue+0x68>)
 800c6e2:	f7fd fc53 	bl	8009f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6e6:	4b13      	ldr	r3, [pc, #76]	; (800c734 <prvCheckForValidListAndQueue+0x6c>)
 800c6e8:	4a10      	ldr	r2, [pc, #64]	; (800c72c <prvCheckForValidListAndQueue+0x64>)
 800c6ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6ec:	4b12      	ldr	r3, [pc, #72]	; (800c738 <prvCheckForValidListAndQueue+0x70>)
 800c6ee:	4a10      	ldr	r2, [pc, #64]	; (800c730 <prvCheckForValidListAndQueue+0x68>)
 800c6f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	4b11      	ldr	r3, [pc, #68]	; (800c73c <prvCheckForValidListAndQueue+0x74>)
 800c6f8:	4a11      	ldr	r2, [pc, #68]	; (800c740 <prvCheckForValidListAndQueue+0x78>)
 800c6fa:	2110      	movs	r1, #16
 800c6fc:	200a      	movs	r0, #10
 800c6fe:	f7fd fd61 	bl	800a1c4 <xQueueGenericCreateStatic>
 800c702:	4602      	mov	r2, r0
 800c704:	4b08      	ldr	r3, [pc, #32]	; (800c728 <prvCheckForValidListAndQueue+0x60>)
 800c706:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <prvCheckForValidListAndQueue+0x60>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d005      	beq.n	800c71c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c710:	4b05      	ldr	r3, [pc, #20]	; (800c728 <prvCheckForValidListAndQueue+0x60>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	490b      	ldr	r1, [pc, #44]	; (800c744 <prvCheckForValidListAndQueue+0x7c>)
 800c716:	4618      	mov	r0, r3
 800c718:	f7fe fbf6 	bl	800af08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c71c:	f000 f96c 	bl	800c9f8 <vPortExitCritical>
}
 800c720:	bf00      	nop
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20000e04 	.word	0x20000e04
 800c72c:	20000dd4 	.word	0x20000dd4
 800c730:	20000de8 	.word	0x20000de8
 800c734:	20000dfc 	.word	0x20000dfc
 800c738:	20000e00 	.word	0x20000e00
 800c73c:	20000eb0 	.word	0x20000eb0
 800c740:	20000e10 	.word	0x20000e10
 800c744:	0800e420 	.word	0x0800e420

0800c748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3b04      	subs	r3, #4
 800c758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3b04      	subs	r3, #4
 800c766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	f023 0201 	bic.w	r2, r3, #1
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3b04      	subs	r3, #4
 800c776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c778:	4a0c      	ldr	r2, [pc, #48]	; (800c7ac <pxPortInitialiseStack+0x64>)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3b14      	subs	r3, #20
 800c782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3b04      	subs	r3, #4
 800c78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f06f 0202 	mvn.w	r2, #2
 800c796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	3b20      	subs	r3, #32
 800c79c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c79e:	68fb      	ldr	r3, [r7, #12]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	0800c7b1 	.word	0x0800c7b1

0800c7b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7ba:	4b11      	ldr	r3, [pc, #68]	; (800c800 <prvTaskExitError+0x50>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c2:	d009      	beq.n	800c7d8 <prvTaskExitError+0x28>
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	60fb      	str	r3, [r7, #12]
 800c7d6:	e7fe      	b.n	800c7d6 <prvTaskExitError+0x26>
 800c7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7ea:	bf00      	nop
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0fc      	beq.n	800c7ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7f2:	bf00      	nop
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	2000011c 	.word	0x2000011c
	...

0800c810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <pxCurrentTCBConst2>)
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	6808      	ldr	r0, [r1, #0]
 800c816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	f380 8809 	msr	PSP, r0
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8811 	msr	BASEPRI, r0
 800c82a:	4770      	bx	lr
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst2>:
 800c830:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c838:	4808      	ldr	r0, [pc, #32]	; (800c85c <prvPortStartFirstTask+0x24>)
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	6800      	ldr	r0, [r0, #0]
 800c83e:	f380 8808 	msr	MSP, r0
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8814 	msr	CONTROL, r0
 800c84a:	b662      	cpsie	i
 800c84c:	b661      	cpsie	f
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	df00      	svc	0
 800c858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c85a:	bf00      	nop
 800c85c:	e000ed08 	.word	0xe000ed08

0800c860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c866:	4b44      	ldr	r3, [pc, #272]	; (800c978 <xPortStartScheduler+0x118>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a44      	ldr	r2, [pc, #272]	; (800c97c <xPortStartScheduler+0x11c>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d109      	bne.n	800c884 <xPortStartScheduler+0x24>
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
 800c882:	e7fe      	b.n	800c882 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c884:	4b3c      	ldr	r3, [pc, #240]	; (800c978 <xPortStartScheduler+0x118>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a3d      	ldr	r2, [pc, #244]	; (800c980 <xPortStartScheduler+0x120>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d109      	bne.n	800c8a2 <xPortStartScheduler+0x42>
 800c88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	e7fe      	b.n	800c8a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8a2:	4b38      	ldr	r3, [pc, #224]	; (800c984 <xPortStartScheduler+0x124>)
 800c8a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	22ff      	movs	r2, #255	; 0xff
 800c8b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8bc:	78fb      	ldrb	r3, [r7, #3]
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	4b30      	ldr	r3, [pc, #192]	; (800c988 <xPortStartScheduler+0x128>)
 800c8c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8ca:	4b30      	ldr	r3, [pc, #192]	; (800c98c <xPortStartScheduler+0x12c>)
 800c8cc:	2207      	movs	r2, #7
 800c8ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8d0:	e009      	b.n	800c8e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c8d2:	4b2e      	ldr	r3, [pc, #184]	; (800c98c <xPortStartScheduler+0x12c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	4a2c      	ldr	r2, [pc, #176]	; (800c98c <xPortStartScheduler+0x12c>)
 800c8da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8e6:	78fb      	ldrb	r3, [r7, #3]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ee:	2b80      	cmp	r3, #128	; 0x80
 800c8f0:	d0ef      	beq.n	800c8d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8f2:	4b26      	ldr	r3, [pc, #152]	; (800c98c <xPortStartScheduler+0x12c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f1c3 0307 	rsb	r3, r3, #7
 800c8fa:	2b04      	cmp	r3, #4
 800c8fc:	d009      	beq.n	800c912 <xPortStartScheduler+0xb2>
 800c8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	60bb      	str	r3, [r7, #8]
 800c910:	e7fe      	b.n	800c910 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c912:	4b1e      	ldr	r3, [pc, #120]	; (800c98c <xPortStartScheduler+0x12c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	021b      	lsls	r3, r3, #8
 800c918:	4a1c      	ldr	r2, [pc, #112]	; (800c98c <xPortStartScheduler+0x12c>)
 800c91a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c91c:	4b1b      	ldr	r3, [pc, #108]	; (800c98c <xPortStartScheduler+0x12c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c924:	4a19      	ldr	r2, [pc, #100]	; (800c98c <xPortStartScheduler+0x12c>)
 800c926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c930:	4b17      	ldr	r3, [pc, #92]	; (800c990 <xPortStartScheduler+0x130>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a16      	ldr	r2, [pc, #88]	; (800c990 <xPortStartScheduler+0x130>)
 800c936:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c93a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c93c:	4b14      	ldr	r3, [pc, #80]	; (800c990 <xPortStartScheduler+0x130>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a13      	ldr	r2, [pc, #76]	; (800c990 <xPortStartScheduler+0x130>)
 800c942:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c948:	f000 f8d6 	bl	800caf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c94c:	4b11      	ldr	r3, [pc, #68]	; (800c994 <xPortStartScheduler+0x134>)
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c952:	f000 f8f5 	bl	800cb40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c956:	4b10      	ldr	r3, [pc, #64]	; (800c998 <xPortStartScheduler+0x138>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a0f      	ldr	r2, [pc, #60]	; (800c998 <xPortStartScheduler+0x138>)
 800c95c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c960:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c962:	f7ff ff69 	bl	800c838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c966:	f7fe ff5f 	bl	800b828 <vTaskSwitchContext>
	prvTaskExitError();
 800c96a:	f7ff ff21 	bl	800c7b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	e000ed00 	.word	0xe000ed00
 800c97c:	410fc271 	.word	0x410fc271
 800c980:	410fc270 	.word	0x410fc270
 800c984:	e000e400 	.word	0xe000e400
 800c988:	20000f00 	.word	0x20000f00
 800c98c:	20000f04 	.word	0x20000f04
 800c990:	e000ed20 	.word	0xe000ed20
 800c994:	2000011c 	.word	0x2000011c
 800c998:	e000ef34 	.word	0xe000ef34

0800c99c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9b4:	4b0e      	ldr	r3, [pc, #56]	; (800c9f0 <vPortEnterCritical+0x54>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	4a0d      	ldr	r2, [pc, #52]	; (800c9f0 <vPortEnterCritical+0x54>)
 800c9bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9be:	4b0c      	ldr	r3, [pc, #48]	; (800c9f0 <vPortEnterCritical+0x54>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d10e      	bne.n	800c9e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9c6:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <vPortEnterCritical+0x58>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d009      	beq.n	800c9e4 <vPortEnterCritical+0x48>
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	603b      	str	r3, [r7, #0]
 800c9e2:	e7fe      	b.n	800c9e2 <vPortEnterCritical+0x46>
	}
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	2000011c 	.word	0x2000011c
 800c9f4:	e000ed04 	.word	0xe000ed04

0800c9f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9fe:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <vPortExitCritical+0x4c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d109      	bne.n	800ca1a <vPortExitCritical+0x22>
 800ca06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	607b      	str	r3, [r7, #4]
 800ca18:	e7fe      	b.n	800ca18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ca1a:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <vPortExitCritical+0x4c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	4a08      	ldr	r2, [pc, #32]	; (800ca44 <vPortExitCritical+0x4c>)
 800ca22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca24:	4b07      	ldr	r3, [pc, #28]	; (800ca44 <vPortExitCritical+0x4c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d104      	bne.n	800ca36 <vPortExitCritical+0x3e>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca36:	bf00      	nop
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	2000011c 	.word	0x2000011c
	...

0800ca50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca50:	f3ef 8009 	mrs	r0, PSP
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	4b15      	ldr	r3, [pc, #84]	; (800cab0 <pxCurrentTCBConst>)
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	f01e 0f10 	tst.w	lr, #16
 800ca60:	bf08      	it	eq
 800ca62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	6010      	str	r0, [r2, #0]
 800ca6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca74:	f380 8811 	msr	BASEPRI, r0
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f7fe fed2 	bl	800b828 <vTaskSwitchContext>
 800ca84:	f04f 0000 	mov.w	r0, #0
 800ca88:	f380 8811 	msr	BASEPRI, r0
 800ca8c:	bc09      	pop	{r0, r3}
 800ca8e:	6819      	ldr	r1, [r3, #0]
 800ca90:	6808      	ldr	r0, [r1, #0]
 800ca92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca96:	f01e 0f10 	tst.w	lr, #16
 800ca9a:	bf08      	it	eq
 800ca9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800caa0:	f380 8809 	msr	PSP, r0
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	f3af 8000 	nop.w

0800cab0 <pxCurrentTCBConst>:
 800cab0:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop

0800cab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cad0:	f7fe fdf2 	bl	800b6b8 <xTaskIncrementTick>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cada:	4b06      	ldr	r3, [pc, #24]	; (800caf4 <SysTick_Handler+0x3c>)
 800cadc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	2300      	movs	r3, #0
 800cae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800caec:	bf00      	nop
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	e000ed04 	.word	0xe000ed04

0800caf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cafc:	4b0b      	ldr	r3, [pc, #44]	; (800cb2c <vPortSetupTimerInterrupt+0x34>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb02:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <vPortSetupTimerInterrupt+0x38>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <vPortSetupTimerInterrupt+0x3c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a0a      	ldr	r2, [pc, #40]	; (800cb38 <vPortSetupTimerInterrupt+0x40>)
 800cb0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb12:	099b      	lsrs	r3, r3, #6
 800cb14:	4a09      	ldr	r2, [pc, #36]	; (800cb3c <vPortSetupTimerInterrupt+0x44>)
 800cb16:	3b01      	subs	r3, #1
 800cb18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb1a:	4b04      	ldr	r3, [pc, #16]	; (800cb2c <vPortSetupTimerInterrupt+0x34>)
 800cb1c:	2207      	movs	r2, #7
 800cb1e:	601a      	str	r2, [r3, #0]
}
 800cb20:	bf00      	nop
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	e000e010 	.word	0xe000e010
 800cb30:	e000e018 	.word	0xe000e018
 800cb34:	20000000 	.word	0x20000000
 800cb38:	10624dd3 	.word	0x10624dd3
 800cb3c:	e000e014 	.word	0xe000e014

0800cb40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb50 <vPortEnableVFP+0x10>
 800cb44:	6801      	ldr	r1, [r0, #0]
 800cb46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb4a:	6001      	str	r1, [r0, #0]
 800cb4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb4e:	bf00      	nop
 800cb50:	e000ed88 	.word	0xe000ed88

0800cb54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb5a:	f3ef 8305 	mrs	r3, IPSR
 800cb5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b0f      	cmp	r3, #15
 800cb64:	d913      	bls.n	800cb8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb66:	4a16      	ldr	r2, [pc, #88]	; (800cbc0 <vPortValidateInterruptPriority+0x6c>)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb70:	4b14      	ldr	r3, [pc, #80]	; (800cbc4 <vPortValidateInterruptPriority+0x70>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	7afa      	ldrb	r2, [r7, #11]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d209      	bcs.n	800cb8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	e7fe      	b.n	800cb8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb8e:	4b0e      	ldr	r3, [pc, #56]	; (800cbc8 <vPortValidateInterruptPriority+0x74>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb96:	4b0d      	ldr	r3, [pc, #52]	; (800cbcc <vPortValidateInterruptPriority+0x78>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d909      	bls.n	800cbb2 <vPortValidateInterruptPriority+0x5e>
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	e7fe      	b.n	800cbb0 <vPortValidateInterruptPriority+0x5c>
	}
 800cbb2:	bf00      	nop
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	e000e3f0 	.word	0xe000e3f0
 800cbc4:	20000f00 	.word	0x20000f00
 800cbc8:	e000ed0c 	.word	0xe000ed0c
 800cbcc:	20000f04 	.word	0x20000f04

0800cbd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08a      	sub	sp, #40	; 0x28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbdc:	f7fe fca0 	bl	800b520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbe0:	4b57      	ldr	r3, [pc, #348]	; (800cd40 <pvPortMalloc+0x170>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbe8:	f000 f90c 	bl	800ce04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbec:	4b55      	ldr	r3, [pc, #340]	; (800cd44 <pvPortMalloc+0x174>)
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f040 808c 	bne.w	800cd12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d01c      	beq.n	800cc3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cc00:	2208      	movs	r2, #8
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4413      	add	r3, r2
 800cc06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f003 0307 	and.w	r3, r3, #7
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d013      	beq.n	800cc3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f023 0307 	bic.w	r3, r3, #7
 800cc18:	3308      	adds	r3, #8
 800cc1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f003 0307 	and.w	r3, r3, #7
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d009      	beq.n	800cc3a <pvPortMalloc+0x6a>
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e7fe      	b.n	800cc38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d068      	beq.n	800cd12 <pvPortMalloc+0x142>
 800cc40:	4b41      	ldr	r3, [pc, #260]	; (800cd48 <pvPortMalloc+0x178>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d863      	bhi.n	800cd12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc4a:	4b40      	ldr	r3, [pc, #256]	; (800cd4c <pvPortMalloc+0x17c>)
 800cc4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc4e:	4b3f      	ldr	r3, [pc, #252]	; (800cd4c <pvPortMalloc+0x17c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc54:	e004      	b.n	800cc60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d903      	bls.n	800cc72 <pvPortMalloc+0xa2>
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1f1      	bne.n	800cc56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc72:	4b33      	ldr	r3, [pc, #204]	; (800cd40 <pvPortMalloc+0x170>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d04a      	beq.n	800cd12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2208      	movs	r2, #8
 800cc82:	4413      	add	r3, r2
 800cc84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	1ad2      	subs	r2, r2, r3
 800cc96:	2308      	movs	r3, #8
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d91e      	bls.n	800ccdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4413      	add	r3, r2
 800cca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	f003 0307 	and.w	r3, r3, #7
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d009      	beq.n	800ccc4 <pvPortMalloc+0xf4>
 800ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	613b      	str	r3, [r7, #16]
 800ccc2:	e7fe      	b.n	800ccc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	1ad2      	subs	r2, r2, r3
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccd6:	69b8      	ldr	r0, [r7, #24]
 800ccd8:	f000 f8f6 	bl	800cec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <pvPortMalloc+0x178>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	4a18      	ldr	r2, [pc, #96]	; (800cd48 <pvPortMalloc+0x178>)
 800cce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccea:	4b17      	ldr	r3, [pc, #92]	; (800cd48 <pvPortMalloc+0x178>)
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	4b18      	ldr	r3, [pc, #96]	; (800cd50 <pvPortMalloc+0x180>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d203      	bcs.n	800ccfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccf6:	4b14      	ldr	r3, [pc, #80]	; (800cd48 <pvPortMalloc+0x178>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a15      	ldr	r2, [pc, #84]	; (800cd50 <pvPortMalloc+0x180>)
 800ccfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	4b10      	ldr	r3, [pc, #64]	; (800cd44 <pvPortMalloc+0x174>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	431a      	orrs	r2, r3
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd12:	f7fe fc13 	bl	800b53c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	f003 0307 	and.w	r3, r3, #7
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d009      	beq.n	800cd34 <pvPortMalloc+0x164>
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	e7fe      	b.n	800cd32 <pvPortMalloc+0x162>
	return pvReturn;
 800cd34:	69fb      	ldr	r3, [r7, #28]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3728      	adds	r7, #40	; 0x28
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20001ac8 	.word	0x20001ac8
 800cd44:	20001ad4 	.word	0x20001ad4
 800cd48:	20001acc 	.word	0x20001acc
 800cd4c:	20001ac0 	.word	0x20001ac0
 800cd50:	20001ad0 	.word	0x20001ad0

0800cd54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d046      	beq.n	800cdf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd66:	2308      	movs	r3, #8
 800cd68:	425b      	negs	r3, r3
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	685a      	ldr	r2, [r3, #4]
 800cd78:	4b20      	ldr	r3, [pc, #128]	; (800cdfc <vPortFree+0xa8>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d109      	bne.n	800cd96 <vPortFree+0x42>
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	e7fe      	b.n	800cd94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d009      	beq.n	800cdb2 <vPortFree+0x5e>
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	60bb      	str	r3, [r7, #8]
 800cdb0:	e7fe      	b.n	800cdb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	4b11      	ldr	r3, [pc, #68]	; (800cdfc <vPortFree+0xa8>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4013      	ands	r3, r2
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d019      	beq.n	800cdf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d115      	bne.n	800cdf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	4b0b      	ldr	r3, [pc, #44]	; (800cdfc <vPortFree+0xa8>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	43db      	mvns	r3, r3
 800cdd2:	401a      	ands	r2, r3
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cdd8:	f7fe fba2 	bl	800b520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	685a      	ldr	r2, [r3, #4]
 800cde0:	4b07      	ldr	r3, [pc, #28]	; (800ce00 <vPortFree+0xac>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4413      	add	r3, r2
 800cde6:	4a06      	ldr	r2, [pc, #24]	; (800ce00 <vPortFree+0xac>)
 800cde8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdea:	6938      	ldr	r0, [r7, #16]
 800cdec:	f000 f86c 	bl	800cec8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cdf0:	f7fe fba4 	bl	800b53c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cdf4:	bf00      	nop
 800cdf6:	3718      	adds	r7, #24
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	20001ad4 	.word	0x20001ad4
 800ce00:	20001acc 	.word	0x20001acc

0800ce04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ce0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce10:	4b27      	ldr	r3, [pc, #156]	; (800ceb0 <prvHeapInit+0xac>)
 800ce12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00c      	beq.n	800ce38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	3307      	adds	r3, #7
 800ce22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f023 0307 	bic.w	r3, r3, #7
 800ce2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	4a1f      	ldr	r2, [pc, #124]	; (800ceb0 <prvHeapInit+0xac>)
 800ce34:	4413      	add	r3, r2
 800ce36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce3c:	4a1d      	ldr	r2, [pc, #116]	; (800ceb4 <prvHeapInit+0xb0>)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce42:	4b1c      	ldr	r3, [pc, #112]	; (800ceb4 <prvHeapInit+0xb0>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce50:	2208      	movs	r2, #8
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f023 0307 	bic.w	r3, r3, #7
 800ce5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4a15      	ldr	r2, [pc, #84]	; (800ceb8 <prvHeapInit+0xb4>)
 800ce64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce66:	4b14      	ldr	r3, [pc, #80]	; (800ceb8 <prvHeapInit+0xb4>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce6e:	4b12      	ldr	r3, [pc, #72]	; (800ceb8 <prvHeapInit+0xb4>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	1ad2      	subs	r2, r2, r3
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce84:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <prvHeapInit+0xb4>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	4a0a      	ldr	r2, [pc, #40]	; (800cebc <prvHeapInit+0xb8>)
 800ce92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	4a09      	ldr	r2, [pc, #36]	; (800cec0 <prvHeapInit+0xbc>)
 800ce9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce9c:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <prvHeapInit+0xc0>)
 800ce9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cea2:	601a      	str	r2, [r3, #0]
}
 800cea4:	bf00      	nop
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	20000f08 	.word	0x20000f08
 800ceb4:	20001ac0 	.word	0x20001ac0
 800ceb8:	20001ac8 	.word	0x20001ac8
 800cebc:	20001ad0 	.word	0x20001ad0
 800cec0:	20001acc 	.word	0x20001acc
 800cec4:	20001ad4 	.word	0x20001ad4

0800cec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ced0:	4b28      	ldr	r3, [pc, #160]	; (800cf74 <prvInsertBlockIntoFreeList+0xac>)
 800ced2:	60fb      	str	r3, [r7, #12]
 800ced4:	e002      	b.n	800cedc <prvInsertBlockIntoFreeList+0x14>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	60fb      	str	r3, [r7, #12]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d8f7      	bhi.n	800ced6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	4413      	add	r3, r2
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d108      	bne.n	800cf0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	441a      	add	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	441a      	add	r2, r3
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d118      	bne.n	800cf50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	4b15      	ldr	r3, [pc, #84]	; (800cf78 <prvInsertBlockIntoFreeList+0xb0>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d00d      	beq.n	800cf46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	441a      	add	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	e008      	b.n	800cf58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <prvInsertBlockIntoFreeList+0xb0>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	e003      	b.n	800cf58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d002      	beq.n	800cf66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf66:	bf00      	nop
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	20001ac0 	.word	0x20001ac0
 800cf78:	20001ac8 	.word	0x20001ac8

0800cf7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf80:	2200      	movs	r2, #0
 800cf82:	4912      	ldr	r1, [pc, #72]	; (800cfcc <MX_USB_DEVICE_Init+0x50>)
 800cf84:	4812      	ldr	r0, [pc, #72]	; (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cf86:	f7fb faa3 	bl	80084d0 <USBD_Init>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf90:	f7f3 ffc4 	bl	8000f1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf94:	490f      	ldr	r1, [pc, #60]	; (800cfd4 <MX_USB_DEVICE_Init+0x58>)
 800cf96:	480e      	ldr	r0, [pc, #56]	; (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cf98:	f7fb fac5 	bl	8008526 <USBD_RegisterClass>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cfa2:	f7f3 ffbb 	bl	8000f1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cfa6:	490c      	ldr	r1, [pc, #48]	; (800cfd8 <MX_USB_DEVICE_Init+0x5c>)
 800cfa8:	4809      	ldr	r0, [pc, #36]	; (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cfaa:	f7fb f9f3 	bl	8008394 <USBD_CDC_RegisterInterface>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cfb4:	f7f3 ffb2 	bl	8000f1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cfb8:	4805      	ldr	r0, [pc, #20]	; (800cfd0 <MX_USB_DEVICE_Init+0x54>)
 800cfba:	f7fb face 	bl	800855a <USBD_Start>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cfc4:	f7f3 ffaa 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cfc8:	bf00      	nop
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	20000130 	.word	0x20000130
 800cfd0:	2000c144 	.word	0x2000c144
 800cfd4:	20000018 	.word	0x20000018
 800cfd8:	20000120 	.word	0x20000120

0800cfdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	4905      	ldr	r1, [pc, #20]	; (800cff8 <CDC_Init_FS+0x1c>)
 800cfe4:	4805      	ldr	r0, [pc, #20]	; (800cffc <CDC_Init_FS+0x20>)
 800cfe6:	f7fb f9ec 	bl	80083c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cfea:	4905      	ldr	r1, [pc, #20]	; (800d000 <CDC_Init_FS+0x24>)
 800cfec:	4803      	ldr	r0, [pc, #12]	; (800cffc <CDC_Init_FS+0x20>)
 800cfee:	f7fb fa02 	bl	80083f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cff2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	2000c7f0 	.word	0x2000c7f0
 800cffc:	2000c144 	.word	0x2000c144
 800d000:	2000c408 	.word	0x2000c408

0800d004 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d004:	b480      	push	{r7}
 800d006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	6039      	str	r1, [r7, #0]
 800d01e:	71fb      	strb	r3, [r7, #7]
 800d020:	4613      	mov	r3, r2
 800d022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b23      	cmp	r3, #35	; 0x23
 800d028:	d84a      	bhi.n	800d0c0 <CDC_Control_FS+0xac>
 800d02a:	a201      	add	r2, pc, #4	; (adr r2, 800d030 <CDC_Control_FS+0x1c>)
 800d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d030:	0800d0c1 	.word	0x0800d0c1
 800d034:	0800d0c1 	.word	0x0800d0c1
 800d038:	0800d0c1 	.word	0x0800d0c1
 800d03c:	0800d0c1 	.word	0x0800d0c1
 800d040:	0800d0c1 	.word	0x0800d0c1
 800d044:	0800d0c1 	.word	0x0800d0c1
 800d048:	0800d0c1 	.word	0x0800d0c1
 800d04c:	0800d0c1 	.word	0x0800d0c1
 800d050:	0800d0c1 	.word	0x0800d0c1
 800d054:	0800d0c1 	.word	0x0800d0c1
 800d058:	0800d0c1 	.word	0x0800d0c1
 800d05c:	0800d0c1 	.word	0x0800d0c1
 800d060:	0800d0c1 	.word	0x0800d0c1
 800d064:	0800d0c1 	.word	0x0800d0c1
 800d068:	0800d0c1 	.word	0x0800d0c1
 800d06c:	0800d0c1 	.word	0x0800d0c1
 800d070:	0800d0c1 	.word	0x0800d0c1
 800d074:	0800d0c1 	.word	0x0800d0c1
 800d078:	0800d0c1 	.word	0x0800d0c1
 800d07c:	0800d0c1 	.word	0x0800d0c1
 800d080:	0800d0c1 	.word	0x0800d0c1
 800d084:	0800d0c1 	.word	0x0800d0c1
 800d088:	0800d0c1 	.word	0x0800d0c1
 800d08c:	0800d0c1 	.word	0x0800d0c1
 800d090:	0800d0c1 	.word	0x0800d0c1
 800d094:	0800d0c1 	.word	0x0800d0c1
 800d098:	0800d0c1 	.word	0x0800d0c1
 800d09c:	0800d0c1 	.word	0x0800d0c1
 800d0a0:	0800d0c1 	.word	0x0800d0c1
 800d0a4:	0800d0c1 	.word	0x0800d0c1
 800d0a8:	0800d0c1 	.word	0x0800d0c1
 800d0ac:	0800d0c1 	.word	0x0800d0c1
 800d0b0:	0800d0c1 	.word	0x0800d0c1
 800d0b4:	0800d0c1 	.word	0x0800d0c1
 800d0b8:	0800d0c1 	.word	0x0800d0c1
 800d0bc:	0800d0c1 	.word	0x0800d0c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d0c0:	bf00      	nop
  }

  return (USBD_OK);
 800d0c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	4805      	ldr	r0, [pc, #20]	; (800d0f4 <CDC_Receive_FS+0x24>)
 800d0de:	f7fb f98a 	bl	80083f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d0e2:	4804      	ldr	r0, [pc, #16]	; (800d0f4 <CDC_Receive_FS+0x24>)
 800d0e4:	f7fb f9ca 	bl	800847c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d0e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	2000c144 	.word	0x2000c144

0800d0f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d108:	4b0d      	ldr	r3, [pc, #52]	; (800d140 <CDC_Transmit_FS+0x48>)
 800d10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d10e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e00b      	b.n	800d136 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d11e:	887b      	ldrh	r3, [r7, #2]
 800d120:	461a      	mov	r2, r3
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	4806      	ldr	r0, [pc, #24]	; (800d140 <CDC_Transmit_FS+0x48>)
 800d126:	f7fb f94c 	bl	80083c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d12a:	4805      	ldr	r0, [pc, #20]	; (800d140 <CDC_Transmit_FS+0x48>)
 800d12c:	f7fb f977 	bl	800841e <USBD_CDC_TransmitPacket>
 800d130:	4603      	mov	r3, r0
 800d132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	2000c144 	.word	0x2000c144

0800d144 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	6039      	str	r1, [r7, #0]
 800d14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2212      	movs	r2, #18
 800d154:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d156:	4b03      	ldr	r3, [pc, #12]	; (800d164 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d158:	4618      	mov	r0, r3
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr
 800d164:	20000150 	.word	0x20000150

0800d168 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	6039      	str	r1, [r7, #0]
 800d172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	2204      	movs	r2, #4
 800d178:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d17a:	4b03      	ldr	r3, [pc, #12]	; (800d188 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	20000170 	.word	0x20000170

0800d18c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	4603      	mov	r3, r0
 800d194:	6039      	str	r1, [r7, #0]
 800d196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d198:	79fb      	ldrb	r3, [r7, #7]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d105      	bne.n	800d1aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	4907      	ldr	r1, [pc, #28]	; (800d1c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1a2:	4808      	ldr	r0, [pc, #32]	; (800d1c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1a4:	f7fc f974 	bl	8009490 <USBD_GetString>
 800d1a8:	e004      	b.n	800d1b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	4904      	ldr	r1, [pc, #16]	; (800d1c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d1ae:	4805      	ldr	r0, [pc, #20]	; (800d1c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d1b0:	f7fc f96e 	bl	8009490 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1b4:	4b02      	ldr	r3, [pc, #8]	; (800d1c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	2000cbd8 	.word	0x2000cbd8
 800d1c4:	0800e428 	.word	0x0800e428

0800d1c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	6039      	str	r1, [r7, #0]
 800d1d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	4904      	ldr	r1, [pc, #16]	; (800d1e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1d8:	4804      	ldr	r0, [pc, #16]	; (800d1ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1da:	f7fc f959 	bl	8009490 <USBD_GetString>
  return USBD_StrDesc;
 800d1de:	4b02      	ldr	r3, [pc, #8]	; (800d1e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	2000cbd8 	.word	0x2000cbd8
 800d1ec:	0800e440 	.word	0x0800e440

0800d1f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	6039      	str	r1, [r7, #0]
 800d1fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	221a      	movs	r2, #26
 800d200:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d202:	f000 f855 	bl	800d2b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d206:	4b02      	ldr	r3, [pc, #8]	; (800d210 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	20000174 	.word	0x20000174

0800d214 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	6039      	str	r1, [r7, #0]
 800d21e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d220:	79fb      	ldrb	r3, [r7, #7]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d105      	bne.n	800d232 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	4907      	ldr	r1, [pc, #28]	; (800d248 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d22a:	4808      	ldr	r0, [pc, #32]	; (800d24c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d22c:	f7fc f930 	bl	8009490 <USBD_GetString>
 800d230:	e004      	b.n	800d23c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	4904      	ldr	r1, [pc, #16]	; (800d248 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d236:	4805      	ldr	r0, [pc, #20]	; (800d24c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d238:	f7fc f92a 	bl	8009490 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d23c:	4b02      	ldr	r3, [pc, #8]	; (800d248 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	2000cbd8 	.word	0x2000cbd8
 800d24c:	0800e454 	.word	0x0800e454

0800d250 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	6039      	str	r1, [r7, #0]
 800d25a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d105      	bne.n	800d26e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	4907      	ldr	r1, [pc, #28]	; (800d284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d266:	4808      	ldr	r0, [pc, #32]	; (800d288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d268:	f7fc f912 	bl	8009490 <USBD_GetString>
 800d26c:	e004      	b.n	800d278 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	4904      	ldr	r1, [pc, #16]	; (800d284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d272:	4805      	ldr	r0, [pc, #20]	; (800d288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d274:	f7fc f90c 	bl	8009490 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d278:	4b02      	ldr	r3, [pc, #8]	; (800d284 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	2000cbd8 	.word	0x2000cbd8
 800d288:	0800e460 	.word	0x0800e460

0800d28c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	6039      	str	r1, [r7, #0]
 800d296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	220c      	movs	r2, #12
 800d29c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d29e:	4b03      	ldr	r3, [pc, #12]	; (800d2ac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	20000164 	.word	0x20000164

0800d2b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2b6:	4b0f      	ldr	r3, [pc, #60]	; (800d2f4 <Get_SerialNum+0x44>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2bc:	4b0e      	ldr	r3, [pc, #56]	; (800d2f8 <Get_SerialNum+0x48>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2c2:	4b0e      	ldr	r3, [pc, #56]	; (800d2fc <Get_SerialNum+0x4c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d009      	beq.n	800d2ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2d6:	2208      	movs	r2, #8
 800d2d8:	4909      	ldr	r1, [pc, #36]	; (800d300 <Get_SerialNum+0x50>)
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f000 f814 	bl	800d308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2e0:	2204      	movs	r2, #4
 800d2e2:	4908      	ldr	r1, [pc, #32]	; (800d304 <Get_SerialNum+0x54>)
 800d2e4:	68b8      	ldr	r0, [r7, #8]
 800d2e6:	f000 f80f 	bl	800d308 <IntToUnicode>
  }
}
 800d2ea:	bf00      	nop
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	1fff7590 	.word	0x1fff7590
 800d2f8:	1fff7594 	.word	0x1fff7594
 800d2fc:	1fff7598 	.word	0x1fff7598
 800d300:	20000176 	.word	0x20000176
 800d304:	20000186 	.word	0x20000186

0800d308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	4613      	mov	r3, r2
 800d314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d316:	2300      	movs	r3, #0
 800d318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d31a:	2300      	movs	r3, #0
 800d31c:	75fb      	strb	r3, [r7, #23]
 800d31e:	e027      	b.n	800d370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	0f1b      	lsrs	r3, r3, #28
 800d324:	2b09      	cmp	r3, #9
 800d326:	d80b      	bhi.n	800d340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	0f1b      	lsrs	r3, r3, #28
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	7dfb      	ldrb	r3, [r7, #23]
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	4619      	mov	r1, r3
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	440b      	add	r3, r1
 800d338:	3230      	adds	r2, #48	; 0x30
 800d33a:	b2d2      	uxtb	r2, r2
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	e00a      	b.n	800d356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	0f1b      	lsrs	r3, r3, #28
 800d344:	b2da      	uxtb	r2, r3
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	4619      	mov	r1, r3
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	440b      	add	r3, r1
 800d350:	3237      	adds	r2, #55	; 0x37
 800d352:	b2d2      	uxtb	r2, r2
 800d354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	011b      	lsls	r3, r3, #4
 800d35a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d35c:	7dfb      	ldrb	r3, [r7, #23]
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	3301      	adds	r3, #1
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	4413      	add	r3, r2
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d36a:	7dfb      	ldrb	r3, [r7, #23]
 800d36c:	3301      	adds	r3, #1
 800d36e:	75fb      	strb	r3, [r7, #23]
 800d370:	7dfa      	ldrb	r2, [r7, #23]
 800d372:	79fb      	ldrb	r3, [r7, #7]
 800d374:	429a      	cmp	r2, r3
 800d376:	d3d3      	bcc.n	800d320 <IntToUnicode+0x18>
  }
}
 800d378:	bf00      	nop
 800d37a:	371c      	adds	r7, #28
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a0d      	ldr	r2, [pc, #52]	; (800d3c8 <HAL_PCD_MspInit+0x44>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d113      	bne.n	800d3be <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d396:	4b0d      	ldr	r3, [pc, #52]	; (800d3cc <HAL_PCD_MspInit+0x48>)
 800d398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d39a:	4a0c      	ldr	r2, [pc, #48]	; (800d3cc <HAL_PCD_MspInit+0x48>)
 800d39c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3a0:	6593      	str	r3, [r2, #88]	; 0x58
 800d3a2:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <HAL_PCD_MspInit+0x48>)
 800d3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3aa:	60fb      	str	r3, [r7, #12]
 800d3ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	2105      	movs	r1, #5
 800d3b2:	2043      	movs	r0, #67	; 0x43
 800d3b4:	f7f5 fa42 	bl	800283c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d3b8:	2043      	movs	r0, #67	; 0x43
 800d3ba:	f7f5 fa5b 	bl	8002874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d3be:	bf00      	nop
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	40006800 	.word	0x40006800
 800d3cc:	40021000 	.word	0x40021000

0800d3d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	f7fb f900 	bl	80085ec <USBD_LL_SetupStage>
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d406:	78fb      	ldrb	r3, [r7, #3]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	015b      	lsls	r3, r3, #5
 800d40c:	4413      	add	r3, r2
 800d40e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	78fb      	ldrb	r3, [r7, #3]
 800d416:	4619      	mov	r1, r3
 800d418:	f7fb f933 	bl	8008682 <USBD_LL_DataOutStage>
}
 800d41c:	bf00      	nop
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	460b      	mov	r3, r1
 800d42e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d436:	78fb      	ldrb	r3, [r7, #3]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	015b      	lsls	r3, r3, #5
 800d43c:	4413      	add	r3, r2
 800d43e:	333c      	adds	r3, #60	; 0x3c
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	78fb      	ldrb	r3, [r7, #3]
 800d444:	4619      	mov	r1, r3
 800d446:	f7fb f98d 	bl	8008764 <USBD_LL_DataInStage>
}
 800d44a:	bf00      	nop
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b082      	sub	sp, #8
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d460:	4618      	mov	r0, r3
 800d462:	f7fb faa0 	bl	80089a6 <USBD_LL_SOF>
}
 800d466:	bf00      	nop
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d476:	2301      	movs	r3, #1
 800d478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d001      	beq.n	800d486 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d482:	f7f3 fd4b 	bl	8000f1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d48c:	7bfa      	ldrb	r2, [r7, #15]
 800d48e:	4611      	mov	r1, r2
 800d490:	4618      	mov	r0, r3
 800d492:	f7fb fa4d 	bl	8008930 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fb fa06 	bl	80088ae <USBD_LL_Reset>
}
 800d4a2:	bf00      	nop
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
	...

0800d4ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fb fa48 	bl	8008950 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d005      	beq.n	800d4d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4c8:	4b04      	ldr	r3, [pc, #16]	; (800d4dc <HAL_PCD_SuspendCallback+0x30>)
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	4a03      	ldr	r2, [pc, #12]	; (800d4dc <HAL_PCD_SuspendCallback+0x30>)
 800d4ce:	f043 0306 	orr.w	r3, r3, #6
 800d4d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d4d4:	bf00      	nop
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	e000ed00 	.word	0xe000ed00

0800d4e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d007      	beq.n	800d500 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4f0:	4b08      	ldr	r3, [pc, #32]	; (800d514 <HAL_PCD_ResumeCallback+0x34>)
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	4a07      	ldr	r2, [pc, #28]	; (800d514 <HAL_PCD_ResumeCallback+0x34>)
 800d4f6:	f023 0306 	bic.w	r3, r3, #6
 800d4fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d4fc:	f000 fab2 	bl	800da64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d506:	4618      	mov	r0, r3
 800d508:	f7fb fa37 	bl	800897a <USBD_LL_Resume>
}
 800d50c:	bf00      	nop
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	e000ed00 	.word	0xe000ed00

0800d518 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d520:	f7f7 f822 	bl	8004568 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d524:	4a2b      	ldr	r2, [pc, #172]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	4a29      	ldr	r2, [pc, #164]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d530:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d534:	4b27      	ldr	r3, [pc, #156]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d536:	4a28      	ldr	r2, [pc, #160]	; (800d5d8 <USBD_LL_Init+0xc0>)
 800d538:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d53a:	4b26      	ldr	r3, [pc, #152]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d53c:	2208      	movs	r2, #8
 800d53e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d540:	4b24      	ldr	r3, [pc, #144]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d542:	2202      	movs	r2, #2
 800d544:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d546:	4b23      	ldr	r3, [pc, #140]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d548:	2202      	movs	r2, #2
 800d54a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d54c:	4b21      	ldr	r3, [pc, #132]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d54e:	2200      	movs	r2, #0
 800d550:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d552:	4b20      	ldr	r3, [pc, #128]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d554:	2200      	movs	r2, #0
 800d556:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d558:	4b1e      	ldr	r3, [pc, #120]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d55e:	4b1d      	ldr	r3, [pc, #116]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d560:	2200      	movs	r2, #0
 800d562:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d564:	481b      	ldr	r0, [pc, #108]	; (800d5d4 <USBD_LL_Init+0xbc>)
 800d566:	f7f6 f858 	bl	800361a <HAL_PCD_Init>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d570:	f7f3 fcd4 	bl	8000f1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d57a:	2318      	movs	r3, #24
 800d57c:	2200      	movs	r2, #0
 800d57e:	2100      	movs	r1, #0
 800d580:	f7f6 ff26 	bl	80043d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d58a:	2358      	movs	r3, #88	; 0x58
 800d58c:	2200      	movs	r2, #0
 800d58e:	2180      	movs	r1, #128	; 0x80
 800d590:	f7f6 ff1e 	bl	80043d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d59a:	23c0      	movs	r3, #192	; 0xc0
 800d59c:	2200      	movs	r2, #0
 800d59e:	2181      	movs	r1, #129	; 0x81
 800d5a0:	f7f6 ff16 	bl	80043d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d5aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	f7f6 ff0d 	bl	80043d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d5bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2182      	movs	r1, #130	; 0x82
 800d5c4:	f7f6 ff04 	bl	80043d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	2000cdd8 	.word	0x2000cdd8
 800d5d8:	40006800 	.word	0x40006800

0800d5dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f6 f8f9 	bl	80037ea <HAL_PCD_Start>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d5fc:	7bbb      	ldrb	r3, [r7, #14]
 800d5fe:	2b03      	cmp	r3, #3
 800d600:	d816      	bhi.n	800d630 <USBD_LL_Start+0x54>
 800d602:	a201      	add	r2, pc, #4	; (adr r2, 800d608 <USBD_LL_Start+0x2c>)
 800d604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d608:	0800d619 	.word	0x0800d619
 800d60c:	0800d61f 	.word	0x0800d61f
 800d610:	0800d625 	.word	0x0800d625
 800d614:	0800d62b 	.word	0x0800d62b
    case HAL_OK :
      usb_status = USBD_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]
    break;
 800d61c:	e00b      	b.n	800d636 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d61e:	2302      	movs	r3, #2
 800d620:	73fb      	strb	r3, [r7, #15]
    break;
 800d622:	e008      	b.n	800d636 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d624:	2301      	movs	r3, #1
 800d626:	73fb      	strb	r3, [r7, #15]
    break;
 800d628:	e005      	b.n	800d636 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d62a:	2302      	movs	r3, #2
 800d62c:	73fb      	strb	r3, [r7, #15]
    break;
 800d62e:	e002      	b.n	800d636 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d630:	2302      	movs	r3, #2
 800d632:	73fb      	strb	r3, [r7, #15]
    break;
 800d634:	bf00      	nop
  }
  return usb_status;
 800d636:	7bfb      	ldrb	r3, [r7, #15]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	4608      	mov	r0, r1
 800d64a:	4611      	mov	r1, r2
 800d64c:	461a      	mov	r2, r3
 800d64e:	4603      	mov	r3, r0
 800d650:	70fb      	strb	r3, [r7, #3]
 800d652:	460b      	mov	r3, r1
 800d654:	70bb      	strb	r3, [r7, #2]
 800d656:	4613      	mov	r3, r2
 800d658:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d668:	78bb      	ldrb	r3, [r7, #2]
 800d66a:	883a      	ldrh	r2, [r7, #0]
 800d66c:	78f9      	ldrb	r1, [r7, #3]
 800d66e:	f7f6 fa51 	bl	8003b14 <HAL_PCD_EP_Open>
 800d672:	4603      	mov	r3, r0
 800d674:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d676:	7bbb      	ldrb	r3, [r7, #14]
 800d678:	2b03      	cmp	r3, #3
 800d67a:	d817      	bhi.n	800d6ac <USBD_LL_OpenEP+0x6c>
 800d67c:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <USBD_LL_OpenEP+0x44>)
 800d67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d682:	bf00      	nop
 800d684:	0800d695 	.word	0x0800d695
 800d688:	0800d69b 	.word	0x0800d69b
 800d68c:	0800d6a1 	.word	0x0800d6a1
 800d690:	0800d6a7 	.word	0x0800d6a7
    case HAL_OK :
      usb_status = USBD_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]
    break;
 800d698:	e00b      	b.n	800d6b2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d69a:	2302      	movs	r3, #2
 800d69c:	73fb      	strb	r3, [r7, #15]
    break;
 800d69e:	e008      	b.n	800d6b2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6a4:	e005      	b.n	800d6b2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6a6:	2302      	movs	r3, #2
 800d6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6aa:	e002      	b.n	800d6b2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d6b0:	bf00      	nop
  }
  return usb_status;
 800d6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6d6:	78fa      	ldrb	r2, [r7, #3]
 800d6d8:	4611      	mov	r1, r2
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7f6 fa7a 	bl	8003bd4 <HAL_PCD_EP_Close>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d816      	bhi.n	800d718 <USBD_LL_CloseEP+0x5c>
 800d6ea:	a201      	add	r2, pc, #4	; (adr r2, 800d6f0 <USBD_LL_CloseEP+0x34>)
 800d6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f0:	0800d701 	.word	0x0800d701
 800d6f4:	0800d707 	.word	0x0800d707
 800d6f8:	0800d70d 	.word	0x0800d70d
 800d6fc:	0800d713 	.word	0x0800d713
    case HAL_OK :
      usb_status = USBD_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	73fb      	strb	r3, [r7, #15]
    break;
 800d704:	e00b      	b.n	800d71e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d706:	2302      	movs	r3, #2
 800d708:	73fb      	strb	r3, [r7, #15]
    break;
 800d70a:	e008      	b.n	800d71e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d70c:	2301      	movs	r3, #1
 800d70e:	73fb      	strb	r3, [r7, #15]
    break;
 800d710:	e005      	b.n	800d71e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d712:	2302      	movs	r3, #2
 800d714:	73fb      	strb	r3, [r7, #15]
    break;
 800d716:	e002      	b.n	800d71e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d718:	2302      	movs	r3, #2
 800d71a:	73fb      	strb	r3, [r7, #15]
    break;
 800d71c:	bf00      	nop
  }
  return usb_status;  
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	460b      	mov	r3, r1
 800d732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d734:	2300      	movs	r3, #0
 800d736:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d742:	78fa      	ldrb	r2, [r7, #3]
 800d744:	4611      	mov	r1, r2
 800d746:	4618      	mov	r0, r3
 800d748:	f7f6 fb0e 	bl	8003d68 <HAL_PCD_EP_SetStall>
 800d74c:	4603      	mov	r3, r0
 800d74e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d750:	7bbb      	ldrb	r3, [r7, #14]
 800d752:	2b03      	cmp	r3, #3
 800d754:	d816      	bhi.n	800d784 <USBD_LL_StallEP+0x5c>
 800d756:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <USBD_LL_StallEP+0x34>)
 800d758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75c:	0800d76d 	.word	0x0800d76d
 800d760:	0800d773 	.word	0x0800d773
 800d764:	0800d779 	.word	0x0800d779
 800d768:	0800d77f 	.word	0x0800d77f
    case HAL_OK :
      usb_status = USBD_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73fb      	strb	r3, [r7, #15]
    break;
 800d770:	e00b      	b.n	800d78a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d772:	2302      	movs	r3, #2
 800d774:	73fb      	strb	r3, [r7, #15]
    break;
 800d776:	e008      	b.n	800d78a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d778:	2301      	movs	r3, #1
 800d77a:	73fb      	strb	r3, [r7, #15]
    break;
 800d77c:	e005      	b.n	800d78a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d77e:	2302      	movs	r3, #2
 800d780:	73fb      	strb	r3, [r7, #15]
    break;
 800d782:	e002      	b.n	800d78a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d784:	2302      	movs	r3, #2
 800d786:	73fb      	strb	r3, [r7, #15]
    break;
 800d788:	bf00      	nop
  }
  return usb_status;  
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7ae:	78fa      	ldrb	r2, [r7, #3]
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7f6 fb32 	bl	8003e1c <HAL_PCD_EP_ClrStall>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d7bc:	7bbb      	ldrb	r3, [r7, #14]
 800d7be:	2b03      	cmp	r3, #3
 800d7c0:	d816      	bhi.n	800d7f0 <USBD_LL_ClearStallEP+0x5c>
 800d7c2:	a201      	add	r2, pc, #4	; (adr r2, 800d7c8 <USBD_LL_ClearStallEP+0x34>)
 800d7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c8:	0800d7d9 	.word	0x0800d7d9
 800d7cc:	0800d7df 	.word	0x0800d7df
 800d7d0:	0800d7e5 	.word	0x0800d7e5
 800d7d4:	0800d7eb 	.word	0x0800d7eb
    case HAL_OK :
      usb_status = USBD_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
    break;
 800d7dc:	e00b      	b.n	800d7f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7de:	2302      	movs	r3, #2
 800d7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e2:	e008      	b.n	800d7f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e8:	e005      	b.n	800d7f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ee:	e002      	b.n	800d7f6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f4:	bf00      	nop
  }
  return usb_status; 
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d812:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	da08      	bge.n	800d82e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d81c:	78fb      	ldrb	r3, [r7, #3]
 800d81e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	015b      	lsls	r3, r3, #5
 800d826:	4413      	add	r3, r2
 800d828:	332a      	adds	r3, #42	; 0x2a
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	e008      	b.n	800d840 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d82e:	78fb      	ldrb	r3, [r7, #3]
 800d830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	015b      	lsls	r3, r3, #5
 800d838:	4413      	add	r3, r2
 800d83a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d83e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d840:	4618      	mov	r0, r3
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	460b      	mov	r3, r1
 800d856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d866:	78fa      	ldrb	r2, [r7, #3]
 800d868:	4611      	mov	r1, r2
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7f6 f92d 	bl	8003aca <HAL_PCD_SetAddress>
 800d870:	4603      	mov	r3, r0
 800d872:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d874:	7bbb      	ldrb	r3, [r7, #14]
 800d876:	2b03      	cmp	r3, #3
 800d878:	d816      	bhi.n	800d8a8 <USBD_LL_SetUSBAddress+0x5c>
 800d87a:	a201      	add	r2, pc, #4	; (adr r2, 800d880 <USBD_LL_SetUSBAddress+0x34>)
 800d87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d880:	0800d891 	.word	0x0800d891
 800d884:	0800d897 	.word	0x0800d897
 800d888:	0800d89d 	.word	0x0800d89d
 800d88c:	0800d8a3 	.word	0x0800d8a3
    case HAL_OK :
      usb_status = USBD_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	73fb      	strb	r3, [r7, #15]
    break;
 800d894:	e00b      	b.n	800d8ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d896:	2302      	movs	r3, #2
 800d898:	73fb      	strb	r3, [r7, #15]
    break;
 800d89a:	e008      	b.n	800d8ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d89c:	2301      	movs	r3, #1
 800d89e:	73fb      	strb	r3, [r7, #15]
    break;
 800d8a0:	e005      	b.n	800d8ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d8a6:	e002      	b.n	800d8ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ac:	bf00      	nop
  }
  return usb_status;  
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b086      	sub	sp, #24
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	607a      	str	r2, [r7, #4]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	72fb      	strb	r3, [r7, #11]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d8da:	893b      	ldrh	r3, [r7, #8]
 800d8dc:	7af9      	ldrb	r1, [r7, #11]
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	f7f6 fa09 	bl	8003cf6 <HAL_PCD_EP_Transmit>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d8e8:	7dbb      	ldrb	r3, [r7, #22]
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d816      	bhi.n	800d91c <USBD_LL_Transmit+0x64>
 800d8ee:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <USBD_LL_Transmit+0x3c>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d905 	.word	0x0800d905
 800d8f8:	0800d90b 	.word	0x0800d90b
 800d8fc:	0800d911 	.word	0x0800d911
 800d900:	0800d917 	.word	0x0800d917
    case HAL_OK :
      usb_status = USBD_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	75fb      	strb	r3, [r7, #23]
    break;
 800d908:	e00b      	b.n	800d922 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d90a:	2302      	movs	r3, #2
 800d90c:	75fb      	strb	r3, [r7, #23]
    break;
 800d90e:	e008      	b.n	800d922 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d910:	2301      	movs	r3, #1
 800d912:	75fb      	strb	r3, [r7, #23]
    break;
 800d914:	e005      	b.n	800d922 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d916:	2302      	movs	r3, #2
 800d918:	75fb      	strb	r3, [r7, #23]
    break;
 800d91a:	e002      	b.n	800d922 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d91c:	2302      	movs	r3, #2
 800d91e:	75fb      	strb	r3, [r7, #23]
    break;
 800d920:	bf00      	nop
  }
  return usb_status;    
 800d922:	7dfb      	ldrb	r3, [r7, #23]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	607a      	str	r2, [r7, #4]
 800d936:	461a      	mov	r2, r3
 800d938:	460b      	mov	r3, r1
 800d93a:	72fb      	strb	r3, [r7, #11]
 800d93c:	4613      	mov	r3, r2
 800d93e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d940:	2300      	movs	r3, #0
 800d942:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d94e:	893b      	ldrh	r3, [r7, #8]
 800d950:	7af9      	ldrb	r1, [r7, #11]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	f7f6 f980 	bl	8003c58 <HAL_PCD_EP_Receive>
 800d958:	4603      	mov	r3, r0
 800d95a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d95c:	7dbb      	ldrb	r3, [r7, #22]
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d816      	bhi.n	800d990 <USBD_LL_PrepareReceive+0x64>
 800d962:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <USBD_LL_PrepareReceive+0x3c>)
 800d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d968:	0800d979 	.word	0x0800d979
 800d96c:	0800d97f 	.word	0x0800d97f
 800d970:	0800d985 	.word	0x0800d985
 800d974:	0800d98b 	.word	0x0800d98b
    case HAL_OK :
      usb_status = USBD_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	75fb      	strb	r3, [r7, #23]
    break;
 800d97c:	e00b      	b.n	800d996 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d97e:	2302      	movs	r3, #2
 800d980:	75fb      	strb	r3, [r7, #23]
    break;
 800d982:	e008      	b.n	800d996 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d984:	2301      	movs	r3, #1
 800d986:	75fb      	strb	r3, [r7, #23]
    break;
 800d988:	e005      	b.n	800d996 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d98a:	2302      	movs	r3, #2
 800d98c:	75fb      	strb	r3, [r7, #23]
    break;
 800d98e:	e002      	b.n	800d996 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d990:	2302      	movs	r3, #2
 800d992:	75fb      	strb	r3, [r7, #23]
    break;
 800d994:	bf00      	nop
  }
  return usb_status; 
 800d996:	7dfb      	ldrb	r3, [r7, #23]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9b2:	78fa      	ldrb	r2, [r7, #3]
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7f6 f988 	bl	8003ccc <HAL_PCD_EP_GetRxCount>
 800d9bc:	4603      	mov	r3, r0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
	...

0800d9c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d9d4:	78fb      	ldrb	r3, [r7, #3]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d002      	beq.n	800d9e0 <HAL_PCDEx_LPM_Callback+0x18>
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d013      	beq.n	800da06 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800d9de:	e023      	b.n	800da28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	699b      	ldr	r3, [r3, #24]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d007      	beq.n	800d9f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d9e8:	f000 f83c 	bl	800da64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9ec:	4b10      	ldr	r3, [pc, #64]	; (800da30 <HAL_PCDEx_LPM_Callback+0x68>)
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	4a0f      	ldr	r2, [pc, #60]	; (800da30 <HAL_PCDEx_LPM_Callback+0x68>)
 800d9f2:	f023 0306 	bic.w	r3, r3, #6
 800d9f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fa ffbb 	bl	800897a <USBD_LL_Resume>
    break;
 800da04:	e010      	b.n	800da28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fa ff9f 	bl	8008950 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	699b      	ldr	r3, [r3, #24]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d005      	beq.n	800da26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da1a:	4b05      	ldr	r3, [pc, #20]	; (800da30 <HAL_PCDEx_LPM_Callback+0x68>)
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	4a04      	ldr	r2, [pc, #16]	; (800da30 <HAL_PCDEx_LPM_Callback+0x68>)
 800da20:	f043 0306 	orr.w	r3, r3, #6
 800da24:	6113      	str	r3, [r2, #16]
    break;   
 800da26:	bf00      	nop
}
 800da28:	bf00      	nop
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	e000ed00 	.word	0xe000ed00

0800da34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da3c:	4b03      	ldr	r3, [pc, #12]	; (800da4c <USBD_static_malloc+0x18>)
}
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	20001ad8 	.word	0x20001ad8

0800da50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]

}
 800da58:	bf00      	nop
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800da68:	f7f3 f89a 	bl	8000ba0 <SystemClock_Config>
}
 800da6c:	bf00      	nop
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <__errno>:
 800da70:	4b01      	ldr	r3, [pc, #4]	; (800da78 <__errno+0x8>)
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	20000190 	.word	0x20000190

0800da7c <__libc_init_array>:
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	4e0d      	ldr	r6, [pc, #52]	; (800dab4 <__libc_init_array+0x38>)
 800da80:	4c0d      	ldr	r4, [pc, #52]	; (800dab8 <__libc_init_array+0x3c>)
 800da82:	1ba4      	subs	r4, r4, r6
 800da84:	10a4      	asrs	r4, r4, #2
 800da86:	2500      	movs	r5, #0
 800da88:	42a5      	cmp	r5, r4
 800da8a:	d109      	bne.n	800daa0 <__libc_init_array+0x24>
 800da8c:	4e0b      	ldr	r6, [pc, #44]	; (800dabc <__libc_init_array+0x40>)
 800da8e:	4c0c      	ldr	r4, [pc, #48]	; (800dac0 <__libc_init_array+0x44>)
 800da90:	f000 fc42 	bl	800e318 <_init>
 800da94:	1ba4      	subs	r4, r4, r6
 800da96:	10a4      	asrs	r4, r4, #2
 800da98:	2500      	movs	r5, #0
 800da9a:	42a5      	cmp	r5, r4
 800da9c:	d105      	bne.n	800daaa <__libc_init_array+0x2e>
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
 800daa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800daa4:	4798      	blx	r3
 800daa6:	3501      	adds	r5, #1
 800daa8:	e7ee      	b.n	800da88 <__libc_init_array+0xc>
 800daaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800daae:	4798      	blx	r3
 800dab0:	3501      	adds	r5, #1
 800dab2:	e7f2      	b.n	800da9a <__libc_init_array+0x1e>
 800dab4:	0800e5a0 	.word	0x0800e5a0
 800dab8:	0800e5a0 	.word	0x0800e5a0
 800dabc:	0800e5a0 	.word	0x0800e5a0
 800dac0:	0800e5a4 	.word	0x0800e5a4

0800dac4 <memcpy>:
 800dac4:	b510      	push	{r4, lr}
 800dac6:	1e43      	subs	r3, r0, #1
 800dac8:	440a      	add	r2, r1
 800daca:	4291      	cmp	r1, r2
 800dacc:	d100      	bne.n	800dad0 <memcpy+0xc>
 800dace:	bd10      	pop	{r4, pc}
 800dad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dad8:	e7f7      	b.n	800daca <memcpy+0x6>

0800dada <memset>:
 800dada:	4402      	add	r2, r0
 800dadc:	4603      	mov	r3, r0
 800dade:	4293      	cmp	r3, r2
 800dae0:	d100      	bne.n	800dae4 <memset+0xa>
 800dae2:	4770      	bx	lr
 800dae4:	f803 1b01 	strb.w	r1, [r3], #1
 800dae8:	e7f9      	b.n	800dade <memset+0x4>

0800daea <_vsniprintf_r>:
 800daea:	b530      	push	{r4, r5, lr}
 800daec:	1e14      	subs	r4, r2, #0
 800daee:	4605      	mov	r5, r0
 800daf0:	b09b      	sub	sp, #108	; 0x6c
 800daf2:	4618      	mov	r0, r3
 800daf4:	da05      	bge.n	800db02 <_vsniprintf_r+0x18>
 800daf6:	238b      	movs	r3, #139	; 0x8b
 800daf8:	602b      	str	r3, [r5, #0]
 800dafa:	f04f 30ff 	mov.w	r0, #4294967295
 800dafe:	b01b      	add	sp, #108	; 0x6c
 800db00:	bd30      	pop	{r4, r5, pc}
 800db02:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db06:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db0a:	bf14      	ite	ne
 800db0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db10:	4623      	moveq	r3, r4
 800db12:	9302      	str	r3, [sp, #8]
 800db14:	9305      	str	r3, [sp, #20]
 800db16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db1a:	9100      	str	r1, [sp, #0]
 800db1c:	9104      	str	r1, [sp, #16]
 800db1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db22:	4602      	mov	r2, r0
 800db24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db26:	4669      	mov	r1, sp
 800db28:	4628      	mov	r0, r5
 800db2a:	f000 f873 	bl	800dc14 <_svfiprintf_r>
 800db2e:	1c43      	adds	r3, r0, #1
 800db30:	bfbc      	itt	lt
 800db32:	238b      	movlt	r3, #139	; 0x8b
 800db34:	602b      	strlt	r3, [r5, #0]
 800db36:	2c00      	cmp	r4, #0
 800db38:	d0e1      	beq.n	800dafe <_vsniprintf_r+0x14>
 800db3a:	9b00      	ldr	r3, [sp, #0]
 800db3c:	2200      	movs	r2, #0
 800db3e:	701a      	strb	r2, [r3, #0]
 800db40:	e7dd      	b.n	800dafe <_vsniprintf_r+0x14>
	...

0800db44 <vsniprintf>:
 800db44:	b507      	push	{r0, r1, r2, lr}
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	4613      	mov	r3, r2
 800db4a:	460a      	mov	r2, r1
 800db4c:	4601      	mov	r1, r0
 800db4e:	4803      	ldr	r0, [pc, #12]	; (800db5c <vsniprintf+0x18>)
 800db50:	6800      	ldr	r0, [r0, #0]
 800db52:	f7ff ffca 	bl	800daea <_vsniprintf_r>
 800db56:	b003      	add	sp, #12
 800db58:	f85d fb04 	ldr.w	pc, [sp], #4
 800db5c:	20000190 	.word	0x20000190

0800db60 <__ssputs_r>:
 800db60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db64:	688e      	ldr	r6, [r1, #8]
 800db66:	429e      	cmp	r6, r3
 800db68:	4682      	mov	sl, r0
 800db6a:	460c      	mov	r4, r1
 800db6c:	4690      	mov	r8, r2
 800db6e:	4699      	mov	r9, r3
 800db70:	d837      	bhi.n	800dbe2 <__ssputs_r+0x82>
 800db72:	898a      	ldrh	r2, [r1, #12]
 800db74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db78:	d031      	beq.n	800dbde <__ssputs_r+0x7e>
 800db7a:	6825      	ldr	r5, [r4, #0]
 800db7c:	6909      	ldr	r1, [r1, #16]
 800db7e:	1a6f      	subs	r7, r5, r1
 800db80:	6965      	ldr	r5, [r4, #20]
 800db82:	2302      	movs	r3, #2
 800db84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db88:	fb95 f5f3 	sdiv	r5, r5, r3
 800db8c:	f109 0301 	add.w	r3, r9, #1
 800db90:	443b      	add	r3, r7
 800db92:	429d      	cmp	r5, r3
 800db94:	bf38      	it	cc
 800db96:	461d      	movcc	r5, r3
 800db98:	0553      	lsls	r3, r2, #21
 800db9a:	d530      	bpl.n	800dbfe <__ssputs_r+0x9e>
 800db9c:	4629      	mov	r1, r5
 800db9e:	f000 fb21 	bl	800e1e4 <_malloc_r>
 800dba2:	4606      	mov	r6, r0
 800dba4:	b950      	cbnz	r0, 800dbbc <__ssputs_r+0x5c>
 800dba6:	230c      	movs	r3, #12
 800dba8:	f8ca 3000 	str.w	r3, [sl]
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbb2:	81a3      	strh	r3, [r4, #12]
 800dbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbc:	463a      	mov	r2, r7
 800dbbe:	6921      	ldr	r1, [r4, #16]
 800dbc0:	f7ff ff80 	bl	800dac4 <memcpy>
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbce:	81a3      	strh	r3, [r4, #12]
 800dbd0:	6126      	str	r6, [r4, #16]
 800dbd2:	6165      	str	r5, [r4, #20]
 800dbd4:	443e      	add	r6, r7
 800dbd6:	1bed      	subs	r5, r5, r7
 800dbd8:	6026      	str	r6, [r4, #0]
 800dbda:	60a5      	str	r5, [r4, #8]
 800dbdc:	464e      	mov	r6, r9
 800dbde:	454e      	cmp	r6, r9
 800dbe0:	d900      	bls.n	800dbe4 <__ssputs_r+0x84>
 800dbe2:	464e      	mov	r6, r9
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	4641      	mov	r1, r8
 800dbe8:	6820      	ldr	r0, [r4, #0]
 800dbea:	f000 fa93 	bl	800e114 <memmove>
 800dbee:	68a3      	ldr	r3, [r4, #8]
 800dbf0:	1b9b      	subs	r3, r3, r6
 800dbf2:	60a3      	str	r3, [r4, #8]
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	441e      	add	r6, r3
 800dbf8:	6026      	str	r6, [r4, #0]
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	e7dc      	b.n	800dbb8 <__ssputs_r+0x58>
 800dbfe:	462a      	mov	r2, r5
 800dc00:	f000 fb4a 	bl	800e298 <_realloc_r>
 800dc04:	4606      	mov	r6, r0
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d1e2      	bne.n	800dbd0 <__ssputs_r+0x70>
 800dc0a:	6921      	ldr	r1, [r4, #16]
 800dc0c:	4650      	mov	r0, sl
 800dc0e:	f000 fa9b 	bl	800e148 <_free_r>
 800dc12:	e7c8      	b.n	800dba6 <__ssputs_r+0x46>

0800dc14 <_svfiprintf_r>:
 800dc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc18:	461d      	mov	r5, r3
 800dc1a:	898b      	ldrh	r3, [r1, #12]
 800dc1c:	061f      	lsls	r7, r3, #24
 800dc1e:	b09d      	sub	sp, #116	; 0x74
 800dc20:	4680      	mov	r8, r0
 800dc22:	460c      	mov	r4, r1
 800dc24:	4616      	mov	r6, r2
 800dc26:	d50f      	bpl.n	800dc48 <_svfiprintf_r+0x34>
 800dc28:	690b      	ldr	r3, [r1, #16]
 800dc2a:	b96b      	cbnz	r3, 800dc48 <_svfiprintf_r+0x34>
 800dc2c:	2140      	movs	r1, #64	; 0x40
 800dc2e:	f000 fad9 	bl	800e1e4 <_malloc_r>
 800dc32:	6020      	str	r0, [r4, #0]
 800dc34:	6120      	str	r0, [r4, #16]
 800dc36:	b928      	cbnz	r0, 800dc44 <_svfiprintf_r+0x30>
 800dc38:	230c      	movs	r3, #12
 800dc3a:	f8c8 3000 	str.w	r3, [r8]
 800dc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc42:	e0c8      	b.n	800ddd6 <_svfiprintf_r+0x1c2>
 800dc44:	2340      	movs	r3, #64	; 0x40
 800dc46:	6163      	str	r3, [r4, #20]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4c:	2320      	movs	r3, #32
 800dc4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc52:	2330      	movs	r3, #48	; 0x30
 800dc54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc58:	9503      	str	r5, [sp, #12]
 800dc5a:	f04f 0b01 	mov.w	fp, #1
 800dc5e:	4637      	mov	r7, r6
 800dc60:	463d      	mov	r5, r7
 800dc62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc66:	b10b      	cbz	r3, 800dc6c <_svfiprintf_r+0x58>
 800dc68:	2b25      	cmp	r3, #37	; 0x25
 800dc6a:	d13e      	bne.n	800dcea <_svfiprintf_r+0xd6>
 800dc6c:	ebb7 0a06 	subs.w	sl, r7, r6
 800dc70:	d00b      	beq.n	800dc8a <_svfiprintf_r+0x76>
 800dc72:	4653      	mov	r3, sl
 800dc74:	4632      	mov	r2, r6
 800dc76:	4621      	mov	r1, r4
 800dc78:	4640      	mov	r0, r8
 800dc7a:	f7ff ff71 	bl	800db60 <__ssputs_r>
 800dc7e:	3001      	adds	r0, #1
 800dc80:	f000 80a4 	beq.w	800ddcc <_svfiprintf_r+0x1b8>
 800dc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc86:	4453      	add	r3, sl
 800dc88:	9309      	str	r3, [sp, #36]	; 0x24
 800dc8a:	783b      	ldrb	r3, [r7, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 809d 	beq.w	800ddcc <_svfiprintf_r+0x1b8>
 800dc92:	2300      	movs	r3, #0
 800dc94:	f04f 32ff 	mov.w	r2, #4294967295
 800dc98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc9c:	9304      	str	r3, [sp, #16]
 800dc9e:	9307      	str	r3, [sp, #28]
 800dca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dca4:	931a      	str	r3, [sp, #104]	; 0x68
 800dca6:	462f      	mov	r7, r5
 800dca8:	2205      	movs	r2, #5
 800dcaa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dcae:	4850      	ldr	r0, [pc, #320]	; (800ddf0 <_svfiprintf_r+0x1dc>)
 800dcb0:	f7f2 fa96 	bl	80001e0 <memchr>
 800dcb4:	9b04      	ldr	r3, [sp, #16]
 800dcb6:	b9d0      	cbnz	r0, 800dcee <_svfiprintf_r+0xda>
 800dcb8:	06d9      	lsls	r1, r3, #27
 800dcba:	bf44      	itt	mi
 800dcbc:	2220      	movmi	r2, #32
 800dcbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcc2:	071a      	lsls	r2, r3, #28
 800dcc4:	bf44      	itt	mi
 800dcc6:	222b      	movmi	r2, #43	; 0x2b
 800dcc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dccc:	782a      	ldrb	r2, [r5, #0]
 800dcce:	2a2a      	cmp	r2, #42	; 0x2a
 800dcd0:	d015      	beq.n	800dcfe <_svfiprintf_r+0xea>
 800dcd2:	9a07      	ldr	r2, [sp, #28]
 800dcd4:	462f      	mov	r7, r5
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	250a      	movs	r5, #10
 800dcda:	4639      	mov	r1, r7
 800dcdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dce0:	3b30      	subs	r3, #48	; 0x30
 800dce2:	2b09      	cmp	r3, #9
 800dce4:	d94d      	bls.n	800dd82 <_svfiprintf_r+0x16e>
 800dce6:	b1b8      	cbz	r0, 800dd18 <_svfiprintf_r+0x104>
 800dce8:	e00f      	b.n	800dd0a <_svfiprintf_r+0xf6>
 800dcea:	462f      	mov	r7, r5
 800dcec:	e7b8      	b.n	800dc60 <_svfiprintf_r+0x4c>
 800dcee:	4a40      	ldr	r2, [pc, #256]	; (800ddf0 <_svfiprintf_r+0x1dc>)
 800dcf0:	1a80      	subs	r0, r0, r2
 800dcf2:	fa0b f000 	lsl.w	r0, fp, r0
 800dcf6:	4318      	orrs	r0, r3
 800dcf8:	9004      	str	r0, [sp, #16]
 800dcfa:	463d      	mov	r5, r7
 800dcfc:	e7d3      	b.n	800dca6 <_svfiprintf_r+0x92>
 800dcfe:	9a03      	ldr	r2, [sp, #12]
 800dd00:	1d11      	adds	r1, r2, #4
 800dd02:	6812      	ldr	r2, [r2, #0]
 800dd04:	9103      	str	r1, [sp, #12]
 800dd06:	2a00      	cmp	r2, #0
 800dd08:	db01      	blt.n	800dd0e <_svfiprintf_r+0xfa>
 800dd0a:	9207      	str	r2, [sp, #28]
 800dd0c:	e004      	b.n	800dd18 <_svfiprintf_r+0x104>
 800dd0e:	4252      	negs	r2, r2
 800dd10:	f043 0302 	orr.w	r3, r3, #2
 800dd14:	9207      	str	r2, [sp, #28]
 800dd16:	9304      	str	r3, [sp, #16]
 800dd18:	783b      	ldrb	r3, [r7, #0]
 800dd1a:	2b2e      	cmp	r3, #46	; 0x2e
 800dd1c:	d10c      	bne.n	800dd38 <_svfiprintf_r+0x124>
 800dd1e:	787b      	ldrb	r3, [r7, #1]
 800dd20:	2b2a      	cmp	r3, #42	; 0x2a
 800dd22:	d133      	bne.n	800dd8c <_svfiprintf_r+0x178>
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	9203      	str	r2, [sp, #12]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	bfb8      	it	lt
 800dd30:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd34:	3702      	adds	r7, #2
 800dd36:	9305      	str	r3, [sp, #20]
 800dd38:	4d2e      	ldr	r5, [pc, #184]	; (800ddf4 <_svfiprintf_r+0x1e0>)
 800dd3a:	7839      	ldrb	r1, [r7, #0]
 800dd3c:	2203      	movs	r2, #3
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f7f2 fa4e 	bl	80001e0 <memchr>
 800dd44:	b138      	cbz	r0, 800dd56 <_svfiprintf_r+0x142>
 800dd46:	2340      	movs	r3, #64	; 0x40
 800dd48:	1b40      	subs	r0, r0, r5
 800dd4a:	fa03 f000 	lsl.w	r0, r3, r0
 800dd4e:	9b04      	ldr	r3, [sp, #16]
 800dd50:	4303      	orrs	r3, r0
 800dd52:	3701      	adds	r7, #1
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	7839      	ldrb	r1, [r7, #0]
 800dd58:	4827      	ldr	r0, [pc, #156]	; (800ddf8 <_svfiprintf_r+0x1e4>)
 800dd5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd5e:	2206      	movs	r2, #6
 800dd60:	1c7e      	adds	r6, r7, #1
 800dd62:	f7f2 fa3d 	bl	80001e0 <memchr>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d038      	beq.n	800dddc <_svfiprintf_r+0x1c8>
 800dd6a:	4b24      	ldr	r3, [pc, #144]	; (800ddfc <_svfiprintf_r+0x1e8>)
 800dd6c:	bb13      	cbnz	r3, 800ddb4 <_svfiprintf_r+0x1a0>
 800dd6e:	9b03      	ldr	r3, [sp, #12]
 800dd70:	3307      	adds	r3, #7
 800dd72:	f023 0307 	bic.w	r3, r3, #7
 800dd76:	3308      	adds	r3, #8
 800dd78:	9303      	str	r3, [sp, #12]
 800dd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7c:	444b      	add	r3, r9
 800dd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd80:	e76d      	b.n	800dc5e <_svfiprintf_r+0x4a>
 800dd82:	fb05 3202 	mla	r2, r5, r2, r3
 800dd86:	2001      	movs	r0, #1
 800dd88:	460f      	mov	r7, r1
 800dd8a:	e7a6      	b.n	800dcda <_svfiprintf_r+0xc6>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	3701      	adds	r7, #1
 800dd90:	9305      	str	r3, [sp, #20]
 800dd92:	4619      	mov	r1, r3
 800dd94:	250a      	movs	r5, #10
 800dd96:	4638      	mov	r0, r7
 800dd98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd9c:	3a30      	subs	r2, #48	; 0x30
 800dd9e:	2a09      	cmp	r2, #9
 800dda0:	d903      	bls.n	800ddaa <_svfiprintf_r+0x196>
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d0c8      	beq.n	800dd38 <_svfiprintf_r+0x124>
 800dda6:	9105      	str	r1, [sp, #20]
 800dda8:	e7c6      	b.n	800dd38 <_svfiprintf_r+0x124>
 800ddaa:	fb05 2101 	mla	r1, r5, r1, r2
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4607      	mov	r7, r0
 800ddb2:	e7f0      	b.n	800dd96 <_svfiprintf_r+0x182>
 800ddb4:	ab03      	add	r3, sp, #12
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	4622      	mov	r2, r4
 800ddba:	4b11      	ldr	r3, [pc, #68]	; (800de00 <_svfiprintf_r+0x1ec>)
 800ddbc:	a904      	add	r1, sp, #16
 800ddbe:	4640      	mov	r0, r8
 800ddc0:	f3af 8000 	nop.w
 800ddc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ddc8:	4681      	mov	r9, r0
 800ddca:	d1d6      	bne.n	800dd7a <_svfiprintf_r+0x166>
 800ddcc:	89a3      	ldrh	r3, [r4, #12]
 800ddce:	065b      	lsls	r3, r3, #25
 800ddd0:	f53f af35 	bmi.w	800dc3e <_svfiprintf_r+0x2a>
 800ddd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddd6:	b01d      	add	sp, #116	; 0x74
 800ddd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dddc:	ab03      	add	r3, sp, #12
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	4622      	mov	r2, r4
 800dde2:	4b07      	ldr	r3, [pc, #28]	; (800de00 <_svfiprintf_r+0x1ec>)
 800dde4:	a904      	add	r1, sp, #16
 800dde6:	4640      	mov	r0, r8
 800dde8:	f000 f882 	bl	800def0 <_printf_i>
 800ddec:	e7ea      	b.n	800ddc4 <_svfiprintf_r+0x1b0>
 800ddee:	bf00      	nop
 800ddf0:	0800e56c 	.word	0x0800e56c
 800ddf4:	0800e572 	.word	0x0800e572
 800ddf8:	0800e576 	.word	0x0800e576
 800ddfc:	00000000 	.word	0x00000000
 800de00:	0800db61 	.word	0x0800db61

0800de04 <_printf_common>:
 800de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de08:	4691      	mov	r9, r2
 800de0a:	461f      	mov	r7, r3
 800de0c:	688a      	ldr	r2, [r1, #8]
 800de0e:	690b      	ldr	r3, [r1, #16]
 800de10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de14:	4293      	cmp	r3, r2
 800de16:	bfb8      	it	lt
 800de18:	4613      	movlt	r3, r2
 800de1a:	f8c9 3000 	str.w	r3, [r9]
 800de1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de22:	4606      	mov	r6, r0
 800de24:	460c      	mov	r4, r1
 800de26:	b112      	cbz	r2, 800de2e <_printf_common+0x2a>
 800de28:	3301      	adds	r3, #1
 800de2a:	f8c9 3000 	str.w	r3, [r9]
 800de2e:	6823      	ldr	r3, [r4, #0]
 800de30:	0699      	lsls	r1, r3, #26
 800de32:	bf42      	ittt	mi
 800de34:	f8d9 3000 	ldrmi.w	r3, [r9]
 800de38:	3302      	addmi	r3, #2
 800de3a:	f8c9 3000 	strmi.w	r3, [r9]
 800de3e:	6825      	ldr	r5, [r4, #0]
 800de40:	f015 0506 	ands.w	r5, r5, #6
 800de44:	d107      	bne.n	800de56 <_printf_common+0x52>
 800de46:	f104 0a19 	add.w	sl, r4, #25
 800de4a:	68e3      	ldr	r3, [r4, #12]
 800de4c:	f8d9 2000 	ldr.w	r2, [r9]
 800de50:	1a9b      	subs	r3, r3, r2
 800de52:	42ab      	cmp	r3, r5
 800de54:	dc28      	bgt.n	800dea8 <_printf_common+0xa4>
 800de56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800de5a:	6822      	ldr	r2, [r4, #0]
 800de5c:	3300      	adds	r3, #0
 800de5e:	bf18      	it	ne
 800de60:	2301      	movne	r3, #1
 800de62:	0692      	lsls	r2, r2, #26
 800de64:	d42d      	bmi.n	800dec2 <_printf_common+0xbe>
 800de66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de6a:	4639      	mov	r1, r7
 800de6c:	4630      	mov	r0, r6
 800de6e:	47c0      	blx	r8
 800de70:	3001      	adds	r0, #1
 800de72:	d020      	beq.n	800deb6 <_printf_common+0xb2>
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	68e5      	ldr	r5, [r4, #12]
 800de78:	f8d9 2000 	ldr.w	r2, [r9]
 800de7c:	f003 0306 	and.w	r3, r3, #6
 800de80:	2b04      	cmp	r3, #4
 800de82:	bf08      	it	eq
 800de84:	1aad      	subeq	r5, r5, r2
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	6922      	ldr	r2, [r4, #16]
 800de8a:	bf0c      	ite	eq
 800de8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de90:	2500      	movne	r5, #0
 800de92:	4293      	cmp	r3, r2
 800de94:	bfc4      	itt	gt
 800de96:	1a9b      	subgt	r3, r3, r2
 800de98:	18ed      	addgt	r5, r5, r3
 800de9a:	f04f 0900 	mov.w	r9, #0
 800de9e:	341a      	adds	r4, #26
 800dea0:	454d      	cmp	r5, r9
 800dea2:	d11a      	bne.n	800deda <_printf_common+0xd6>
 800dea4:	2000      	movs	r0, #0
 800dea6:	e008      	b.n	800deba <_printf_common+0xb6>
 800dea8:	2301      	movs	r3, #1
 800deaa:	4652      	mov	r2, sl
 800deac:	4639      	mov	r1, r7
 800deae:	4630      	mov	r0, r6
 800deb0:	47c0      	blx	r8
 800deb2:	3001      	adds	r0, #1
 800deb4:	d103      	bne.n	800debe <_printf_common+0xba>
 800deb6:	f04f 30ff 	mov.w	r0, #4294967295
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debe:	3501      	adds	r5, #1
 800dec0:	e7c3      	b.n	800de4a <_printf_common+0x46>
 800dec2:	18e1      	adds	r1, r4, r3
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	2030      	movs	r0, #48	; 0x30
 800dec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800decc:	4422      	add	r2, r4
 800dece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ded2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ded6:	3302      	adds	r3, #2
 800ded8:	e7c5      	b.n	800de66 <_printf_common+0x62>
 800deda:	2301      	movs	r3, #1
 800dedc:	4622      	mov	r2, r4
 800dede:	4639      	mov	r1, r7
 800dee0:	4630      	mov	r0, r6
 800dee2:	47c0      	blx	r8
 800dee4:	3001      	adds	r0, #1
 800dee6:	d0e6      	beq.n	800deb6 <_printf_common+0xb2>
 800dee8:	f109 0901 	add.w	r9, r9, #1
 800deec:	e7d8      	b.n	800dea0 <_printf_common+0x9c>
	...

0800def0 <_printf_i>:
 800def0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800def4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800def8:	460c      	mov	r4, r1
 800defa:	7e09      	ldrb	r1, [r1, #24]
 800defc:	b085      	sub	sp, #20
 800defe:	296e      	cmp	r1, #110	; 0x6e
 800df00:	4617      	mov	r7, r2
 800df02:	4606      	mov	r6, r0
 800df04:	4698      	mov	r8, r3
 800df06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df08:	f000 80b3 	beq.w	800e072 <_printf_i+0x182>
 800df0c:	d822      	bhi.n	800df54 <_printf_i+0x64>
 800df0e:	2963      	cmp	r1, #99	; 0x63
 800df10:	d036      	beq.n	800df80 <_printf_i+0x90>
 800df12:	d80a      	bhi.n	800df2a <_printf_i+0x3a>
 800df14:	2900      	cmp	r1, #0
 800df16:	f000 80b9 	beq.w	800e08c <_printf_i+0x19c>
 800df1a:	2958      	cmp	r1, #88	; 0x58
 800df1c:	f000 8083 	beq.w	800e026 <_printf_i+0x136>
 800df20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800df28:	e032      	b.n	800df90 <_printf_i+0xa0>
 800df2a:	2964      	cmp	r1, #100	; 0x64
 800df2c:	d001      	beq.n	800df32 <_printf_i+0x42>
 800df2e:	2969      	cmp	r1, #105	; 0x69
 800df30:	d1f6      	bne.n	800df20 <_printf_i+0x30>
 800df32:	6820      	ldr	r0, [r4, #0]
 800df34:	6813      	ldr	r3, [r2, #0]
 800df36:	0605      	lsls	r5, r0, #24
 800df38:	f103 0104 	add.w	r1, r3, #4
 800df3c:	d52a      	bpl.n	800df94 <_printf_i+0xa4>
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6011      	str	r1, [r2, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	da03      	bge.n	800df4e <_printf_i+0x5e>
 800df46:	222d      	movs	r2, #45	; 0x2d
 800df48:	425b      	negs	r3, r3
 800df4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800df4e:	486f      	ldr	r0, [pc, #444]	; (800e10c <_printf_i+0x21c>)
 800df50:	220a      	movs	r2, #10
 800df52:	e039      	b.n	800dfc8 <_printf_i+0xd8>
 800df54:	2973      	cmp	r1, #115	; 0x73
 800df56:	f000 809d 	beq.w	800e094 <_printf_i+0x1a4>
 800df5a:	d808      	bhi.n	800df6e <_printf_i+0x7e>
 800df5c:	296f      	cmp	r1, #111	; 0x6f
 800df5e:	d020      	beq.n	800dfa2 <_printf_i+0xb2>
 800df60:	2970      	cmp	r1, #112	; 0x70
 800df62:	d1dd      	bne.n	800df20 <_printf_i+0x30>
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	f043 0320 	orr.w	r3, r3, #32
 800df6a:	6023      	str	r3, [r4, #0]
 800df6c:	e003      	b.n	800df76 <_printf_i+0x86>
 800df6e:	2975      	cmp	r1, #117	; 0x75
 800df70:	d017      	beq.n	800dfa2 <_printf_i+0xb2>
 800df72:	2978      	cmp	r1, #120	; 0x78
 800df74:	d1d4      	bne.n	800df20 <_printf_i+0x30>
 800df76:	2378      	movs	r3, #120	; 0x78
 800df78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df7c:	4864      	ldr	r0, [pc, #400]	; (800e110 <_printf_i+0x220>)
 800df7e:	e055      	b.n	800e02c <_printf_i+0x13c>
 800df80:	6813      	ldr	r3, [r2, #0]
 800df82:	1d19      	adds	r1, r3, #4
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	6011      	str	r1, [r2, #0]
 800df88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df90:	2301      	movs	r3, #1
 800df92:	e08c      	b.n	800e0ae <_printf_i+0x1be>
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	6011      	str	r1, [r2, #0]
 800df98:	f010 0f40 	tst.w	r0, #64	; 0x40
 800df9c:	bf18      	it	ne
 800df9e:	b21b      	sxthne	r3, r3
 800dfa0:	e7cf      	b.n	800df42 <_printf_i+0x52>
 800dfa2:	6813      	ldr	r3, [r2, #0]
 800dfa4:	6825      	ldr	r5, [r4, #0]
 800dfa6:	1d18      	adds	r0, r3, #4
 800dfa8:	6010      	str	r0, [r2, #0]
 800dfaa:	0628      	lsls	r0, r5, #24
 800dfac:	d501      	bpl.n	800dfb2 <_printf_i+0xc2>
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	e002      	b.n	800dfb8 <_printf_i+0xc8>
 800dfb2:	0668      	lsls	r0, r5, #25
 800dfb4:	d5fb      	bpl.n	800dfae <_printf_i+0xbe>
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	4854      	ldr	r0, [pc, #336]	; (800e10c <_printf_i+0x21c>)
 800dfba:	296f      	cmp	r1, #111	; 0x6f
 800dfbc:	bf14      	ite	ne
 800dfbe:	220a      	movne	r2, #10
 800dfc0:	2208      	moveq	r2, #8
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfc8:	6865      	ldr	r5, [r4, #4]
 800dfca:	60a5      	str	r5, [r4, #8]
 800dfcc:	2d00      	cmp	r5, #0
 800dfce:	f2c0 8095 	blt.w	800e0fc <_printf_i+0x20c>
 800dfd2:	6821      	ldr	r1, [r4, #0]
 800dfd4:	f021 0104 	bic.w	r1, r1, #4
 800dfd8:	6021      	str	r1, [r4, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d13d      	bne.n	800e05a <_printf_i+0x16a>
 800dfde:	2d00      	cmp	r5, #0
 800dfe0:	f040 808e 	bne.w	800e100 <_printf_i+0x210>
 800dfe4:	4665      	mov	r5, ip
 800dfe6:	2a08      	cmp	r2, #8
 800dfe8:	d10b      	bne.n	800e002 <_printf_i+0x112>
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	07db      	lsls	r3, r3, #31
 800dfee:	d508      	bpl.n	800e002 <_printf_i+0x112>
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	6862      	ldr	r2, [r4, #4]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	bfde      	ittt	le
 800dff8:	2330      	movle	r3, #48	; 0x30
 800dffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e002:	ebac 0305 	sub.w	r3, ip, r5
 800e006:	6123      	str	r3, [r4, #16]
 800e008:	f8cd 8000 	str.w	r8, [sp]
 800e00c:	463b      	mov	r3, r7
 800e00e:	aa03      	add	r2, sp, #12
 800e010:	4621      	mov	r1, r4
 800e012:	4630      	mov	r0, r6
 800e014:	f7ff fef6 	bl	800de04 <_printf_common>
 800e018:	3001      	adds	r0, #1
 800e01a:	d14d      	bne.n	800e0b8 <_printf_i+0x1c8>
 800e01c:	f04f 30ff 	mov.w	r0, #4294967295
 800e020:	b005      	add	sp, #20
 800e022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e026:	4839      	ldr	r0, [pc, #228]	; (800e10c <_printf_i+0x21c>)
 800e028:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e02c:	6813      	ldr	r3, [r2, #0]
 800e02e:	6821      	ldr	r1, [r4, #0]
 800e030:	1d1d      	adds	r5, r3, #4
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	6015      	str	r5, [r2, #0]
 800e036:	060a      	lsls	r2, r1, #24
 800e038:	d50b      	bpl.n	800e052 <_printf_i+0x162>
 800e03a:	07ca      	lsls	r2, r1, #31
 800e03c:	bf44      	itt	mi
 800e03e:	f041 0120 	orrmi.w	r1, r1, #32
 800e042:	6021      	strmi	r1, [r4, #0]
 800e044:	b91b      	cbnz	r3, 800e04e <_printf_i+0x15e>
 800e046:	6822      	ldr	r2, [r4, #0]
 800e048:	f022 0220 	bic.w	r2, r2, #32
 800e04c:	6022      	str	r2, [r4, #0]
 800e04e:	2210      	movs	r2, #16
 800e050:	e7b7      	b.n	800dfc2 <_printf_i+0xd2>
 800e052:	064d      	lsls	r5, r1, #25
 800e054:	bf48      	it	mi
 800e056:	b29b      	uxthmi	r3, r3
 800e058:	e7ef      	b.n	800e03a <_printf_i+0x14a>
 800e05a:	4665      	mov	r5, ip
 800e05c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e060:	fb02 3311 	mls	r3, r2, r1, r3
 800e064:	5cc3      	ldrb	r3, [r0, r3]
 800e066:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e06a:	460b      	mov	r3, r1
 800e06c:	2900      	cmp	r1, #0
 800e06e:	d1f5      	bne.n	800e05c <_printf_i+0x16c>
 800e070:	e7b9      	b.n	800dfe6 <_printf_i+0xf6>
 800e072:	6813      	ldr	r3, [r2, #0]
 800e074:	6825      	ldr	r5, [r4, #0]
 800e076:	6961      	ldr	r1, [r4, #20]
 800e078:	1d18      	adds	r0, r3, #4
 800e07a:	6010      	str	r0, [r2, #0]
 800e07c:	0628      	lsls	r0, r5, #24
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	d501      	bpl.n	800e086 <_printf_i+0x196>
 800e082:	6019      	str	r1, [r3, #0]
 800e084:	e002      	b.n	800e08c <_printf_i+0x19c>
 800e086:	066a      	lsls	r2, r5, #25
 800e088:	d5fb      	bpl.n	800e082 <_printf_i+0x192>
 800e08a:	8019      	strh	r1, [r3, #0]
 800e08c:	2300      	movs	r3, #0
 800e08e:	6123      	str	r3, [r4, #16]
 800e090:	4665      	mov	r5, ip
 800e092:	e7b9      	b.n	800e008 <_printf_i+0x118>
 800e094:	6813      	ldr	r3, [r2, #0]
 800e096:	1d19      	adds	r1, r3, #4
 800e098:	6011      	str	r1, [r2, #0]
 800e09a:	681d      	ldr	r5, [r3, #0]
 800e09c:	6862      	ldr	r2, [r4, #4]
 800e09e:	2100      	movs	r1, #0
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	f7f2 f89d 	bl	80001e0 <memchr>
 800e0a6:	b108      	cbz	r0, 800e0ac <_printf_i+0x1bc>
 800e0a8:	1b40      	subs	r0, r0, r5
 800e0aa:	6060      	str	r0, [r4, #4]
 800e0ac:	6863      	ldr	r3, [r4, #4]
 800e0ae:	6123      	str	r3, [r4, #16]
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0b6:	e7a7      	b.n	800e008 <_printf_i+0x118>
 800e0b8:	6923      	ldr	r3, [r4, #16]
 800e0ba:	462a      	mov	r2, r5
 800e0bc:	4639      	mov	r1, r7
 800e0be:	4630      	mov	r0, r6
 800e0c0:	47c0      	blx	r8
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	d0aa      	beq.n	800e01c <_printf_i+0x12c>
 800e0c6:	6823      	ldr	r3, [r4, #0]
 800e0c8:	079b      	lsls	r3, r3, #30
 800e0ca:	d413      	bmi.n	800e0f4 <_printf_i+0x204>
 800e0cc:	68e0      	ldr	r0, [r4, #12]
 800e0ce:	9b03      	ldr	r3, [sp, #12]
 800e0d0:	4298      	cmp	r0, r3
 800e0d2:	bfb8      	it	lt
 800e0d4:	4618      	movlt	r0, r3
 800e0d6:	e7a3      	b.n	800e020 <_printf_i+0x130>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	464a      	mov	r2, r9
 800e0dc:	4639      	mov	r1, r7
 800e0de:	4630      	mov	r0, r6
 800e0e0:	47c0      	blx	r8
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	d09a      	beq.n	800e01c <_printf_i+0x12c>
 800e0e6:	3501      	adds	r5, #1
 800e0e8:	68e3      	ldr	r3, [r4, #12]
 800e0ea:	9a03      	ldr	r2, [sp, #12]
 800e0ec:	1a9b      	subs	r3, r3, r2
 800e0ee:	42ab      	cmp	r3, r5
 800e0f0:	dcf2      	bgt.n	800e0d8 <_printf_i+0x1e8>
 800e0f2:	e7eb      	b.n	800e0cc <_printf_i+0x1dc>
 800e0f4:	2500      	movs	r5, #0
 800e0f6:	f104 0919 	add.w	r9, r4, #25
 800e0fa:	e7f5      	b.n	800e0e8 <_printf_i+0x1f8>
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d1ac      	bne.n	800e05a <_printf_i+0x16a>
 800e100:	7803      	ldrb	r3, [r0, #0]
 800e102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e10a:	e76c      	b.n	800dfe6 <_printf_i+0xf6>
 800e10c:	0800e57d 	.word	0x0800e57d
 800e110:	0800e58e 	.word	0x0800e58e

0800e114 <memmove>:
 800e114:	4288      	cmp	r0, r1
 800e116:	b510      	push	{r4, lr}
 800e118:	eb01 0302 	add.w	r3, r1, r2
 800e11c:	d807      	bhi.n	800e12e <memmove+0x1a>
 800e11e:	1e42      	subs	r2, r0, #1
 800e120:	4299      	cmp	r1, r3
 800e122:	d00a      	beq.n	800e13a <memmove+0x26>
 800e124:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e128:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e12c:	e7f8      	b.n	800e120 <memmove+0xc>
 800e12e:	4283      	cmp	r3, r0
 800e130:	d9f5      	bls.n	800e11e <memmove+0xa>
 800e132:	1881      	adds	r1, r0, r2
 800e134:	1ad2      	subs	r2, r2, r3
 800e136:	42d3      	cmn	r3, r2
 800e138:	d100      	bne.n	800e13c <memmove+0x28>
 800e13a:	bd10      	pop	{r4, pc}
 800e13c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e140:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e144:	e7f7      	b.n	800e136 <memmove+0x22>
	...

0800e148 <_free_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4605      	mov	r5, r0
 800e14c:	2900      	cmp	r1, #0
 800e14e:	d045      	beq.n	800e1dc <_free_r+0x94>
 800e150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e154:	1f0c      	subs	r4, r1, #4
 800e156:	2b00      	cmp	r3, #0
 800e158:	bfb8      	it	lt
 800e15a:	18e4      	addlt	r4, r4, r3
 800e15c:	f000 f8d2 	bl	800e304 <__malloc_lock>
 800e160:	4a1f      	ldr	r2, [pc, #124]	; (800e1e0 <_free_r+0x98>)
 800e162:	6813      	ldr	r3, [r2, #0]
 800e164:	4610      	mov	r0, r2
 800e166:	b933      	cbnz	r3, 800e176 <_free_r+0x2e>
 800e168:	6063      	str	r3, [r4, #4]
 800e16a:	6014      	str	r4, [r2, #0]
 800e16c:	4628      	mov	r0, r5
 800e16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e172:	f000 b8c8 	b.w	800e306 <__malloc_unlock>
 800e176:	42a3      	cmp	r3, r4
 800e178:	d90c      	bls.n	800e194 <_free_r+0x4c>
 800e17a:	6821      	ldr	r1, [r4, #0]
 800e17c:	1862      	adds	r2, r4, r1
 800e17e:	4293      	cmp	r3, r2
 800e180:	bf04      	itt	eq
 800e182:	681a      	ldreq	r2, [r3, #0]
 800e184:	685b      	ldreq	r3, [r3, #4]
 800e186:	6063      	str	r3, [r4, #4]
 800e188:	bf04      	itt	eq
 800e18a:	1852      	addeq	r2, r2, r1
 800e18c:	6022      	streq	r2, [r4, #0]
 800e18e:	6004      	str	r4, [r0, #0]
 800e190:	e7ec      	b.n	800e16c <_free_r+0x24>
 800e192:	4613      	mov	r3, r2
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	b10a      	cbz	r2, 800e19c <_free_r+0x54>
 800e198:	42a2      	cmp	r2, r4
 800e19a:	d9fa      	bls.n	800e192 <_free_r+0x4a>
 800e19c:	6819      	ldr	r1, [r3, #0]
 800e19e:	1858      	adds	r0, r3, r1
 800e1a0:	42a0      	cmp	r0, r4
 800e1a2:	d10b      	bne.n	800e1bc <_free_r+0x74>
 800e1a4:	6820      	ldr	r0, [r4, #0]
 800e1a6:	4401      	add	r1, r0
 800e1a8:	1858      	adds	r0, r3, r1
 800e1aa:	4282      	cmp	r2, r0
 800e1ac:	6019      	str	r1, [r3, #0]
 800e1ae:	d1dd      	bne.n	800e16c <_free_r+0x24>
 800e1b0:	6810      	ldr	r0, [r2, #0]
 800e1b2:	6852      	ldr	r2, [r2, #4]
 800e1b4:	605a      	str	r2, [r3, #4]
 800e1b6:	4401      	add	r1, r0
 800e1b8:	6019      	str	r1, [r3, #0]
 800e1ba:	e7d7      	b.n	800e16c <_free_r+0x24>
 800e1bc:	d902      	bls.n	800e1c4 <_free_r+0x7c>
 800e1be:	230c      	movs	r3, #12
 800e1c0:	602b      	str	r3, [r5, #0]
 800e1c2:	e7d3      	b.n	800e16c <_free_r+0x24>
 800e1c4:	6820      	ldr	r0, [r4, #0]
 800e1c6:	1821      	adds	r1, r4, r0
 800e1c8:	428a      	cmp	r2, r1
 800e1ca:	bf04      	itt	eq
 800e1cc:	6811      	ldreq	r1, [r2, #0]
 800e1ce:	6852      	ldreq	r2, [r2, #4]
 800e1d0:	6062      	str	r2, [r4, #4]
 800e1d2:	bf04      	itt	eq
 800e1d4:	1809      	addeq	r1, r1, r0
 800e1d6:	6021      	streq	r1, [r4, #0]
 800e1d8:	605c      	str	r4, [r3, #4]
 800e1da:	e7c7      	b.n	800e16c <_free_r+0x24>
 800e1dc:	bd38      	pop	{r3, r4, r5, pc}
 800e1de:	bf00      	nop
 800e1e0:	20001cf8 	.word	0x20001cf8

0800e1e4 <_malloc_r>:
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	1ccd      	adds	r5, r1, #3
 800e1e8:	f025 0503 	bic.w	r5, r5, #3
 800e1ec:	3508      	adds	r5, #8
 800e1ee:	2d0c      	cmp	r5, #12
 800e1f0:	bf38      	it	cc
 800e1f2:	250c      	movcc	r5, #12
 800e1f4:	2d00      	cmp	r5, #0
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	db01      	blt.n	800e1fe <_malloc_r+0x1a>
 800e1fa:	42a9      	cmp	r1, r5
 800e1fc:	d903      	bls.n	800e206 <_malloc_r+0x22>
 800e1fe:	230c      	movs	r3, #12
 800e200:	6033      	str	r3, [r6, #0]
 800e202:	2000      	movs	r0, #0
 800e204:	bd70      	pop	{r4, r5, r6, pc}
 800e206:	f000 f87d 	bl	800e304 <__malloc_lock>
 800e20a:	4a21      	ldr	r2, [pc, #132]	; (800e290 <_malloc_r+0xac>)
 800e20c:	6814      	ldr	r4, [r2, #0]
 800e20e:	4621      	mov	r1, r4
 800e210:	b991      	cbnz	r1, 800e238 <_malloc_r+0x54>
 800e212:	4c20      	ldr	r4, [pc, #128]	; (800e294 <_malloc_r+0xb0>)
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	b91b      	cbnz	r3, 800e220 <_malloc_r+0x3c>
 800e218:	4630      	mov	r0, r6
 800e21a:	f000 f863 	bl	800e2e4 <_sbrk_r>
 800e21e:	6020      	str	r0, [r4, #0]
 800e220:	4629      	mov	r1, r5
 800e222:	4630      	mov	r0, r6
 800e224:	f000 f85e 	bl	800e2e4 <_sbrk_r>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	d124      	bne.n	800e276 <_malloc_r+0x92>
 800e22c:	230c      	movs	r3, #12
 800e22e:	6033      	str	r3, [r6, #0]
 800e230:	4630      	mov	r0, r6
 800e232:	f000 f868 	bl	800e306 <__malloc_unlock>
 800e236:	e7e4      	b.n	800e202 <_malloc_r+0x1e>
 800e238:	680b      	ldr	r3, [r1, #0]
 800e23a:	1b5b      	subs	r3, r3, r5
 800e23c:	d418      	bmi.n	800e270 <_malloc_r+0x8c>
 800e23e:	2b0b      	cmp	r3, #11
 800e240:	d90f      	bls.n	800e262 <_malloc_r+0x7e>
 800e242:	600b      	str	r3, [r1, #0]
 800e244:	50cd      	str	r5, [r1, r3]
 800e246:	18cc      	adds	r4, r1, r3
 800e248:	4630      	mov	r0, r6
 800e24a:	f000 f85c 	bl	800e306 <__malloc_unlock>
 800e24e:	f104 000b 	add.w	r0, r4, #11
 800e252:	1d23      	adds	r3, r4, #4
 800e254:	f020 0007 	bic.w	r0, r0, #7
 800e258:	1ac3      	subs	r3, r0, r3
 800e25a:	d0d3      	beq.n	800e204 <_malloc_r+0x20>
 800e25c:	425a      	negs	r2, r3
 800e25e:	50e2      	str	r2, [r4, r3]
 800e260:	e7d0      	b.n	800e204 <_malloc_r+0x20>
 800e262:	428c      	cmp	r4, r1
 800e264:	684b      	ldr	r3, [r1, #4]
 800e266:	bf16      	itet	ne
 800e268:	6063      	strne	r3, [r4, #4]
 800e26a:	6013      	streq	r3, [r2, #0]
 800e26c:	460c      	movne	r4, r1
 800e26e:	e7eb      	b.n	800e248 <_malloc_r+0x64>
 800e270:	460c      	mov	r4, r1
 800e272:	6849      	ldr	r1, [r1, #4]
 800e274:	e7cc      	b.n	800e210 <_malloc_r+0x2c>
 800e276:	1cc4      	adds	r4, r0, #3
 800e278:	f024 0403 	bic.w	r4, r4, #3
 800e27c:	42a0      	cmp	r0, r4
 800e27e:	d005      	beq.n	800e28c <_malloc_r+0xa8>
 800e280:	1a21      	subs	r1, r4, r0
 800e282:	4630      	mov	r0, r6
 800e284:	f000 f82e 	bl	800e2e4 <_sbrk_r>
 800e288:	3001      	adds	r0, #1
 800e28a:	d0cf      	beq.n	800e22c <_malloc_r+0x48>
 800e28c:	6025      	str	r5, [r4, #0]
 800e28e:	e7db      	b.n	800e248 <_malloc_r+0x64>
 800e290:	20001cf8 	.word	0x20001cf8
 800e294:	20001cfc 	.word	0x20001cfc

0800e298 <_realloc_r>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	4607      	mov	r7, r0
 800e29c:	4614      	mov	r4, r2
 800e29e:	460e      	mov	r6, r1
 800e2a0:	b921      	cbnz	r1, 800e2ac <_realloc_r+0x14>
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2a8:	f7ff bf9c 	b.w	800e1e4 <_malloc_r>
 800e2ac:	b922      	cbnz	r2, 800e2b8 <_realloc_r+0x20>
 800e2ae:	f7ff ff4b 	bl	800e148 <_free_r>
 800e2b2:	4625      	mov	r5, r4
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b8:	f000 f826 	bl	800e308 <_malloc_usable_size_r>
 800e2bc:	42a0      	cmp	r0, r4
 800e2be:	d20f      	bcs.n	800e2e0 <_realloc_r+0x48>
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	f7ff ff8e 	bl	800e1e4 <_malloc_r>
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d0f2      	beq.n	800e2b4 <_realloc_r+0x1c>
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	4622      	mov	r2, r4
 800e2d2:	f7ff fbf7 	bl	800dac4 <memcpy>
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4638      	mov	r0, r7
 800e2da:	f7ff ff35 	bl	800e148 <_free_r>
 800e2de:	e7e9      	b.n	800e2b4 <_realloc_r+0x1c>
 800e2e0:	4635      	mov	r5, r6
 800e2e2:	e7e7      	b.n	800e2b4 <_realloc_r+0x1c>

0800e2e4 <_sbrk_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4c06      	ldr	r4, [pc, #24]	; (800e300 <_sbrk_r+0x1c>)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4605      	mov	r5, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	6023      	str	r3, [r4, #0]
 800e2f0:	f7f2 ff94 	bl	800121c <_sbrk>
 800e2f4:	1c43      	adds	r3, r0, #1
 800e2f6:	d102      	bne.n	800e2fe <_sbrk_r+0x1a>
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	b103      	cbz	r3, 800e2fe <_sbrk_r+0x1a>
 800e2fc:	602b      	str	r3, [r5, #0]
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	2000d04c 	.word	0x2000d04c

0800e304 <__malloc_lock>:
 800e304:	4770      	bx	lr

0800e306 <__malloc_unlock>:
 800e306:	4770      	bx	lr

0800e308 <_malloc_usable_size_r>:
 800e308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e30c:	1f18      	subs	r0, r3, #4
 800e30e:	2b00      	cmp	r3, #0
 800e310:	bfbc      	itt	lt
 800e312:	580b      	ldrlt	r3, [r1, r0]
 800e314:	18c0      	addlt	r0, r0, r3
 800e316:	4770      	bx	lr

0800e318 <_init>:
 800e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31a:	bf00      	nop
 800e31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e31e:	bc08      	pop	{r3}
 800e320:	469e      	mov	lr, r3
 800e322:	4770      	bx	lr

0800e324 <_fini>:
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e326:	bf00      	nop
 800e328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e32a:	bc08      	pop	{r3}
 800e32c:	469e      	mov	lr, r3
 800e32e:	4770      	bx	lr
