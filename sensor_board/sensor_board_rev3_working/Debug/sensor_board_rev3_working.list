
sensor_board_rev3_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800e180  0800e180  0001e180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3f4  0800e3f4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3f4  0800e3f4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3f4  0800e3f4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3f4  0800e3f4  0001e3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3f8  0800e3f8  0001e3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e3fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce44  200001f4  0800e5f0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d038  0800e5f0  0002d038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031471  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000598a  00000000  00000000  00051695  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fe8  00000000  00000000  00057020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d50  00000000  00000000  00059008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000913a  00000000  00000000  0005ad58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f09d  00000000  00000000  00063e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e45b3  00000000  00000000  00082f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001674e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008828  00000000  00000000  00167560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e168 	.word	0x0800e168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800e168 	.word	0x0800e168

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b08d      	sub	sp, #52	; 0x34
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f001 fcfc 	bl	800246e <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USB_DEVICE_Init();
 8000a76:	f00c f9a9 	bl	800cdcc <MX_USB_DEVICE_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f891 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 f9cf 	bl	8000e20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a82:	f000 f911 	bl	8000ca8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a86:	f000 f94f 	bl	8000d28 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a8a:	f000 f98b 	bl	8000da4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a8e:	f008 fd0f 	bl	80094b0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  /* Barometer Mutex */
  const osMutexAttr_t baro_mutex_attr = {
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <main+0xdc>)
 8000a94:	f107 0420 	add.w	r4, r7, #32
 8000a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  baro_mutex = osMutexNew(&baro_mutex_attr);
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 feb4 	bl	8009810 <osMutexNew>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <main+0xe0>)
 8000aac:	601a      	str	r2, [r3, #0]
  /* IMU Mutex */
  const osMutexAttr_t imu_mutex_attr = {
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <main+0xe4>)
 8000ab0:	f107 0410 	add.w	r4, r7, #16
 8000ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  imu_mutex = osMutexNew(&imu_mutex_attr);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fea6 	bl	8009810 <osMutexNew>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <main+0xe8>)
 8000ac8:	601a      	str	r2, [r3, #0]


#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <main+0xec>)
 8000acc:	463c      	mov	r4, r7
 8000ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f008 fe9a 	bl	8009810 <osMutexNew>
 8000adc:	4602      	mov	r2, r0
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <main+0xf0>)
 8000ae0:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  preprocess_queue = osMessageQueueNew(PREPROCESS_QUEUE_SIZE, sizeof(imu_data_t), NULL);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	2020      	movs	r0, #32
 8000ae8:	f008 ffda 	bl	8009aa0 <osMessageQueueNew>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <main+0xf4>)
 8000af0:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <main+0xf8>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	481c      	ldr	r0, [pc, #112]	; (8000b68 <main+0xfc>)
 8000af8:	f008 fd76 	bl	80095e8 <osThreadNew>
 8000afc:	4602      	mov	r2, r0
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <main+0x100>)
 8000b00:	601a      	str	r2, [r3, #0]

  /* creation of task_baro_read */
  task_baro_readHandle = osThreadNew(vTaskBaroRead, NULL, &task_baro_read_attributes);
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <main+0x104>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	481b      	ldr	r0, [pc, #108]	; (8000b74 <main+0x108>)
 8000b08:	f008 fd6e 	bl	80095e8 <osThreadNew>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <main+0x10c>)
 8000b10:	601a      	str	r2, [r3, #0]

  /* creation of task_imu_read */
  task_imu_readHandle = osThreadNew(vTaskImuRead, NULL, &task_imu_read_attributes);
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <main+0x110>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <main+0x114>)
 8000b18:	f008 fd66 	bl	80095e8 <osThreadNew>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <main+0x118>)
 8000b20:	601a      	str	r2, [r3, #0]

  /* creation of task_send_to_mb */
  task_send_to_mbHandle = osThreadNew(vTaskSendToMb, NULL, &task_send_to_mb_attributes);
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <main+0x11c>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4819      	ldr	r0, [pc, #100]	; (8000b8c <main+0x120>)
 8000b28:	f008 fd5e 	bl	80095e8 <osThreadNew>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <main+0x124>)
 8000b30:	601a      	str	r2, [r3, #0]

  /* creation of task_preprocess */
  task_preprocessHandle = osThreadNew(vTaskPreprocess, NULL, &task_preprocess_attributes);
 8000b32:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <main+0x128>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <main+0x12c>)
 8000b38:	f008 fd56 	bl	80095e8 <osThreadNew>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <main+0x130>)
 8000b40:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b42:	f008 fce9 	bl	8009518 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <main+0xda>
 8000b48:	0800e1d8 	.word	0x0800e1d8
 8000b4c:	2000c0a4 	.word	0x2000c0a4
 8000b50:	0800e1f4 	.word	0x0800e1f4
 8000b54:	20005f34 	.word	0x20005f34
 8000b58:	0800e210 	.word	0x0800e210
 8000b5c:	2000c028 	.word	0x2000c028
 8000b60:	20001dc8 	.word	0x20001dc8
 8000b64:	0800e2c4 	.word	0x0800e2c4
 8000b68:	08000ee5 	.word	0x08000ee5
 8000b6c:	20001d68 	.word	0x20001d68
 8000b70:	0800e2e8 	.word	0x0800e2e8
 8000b74:	08001349 	.word	0x08001349
 8000b78:	2000a020 	.word	0x2000a020
 8000b7c:	0800e30c 	.word	0x0800e30c
 8000b80:	080017ed 	.word	0x080017ed
 8000b84:	2000c090 	.word	0x2000c090
 8000b88:	0800e330 	.word	0x0800e330
 8000b8c:	08002321 	.word	0x08002321
 8000b90:	2000601c 	.word	0x2000601c
 8000b94:	0800e354 	.word	0x0800e354
 8000b98:	08001fd9 	.word	0x08001fd9
 8000b9c:	2000a024 	.word	0x2000a024

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0ae      	sub	sp, #184	; 0xb8
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000baa:	2244      	movs	r2, #68	; 0x44
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00c febb 	bl	800d92a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2260      	movs	r2, #96	; 0x60
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00c fead 	bl	800d92a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000be0:	2360      	movs	r3, #96	; 0x60
 8000be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000bf8:	2328      	movs	r3, #40	; 0x28
 8000bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fbe1 	bl	80043dc <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c20:	f000 f97c 	bl	8000f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 ffec 	bl	8004c1c <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c4a:	f000 f967 	bl	8000f1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000c4e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000c52:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c66:	2318      	movs	r3, #24
 8000c68:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000c76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c7a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 f9ec 	bl	800505c <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c8a:	f000 f947 	bl	8000f1c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c92:	f003 fb3d 	bl	8004310 <HAL_PWREx_ControlVoltageScaling>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000c9c:	f000 f93e 	bl	8000f1c <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	37b8      	adds	r7, #184	; 0xb8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <MX_I2C1_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ce4:	f001 fed2 	bl	8002a8c <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 f915 	bl	8000f1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cf6:	f002 fb23 	bl	8003340 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 f90c 	bl	8000f1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000d08:	f002 fb65 	bl	80033d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f903 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20001ee8 	.word	0x20001ee8
 8000d20:	40005400 	.word	0x40005400
 8000d24:	00702991 	.word	0x00702991

08000d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <MX_SPI1_Init+0x78>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d5e:	2218      	movs	r2, #24
 8000d60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d76:	2207      	movs	r2, #7
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_SPI1_Init+0x74>)
 8000d88:	f004 fc9c 	bl	80056c4 <HAL_SPI_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 f8c3 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000c02c 	.word	0x2000c02c
 8000da0:	40013000 	.word	0x40013000

08000da4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_SPI2_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dda:	2228      	movs	r2, #40	; 0x28
 8000ddc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000df2:	2207      	movs	r2, #7
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000dfe:	2208      	movs	r2, #8
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_SPI2_Init+0x74>)
 8000e04:	f004 fc5e 	bl	80056c4 <HAL_SPI_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e0e:	f000 f885 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20001dcc 	.word	0x20001dcc
 8000e1c:	40003800 	.word	0x40003800

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a28      	ldr	r2, [pc, #160]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a22      	ldr	r2, [pc, #136]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_GPIO_Init+0xbc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2110      	movs	r1, #16
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f001 fde9 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_GPIO_Init+0xc0>)
 8000e92:	f001 fde3 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e96:	2310      	movs	r3, #16
 8000e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 fc5a 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_GPIO_Init+0xc0>)
 8000ece:	f001 fc4b 	bl	8002768 <HAL_GPIO_Init>

}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000eec:	f00b ff6e 	bl	800cdcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f008 fc1f 	bl	8009734 <osDelay>
 8000ef6:	e7fb      	b.n	8000ef0 <StartDefaultTask+0xc>

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0a:	f001 fac9 	bl	80024a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40012c00 	.word	0x40012c00

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	210f      	movs	r1, #15
 8000f66:	f06f 0001 	mvn.w	r0, #1
 8000f6a:	f001 fb91 	bl	8002690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_I2C_MspInit+0x80>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d129      	bne.n	8000ff2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f001 fbc7 	bl	8002768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_I2C_MspInit+0x84>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <HAL_SPI_MspInit+0xec>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d129      	bne.n	800107a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800102c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001030:	6613      	str	r3, [r2, #96]	; 0x60
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001056:	23c2      	movs	r3, #194	; 0xc2
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001066:	2305      	movs	r3, #5
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f001 fb78 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001078:	e035      	b.n	80010e6 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <HAL_SPI_MspInit+0xf4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d130      	bne.n	80010e6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6593      	str	r3, [r2, #88]	; 0x58
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_SPI_MspInit+0xf0>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80010b4:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c6:	2305      	movs	r3, #5
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <HAL_SPI_MspInit+0xf8>)
 80010d2:	f001 fb49 	bl	8002768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	2024      	movs	r0, #36	; 0x24
 80010dc:	f001 fad8 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010e0:	2024      	movs	r0, #36	; 0x24
 80010e2:	f001 faf1 	bl	80026c8 <HAL_NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40013000 	.word	0x40013000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40003800 	.word	0x40003800
 80010fc:	48000400 	.word	0x48000400

08001100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	2019      	movs	r0, #25
 8001116:	f001 fabb 	bl	8002690 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800111a:	2019      	movs	r0, #25
 800111c:	f001 fad4 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_InitTick+0x9c>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_InitTick+0x9c>)
 8001126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112a:	6613      	str	r3, [r2, #96]	; 0x60
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_InitTick+0x9c>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001138:	f107 0210 	add.w	r2, r7, #16
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fef8 	bl	8004f38 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001148:	f003 fee0 	bl	8004f0c <HAL_RCC_GetPCLK2Freq>
 800114c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_InitTick+0xa0>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9b      	lsrs	r3, r3, #18
 8001158:	3b01      	subs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_InitTick+0xa4>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <HAL_InitTick+0xa8>)
 8001160:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_InitTick+0xa4>)
 8001164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001168:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_InitTick+0xa4>)
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_InitTick+0xa4>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_InitTick+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <HAL_InitTick+0xa4>)
 800117e:	f005 fa61 	bl	8006644 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d104      	bne.n	8001192 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <HAL_InitTick+0xa4>)
 800118a:	f005 fa91 	bl	80066b0 <HAL_TIM_Base_Start_IT>
 800118e:	4603      	mov	r3, r0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	431bde83 	.word	0x431bde83
 80011a4:	2000c0a8 	.word	0x2000c0a8
 80011a8:	40012c00 	.word	0x40012c00

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011e6:	f005 fa8d 	bl	8006704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000c0a8 	.word	0x2000c0a8

080011f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <SPI2_IRQHandler+0x10>)
 80011fa:	f004 ff8f 	bl	800611c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20001dcc 	.word	0x20001dcc

08001208 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <USB_IRQHandler+0x10>)
 800120e:	f002 fa38 	bl	8003682 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000cdc0 	.word	0x2000cdc0

0800121c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x50>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x16>
		heap_end = &end;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_sbrk+0x50>)
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <_sbrk+0x54>)
 8001230:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <_sbrk+0x50>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <_sbrk+0x50>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	466a      	mov	r2, sp
 8001242:	4293      	cmp	r3, r2
 8001244:	d907      	bls.n	8001256 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001246:	f00c fb3b 	bl	800d8c0 <__errno>
 800124a:	4602      	mov	r2, r0
 800124c:	230c      	movs	r3, #12
 800124e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	e006      	b.n	8001264 <_sbrk+0x48>
	}

	heap_end += incr;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <_sbrk+0x50>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <_sbrk+0x50>)
 8001260:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000210 	.word	0x20000210
 8001270:	2000d038 	.word	0x2000d038

08001274 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <SystemInit+0x64>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <SystemInit+0x64>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <SystemInit+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <SystemInit+0x68>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <SystemInit+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <SystemInit+0x68>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <SystemInit+0x68>)
 80012a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <SystemInit+0x68>)
 80012ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <SystemInit+0x68>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <SystemInit+0x68>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <SystemInit+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SystemInit+0x64>)
 80012c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ca:	609a      	str	r2, [r3, #8]
#endif
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	40021000 	.word	0x40021000

080012e0 <UsbPrint>:
#include <stdio.h>
#include <stdarg.h>

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 80012e0:	b40f      	push	{r0, r1, r2, r3}
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <UsbPrint+0x60>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f008 fb26 	bl	8009944 <osMutexAcquire>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d118      	bne.n	8001330 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	21c8      	movs	r1, #200	; 0xc8
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <UsbPrint+0x64>)
 800130c:	f00c fb42 	bl	800d994 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <UsbPrint+0x64>)
 8001312:	f7fe ff5d 	bl	80001d0 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29b      	uxth	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <UsbPrint+0x64>)
 800131e:	f00b fe13 	bl	800cf48 <CDC_Transmit_FS>
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <UsbPrint+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f008 fb68 	bl	8009a00 <osMutexRelease>
	}
#endif
	return ret;
 8001330:	79fb      	ldrb	r3, [r7, #7]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800133c:	b004      	add	sp, #16
 800133e:	4770      	bx	lr
 8001340:	2000c028 	.word	0x2000c028
 8001344:	20005f54 	.word	0x20005f54

08001348 <vTaskBaroRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskBaroRead(void *argument) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	int32_t temperature;
	int32_t pressure;

	/* needed for calculation of temperature and pressure. Is read out in initialization */
	uint16_t coefficients[6];
	vInitBaroRead(coefficients);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f839 	bl	80013cc <vInitBaroRead>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800135a:	f008 f913 	bl	8009584 <osKernelGetTickCount>
 800135e:	6278      	str	r0, [r7, #36]	; 0x24
	tick_update = osKernelGetTickFreq() / BARO_SAMPLING_FREQ;
 8001360:	f008 f938 	bl	80095d4 <osKernelGetTickFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <vTaskBaroRead+0x78>)
 8001368:	fba3 2302 	umull	r2, r3, r3, r2
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	623b      	str	r3, [r7, #32]
	while (1) {
		tick_count += tick_update;
 8001370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	4413      	add	r3, r2
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
		vReadBaro(&temperature, &pressure, coefficients);
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	f107 0118 	add.w	r1, r7, #24
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f8ff 	bl	8001588 <vReadBaro>

//		UsbPrint("P: %ld; T: %ld; t: %ld\n", pressure,
//				temperature, tick_count);

		/* If the Mutex is acquired we write the data into the right variable */
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <vTaskBaroRead+0x7c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f008 fad7 	bl	8009944 <osMutexAcquire>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10d      	bne.n	80013b8 <vTaskBaroRead+0x70>
			baro_data_to_mb.temperature = temperature;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <vTaskBaroRead+0x80>)
 80013a0:	6053      	str	r3, [r2, #4]
			baro_data_to_mb.pressure = pressure;
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <vTaskBaroRead+0x80>)
 80013a6:	6013      	str	r3, [r2, #0]
			baro_data_to_mb.ts = tick_count;
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <vTaskBaroRead+0x80>)
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	6093      	str	r3, [r2, #8]
			osMutexRelease(baro_mutex);
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <vTaskBaroRead+0x7c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f008 fb24 	bl	8009a00 <osMutexRelease>
		}

		osDelayUntil(tick_count);
 80013b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ba:	f008 f9e9 	bl	8009790 <osDelayUntil>
		tick_count += tick_update;
 80013be:	e7d7      	b.n	8001370 <vTaskBaroRead+0x28>
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	2000c0a4 	.word	0x2000c0a4
 80013c8:	20001d5c 	.word	0x20001d5c

080013cc <vInitBaroRead>:
	}
}

void vInitBaroRead(uint16_t coefficients[]) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	6078      	str	r0, [r7, #4]
	uint8_t command;
	uint8_t read_buffer[2];
	uint32_t wait_reset_time;
	wait_reset_time = 3 * osKernelGetTickFreq() / 1000;
 80013d4:	f008 f8fe 	bl	80095d4 <osKernelGetTickFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	4a67      	ldr	r2, [pc, #412]	; (8001580 <vInitBaroRead+0x1b4>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	60fb      	str	r3, [r7, #12]

	/* Reset */
	command = BARO_COMMAND_RESET;
 80013ea:	231e      	movs	r3, #30
 80013ec:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDRESS, &command, BARO_COMMAND_LENGTH,
 80013ee:	f107 020b 	add.w	r2, r7, #11
 80013f2:	230a      	movs	r3, #10
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	21ee      	movs	r1, #238	; 0xee
 80013fa:	4862      	ldr	r0, [pc, #392]	; (8001584 <vInitBaroRead+0x1b8>)
 80013fc:	f001 fbd6 	bl	8002bac <HAL_I2C_Master_Transmit>
	BARO_I2C_TIMEOUT);
	osDelay(wait_reset_time);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f008 f997 	bl	8009734 <osDelay>

	/* PROM Read (Coefficients) */
	READ_BARO_COEFF(0, command, coefficients);
 8001406:	23a2      	movs	r3, #162	; 0xa2
 8001408:	72fb      	strb	r3, [r7, #11]
 800140a:	f107 020b 	add.w	r2, r7, #11
 800140e:	230a      	movs	r3, #10
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	21ee      	movs	r1, #238	; 0xee
 8001416:	485b      	ldr	r0, [pc, #364]	; (8001584 <vInitBaroRead+0x1b8>)
 8001418:	f001 fbc8 	bl	8002bac <HAL_I2C_Master_Transmit>
 800141c:	f107 0208 	add.w	r2, r7, #8
 8001420:	230a      	movs	r3, #10
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2302      	movs	r3, #2
 8001426:	21ee      	movs	r1, #238	; 0xee
 8001428:	4856      	ldr	r0, [pc, #344]	; (8001584 <vInitBaroRead+0x1b8>)
 800142a:	f001 fcb3 	bl	8002d94 <HAL_I2C_Master_Receive>
 800142e:	7a3b      	ldrb	r3, [r7, #8]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21a      	sxth	r2, r3
 8001434:	7a7b      	ldrb	r3, [r7, #9]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b21b      	sxth	r3, r3
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(1, command, coefficients);
 8001442:	23a4      	movs	r3, #164	; 0xa4
 8001444:	72fb      	strb	r3, [r7, #11]
 8001446:	f107 020b 	add.w	r2, r7, #11
 800144a:	230a      	movs	r3, #10
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	21ee      	movs	r1, #238	; 0xee
 8001452:	484c      	ldr	r0, [pc, #304]	; (8001584 <vInitBaroRead+0x1b8>)
 8001454:	f001 fbaa 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001458:	f107 0208 	add.w	r2, r7, #8
 800145c:	230a      	movs	r3, #10
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2302      	movs	r3, #2
 8001462:	21ee      	movs	r1, #238	; 0xee
 8001464:	4847      	ldr	r0, [pc, #284]	; (8001584 <vInitBaroRead+0x1b8>)
 8001466:	f001 fc95 	bl	8002d94 <HAL_I2C_Master_Receive>
 800146a:	7a3b      	ldrb	r3, [r7, #8]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7a7b      	ldrb	r3, [r7, #9]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3302      	adds	r3, #2
 800147c:	b292      	uxth	r2, r2
 800147e:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(2, command, coefficients);
 8001480:	23a6      	movs	r3, #166	; 0xa6
 8001482:	72fb      	strb	r3, [r7, #11]
 8001484:	f107 020b 	add.w	r2, r7, #11
 8001488:	230a      	movs	r3, #10
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	21ee      	movs	r1, #238	; 0xee
 8001490:	483c      	ldr	r0, [pc, #240]	; (8001584 <vInitBaroRead+0x1b8>)
 8001492:	f001 fb8b 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001496:	f107 0208 	add.w	r2, r7, #8
 800149a:	230a      	movs	r3, #10
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2302      	movs	r3, #2
 80014a0:	21ee      	movs	r1, #238	; 0xee
 80014a2:	4838      	ldr	r0, [pc, #224]	; (8001584 <vInitBaroRead+0x1b8>)
 80014a4:	f001 fc76 	bl	8002d94 <HAL_I2C_Master_Receive>
 80014a8:	7a3b      	ldrb	r3, [r7, #8]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	7a7b      	ldrb	r3, [r7, #9]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3304      	adds	r3, #4
 80014ba:	b292      	uxth	r2, r2
 80014bc:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(3, command, coefficients);
 80014be:	23a8      	movs	r3, #168	; 0xa8
 80014c0:	72fb      	strb	r3, [r7, #11]
 80014c2:	f107 020b 	add.w	r2, r7, #11
 80014c6:	230a      	movs	r3, #10
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	21ee      	movs	r1, #238	; 0xee
 80014ce:	482d      	ldr	r0, [pc, #180]	; (8001584 <vInitBaroRead+0x1b8>)
 80014d0:	f001 fb6c 	bl	8002bac <HAL_I2C_Master_Transmit>
 80014d4:	f107 0208 	add.w	r2, r7, #8
 80014d8:	230a      	movs	r3, #10
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2302      	movs	r3, #2
 80014de:	21ee      	movs	r1, #238	; 0xee
 80014e0:	4828      	ldr	r0, [pc, #160]	; (8001584 <vInitBaroRead+0x1b8>)
 80014e2:	f001 fc57 	bl	8002d94 <HAL_I2C_Master_Receive>
 80014e6:	7a3b      	ldrb	r3, [r7, #8]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	7a7b      	ldrb	r3, [r7, #9]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3306      	adds	r3, #6
 80014f8:	b292      	uxth	r2, r2
 80014fa:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(4, command, coefficients);
 80014fc:	23aa      	movs	r3, #170	; 0xaa
 80014fe:	72fb      	strb	r3, [r7, #11]
 8001500:	f107 020b 	add.w	r2, r7, #11
 8001504:	230a      	movs	r3, #10
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	21ee      	movs	r1, #238	; 0xee
 800150c:	481d      	ldr	r0, [pc, #116]	; (8001584 <vInitBaroRead+0x1b8>)
 800150e:	f001 fb4d 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	230a      	movs	r3, #10
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2302      	movs	r3, #2
 800151c:	21ee      	movs	r1, #238	; 0xee
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <vInitBaroRead+0x1b8>)
 8001520:	f001 fc38 	bl	8002d94 <HAL_I2C_Master_Receive>
 8001524:	7a3b      	ldrb	r3, [r7, #8]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7a7b      	ldrb	r3, [r7, #9]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3308      	adds	r3, #8
 8001536:	b292      	uxth	r2, r2
 8001538:	801a      	strh	r2, [r3, #0]

	READ_BARO_COEFF(5, command, coefficients);
 800153a:	23ac      	movs	r3, #172	; 0xac
 800153c:	72fb      	strb	r3, [r7, #11]
 800153e:	f107 020b 	add.w	r2, r7, #11
 8001542:	230a      	movs	r3, #10
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	21ee      	movs	r1, #238	; 0xee
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <vInitBaroRead+0x1b8>)
 800154c:	f001 fb2e 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001550:	f107 0208 	add.w	r2, r7, #8
 8001554:	230a      	movs	r3, #10
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2302      	movs	r3, #2
 800155a:	21ee      	movs	r1, #238	; 0xee
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <vInitBaroRead+0x1b8>)
 800155e:	f001 fc19 	bl	8002d94 <HAL_I2C_Master_Receive>
 8001562:	7a3b      	ldrb	r3, [r7, #8]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7a7b      	ldrb	r3, [r7, #9]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	330a      	adds	r3, #10
 8001574:	b292      	uxth	r2, r2
 8001576:	801a      	strh	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	10624dd3 	.word	0x10624dd3
 8001584:	20001ee8 	.word	0x20001ee8

08001588 <vReadBaro>:

void vReadBaro(int32_t *temperature, int32_t *pressure, uint16_t coefficients[]) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	uint8_t read_buffer[3];
	uint32_t wait_time_OSR;

	switch (BARO_OSR) {
	case 0:
		CALC_TEMP_PRESS(256, wait_time_OSR, command, pressure_raw,
 8001594:	f008 f81e 	bl	80095d4 <osKernelGetTickFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b36      	ldr	r3, [pc, #216]	; (8001674 <vReadBaro+0xec>)
 800159c:	fba3 2302 	umull	r2, r3, r3, r2
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
 80015a4:	2340      	movs	r3, #64	; 0x40
 80015a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015aa:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80015ae:	230a      	movs	r3, #10
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	21ee      	movs	r1, #238	; 0xee
 80015b6:	4830      	ldr	r0, [pc, #192]	; (8001678 <vReadBaro+0xf0>)
 80015b8:	f001 faf8 	bl	8002bac <HAL_I2C_Master_Transmit>
 80015bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015be:	f008 f8b9 	bl	8009734 <osDelay>
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015c8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80015cc:	230a      	movs	r3, #10
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	21ee      	movs	r1, #238	; 0xee
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <vReadBaro+0xf0>)
 80015d6:	f001 fae9 	bl	8002bac <HAL_I2C_Master_Transmit>
 80015da:	f107 0214 	add.w	r2, r7, #20
 80015de:	230a      	movs	r3, #10
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2303      	movs	r3, #3
 80015e4:	21ee      	movs	r1, #238	; 0xee
 80015e6:	4824      	ldr	r0, [pc, #144]	; (8001678 <vReadBaro+0xf0>)
 80015e8:	f001 fbd4 	bl	8002d94 <HAL_I2C_Master_Receive>
 80015ec:	7d3b      	ldrb	r3, [r7, #20]
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	7d7b      	ldrb	r3, [r7, #21]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4313      	orrs	r3, r2
 80015f6:	7dba      	ldrb	r2, [r7, #22]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	2350      	movs	r3, #80	; 0x50
 80015fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001602:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001606:	230a      	movs	r3, #10
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2301      	movs	r3, #1
 800160c:	21ee      	movs	r1, #238	; 0xee
 800160e:	481a      	ldr	r0, [pc, #104]	; (8001678 <vReadBaro+0xf0>)
 8001610:	f001 facc 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001616:	f008 f88d 	bl	8009734 <osDelay>
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001620:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001624:	230a      	movs	r3, #10
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	21ee      	movs	r1, #238	; 0xee
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <vReadBaro+0xf0>)
 800162e:	f001 fabd 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001632:	f107 0214 	add.w	r2, r7, #20
 8001636:	230a      	movs	r3, #10
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2303      	movs	r3, #3
 800163c:	21ee      	movs	r1, #238	; 0xee
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <vReadBaro+0xf0>)
 8001640:	f001 fba8 	bl	8002d94 <HAL_I2C_Master_Receive>
 8001644:	7d3b      	ldrb	r3, [r7, #20]
 8001646:	041a      	lsls	r2, r3, #16
 8001648:	7d7b      	ldrb	r3, [r7, #21]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4313      	orrs	r3, r2
 800164e:	7dba      	ldrb	r2, [r7, #22]
 8001650:	4313      	orrs	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	f107 0118 	add.w	r1, r7, #24
 8001658:	f107 021c 	add.w	r2, r7, #28
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f809 	bl	800167c <vCalculateTempPressure>
				temperature_raw, temperature, pressure, coefficients)
		;
		break;
 800166a:	bf00      	nop
		/* defaults to OSR 256 */
		CALC_TEMP_PRESS(256, wait_time_OSR, command, pressure_raw,
				temperature_raw, temperature, pressure, coefficients)
		;
	}
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	10624dd3 	.word	0x10624dd3
 8001678:	20001ee8 	.word	0x20001ee8

0800167c <vCalculateTempPressure>:

/* this is how we have to calculate temperature and Pressure which is written in the Datasheet */
void vCalculateTempPressure(int32_t *temperature, int32_t *pressure,
		uint32_t *temperature_raw, uint32_t *pressure_raw,
		uint16_t coefficients[]) {
 800167c:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8001680:	b08b      	sub	sp, #44	; 0x2c
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
	int64_t dT;
	int64_t OFF, SENS;

	dT = *temperature_raw - ((uint32_t) coefficients[4] << 8);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001692:	3308      	adds	r3, #8
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f04f 0400 	mov.w	r4, #0
 800169e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	/* Temperature in 2000  = 20.00° C */
	*temperature = (int32_t) 2000 + (dT * coefficients[5] >> 23);
 80016a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016a4:	330a      	adds	r3, #10
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f04f 0400 	mov.w	r4, #0
 80016ae:	6a3a      	ldr	r2, [r7, #32]
 80016b0:	fb04 f102 	mul.w	r1, r4, r2
 80016b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b6:	fb03 f202 	mul.w	r2, r3, r2
 80016ba:	440a      	add	r2, r1
 80016bc:	6a39      	ldr	r1, [r7, #32]
 80016be:	fba1 3403 	umull	r3, r4, r1, r3
 80016c2:	4422      	add	r2, r4
 80016c4:	4614      	mov	r4, r2
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	0dd9      	lsrs	r1, r3, #23
 80016d0:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 80016d4:	15e2      	asrs	r2, r4, #23
 80016d6:	460b      	mov	r3, r1
 80016d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	601a      	str	r2, [r3, #0]

	OFF = ((int64_t) coefficients[1] << 17) + ((coefficients[3] * dT) >> 6);
 80016e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e4:	3302      	adds	r3, #2
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f04f 0400 	mov.w	r4, #0
 80016ee:	ea4f 39d3 	mov.w	r9, r3, lsr #15
 80016f2:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80016f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f8:	3306      	adds	r3, #6
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f04f 0400 	mov.w	r4, #0
 8001702:	6a3a      	ldr	r2, [r7, #32]
 8001704:	fb04 f102 	mul.w	r1, r4, r2
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	fb03 f202 	mul.w	r2, r3, r2
 800170e:	1888      	adds	r0, r1, r2
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	fba2 1203 	umull	r1, r2, r2, r3
 8001716:	1883      	adds	r3, r0, r2
 8001718:	461a      	mov	r2, r3
 800171a:	f04f 0b00 	mov.w	fp, #0
 800171e:	f04f 0c00 	mov.w	ip, #0
 8001722:	ea4f 1b91 	mov.w	fp, r1, lsr #6
 8001726:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 800172a:	ea4f 1ca2 	mov.w	ip, r2, asr #6
 800172e:	eb1b 0308 	adds.w	r3, fp, r8
 8001732:	eb4c 0409 	adc.w	r4, ip, r9
 8001736:	e9c7 3406 	strd	r3, r4, [r7, #24]
	SENS = ((int64_t) coefficients[0] << 16) + ((coefficients[2] * dT) >> 7);
 800173a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	0c1e      	lsrs	r6, r3, #16
 8001746:	041d      	lsls	r5, r3, #16
 8001748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800174a:	3304      	adds	r3, #4
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	6a3a      	ldr	r2, [r7, #32]
 8001756:	fb04 f102 	mul.w	r1, r4, r2
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	fb03 f202 	mul.w	r2, r3, r2
 8001760:	1888      	adds	r0, r1, r2
 8001762:	6a3a      	ldr	r2, [r7, #32]
 8001764:	fba2 1203 	umull	r1, r2, r2, r3
 8001768:	1883      	adds	r3, r0, r2
 800176a:	461a      	mov	r2, r3
 800176c:	f04f 0800 	mov.w	r8, #0
 8001770:	f04f 0900 	mov.w	r9, #0
 8001774:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8001778:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 800177c:	ea4f 19e2 	mov.w	r9, r2, asr #7
 8001780:	eb18 0305 	adds.w	r3, r8, r5
 8001784:	eb49 0406 	adc.w	r4, r9, r6
 8001788:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* Pressure in 110002 = 1100.02 mbar */
	*pressure = (int32_t) ((((*pressure_raw * SENS) >> 21) - OFF) >> 15);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f04f 0400 	mov.w	r4, #0
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	fb04 f102 	mul.w	r1, r4, r2
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	fb03 f202 	mul.w	r2, r3, r2
 80017a0:	1888      	adds	r0, r1, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	fba2 1203 	umull	r1, r2, r2, r3
 80017a8:	1883      	adds	r3, r0, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	f04f 0400 	mov.w	r4, #0
 80017b4:	0d4b      	lsrs	r3, r1, #21
 80017b6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80017ba:	1554      	asrs	r4, r2, #21
 80017bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017c0:	1a5b      	subs	r3, r3, r1
 80017c2:	eb64 0402 	sbc.w	r4, r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	4626      	mov	r6, r4
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	0beb      	lsrs	r3, r5, #15
 80017d4:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80017d8:	13f4      	asrs	r4, r6, #15
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	372c      	adds	r7, #44	; 0x2c
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80017ea:	4770      	bx	lr

080017ec <vTaskImuRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskImuRead(void *argument) {
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	b095      	sub	sp, #84	; 0x54
 80017f0:	af04      	add	r7, sp, #16
 80017f2:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;

	/* initialize data variables */
	int16_t gyroscope_data[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 80017f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	809a      	strh	r2, [r3, #4]
	int16_t acceleration[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	809a      	strh	r2, [r3, #4]
	int16_t offset[6] = { 0 };
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]

	/* initialize counter as we want to average over 4 samples every time */
	int8_t counter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	/* initialize queue message */
	imu_data_t queue_data = { 0 };
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]

	vInitImu20600Read(offset);
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f8cd 	bl	80019cc <vInitImu20600Read>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001832:	f007 fea7 	bl	8009584 <osKernelGetTickCount>
 8001836:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / IMU20601_SAMPLING_FREQ;
 8001838:	f007 fecc 	bl	80095d4 <osKernelGetTickFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <vTaskImuRead+0x1d4>)
 8001840:	fba3 2302 	umull	r2, r3, r3, r2
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
	for (;;) {
		tick_count += tick_update;
 8001848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184c:	4413      	add	r3, r2
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
		vReadImu20600(gyroscope_data, acceleration, offset);
 8001850:	f107 0218 	add.w	r2, r7, #24
 8001854:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fb27 	bl	8001eb0 <vReadImu20600>

		/* Debugging */

		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
 8001862:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
 8001866:	461c      	mov	r4, r3
				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
 8001868:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
 800186c:	461d      	mov	r5, r3
				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
 800186e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
 8001872:	461e      	mov	r6, r3
				acceleration[0], acceleration[1], acceleration[2], tick_count);
 8001874:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
 8001878:	461a      	mov	r2, r3
				acceleration[0], acceleration[1], acceleration[2], tick_count);
 800187a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
 800187e:	4619      	mov	r1, r3
				acceleration[0], acceleration[1], acceleration[2], tick_count);
 8001880:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
		UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
 8001884:	4618      	mov	r0, r3
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	9303      	str	r3, [sp, #12]
 800188a:	9002      	str	r0, [sp, #8]
 800188c:	9101      	str	r1, [sp, #4]
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	4633      	mov	r3, r6
 8001892:	462a      	mov	r2, r5
 8001894:	4621      	mov	r1, r4
 8001896:	484b      	ldr	r0, [pc, #300]	; (80019c4 <vTaskImuRead+0x1d8>)
 8001898:	f7ff fd22 	bl	80012e0 <UsbPrint>


		//TODO [nstojosk] : can this overflow?
		queue_data.gyro_x += gyroscope_data[0];
 800189c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	813b      	strh	r3, [r7, #8]
		queue_data.gyro_y += gyroscope_data[1];
 80018b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4413      	add	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	817b      	strh	r3, [r7, #10]
		queue_data.gyro_z += gyroscope_data[2];
 80018c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	81bb      	strh	r3, [r7, #12]
		queue_data.acc_x += acceleration[0];
 80018d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	81fb      	strh	r3, [r7, #14]
		queue_data.acc_y += acceleration[1];
 80018ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	823b      	strh	r3, [r7, #16]
		queue_data.acc_z += acceleration[2];
 8001900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001904:	b29a      	uxth	r2, r3
 8001906:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800190a:	b29b      	uxth	r3, r3
 800190c:	4413      	add	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	b21b      	sxth	r3, r3
 8001912:	827b      	strh	r3, [r7, #18]
		++counter;
 8001914:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001918:	3301      	adds	r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (counter == 4) {
 8001920:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8001924:	2b04      	cmp	r3, #4
 8001926:	d146      	bne.n	80019b6 <vTaskImuRead+0x1ca>
			/* reset counter */
			counter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			/* Average Data */
			queue_data.gyro_x /= 4;
 800192e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da00      	bge.n	8001938 <vTaskImuRead+0x14c>
 8001936:	3303      	adds	r3, #3
 8001938:	109b      	asrs	r3, r3, #2
 800193a:	b21b      	sxth	r3, r3
 800193c:	813b      	strh	r3, [r7, #8]
			queue_data.gyro_y /= 4;
 800193e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001942:	2b00      	cmp	r3, #0
 8001944:	da00      	bge.n	8001948 <vTaskImuRead+0x15c>
 8001946:	3303      	adds	r3, #3
 8001948:	109b      	asrs	r3, r3, #2
 800194a:	b21b      	sxth	r3, r3
 800194c:	817b      	strh	r3, [r7, #10]
			queue_data.gyro_z /= 4;
 800194e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da00      	bge.n	8001958 <vTaskImuRead+0x16c>
 8001956:	3303      	adds	r3, #3
 8001958:	109b      	asrs	r3, r3, #2
 800195a:	b21b      	sxth	r3, r3
 800195c:	81bb      	strh	r3, [r7, #12]
			queue_data.acc_x /= 4;
 800195e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001962:	2b00      	cmp	r3, #0
 8001964:	da00      	bge.n	8001968 <vTaskImuRead+0x17c>
 8001966:	3303      	adds	r3, #3
 8001968:	109b      	asrs	r3, r3, #2
 800196a:	b21b      	sxth	r3, r3
 800196c:	81fb      	strh	r3, [r7, #14]
			queue_data.acc_y /= 4;
 800196e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	da00      	bge.n	8001978 <vTaskImuRead+0x18c>
 8001976:	3303      	adds	r3, #3
 8001978:	109b      	asrs	r3, r3, #2
 800197a:	b21b      	sxth	r3, r3
 800197c:	823b      	strh	r3, [r7, #16]
			queue_data.acc_z /= 4;
 800197e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da00      	bge.n	8001988 <vTaskImuRead+0x19c>
 8001986:	3303      	adds	r3, #3
 8001988:	109b      	asrs	r3, r3, #2
 800198a:	b21b      	sxth	r3, r3
 800198c:	827b      	strh	r3, [r7, #18]
			/* I dont know it this works with the overflow of the tick_count! */
			queue_data.ts = tick_count;
 800198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001990:	617b      	str	r3, [r7, #20]

			/* Send Data to Queue */
			osMessageQueuePut(preprocess_queue, &queue_data, 0U, 0U);
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <vTaskImuRead+0x1dc>)
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	f107 0108 	add.w	r1, r7, #8
 800199a:	2300      	movs	r3, #0
 800199c:	2200      	movs	r2, #0
 800199e:	f008 f905 	bl	8009bac <osMessageQueuePut>

			/* reset queue value */
			queue_data = EMPTY_IMU;
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
			counter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		osDelayUntil(tick_count);
 80019b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019b8:	f007 feea 	bl	8009790 <osDelayUntil>
		tick_count += tick_update;
 80019bc:	e744      	b.n	8001848 <vTaskImuRead+0x5c>
 80019be:	bf00      	nop
 80019c0:	51eb851f 	.word	0x51eb851f
 80019c4:	0800e220 	.word	0x0800e220
 80019c8:	20001dc8 	.word	0x20001dc8

080019cc <vInitImu20600Read>:
	}
}

void vInitImu20600Read(int16_t offset[]) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b096      	sub	sp, #88	; 0x58
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	osDelayUntil(1000);
 80019d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d8:	f007 feda 	bl	8009790 <osDelayUntil>
	while (1) {
		HAL_Delay(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f000 fd7d 	bl	80024dc <HAL_Delay>
		/* sensor management 1 */
		/* Reset Sensor */
		uint8_t register_sensor_powerMgmt1[2] = { 0 };
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		register_sensor_powerMgmt1[0] = IMU20601_COMMAND_POWER_MANAGMENT1_WRITE;
 80019e8:	236b      	movs	r3, #107	; 0x6b
 80019ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		register_sensor_powerMgmt1[1] =
				(reset_conf << 7 | SENS_sleep_EN << 6 | SENS_clk_src << 0);
 80019ee:	2301      	movs	r3, #1
 80019f0:	01db      	lsls	r3, r3, #7
 80019f2:	b25a      	sxtb	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	019b      	lsls	r3, r3, #6
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b25a      	sxtb	r2, r3
 80019fe:	2301      	movs	r3, #1
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt1[1] =
 8001a08:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f001 f822 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt1,
 8001a18:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001a1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a20:	2202      	movs	r2, #2
 8001a22:	48e7      	ldr	r0, [pc, #924]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001a24:	f003 fed8 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f001 f814 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f000 fd51 	bl	80024dc <HAL_Delay>

		/* Wake Up Chip, set internal PLL */
		register_sensor_powerMgmt1[1] =
				(SENS_sleep_EN << 6 | SENS_clk_src << 0);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	019b      	lsls	r3, r3, #6
 8001a3e:	b25a      	sxtb	r2, r3
 8001a40:	2301      	movs	r3, #1
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt1[1] =
 8001a4a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2110      	movs	r1, #16
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a56:	f001 f801 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt1,
 8001a5a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001a5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a62:	2202      	movs	r2, #2
 8001a64:	48d6      	ldr	r0, [pc, #856]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001a66:	f003 feb7 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f000 fff3 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 fd30 	bl	80024dc <HAL_Delay>

		/* Set The gyro and accelerometer on standby for configuration */
		uint8_t register_sensor_powerMgmt2[2] = { 0 };
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		register_sensor_powerMgmt1[0] = IMU20601_COMMAND_POWER_MANAGMENT2_WRITE;
 8001a82:	236c      	movs	r3, #108	; 0x6c
 8001a84:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		register_sensor_powerMgmt1[1] = 0x3F;
 8001a88:	233f      	movs	r3, #63	; 0x3f
 8001a8a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

		/* Write Register */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2110      	movs	r1, #16
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f000 ffe1 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt2,
 8001a9a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001a9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	48c6      	ldr	r0, [pc, #792]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001aa6:	f003 fe97 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2110      	movs	r1, #16
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f000 ffd3 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 fd10 	bl	80024dc <HAL_Delay>

		/* Disable I2C Mode */
		uint8_t register_sensor_control[2] = { 0 };
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		register_sensor_control[0] = IMU20601_COMMAND_USER_CONTROL_WRITE;
 8001ac2:	236a      	movs	r3, #106	; 0x6a
 8001ac4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		register_sensor_control[1] = (SENS_FIFO_EN << 6 | I2C_DISABLE << 4 | 1);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	019b      	lsls	r3, r3, #6
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	2301      	movs	r3, #1
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f000 ffb6 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_control,
 8001af0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001af4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001af8:	2202      	movs	r2, #2
 8001afa:	48b1      	ldr	r0, [pc, #708]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001afc:	f003 fe6c 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	2110      	movs	r1, #16
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f000 ffa8 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f000 fce5 	bl	80024dc <HAL_Delay>

		/* Configure Gyroscope */
		uint8_t register_gyro_config[2] = { 0 };
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		register_gyro_config[0] = IMU20601_COMMAND_GYROSCOPE_CONFIGURATION_WRITE;
 8001b18:	231b      	movs	r3, #27
 8001b1a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		register_gyro_config[1] = (GYRO_SELFTEST << 5 | GYRO_RANGE << 3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	015b      	lsls	r3, r3, #5
 8001b22:	b25a      	sxtb	r2, r3
 8001b24:	2301      	movs	r3, #1
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b25a      	sxtb	r2, r3
				| GYRO_FILTER);
 8001b2e:	2302      	movs	r3, #2
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
		register_gyro_config[1] = (GYRO_SELFTEST << 5 | GYRO_RANGE << 3
 8001b38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2110      	movs	r1, #16
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f000 ff8a 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_gyro_config,
 8001b48:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001b4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b50:	2202      	movs	r2, #2
 8001b52:	489b      	ldr	r0, [pc, #620]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001b54:	f003 fe40 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f000 ff7c 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f000 fcb9 	bl	80024dc <HAL_Delay>

		/* Configure Accelerometer */
		uint8_t register_acc_config[2] = { 0 };
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		register_acc_config[0] = IMU20601_COMMAND_ACCELEROMETER_CONFIGURATION1_WRITE;
 8001b70:	231c      	movs	r3, #28
 8001b72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		register_acc_config[1] = (ACC_SELFTEST << 5 | ACC_RANGE << 3);
 8001b76:	2300      	movs	r3, #0
 8001b78:	015b      	lsls	r3, r3, #5
 8001b7a:	b25a      	sxtb	r2, r3
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		uint8_t register_acc_config2[2] = { 0 };
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
		register_acc_config2[0] = IMU20601_COMMAND_ACCELEROMETER_CONFIGURATION2_WRITE;
 8001b90:	231d      	movs	r3, #29
 8001b92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		register_acc_config2[1] = (ACC_AVGFILTER << 3 | ACC_FILTER);
 8001b96:	2300      	movs	r3, #0
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	b25a      	sxtb	r2, r3
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2110      	movs	r1, #16
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb2:	f000 ff53 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_acc_config,
 8001bb6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001bba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	487f      	ldr	r0, [pc, #508]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001bc2:	f003 fe09 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2110      	movs	r1, #16
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bce:	f000 ff45 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f000 fc82 	bl	80024dc <HAL_Delay>

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2110      	movs	r1, #16
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f000 ff3c 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_acc_config2,
 8001be4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001be8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bec:	2202      	movs	r2, #2
 8001bee:	4874      	ldr	r0, [pc, #464]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001bf0:	f003 fdf2 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfc:	f000 ff2e 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f000 fc6b 	bl	80024dc <HAL_Delay>

		/* Remove Offset */
		uint8_t test[2] = {0x77, 0x00};
 8001c06:	2377      	movs	r3, #119	; 0x77
 8001c08:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2110      	movs	r1, #16
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f000 ff1f 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, test,
 8001c1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c22:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c26:	2202      	movs	r2, #2
 8001c28:	4865      	ldr	r0, [pc, #404]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001c2a:	f003 fdd5 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2110      	movs	r1, #16
 8001c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c36:	f000 ff11 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f000 fc4e 	bl	80024dc <HAL_Delay>

		test[1] = 0x78;
 8001c40:	2378      	movs	r3, #120	; 0x78
 8001c42:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2110      	movs	r1, #16
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f000 ff05 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, test,
 8001c52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c56:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4858      	ldr	r0, [pc, #352]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001c5e:	f003 fdbb 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2110      	movs	r1, #16
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f000 fef7 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f000 fc34 	bl	80024dc <HAL_Delay>

		test[1] = 0x7A;
 8001c74:	237a      	movs	r3, #122	; 0x7a
 8001c76:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c82:	f000 feeb 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, test,
 8001c86:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c8e:	2202      	movs	r2, #2
 8001c90:	484b      	ldr	r0, [pc, #300]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001c92:	f003 fda1 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c96:	2201      	movs	r2, #1
 8001c98:	2110      	movs	r1, #16
 8001c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9e:	f000 fedd 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 fc1a 	bl	80024dc <HAL_Delay>

		test[1] = 0x7B;
 8001ca8:	237b      	movs	r3, #123	; 0x7b
 8001caa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f000 fed1 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, test,
 8001cba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	483e      	ldr	r0, [pc, #248]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001cc6:	f003 fd87 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2110      	movs	r1, #16
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f000 fec3 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f000 fc00 	bl	80024dc <HAL_Delay>

		test[1] = 0x7D;
 8001cdc:	237d      	movs	r3, #125	; 0x7d
 8001cde:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f000 feb7 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, test,
 8001cee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001cf2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	4831      	ldr	r0, [pc, #196]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001cfa:	f003 fd6d 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2110      	movs	r1, #16
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d06:	f000 fea9 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fbe6 	bl	80024dc <HAL_Delay>

		test[1] = 0x7E;
 8001d10:	237e      	movs	r3, #126	; 0x7e
 8001d12:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2110      	movs	r1, #16
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f000 fe9d 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, test,
 8001d22:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d26:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4824      	ldr	r0, [pc, #144]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001d2e:	f003 fd53 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2110      	movs	r1, #16
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3a:	f000 fe8f 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f000 fbcc 	bl	80024dc <HAL_Delay>


		/* FIFO disable */
		uint8_t register_FIFO[2] = { 0 };
 8001d44:	2300      	movs	r3, #0
 8001d46:	86bb      	strh	r3, [r7, #52]	; 0x34
		register_FIFO[0] = IMU20601_COMMAND_FIFO_ENABLE_WRITE;
 8001d48:	2323      	movs	r3, #35	; 0x23
 8001d4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		register_FIFO[1] = (GYRO_FIFO_EN << 4 | ACC_FIFO_EN << 3);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	b25a      	sxtb	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2110      	movs	r1, #16
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6c:	f000 fe76 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_FIFO,
 8001d70:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d74:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <vInitImu20600Read+0x3f4>)
 8001d7c:	f003 fd2c 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH,
				IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2110      	movs	r1, #16
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d88:	f000 fe68 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f000 fba5 	bl	80024dc <HAL_Delay>

		/* sensor management 2 */
		register_sensor_powerMgmt2[0] = IMU20601_COMMAND_POWER_MANAGMENT2_WRITE;
 8001d92:	236c      	movs	r3, #108	; 0x6c
 8001d94:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		register_sensor_powerMgmt2[1] = (SENS_acc_axis_EN << 3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	00db      	lsls	r3, r3, #3
				| SENS_gyri_axis_EN << 0);
 8001d9c:	b25a      	sxtb	r2, r3
 8001d9e:	2300      	movs	r3, #0
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt2[1] = (SENS_acc_axis_EN << 3
 8001da8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2110      	movs	r1, #16
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f000 fe52 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt2,
 8001db8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001dbc:	e002      	b.n	8001dc4 <vInitImu20600Read+0x3f8>
 8001dbe:	bf00      	nop
 8001dc0:	2000c02c 	.word	0x2000c02c
 8001dc4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4838      	ldr	r0, [pc, #224]	; (8001eac <vInitImu20600Read+0x4e0>)
 8001dcc:	f003 fd04 	bl	80057d8 <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd8:	f000 fe40 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f000 fb7d 	bl	80024dc <HAL_Delay>
		/* Read Register */

		/* Test if what we measure is possible */
		int16_t gyroscope_data[3]; /* 0 = x, 1 = y, 2 = z */
		int16_t acceleration[3]; /* 0 = x, 1 = y, 2 = z */
		int32_t offsetholder[6] = { 0 };
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	615a      	str	r2, [r3, #20]
		for(int k = 0; k < 1024; k++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	657b      	str	r3, [r7, #84]	; 0x54
 8001df8:	e028      	b.n	8001e4c <vInitImu20600Read+0x480>
			vReadImu20600(gyroscope_data, acceleration, offset);
 8001dfa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f853 	bl	8001eb0 <vReadImu20600>
			offsetholder[0] += (int32_t) acceleration[0];
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
			offsetholder[1] += (int32_t)acceleration[1];
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001e1a:	4413      	add	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
			offsetholder[2] += (int32_t)acceleration[2];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8001e24:	4413      	add	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
			offsetholder[3] += (int32_t)gyroscope_data[0];
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001e2e:	4413      	add	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
			offsetholder[4] += (int32_t)gyroscope_data[1];
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001e38:	4413      	add	r3, r2
 8001e3a:	61fb      	str	r3, [r7, #28]
			offsetholder[5] += (int32_t)gyroscope_data[2];
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8001e42:	4413      	add	r3, r2
 8001e44:	623b      	str	r3, [r7, #32]
		for(int k = 0; k < 1024; k++){
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	3301      	adds	r3, #1
 8001e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e52:	dbd2      	blt.n	8001dfa <vInitImu20600Read+0x42e>
		}
		offset[0] = offsetholder[0] >> 10;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	129b      	asrs	r3, r3, #10
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	801a      	strh	r2, [r3, #0]
		offset[1] = offsetholder[1] >> 10;
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	129a      	asrs	r2, r3, #10
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3302      	adds	r3, #2
 8001e66:	b212      	sxth	r2, r2
 8001e68:	801a      	strh	r2, [r3, #0]
		offset[2] = (offsetholder[2] >> 10) - (1 << 10) ;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	129b      	asrs	r3, r3, #10
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	b212      	sxth	r2, r2
 8001e7c:	801a      	strh	r2, [r3, #0]
		offset[3] = offsetholder[3] >> 10;
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	129a      	asrs	r2, r3, #10
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3306      	adds	r3, #6
 8001e86:	b212      	sxth	r2, r2
 8001e88:	801a      	strh	r2, [r3, #0]
		offset[4] = offsetholder[4] >> 10;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	129a      	asrs	r2, r3, #10
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3308      	adds	r3, #8
 8001e92:	b212      	sxth	r2, r2
 8001e94:	801a      	strh	r2, [r3, #0]
		offset[5] = offsetholder[5] >> 10;
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	129a      	asrs	r2, r3, #10
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	330a      	adds	r3, #10
 8001e9e:	b212      	sxth	r2, r2
 8001ea0:	801a      	strh	r2, [r3, #0]
//		if (((abs_value > 0.25 && abs_value < 2.25)
//				&& (test2[0] > -50 && test2[0] < 50
//						&& test2[1] > -50 && test2[1] < 50
//						&& test2[2] > -50 && test2[2] < 50))) {
			/* initialization successful */
			break;
 8001ea2:	bf00      	nop
//		}
	}
}
 8001ea4:	bf00      	nop
 8001ea6:	3758      	adds	r7, #88	; 0x58
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000c02c 	.word	0x2000c02c

08001eb0 <vReadImu20600>:

void vReadImu20600(int16_t gyroscope_data[], int16_t acceleration[], int16_t offset[]) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]

	/* Read Accelerometer Data */
	uint8_t bufferAcc[6] = { 0 };
 8001ebc:	f107 0320 	add.w	r3, r7, #32
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	809a      	strh	r2, [r3, #4]
	uint8_t commandaccread = IMU20601_COMMAND_ACC_READ;
 8001ec6:	23bb      	movs	r3, #187	; 0xbb
 8001ec8:	77fb      	strb	r3, [r7, #31]
	//uint8_t commandaccread = 0xF7;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2110      	movs	r1, #16
 8001ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed2:	f000 fdc3 	bl	8002a5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &commandaccread, 1, IMU20601_SPI_TIMEOUT);
 8001ed6:	f107 011f 	add.w	r1, r7, #31
 8001eda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ede:	2201      	movs	r2, #1
 8001ee0:	483b      	ldr	r0, [pc, #236]	; (8001fd0 <vReadImu20600+0x120>)
 8001ee2:	f003 fc79 	bl	80057d8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, bufferAcc, 6, IMU20601_SPI_TIMEOUT);
 8001ee6:	f107 0120 	add.w	r1, r7, #32
 8001eea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001eee:	2206      	movs	r2, #6
 8001ef0:	4837      	ldr	r0, [pc, #220]	; (8001fd0 <vReadImu20600+0x120>)
 8001ef2:	f003 fdd7 	bl	8005aa4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2110      	movs	r1, #16
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f000 fdad 	bl	8002a5c <HAL_GPIO_WritePin>

	acceleration[0] = bufferAcc[0] << 8 | bufferAcc[1];
 8001f02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	801a      	strh	r2, [r3, #0]
	acceleration[1] = bufferAcc[2] << 8 | bufferAcc[3];
 8001f18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b219      	sxth	r1, r3
 8001f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	b212      	sxth	r2, r2
 8001f2e:	801a      	strh	r2, [r3, #0]
	acceleration[2] = bufferAcc[4] << 8 | bufferAcc[5];
 8001f30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b219      	sxth	r1, r3
 8001f38:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3304      	adds	r3, #4
 8001f42:	430a      	orrs	r2, r1
 8001f44:	b212      	sxth	r2, r2
 8001f46:	801a      	strh	r2, [r3, #0]
//	acceleration[1] = acceleration[1] - offset[1];
//	acceleration[2] = acceleration[2] - offset[2];


	/* Read Gyroscope Data */
	uint8_t bufferGyro[6] = { 0 };
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	809a      	strh	r2, [r3, #4]
	uint8_t commandgyroread = IMU20601_COMMAND_GYRO_READ;
 8001f52:	23c3      	movs	r3, #195	; 0xc3
 8001f54:	75fb      	strb	r3, [r7, #23]
	//uint8_t commandgyroread = 0x93;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2110      	movs	r1, #16
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5e:	f000 fd7d 	bl	8002a5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &commandgyroread, 1, IMU20601_SPI_TIMEOUT);
 8001f62:	f107 0117 	add.w	r1, r7, #23
 8001f66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4818      	ldr	r0, [pc, #96]	; (8001fd0 <vReadImu20600+0x120>)
 8001f6e:	f003 fc33 	bl	80057d8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, bufferGyro, 6, IMU20601_SPI_TIMEOUT);
 8001f72:	f107 0118 	add.w	r1, r7, #24
 8001f76:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f7a:	2206      	movs	r2, #6
 8001f7c:	4814      	ldr	r0, [pc, #80]	; (8001fd0 <vReadImu20600+0x120>)
 8001f7e:	f003 fd91 	bl	8005aa4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2110      	movs	r1, #16
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f000 fd67 	bl	8002a5c <HAL_GPIO_WritePin>

	gyroscope_data[0] = bufferGyro[0] << 8 | bufferGyro[1];
 8001f8e:	7e3b      	ldrb	r3, [r7, #24]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	7e7b      	ldrb	r3, [r7, #25]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	801a      	strh	r2, [r3, #0]
	gyroscope_data[1] = bufferGyro[2] << 8 | bufferGyro[3];
 8001fa0:	7ebb      	ldrb	r3, [r7, #26]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	b219      	sxth	r1, r3
 8001fa6:	7efb      	ldrb	r3, [r7, #27]
 8001fa8:	b21a      	sxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3302      	adds	r3, #2
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	b212      	sxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
	gyroscope_data[2] = bufferGyro[4] << 8 | bufferGyro[5];
 8001fb4:	7f3b      	ldrb	r3, [r7, #28]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b219      	sxth	r1, r3
 8001fba:	7f7b      	ldrb	r3, [r7, #29]
 8001fbc:	b21a      	sxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	b212      	sxth	r2, r2
 8001fc6:	801a      	strh	r2, [r3, #0]
//	gyroscope_data[0] = gyroscope_data[0] - offset[3];
//	gyroscope_data[1] = gyroscope_data[1] - offset[4];
//	gyroscope_data[2] = gyroscope_data[2] - offset[5];


}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	2000c02c 	.word	0x2000c02c
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <vTaskPreprocess>:
 *      Author: Jonas
 */

#include "tasks/task_preprocess.h"

void vTaskPreprocess(void *argument) {
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	b08f      	sub	sp, #60	; 0x3c
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	/* registers for the Filter */
	int32_t registers[4] = { 0 };
 8001fe0:	f107 0318 	add.w	r3, r7, #24
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]

	int32_t filtered_acc_z;
	int32_t raw_acc_z;

	/* Queue data and Status Initialization */
	imu_data_t queue_data = { 0 };
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001ffc:	f007 fac2 	bl	8009584 <osKernelGetTickCount>
 8002000:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / SAMPLING_RATE_PREP;
 8002002:	f007 fae7 	bl	80095d4 <osKernelGetTickFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4bc1      	ldr	r3, [pc, #772]	; (8002310 <vTaskPreprocess+0x338>)
 800200a:	fba3 2302 	umull	r2, r3, r3, r2
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	633b      	str	r3, [r7, #48]	; 0x30

	/* Infinite loop */
	for (;;) {
		tick_count += tick_update;
 8002012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	4413      	add	r3, r2
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
		if (osMessageQueueGet(preprocess_queue, &queue_data, NULL,
 800201a:	4bbe      	ldr	r3, [pc, #760]	; (8002314 <vTaskPreprocess+0x33c>)
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	f107 0108 	add.w	r1, r7, #8
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	2200      	movs	r2, #0
 8002028:	f007 fe34 	bl	8009c94 <osMessageQueueGet>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <vTaskPreprocess+0x3a>
		osWaitForever) == osOK) {
			raw_acc_z = queue_data.acc_z;
 8002032:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
			filtered_acc_z = A0
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8002038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800203a:	f7fe fa73 	bl	8000524 <__aeabi_i2d>
 800203e:	4605      	mov	r5, r0
 8002040:	460e      	mov	r6, r1
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa6d 	bl	8000524 <__aeabi_i2d>
 800204a:	a4a3      	add	r4, pc, #652	; (adr r4, 80022d8 <vTaskPreprocess+0x300>)
 800204c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	f7fe fad0 	bl	80005f8 <__aeabi_dmul>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	461a      	mov	r2, r3
 800205e:	4623      	mov	r3, r4
 8002060:	4628      	mov	r0, r5
 8002062:	4631      	mov	r1, r6
 8002064:	f7fe f912 	bl	800028c <__adddf3>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	461d      	mov	r5, r3
 800206e:	4626      	mov	r6, r4
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fa56 	bl	8000524 <__aeabi_i2d>
 8002078:	a499      	add	r4, pc, #612	; (adr r4, 80022e0 <vTaskPreprocess+0x308>)
 800207a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800207e:	461a      	mov	r2, r3
 8002080:	4623      	mov	r3, r4
 8002082:	f7fe fab9 	bl	80005f8 <__aeabi_dmul>
 8002086:	4603      	mov	r3, r0
 8002088:	460c      	mov	r4, r1
 800208a:	461a      	mov	r2, r3
 800208c:	4623      	mov	r3, r4
 800208e:	4628      	mov	r0, r5
 8002090:	4631      	mov	r1, r6
 8002092:	f7fe f8fb 	bl	800028c <__adddf3>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	461d      	mov	r5, r3
 800209c:	4626      	mov	r6, r4
							+ B3 * registers[2] + B4 * registers[3]) +
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa3f 	bl	8000524 <__aeabi_i2d>
 80020a6:	a490      	add	r4, pc, #576	; (adr r4, 80022e8 <vTaskPreprocess+0x310>)
 80020a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	f7fe faa2 	bl	80005f8 <__aeabi_dmul>
 80020b4:	4603      	mov	r3, r0
 80020b6:	460c      	mov	r4, r1
 80020b8:	461a      	mov	r2, r3
 80020ba:	4623      	mov	r3, r4
 80020bc:	4628      	mov	r0, r5
 80020be:	4631      	mov	r1, r6
 80020c0:	f7fe f8e4 	bl	800028c <__adddf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	461d      	mov	r5, r3
 80020ca:	4626      	mov	r6, r4
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa28 	bl	8000524 <__aeabi_i2d>
 80020d4:	a486      	add	r4, pc, #536	; (adr r4, 80022f0 <vTaskPreprocess+0x318>)
 80020d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020da:	461a      	mov	r2, r3
 80020dc:	4623      	mov	r3, r4
 80020de:	f7fe fa8b 	bl	80005f8 <__aeabi_dmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	461a      	mov	r2, r3
 80020e8:	4623      	mov	r3, r4
 80020ea:	4628      	mov	r0, r5
 80020ec:	4631      	mov	r1, r6
 80020ee:	f7fe f8cd 	bl	800028c <__adddf3>
 80020f2:	4603      	mov	r3, r0
 80020f4:	460c      	mov	r4, r1
 80020f6:	4618      	mov	r0, r3
 80020f8:	4621      	mov	r1, r4
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 80020fa:	a47f      	add	r4, pc, #508	; (adr r4, 80022f8 <vTaskPreprocess+0x320>)
 80020fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002100:	461a      	mov	r2, r3
 8002102:	4623      	mov	r3, r4
 8002104:	f7fe fa78 	bl	80005f8 <__aeabi_dmul>
 8002108:	4603      	mov	r3, r0
 800210a:	460c      	mov	r4, r1
 800210c:	461d      	mov	r5, r3
 800210e:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa06 	bl	8000524 <__aeabi_i2d>
 8002118:	a479      	add	r4, pc, #484	; (adr r4, 8002300 <vTaskPreprocess+0x328>)
 800211a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800211e:	461a      	mov	r2, r3
 8002120:	4623      	mov	r3, r4
 8002122:	f7fe fa69 	bl	80005f8 <__aeabi_dmul>
 8002126:	4603      	mov	r3, r0
 8002128:	460c      	mov	r4, r1
							+ B3 * registers[2] + B4 * registers[3]) +
 800212a:	461a      	mov	r2, r3
 800212c:	4623      	mov	r3, r4
 800212e:	4628      	mov	r0, r5
 8002130:	4631      	mov	r1, r6
 8002132:	f7fe f8ab 	bl	800028c <__adddf3>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	461d      	mov	r5, r3
 800213c:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f9ef 	bl	8000524 <__aeabi_i2d>
 8002146:	a470      	add	r4, pc, #448	; (adr r4, 8002308 <vTaskPreprocess+0x330>)
 8002148:	e9d4 3400 	ldrd	r3, r4, [r4]
 800214c:	461a      	mov	r2, r3
 800214e:	4623      	mov	r3, r4
 8002150:	f7fe fa52 	bl	80005f8 <__aeabi_dmul>
 8002154:	4603      	mov	r3, r0
 8002156:	460c      	mov	r4, r1
 8002158:	461a      	mov	r2, r3
 800215a:	4623      	mov	r3, r4
 800215c:	4628      	mov	r0, r5
 800215e:	4631      	mov	r1, r6
 8002160:	f7fe f894 	bl	800028c <__adddf3>
 8002164:	4603      	mov	r3, r0
 8002166:	460c      	mov	r4, r1
 8002168:	461d      	mov	r5, r3
 800216a:	4626      	mov	r6, r4
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f9d8 	bl	8000524 <__aeabi_i2d>
 8002174:	a462      	add	r4, pc, #392	; (adr r4, 8002300 <vTaskPreprocess+0x328>)
 8002176:	e9d4 3400 	ldrd	r3, r4, [r4]
 800217a:	461a      	mov	r2, r3
 800217c:	4623      	mov	r3, r4
 800217e:	f7fe fa3b 	bl	80005f8 <__aeabi_dmul>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	461a      	mov	r2, r3
 8002188:	4623      	mov	r3, r4
 800218a:	4628      	mov	r0, r5
 800218c:	4631      	mov	r1, r6
 800218e:	f7fe f87d 	bl	800028c <__adddf3>
 8002192:	4603      	mov	r3, r0
 8002194:	460c      	mov	r4, r1
 8002196:	461d      	mov	r5, r3
 8002198:	4626      	mov	r6, r4
					+ A4 * registers[3];
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9c1 	bl	8000524 <__aeabi_i2d>
 80021a2:	a455      	add	r4, pc, #340	; (adr r4, 80022f8 <vTaskPreprocess+0x320>)
 80021a4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4623      	mov	r3, r4
 80021ac:	f7fe fa24 	bl	80005f8 <__aeabi_dmul>
 80021b0:	4603      	mov	r3, r0
 80021b2:	460c      	mov	r4, r1
 80021b4:	461a      	mov	r2, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	4628      	mov	r0, r5
 80021ba:	4631      	mov	r1, r6
 80021bc:	f7fe f866 	bl	800028c <__adddf3>
 80021c0:	4603      	mov	r3, r0
 80021c2:	460c      	mov	r4, r1
			filtered_acc_z = A0
 80021c4:	4618      	mov	r0, r3
 80021c6:	4621      	mov	r1, r4
 80021c8:	f7fe fc28 	bl	8000a1c <__aeabi_d2iz>
 80021cc:	4603      	mov	r3, r0
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
			registers[3] = registers[2];
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
			registers[2] = registers[1];
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	623b      	str	r3, [r7, #32]
			registers[1] = registers[0];
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	61fb      	str	r3, [r7, #28]
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 80021dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021de:	f7fe f9a1 	bl	8000524 <__aeabi_i2d>
 80021e2:	4605      	mov	r5, r0
 80021e4:	460e      	mov	r6, r1
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f99b 	bl	8000524 <__aeabi_i2d>
 80021ee:	a43a      	add	r4, pc, #232	; (adr r4, 80022d8 <vTaskPreprocess+0x300>)
 80021f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4623      	mov	r3, r4
 80021f8:	f7fe f9fe 	bl	80005f8 <__aeabi_dmul>
 80021fc:	4603      	mov	r3, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	461a      	mov	r2, r3
 8002202:	4623      	mov	r3, r4
 8002204:	4628      	mov	r0, r5
 8002206:	4631      	mov	r1, r6
 8002208:	f7fe f840 	bl	800028c <__adddf3>
 800220c:	4603      	mov	r3, r0
 800220e:	460c      	mov	r4, r1
 8002210:	461d      	mov	r5, r3
 8002212:	4626      	mov	r6, r4
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f984 	bl	8000524 <__aeabi_i2d>
 800221c:	a430      	add	r4, pc, #192	; (adr r4, 80022e0 <vTaskPreprocess+0x308>)
 800221e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	f7fe f9e7 	bl	80005f8 <__aeabi_dmul>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	461a      	mov	r2, r3
 8002230:	4623      	mov	r3, r4
 8002232:	4628      	mov	r0, r5
 8002234:	4631      	mov	r1, r6
 8002236:	f7fe f829 	bl	800028c <__adddf3>
 800223a:	4603      	mov	r3, r0
 800223c:	460c      	mov	r4, r1
 800223e:	461d      	mov	r5, r3
 8002240:	4626      	mov	r6, r4
					+ B3 * registers[2] + B4 * registers[3];
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f96d 	bl	8000524 <__aeabi_i2d>
 800224a:	a427      	add	r4, pc, #156	; (adr r4, 80022e8 <vTaskPreprocess+0x310>)
 800224c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002250:	461a      	mov	r2, r3
 8002252:	4623      	mov	r3, r4
 8002254:	f7fe f9d0 	bl	80005f8 <__aeabi_dmul>
 8002258:	4603      	mov	r3, r0
 800225a:	460c      	mov	r4, r1
 800225c:	461a      	mov	r2, r3
 800225e:	4623      	mov	r3, r4
 8002260:	4628      	mov	r0, r5
 8002262:	4631      	mov	r1, r6
 8002264:	f7fe f812 	bl	800028c <__adddf3>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	461d      	mov	r5, r3
 800226e:	4626      	mov	r6, r4
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f956 	bl	8000524 <__aeabi_i2d>
 8002278:	a41d      	add	r4, pc, #116	; (adr r4, 80022f0 <vTaskPreprocess+0x318>)
 800227a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800227e:	461a      	mov	r2, r3
 8002280:	4623      	mov	r3, r4
 8002282:	f7fe f9b9 	bl	80005f8 <__aeabi_dmul>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	461a      	mov	r2, r3
 800228c:	4623      	mov	r3, r4
 800228e:	4628      	mov	r0, r5
 8002290:	4631      	mov	r1, r6
 8002292:	f7fd fffb 	bl	800028c <__adddf3>
 8002296:	4603      	mov	r3, r0
 8002298:	460c      	mov	r4, r1
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 800229a:	4618      	mov	r0, r3
 800229c:	4621      	mov	r1, r4
 800229e:	f7fe fbbd 	bl	8000a1c <__aeabi_d2iz>
 80022a2:	4603      	mov	r3, r0
 80022a4:	61bb      	str	r3, [r7, #24]

			/* Write Result into Motherboard Variable if Mutex is available */
			if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <vTaskPreprocess+0x340>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f007 fb49 	bl	8009944 <osMutexAcquire>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f aeac 	bne.w	8002012 <vTaskPreprocess+0x3a>
				imu_data_to_mb = queue_data;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <vTaskPreprocess+0x344>)
 80022bc:	461c      	mov	r4, r3
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//				imu_data_to_mb.acc_z = filtered_acc_z; /* Insert filtered data */
				osMutexRelease(imu_mutex);
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <vTaskPreprocess+0x340>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f007 fb97 	bl	8009a00 <osMutexRelease>
		tick_count += tick_update;
 80022d2:	e69e      	b.n	8002012 <vTaskPreprocess+0x3a>
 80022d4:	f3af 8000 	nop.w
 80022d8:	1c708e5c 	.word	0x1c708e5c
 80022dc:	bfdc71c7 	.word	0xbfdc71c7
 80022e0:	bd4fbd69 	.word	0xbd4fbd69
 80022e4:	bfb2f684 	.word	0xbfb2f684
 80022e8:	80e71b2d 	.word	0x80e71b2d
 80022ec:	bf76796e 	.word	0xbf76796e
 80022f0:	e17eb593 	.word	0xe17eb593
 80022f4:	bf23fa32 	.word	0xbf23fa32
 80022f8:	3a1a0235 	.word	0x3a1a0235
 80022fc:	3fee7bb0 	.word	0x3fee7bb0
 8002300:	3eeef58e 	.word	0x3eeef58e
 8002304:	400e7bb0 	.word	0x400e7bb0
 8002308:	2b9381a8 	.word	0x2b9381a8
 800230c:	4016dcc4 	.word	0x4016dcc4
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	20001dc8 	.word	0x20001dc8
 8002318:	20005f34 	.word	0x20005f34
 800231c:	2000c094 	.word	0x2000c094

08002320 <vTaskSendToMb>:

/* include */
#include "tasks/task_send_to_mb.h"
uint8_t baro_buffer[12] = { 0 };

void vTaskSendToMb(void *argument) {
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b08d      	sub	sp, #52	; 0x34
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

	/* Local Data Variable initialization */
	imu_data_t last_imu_data = { 0 };
 8002328:	f107 0318 	add.w	r3, r7, #24
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
	baro_data_t last_baro_data = { 0 };
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8002342:	f007 f91f 	bl	8009584 <osKernelGetTickCount>
 8002346:	62f8      	str	r0, [r7, #44]	; 0x2c
	tick_update = osKernelGetTickFreq() / MB_SAMPLING_RATE;
 8002348:	f007 f944 	bl	80095d4 <osKernelGetTickFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <vTaskSendToMb+0xe0>)
 8002350:	fba3 2302 	umull	r2, r3, r3, r2
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28

	for (;;) {
		tick_count += tick_update;
 8002358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	4413      	add	r3, r2
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* acquire current Data */
		if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <vTaskSendToMb+0xe4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f007 faec 	bl	8009944 <osMutexAcquire>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <vTaskSendToMb+0x68>
			last_imu_data = imu_data_to_mb;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <vTaskSendToMb+0xe8>)
 8002374:	f107 0418 	add.w	r4, r7, #24
 8002378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(imu_mutex);
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <vTaskSendToMb+0xe4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f007 fb3c 	bl	8009a00 <osMutexRelease>
		}

		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <vTaskSendToMb+0xec>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f007 fad8 	bl	8009944 <osMutexAcquire>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <vTaskSendToMb+0x90>
			last_baro_data = baro_data_to_mb;
 800239a:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <vTaskSendToMb+0xf0>)
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(baro_mutex);
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <vTaskSendToMb+0xec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f007 fb28 	bl	8009a00 <osMutexRelease>
		}

		fullsb_data.baro = last_baro_data;
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <vTaskSendToMb+0xf4>)
 80023b2:	461c      	mov	r4, r3
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		fullsb_data.imu = last_imu_data;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <vTaskSendToMb+0xf4>)
 80023c2:	f103 040c 	add.w	r4, r3, #12
 80023c6:	f107 0318 	add.w	r3, r7, #24
 80023ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//				"[DBG Task Send] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
//				last_imu_data.gyro_x, last_imu_data.gyro_y,
//				last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
//				last_imu_data.acc_z, last_imu_data.ts);

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f000 fb3f 	bl	8002a5c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &fullsb_data, sizeof(fullsb_data), SPI_TIMEOUT);
 80023de:	231e      	movs	r3, #30
 80023e0:	221c      	movs	r2, #28
 80023e2:	490c      	ldr	r1, [pc, #48]	; (8002414 <vTaskSendToMb+0xf4>)
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <vTaskSendToMb+0xf8>)
 80023e6:	f003 f9f7 	bl	80057d8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f4:	f000 fb32 	bl	8002a5c <HAL_GPIO_WritePin>




		osDelayUntil(tick_count);
 80023f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023fa:	f007 f9c9 	bl	8009790 <osDelayUntil>
		tick_count += tick_update;
 80023fe:	e7ab      	b.n	8002358 <vTaskSendToMb+0x38>
 8002400:	51eb851f 	.word	0x51eb851f
 8002404:	20005f34 	.word	0x20005f34
 8002408:	2000c094 	.word	0x2000c094
 800240c:	2000c0a4 	.word	0x2000c0a4
 8002410:	20001d5c 	.word	0x20001d5c
 8002414:	20005f38 	.word	0x20005f38
 8002418:	20001dcc 	.word	0x20001dcc

0800241c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002420:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002422:	e003      	b.n	800242c <LoopCopyDataInit>

08002424 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002426:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002428:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800242a:	3104      	adds	r1, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800242c:	480b      	ldr	r0, [pc, #44]	; (800245c <LoopForever+0xa>)
	ldr	r3, =_edata
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002430:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002432:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002434:	d3f6      	bcc.n	8002424 <CopyDataInit>
	ldr	r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002438:	e002      	b.n	8002440 <LoopFillZerobss>

0800243a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800243a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800243c:	f842 3b04 	str.w	r3, [r2], #4

08002440 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <LoopForever+0x16>)
	cmp	r2, r3
 8002442:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002444:	d3f9      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002446:	f7fe ff15 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f00b fa3f 	bl	800d8cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800244e:	f7fe fb0d 	bl	8000a6c <main>

08002452 <LoopForever>:

LoopForever:
    b LoopForever
 8002452:	e7fe      	b.n	8002452 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002454:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002458:	0800e3fc 	.word	0x0800e3fc
	ldr	r0, =_sdata
 800245c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002460:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8002464:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8002468:	2000d038 	.word	0x2000d038

0800246c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC1_IRQHandler>

0800246e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f8fe 	bl	800267a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe fe3e 	bl	8001100 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	e001      	b.n	8002494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002490:	f7fe fd4c 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002494:	79fb      	ldrb	r3, [r7, #7]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_IncTick+0x1c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_IncTick+0x20>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_IncTick+0x1c>)
 80024b0:	6013      	str	r3, [r2, #0]
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	2000c0e8 	.word	0x2000c0e8
 80024c0:	20000008 	.word	0x20000008

080024c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTick;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000c0e8 	.word	0x2000c0e8

080024dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff ffee 	bl	80024c4 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d004      	beq.n	8002500 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_Delay+0x40>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002500:	bf00      	nop
 8002502:	f7ff ffdf 	bl	80024c4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d8f7      	bhi.n	8002502 <HAL_Delay+0x26>
  {
  }
}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff4c 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a2:	f7ff ff61 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7ff ffb1 	bl	8002614 <NVIC_EncodePriority>
 80026b2:	4602      	mov	r2, r0
 80026b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff80 	bl	80025c0 <__NVIC_SetPriority>
}
 80026c0:	bf00      	nop
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff54 	bl	8002584 <__NVIC_EnableIRQ>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d005      	beq.n	8002708 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2204      	movs	r2, #4
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e029      	b.n	800275c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 020e 	bic.w	r2, r2, #14
 8002716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f003 021c 	and.w	r2, r3, #28
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
    }
  }
  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	e154      	b.n	8002a22 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	4013      	ands	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8146 	beq.w	8002a1c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d00b      	beq.n	80027b0 <HAL_GPIO_Init+0x48>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d007      	beq.n	80027b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a4:	2b11      	cmp	r3, #17
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d130      	bne.n	8002812 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e6:	2201      	movs	r2, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0201 	and.w	r2, r3, #1
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0xea>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b12      	cmp	r3, #18
 8002850:	d123      	bne.n	800289a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	6939      	ldr	r1, [r7, #16]
 8002896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0203 	and.w	r2, r3, #3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80a0 	beq.w	8002a1c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028dc:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_GPIO_Init+0x2d8>)
 80028de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_GPIO_Init+0x2d8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6613      	str	r3, [r2, #96]	; 0x60
 80028e8:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <HAL_GPIO_Init+0x2d8>)
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028f4:	4a53      	ldr	r2, [pc, #332]	; (8002a44 <HAL_GPIO_Init+0x2dc>)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800291e:	d019      	beq.n	8002954 <HAL_GPIO_Init+0x1ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a49      	ldr	r2, [pc, #292]	; (8002a48 <HAL_GPIO_Init+0x2e0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_GPIO_Init+0x1e8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a48      	ldr	r2, [pc, #288]	; (8002a4c <HAL_GPIO_Init+0x2e4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00d      	beq.n	800294c <HAL_GPIO_Init+0x1e4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a47      	ldr	r2, [pc, #284]	; (8002a50 <HAL_GPIO_Init+0x2e8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <HAL_GPIO_Init+0x1e0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a46      	ldr	r2, [pc, #280]	; (8002a54 <HAL_GPIO_Init+0x2ec>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_GPIO_Init+0x1dc>
 8002940:	2304      	movs	r3, #4
 8002942:	e008      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 8002944:	2307      	movs	r3, #7
 8002946:	e006      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 8002948:	2303      	movs	r3, #3
 800294a:	e004      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 800294c:	2302      	movs	r3, #2
 800294e:	e002      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_GPIO_Init+0x1ee>
 8002954:	2300      	movs	r3, #0
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	f002 0203 	and.w	r2, r2, #3
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	4093      	lsls	r3, r2
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002966:	4937      	ldr	r1, [pc, #220]	; (8002a44 <HAL_GPIO_Init+0x2dc>)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002998:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800299e:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029c2:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c8:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029ec:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f47f aea3 	bne.w	8002778 <HAL_GPIO_Init+0x10>
  }
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40010000 	.word	0x40010000
 8002a48:	48000400 	.word	0x48000400
 8002a4c:	48000800 	.word	0x48000800
 8002a50:	48000c00 	.word	0x48000c00
 8002a54:	48001000 	.word	0x48001000
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e081      	b.n	8002ba2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe fa62 	bl	8000f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002adc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	e006      	b.n	8002b14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d104      	bne.n	8002b26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	ea42 0103 	orr.w	r1, r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	021a      	lsls	r2, r3, #8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69d9      	ldr	r1, [r3, #28]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1a      	ldr	r2, [r3, #32]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	460b      	mov	r3, r1
 8002bba:	817b      	strh	r3, [r7, #10]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	f040 80da 	bne.w	8002d82 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_I2C_Master_Transmit+0x30>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0d3      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x1d8>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002be4:	f7ff fc6e 	bl	80024c4 <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2319      	movs	r3, #25
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f9e6 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0be      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2221      	movs	r2, #33	; 0x21
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2210      	movs	r2, #16
 8002c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	893a      	ldrh	r2, [r7, #8]
 8002c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2bff      	cmp	r3, #255	; 0xff
 8002c36:	d90e      	bls.n	8002c56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	8979      	ldrh	r1, [r7, #10]
 8002c46:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fb48 	bl	80032e4 <I2C_TransferConfig>
 8002c54:	e06c      	b.n	8002d30 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	8979      	ldrh	r1, [r7, #10]
 8002c68:	4b48      	ldr	r3, [pc, #288]	; (8002d8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fb37 	bl	80032e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c76:	e05b      	b.n	8002d30 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	6a39      	ldr	r1, [r7, #32]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f9e3 	bl	8003048 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e07b      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d034      	beq.n	8002d30 <HAL_I2C_Master_Transmit+0x184>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d130      	bne.n	8002d30 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f975 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e04d      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2bff      	cmp	r3, #255	; 0xff
 8002cf0:	d90e      	bls.n	8002d10 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	22ff      	movs	r2, #255	; 0xff
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 faeb 	bl	80032e4 <I2C_TransferConfig>
 8002d0e:	e00f      	b.n	8002d30 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	8979      	ldrh	r1, [r7, #10]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fada 	bl	80032e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d19e      	bne.n	8002c78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6a39      	ldr	r1, [r7, #32]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f9c2 	bl	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e01a      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2220      	movs	r2, #32
 8002d54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e000      	b.n	8002d84 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
  }
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	80002000 	.word	0x80002000
 8002d90:	fe00e800 	.word	0xfe00e800

08002d94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	460b      	mov	r3, r1
 8002da2:	817b      	strh	r3, [r7, #10]
 8002da4:	4613      	mov	r3, r2
 8002da6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f040 80db 	bne.w	8002f6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_I2C_Master_Receive+0x30>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0d4      	b.n	8002f6e <HAL_I2C_Master_Receive+0x1da>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dcc:	f7ff fb7a 	bl	80024c4 <HAL_GetTick>
 8002dd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2319      	movs	r3, #25
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f8f2 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0bf      	b.n	8002f6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2222      	movs	r2, #34	; 0x22
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2210      	movs	r2, #16
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	893a      	ldrh	r2, [r7, #8]
 8002e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2bff      	cmp	r3, #255	; 0xff
 8002e1e:	d90e      	bls.n	8002e3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	8979      	ldrh	r1, [r7, #10]
 8002e2e:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_I2C_Master_Receive+0x1e4>)
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fa54 	bl	80032e4 <I2C_TransferConfig>
 8002e3c:	e06d      	b.n	8002f1a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	8979      	ldrh	r1, [r7, #10]
 8002e50:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <HAL_I2C_Master_Receive+0x1e4>)
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fa43 	bl	80032e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e5e:	e05c      	b.n	8002f1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	6a39      	ldr	r1, [r7, #32]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f96b 	bl	8003140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e07c      	b.n	8002f6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d034      	beq.n	8002f1a <HAL_I2C_Master_Receive+0x186>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d130      	bne.n	8002f1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f880 	bl	8002fc8 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e04d      	b.n	8002f6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2bff      	cmp	r3, #255	; 0xff
 8002eda:	d90e      	bls.n	8002efa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	22ff      	movs	r2, #255	; 0xff
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f9f6 	bl	80032e4 <I2C_TransferConfig>
 8002ef8:	e00f      	b.n	8002f1a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	8979      	ldrh	r1, [r7, #10]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f9e5 	bl	80032e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d19d      	bne.n	8002e60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	6a39      	ldr	r1, [r7, #32]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f8cd 	bl	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e01a      	b.n	8002f6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_I2C_Master_Receive+0x1e8>)
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	80002400 	.word	0x80002400
 8002f7c:	fe00e800 	.word	0xfe00e800

08002f80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d103      	bne.n	8002f9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d007      	beq.n	8002fbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	619a      	str	r2, [r3, #24]
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd8:	e022      	b.n	8003020 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d01e      	beq.n	8003020 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7ff fa6f 	bl	80024c4 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d113      	bne.n	8003020 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e00f      	b.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	429a      	cmp	r2, r3
 800303c:	d0cd      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003054:	e02c      	b.n	80030b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8dc 	bl	8003218 <I2C_IsAcknowledgeFailed>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e02a      	b.n	80030c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d01e      	beq.n	80030b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7ff fa27 	bl	80024c4 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d113      	bne.n	80030b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d1cb      	bne.n	8003056 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d4:	e028      	b.n	8003128 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f89c 	bl	8003218 <I2C_IsAcknowledgeFailed>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e026      	b.n	8003138 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7ff f9eb 	bl	80024c4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d113      	bne.n	8003128 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e007      	b.n	8003138 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	d1cf      	bne.n	80030d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800314c:	e055      	b.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f860 	bl	8003218 <I2C_IsAcknowledgeFailed>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e053      	b.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	d129      	bne.n	80031c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b04      	cmp	r3, #4
 800317c:	d105      	bne.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e03f      	b.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2220      	movs	r2, #32
 8003190:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800319e:	400b      	ands	r3, r1
 80031a0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e022      	b.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7ff f97e 	bl	80024c4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e007      	b.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b04      	cmp	r3, #4
 8003206:	d1a2      	bne.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	fe00e800 	.word	0xfe00e800

08003218 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d151      	bne.n	80032d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003232:	e022      	b.n	800327a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	d01e      	beq.n	800327a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323c:	f7ff f942 	bl	80024c4 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	d302      	bcc.n	8003252 <I2C_IsAcknowledgeFailed+0x3a>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d113      	bne.n	800327a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e02e      	b.n	80032d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b20      	cmp	r3, #32
 8003286:	d1d5      	bne.n	8003234 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2210      	movs	r2, #16
 800328e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2220      	movs	r2, #32
 8003296:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff fe71 	bl	8002f80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80032aa:	400b      	ands	r3, r1
 80032ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f043 0204 	orr.w	r2, r3, #4
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	4613      	mov	r3, r2
 80032f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	0d5b      	lsrs	r3, r3, #21
 8003300:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <I2C_TransferConfig+0x58>)
 8003306:	430b      	orrs	r3, r1
 8003308:	43db      	mvns	r3, r3
 800330a:	ea02 0103 	and.w	r1, r2, r3
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003314:	7a7b      	ldrb	r3, [r7, #9]
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	431a      	orrs	r2, r3
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	431a      	orrs	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	03ff63ff 	.word	0x03ff63ff

08003340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	d138      	bne.n	80033c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003360:	2302      	movs	r3, #2
 8003362:	e032      	b.n	80033ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d139      	bne.n	8003460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e033      	b.n	8003462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2224      	movs	r2, #36	; 0x24
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800346e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003470:	b08b      	sub	sp, #44	; 0x2c
 8003472:	af06      	add	r7, sp, #24
 8003474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0da      	b.n	8003636 <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f009 fe9d 	bl	800d1d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 fb20 	bl	8006aec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	687e      	ldr	r6, [r7, #4]
 80034b4:	466d      	mov	r5, sp
 80034b6:	f106 0410 	add.w	r4, r6, #16
 80034ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	1d33      	adds	r3, r6, #4
 80034c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c6:	6838      	ldr	r0, [r7, #0]
 80034c8:	f003 fae6 	bl	8006a98 <USB_CoreInit>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0ab      	b.n	8003636 <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fb1c 	bl	8006b22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e035      	b.n	800355c <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	015b      	lsls	r3, r3, #5
 80034f6:	4413      	add	r3, r2
 80034f8:	3329      	adds	r3, #41	; 0x29
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	4413      	add	r3, r2
 8003506:	3328      	adds	r3, #40	; 0x28
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	b291      	uxth	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	015b      	lsls	r3, r3, #5
 8003516:	4413      	add	r3, r2
 8003518:	3336      	adds	r3, #54	; 0x36
 800351a:	460a      	mov	r2, r1
 800351c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	015b      	lsls	r3, r3, #5
 8003524:	4413      	add	r3, r2
 8003526:	332b      	adds	r3, #43	; 0x2b
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	015b      	lsls	r3, r3, #5
 8003532:	4413      	add	r3, r2
 8003534:	3338      	adds	r3, #56	; 0x38
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	015b      	lsls	r3, r3, #5
 8003540:	4413      	add	r3, r2
 8003542:	333c      	adds	r3, #60	; 0x3c
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	3302      	adds	r3, #2
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	4413      	add	r3, r2
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	3301      	adds	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3c4      	bcc.n	80034f0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e031      	b.n	80035d0 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	015b      	lsls	r3, r3, #5
 8003572:	4413      	add	r3, r2
 8003574:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	015b      	lsls	r3, r3, #5
 8003582:	4413      	add	r3, r2
 8003584:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	015b      	lsls	r3, r3, #5
 8003592:	4413      	add	r3, r2
 8003594:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	015b      	lsls	r3, r3, #5
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	330a      	adds	r3, #10
 80035c2:	015b      	lsls	r3, r3, #5
 80035c4:	4413      	add	r3, r2
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	3301      	adds	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3c8      	bcc.n	800356c <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	687e      	ldr	r6, [r7, #4]
 80035e2:	466d      	mov	r5, sp
 80035e4:	f106 0410 	add.w	r4, r6, #16
 80035e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	1d33      	adds	r3, r6, #4
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f003 faa1 	bl	8006b3c <USB_DevInit>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e014      	b.n	8003636 <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fe3a 	bl	800429e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fae7 	bl	8007c02 <USB_DevDisconnect>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800363e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_PCD_Start+0x16>
 8003650:	2302      	movs	r3, #2
 8003652:	e012      	b.n	800367a <HAL_PCD_Start+0x3c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f004 fab7 	bl	8007bd4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fa25 	bl	8006aba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f004 facc 	bl	8007c2c <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369e:	d102      	bne.n	80036a6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fb33 	bl	8003d0c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f004 fabe 	bl	8007c2c <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d112      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	b292      	uxth	r2, r2
 80036d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f009 fdf2 	bl	800d2be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036da:	2100      	movs	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f91e 	bl	800391e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 faa0 	bl	8007c2c <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f6:	d10b      	bne.n	8003710 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800370a:	b292      	uxth	r2, r2
 800370c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f004 fa89 	bl	8007c2c <USB_ReadInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003724:	d10b      	bne.n	800373e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003738:	b292      	uxth	r2, r2
 800373a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fa72 	bl	8007c2c <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003752:	d133      	bne.n	80037bc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	b292      	uxth	r2, r2
 8003768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003774:	b29a      	uxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0208 	bic.w	r2, r2, #8
 800377e:	b292      	uxth	r2, r2
 8003780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003796:	2100      	movs	r1, #0
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f00a f83d 	bl	800d818 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f009 fdc6 	bl	800d330 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037b6:	b292      	uxth	r2, r2
 80037b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 fa33 	bl	8007c2c <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d0:	d126      	bne.n	8003820 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0208 	orr.w	r2, r2, #8
 80037e4:	b292      	uxth	r2, r2
 80037e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fc:	b292      	uxth	r2, r2
 80037fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0204 	orr.w	r2, r2, #4
 8003814:	b292      	uxth	r2, r2
 8003816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f009 fd6e 	bl	800d2fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f004 fa01 	bl	8007c2c <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d13f      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003846:	b292      	uxth	r2, r2
 8003848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003852:	2b00      	cmp	r3, #0
 8003854:	d12b      	bne.n	80038ae <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0204 	orr.w	r2, r2, #4
 8003868:	b292      	uxth	r2, r2
 800386a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0208 	orr.w	r2, r2, #8
 8003880:	b292      	uxth	r2, r2
 8003882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003896:	b29b      	uxth	r3, r3
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038a4:	2101      	movs	r1, #1
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f009 ffb6 	bl	800d818 <HAL_PCDEx_LPM_Callback>
 80038ac:	e002      	b.n	80038b4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f009 fd24 	bl	800d2fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 f9b7 	bl	8007c2c <USB_ReadInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d10e      	bne.n	80038e8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038dc:	b292      	uxth	r2, r2
 80038de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f009 fcdd 	bl	800d2a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f004 f99d 	bl	8007c2c <USB_ReadInterrupts>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d10b      	bne.n	8003916 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003910:	b292      	uxth	r2, r2
 8003912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_PCD_SetAddress+0x1a>
 8003934:	2302      	movs	r3, #2
 8003936:	e013      	b.n	8003960 <HAL_PCD_SetAddress+0x42>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f004 f92b 	bl	8007bac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	4603      	mov	r3, r0
 8003978:	70fb      	strb	r3, [r7, #3]
 800397a:	460b      	mov	r3, r1
 800397c:	803b      	strh	r3, [r7, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da0b      	bge.n	80039a6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	015b      	lsls	r3, r3, #5
 8003996:	3328      	adds	r3, #40	; 0x28
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	705a      	strb	r2, [r3, #1]
 80039a4:	e00b      	b.n	80039be <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	015b      	lsls	r3, r3, #5
 80039ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ca:	883a      	ldrh	r2, [r7, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	78ba      	ldrb	r2, [r7, #2]
 80039d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039e8:	78bb      	ldrb	r3, [r7, #2]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d102      	bne.n	80039f4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_PCD_EP_Open+0x9a>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e00e      	b.n	8003a20 <HAL_PCD_EP_Open+0xb8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 f8b7 	bl	8006b84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003a1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da0b      	bge.n	8003a54 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	015b      	lsls	r3, r3, #5
 8003a44:	3328      	adds	r3, #40	; 0x28
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	705a      	strb	r2, [r3, #1]
 8003a52:	e00b      	b.n	8003a6c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	015b      	lsls	r3, r3, #5
 8003a5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_PCD_EP_Close+0x5e>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e00e      	b.n	8003aa4 <HAL_PCD_EP_Close+0x7c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68f9      	ldr	r1, [r7, #12]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 fb65 	bl	8007164 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abc:	7afb      	ldrb	r3, [r7, #11]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	015b      	lsls	r3, r3, #5
 8003ac4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6979      	ldr	r1, [r7, #20]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 fcc4 	bl	8007490 <USB_EPStartXfer>
 8003b08:	e005      	b.n	8003b16 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6979      	ldr	r1, [r7, #20]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f003 fcbd 	bl	8007490 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	330a      	adds	r3, #10
 8003b36:	015b      	lsls	r3, r3, #5
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	681b      	ldr	r3, [r3, #0]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	460b      	mov	r3, r1
 8003b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	015b      	lsls	r3, r3, #5
 8003b62:	3328      	adds	r3, #40	; 0x28
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b82:	7afb      	ldrb	r3, [r7, #11]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 fc76 	bl	8007490 <USB_EPStartXfer>
 8003ba4:	e005      	b.n	8003bb2 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f003 fc6f 	bl	8007490 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 0207 	and.w	r2, r3, #7
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d901      	bls.n	8003bda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e046      	b.n	8003c68 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	da0b      	bge.n	8003bfa <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	015b      	lsls	r3, r3, #5
 8003bea:	3328      	adds	r3, #40	; 0x28
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	705a      	strb	r2, [r3, #1]
 8003bf8:	e009      	b.n	8003c0e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	015b      	lsls	r3, r3, #5
 8003bfe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_PCD_EP_SetStall+0x72>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e01c      	b.n	8003c68 <HAL_PCD_EP_SetStall+0xac>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f003 fedf 	bl	8007a00 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f003 fff7 	bl	8007c4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d901      	bls.n	8003c8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e03a      	b.n	8003d04 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da0b      	bge.n	8003cae <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	015b      	lsls	r3, r3, #5
 8003c9e:	3328      	adds	r3, #40	; 0x28
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	705a      	strb	r2, [r3, #1]
 8003cac:	e00b      	b.n	8003cc6 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	015b      	lsls	r3, r3, #5
 8003cb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_PCD_EP_ClrStall+0x76>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e00e      	b.n	8003d04 <HAL_PCD_EP_ClrStall+0x94>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 fec5 	bl	8007a84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d14:	e274      	b.n	8004200 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d1e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d20:	8afb      	ldrh	r3, [r7, #22]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003d2a:	7d7b      	ldrb	r3, [r7, #21]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 813c 	bne.w	8003faa <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d32:	8afb      	ldrh	r3, [r7, #22]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d14f      	bne.n	8003ddc <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4c:	b29c      	uxth	r4, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3328      	adds	r3, #40	; 0x28
 8003d62:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	441a      	add	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f009 fa69 	bl	800d274 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8228 	beq.w	8004200 <PCD_EP_ISR_Handler+0x4f4>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 8223 	bne.w	8004200 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dda:	e211      	b.n	8004200 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003de2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dec:	8a7b      	ldrh	r3, [r7, #18]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d031      	beq.n	8003e5a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f003 ff58 	bl	8007ce6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e42:	4013      	ands	r3, r2
 8003e44:	b29c      	uxth	r4, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f009 f9e4 	bl	800d220 <HAL_PCD_SetupStageCallback>
 8003e58:	e1d2      	b.n	8004200 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f280 81ce 	bge.w	8004200 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e70:	4013      	ands	r3, r2
 8003e72:	b29c      	uxth	r4, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d019      	beq.n	8003ee4 <PCD_EP_ISR_Handler+0x1d8>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6959      	ldr	r1, [r3, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f003 ff0c 	bl	8007ce6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003edc:	2100      	movs	r1, #0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f009 f9b0 	bl	800d244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461c      	mov	r4, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	441c      	add	r4, r3
 8003ef6:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003efa:	461c      	mov	r4, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10e      	bne.n	8003f22 <PCD_EP_ISR_Handler+0x216>
 8003f04:	8823      	ldrh	r3, [r4, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	8023      	strh	r3, [r4, #0]
 8003f10:	8823      	ldrh	r3, [r4, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8023      	strh	r3, [r4, #0]
 8003f20:	e02d      	b.n	8003f7e <PCD_EP_ISR_Handler+0x272>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b3e      	cmp	r3, #62	; 0x3e
 8003f28:	d812      	bhi.n	8003f50 <PCD_EP_ISR_Handler+0x244>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <PCD_EP_ISR_Handler+0x238>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3301      	adds	r3, #1
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8023      	strh	r3, [r4, #0]
 8003f4e:	e016      	b.n	8003f7e <PCD_EP_ISR_Handler+0x272>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <PCD_EP_ISR_Handler+0x25e>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	029b      	lsls	r3, r3, #10
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	b29c      	uxth	r4, r3
 8003f90:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003f94:	b29c      	uxth	r4, r3
 8003f96:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003f9a:	b29c      	uxth	r4, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b9e      	ldr	r3, [pc, #632]	; (800421c <PCD_EP_ISR_Handler+0x510>)
 8003fa2:	4323      	orrs	r3, r4
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
 8003fa8:	e12a      	b.n	8004200 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	7d7b      	ldrb	r3, [r7, #21]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f280 80cb 	bge.w	800415a <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	7d7b      	ldrb	r3, [r7, #21]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fd8:	4013      	ands	r3, r2
 8003fda:	b29c      	uxth	r4, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	7d7b      	ldrb	r3, [r7, #21]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003fec:	b292      	uxth	r2, r2
 8003fee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ff0:	7d7b      	ldrb	r3, [r7, #21]
 8003ff2:	015b      	lsls	r3, r3, #5
 8003ff4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	7b1b      	ldrb	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11f      	bne.n	8004046 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	4413      	add	r3, r2
 8004020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800402a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800402c:	8bfb      	ldrh	r3, [r7, #30]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d06e      	beq.n	8004110 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6959      	ldr	r1, [r3, #20]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88da      	ldrh	r2, [r3, #6]
 800403e:	8bfb      	ldrh	r3, [r7, #30]
 8004040:	f003 fe51 	bl	8007ce6 <USB_ReadPMA>
 8004044:	e064      	b.n	8004110 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	b29c      	uxth	r4, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	4b6b      	ldr	r3, [pc, #428]	; (8004220 <PCD_EP_ISR_Handler+0x514>)
 8004072:	4323      	orrs	r3, r4
 8004074:	b29b      	uxth	r3, r3
 8004076:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01f      	beq.n	80040d2 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	4413      	add	r3, r2
 80040ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b6:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80040b8:	8bfb      	ldrh	r3, [r7, #30]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d028      	beq.n	8004110 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6959      	ldr	r1, [r3, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	891a      	ldrh	r2, [r3, #8]
 80040ca:	8bfb      	ldrh	r3, [r7, #30]
 80040cc:	f003 fe0b 	bl	8007ce6 <USB_ReadPMA>
 80040d0:	e01e      	b.n	8004110 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4413      	add	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	4413      	add	r3, r2
 80040ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f6:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80040f8:	8bfb      	ldrh	r3, [r7, #30]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6959      	ldr	r1, [r3, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	895a      	ldrh	r2, [r3, #10]
 800410a:	8bfb      	ldrh	r3, [r7, #30]
 800410c:	f003 fdeb 	bl	8007ce6 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	8bfb      	ldrh	r3, [r7, #30]
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	8bfb      	ldrh	r3, [r7, #30]
 8004122:	441a      	add	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <PCD_EP_ISR_Handler+0x42e>
 8004130:	8bfa      	ldrh	r2, [r7, #30]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d206      	bcs.n	8004148 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f009 f87f 	bl	800d244 <HAL_PCD_DataOutStageCallback>
 8004146:	e008      	b.n	800415a <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	7819      	ldrb	r1, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff fca9 	bl	8003aac <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800415a:	8a7b      	ldrh	r3, [r7, #18]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04d      	beq.n	8004200 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004164:	7d7b      	ldrb	r3, [r7, #21]
 8004166:	015b      	lsls	r3, r3, #5
 8004168:	3328      	adds	r3, #40	; 0x28
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	7d7b      	ldrb	r3, [r7, #21]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004188:	b29c      	uxth	r4, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	7d7b      	ldrb	r3, [r7, #21]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800419a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	4413      	add	r3, r2
 80041bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	441a      	add	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f009 f844 	bl	800d274 <HAL_PCD_DataInStageCallback>
 80041ec:	e008      	b.n	8004200 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	7819      	ldrb	r1, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fca5 	bl	8003b4a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004208:	b29b      	uxth	r3, r3
 800420a:	b21b      	sxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	f6ff ad82 	blt.w	8003d16 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3724      	adds	r7, #36	; 0x24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd90      	pop	{r4, r7, pc}
 800421c:	ffff8080 	.word	0xffff8080
 8004220:	ffff80c0 	.word	0xffff80c0

08004224 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	817b      	strh	r3, [r7, #10]
 8004232:	4613      	mov	r3, r2
 8004234:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004236:	897b      	ldrh	r3, [r7, #10]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	015b      	lsls	r3, r3, #5
 800424a:	3328      	adds	r3, #40	; 0x28
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e006      	b.n	8004262 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004254:	897b      	ldrh	r3, [r7, #10]
 8004256:	015b      	lsls	r3, r3, #5
 8004258:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004262:	893b      	ldrh	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2200      	movs	r2, #0
 800426c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	b29a      	uxth	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	80da      	strh	r2, [r3, #6]
 8004276:	e00b      	b.n	8004290 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2201      	movs	r2, #1
 800427c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	b29a      	uxth	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	b29a      	uxth	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f043 0302 	orr.w	r3, r3, #2
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_PWREx_GetVoltageRange+0x18>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40007000 	.word	0x40007000

08004310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431e:	d130      	bne.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004320:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d038      	beq.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2232      	movs	r2, #50	; 0x32
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0c9b      	lsrs	r3, r3, #18
 8004350:	3301      	adds	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004354:	e002      	b.n	800435c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b01      	subs	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004368:	d102      	bne.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f2      	bne.n	8004356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d110      	bne.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00f      	b.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800438a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438e:	d007      	beq.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004398:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800439a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40007000 	.word	0x40007000
 80043b4:	20000000 	.word	0x20000000
 80043b8:	431bde83 	.word	0x431bde83

080043bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ca:	6053      	str	r3, [r2, #4]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40007000 	.word	0x40007000

080043dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f000 bc11 	b.w	8004c12 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f0:	4ba0      	ldr	r3, [pc, #640]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043fa:	4b9e      	ldr	r3, [pc, #632]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80e4 	beq.w	80045da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <HAL_RCC_OscConfig+0x4c>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	f040 808b 	bne.w	8004536 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b01      	cmp	r3, #1
 8004424:	f040 8087 	bne.w	8004536 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_OscConfig+0x64>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e3e8      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	4b8b      	ldr	r3, [pc, #556]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d004      	beq.n	800445a <HAL_RCC_OscConfig+0x7e>
 8004450:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004458:	e005      	b.n	8004466 <HAL_RCC_OscConfig+0x8a>
 800445a:	4b86      	ldr	r3, [pc, #536]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004466:	4293      	cmp	r3, r2
 8004468:	d223      	bcs.n	80044b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fd94 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e3c9      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800447e:	4b7d      	ldr	r3, [pc, #500]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7c      	ldr	r2, [pc, #496]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004484:	f043 0308 	orr.w	r3, r3, #8
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	4b7a      	ldr	r3, [pc, #488]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4977      	ldr	r1, [pc, #476]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800449c:	4b75      	ldr	r3, [pc, #468]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	4972      	ldr	r1, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
 80044b0:	e025      	b.n	80044fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b2:	4b70      	ldr	r3, [pc, #448]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a6f      	ldr	r2, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044b8:	f043 0308 	orr.w	r3, r3, #8
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b6d      	ldr	r3, [pc, #436]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	496a      	ldr	r1, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	4965      	ldr	r1, [pc, #404]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fd54 	bl	8004f9c <RCC_SetFlashLatencyFromMSIRange>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e389      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044fe:	f000 fc6f 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8004502:	4601      	mov	r1, r0
 8004504:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	4a5a      	ldr	r2, [pc, #360]	; (8004678 <HAL_RCC_OscConfig+0x29c>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	fa21 f303 	lsr.w	r3, r1, r3
 800451a:	4a58      	ldr	r2, [pc, #352]	; (800467c <HAL_RCC_OscConfig+0x2a0>)
 800451c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800451e:	4b58      	ldr	r3, [pc, #352]	; (8004680 <HAL_RCC_OscConfig+0x2a4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc fdec 	bl	8001100 <HAL_InitTick>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d052      	beq.n	80045d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	e36d      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d032      	beq.n	80045a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800453e:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800454a:	f7fd ffbb 	bl	80024c4 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004552:	f7fd ffb7 	bl	80024c4 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e356      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004564:	4b43      	ldr	r3, [pc, #268]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004570:	4b40      	ldr	r3, [pc, #256]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a3f      	ldr	r2, [pc, #252]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004576:	f043 0308 	orr.w	r3, r3, #8
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	493a      	ldr	r1, [pc, #232]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	4935      	ldr	r1, [pc, #212]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	604b      	str	r3, [r1, #4]
 80045a2:	e01a      	b.n	80045da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045a4:	4b33      	ldr	r3, [pc, #204]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a32      	ldr	r2, [pc, #200]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045b0:	f7fd ff88 	bl	80024c4 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045b8:	f7fd ff84 	bl	80024c4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e323      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045ca:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x1dc>
 80045d6:	e000      	b.n	80045da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d073      	beq.n	80046ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_OscConfig+0x21c>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	d10e      	bne.n	8004610 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d10b      	bne.n	8004610 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d063      	beq.n	80046cc <HAL_RCC_OscConfig+0x2f0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d15f      	bne.n	80046cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e300      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004618:	d106      	bne.n	8004628 <HAL_RCC_OscConfig+0x24c>
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e01d      	b.n	8004664 <HAL_RCC_OscConfig+0x288>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x270>
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0x288>
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 8004652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a05      	ldr	r2, [pc, #20]	; (8004674 <HAL_RCC_OscConfig+0x298>)
 800465e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd ff2a 	bl	80024c4 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004672:	e010      	b.n	8004696 <HAL_RCC_OscConfig+0x2ba>
 8004674:	40021000 	.word	0x40021000
 8004678:	0800e378 	.word	0x0800e378
 800467c:	20000000 	.word	0x20000000
 8004680:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004684:	f7fd ff1e 	bl	80024c4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e2bd      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004696:	4baf      	ldr	r3, [pc, #700]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x2a8>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd ff0e 	bl	80024c4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd ff0a 	bl	80024c4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e2a9      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046be:	4ba5      	ldr	r3, [pc, #660]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x2d0>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d060      	beq.n	800479c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d005      	beq.n	80046ec <HAL_RCC_OscConfig+0x310>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d119      	bne.n	800471a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d116      	bne.n	800471a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ec:	4b99      	ldr	r3, [pc, #612]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_OscConfig+0x328>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e286      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004704:	4b93      	ldr	r3, [pc, #588]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	4990      	ldr	r1, [pc, #576]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004718:	e040      	b.n	800479c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d023      	beq.n	800476a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004722:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a8b      	ldr	r2, [pc, #556]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fd fec9 	bl	80024c4 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004736:	f7fd fec5 	bl	80024c4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e264      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004748:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004754:	4b7f      	ldr	r3, [pc, #508]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	497c      	ldr	r1, [pc, #496]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	e018      	b.n	800479c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476a:	4b7a      	ldr	r3, [pc, #488]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a79      	ldr	r2, [pc, #484]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fd fea5 	bl	80024c4 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477e:	f7fd fea1 	bl	80024c4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e240      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004790:	4b70      	ldr	r3, [pc, #448]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03c      	beq.n	8004822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b0:	4b68      	ldr	r3, [pc, #416]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b6:	4a67      	ldr	r2, [pc, #412]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd fe80 	bl	80024c4 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fd fe7c 	bl	80024c4 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e21b      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047da:	4b5e      	ldr	r3, [pc, #376]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ef      	beq.n	80047c8 <HAL_RCC_OscConfig+0x3ec>
 80047e8:	e01b      	b.n	8004822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ea:	4b5a      	ldr	r3, [pc, #360]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80047ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fd fe63 	bl	80024c4 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004802:	f7fd fe5f 	bl	80024c4 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e1fe      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ef      	bne.n	8004802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a6 	beq.w	800497c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004830:	2300      	movs	r3, #0
 8004832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004834:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10d      	bne.n	800485c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004840:	4b44      	ldr	r3, [pc, #272]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	4a43      	ldr	r2, [pc, #268]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484a:	6593      	str	r3, [r2, #88]	; 0x58
 800484c:	4b41      	ldr	r3, [pc, #260]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004858:	2301      	movs	r3, #1
 800485a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800485c:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <HAL_RCC_OscConfig+0x57c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d118      	bne.n	800489a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCC_OscConfig+0x57c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3a      	ldr	r2, [pc, #232]	; (8004958 <HAL_RCC_OscConfig+0x57c>)
 800486e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004874:	f7fd fe26 	bl	80024c4 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fd fe22 	bl	80024c4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1c1      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488e:	4b32      	ldr	r3, [pc, #200]	; (8004958 <HAL_RCC_OscConfig+0x57c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d108      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4d8>
 80048a2:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b2:	e024      	b.n	80048fe <HAL_RCC_OscConfig+0x522>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d110      	bne.n	80048de <HAL_RCC_OscConfig+0x502>
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	4a24      	ldr	r2, [pc, #144]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048cc:	4b21      	ldr	r3, [pc, #132]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	4a20      	ldr	r2, [pc, #128]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048dc:	e00f      	b.n	80048fe <HAL_RCC_OscConfig+0x522>
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ee:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 80048f6:	f023 0304 	bic.w	r3, r3, #4
 80048fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d016      	beq.n	8004934 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fd fddd 	bl	80024c4 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490c:	e00a      	b.n	8004924 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fd fdd9 	bl	80024c4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	; 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e176      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_OscConfig+0x578>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ed      	beq.n	800490e <HAL_RCC_OscConfig+0x532>
 8004932:	e01a      	b.n	800496a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fd fdc6 	bl	80024c4 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800493a:	e00f      	b.n	800495c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493c:	f7fd fdc2 	bl	80024c4 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	; 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d906      	bls.n	800495c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e15f      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800495c:	4baa      	ldr	r3, [pc, #680]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e8      	bne.n	800493c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004970:	4ba5      	ldr	r3, [pc, #660]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	4aa4      	ldr	r2, [pc, #656]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d03c      	beq.n	8004a02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01c      	beq.n	80049ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004990:	4b9d      	ldr	r3, [pc, #628]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004996:	4a9c      	ldr	r2, [pc, #624]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fd fd90 	bl	80024c4 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a8:	f7fd fd8c 	bl	80024c4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e12b      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049ba:	4b93      	ldr	r3, [pc, #588]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 80049bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ef      	beq.n	80049a8 <HAL_RCC_OscConfig+0x5cc>
 80049c8:	e01b      	b.n	8004a02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049ca:	4b8f      	ldr	r3, [pc, #572]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 80049cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d0:	4a8d      	ldr	r2, [pc, #564]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7fd fd73 	bl	80024c4 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e2:	f7fd fd6f 	bl	80024c4 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e10e      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049f4:	4b84      	ldr	r3, [pc, #528]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 80049f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1ef      	bne.n	80049e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8102 	beq.w	8004c10 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f040 80c5 	bne.w	8004ba0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a16:	4b7c      	ldr	r3, [pc, #496]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f003 0203 	and.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d12c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	3b01      	subs	r3, #1
 8004a36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d123      	bne.n	8004a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d11b      	bne.n	8004a84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d113      	bne.n	8004a84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d067      	beq.n	8004b54 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d062      	beq.n	8004b50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a8a:	4b5f      	ldr	r3, [pc, #380]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0bb      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5a      	ldr	r2, [pc, #360]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004aa6:	f7fd fd0d 	bl	80024c4 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fd fd09 	bl	80024c4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0a8      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac0:	4b51      	ldr	r3, [pc, #324]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004acc:	4b4e      	ldr	r3, [pc, #312]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	4b4e      	ldr	r3, [pc, #312]	; (8004c0c <HAL_RCC_OscConfig+0x830>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004adc:	3a01      	subs	r2, #1
 8004ade:	0112      	lsls	r2, r2, #4
 8004ae0:	4311      	orrs	r1, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ae6:	0212      	lsls	r2, r2, #8
 8004ae8:	4311      	orrs	r1, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004aee:	0852      	lsrs	r2, r2, #1
 8004af0:	3a01      	subs	r2, #1
 8004af2:	0552      	lsls	r2, r2, #21
 8004af4:	4311      	orrs	r1, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004afa:	0852      	lsrs	r2, r2, #1
 8004afc:	3a01      	subs	r2, #1
 8004afe:	0652      	lsls	r2, r2, #25
 8004b00:	4311      	orrs	r1, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b06:	06d2      	lsls	r2, r2, #27
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	493f      	ldr	r1, [pc, #252]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b10:	4b3d      	ldr	r3, [pc, #244]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3c      	ldr	r2, [pc, #240]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b1c:	4b3a      	ldr	r3, [pc, #232]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4a39      	ldr	r2, [pc, #228]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b28:	f7fd fccc 	bl	80024c4 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fd fcc8 	bl	80024c4 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e067      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b4e:	e05f      	b.n	8004c10 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e05e      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b54:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d157      	bne.n	8004c10 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b60:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a28      	ldr	r2, [pc, #160]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b6c:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b78:	f7fd fca4 	bl	80024c4 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fd fca0 	bl	80024c4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e03f      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x7a4>
 8004b9e:	e037      	b.n	8004c10 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d02d      	beq.n	8004c02 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d105      	bne.n	8004bca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004bc4:	f023 0303 	bic.w	r3, r3, #3
 8004bc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4a0e      	ldr	r2, [pc, #56]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004bd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bda:	f7fd fc73 	bl	80024c4 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be2:	f7fd fc6f 	bl	80024c4 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e00e      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf4:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <HAL_RCC_OscConfig+0x82c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <HAL_RCC_OscConfig+0x806>
 8004c00:	e006      	b.n	8004c10 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e005      	b.n	8004c12 <HAL_RCC_OscConfig+0x836>
 8004c06:	bf00      	nop
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop

08004c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0c8      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b66      	ldr	r3, [pc, #408]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d910      	bls.n	8004c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4961      	ldr	r1, [pc, #388]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b5f      	ldr	r3, [pc, #380]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0b0      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d04c      	beq.n	8004d06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c74:	4b56      	ldr	r3, [pc, #344]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d121      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e09e      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8c:	4b50      	ldr	r3, [pc, #320]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d115      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e092      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca4:	4b4a      	ldr	r3, [pc, #296]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e086      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb4:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e07e      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc4:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 0203 	bic.w	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	493f      	ldr	r1, [pc, #252]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fd fbf5 	bl	80024c4 <HAL_GetTick>
 8004cda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cde:	f7fd fbf1 	bl	80024c4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e066      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 020c 	and.w	r2, r3, #12
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d1eb      	bne.n	8004cde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d12:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	492c      	ldr	r1, [pc, #176]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d210      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 0207 	bic.w	r2, r3, #7
 8004d3a:	4924      	ldr	r1, [pc, #144]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e036      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4918      	ldr	r1, [pc, #96]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4910      	ldr	r1, [pc, #64]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d92:	f000 f825 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8004d96:	4601      	mov	r1, r0
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	5cd3      	ldrb	r3, [r2, r3]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	fa21 f303 	lsr.w	r3, r1, r3
 8004dae:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc f9a2 	bl	8001100 <HAL_InitTick>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800e378 	.word	0x0800e378
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	20000004 	.word	0x20000004

08004de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dee:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df8:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x34>
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d121      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d11e      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e14:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e20:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e005      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e30:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e58:	4b24      	ldr	r3, [pc, #144]	; (8004eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	e004      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e64:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b0c      	cmp	r3, #12
 8004e6c:	d133      	bne.n	8004ed6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0xa4>
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0xaa>
 8004e82:	e005      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e86:	617b      	str	r3, [r7, #20]
      break;
 8004e88:	e005      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e8c:	617b      	str	r3, [r7, #20]
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	617b      	str	r3, [r7, #20]
      break;
 8004e94:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	fb02 f203 	mul.w	r2, r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	0e5b      	lsrs	r3, r3, #25
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3724      	adds	r7, #36	; 0x24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	0800e390 	.word	0x0800e390
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	007a1200 	.word	0x007a1200

08004ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000000 	.word	0x20000000

08004f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f10:	f7ff fff0 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f14:	4601      	mov	r1, r0
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0adb      	lsrs	r3, r3, #11
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	0800e388 	.word	0x0800e388

08004f38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	220f      	movs	r2, #15
 8004f46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0203 	and.w	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f6c:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_RCC_GetClockConfig+0x5c>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	08db      	lsrs	r3, r3, #3
 8004f72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <HAL_RCC_GetClockConfig+0x60>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0207 	and.w	r2, r3, #7
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	601a      	str	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40022000 	.word	0x40022000

08004f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fb4:	f7ff f99e 	bl	80042f4 <HAL_PWREx_GetVoltageRange>
 8004fb8:	6178      	str	r0, [r7, #20]
 8004fba:	e014      	b.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	4a24      	ldr	r2, [pc, #144]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc8:	4b22      	ldr	r3, [pc, #136]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fd4:	f7ff f98e 	bl	80042f4 <HAL_PWREx_GetVoltageRange>
 8004fd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fec:	d10b      	bne.n	8005006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d919      	bls.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ff8:	d902      	bls.n	8005000 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e013      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005000:	2301      	movs	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e010      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d902      	bls.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800500c:	2303      	movs	r3, #3
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	e00a      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d102      	bne.n	800501e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005018:	2302      	movs	r3, #2
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e004      	b.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b70      	cmp	r3, #112	; 0x70
 8005022:	d101      	bne.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005024:	2301      	movs	r3, #1
 8005026:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 0207 	bic.w	r2, r3, #7
 8005030:	4909      	ldr	r1, [pc, #36]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	40022000 	.word	0x40022000

0800505c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005064:	2300      	movs	r3, #0
 8005066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005068:	2300      	movs	r3, #0
 800506a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005074:	2b00      	cmp	r3, #0
 8005076:	d02f      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005080:	d005      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005082:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005086:	d015      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800508c:	e00f      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800508e:	4b5d      	ldr	r3, [pc, #372]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4a5c      	ldr	r2, [pc, #368]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800509a:	e00c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fa1e 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	74fb      	strb	r3, [r7, #19]
      break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80050b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050bc:	4b51      	ldr	r3, [pc, #324]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	494e      	ldr	r1, [pc, #312]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 809e 	beq.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ea:	4b46      	ldr	r3, [pc, #280]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005100:	4b40      	ldr	r3, [pc, #256]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	4a3f      	ldr	r2, [pc, #252]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	6593      	str	r3, [r2, #88]	; 0x58
 800510c:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005118:	2301      	movs	r3, #1
 800511a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800511c:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a39      	ldr	r2, [pc, #228]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005126:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005128:	f7fd f9cc 	bl	80024c4 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800512e:	e009      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005130:	f7fd f9c8 	bl	80024c4 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	74fb      	strb	r3, [r7, #19]
        break;
 8005142:	e005      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005144:	4b30      	ldr	r3, [pc, #192]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ef      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d15a      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005156:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005160:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01e      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	429a      	cmp	r2, r3
 8005170:	d019      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800517e:	4b21      	ldr	r3, [pc, #132]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800518e:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800519e:	4a19      	ldr	r2, [pc, #100]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d016      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fd f988 	bl	80024c4 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b6:	e00b      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fd f984 	bl	80024c4 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d902      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	74fb      	strb	r3, [r7, #19]
            break;
 80051ce:	e006      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ec      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80051de:	7cfb      	ldrb	r3, [r7, #19]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	4904      	ldr	r1, [pc, #16]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051fa:	e009      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	74bb      	strb	r3, [r7, #18]
 8005200:	e006      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005210:	7c7b      	ldrb	r3, [r7, #17]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005216:	4bb2      	ldr	r3, [pc, #712]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	4ab1      	ldr	r2, [pc, #708]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800521c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800522e:	4bac      	ldr	r3, [pc, #688]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f023 0203 	bic.w	r2, r3, #3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	49a8      	ldr	r1, [pc, #672]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005250:	4ba3      	ldr	r3, [pc, #652]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f023 020c 	bic.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	49a0      	ldr	r1, [pc, #640]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005272:	4b9b      	ldr	r3, [pc, #620]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	4997      	ldr	r1, [pc, #604]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005294:	4b92      	ldr	r3, [pc, #584]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	498f      	ldr	r1, [pc, #572]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052b6:	4b8a      	ldr	r3, [pc, #552]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	4986      	ldr	r1, [pc, #536]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052d8:	4b81      	ldr	r3, [pc, #516]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	497e      	ldr	r1, [pc, #504]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052fa:	4b79      	ldr	r3, [pc, #484]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	4975      	ldr	r1, [pc, #468]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800531c:	4b70      	ldr	r3, [pc, #448]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	496d      	ldr	r1, [pc, #436]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800533e:	4b68      	ldr	r3, [pc, #416]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	4964      	ldr	r1, [pc, #400]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d028      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005360:	4b5f      	ldr	r3, [pc, #380]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800536e:	495c      	ldr	r1, [pc, #368]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800537e:	d106      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005380:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a56      	ldr	r2, [pc, #344]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538a:	60d3      	str	r3, [r2, #12]
 800538c:	e011      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005396:	d10c      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	2101      	movs	r1, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f8a0 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d028      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053be:	4b48      	ldr	r3, [pc, #288]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053cc:	4944      	ldr	r1, [pc, #272]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053dc:	d106      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053de:	4b40      	ldr	r3, [pc, #256]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a3f      	ldr	r2, [pc, #252]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e8:	60d3      	str	r3, [r2, #12]
 80053ea:	e011      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f4:	d10c      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	2101      	movs	r1, #1
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f871 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d028      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800541c:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542a:	492d      	ldr	r1, [pc, #180]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800543a:	d106      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543c:	4b28      	ldr	r3, [pc, #160]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4a27      	ldr	r2, [pc, #156]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005446:	60d3      	str	r3, [r2, #12]
 8005448:	e011      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005452:	d10c      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2101      	movs	r1, #1
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f842 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 800546a:	7cfb      	ldrb	r3, [r7, #19]
 800546c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01c      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800547a:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	4915      	ldr	r1, [pc, #84]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005498:	d10c      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3304      	adds	r3, #4
 800549e:	2102      	movs	r1, #2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 f81f 	bl	80054e4 <RCCEx_PLLSAI1_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	4904      	ldr	r1, [pc, #16]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40021000 	.word	0x40021000

080054e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054f2:	4b73      	ldr	r3, [pc, #460]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054fe:	4b70      	ldr	r3, [pc, #448]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0203 	and.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d10d      	bne.n	800552a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
       ||
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005516:	4b6a      	ldr	r3, [pc, #424]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	091b      	lsrs	r3, r3, #4
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
       ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d044      	beq.n	80055b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e041      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d00c      	beq.n	8005552 <RCCEx_PLLSAI1_Config+0x6e>
 8005538:	2b03      	cmp	r3, #3
 800553a:	d013      	beq.n	8005564 <RCCEx_PLLSAI1_Config+0x80>
 800553c:	2b01      	cmp	r3, #1
 800553e:	d120      	bne.n	8005582 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005540:	4b5f      	ldr	r3, [pc, #380]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11d      	bne.n	8005588 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005550:	e01a      	b.n	8005588 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005552:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005562:	e013      	b.n	800558c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005564:	4b56      	ldr	r3, [pc, #344]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10f      	bne.n	8005590 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005570:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005580:	e006      	b.n	8005590 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
      break;
 8005586:	e004      	b.n	8005592 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005588:	bf00      	nop
 800558a:	e002      	b.n	8005592 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800558c:	bf00      	nop
 800558e:	e000      	b.n	8005592 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005590:	bf00      	nop
    }

    if(status == HAL_OK)
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10d      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005598:	4b49      	ldr	r3, [pc, #292]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	430b      	orrs	r3, r1
 80055ae:	4944      	ldr	r1, [pc, #272]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d17c      	bne.n	80056b4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055ba:	4b41      	ldr	r3, [pc, #260]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a40      	ldr	r2, [pc, #256]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c6:	f7fc ff7d 	bl	80024c4 <HAL_GetTick>
 80055ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055cc:	e009      	b.n	80055e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ce:	f7fc ff79 	bl	80024c4 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d902      	bls.n	80055e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	73fb      	strb	r3, [r7, #15]
        break;
 80055e0:	e005      	b.n	80055ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1ef      	bne.n	80055ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d15f      	bne.n	80056b4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d110      	bne.n	800561c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055fa:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005602:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6892      	ldr	r2, [r2, #8]
 800560a:	0211      	lsls	r1, r2, #8
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68d2      	ldr	r2, [r2, #12]
 8005610:	06d2      	lsls	r2, r2, #27
 8005612:	430a      	orrs	r2, r1
 8005614:	492a      	ldr	r1, [pc, #168]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	610b      	str	r3, [r1, #16]
 800561a:	e027      	b.n	800566c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d112      	bne.n	8005648 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005622:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800562a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6892      	ldr	r2, [r2, #8]
 8005632:	0211      	lsls	r1, r2, #8
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6912      	ldr	r2, [r2, #16]
 8005638:	0852      	lsrs	r2, r2, #1
 800563a:	3a01      	subs	r2, #1
 800563c:	0552      	lsls	r2, r2, #21
 800563e:	430a      	orrs	r2, r1
 8005640:	491f      	ldr	r1, [pc, #124]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]
 8005646:	e011      	b.n	800566c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005648:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005650:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6892      	ldr	r2, [r2, #8]
 8005658:	0211      	lsls	r1, r2, #8
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6952      	ldr	r2, [r2, #20]
 800565e:	0852      	lsrs	r2, r2, #1
 8005660:	3a01      	subs	r2, #1
 8005662:	0652      	lsls	r2, r2, #25
 8005664:	430a      	orrs	r2, r1
 8005666:	4916      	ldr	r1, [pc, #88]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800566c:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005676:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fc ff24 	bl	80024c4 <HAL_GetTick>
 800567c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800567e:	e009      	b.n	8005694 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005680:	f7fc ff20 	bl	80024c4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d902      	bls.n	8005694 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	73fb      	strb	r3, [r7, #15]
          break;
 8005692:	e005      	b.n	80056a0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ef      	beq.n	8005680 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	4904      	ldr	r1, [pc, #16]	; (80056c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000

080056c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e07c      	b.n	80057d0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fb fc87 	bl	8001004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800570c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005716:	d902      	bls.n	800571e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e002      	b.n	8005724 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800571e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005722:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800572c:	d007      	beq.n	800573e <HAL_SPI_Init+0x7a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005736:	d002      	beq.n	800573e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800574e:	d903      	bls.n	8005758 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
 8005756:	e002      	b.n	800575e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	ea42 0103 	orr.w	r1, r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f003 0204 	and.w	r2, r3, #4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	ea42 0103 	orr.w	r1, r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_SPI_Transmit+0x22>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e150      	b.n	8005a9c <HAL_SPI_Transmit+0x2c4>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005802:	f7fc fe5f 	bl	80024c4 <HAL_GetTick>
 8005806:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d002      	beq.n	800581e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005818:	2302      	movs	r3, #2
 800581a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800581c:	e135      	b.n	8005a8a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_SPI_Transmit+0x52>
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800582e:	e12c      	b.n	8005a8a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2203      	movs	r2, #3
 8005834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	88fa      	ldrh	r2, [r7, #6]
 8005848:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587a:	d107      	bne.n	800588c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d007      	beq.n	80058aa <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b2:	d94b      	bls.n	800594c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Transmit+0xea>
 80058bc:	8afb      	ldrh	r3, [r7, #22]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d13e      	bne.n	8005940 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058e6:	e02b      	b.n	8005940 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d112      	bne.n	800591c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	881a      	ldrh	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800591a:	e011      	b.n	8005940 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591c:	f7fc fdd2 	bl	80024c4 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d803      	bhi.n	8005934 <HAL_SPI_Transmit+0x15c>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d102      	bne.n	800593a <HAL_SPI_Transmit+0x162>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800593e:	e0a4      	b.n	8005a8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ce      	bne.n	80058e8 <HAL_SPI_Transmit+0x110>
 800594a:	e07c      	b.n	8005a46 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_Transmit+0x182>
 8005954:	8afb      	ldrh	r3, [r7, #22]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d170      	bne.n	8005a3c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d912      	bls.n	800598a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	881a      	ldrh	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	1c9a      	adds	r2, r3, #2
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b02      	subs	r3, #2
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005988:	e058      	b.n	8005a3c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059b0:	e044      	b.n	8005a3c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d12b      	bne.n	8005a18 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d912      	bls.n	80059f0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b02      	subs	r3, #2
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ee:	e025      	b.n	8005a3c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	7812      	ldrb	r2, [r2, #0]
 80059fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a16:	e011      	b.n	8005a3c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a18:	f7fc fd54 	bl	80024c4 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d803      	bhi.n	8005a30 <HAL_SPI_Transmit+0x258>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d102      	bne.n	8005a36 <HAL_SPI_Transmit+0x25e>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a3a:	e026      	b.n	8005a8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1b5      	bne.n	80059b2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fdb4 	bl	80065b8 <SPI_EndRxTxTransaction>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	77fb      	strb	r3, [r7, #31]
 8005a86:	e000      	b.n	8005a8a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005a88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac0:	d112      	bne.n	8005ae8 <HAL_SPI_Receive+0x44>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2204      	movs	r2, #4
 8005ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f908 	bl	8005cf4 <HAL_SPI_TransmitReceive>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	e101      	b.n	8005cec <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_Receive+0x52>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e0fa      	b.n	8005cec <HAL_SPI_Receive+0x248>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005afe:	f7fc fce1 	bl	80024c4 <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
 8005b12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b14:	e0e1      	b.n	8005cda <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_Receive+0x7e>
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b26:	e0d8      	b.n	8005cda <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b72:	d908      	bls.n	8005b86 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b82:	605a      	str	r2, [r3, #4]
 8005b84:	e007      	b.n	8005b96 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9e:	d107      	bne.n	8005bb0 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d007      	beq.n	8005bce <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bd6:	d867      	bhi.n	8005ca8 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bd8:	e030      	b.n	8005c3c <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d117      	bne.n	8005c18 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f103 020c 	add.w	r2, r3, #12
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c16:	e011      	b.n	8005c3c <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c18:	f7fc fc54 	bl	80024c4 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d803      	bhi.n	8005c30 <HAL_SPI_Receive+0x18c>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d102      	bne.n	8005c36 <HAL_SPI_Receive+0x192>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c3a:	e04e      	b.n	8005cda <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1c8      	bne.n	8005bda <HAL_SPI_Receive+0x136>
 8005c48:	e034      	b.n	8005cb4 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d115      	bne.n	8005c84 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	b292      	uxth	r2, r2
 8005c64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	1c9a      	adds	r2, r3, #2
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c82:	e011      	b.n	8005ca8 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c84:	f7fc fc1e 	bl	80024c4 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d803      	bhi.n	8005c9c <HAL_SPI_Receive+0x1f8>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d102      	bne.n	8005ca2 <HAL_SPI_Receive+0x1fe>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ca6:	e018      	b.n	8005cda <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1ca      	bne.n	8005c4a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fc25 	bl	8006508 <SPI_EndRxTransaction>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
 8005cd6:	e000      	b.n	8005cda <HAL_SPI_Receive+0x236>
  }

error :
 8005cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d02:	2301      	movs	r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_SPI_TransmitReceive+0x26>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e1fb      	b.n	8006112 <HAL_SPI_TransmitReceive+0x41e>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d22:	f7fc fbcf 	bl	80024c4 <HAL_GetTick>
 8005d26:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d2e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d36:	887b      	ldrh	r3, [r7, #2]
 8005d38:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005d3a:	887b      	ldrh	r3, [r7, #2]
 8005d3c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d3e:	7efb      	ldrb	r3, [r7, #27]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d00e      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x6e>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d4a:	d106      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x66>
 8005d54:	7efb      	ldrb	r3, [r7, #27]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d003      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d60:	e1cd      	b.n	80060fe <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x80>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x80>
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d103      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d7a:	e1c0      	b.n	80060fe <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d003      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	887a      	ldrh	r2, [r7, #2]
 8005da0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	887a      	ldrh	r2, [r7, #2]
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	887a      	ldrh	r2, [r7, #2]
 8005dbc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd2:	d802      	bhi.n	8005dda <HAL_SPI_TransmitReceive+0xe6>
 8005dd4:	8a3b      	ldrh	r3, [r7, #16]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d908      	bls.n	8005dec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	e007      	b.n	8005dfc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d007      	beq.n	8005e1a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e22:	d97c      	bls.n	8005f1e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_TransmitReceive+0x13e>
 8005e2c:	8a7b      	ldrh	r3, [r7, #18]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d169      	bne.n	8005f06 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	881a      	ldrh	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	1c9a      	adds	r2, r3, #2
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e56:	e056      	b.n	8005f06 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d11b      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x1aa>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d016      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x1aa>
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d113      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d11c      	bne.n	8005ee6 <HAL_SPI_TransmitReceive+0x1f2>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d016      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	b292      	uxth	r2, r2
 8005ec4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	1c9a      	adds	r2, r3, #2
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ee6:	f7fc faed 	bl	80024c4 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d807      	bhi.n	8005f06 <HAL_SPI_TransmitReceive+0x212>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d003      	beq.n	8005f06 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f04:	e0fb      	b.n	80060fe <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1a3      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x164>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d19d      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x164>
 8005f1c:	e0df      	b.n	80060de <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_SPI_TransmitReceive+0x23a>
 8005f26:	8a7b      	ldrh	r3, [r7, #18]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f040 80cb 	bne.w	80060c4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d912      	bls.n	8005f5e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	1c9a      	adds	r2, r3, #2
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b02      	subs	r3, #2
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f5c:	e0b2      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330c      	adds	r3, #12
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f84:	e09e      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d134      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x30a>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d02f      	beq.n	8005ffe <HAL_SPI_TransmitReceive+0x30a>
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d12c      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d912      	bls.n	8005fd4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b02      	subs	r3, #2
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fd2:	e012      	b.n	8005ffa <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	7812      	ldrb	r2, [r2, #0]
 8005fe0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d148      	bne.n	800609e <HAL_SPI_TransmitReceive+0x3aa>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d042      	beq.n	800609e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d923      	bls.n	800606c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	b292      	uxth	r2, r2
 8006030:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	1c9a      	adds	r2, r3, #2
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b02      	subs	r3, #2
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b01      	cmp	r3, #1
 8006058:	d81f      	bhi.n	800609a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	e016      	b.n	800609a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f103 020c 	add.w	r2, r3, #12
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800609a:	2301      	movs	r3, #1
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800609e:	f7fc fa11 	bl	80024c4 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d803      	bhi.n	80060b6 <HAL_SPI_TransmitReceive+0x3c2>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x3c8>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d103      	bne.n	80060c4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80060c2:	e01c      	b.n	80060fe <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f47f af5b 	bne.w	8005f86 <HAL_SPI_TransmitReceive+0x292>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f47f af54 	bne.w	8005f86 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fa68 	bl	80065b8 <SPI_EndRxTxTransaction>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	661a      	str	r2, [r3, #96]	; 0x60
 80060fa:	e000      	b.n	80060fe <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80060fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800610e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006112:	4618      	mov	r0, r3
 8006114:	3728      	adds	r7, #40	; 0x28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10f      	bne.n	8006160 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	099b      	lsrs	r3, r3, #6
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d004      	beq.n	8006160 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
    return;
 800615e:	e0d8      	b.n	8006312 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <HAL_SPI_IRQHandler+0x66>
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	09db      	lsrs	r3, r3, #7
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
    return;
 8006180:	e0c7      	b.n	8006312 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <HAL_SPI_IRQHandler+0x8c>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	099b      	lsrs	r3, r3, #6
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_SPI_IRQHandler+0x8c>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	0a1b      	lsrs	r3, r3, #8
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80b5 	beq.w	8006312 <HAL_SPI_IRQHandler+0x1f6>
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80ae 	beq.w	8006312 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	099b      	lsrs	r3, r3, #6
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d023      	beq.n	800620a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d011      	beq.n	80061f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d2:	f043 0204 	orr.w	r2, r3, #4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	e00b      	b.n	800620a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	693b      	ldr	r3, [r7, #16]
        return;
 8006208:	e083      	b.n	8006312 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d014      	beq.n	8006240 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621a:	f043 0201 	orr.w	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00c      	beq.n	8006266 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006250:	f043 0208 	orr.w	r2, r3, #8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006258:	2300      	movs	r3, #0
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]
 8006264:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800626a:	2b00      	cmp	r3, #0
 800626c:	d050      	beq.n	8006310 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800627c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <HAL_SPI_IRQHandler+0x17e>
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d034      	beq.n	8006304 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0203 	bic.w	r2, r2, #3
 80062a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d011      	beq.n	80062d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	4a18      	ldr	r2, [pc, #96]	; (8006318 <HAL_SPI_IRQHandler+0x1fc>)
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fc fa10 	bl	80026e4 <HAL_DMA_Abort_IT>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	4a0d      	ldr	r2, [pc, #52]	; (8006318 <HAL_SPI_IRQHandler+0x1fc>)
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fc f9fa 	bl	80026e4 <HAL_DMA_Abort_IT>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006302:	e003      	b.n	800630c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f809 	bl	800631c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800630a:	e000      	b.n	800630e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800630c:	bf00      	nop
    return;
 800630e:	bf00      	nop
 8006310:	bf00      	nop
  }
}
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	08006331 	.word	0x08006331

0800631c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff ffe5 	bl	800631c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	4613      	mov	r3, r2
 8006368:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800636a:	e04c      	b.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006372:	d048      	beq.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006374:	f7fc f8a6 	bl	80024c4 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d902      	bls.n	800638a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d13d      	bne.n	8006406 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a2:	d111      	bne.n	80063c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ac:	d004      	beq.n	80063b8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b6:	d107      	bne.n	80063c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d0:	d10f      	bne.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e00f      	b.n	8006426 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4013      	ands	r3, r2
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	bf0c      	ite	eq
 8006416:	2301      	moveq	r3, #1
 8006418:	2300      	movne	r3, #0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	429a      	cmp	r2, r3
 8006422:	d1a3      	bne.n	800636c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800643c:	e057      	b.n	80064ee <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006444:	d106      	bne.n	8006454 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d048      	beq.n	80064ee <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800645c:	f7fc f832 	bl	80024c4 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d902      	bls.n	8006472 <SPI_WaitFifoStateUntilTimeout+0x44>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d13d      	bne.n	80064ee <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648a:	d111      	bne.n	80064b0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006494:	d004      	beq.n	80064a0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649e:	d107      	bne.n	80064b0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b8:	d10f      	bne.n	80064da <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e008      	b.n	8006500 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4013      	ands	r3, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d19f      	bne.n	800643e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800651c:	d111      	bne.n	8006542 <SPI_EndRxTransaction+0x3a>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006526:	d004      	beq.n	8006532 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006530:	d107      	bne.n	8006542 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006540:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2200      	movs	r2, #0
 800654a:	2180      	movs	r1, #128	; 0x80
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff ff04 	bl	800635a <SPI_WaitFlagStateUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	f043 0220 	orr.w	r2, r3, #32
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e023      	b.n	80065b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006570:	d11d      	bne.n	80065ae <SPI_EndRxTransaction+0xa6>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	d004      	beq.n	8006586 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d113      	bne.n	80065ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff ff4b 	bl	800642e <SPI_WaitFifoStateUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e000      	b.n	80065b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7ff ff2c 	bl	800642e <SPI_WaitFifoStateUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e027      	b.n	800663c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff feaf 	bl	800635a <SPI_WaitFlagStateUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e014      	b.n	800663c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2200      	movs	r2, #0
 800661a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7ff ff05 	bl	800642e <SPI_WaitFifoStateUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	f043 0220 	orr.w	r2, r3, #32
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e000      	b.n	800663c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e01d      	b.n	8006692 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f815 	bl	800669a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f000 f986 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
	...

080066b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <HAL_TIM_Base_Start_IT+0x50>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b06      	cmp	r3, #6
 80066d8:	d00b      	beq.n	80066f2 <HAL_TIM_Base_Start_IT+0x42>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e0:	d007      	beq.n	80066f2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	00010007 	.word	0x00010007

08006704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d122      	bne.n	8006760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b02      	cmp	r3, #2
 8006726:	d11b      	bne.n	8006760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0202 	mvn.w	r2, #2
 8006730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f905 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f8f7 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f908 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b04      	cmp	r3, #4
 800676c:	d122      	bne.n	80067b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b04      	cmp	r3, #4
 800677a:	d11b      	bne.n	80067b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0204 	mvn.w	r2, #4
 8006784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8db 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 80067a0:	e005      	b.n	80067ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f8cd 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f8de 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d122      	bne.n	8006808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d11b      	bne.n	8006808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0208 	mvn.w	r2, #8
 80067d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2204      	movs	r2, #4
 80067de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f8b1 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 80067f4:	e005      	b.n	8006802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f8a3 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8b4 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	2b10      	cmp	r3, #16
 8006814:	d122      	bne.n	800685c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b10      	cmp	r3, #16
 8006822:	d11b      	bne.n	800685c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0210 	mvn.w	r2, #16
 800682c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2208      	movs	r2, #8
 8006832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f887 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006848:	e005      	b.n	8006856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f879 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f88a 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10e      	bne.n	8006888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b01      	cmp	r3, #1
 8006876:	d107      	bne.n	8006888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f06f 0201 	mvn.w	r2, #1
 8006880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fa fb38 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d10e      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a0:	2b80      	cmp	r3, #128	; 0x80
 80068a2:	d107      	bne.n	80068b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f8de 	bl	8006a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c2:	d10e      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b80      	cmp	r3, #128	; 0x80
 80068d0:	d107      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f8d1 	bl	8006a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d10e      	bne.n	800690e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	d107      	bne.n	800690e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f838 	bl	800697e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b20      	cmp	r3, #32
 800691a:	d10e      	bne.n	800693a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d107      	bne.n	800693a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f06f 0220 	mvn.w	r2, #32
 8006932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f891 	bl	8006a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <TIM_Base_SetConfig+0xbc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d003      	beq.n	80069b4 <TIM_Base_SetConfig+0x20>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b2:	d108      	bne.n	80069c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <TIM_Base_SetConfig+0xbc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00b      	beq.n	80069e6 <TIM_Base_SetConfig+0x52>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d4:	d007      	beq.n	80069e6 <TIM_Base_SetConfig+0x52>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <TIM_Base_SetConfig+0xc0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d003      	beq.n	80069e6 <TIM_Base_SetConfig+0x52>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <TIM_Base_SetConfig+0xc4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d108      	bne.n	80069f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <TIM_Base_SetConfig+0xbc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <TIM_Base_SetConfig+0xa0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a0b      	ldr	r2, [pc, #44]	; (8006a54 <TIM_Base_SetConfig+0xc0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_Base_SetConfig+0xa0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a0a      	ldr	r2, [pc, #40]	; (8006a58 <TIM_Base_SetConfig+0xc4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d103      	bne.n	8006a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	615a      	str	r2, [r3, #20]
}
 8006a42:	bf00      	nop
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40014400 	.word	0x40014400

08006a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a98:	b084      	sub	sp, #16
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	f107 0014 	add.w	r0, r7, #20
 8006aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	b004      	add	sp, #16
 8006ab8:	4770      	bx	lr

08006aba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ac2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006ac6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006af4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006af8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	43db      	mvns	r3, r3
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	f107 0014 	add.w	r0, r7, #20
 8006b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff ffa3 	bl	8006aba <USB_EnableGlobalInt>

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b80:	b004      	add	sp, #16
 8006b82:	4770      	bx	lr

08006b84 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b84:	b490      	push	{r4, r7}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	78db      	ldrb	r3, [r3, #3]
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d819      	bhi.n	8006be6 <USB_ActivateEndpoint+0x62>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <USB_ActivateEndpoint+0x34>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006bdd 	.word	0x08006bdd
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006bd3 	.word	0x08006bd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006bc8:	89bb      	ldrh	r3, [r7, #12]
 8006bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bce:	81bb      	strh	r3, [r7, #12]
      break;
 8006bd0:	e00d      	b.n	8006bee <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006bd2:	89bb      	ldrh	r3, [r7, #12]
 8006bd4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006bd8:	81bb      	strh	r3, [r7, #12]
      break;
 8006bda:	e008      	b.n	8006bee <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006bdc:	89bb      	ldrh	r3, [r7, #12]
 8006bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006be2:	81bb      	strh	r3, [r7, #12]
      break;
 8006be4:	e003      	b.n	8006bee <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bea:	e000      	b.n	8006bee <USB_ActivateEndpoint+0x6a>
      break;
 8006bec:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	89bb      	ldrh	r3, [r7, #12]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	b21b      	sxth	r3, r3
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	b21a      	sxth	r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b21b      	sxth	r3, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b21b      	sxth	r3, r3
 8006c32:	b29c      	uxth	r4, r3
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	4b8a      	ldr	r3, [pc, #552]	; (8006e68 <USB_ActivateEndpoint+0x2e4>)
 8006c40:	4323      	orrs	r3, r4
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	7b1b      	ldrb	r3, [r3, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f040 8112 	bne.w	8006e74 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d067      	beq.n	8006d28 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c58:	687c      	ldr	r4, [r7, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	441c      	add	r4, r3
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	4423      	add	r3, r4
 8006c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c70:	461c      	mov	r4, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	88db      	ldrh	r3, [r3, #6]
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29c      	uxth	r4, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d014      	beq.n	8006cc2 <USB_ActivateEndpoint+0x13e>
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	b29c      	uxth	r4, r3
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	441a      	add	r2, r3
 8006cba:	4b6c      	ldr	r3, [pc, #432]	; (8006e6c <USB_ActivateEndpoint+0x2e8>)
 8006cbc:	4323      	orrs	r3, r4
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	78db      	ldrb	r3, [r3, #3]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d018      	beq.n	8006cfc <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce0:	b29c      	uxth	r4, r3
 8006ce2:	f084 0320 	eor.w	r3, r4, #32
 8006ce6:	b29c      	uxth	r4, r3
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	4b5d      	ldr	r3, [pc, #372]	; (8006e68 <USB_ActivateEndpoint+0x2e4>)
 8006cf4:	4323      	orrs	r3, r4
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	8013      	strh	r3, [r2, #0]
 8006cfa:	e22b      	b.n	8007154 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d12:	b29c      	uxth	r4, r3
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	4b52      	ldr	r3, [pc, #328]	; (8006e68 <USB_ActivateEndpoint+0x2e4>)
 8006d20:	4323      	orrs	r3, r4
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	8013      	strh	r3, [r2, #0]
 8006d26:	e215      	b.n	8007154 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d28:	687c      	ldr	r4, [r7, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	441c      	add	r4, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4423      	add	r3, r4
 8006d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d40:	461c      	mov	r4, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	88db      	ldrh	r3, [r3, #6]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006d50:	687c      	ldr	r4, [r7, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	441c      	add	r4, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	4423      	add	r3, r4
 8006d64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d68:	461c      	mov	r4, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10e      	bne.n	8006d90 <USB_ActivateEndpoint+0x20c>
 8006d72:	8823      	ldrh	r3, [r4, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8023      	strh	r3, [r4, #0]
 8006d7e:	8823      	ldrh	r3, [r4, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8023      	strh	r3, [r4, #0]
 8006d8e:	e02d      	b.n	8006dec <USB_ActivateEndpoint+0x268>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b3e      	cmp	r3, #62	; 0x3e
 8006d96:	d812      	bhi.n	8006dbe <USB_ActivateEndpoint+0x23a>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	60bb      	str	r3, [r7, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <USB_ActivateEndpoint+0x22e>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	029b      	lsls	r3, r3, #10
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8023      	strh	r3, [r4, #0]
 8006dbc:	e016      	b.n	8006dec <USB_ActivateEndpoint+0x268>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	095b      	lsrs	r3, r3, #5
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d102      	bne.n	8006dd8 <USB_ActivateEndpoint+0x254>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	029b      	lsls	r3, r3, #10
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29c      	uxth	r4, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d014      	beq.n	8006e2e <USB_ActivateEndpoint+0x2aa>
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	b29c      	uxth	r4, r3
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <USB_ActivateEndpoint+0x2ec>)
 8006e28:	4323      	orrs	r3, r4
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e44:	b29c      	uxth	r4, r3
 8006e46:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006e4a:	b29c      	uxth	r4, r3
 8006e4c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006e50:	b29c      	uxth	r4, r3
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	441a      	add	r2, r3
 8006e5c:	4b02      	ldr	r3, [pc, #8]	; (8006e68 <USB_ActivateEndpoint+0x2e4>)
 8006e5e:	4323      	orrs	r3, r4
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	8013      	strh	r3, [r2, #0]
 8006e64:	e176      	b.n	8007154 <USB_ActivateEndpoint+0x5d0>
 8006e66:	bf00      	nop
 8006e68:	ffff8080 	.word	0xffff8080
 8006e6c:	ffff80c0 	.word	0xffff80c0
 8006e70:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	b29c      	uxth	r4, r3
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	441a      	add	r2, r3
 8006e96:	4b96      	ldr	r3, [pc, #600]	; (80070f0 <USB_ActivateEndpoint+0x56c>)
 8006e98:	4323      	orrs	r3, r4
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e9e:	687c      	ldr	r4, [r7, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	441c      	add	r4, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4423      	add	r3, r4
 8006eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eb6:	461c      	mov	r4, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	891b      	ldrh	r3, [r3, #8]
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8023      	strh	r3, [r4, #0]
 8006ec6:	687c      	ldr	r4, [r7, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	441c      	add	r4, r3
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4423      	add	r3, r4
 8006eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ede:	461c      	mov	r4, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	895b      	ldrh	r3, [r3, #10]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 8088 	bne.w	8007008 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29c      	uxth	r4, r3
 8006f06:	4623      	mov	r3, r4
 8006f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d014      	beq.n	8006f3a <USB_ActivateEndpoint+0x3b6>
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	b29c      	uxth	r4, r3
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	441a      	add	r2, r3
 8006f32:	4b70      	ldr	r3, [pc, #448]	; (80070f4 <USB_ActivateEndpoint+0x570>)
 8006f34:	4323      	orrs	r3, r4
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29c      	uxth	r4, r3
 8006f48:	4623      	mov	r3, r4
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d014      	beq.n	8006f7c <USB_ActivateEndpoint+0x3f8>
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	b29c      	uxth	r4, r3
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	4b60      	ldr	r3, [pc, #384]	; (80070f8 <USB_ActivateEndpoint+0x574>)
 8006f76:	4323      	orrs	r3, r4
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f92:	b29c      	uxth	r4, r3
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	4b56      	ldr	r3, [pc, #344]	; (80070f8 <USB_ActivateEndpoint+0x574>)
 8006fa0:	4323      	orrs	r3, r4
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbc:	b29c      	uxth	r4, r3
 8006fbe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006fc2:	b29c      	uxth	r4, r3
 8006fc4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006fc8:	b29c      	uxth	r4, r3
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	441a      	add	r2, r3
 8006fd4:	4b49      	ldr	r3, [pc, #292]	; (80070fc <USB_ActivateEndpoint+0x578>)
 8006fd6:	4323      	orrs	r3, r4
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff2:	b29c      	uxth	r4, r3
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <USB_ActivateEndpoint+0x578>)
 8007000:	4323      	orrs	r3, r4
 8007002:	b29b      	uxth	r3, r3
 8007004:	8013      	strh	r3, [r2, #0]
 8007006:	e0a5      	b.n	8007154 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29c      	uxth	r4, r3
 8007016:	4623      	mov	r3, r4
 8007018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d014      	beq.n	800704a <USB_ActivateEndpoint+0x4c6>
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	b29c      	uxth	r4, r3
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	4b2c      	ldr	r3, [pc, #176]	; (80070f4 <USB_ActivateEndpoint+0x570>)
 8007044:	4323      	orrs	r3, r4
 8007046:	b29b      	uxth	r3, r3
 8007048:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29c      	uxth	r4, r3
 8007058:	4623      	mov	r3, r4
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d014      	beq.n	800708c <USB_ActivateEndpoint+0x508>
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007078:	b29c      	uxth	r4, r3
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	441a      	add	r2, r3
 8007084:	4b1c      	ldr	r3, [pc, #112]	; (80070f8 <USB_ActivateEndpoint+0x574>)
 8007086:	4323      	orrs	r3, r4
 8007088:	b29b      	uxth	r3, r3
 800708a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	b29c      	uxth	r4, r3
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	441a      	add	r2, r3
 80070ae:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <USB_ActivateEndpoint+0x570>)
 80070b0:	4323      	orrs	r3, r4
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d020      	beq.n	8007100 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d4:	b29c      	uxth	r4, r3
 80070d6:	f084 0320 	eor.w	r3, r4, #32
 80070da:	b29c      	uxth	r4, r3
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <USB_ActivateEndpoint+0x578>)
 80070e8:	4323      	orrs	r3, r4
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	8013      	strh	r3, [r2, #0]
 80070ee:	e01c      	b.n	800712a <USB_ActivateEndpoint+0x5a6>
 80070f0:	ffff8180 	.word	0xffff8180
 80070f4:	ffffc080 	.word	0xffffc080
 80070f8:	ffff80c0 	.word	0xffff80c0
 80070fc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007116:	b29c      	uxth	r4, r3
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	441a      	add	r2, r3
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <USB_ActivateEndpoint+0x5dc>)
 8007124:	4323      	orrs	r3, r4
 8007126:	b29b      	uxth	r3, r3
 8007128:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	b29c      	uxth	r4, r3
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	441a      	add	r2, r3
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <USB_ActivateEndpoint+0x5dc>)
 800714e:	4323      	orrs	r3, r4
 8007150:	b29b      	uxth	r3, r3
 8007152:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bc90      	pop	{r4, r7}
 800715e:	4770      	bx	lr
 8007160:	ffff8080 	.word	0xffff8080

08007164 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007164:	b490      	push	{r4, r7}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	7b1b      	ldrb	r3, [r3, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d171      	bne.n	800725a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d036      	beq.n	80071ec <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29c      	uxth	r4, r3
 800718c:	4623      	mov	r3, r4
 800718e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007192:	2b00      	cmp	r3, #0
 8007194:	d014      	beq.n	80071c0 <USB_DeactivateEndpoint+0x5c>
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ac:	b29c      	uxth	r4, r3
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	441a      	add	r2, r3
 80071b8:	4b6b      	ldr	r3, [pc, #428]	; (8007368 <USB_DeactivateEndpoint+0x204>)
 80071ba:	4323      	orrs	r3, r4
 80071bc:	b29b      	uxth	r3, r3
 80071be:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d6:	b29c      	uxth	r4, r3
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	441a      	add	r2, r3
 80071e2:	4b62      	ldr	r3, [pc, #392]	; (800736c <USB_DeactivateEndpoint+0x208>)
 80071e4:	4323      	orrs	r3, r4
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]
 80071ea:	e144      	b.n	8007476 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29c      	uxth	r4, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d014      	beq.n	800722e <USB_DeactivateEndpoint+0xca>
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	b29c      	uxth	r4, r3
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	4b52      	ldr	r3, [pc, #328]	; (8007370 <USB_DeactivateEndpoint+0x20c>)
 8007228:	4323      	orrs	r3, r4
 800722a:	b29b      	uxth	r3, r3
 800722c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	b29c      	uxth	r4, r3
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	4b46      	ldr	r3, [pc, #280]	; (800736c <USB_DeactivateEndpoint+0x208>)
 8007252:	4323      	orrs	r3, r4
 8007254:	b29b      	uxth	r3, r3
 8007256:	8013      	strh	r3, [r2, #0]
 8007258:	e10d      	b.n	8007476 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 8088 	bne.w	8007374 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29c      	uxth	r4, r3
 8007272:	4623      	mov	r3, r4
 8007274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d014      	beq.n	80072a6 <USB_DeactivateEndpoint+0x142>
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	b29c      	uxth	r4, r3
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	4b34      	ldr	r3, [pc, #208]	; (8007370 <USB_DeactivateEndpoint+0x20c>)
 80072a0:	4323      	orrs	r3, r4
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29c      	uxth	r4, r3
 80072b4:	4623      	mov	r3, r4
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <USB_DeactivateEndpoint+0x184>
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d4:	b29c      	uxth	r4, r3
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	441a      	add	r2, r3
 80072e0:	4b21      	ldr	r3, [pc, #132]	; (8007368 <USB_DeactivateEndpoint+0x204>)
 80072e2:	4323      	orrs	r3, r4
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	b29c      	uxth	r4, r3
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <USB_DeactivateEndpoint+0x204>)
 800730c:	4323      	orrs	r3, r4
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	b29c      	uxth	r4, r3
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	4b0d      	ldr	r3, [pc, #52]	; (800736c <USB_DeactivateEndpoint+0x208>)
 8007336:	4323      	orrs	r3, r4
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007352:	b29c      	uxth	r4, r3
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	441a      	add	r2, r3
 800735e:	4b03      	ldr	r3, [pc, #12]	; (800736c <USB_DeactivateEndpoint+0x208>)
 8007360:	4323      	orrs	r3, r4
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
 8007366:	e086      	b.n	8007476 <USB_DeactivateEndpoint+0x312>
 8007368:	ffff80c0 	.word	0xffff80c0
 800736c:	ffff8080 	.word	0xffff8080
 8007370:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	b29c      	uxth	r4, r3
 8007382:	4623      	mov	r3, r4
 8007384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d014      	beq.n	80073b6 <USB_DeactivateEndpoint+0x252>
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	b29c      	uxth	r4, r3
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	4b35      	ldr	r3, [pc, #212]	; (8007484 <USB_DeactivateEndpoint+0x320>)
 80073b0:	4323      	orrs	r3, r4
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29c      	uxth	r4, r3
 80073c4:	4623      	mov	r3, r4
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d014      	beq.n	80073f8 <USB_DeactivateEndpoint+0x294>
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e4:	b29c      	uxth	r4, r3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	4b25      	ldr	r3, [pc, #148]	; (8007488 <USB_DeactivateEndpoint+0x324>)
 80073f2:	4323      	orrs	r3, r4
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	b29c      	uxth	r4, r3
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <USB_DeactivateEndpoint+0x320>)
 800741c:	4323      	orrs	r3, r4
 800741e:	b29b      	uxth	r3, r3
 8007420:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007438:	b29c      	uxth	r4, r3
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	441a      	add	r2, r3
 8007444:	4b11      	ldr	r3, [pc, #68]	; (800748c <USB_DeactivateEndpoint+0x328>)
 8007446:	4323      	orrs	r3, r4
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	b29c      	uxth	r4, r3
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <USB_DeactivateEndpoint+0x328>)
 8007470:	4323      	orrs	r3, r4
 8007472:	b29b      	uxth	r3, r3
 8007474:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bc90      	pop	{r4, r7}
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	ffffc080 	.word	0xffffc080
 8007488:	ffff80c0 	.word	0xffff80c0
 800748c:	ffff8080 	.word	0xffff8080

08007490 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007490:	b590      	push	{r4, r7, lr}
 8007492:	b08d      	sub	sp, #52	; 0x34
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	785b      	ldrb	r3, [r3, #1]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	f040 8160 	bne.w	8007764 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	699a      	ldr	r2, [r3, #24]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d909      	bls.n	80074c4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	619a      	str	r2, [r3, #24]
 80074c2:	e005      	b.n	80074d0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2200      	movs	r2, #0
 80074ce:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	7b1b      	ldrb	r3, [r3, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d119      	bne.n	800750c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6959      	ldr	r1, [r3, #20]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	88da      	ldrh	r2, [r3, #6]
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fbbd 	bl	8007c64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074ea:	687c      	ldr	r4, [r7, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	441c      	add	r4, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	4423      	add	r3, r4
 80074fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007502:	461c      	mov	r4, r3
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	b29b      	uxth	r3, r3
 8007508:	8023      	strh	r3, [r4, #0]
 800750a:	e10f      	b.n	800772c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d065      	beq.n	80075ee <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007522:	687c      	ldr	r4, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d148      	bne.n	80075be <USB_EPStartXfer+0x12e>
 800752c:	687c      	ldr	r4, [r7, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007534:	b29b      	uxth	r3, r3
 8007536:	441c      	add	r4, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4423      	add	r3, r4
 8007540:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007544:	461c      	mov	r4, r3
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10e      	bne.n	800756a <USB_EPStartXfer+0xda>
 800754c:	8823      	ldrh	r3, [r4, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007554:	b29b      	uxth	r3, r3
 8007556:	8023      	strh	r3, [r4, #0]
 8007558:	8823      	ldrh	r3, [r4, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007564:	b29b      	uxth	r3, r3
 8007566:	8023      	strh	r3, [r4, #0]
 8007568:	e03d      	b.n	80075e6 <USB_EPStartXfer+0x156>
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	2b3e      	cmp	r3, #62	; 0x3e
 800756e:	d810      	bhi.n	8007592 <USB_EPStartXfer+0x102>
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <USB_EPStartXfer+0xf6>
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	3301      	adds	r3, #1
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	b29b      	uxth	r3, r3
 800758a:	029b      	lsls	r3, r3, #10
 800758c:	b29b      	uxth	r3, r3
 800758e:	8023      	strh	r3, [r4, #0]
 8007590:	e029      	b.n	80075e6 <USB_EPStartXfer+0x156>
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	f003 031f 	and.w	r3, r3, #31
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <USB_EPStartXfer+0x118>
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	3b01      	subs	r3, #1
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	029b      	lsls	r3, r3, #10
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	8023      	strh	r3, [r4, #0]
 80075bc:	e013      	b.n	80075e6 <USB_EPStartXfer+0x156>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d10f      	bne.n	80075e6 <USB_EPStartXfer+0x156>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	441c      	add	r4, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4423      	add	r3, r4
 80075d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	895b      	ldrh	r3, [r3, #10]
 80075ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075ec:	e063      	b.n	80076b6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d148      	bne.n	8007688 <USB_EPStartXfer+0x1f8>
 80075f6:	687c      	ldr	r4, [r7, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fe:	b29b      	uxth	r3, r3
 8007600:	441c      	add	r4, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4423      	add	r3, r4
 800760a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800760e:	461c      	mov	r4, r3
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10e      	bne.n	8007634 <USB_EPStartXfer+0x1a4>
 8007616:	8823      	ldrh	r3, [r4, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800761e:	b29b      	uxth	r3, r3
 8007620:	8023      	strh	r3, [r4, #0]
 8007622:	8823      	ldrh	r3, [r4, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762e:	b29b      	uxth	r3, r3
 8007630:	8023      	strh	r3, [r4, #0]
 8007632:	e03d      	b.n	80076b0 <USB_EPStartXfer+0x220>
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	2b3e      	cmp	r3, #62	; 0x3e
 8007638:	d810      	bhi.n	800765c <USB_EPStartXfer+0x1cc>
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	085b      	lsrs	r3, r3, #1
 800763e:	623b      	str	r3, [r7, #32]
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <USB_EPStartXfer+0x1c0>
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	3301      	adds	r3, #1
 800764e:	623b      	str	r3, [r7, #32]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	b29b      	uxth	r3, r3
 8007654:	029b      	lsls	r3, r3, #10
 8007656:	b29b      	uxth	r3, r3
 8007658:	8023      	strh	r3, [r4, #0]
 800765a:	e029      	b.n	80076b0 <USB_EPStartXfer+0x220>
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	623b      	str	r3, [r7, #32]
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <USB_EPStartXfer+0x1e2>
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	3b01      	subs	r3, #1
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	b29b      	uxth	r3, r3
 8007676:	029b      	lsls	r3, r3, #10
 8007678:	b29b      	uxth	r3, r3
 800767a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007682:	b29b      	uxth	r3, r3
 8007684:	8023      	strh	r3, [r4, #0]
 8007686:	e013      	b.n	80076b0 <USB_EPStartXfer+0x220>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10f      	bne.n	80076b0 <USB_EPStartXfer+0x220>
 8007690:	687c      	ldr	r4, [r7, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007698:	b29b      	uxth	r3, r3
 800769a:	441c      	add	r4, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	00db      	lsls	r3, r3, #3
 80076a2:	4423      	add	r3, r4
 80076a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076a8:	461c      	mov	r4, r3
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	891b      	ldrh	r3, [r3, #8]
 80076b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6959      	ldr	r1, [r3, #20]
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	b29b      	uxth	r3, r3
 80076be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 facf 	bl	8007c64 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d115      	bne.n	80076fa <USB_EPStartXfer+0x26a>
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e4:	b29c      	uxth	r4, r3
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	441a      	add	r2, r3
 80076f0:	4b9a      	ldr	r3, [pc, #616]	; (800795c <USB_EPStartXfer+0x4cc>)
 80076f2:	4323      	orrs	r3, r4
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	8013      	strh	r3, [r2, #0]
 80076f8:	e018      	b.n	800772c <USB_EPStartXfer+0x29c>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d114      	bne.n	800772c <USB_EPStartXfer+0x29c>
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007718:	b29c      	uxth	r4, r3
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	441a      	add	r2, r3
 8007724:	4b8e      	ldr	r3, [pc, #568]	; (8007960 <USB_EPStartXfer+0x4d0>)
 8007726:	4323      	orrs	r3, r4
 8007728:	b29b      	uxth	r3, r3
 800772a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007742:	b29c      	uxth	r4, r3
 8007744:	f084 0310 	eor.w	r3, r4, #16
 8007748:	b29c      	uxth	r4, r3
 800774a:	f084 0320 	eor.w	r3, r4, #32
 800774e:	b29c      	uxth	r4, r3
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	441a      	add	r2, r3
 800775a:	4b82      	ldr	r3, [pc, #520]	; (8007964 <USB_EPStartXfer+0x4d4>)
 800775c:	4323      	orrs	r3, r4
 800775e:	b29b      	uxth	r3, r3
 8007760:	8013      	strh	r3, [r2, #0]
 8007762:	e146      	b.n	80079f2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699a      	ldr	r2, [r3, #24]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	d909      	bls.n	8007784 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	1ad2      	subs	r2, r2, r3
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	619a      	str	r2, [r3, #24]
 8007782:	e005      	b.n	8007790 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2200      	movs	r2, #0
 800778e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	7b1b      	ldrb	r3, [r3, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d148      	bne.n	800782a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007798:	687c      	ldr	r4, [r7, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	441c      	add	r4, r3
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4423      	add	r3, r4
 80077ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077b0:	461c      	mov	r4, r3
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10e      	bne.n	80077d6 <USB_EPStartXfer+0x346>
 80077b8:	8823      	ldrh	r3, [r4, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	8023      	strh	r3, [r4, #0]
 80077c4:	8823      	ldrh	r3, [r4, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	8023      	strh	r3, [r4, #0]
 80077d4:	e0f2      	b.n	80079bc <USB_EPStartXfer+0x52c>
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	2b3e      	cmp	r3, #62	; 0x3e
 80077da:	d810      	bhi.n	80077fe <USB_EPStartXfer+0x36e>
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	085b      	lsrs	r3, r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <USB_EPStartXfer+0x362>
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	3301      	adds	r3, #1
 80077f0:	61fb      	str	r3, [r7, #28]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	8023      	strh	r3, [r4, #0]
 80077fc:	e0de      	b.n	80079bc <USB_EPStartXfer+0x52c>
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <USB_EPStartXfer+0x384>
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	3b01      	subs	r3, #1
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007824:	b29b      	uxth	r3, r3
 8007826:	8023      	strh	r3, [r4, #0]
 8007828:	e0c8      	b.n	80079bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d148      	bne.n	80078c4 <USB_EPStartXfer+0x434>
 8007832:	687c      	ldr	r4, [r7, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783a:	b29b      	uxth	r3, r3
 800783c:	441c      	add	r4, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4423      	add	r3, r4
 8007846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800784a:	461c      	mov	r4, r3
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10e      	bne.n	8007870 <USB_EPStartXfer+0x3e0>
 8007852:	8823      	ldrh	r3, [r4, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800785a:	b29b      	uxth	r3, r3
 800785c:	8023      	strh	r3, [r4, #0]
 800785e:	8823      	ldrh	r3, [r4, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786a:	b29b      	uxth	r3, r3
 800786c:	8023      	strh	r3, [r4, #0]
 800786e:	e03d      	b.n	80078ec <USB_EPStartXfer+0x45c>
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	2b3e      	cmp	r3, #62	; 0x3e
 8007874:	d810      	bhi.n	8007898 <USB_EPStartXfer+0x408>
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <USB_EPStartXfer+0x3fc>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	3301      	adds	r3, #1
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	b29b      	uxth	r3, r3
 8007890:	029b      	lsls	r3, r3, #10
 8007892:	b29b      	uxth	r3, r3
 8007894:	8023      	strh	r3, [r4, #0]
 8007896:	e029      	b.n	80078ec <USB_EPStartXfer+0x45c>
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d102      	bne.n	80078ae <USB_EPStartXfer+0x41e>
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	029b      	lsls	r3, r3, #10
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078be:	b29b      	uxth	r3, r3
 80078c0:	8023      	strh	r3, [r4, #0]
 80078c2:	e013      	b.n	80078ec <USB_EPStartXfer+0x45c>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	785b      	ldrb	r3, [r3, #1]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d10f      	bne.n	80078ec <USB_EPStartXfer+0x45c>
 80078cc:	687c      	ldr	r4, [r7, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	441c      	add	r4, r3
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	4423      	add	r3, r4
 80078e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078e4:	461c      	mov	r4, r3
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	8023      	strh	r3, [r4, #0]
 80078ec:	687c      	ldr	r4, [r7, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d14e      	bne.n	8007994 <USB_EPStartXfer+0x504>
 80078f6:	687c      	ldr	r4, [r7, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	441c      	add	r4, r3
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4423      	add	r3, r4
 800790a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800790e:	461c      	mov	r4, r3
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10e      	bne.n	8007934 <USB_EPStartXfer+0x4a4>
 8007916:	8823      	ldrh	r3, [r4, #0]
 8007918:	b29b      	uxth	r3, r3
 800791a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800791e:	b29b      	uxth	r3, r3
 8007920:	8023      	strh	r3, [r4, #0]
 8007922:	8823      	ldrh	r3, [r4, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800792a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792e:	b29b      	uxth	r3, r3
 8007930:	8023      	strh	r3, [r4, #0]
 8007932:	e043      	b.n	80079bc <USB_EPStartXfer+0x52c>
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	2b3e      	cmp	r3, #62	; 0x3e
 8007938:	d816      	bhi.n	8007968 <USB_EPStartXfer+0x4d8>
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	085b      	lsrs	r3, r3, #1
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <USB_EPStartXfer+0x4c0>
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	3301      	adds	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	b29b      	uxth	r3, r3
 8007954:	029b      	lsls	r3, r3, #10
 8007956:	b29b      	uxth	r3, r3
 8007958:	8023      	strh	r3, [r4, #0]
 800795a:	e02f      	b.n	80079bc <USB_EPStartXfer+0x52c>
 800795c:	ffff80c0 	.word	0xffff80c0
 8007960:	ffffc080 	.word	0xffffc080
 8007964:	ffff8080 	.word	0xffff8080
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <USB_EPStartXfer+0x4ee>
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3b01      	subs	r3, #1
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	b29b      	uxth	r3, r3
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	b29b      	uxth	r3, r3
 8007986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798e:	b29b      	uxth	r3, r3
 8007990:	8023      	strh	r3, [r4, #0]
 8007992:	e013      	b.n	80079bc <USB_EPStartXfer+0x52c>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d10f      	bne.n	80079bc <USB_EPStartXfer+0x52c>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	441c      	add	r4, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	4423      	add	r3, r4
 80079ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	b29c      	uxth	r4, r3
 80079d4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80079d8:	b29c      	uxth	r4, r3
 80079da:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80079de:	b29c      	uxth	r4, r3
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	441a      	add	r2, r3
 80079ea:	4b04      	ldr	r3, [pc, #16]	; (80079fc <USB_EPStartXfer+0x56c>)
 80079ec:	4323      	orrs	r3, r4
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3734      	adds	r7, #52	; 0x34
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd90      	pop	{r4, r7, pc}
 80079fc:	ffff8080 	.word	0xffff8080

08007a00 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a00:	b490      	push	{r4, r7}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d018      	beq.n	8007a44 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a28:	b29c      	uxth	r4, r3
 8007a2a:	f084 0310 	eor.w	r3, r4, #16
 8007a2e:	b29c      	uxth	r4, r3
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	441a      	add	r2, r3
 8007a3a:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <USB_EPSetStall+0x80>)
 8007a3c:	4323      	orrs	r3, r4
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8013      	strh	r3, [r2, #0]
 8007a42:	e017      	b.n	8007a74 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5a:	b29c      	uxth	r4, r3
 8007a5c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007a60:	b29c      	uxth	r4, r3
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	441a      	add	r2, r3
 8007a6c:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <USB_EPSetStall+0x80>)
 8007a6e:	4323      	orrs	r3, r4
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc90      	pop	{r4, r7}
 8007a7e:	4770      	bx	lr
 8007a80:	ffff8080 	.word	0xffff8080

08007a84 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a84:	b490      	push	{r4, r7}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	7b1b      	ldrb	r3, [r3, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d17d      	bne.n	8007b92 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d03d      	beq.n	8007b1a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29c      	uxth	r4, r3
 8007aac:	4623      	mov	r3, r4
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d014      	beq.n	8007ae0 <USB_EPClearStall+0x5c>
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007acc:	b29c      	uxth	r4, r3
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	441a      	add	r2, r3
 8007ad8:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <USB_EPClearStall+0x11c>)
 8007ada:	4323      	orrs	r3, r4
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	78db      	ldrb	r3, [r3, #3]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d054      	beq.n	8007b92 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afe:	b29c      	uxth	r4, r3
 8007b00:	f084 0320 	eor.w	r3, r4, #32
 8007b04:	b29c      	uxth	r4, r3
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <USB_EPClearStall+0x120>)
 8007b12:	4323      	orrs	r3, r4
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8013      	strh	r3, [r2, #0]
 8007b18:	e03b      	b.n	8007b92 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29c      	uxth	r4, r3
 8007b28:	4623      	mov	r3, r4
 8007b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d014      	beq.n	8007b5c <USB_EPClearStall+0xd8>
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b48:	b29c      	uxth	r4, r3
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	441a      	add	r2, r3
 8007b54:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <USB_EPClearStall+0x124>)
 8007b56:	4323      	orrs	r3, r4
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	b29c      	uxth	r4, r3
 8007b74:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b78:	b29c      	uxth	r4, r3
 8007b7a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b7e:	b29c      	uxth	r4, r3
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <USB_EPClearStall+0x120>)
 8007b8c:	4323      	orrs	r3, r4
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc90      	pop	{r4, r7}
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	ffff80c0 	.word	0xffff80c0
 8007ba4:	ffff8080 	.word	0xffff8080
 8007ba8:	ffffc080 	.word	0xffffc080

08007bac <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d103      	bne.n	8007bc6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2280      	movs	r2, #128	; 0x80
 8007bc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b08d      	sub	sp, #52	; 0x34
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	460b      	mov	r3, r1
 8007c74:	80fb      	strh	r3, [r7, #6]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c7a:	88bb      	ldrh	r3, [r7, #4]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c8a:	88fa      	ldrh	r2, [r7, #6]
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9a:	e01b      	b.n	8007cd4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	3301      	adds	r3, #1
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e0      	bne.n	8007c9c <USB_WritePMA+0x38>
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3734      	adds	r7, #52	; 0x34
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b08b      	sub	sp, #44	; 0x2c
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	80fb      	strh	r3, [r7, #6]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007cfc:	88bb      	ldrh	r3, [r7, #4]
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d0c:	88fa      	ldrh	r2, [r7, #6]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d16:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1c:	e018      	b.n	8007d50 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	3302      	adds	r3, #2
 8007d2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	3301      	adds	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	0a1b      	lsrs	r3, r3, #8
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	3301      	adds	r3, #1
 8007d48:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e3      	bne.n	8007d1e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007d56:	88bb      	ldrh	r3, [r7, #4]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	701a      	strb	r2, [r3, #0]
  }
}
 8007d72:	bf00      	nop
 8007d74:	372c      	adds	r7, #44	; 0x2c
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7c1b      	ldrb	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d115      	bne.n	8007dc2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	2181      	movs	r1, #129	; 0x81
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f005 fb76 	bl	800d490 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dae:	2202      	movs	r2, #2
 8007db0:	2101      	movs	r1, #1
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f005 fb6c 	bl	800d490 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007dc0:	e012      	b.n	8007de8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dc2:	2340      	movs	r3, #64	; 0x40
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	2181      	movs	r1, #129	; 0x81
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f005 fb61 	bl	800d490 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	2101      	movs	r1, #1
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f005 fb58 	bl	800d490 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007de8:	2308      	movs	r3, #8
 8007dea:	2203      	movs	r2, #3
 8007dec:	2182      	movs	r1, #130	; 0x82
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f005 fb4e 	bl	800d490 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007dfa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007dfe:	f005 fd41 	bl	800d884 <USBD_static_malloc>
 8007e02:	4602      	mov	r2, r0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e026      	b.n	8007e68 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7c1b      	ldrb	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e4e:	2101      	movs	r1, #1
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f005 fc93 	bl	800d77c <USBD_LL_PrepareReceive>
 8007e56:	e007      	b.n	8007e68 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e5e:	2340      	movs	r3, #64	; 0x40
 8007e60:	2101      	movs	r1, #1
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f005 fc8a 	bl	800d77c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e82:	2181      	movs	r1, #129	; 0x81
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f005 fb41 	bl	800d50c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e90:	2101      	movs	r1, #1
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f005 fb3a 	bl	800d50c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ea0:	2182      	movs	r1, #130	; 0x82
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f005 fb32 	bl	800d50c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f005 fce9 	bl	800d8a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d039      	beq.n	8007f7e <USBD_CDC_Setup+0x9e>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d17c      	bne.n	8008008 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88db      	ldrh	r3, [r3, #6]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d029      	beq.n	8007f6a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b25b      	sxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	da11      	bge.n	8007f44 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007f2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	88d2      	ldrh	r2, [r2, #6]
 8007f32:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f34:	6939      	ldr	r1, [r7, #16]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88db      	ldrh	r3, [r3, #6]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 fa2b 	bl	8009398 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f42:	e068      	b.n	8008016 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	785a      	ldrb	r2, [r3, #1]
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f5a:	6939      	ldr	r1, [r7, #16]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	88db      	ldrh	r3, [r3, #6]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fa46 	bl	80093f4 <USBD_CtlPrepareRx>
      break;
 8007f68:	e055      	b.n	8008016 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	7850      	ldrb	r0, [r2, #1]
 8007f76:	2200      	movs	r2, #0
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	4798      	blx	r3
      break;
 8007f7c:	e04b      	b.n	8008016 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b0a      	cmp	r3, #10
 8007f84:	d017      	beq.n	8007fb6 <USBD_CDC_Setup+0xd6>
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d029      	beq.n	8007fde <USBD_CDC_Setup+0xfe>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d133      	bne.n	8007ff6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d107      	bne.n	8007fa8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f9f9 	bl	8009398 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa6:	e02e      	b.n	8008006 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 f989 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb4:	e027      	b.n	8008006 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d107      	bne.n	8007fd0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fc0:	f107 030f 	add.w	r3, r7, #15
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f9e5 	bl	8009398 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fce:	e01a      	b.n	8008006 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 f975 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	75fb      	strb	r3, [r7, #23]
          break;
 8007fdc:	e013      	b.n	8008006 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d00d      	beq.n	8008004 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 f969 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ff4:	e006      	b.n	8008004 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f962 	bl	80092c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ffe:	2302      	movs	r3, #2
 8008000:	75fb      	strb	r3, [r7, #23]
          break;
 8008002:	e000      	b.n	8008006 <USBD_CDC_Setup+0x126>
          break;
 8008004:	bf00      	nop
      }
      break;
 8008006:	e006      	b.n	8008016 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f959 	bl	80092c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008010:	2302      	movs	r3, #2
 8008012:	75fb      	strb	r3, [r7, #23]
      break;
 8008014:	bf00      	nop
  }

  return ret;
 8008016:	7dfb      	ldrb	r3, [r7, #23]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008032:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800803a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d037      	beq.n	80080b6 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	331c      	adds	r3, #28
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d026      	beq.n	80080aa <USBD_CDC_DataIn+0x8a>
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	331c      	adds	r3, #28
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	0152      	lsls	r2, r2, #5
 8008074:	440a      	add	r2, r1
 8008076:	3238      	adds	r2, #56	; 0x38
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	fbb3 f1f2 	udiv	r1, r3, r2
 800807e:	fb02 f201 	mul.w	r2, r2, r1
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d110      	bne.n	80080aa <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008088:	78fa      	ldrb	r2, [r7, #3]
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	331c      	adds	r3, #28
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800809c:	78f9      	ldrb	r1, [r7, #3]
 800809e:	2300      	movs	r3, #0
 80080a0:	2200      	movs	r2, #0
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f005 fb30 	bl	800d708 <USBD_LL_Transmit>
 80080a8:	e003      	b.n	80080b2 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e000      	b.n	80080b8 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80080b6:	2302      	movs	r3, #2
  }
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f005 fb89 	bl	800d7f0 <USBD_LL_GetRxDataSize>
 80080de:	4602      	mov	r2, r0
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00d      	beq.n	800810c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008104:	4611      	mov	r1, r2
 8008106:	4798      	blx	r3

    return USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812c:	2b00      	cmp	r3, #0
 800812e:	d015      	beq.n	800815c <USBD_CDC_EP0_RxReady+0x46>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008136:	2bff      	cmp	r3, #255	; 0xff
 8008138:	d010      	beq.n	800815c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008148:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008150:	b292      	uxth	r2, r2
 8008152:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	22ff      	movs	r2, #255	; 0xff
 8008158:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2243      	movs	r2, #67	; 0x43
 8008174:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008176:	4b03      	ldr	r3, [pc, #12]	; (8008184 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	20000094 	.word	0x20000094

08008188 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2243      	movs	r2, #67	; 0x43
 8008194:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008196:	4b03      	ldr	r3, [pc, #12]	; (80081a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	20000050 	.word	0x20000050

080081a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2243      	movs	r2, #67	; 0x43
 80081b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	200000d8 	.word	0x200000d8

080081c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220a      	movs	r2, #10
 80081d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	2000000c 	.word	0x2000000c

080081e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081f2:	2302      	movs	r3, #2
 80081f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008216:	b480      	push	{r7}
 8008218:	b087      	sub	sp, #28
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	4613      	mov	r3, r2
 8008222:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008234:	88fa      	ldrh	r2, [r7, #6]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01c      	beq.n	80082c6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008292:	2b00      	cmp	r3, #0
 8008294:	d115      	bne.n	80082c2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2181      	movs	r1, #129	; 0x81
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f005 fa25 	bl	800d708 <USBD_LL_Transmit>

      return USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e002      	b.n	80082c8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80082c6:	2302      	movs	r3, #2
  }
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082de:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d017      	beq.n	800831a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	7c1b      	ldrb	r3, [r3, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082fc:	2101      	movs	r1, #1
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f005 fa3c 	bl	800d77c <USBD_LL_PrepareReceive>
 8008304:	e007      	b.n	8008316 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	2101      	movs	r1, #1
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f005 fa33 	bl	800d77c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e000      	b.n	800831c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800831a:	2302      	movs	r3, #2
  }
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	e01a      	b.n	8008372 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	79fa      	ldrb	r2, [r7, #7]
 8008368:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f004 fffc 	bl	800d368 <USBD_LL_Init>

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800837a:	b480      	push	{r7}
 800837c:	b085      	sub	sp, #20
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d006      	beq.n	800839c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
 800839a:	e001      	b.n	80083a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800839c:	2302      	movs	r3, #2
 800839e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b082      	sub	sp, #8
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f005 f838 	bl	800d42c <USBD_LL_Start>

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083e8:	2302      	movs	r3, #2
 80083ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00c      	beq.n	8008410 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	4611      	mov	r1, r2
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	78fa      	ldrb	r2, [r7, #3]
 8008430:	4611      	mov	r1, r2
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fef8 	bl	8009248 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008466:	461a      	mov	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008474:	f003 031f 	and.w	r3, r3, #31
 8008478:	2b01      	cmp	r3, #1
 800847a:	d00c      	beq.n	8008496 <USBD_LL_SetupStage+0x56>
 800847c:	2b01      	cmp	r3, #1
 800847e:	d302      	bcc.n	8008486 <USBD_LL_SetupStage+0x46>
 8008480:	2b02      	cmp	r3, #2
 8008482:	d010      	beq.n	80084a6 <USBD_LL_SetupStage+0x66>
 8008484:	e017      	b.n	80084b6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f9ce 	bl	8008830 <USBD_StdDevReq>
      break;
 8008494:	e01a      	b.n	80084cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa30 	bl	8008904 <USBD_StdItfReq>
      break;
 80084a4:	e012      	b.n	80084cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa6e 	bl	8008990 <USBD_StdEPReq>
      break;
 80084b4:	e00a      	b.n	80084cc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80084bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f005 f857 	bl	800d578 <USBD_LL_StallEP>
      break;
 80084ca:	bf00      	nop
  }

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b086      	sub	sp, #24
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	460b      	mov	r3, r1
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d14b      	bne.n	8008582 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d134      	bne.n	8008566 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	d919      	bls.n	800853c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	1ad2      	subs	r2, r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800851e:	429a      	cmp	r2, r3
 8008520:	d203      	bcs.n	800852a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008526:	b29b      	uxth	r3, r3
 8008528:	e002      	b.n	8008530 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800852e:	b29b      	uxth	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 ff7b 	bl	8009430 <USBD_CtlContinueRx>
 800853a:	e038      	b.n	80085ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800854e:	2b03      	cmp	r3, #3
 8008550:	d105      	bne.n	800855e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 ff78 	bl	8009454 <USBD_CtlSendStatus>
 8008564:	e023      	b.n	80085ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800856c:	2b05      	cmp	r3, #5
 800856e:	d11e      	bne.n	80085ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008578:	2100      	movs	r1, #0
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f004 fffc 	bl	800d578 <USBD_LL_StallEP>
 8008580:	e015      	b.n	80085ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00d      	beq.n	80085aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008594:	2b03      	cmp	r3, #3
 8008596:	d108      	bne.n	80085aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	7afa      	ldrb	r2, [r7, #11]
 80085a2:	4611      	mov	r1, r2
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	4798      	blx	r3
 80085a8:	e001      	b.n	80085ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085aa:	2302      	movs	r3, #2
 80085ac:	e000      	b.n	80085b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	460b      	mov	r3, r1
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085c6:	7afb      	ldrb	r3, [r7, #11]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d17f      	bne.n	80086cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3314      	adds	r3, #20
 80085d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d15c      	bne.n	8008696 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d915      	bls.n	8008614 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	1ad2      	subs	r2, r2, r3
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fee5 	bl	80093d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008606:	2300      	movs	r3, #0
 8008608:	2200      	movs	r2, #0
 800860a:	2100      	movs	r1, #0
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f005 f8b5 	bl	800d77c <USBD_LL_PrepareReceive>
 8008612:	e04e      	b.n	80086b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	6912      	ldr	r2, [r2, #16]
 800861c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008620:	fb02 f201 	mul.w	r2, r2, r1
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d11c      	bne.n	8008664 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008632:	429a      	cmp	r2, r3
 8008634:	d316      	bcc.n	8008664 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008640:	429a      	cmp	r2, r3
 8008642:	d20f      	bcs.n	8008664 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fec1 	bl	80093d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008656:	2300      	movs	r3, #0
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f005 f88d 	bl	800d77c <USBD_LL_PrepareReceive>
 8008662:	e026      	b.n	80086b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008676:	2b03      	cmp	r3, #3
 8008678:	d105      	bne.n	8008686 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f004 ff75 	bl	800d578 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fef3 	bl	800947a <USBD_CtlReceiveStatus>
 8008694:	e00d      	b.n	80086b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800869c:	2b04      	cmp	r3, #4
 800869e:	d004      	beq.n	80086aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f004 ff63 	bl	800d578 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d11d      	bne.n	80086f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fe82 	bl	80083c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086ca:	e015      	b.n	80086f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00d      	beq.n	80086f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d108      	bne.n	80086f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	7afa      	ldrb	r2, [r7, #11]
 80086ec:	4611      	mov	r1, r2
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	4798      	blx	r3
 80086f2:	e001      	b.n	80086f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086f4:	2302      	movs	r3, #2
 80086f6:	e000      	b.n	80086fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800870a:	2340      	movs	r3, #64	; 0x40
 800870c:	2200      	movs	r2, #0
 800870e:	2100      	movs	r1, #0
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f004 febd 	bl	800d490 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2240      	movs	r2, #64	; 0x40
 8008722:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	2200      	movs	r2, #0
 800872a:	2180      	movs	r1, #128	; 0x80
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f004 feaf 	bl	800d490 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2240      	movs	r2, #64	; 0x40
 800873c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6852      	ldr	r2, [r2, #4]
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	4611      	mov	r1, r2
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
  }

  return USBD_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2204      	movs	r2, #4
 80087bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d105      	bne.n	80087ec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	2b03      	cmp	r3, #3
 800880a:	d10b      	bne.n	8008824 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008846:	2b20      	cmp	r3, #32
 8008848:	d004      	beq.n	8008854 <USBD_StdDevReq+0x24>
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	d002      	beq.n	8008854 <USBD_StdDevReq+0x24>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d008      	beq.n	8008864 <USBD_StdDevReq+0x34>
 8008852:	e04c      	b.n	80088ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
      break;
 8008862:	e049      	b.n	80088f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b09      	cmp	r3, #9
 800886a:	d83a      	bhi.n	80088e2 <USBD_StdDevReq+0xb2>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <USBD_StdDevReq+0x44>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	080088c5 	.word	0x080088c5
 8008878:	080088d9 	.word	0x080088d9
 800887c:	080088e3 	.word	0x080088e3
 8008880:	080088cf 	.word	0x080088cf
 8008884:	080088e3 	.word	0x080088e3
 8008888:	080088a7 	.word	0x080088a7
 800888c:	0800889d 	.word	0x0800889d
 8008890:	080088e3 	.word	0x080088e3
 8008894:	080088bb 	.word	0x080088bb
 8008898:	080088b1 	.word	0x080088b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9d4 	bl	8008c4c <USBD_GetDescriptor>
          break;
 80088a4:	e022      	b.n	80088ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fb61 	bl	8008f70 <USBD_SetAddress>
          break;
 80088ae:	e01d      	b.n	80088ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fb9e 	bl	8008ff4 <USBD_SetConfig>
          break;
 80088b8:	e018      	b.n	80088ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fc27 	bl	8009110 <USBD_GetConfig>
          break;
 80088c2:	e013      	b.n	80088ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc56 	bl	8009178 <USBD_GetStatus>
          break;
 80088cc:	e00e      	b.n	80088ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fc84 	bl	80091de <USBD_SetFeature>
          break;
 80088d6:	e009      	b.n	80088ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fc93 	bl	8009206 <USBD_ClrFeature>
          break;
 80088e0:	e004      	b.n	80088ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fcec 	bl	80092c2 <USBD_CtlError>
          break;
 80088ea:	bf00      	nop
      }
      break;
 80088ec:	e004      	b.n	80088f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fce6 	bl	80092c2 <USBD_CtlError>
      break;
 80088f6:	bf00      	nop
  }

  return ret;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop

08008904 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800891a:	2b20      	cmp	r3, #32
 800891c:	d003      	beq.n	8008926 <USBD_StdItfReq+0x22>
 800891e:	2b40      	cmp	r3, #64	; 0x40
 8008920:	d001      	beq.n	8008926 <USBD_StdItfReq+0x22>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d12a      	bne.n	800897c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892c:	3b01      	subs	r3, #1
 800892e:	2b02      	cmp	r3, #2
 8008930:	d81d      	bhi.n	800896e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	889b      	ldrh	r3, [r3, #4]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b01      	cmp	r3, #1
 800893a:	d813      	bhi.n	8008964 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
 800894a:	4603      	mov	r3, r0
 800894c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	88db      	ldrh	r3, [r3, #6]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d110      	bne.n	8008978 <USBD_StdItfReq+0x74>
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10d      	bne.n	8008978 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fd79 	bl	8009454 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008962:	e009      	b.n	8008978 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fcab 	bl	80092c2 <USBD_CtlError>
          break;
 800896c:	e004      	b.n	8008978 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fca6 	bl	80092c2 <USBD_CtlError>
          break;
 8008976:	e000      	b.n	800897a <USBD_StdItfReq+0x76>
          break;
 8008978:	bf00      	nop
      }
      break;
 800897a:	e004      	b.n	8008986 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fc9f 	bl	80092c2 <USBD_CtlError>
      break;
 8008984:	bf00      	nop
  }

  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d004      	beq.n	80089ba <USBD_StdEPReq+0x2a>
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	d002      	beq.n	80089ba <USBD_StdEPReq+0x2a>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <USBD_StdEPReq+0x3a>
 80089b8:	e13d      	b.n	8008c36 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
      break;
 80089c8:	e13a      	b.n	8008c40 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d10a      	bne.n	80089ec <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	e12a      	b.n	8008c42 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d03e      	beq.n	8008a72 <USBD_StdEPReq+0xe2>
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d002      	beq.n	80089fe <USBD_StdEPReq+0x6e>
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d070      	beq.n	8008ade <USBD_StdEPReq+0x14e>
 80089fc:	e115      	b.n	8008c2a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d002      	beq.n	8008a0e <USBD_StdEPReq+0x7e>
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d015      	beq.n	8008a38 <USBD_StdEPReq+0xa8>
 8008a0c:	e02b      	b.n	8008a66 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <USBD_StdEPReq+0x9e>
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b80      	cmp	r3, #128	; 0x80
 8008a18:	d009      	beq.n	8008a2e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f004 fdaa 	bl	800d578 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a24:	2180      	movs	r1, #128	; 0x80
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f004 fda6 	bl	800d578 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a2c:	e020      	b.n	8008a70 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc46 	bl	80092c2 <USBD_CtlError>
              break;
 8008a36:	e01b      	b.n	8008a70 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	885b      	ldrh	r3, [r3, #2]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10e      	bne.n	8008a5e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <USBD_StdEPReq+0xce>
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b80      	cmp	r3, #128	; 0x80
 8008a4a:	d008      	beq.n	8008a5e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f004 fd8d 	bl	800d578 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fcf8 	bl	8009454 <USBD_CtlSendStatus>

              break;
 8008a64:	e004      	b.n	8008a70 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc2a 	bl	80092c2 <USBD_CtlError>
              break;
 8008a6e:	bf00      	nop
          }
          break;
 8008a70:	e0e0      	b.n	8008c34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d002      	beq.n	8008a82 <USBD_StdEPReq+0xf2>
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d015      	beq.n	8008aac <USBD_StdEPReq+0x11c>
 8008a80:	e026      	b.n	8008ad0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00c      	beq.n	8008aa2 <USBD_StdEPReq+0x112>
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	2b80      	cmp	r3, #128	; 0x80
 8008a8c:	d009      	beq.n	8008aa2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f004 fd70 	bl	800d578 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a98:	2180      	movs	r1, #128	; 0x80
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f004 fd6c 	bl	800d578 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008aa0:	e01c      	b.n	8008adc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc0c 	bl	80092c2 <USBD_CtlError>
              break;
 8008aaa:	e017      	b.n	8008adc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	885b      	ldrh	r3, [r3, #2]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d112      	bne.n	8008ada <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d004      	beq.n	8008ac8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f004 fd8e 	bl	800d5e4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fcc3 	bl	8009454 <USBD_CtlSendStatus>
              }
              break;
 8008ace:	e004      	b.n	8008ada <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fbf5 	bl	80092c2 <USBD_CtlError>
              break;
 8008ad8:	e000      	b.n	8008adc <USBD_StdEPReq+0x14c>
              break;
 8008ada:	bf00      	nop
          }
          break;
 8008adc:	e0aa      	b.n	8008c34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d002      	beq.n	8008aee <USBD_StdEPReq+0x15e>
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d032      	beq.n	8008b52 <USBD_StdEPReq+0x1c2>
 8008aec:	e097      	b.n	8008c1e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d007      	beq.n	8008b04 <USBD_StdEPReq+0x174>
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b80      	cmp	r3, #128	; 0x80
 8008af8:	d004      	beq.n	8008b04 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fbe0 	bl	80092c2 <USBD_CtlError>
                break;
 8008b02:	e091      	b.n	8008c28 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da0b      	bge.n	8008b24 <USBD_StdEPReq+0x194>
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	3310      	adds	r3, #16
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	e00b      	b.n	8008b3c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	4413      	add	r3, r2
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2202      	movs	r2, #2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fc24 	bl	8009398 <USBD_CtlSendData>
              break;
 8008b50:	e06a      	b.n	8008c28 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da11      	bge.n	8008b7e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	f003 020f 	and.w	r2, r3, #15
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	3318      	adds	r3, #24
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d117      	bne.n	8008ba4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fba3 	bl	80092c2 <USBD_CtlError>
                  break;
 8008b7c:	e054      	b.n	8008c28 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	f003 020f 	and.w	r2, r3, #15
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	4613      	mov	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	440b      	add	r3, r1
 8008b90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fb90 	bl	80092c2 <USBD_CtlError>
                  break;
 8008ba2:	e041      	b.n	8008c28 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da0b      	bge.n	8008bc4 <USBD_StdEPReq+0x234>
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	3310      	adds	r3, #16
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	e00b      	b.n	8008bdc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	3304      	adds	r3, #4
 8008bdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <USBD_StdEPReq+0x25a>
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	2b80      	cmp	r3, #128	; 0x80
 8008be8:	d103      	bne.n	8008bf2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e00e      	b.n	8008c10 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f004 fd2a 	bl	800d650 <USBD_LL_IsStallEP>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2201      	movs	r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	e002      	b.n	8008c10 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2202      	movs	r2, #2
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fbbe 	bl	8009398 <USBD_CtlSendData>
              break;
 8008c1c:	e004      	b.n	8008c28 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fb4e 	bl	80092c2 <USBD_CtlError>
              break;
 8008c26:	bf00      	nop
          }
          break;
 8008c28:	e004      	b.n	8008c34 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fb48 	bl	80092c2 <USBD_CtlError>
          break;
 8008c32:	bf00      	nop
      }
      break;
 8008c34:	e004      	b.n	8008c40 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fb42 	bl	80092c2 <USBD_CtlError>
      break;
 8008c3e:	bf00      	nop
  }

  return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	885b      	ldrh	r3, [r3, #2]
 8008c66:	0a1b      	lsrs	r3, r3, #8
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	2b0e      	cmp	r3, #14
 8008c6e:	f200 8152 	bhi.w	8008f16 <USBD_GetDescriptor+0x2ca>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <USBD_GetDescriptor+0x2c>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008ce9 	.word	0x08008ce9
 8008c7c:	08008d01 	.word	0x08008d01
 8008c80:	08008d41 	.word	0x08008d41
 8008c84:	08008f17 	.word	0x08008f17
 8008c88:	08008f17 	.word	0x08008f17
 8008c8c:	08008eb7 	.word	0x08008eb7
 8008c90:	08008ee3 	.word	0x08008ee3
 8008c94:	08008f17 	.word	0x08008f17
 8008c98:	08008f17 	.word	0x08008f17
 8008c9c:	08008f17 	.word	0x08008f17
 8008ca0:	08008f17 	.word	0x08008f17
 8008ca4:	08008f17 	.word	0x08008f17
 8008ca8:	08008f17 	.word	0x08008f17
 8008cac:	08008f17 	.word	0x08008f17
 8008cb0:	08008cb5 	.word	0x08008cb5
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00b      	beq.n	8008cd8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	7c12      	ldrb	r2, [r2, #16]
 8008ccc:	f107 0108 	add.w	r1, r7, #8
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4798      	blx	r3
 8008cd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cd6:	e126      	b.n	8008f26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 faf1 	bl	80092c2 <USBD_CtlError>
        err++;
 8008ce0:	7afb      	ldrb	r3, [r7, #11]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ce6:	e11e      	b.n	8008f26 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	7c12      	ldrb	r2, [r2, #16]
 8008cf4:	f107 0108 	add.w	r1, r7, #8
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
 8008cfc:	60f8      	str	r0, [r7, #12]
      break;
 8008cfe:	e112      	b.n	8008f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7c1b      	ldrb	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10d      	bne.n	8008d24 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	f107 0208 	add.w	r2, r7, #8
 8008d14:	4610      	mov	r0, r2
 8008d16:	4798      	blx	r3
 8008d18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	2202      	movs	r2, #2
 8008d20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d22:	e100      	b.n	8008f26 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	f107 0208 	add.w	r2, r7, #8
 8008d30:	4610      	mov	r0, r2
 8008d32:	4798      	blx	r3
 8008d34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	701a      	strb	r2, [r3, #0]
      break;
 8008d3e:	e0f2      	b.n	8008f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b05      	cmp	r3, #5
 8008d48:	f200 80ac 	bhi.w	8008ea4 <USBD_GetDescriptor+0x258>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <USBD_GetDescriptor+0x108>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d6d 	.word	0x08008d6d
 8008d58:	08008da1 	.word	0x08008da1
 8008d5c:	08008dd5 	.word	0x08008dd5
 8008d60:	08008e09 	.word	0x08008e09
 8008d64:	08008e3d 	.word	0x08008e3d
 8008d68:	08008e71 	.word	0x08008e71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	7c12      	ldrb	r2, [r2, #16]
 8008d84:	f107 0108 	add.w	r1, r7, #8
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8e:	e091      	b.n	8008eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa95 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9e:	e089      	b.n	8008eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	7c12      	ldrb	r2, [r2, #16]
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dc2:	e077      	b.n	8008eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fa7b 	bl	80092c2 <USBD_CtlError>
            err++;
 8008dcc:	7afb      	ldrb	r3, [r7, #11]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008dd2:	e06f      	b.n	8008eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	7c12      	ldrb	r2, [r2, #16]
 8008dec:	f107 0108 	add.w	r1, r7, #8
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
 8008df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df6:	e05d      	b.n	8008eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa61 	bl	80092c2 <USBD_CtlError>
            err++;
 8008e00:	7afb      	ldrb	r3, [r7, #11]
 8008e02:	3301      	adds	r3, #1
 8008e04:	72fb      	strb	r3, [r7, #11]
          break;
 8008e06:	e055      	b.n	8008eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	7c12      	ldrb	r2, [r2, #16]
 8008e20:	f107 0108 	add.w	r1, r7, #8
 8008e24:	4610      	mov	r0, r2
 8008e26:	4798      	blx	r3
 8008e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e2a:	e043      	b.n	8008eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fa47 	bl	80092c2 <USBD_CtlError>
            err++;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	3301      	adds	r3, #1
 8008e38:	72fb      	strb	r3, [r7, #11]
          break;
 8008e3a:	e03b      	b.n	8008eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7c12      	ldrb	r2, [r2, #16]
 8008e54:	f107 0108 	add.w	r1, r7, #8
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e5e:	e029      	b.n	8008eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa2d 	bl	80092c2 <USBD_CtlError>
            err++;
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e6e:	e021      	b.n	8008eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7c12      	ldrb	r2, [r2, #16]
 8008e88:	f107 0108 	add.w	r1, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e92:	e00f      	b.n	8008eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa13 	bl	80092c2 <USBD_CtlError>
            err++;
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ea2:	e007      	b.n	8008eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa0b 	bl	80092c2 <USBD_CtlError>
          err++;
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008eb2:	e038      	b.n	8008f26 <USBD_GetDescriptor+0x2da>
 8008eb4:	e037      	b.n	8008f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7c1b      	ldrb	r3, [r3, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec6:	f107 0208 	add.w	r2, r7, #8
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4798      	blx	r3
 8008ece:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ed0:	e029      	b.n	8008f26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f9f4 	bl	80092c2 <USBD_CtlError>
        err++;
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	3301      	adds	r3, #1
 8008ede:	72fb      	strb	r3, [r7, #11]
      break;
 8008ee0:	e021      	b.n	8008f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7c1b      	ldrb	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10d      	bne.n	8008f06 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef2:	f107 0208 	add.w	r2, r7, #8
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	4798      	blx	r3
 8008efa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3301      	adds	r3, #1
 8008f00:	2207      	movs	r2, #7
 8008f02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f04:	e00f      	b.n	8008f26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f9da 	bl	80092c2 <USBD_CtlError>
        err++;
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
 8008f10:	3301      	adds	r3, #1
 8008f12:	72fb      	strb	r3, [r7, #11]
      break;
 8008f14:	e007      	b.n	8008f26 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f9d2 	bl	80092c2 <USBD_CtlError>
      err++;
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	3301      	adds	r3, #1
 8008f22:	72fb      	strb	r3, [r7, #11]
      break;
 8008f24:	bf00      	nop
  }

  if (err != 0U)
 8008f26:	7afb      	ldrb	r3, [r7, #11]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d11c      	bne.n	8008f66 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f2c:	893b      	ldrh	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d011      	beq.n	8008f56 <USBD_GetDescriptor+0x30a>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	88db      	ldrh	r3, [r3, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00d      	beq.n	8008f56 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	88da      	ldrh	r2, [r3, #6]
 8008f3e:	893b      	ldrh	r3, [r7, #8]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	bf28      	it	cs
 8008f44:	4613      	movcs	r3, r2
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f4a:	893b      	ldrh	r3, [r7, #8]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fa21 	bl	8009398 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	88db      	ldrh	r3, [r3, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d104      	bne.n	8008f68 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa78 	bl	8009454 <USBD_CtlSendStatus>
 8008f64:	e000      	b.n	8008f68 <USBD_GetDescriptor+0x31c>
    return;
 8008f66:	bf00      	nop
    }
  }
}
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop

08008f70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	889b      	ldrh	r3, [r3, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d130      	bne.n	8008fe4 <USBD_SetAddress+0x74>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	88db      	ldrh	r3, [r3, #6]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d12c      	bne.n	8008fe4 <USBD_SetAddress+0x74>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	885b      	ldrh	r3, [r3, #2]
 8008f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f90:	d828      	bhi.n	8008fe4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	885b      	ldrh	r3, [r3, #2]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d104      	bne.n	8008fb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f989 	bl	80092c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb0:	e01c      	b.n	8008fec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	7bfa      	ldrb	r2, [r7, #15]
 8008fb6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f004 fb6c 	bl	800d69c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fa45 	bl	8009454 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd8:	e008      	b.n	8008fec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	e003      	b.n	8008fec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f96b 	bl	80092c2 <USBD_CtlError>
  }
}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	885b      	ldrh	r3, [r3, #2]
 8009002:	b2da      	uxtb	r2, r3
 8009004:	4b41      	ldr	r3, [pc, #260]	; (800910c <USBD_SetConfig+0x118>)
 8009006:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009008:	4b40      	ldr	r3, [pc, #256]	; (800910c <USBD_SetConfig+0x118>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d904      	bls.n	800901a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f955 	bl	80092c2 <USBD_CtlError>
 8009018:	e075      	b.n	8009106 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009020:	2b02      	cmp	r3, #2
 8009022:	d002      	beq.n	800902a <USBD_SetConfig+0x36>
 8009024:	2b03      	cmp	r3, #3
 8009026:	d023      	beq.n	8009070 <USBD_SetConfig+0x7c>
 8009028:	e062      	b.n	80090f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800902a:	4b38      	ldr	r3, [pc, #224]	; (800910c <USBD_SetConfig+0x118>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01a      	beq.n	8009068 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009032:	4b36      	ldr	r3, [pc, #216]	; (800910c <USBD_SetConfig+0x118>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2203      	movs	r2, #3
 8009040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009044:	4b31      	ldr	r3, [pc, #196]	; (800910c <USBD_SetConfig+0x118>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff f9c6 	bl	80083dc <USBD_SetClassConfig>
 8009050:	4603      	mov	r3, r0
 8009052:	2b02      	cmp	r3, #2
 8009054:	d104      	bne.n	8009060 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f932 	bl	80092c2 <USBD_CtlError>
            return;
 800905e:	e052      	b.n	8009106 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f9f7 	bl	8009454 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009066:	e04e      	b.n	8009106 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f9f3 	bl	8009454 <USBD_CtlSendStatus>
        break;
 800906e:	e04a      	b.n	8009106 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009070:	4b26      	ldr	r3, [pc, #152]	; (800910c <USBD_SetConfig+0x118>)
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d112      	bne.n	800909e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009080:	4b22      	ldr	r3, [pc, #136]	; (800910c <USBD_SetConfig+0x118>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800908a:	4b20      	ldr	r3, [pc, #128]	; (800910c <USBD_SetConfig+0x118>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff f9c2 	bl	800841a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f9dc 	bl	8009454 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800909c:	e033      	b.n	8009106 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800909e:	4b1b      	ldr	r3, [pc, #108]	; (800910c <USBD_SetConfig+0x118>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d01d      	beq.n	80090e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff f9b0 	bl	800841a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80090ba:	4b14      	ldr	r3, [pc, #80]	; (800910c <USBD_SetConfig+0x118>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <USBD_SetConfig+0x118>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff f986 	bl	80083dc <USBD_SetClassConfig>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d104      	bne.n	80090e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f8f2 	bl	80092c2 <USBD_CtlError>
            return;
 80090de:	e012      	b.n	8009106 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f9b7 	bl	8009454 <USBD_CtlSendStatus>
        break;
 80090e6:	e00e      	b.n	8009106 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9b3 	bl	8009454 <USBD_CtlSendStatus>
        break;
 80090ee:	e00a      	b.n	8009106 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f8e5 	bl	80092c2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <USBD_SetConfig+0x118>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff f98b 	bl	800841a <USBD_ClrClassConfig>
        break;
 8009104:	bf00      	nop
    }
  }
}
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20000214 	.word	0x20000214

08009110 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	88db      	ldrh	r3, [r3, #6]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d004      	beq.n	800912c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f8cc 	bl	80092c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800912a:	e021      	b.n	8009170 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009132:	2b01      	cmp	r3, #1
 8009134:	db17      	blt.n	8009166 <USBD_GetConfig+0x56>
 8009136:	2b02      	cmp	r3, #2
 8009138:	dd02      	ble.n	8009140 <USBD_GetConfig+0x30>
 800913a:	2b03      	cmp	r3, #3
 800913c:	d00b      	beq.n	8009156 <USBD_GetConfig+0x46>
 800913e:	e012      	b.n	8009166 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3308      	adds	r3, #8
 800914a:	2201      	movs	r2, #1
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f922 	bl	8009398 <USBD_CtlSendData>
        break;
 8009154:	e00c      	b.n	8009170 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3304      	adds	r3, #4
 800915a:	2201      	movs	r2, #1
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f91a 	bl	8009398 <USBD_CtlSendData>
        break;
 8009164:	e004      	b.n	8009170 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8aa 	bl	80092c2 <USBD_CtlError>
        break;
 800916e:	bf00      	nop
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009188:	3b01      	subs	r3, #1
 800918a:	2b02      	cmp	r3, #2
 800918c:	d81e      	bhi.n	80091cc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	88db      	ldrh	r3, [r3, #6]
 8009192:	2b02      	cmp	r3, #2
 8009194:	d004      	beq.n	80091a0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f892 	bl	80092c2 <USBD_CtlError>
        break;
 800919e:	e01a      	b.n	80091d6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f043 0202 	orr.w	r2, r3, #2
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	330c      	adds	r3, #12
 80091c0:	2202      	movs	r2, #2
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f8e7 	bl	8009398 <USBD_CtlSendData>
      break;
 80091ca:	e004      	b.n	80091d6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f877 	bl	80092c2 <USBD_CtlError>
      break;
 80091d4:	bf00      	nop
  }
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	885b      	ldrh	r3, [r3, #2]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d106      	bne.n	80091fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f92b 	bl	8009454 <USBD_CtlSendStatus>
  }
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009216:	3b01      	subs	r3, #1
 8009218:	2b02      	cmp	r3, #2
 800921a:	d80b      	bhi.n	8009234 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	885b      	ldrh	r3, [r3, #2]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d10c      	bne.n	800923e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f911 	bl	8009454 <USBD_CtlSendStatus>
      }
      break;
 8009232:	e004      	b.n	800923e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f843 	bl	80092c2 <USBD_CtlError>
      break;
 800923c:	e000      	b.n	8009240 <USBD_ClrFeature+0x3a>
      break;
 800923e:	bf00      	nop
  }
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	785a      	ldrb	r2, [r3, #1]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	3302      	adds	r3, #2
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	b29a      	uxth	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	3303      	adds	r3, #3
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	b29b      	uxth	r3, r3
 8009276:	4413      	add	r3, r2
 8009278:	b29a      	uxth	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	3304      	adds	r3, #4
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	b29a      	uxth	r2, r3
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	3305      	adds	r3, #5
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	b29b      	uxth	r3, r3
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	b29b      	uxth	r3, r3
 8009292:	4413      	add	r3, r2
 8009294:	b29a      	uxth	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	3306      	adds	r3, #6
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	3307      	adds	r3, #7
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	4413      	add	r3, r2
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	80da      	strh	r2, [r3, #6]

}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80092cc:	2180      	movs	r1, #128	; 0x80
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f004 f952 	bl	800d578 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80092d4:	2100      	movs	r1, #0
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f004 f94e 	bl	800d578 <USBD_LL_StallEP>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d032      	beq.n	8009360 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f834 	bl	8009368 <USBD_GetLen>
 8009300:	4603      	mov	r3, r0
 8009302:	3301      	adds	r3, #1
 8009304:	b29b      	uxth	r3, r3
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	75fa      	strb	r2, [r7, #23]
 8009314:	461a      	mov	r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	4413      	add	r3, r2
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	75fa      	strb	r2, [r7, #23]
 8009326:	461a      	mov	r2, r3
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4413      	add	r3, r2
 800932c:	2203      	movs	r2, #3
 800932e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009330:	e012      	b.n	8009358 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	60fa      	str	r2, [r7, #12]
 8009338:	7dfa      	ldrb	r2, [r7, #23]
 800933a:	1c51      	adds	r1, r2, #1
 800933c:	75f9      	strb	r1, [r7, #23]
 800933e:	4611      	mov	r1, r2
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	440a      	add	r2, r1
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	75fa      	strb	r2, [r7, #23]
 800934e:	461a      	mov	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4413      	add	r3, r2
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e8      	bne.n	8009332 <USBD_GetString+0x4e>
    }
  }
}
 8009360:	bf00      	nop
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009374:	e005      	b.n	8009382 <USBD_GetLen+0x1a>
  {
    len++;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	3301      	adds	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3301      	adds	r3, #1
 8009380:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1f5      	bne.n	8009376 <USBD_GetLen+0xe>
  }

  return len;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093ae:	88fa      	ldrh	r2, [r7, #6]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093ba:	88fb      	ldrh	r3, [r7, #6]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	2100      	movs	r1, #0
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f004 f9a1 	bl	800d708 <USBD_LL_Transmit>

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	2100      	movs	r1, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f004 f98f 	bl	800d708 <USBD_LL_Transmit>

  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4613      	mov	r3, r2
 8009400:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2203      	movs	r2, #3
 8009406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800940a:	88fa      	ldrh	r2, [r7, #6]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	2100      	movs	r1, #0
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f004 f9ab 	bl	800d77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	4613      	mov	r3, r2
 800943c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	2100      	movs	r1, #0
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f004 f999 	bl	800d77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2204      	movs	r2, #4
 8009460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009464:	2300      	movs	r3, #0
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f004 f94c 	bl	800d708 <USBD_LL_Transmit>

  return USBD_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2205      	movs	r2, #5
 8009486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948a:	2300      	movs	r3, #0
 800948c:	2200      	movs	r2, #0
 800948e:	2100      	movs	r1, #0
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f004 f973 	bl	800d77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80094a4:	bf00      	nop
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
	...

080094b0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b6:	f3ef 8305 	mrs	r3, IPSR
 80094ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80094bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10f      	bne.n	80094e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094c2:	f3ef 8310 	mrs	r3, PRIMASK
 80094c6:	607b      	str	r3, [r7, #4]
  return(result);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094ce:	f3ef 8311 	mrs	r3, BASEPRI
 80094d2:	603b      	str	r3, [r7, #0]
  return(result);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <osKernelInitialize+0x3a>
 80094da:	4b0e      	ldr	r3, [pc, #56]	; (8009514 <osKernelInitialize+0x64>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d103      	bne.n	80094ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80094e2:	f06f 0305 	mvn.w	r3, #5
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e00c      	b.n	8009504 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80094ea:	4b0a      	ldr	r3, [pc, #40]	; (8009514 <osKernelInitialize+0x64>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d105      	bne.n	80094fe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80094f2:	4b08      	ldr	r3, [pc, #32]	; (8009514 <osKernelInitialize+0x64>)
 80094f4:	2201      	movs	r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	e002      	b.n	8009504 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80094fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009502:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009504:	68fb      	ldr	r3, [r7, #12]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000218 	.word	0x20000218

08009518 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800951e:	f3ef 8305 	mrs	r3, IPSR
 8009522:	60bb      	str	r3, [r7, #8]
  return(result);
 8009524:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10f      	bne.n	800954a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800952a:	f3ef 8310 	mrs	r3, PRIMASK
 800952e:	607b      	str	r3, [r7, #4]
  return(result);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d105      	bne.n	8009542 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009536:	f3ef 8311 	mrs	r3, BASEPRI
 800953a:	603b      	str	r3, [r7, #0]
  return(result);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d007      	beq.n	8009552 <osKernelStart+0x3a>
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <osKernelStart+0x68>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d103      	bne.n	8009552 <osKernelStart+0x3a>
    stat = osErrorISR;
 800954a:	f06f 0305 	mvn.w	r3, #5
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e010      	b.n	8009574 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009552:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <osKernelStart+0x68>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d109      	bne.n	800956e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800955a:	f7ff ffa1 	bl	80094a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800955e:	4b08      	ldr	r3, [pc, #32]	; (8009580 <osKernelStart+0x68>)
 8009560:	2202      	movs	r2, #2
 8009562:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009564:	f001 fea2 	bl	800b2ac <vTaskStartScheduler>
      stat = osOK;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e002      	b.n	8009574 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800956e:	f04f 33ff 	mov.w	r3, #4294967295
 8009572:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009574:	68fb      	ldr	r3, [r7, #12]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000218 	.word	0x20000218

08009584 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800958a:	f3ef 8305 	mrs	r3, IPSR
 800958e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009590:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10f      	bne.n	80095b6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009596:	f3ef 8310 	mrs	r3, PRIMASK
 800959a:	607b      	str	r3, [r7, #4]
  return(result);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d105      	bne.n	80095ae <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095a2:	f3ef 8311 	mrs	r3, BASEPRI
 80095a6:	603b      	str	r3, [r7, #0]
  return(result);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d007      	beq.n	80095be <osKernelGetTickCount+0x3a>
 80095ae:	4b08      	ldr	r3, [pc, #32]	; (80095d0 <osKernelGetTickCount+0x4c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d103      	bne.n	80095be <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80095b6:	f001 ff97 	bl	800b4e8 <xTaskGetTickCountFromISR>
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	e002      	b.n	80095c4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80095be:	f001 ff83 	bl	800b4c8 <xTaskGetTickCount>
 80095c2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80095c4:	68fb      	ldr	r3, [r7, #12]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20000218 	.word	0x20000218

080095d4 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80095d4:	b480      	push	{r7}
 80095d6:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80095d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80095dc:	4618      	mov	r0, r3
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b090      	sub	sp, #64	; 0x40
 80095ec:	af04      	add	r7, sp, #16
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80095f4:	2300      	movs	r3, #0
 80095f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f8:	f3ef 8305 	mrs	r3, IPSR
 80095fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80095fe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009600:	2b00      	cmp	r3, #0
 8009602:	f040 808f 	bne.w	8009724 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009606:	f3ef 8310 	mrs	r3, PRIMASK
 800960a:	61bb      	str	r3, [r7, #24]
  return(result);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009612:	f3ef 8311 	mrs	r3, BASEPRI
 8009616:	617b      	str	r3, [r7, #20]
  return(result);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <osThreadNew+0x3e>
 800961e:	4b44      	ldr	r3, [pc, #272]	; (8009730 <osThreadNew+0x148>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d07e      	beq.n	8009724 <osThreadNew+0x13c>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d07b      	beq.n	8009724 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800962c:	2380      	movs	r3, #128	; 0x80
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009630:	2318      	movs	r3, #24
 8009632:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009634:	2300      	movs	r3, #0
 8009636:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009638:	f04f 33ff 	mov.w	r3, #4294967295
 800963c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d045      	beq.n	80096d0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <osThreadNew+0x6a>
        name = attr->name;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	2b00      	cmp	r3, #0
 8009664:	d008      	beq.n	8009678 <osThreadNew+0x90>
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	2b38      	cmp	r3, #56	; 0x38
 800966a:	d805      	bhi.n	8009678 <osThreadNew+0x90>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <osThreadNew+0x94>
        return (NULL);
 8009678:	2300      	movs	r3, #0
 800967a:	e054      	b.n	8009726 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	089b      	lsrs	r3, r3, #2
 800968a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00e      	beq.n	80096b2 <osThreadNew+0xca>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2b5b      	cmp	r3, #91	; 0x5b
 800969a:	d90a      	bls.n	80096b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d006      	beq.n	80096b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <osThreadNew+0xca>
        mem = 1;
 80096ac:	2301      	movs	r3, #1
 80096ae:	623b      	str	r3, [r7, #32]
 80096b0:	e010      	b.n	80096d4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10c      	bne.n	80096d4 <osThreadNew+0xec>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d108      	bne.n	80096d4 <osThreadNew+0xec>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <osThreadNew+0xec>
          mem = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	623b      	str	r3, [r7, #32]
 80096ce:	e001      	b.n	80096d4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d110      	bne.n	80096fc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096e2:	9202      	str	r2, [sp, #8]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f001 fb8f 	bl	800ae14 <xTaskCreateStatic>
 80096f6:	4603      	mov	r3, r0
 80096f8:	613b      	str	r3, [r7, #16]
 80096fa:	e013      	b.n	8009724 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d110      	bne.n	8009724 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	b29a      	uxth	r2, r3
 8009706:	f107 0310 	add.w	r3, r7, #16
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f001 fbd7 	bl	800aec8 <xTaskCreate>
 800971a:	4603      	mov	r3, r0
 800971c:	2b01      	cmp	r3, #1
 800971e:	d001      	beq.n	8009724 <osThreadNew+0x13c>
          hTask = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009724:	693b      	ldr	r3, [r7, #16]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3730      	adds	r7, #48	; 0x30
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000218 	.word	0x20000218

08009734 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800973c:	f3ef 8305 	mrs	r3, IPSR
 8009740:	613b      	str	r3, [r7, #16]
  return(result);
 8009742:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10f      	bne.n	8009768 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009748:	f3ef 8310 	mrs	r3, PRIMASK
 800974c:	60fb      	str	r3, [r7, #12]
  return(result);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d105      	bne.n	8009760 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009754:	f3ef 8311 	mrs	r3, BASEPRI
 8009758:	60bb      	str	r3, [r7, #8]
  return(result);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <osDelay+0x3c>
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <osDelay+0x58>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d103      	bne.n	8009770 <osDelay+0x3c>
    stat = osErrorISR;
 8009768:	f06f 0305 	mvn.w	r3, #5
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	e007      	b.n	8009780 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009770:	2300      	movs	r3, #0
 8009772:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <osDelay+0x4c>
      vTaskDelay(ticks);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fd62 	bl	800b244 <vTaskDelay>
    }
  }

  return (stat);
 8009780:	697b      	ldr	r3, [r7, #20]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000218 	.word	0x20000218

08009790 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009798:	f3ef 8305 	mrs	r3, IPSR
 800979c:	617b      	str	r3, [r7, #20]
  return(result);
 800979e:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10f      	bne.n	80097c4 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a4:	f3ef 8310 	mrs	r3, PRIMASK
 80097a8:	613b      	str	r3, [r7, #16]
  return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d105      	bne.n	80097bc <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097b0:	f3ef 8311 	mrs	r3, BASEPRI
 80097b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d007      	beq.n	80097cc <osDelayUntil+0x3c>
 80097bc:	4b13      	ldr	r3, [pc, #76]	; (800980c <osDelayUntil+0x7c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d103      	bne.n	80097cc <osDelayUntil+0x3c>
    stat = osErrorISR;
 80097c4:	f06f 0305 	mvn.w	r3, #5
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	e019      	b.n	8009800 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80097d0:	f001 fe7a 	bl	800b4c8 <xTaskGetTickCount>
 80097d4:	4603      	mov	r3, r0
 80097d6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <osDelayUntil+0x6a>
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	db06      	blt.n	80097fa <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	69b9      	ldr	r1, [r7, #24]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 fcac 	bl	800b150 <vTaskDelayUntil>
 80097f8:	e002      	b.n	8009800 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80097fa:	f06f 0303 	mvn.w	r3, #3
 80097fe:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009800:	69fb      	ldr	r3, [r7, #28]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3720      	adds	r7, #32
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000218 	.word	0x20000218

08009810 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009810:	b580      	push	{r7, lr}
 8009812:	b08a      	sub	sp, #40	; 0x28
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009818:	2300      	movs	r3, #0
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800981c:	f3ef 8305 	mrs	r3, IPSR
 8009820:	613b      	str	r3, [r7, #16]
  return(result);
 8009822:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009824:	2b00      	cmp	r3, #0
 8009826:	f040 8085 	bne.w	8009934 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800982a:	f3ef 8310 	mrs	r3, PRIMASK
 800982e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009836:	f3ef 8311 	mrs	r3, BASEPRI
 800983a:	60bb      	str	r3, [r7, #8]
  return(result);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <osMutexNew+0x3a>
 8009842:	4b3f      	ldr	r3, [pc, #252]	; (8009940 <osMutexNew+0x130>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d074      	beq.n	8009934 <osMutexNew+0x124>
    if (attr != NULL) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	623b      	str	r3, [r7, #32]
 8009856:	e001      	b.n	800985c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <osMutexNew+0x5c>
      rmtx = 1U;
 8009866:	2301      	movs	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
 800986a:	e001      	b.n	8009870 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b00      	cmp	r3, #0
 8009878:	d15c      	bne.n	8009934 <osMutexNew+0x124>
      mem = -1;
 800987a:	f04f 33ff 	mov.w	r3, #4294967295
 800987e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d015      	beq.n	80098b2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d006      	beq.n	800989c <osMutexNew+0x8c>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	2b4f      	cmp	r3, #79	; 0x4f
 8009894:	d902      	bls.n	800989c <osMutexNew+0x8c>
          mem = 1;
 8009896:	2301      	movs	r3, #1
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	e00c      	b.n	80098b6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d108      	bne.n	80098b6 <osMutexNew+0xa6>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <osMutexNew+0xa6>
            mem = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61bb      	str	r3, [r7, #24]
 80098b0:	e001      	b.n	80098b6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d112      	bne.n	80098e2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	4619      	mov	r1, r3
 80098c8:	2004      	movs	r0, #4
 80098ca:	f000 fcac 	bl	800a226 <xQueueCreateMutexStatic>
 80098ce:	6278      	str	r0, [r7, #36]	; 0x24
 80098d0:	e016      	b.n	8009900 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	4619      	mov	r1, r3
 80098d8:	2001      	movs	r0, #1
 80098da:	f000 fca4 	bl	800a226 <xQueueCreateMutexStatic>
 80098de:	6278      	str	r0, [r7, #36]	; 0x24
 80098e0:	e00e      	b.n	8009900 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10b      	bne.n	8009900 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80098ee:	2004      	movs	r0, #4
 80098f0:	f000 fc81 	bl	800a1f6 <xQueueCreateMutex>
 80098f4:	6278      	str	r0, [r7, #36]	; 0x24
 80098f6:	e003      	b.n	8009900 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80098f8:	2001      	movs	r0, #1
 80098fa:	f000 fc7c 	bl	800a1f6 <xQueueCreateMutex>
 80098fe:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00c      	beq.n	8009920 <osMutexNew+0x110>
        if (attr != NULL) {
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <osMutexNew+0x104>
          name = attr->name;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	e001      	b.n	8009918 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800991c:	f001 fa1e 	bl	800ad5c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <osMutexNew+0x124>
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009936:	4618      	mov	r0, r3
 8009938:	3728      	adds	r7, #40	; 0x28
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20000218 	.word	0x20000218

08009944 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f023 0301 	bic.w	r3, r3, #1
 8009954:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800995e:	2300      	movs	r3, #0
 8009960:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009962:	f3ef 8305 	mrs	r3, IPSR
 8009966:	613b      	str	r3, [r7, #16]
  return(result);
 8009968:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10f      	bne.n	800998e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800996e:	f3ef 8310 	mrs	r3, PRIMASK
 8009972:	60fb      	str	r3, [r7, #12]
  return(result);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800997a:	f3ef 8311 	mrs	r3, BASEPRI
 800997e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d007      	beq.n	8009996 <osMutexAcquire+0x52>
 8009986:	4b1d      	ldr	r3, [pc, #116]	; (80099fc <osMutexAcquire+0xb8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b02      	cmp	r3, #2
 800998c:	d103      	bne.n	8009996 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800998e:	f06f 0305 	mvn.w	r3, #5
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	e02c      	b.n	80099f0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d103      	bne.n	80099a4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800999c:	f06f 0303 	mvn.w	r3, #3
 80099a0:	61fb      	str	r3, [r7, #28]
 80099a2:	e025      	b.n	80099f0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d011      	beq.n	80099ce <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	69b8      	ldr	r0, [r7, #24]
 80099ae:	f000 fc88 	bl	800a2c2 <xQueueTakeMutexRecursive>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d01b      	beq.n	80099f0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80099be:	f06f 0301 	mvn.w	r3, #1
 80099c2:	61fb      	str	r3, [r7, #28]
 80099c4:	e014      	b.n	80099f0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80099c6:	f06f 0302 	mvn.w	r3, #2
 80099ca:	61fb      	str	r3, [r7, #28]
 80099cc:	e010      	b.n	80099f0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	69b8      	ldr	r0, [r7, #24]
 80099d2:	f000 ff15 	bl	800a800 <xQueueSemaphoreTake>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d009      	beq.n	80099f0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80099e2:	f06f 0301 	mvn.w	r3, #1
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	e002      	b.n	80099f0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80099ea:	f06f 0302 	mvn.w	r3, #2
 80099ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80099f0:	69fb      	ldr	r3, [r7, #28]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3720      	adds	r7, #32
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20000218 	.word	0x20000218

08009a00 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f023 0301 	bic.w	r3, r3, #1
 8009a0e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a1c:	f3ef 8305 	mrs	r3, IPSR
 8009a20:	613b      	str	r3, [r7, #16]
  return(result);
 8009a22:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10f      	bne.n	8009a48 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a28:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d105      	bne.n	8009a40 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a34:	f3ef 8311 	mrs	r3, BASEPRI
 8009a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <osMutexRelease+0x50>
 8009a40:	4b16      	ldr	r3, [pc, #88]	; (8009a9c <osMutexRelease+0x9c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d103      	bne.n	8009a50 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009a48:	f06f 0305 	mvn.w	r3, #5
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	e01f      	b.n	8009a90 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009a56:	f06f 0303 	mvn.w	r3, #3
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e018      	b.n	8009a90 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d009      	beq.n	8009a78 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009a64:	69b8      	ldr	r0, [r7, #24]
 8009a66:	f000 fbf9 	bl	800a25c <xQueueGiveMutexRecursive>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d00f      	beq.n	8009a90 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009a70:	f06f 0302 	mvn.w	r3, #2
 8009a74:	61fb      	str	r3, [r7, #28]
 8009a76:	e00b      	b.n	8009a90 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	69b8      	ldr	r0, [r7, #24]
 8009a80:	f000 fc54 	bl	800a32c <xQueueGenericSend>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d002      	beq.n	8009a90 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009a8a:	f06f 0302 	mvn.w	r3, #2
 8009a8e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009a90:	69fb      	ldr	r3, [r7, #28]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3720      	adds	r7, #32
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000218 	.word	0x20000218

08009aa0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08c      	sub	sp, #48	; 0x30
 8009aa4:	af02      	add	r7, sp, #8
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ab0:	f3ef 8305 	mrs	r3, IPSR
 8009ab4:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ab6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d170      	bne.n	8009b9e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009abc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d105      	bne.n	8009ad4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8009acc:	613b      	str	r3, [r7, #16]
  return(result);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <osMessageQueueNew+0x3c>
 8009ad4:	4b34      	ldr	r3, [pc, #208]	; (8009ba8 <osMessageQueueNew+0x108>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d060      	beq.n	8009b9e <osMessageQueueNew+0xfe>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d05d      	beq.n	8009b9e <osMessageQueueNew+0xfe>
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d05a      	beq.n	8009b9e <osMessageQueueNew+0xfe>
    mem = -1;
 8009ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8009aec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d029      	beq.n	8009b48 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d012      	beq.n	8009b22 <osMessageQueueNew+0x82>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	2b4f      	cmp	r3, #79	; 0x4f
 8009b02:	d90e      	bls.n	8009b22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	695a      	ldr	r2, [r3, #20]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68b9      	ldr	r1, [r7, #8]
 8009b14:	fb01 f303 	mul.w	r3, r1, r3
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d302      	bcc.n	8009b22 <osMessageQueueNew+0x82>
        mem = 1;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	623b      	str	r3, [r7, #32]
 8009b20:	e014      	b.n	8009b4c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d110      	bne.n	8009b4c <osMessageQueueNew+0xac>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10c      	bne.n	8009b4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d108      	bne.n	8009b4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d104      	bne.n	8009b4c <osMessageQueueNew+0xac>
          mem = 0;
 8009b42:	2300      	movs	r3, #0
 8009b44:	623b      	str	r3, [r7, #32]
 8009b46:	e001      	b.n	8009b4c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d10c      	bne.n	8009b6c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691a      	ldr	r2, [r3, #16]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6899      	ldr	r1, [r3, #8]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 fa58 	bl	800a018 <xQueueGenericCreateStatic>
 8009b68:	6278      	str	r0, [r7, #36]	; 0x24
 8009b6a:	e008      	b.n	8009b7e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d105      	bne.n	8009b7e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009b72:	2200      	movs	r2, #0
 8009b74:	68b9      	ldr	r1, [r7, #8]
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 fac1 	bl	800a0fe <xQueueGenericCreate>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00c      	beq.n	8009b9e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <osMessageQueueNew+0xf2>
        name = attr->name;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	e001      	b.n	8009b96 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b96:	69f9      	ldr	r1, [r7, #28]
 8009b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b9a:	f001 f8df 	bl	800ad5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3728      	adds	r7, #40	; 0x28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000218 	.word	0x20000218

08009bac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08a      	sub	sp, #40	; 0x28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bc4:	f3ef 8305 	mrs	r3, IPSR
 8009bc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bca:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10f      	bne.n	8009bf0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d105      	bne.n	8009be8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8009be0:	617b      	str	r3, [r7, #20]
  return(result);
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02c      	beq.n	8009c42 <osMessageQueuePut+0x96>
 8009be8:	4b28      	ldr	r3, [pc, #160]	; (8009c8c <osMessageQueuePut+0xe0>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d128      	bne.n	8009c42 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <osMessageQueuePut+0x56>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <osMessageQueuePut+0x56>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009c02:	f06f 0303 	mvn.w	r3, #3
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c08:	e039      	b.n	8009c7e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c0e:	f107 0210 	add.w	r2, r7, #16
 8009c12:	2300      	movs	r3, #0
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	6a38      	ldr	r0, [r7, #32]
 8009c18:	f000 fc82 	bl	800a520 <xQueueGenericSendFromISR>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d003      	beq.n	8009c2a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009c22:	f06f 0302 	mvn.w	r3, #2
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c28:	e029      	b.n	8009c7e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d026      	beq.n	8009c7e <osMessageQueuePut+0xd2>
 8009c30:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <osMessageQueuePut+0xe4>)
 8009c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c40:	e01d      	b.n	8009c7e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <osMessageQueuePut+0xa2>
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d103      	bne.n	8009c56 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009c4e:	f06f 0303 	mvn.w	r3, #3
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
 8009c54:	e014      	b.n	8009c80 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c56:	2300      	movs	r3, #0
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	6a38      	ldr	r0, [r7, #32]
 8009c5e:	f000 fb65 	bl	800a32c <xQueueGenericSend>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d00b      	beq.n	8009c80 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009c6e:	f06f 0301 	mvn.w	r3, #1
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
 8009c74:	e004      	b.n	8009c80 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009c76:	f06f 0302 	mvn.w	r3, #2
 8009c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c7c:	e000      	b.n	8009c80 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c7e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3728      	adds	r7, #40	; 0x28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000218 	.word	0x20000218
 8009c90:	e000ed04 	.word	0xe000ed04

08009c94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08a      	sub	sp, #40	; 0x28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009caa:	f3ef 8305 	mrs	r3, IPSR
 8009cae:	61fb      	str	r3, [r7, #28]
  return(result);
 8009cb0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10f      	bne.n	8009cd6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cba:	61bb      	str	r3, [r7, #24]
  return(result);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d105      	bne.n	8009cce <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8009cc6:	617b      	str	r3, [r7, #20]
  return(result);
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d02c      	beq.n	8009d28 <osMessageQueueGet+0x94>
 8009cce:	4b28      	ldr	r3, [pc, #160]	; (8009d70 <osMessageQueueGet+0xdc>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d128      	bne.n	8009d28 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <osMessageQueueGet+0x54>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <osMessageQueueGet+0x54>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d003      	beq.n	8009cf0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009ce8:	f06f 0303 	mvn.w	r3, #3
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cee:	e038      	b.n	8009d62 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009cf4:	f107 0310 	add.w	r3, r7, #16
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	6a38      	ldr	r0, [r7, #32]
 8009cfe:	f000 fe87 	bl	800aa10 <xQueueReceiveFromISR>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d003      	beq.n	8009d10 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009d08:	f06f 0302 	mvn.w	r3, #2
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d0e:	e028      	b.n	8009d62 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d025      	beq.n	8009d62 <osMessageQueueGet+0xce>
 8009d16:	4b17      	ldr	r3, [pc, #92]	; (8009d74 <osMessageQueueGet+0xe0>)
 8009d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d26:	e01c      	b.n	8009d62 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <osMessageQueueGet+0xa0>
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009d34:	f06f 0303 	mvn.w	r3, #3
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3a:	e013      	b.n	8009d64 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	6a38      	ldr	r0, [r7, #32]
 8009d42:	f000 fc81 	bl	800a648 <xQueueReceive>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d00b      	beq.n	8009d64 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009d52:	f06f 0301 	mvn.w	r3, #1
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
 8009d58:	e004      	b.n	8009d64 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009d5a:	f06f 0302 	mvn.w	r3, #2
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d60:	e000      	b.n	8009d64 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3728      	adds	r7, #40	; 0x28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000218 	.word	0x20000218
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	4a06      	ldr	r2, [pc, #24]	; (8009da8 <vApplicationGetIdleTaskMemory+0x30>)
 8009d8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2280      	movs	r2, #128	; 0x80
 8009d94:	601a      	str	r2, [r3, #0]
}
 8009d96:	bf00      	nop
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	2000021c 	.word	0x2000021c
 8009da8:	20000278 	.word	0x20000278

08009dac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4a07      	ldr	r2, [pc, #28]	; (8009dd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009dbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	4a06      	ldr	r2, [pc, #24]	; (8009ddc <vApplicationGetTimerTaskMemory+0x30>)
 8009dc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dca:	601a      	str	r2, [r3, #0]
}
 8009dcc:	bf00      	nop
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	20000478 	.word	0x20000478
 8009ddc:	200004d4 	.word	0x200004d4

08009de0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f103 0208 	add.w	r2, r3, #8
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295
 8009df8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f103 0208 	add.w	r2, r3, #8
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f103 0208 	add.w	r2, r3, #8
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e2e:	bf00      	nop
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e98:	d103      	bne.n	8009ea2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	e00c      	b.n	8009ebc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e002      	b.n	8009eb0 <vListInsert+0x2e>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d2f6      	bcs.n	8009eaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6892      	ldr	r2, [r2, #8]
 8009f0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6852      	ldr	r2, [r2, #4]
 8009f14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d103      	bne.n	8009f28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	1e5a      	subs	r2, r3, #1
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60bb      	str	r3, [r7, #8]
 8009f6e:	e7fe      	b.n	8009f6e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009f70:	f002 fc3c 	bl	800c7ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	441a      	add	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	68f9      	ldr	r1, [r7, #12]
 8009fa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fa6:	fb01 f303 	mul.w	r3, r1, r3
 8009faa:	441a      	add	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	22ff      	movs	r2, #255	; 0xff
 8009fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	22ff      	movs	r2, #255	; 0xff
 8009fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d114      	bne.n	8009ff0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d01a      	beq.n	800a004 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3310      	adds	r3, #16
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f001 fbfc 	bl	800b7d0 <xTaskRemoveFromEventList>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d012      	beq.n	800a004 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fde:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <xQueueGenericReset+0xcc>)
 8009fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	e009      	b.n	800a004 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3310      	adds	r3, #16
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff fef3 	bl	8009de0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3324      	adds	r3, #36	; 0x24
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff feee 	bl	8009de0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a004:	f002 fc20 	bl	800c848 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a008:	2301      	movs	r3, #1
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08e      	sub	sp, #56	; 0x38
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d109      	bne.n	800a040 <xQueueGenericCreateStatic+0x28>
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a03e:	e7fe      	b.n	800a03e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d109      	bne.n	800a05a <xQueueGenericCreateStatic+0x42>
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
 800a058:	e7fe      	b.n	800a058 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <xQueueGenericCreateStatic+0x4e>
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <xQueueGenericCreateStatic+0x52>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <xQueueGenericCreateStatic+0x54>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <xQueueGenericCreateStatic+0x6c>
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	623b      	str	r3, [r7, #32]
 800a082:	e7fe      	b.n	800a082 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d102      	bne.n	800a090 <xQueueGenericCreateStatic+0x78>
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <xQueueGenericCreateStatic+0x7c>
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <xQueueGenericCreateStatic+0x7e>
 800a094:	2300      	movs	r3, #0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <xQueueGenericCreateStatic+0x96>
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	61fb      	str	r3, [r7, #28]
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0ae:	2350      	movs	r3, #80	; 0x50
 800a0b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b50      	cmp	r3, #80	; 0x50
 800a0b6:	d009      	beq.n	800a0cc <xQueueGenericCreateStatic+0xb4>
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	e7fe      	b.n	800a0ca <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00d      	beq.n	800a0f4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f844 	bl	800a17c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3730      	adds	r7, #48	; 0x30
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b08a      	sub	sp, #40	; 0x28
 800a102:	af02      	add	r7, sp, #8
 800a104:	60f8      	str	r0, [r7, #12]
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	4613      	mov	r3, r2
 800a10a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <xQueueGenericCreate+0x28>
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	613b      	str	r3, [r7, #16]
 800a124:	e7fe      	b.n	800a124 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	e004      	b.n	800a13c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	fb02 f303 	mul.w	r3, r2, r3
 800a13a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	3350      	adds	r3, #80	; 0x50
 800a140:	4618      	mov	r0, r3
 800a142:	f002 fc6d 	bl	800ca20 <pvPortMalloc>
 800a146:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d011      	beq.n	800a172 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	3350      	adds	r3, #80	; 0x50
 800a156:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a160:	79fa      	ldrb	r2, [r7, #7]
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	4613      	mov	r3, r2
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	68b9      	ldr	r1, [r7, #8]
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f805 	bl	800a17c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a172:	69bb      	ldr	r3, [r7, #24]
	}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d103      	bne.n	800a198 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	e002      	b.n	800a19e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	69b8      	ldr	r0, [r7, #24]
 800a1ae:	f7ff fecb 	bl	8009f48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00e      	beq.n	800a1ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f89f 	bl	800a32c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1ee:	bf00      	nop
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a200:	2301      	movs	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	2300      	movs	r3, #0
 800a206:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	461a      	mov	r2, r3
 800a20c:	6939      	ldr	r1, [r7, #16]
 800a20e:	6978      	ldr	r0, [r7, #20]
 800a210:	f7ff ff75 	bl	800a0fe <xQueueGenericCreate>
 800a214:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7ff ffd3 	bl	800a1c2 <prvInitialiseMutex>

		return xNewQueue;
 800a21c:	68fb      	ldr	r3, [r7, #12]
	}
 800a21e:	4618      	mov	r0, r3
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a226:	b580      	push	{r7, lr}
 800a228:	b088      	sub	sp, #32
 800a22a:	af02      	add	r7, sp, #8
 800a22c:	4603      	mov	r3, r0
 800a22e:	6039      	str	r1, [r7, #0]
 800a230:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a232:	2301      	movs	r3, #1
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	2300      	movs	r3, #0
 800a238:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2200      	movs	r2, #0
 800a242:	6939      	ldr	r1, [r7, #16]
 800a244:	6978      	ldr	r0, [r7, #20]
 800a246:	f7ff fee7 	bl	800a018 <xQueueGenericCreateStatic>
 800a24a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7ff ffb8 	bl	800a1c2 <prvInitialiseMutex>

		return xNewQueue;
 800a252:	68fb      	ldr	r3, [r7, #12]
	}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a25c:	b590      	push	{r4, r7, lr}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <xQueueGiveMutexRecursive+0x26>
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	e7fe      	b.n	800a280 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	689c      	ldr	r4, [r3, #8]
 800a286:	f001 fc59 	bl	800bb3c <xTaskGetCurrentTaskHandle>
 800a28a:	4603      	mov	r3, r0
 800a28c:	429c      	cmp	r4, r3
 800a28e:	d111      	bne.n	800a2b4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d105      	bne.n	800a2ae <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6938      	ldr	r0, [r7, #16]
 800a2aa:	f000 f83f 	bl	800a32c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	617b      	str	r3, [r7, #20]
 800a2b2:	e001      	b.n	800a2b8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a2b8:	697b      	ldr	r3, [r7, #20]
	}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd90      	pop	{r4, r7, pc}

0800a2c2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a2c2:	b590      	push	{r4, r7, lr}
 800a2c4:	b087      	sub	sp, #28
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d109      	bne.n	800a2ea <xQueueTakeMutexRecursive+0x28>
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	60fb      	str	r3, [r7, #12]
 800a2e8:	e7fe      	b.n	800a2e8 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	689c      	ldr	r4, [r3, #8]
 800a2ee:	f001 fc25 	bl	800bb3c <xTaskGetCurrentTaskHandle>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	429c      	cmp	r4, r3
 800a2f6:	d107      	bne.n	800a308 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a302:	2301      	movs	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	e00c      	b.n	800a322 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6938      	ldr	r0, [r7, #16]
 800a30c:	f000 fa78 	bl	800a800 <xQueueSemaphoreTake>
 800a310:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d004      	beq.n	800a322 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a322:	697b      	ldr	r3, [r7, #20]
	}
 800a324:	4618      	mov	r0, r3
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd90      	pop	{r4, r7, pc}

0800a32c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08e      	sub	sp, #56	; 0x38
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a33a:	2300      	movs	r3, #0
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	2b00      	cmp	r3, #0
 800a346:	d109      	bne.n	800a35c <xQueueGenericSend+0x30>
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	62bb      	str	r3, [r7, #40]	; 0x28
 800a35a:	e7fe      	b.n	800a35a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d103      	bne.n	800a36a <xQueueGenericSend+0x3e>
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <xQueueGenericSend+0x42>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <xQueueGenericSend+0x44>
 800a36e:	2300      	movs	r3, #0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <xQueueGenericSend+0x5c>
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
 800a386:	e7fe      	b.n	800a386 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d103      	bne.n	800a396 <xQueueGenericSend+0x6a>
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a392:	2b01      	cmp	r3, #1
 800a394:	d101      	bne.n	800a39a <xQueueGenericSend+0x6e>
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <xQueueGenericSend+0x70>
 800a39a:	2300      	movs	r3, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d109      	bne.n	800a3b4 <xQueueGenericSend+0x88>
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	623b      	str	r3, [r7, #32]
 800a3b2:	e7fe      	b.n	800a3b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3b4:	f001 fbd2 	bl	800bb5c <xTaskGetSchedulerState>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d102      	bne.n	800a3c4 <xQueueGenericSend+0x98>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <xQueueGenericSend+0x9c>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e000      	b.n	800a3ca <xQueueGenericSend+0x9e>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d109      	bne.n	800a3e2 <xQueueGenericSend+0xb6>
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	61fb      	str	r3, [r7, #28]
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3e2:	f002 fa03 	bl	800c7ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d302      	bcc.n	800a3f8 <xQueueGenericSend+0xcc>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d129      	bne.n	800a44c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3fe:	f000 fb9c 	bl	800ab3a <prvCopyDataToQueue>
 800a402:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d010      	beq.n	800a42e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	3324      	adds	r3, #36	; 0x24
 800a410:	4618      	mov	r0, r3
 800a412:	f001 f9dd 	bl	800b7d0 <xTaskRemoveFromEventList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d013      	beq.n	800a444 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a41c:	4b3f      	ldr	r3, [pc, #252]	; (800a51c <xQueueGenericSend+0x1f0>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	e00a      	b.n	800a444 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d007      	beq.n	800a444 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a434:	4b39      	ldr	r3, [pc, #228]	; (800a51c <xQueueGenericSend+0x1f0>)
 800a436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a444:	f002 fa00 	bl	800c848 <vPortExitCritical>
				return pdPASS;
 800a448:	2301      	movs	r3, #1
 800a44a:	e063      	b.n	800a514 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a452:	f002 f9f9 	bl	800c848 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a456:	2300      	movs	r3, #0
 800a458:	e05c      	b.n	800a514 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d106      	bne.n	800a46e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a460:	f107 0314 	add.w	r3, r7, #20
 800a464:	4618      	mov	r0, r3
 800a466:	f001 fa15 	bl	800b894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a46e:	f002 f9eb 	bl	800c848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a472:	f000 ff7f 	bl	800b374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a476:	f002 f9b9 	bl	800c7ec <vPortEnterCritical>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a480:	b25b      	sxtb	r3, r3
 800a482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a486:	d103      	bne.n	800a490 <xQueueGenericSend+0x164>
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a496:	b25b      	sxtb	r3, r3
 800a498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49c:	d103      	bne.n	800a4a6 <xQueueGenericSend+0x17a>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4a6:	f002 f9cf 	bl	800c848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4aa:	1d3a      	adds	r2, r7, #4
 800a4ac:	f107 0314 	add.w	r3, r7, #20
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f001 fa04 	bl	800b8c0 <xTaskCheckForTimeOut>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d124      	bne.n	800a508 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4c0:	f000 fc33 	bl	800ad2a <prvIsQueueFull>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d018      	beq.n	800a4fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	3310      	adds	r3, #16
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f001 f92e 	bl	800b734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4da:	f000 fbbe 	bl	800ac5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4de:	f000 ff57 	bl	800b390 <xTaskResumeAll>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f47f af7c 	bne.w	800a3e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a4ea:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <xQueueGenericSend+0x1f0>)
 800a4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	e772      	b.n	800a3e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4fe:	f000 fbac 	bl	800ac5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a502:	f000 ff45 	bl	800b390 <xTaskResumeAll>
 800a506:	e76c      	b.n	800a3e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a50a:	f000 fba6 	bl	800ac5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a50e:	f000 ff3f 	bl	800b390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a512:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a514:	4618      	mov	r0, r3
 800a516:	3738      	adds	r7, #56	; 0x38
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	e000ed04 	.word	0xe000ed04

0800a520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08e      	sub	sp, #56	; 0x38
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <xQueueGenericSendFromISR+0x2c>
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
 800a54a:	e7fe      	b.n	800a54a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d103      	bne.n	800a55a <xQueueGenericSendFromISR+0x3a>
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <xQueueGenericSendFromISR+0x3e>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e000      	b.n	800a560 <xQueueGenericSendFromISR+0x40>
 800a55e:	2300      	movs	r3, #0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d109      	bne.n	800a578 <xQueueGenericSendFromISR+0x58>
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	623b      	str	r3, [r7, #32]
 800a576:	e7fe      	b.n	800a576 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d103      	bne.n	800a586 <xQueueGenericSendFromISR+0x66>
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a582:	2b01      	cmp	r3, #1
 800a584:	d101      	bne.n	800a58a <xQueueGenericSendFromISR+0x6a>
 800a586:	2301      	movs	r3, #1
 800a588:	e000      	b.n	800a58c <xQueueGenericSendFromISR+0x6c>
 800a58a:	2300      	movs	r3, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d109      	bne.n	800a5a4 <xQueueGenericSendFromISR+0x84>
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	61fb      	str	r3, [r7, #28]
 800a5a2:	e7fe      	b.n	800a5a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5a4:	f002 f9fe 	bl	800c9a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61ba      	str	r2, [r7, #24]
 800a5be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d302      	bcc.n	800a5d6 <xQueueGenericSendFromISR+0xb6>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d12c      	bne.n	800a630 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	68b9      	ldr	r1, [r7, #8]
 800a5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5e6:	f000 faa8 	bl	800ab3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d112      	bne.n	800a61a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d016      	beq.n	800a62a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	3324      	adds	r3, #36	; 0x24
 800a600:	4618      	mov	r0, r3
 800a602:	f001 f8e5 	bl	800b7d0 <xTaskRemoveFromEventList>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00e      	beq.n	800a62a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00b      	beq.n	800a62a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e007      	b.n	800a62a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a61a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a61e:	3301      	adds	r3, #1
 800a620:	b2db      	uxtb	r3, r3
 800a622:	b25a      	sxtb	r2, r3
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a62a:	2301      	movs	r3, #1
 800a62c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a62e:	e001      	b.n	800a634 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a630:	2300      	movs	r3, #0
 800a632:	637b      	str	r3, [r7, #52]	; 0x34
 800a634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a636:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a640:	4618      	mov	r0, r3
 800a642:	3738      	adds	r7, #56	; 0x38
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08c      	sub	sp, #48	; 0x30
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a654:	2300      	movs	r3, #0
 800a656:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d109      	bne.n	800a676 <xQueueReceive+0x2e>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	623b      	str	r3, [r7, #32]
 800a674:	e7fe      	b.n	800a674 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <xQueueReceive+0x3c>
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a680:	2b00      	cmp	r3, #0
 800a682:	d101      	bne.n	800a688 <xQueueReceive+0x40>
 800a684:	2301      	movs	r3, #1
 800a686:	e000      	b.n	800a68a <xQueueReceive+0x42>
 800a688:	2300      	movs	r3, #0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d109      	bne.n	800a6a2 <xQueueReceive+0x5a>
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	e7fe      	b.n	800a6a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6a2:	f001 fa5b 	bl	800bb5c <xTaskGetSchedulerState>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <xQueueReceive+0x6a>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <xQueueReceive+0x6e>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e000      	b.n	800a6b8 <xQueueReceive+0x70>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d109      	bne.n	800a6d0 <xQueueReceive+0x88>
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	61bb      	str	r3, [r7, #24]
 800a6ce:	e7fe      	b.n	800a6ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6d0:	f002 f88c 	bl	800c7ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01f      	beq.n	800a720 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6e0:	68b9      	ldr	r1, [r7, #8]
 800a6e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e4:	f000 fa93 	bl	800ac0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	1e5a      	subs	r2, r3, #1
 800a6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00f      	beq.n	800a718 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	3310      	adds	r3, #16
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f867 	bl	800b7d0 <xTaskRemoveFromEventList>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d007      	beq.n	800a718 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a708:	4b3c      	ldr	r3, [pc, #240]	; (800a7fc <xQueueReceive+0x1b4>)
 800a70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a718:	f002 f896 	bl	800c848 <vPortExitCritical>
				return pdPASS;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e069      	b.n	800a7f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d103      	bne.n	800a72e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a726:	f002 f88f 	bl	800c848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a72a:	2300      	movs	r3, #0
 800a72c:	e062      	b.n	800a7f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d106      	bne.n	800a742 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a734:	f107 0310 	add.w	r3, r7, #16
 800a738:	4618      	mov	r0, r3
 800a73a:	f001 f8ab 	bl	800b894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a73e:	2301      	movs	r3, #1
 800a740:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a742:	f002 f881 	bl	800c848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a746:	f000 fe15 	bl	800b374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a74a:	f002 f84f 	bl	800c7ec <vPortEnterCritical>
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a754:	b25b      	sxtb	r3, r3
 800a756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75a:	d103      	bne.n	800a764 <xQueueReceive+0x11c>
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a76a:	b25b      	sxtb	r3, r3
 800a76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a770:	d103      	bne.n	800a77a <xQueueReceive+0x132>
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a77a:	f002 f865 	bl	800c848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a77e:	1d3a      	adds	r2, r7, #4
 800a780:	f107 0310 	add.w	r3, r7, #16
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f001 f89a 	bl	800b8c0 <xTaskCheckForTimeOut>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d123      	bne.n	800a7da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a794:	f000 fab3 	bl	800acfe <prvIsQueueEmpty>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d017      	beq.n	800a7ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a0:	3324      	adds	r3, #36	; 0x24
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 ffc4 	bl	800b734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ae:	f000 fa54 	bl	800ac5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7b2:	f000 fded 	bl	800b390 <xTaskResumeAll>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d189      	bne.n	800a6d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <xQueueReceive+0x1b4>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	e780      	b.n	800a6d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d0:	f000 fa43 	bl	800ac5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7d4:	f000 fddc 	bl	800b390 <xTaskResumeAll>
 800a7d8:	e77a      	b.n	800a6d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7dc:	f000 fa3d 	bl	800ac5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7e0:	f000 fdd6 	bl	800b390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e6:	f000 fa8a 	bl	800acfe <prvIsQueueEmpty>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f43f af6f 	beq.w	800a6d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3730      	adds	r7, #48	; 0x30
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08e      	sub	sp, #56	; 0x38
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a812:	2300      	movs	r3, #0
 800a814:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d109      	bne.n	800a830 <xQueueSemaphoreTake+0x30>
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	623b      	str	r3, [r7, #32]
 800a82e:	e7fe      	b.n	800a82e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	d009      	beq.n	800a84c <xQueueSemaphoreTake+0x4c>
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	61fb      	str	r3, [r7, #28]
 800a84a:	e7fe      	b.n	800a84a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a84c:	f001 f986 	bl	800bb5c <xTaskGetSchedulerState>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d102      	bne.n	800a85c <xQueueSemaphoreTake+0x5c>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <xQueueSemaphoreTake+0x60>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <xQueueSemaphoreTake+0x62>
 800a860:	2300      	movs	r3, #0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <xQueueSemaphoreTake+0x7a>
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	61bb      	str	r3, [r7, #24]
 800a878:	e7fe      	b.n	800a878 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a87a:	f001 ffb7 	bl	800c7ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	2b00      	cmp	r3, #0
 800a888:	d024      	beq.n	800a8d4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	1e5a      	subs	r2, r3, #1
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d104      	bne.n	800a8a4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a89a:	f001 fad1 	bl	800be40 <pvTaskIncrementMutexHeldCount>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00f      	beq.n	800a8cc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ae:	3310      	adds	r3, #16
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 ff8d 	bl	800b7d0 <xTaskRemoveFromEventList>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d007      	beq.n	800a8cc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8bc:	4b53      	ldr	r3, [pc, #332]	; (800aa0c <xQueueSemaphoreTake+0x20c>)
 800a8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8cc:	f001 ffbc 	bl	800c848 <vPortExitCritical>
				return pdPASS;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e096      	b.n	800aa02 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d110      	bne.n	800a8fc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d009      	beq.n	800a8f4 <xQueueSemaphoreTake+0xf4>
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	e7fe      	b.n	800a8f2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8f4:	f001 ffa8 	bl	800c848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e082      	b.n	800aa02 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	4618      	mov	r0, r3
 800a908:	f000 ffc4 	bl	800b894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a90c:	2301      	movs	r3, #1
 800a90e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a910:	f001 ff9a 	bl	800c848 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a914:	f000 fd2e 	bl	800b374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a918:	f001 ff68 	bl	800c7ec <vPortEnterCritical>
 800a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a922:	b25b      	sxtb	r3, r3
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d103      	bne.n	800a932 <xQueueSemaphoreTake+0x132>
 800a92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93e:	d103      	bne.n	800a948 <xQueueSemaphoreTake+0x148>
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a948:	f001 ff7e 	bl	800c848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a94c:	463a      	mov	r2, r7
 800a94e:	f107 030c 	add.w	r3, r7, #12
 800a952:	4611      	mov	r1, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f000 ffb3 	bl	800b8c0 <xTaskCheckForTimeOut>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d132      	bne.n	800a9c6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a962:	f000 f9cc 	bl	800acfe <prvIsQueueEmpty>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d026      	beq.n	800a9ba <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a974:	f001 ff3a 	bl	800c7ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 f90b 	bl	800bb98 <xTaskPriorityInherit>
 800a982:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a984:	f001 ff60 	bl	800c848 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	3324      	adds	r3, #36	; 0x24
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	4611      	mov	r1, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f000 fecf 	bl	800b734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a998:	f000 f95f 	bl	800ac5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a99c:	f000 fcf8 	bl	800b390 <xTaskResumeAll>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f47f af69 	bne.w	800a87a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a9a8:	4b18      	ldr	r3, [pc, #96]	; (800aa0c <xQueueSemaphoreTake+0x20c>)
 800a9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	e75f      	b.n	800a87a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a9ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9bc:	f000 f94d 	bl	800ac5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9c0:	f000 fce6 	bl	800b390 <xTaskResumeAll>
 800a9c4:	e759      	b.n	800a87a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9c8:	f000 f947 	bl	800ac5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9cc:	f000 fce0 	bl	800b390 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9d2:	f000 f994 	bl	800acfe <prvIsQueueEmpty>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f43f af4e 	beq.w	800a87a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00d      	beq.n	800aa00 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a9e4:	f001 ff02 	bl	800c7ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ea:	f000 f88e 	bl	800ab0a <prvGetDisinheritPriorityAfterTimeout>
 800a9ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f001 f9a2 	bl	800bd40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9fc:	f001 ff24 	bl	800c848 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3738      	adds	r7, #56	; 0x38
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08e      	sub	sp, #56	; 0x38
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d109      	bne.n	800aa3a <xQueueReceiveFromISR+0x2a>
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	623b      	str	r3, [r7, #32]
 800aa38:	e7fe      	b.n	800aa38 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d103      	bne.n	800aa48 <xQueueReceiveFromISR+0x38>
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <xQueueReceiveFromISR+0x3c>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e000      	b.n	800aa4e <xQueueReceiveFromISR+0x3e>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d109      	bne.n	800aa66 <xQueueReceiveFromISR+0x56>
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	61fb      	str	r3, [r7, #28]
 800aa64:	e7fe      	b.n	800aa64 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa66:	f001 ff9d 	bl	800c9a4 <vPortValidateInterruptPriority>
	__asm volatile
 800aa6a:	f3ef 8211 	mrs	r2, BASEPRI
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	61ba      	str	r2, [r7, #24]
 800aa80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d02f      	beq.n	800aaf2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa9c:	68b9      	ldr	r1, [r7, #8]
 800aa9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaa0:	f000 f8b5 	bl	800ac0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	1e5a      	subs	r2, r3, #1
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aaac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab4:	d112      	bne.n	800aadc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d016      	beq.n	800aaec <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	3310      	adds	r3, #16
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fe84 	bl	800b7d0 <xTaskRemoveFromEventList>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00e      	beq.n	800aaec <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00b      	beq.n	800aaec <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e007      	b.n	800aaec <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aadc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aae0:	3301      	adds	r3, #1
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	b25a      	sxtb	r2, r3
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aaec:	2301      	movs	r3, #1
 800aaee:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf0:	e001      	b.n	800aaf6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3738      	adds	r7, #56	; 0x38
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d006      	beq.n	800ab28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e001      	b.n	800ab2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
	}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b086      	sub	sp, #24
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10d      	bne.n	800ab74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d14d      	bne.n	800abfc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 f87f 	bl	800bc68 <xTaskPriorityDisinherit>
 800ab6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	609a      	str	r2, [r3, #8]
 800ab72:	e043      	b.n	800abfc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d119      	bne.n	800abae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6858      	ldr	r0, [r3, #4]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab82:	461a      	mov	r2, r3
 800ab84:	68b9      	ldr	r1, [r7, #8]
 800ab86:	f002 fec5 	bl	800d914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	441a      	add	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d32b      	bcc.n	800abfc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	605a      	str	r2, [r3, #4]
 800abac:	e026      	b.n	800abfc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68d8      	ldr	r0, [r3, #12]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb6:	461a      	mov	r2, r3
 800abb8:	68b9      	ldr	r1, [r7, #8]
 800abba:	f002 feab 	bl	800d914 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	425b      	negs	r3, r3
 800abc8:	441a      	add	r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d207      	bcs.n	800abea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	689a      	ldr	r2, [r3, #8]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	425b      	negs	r3, r3
 800abe4:	441a      	add	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d105      	bne.n	800abfc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac04:	697b      	ldr	r3, [r7, #20]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d018      	beq.n	800ac52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	441a      	add	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d303      	bcc.n	800ac42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68d9      	ldr	r1, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	6838      	ldr	r0, [r7, #0]
 800ac4e:	f002 fe61 	bl	800d914 <memcpy>
	}
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac62:	f001 fdc3 	bl	800c7ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac6e:	e011      	b.n	800ac94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d012      	beq.n	800ac9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3324      	adds	r3, #36	; 0x24
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 fda7 	bl	800b7d0 <xTaskRemoveFromEventList>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac88:	f000 fe7a 	bl	800b980 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dce9      	bgt.n	800ac70 <prvUnlockQueue+0x16>
 800ac9c:	e000      	b.n	800aca0 <prvUnlockQueue+0x46>
					break;
 800ac9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	22ff      	movs	r2, #255	; 0xff
 800aca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aca8:	f001 fdce 	bl	800c848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acac:	f001 fd9e 	bl	800c7ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acb8:	e011      	b.n	800acde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d012      	beq.n	800ace8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3310      	adds	r3, #16
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fd82 	bl	800b7d0 <xTaskRemoveFromEventList>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acd2:	f000 fe55 	bl	800b980 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	3b01      	subs	r3, #1
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dce9      	bgt.n	800acba <prvUnlockQueue+0x60>
 800ace6:	e000      	b.n	800acea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ace8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	22ff      	movs	r2, #255	; 0xff
 800acee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800acf2:	f001 fda9 	bl	800c848 <vPortExitCritical>
}
 800acf6:	bf00      	nop
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad06:	f001 fd71 	bl	800c7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad12:	2301      	movs	r3, #1
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	e001      	b.n	800ad1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad1c:	f001 fd94 	bl	800c848 <vPortExitCritical>

	return xReturn;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad32:	f001 fd5b 	bl	800c7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d102      	bne.n	800ad48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad42:	2301      	movs	r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	e001      	b.n	800ad4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad4c:	f001 fd7c 	bl	800c848 <vPortExitCritical>

	return xReturn;
 800ad50:	68fb      	ldr	r3, [r7, #12]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e014      	b.n	800ad96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad6c:	4a0e      	ldr	r2, [pc, #56]	; (800ada8 <vQueueAddToRegistry+0x4c>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10b      	bne.n	800ad90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad78:	490b      	ldr	r1, [pc, #44]	; (800ada8 <vQueueAddToRegistry+0x4c>)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad82:	4a09      	ldr	r2, [pc, #36]	; (800ada8 <vQueueAddToRegistry+0x4c>)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	4413      	add	r3, r2
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad8e:	e005      	b.n	800ad9c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b07      	cmp	r3, #7
 800ad9a:	d9e7      	bls.n	800ad6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad9c:	bf00      	nop
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	2000c0ec 	.word	0x2000c0ec

0800adac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800adbc:	f001 fd16 	bl	800c7ec <vPortEnterCritical>
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adc6:	b25b      	sxtb	r3, r3
 800adc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adcc:	d103      	bne.n	800add6 <vQueueWaitForMessageRestricted+0x2a>
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800addc:	b25b      	sxtb	r3, r3
 800adde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade2:	d103      	bne.n	800adec <vQueueWaitForMessageRestricted+0x40>
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adec:	f001 fd2c 	bl	800c848 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d106      	bne.n	800ae06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3324      	adds	r3, #36	; 0x24
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 fcbb 	bl	800b77c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae06:	6978      	ldr	r0, [r7, #20]
 800ae08:	f7ff ff27 	bl	800ac5a <prvUnlockQueue>
	}
 800ae0c:	bf00      	nop
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08e      	sub	sp, #56	; 0x38
 800ae18:	af04      	add	r7, sp, #16
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d109      	bne.n	800ae3c <xTaskCreateStatic+0x28>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	623b      	str	r3, [r7, #32]
 800ae3a:	e7fe      	b.n	800ae3a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <xTaskCreateStatic+0x42>
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	61fb      	str	r3, [r7, #28]
 800ae54:	e7fe      	b.n	800ae54 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae56:	235c      	movs	r3, #92	; 0x5c
 800ae58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ae5e:	d009      	beq.n	800ae74 <xTaskCreateStatic+0x60>
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	e7fe      	b.n	800ae72 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01e      	beq.n	800aeba <xTaskCreateStatic+0xa6>
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d01b      	beq.n	800aeba <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae8a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae94:	2300      	movs	r3, #0
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 f850 	bl	800af52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aeb4:	f000 f8dc 	bl	800b070 <prvAddNewTaskToReadyList>
 800aeb8:	e001      	b.n	800aebe <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aebe:	697b      	ldr	r3, [r7, #20]
	}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3728      	adds	r7, #40	; 0x28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08c      	sub	sp, #48	; 0x30
 800aecc:	af04      	add	r7, sp, #16
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	4613      	mov	r3, r2
 800aed6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aed8:	88fb      	ldrh	r3, [r7, #6]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 fd9f 	bl	800ca20 <pvPortMalloc>
 800aee2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00e      	beq.n	800af08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aeea:	205c      	movs	r0, #92	; 0x5c
 800aeec:	f001 fd98 	bl	800ca20 <pvPortMalloc>
 800aef0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	631a      	str	r2, [r3, #48]	; 0x30
 800aefe:	e005      	b.n	800af0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af00:	6978      	ldr	r0, [r7, #20]
 800af02:	f001 fe4f 	bl	800cba4 <vPortFree>
 800af06:	e001      	b.n	800af0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d017      	beq.n	800af42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af1a:	88fa      	ldrh	r2, [r7, #6]
 800af1c:	2300      	movs	r3, #0
 800af1e:	9303      	str	r3, [sp, #12]
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	9302      	str	r3, [sp, #8]
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f000 f80e 	bl	800af52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af36:	69f8      	ldr	r0, [r7, #28]
 800af38:	f000 f89a 	bl	800b070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af3c:	2301      	movs	r3, #1
 800af3e:	61bb      	str	r3, [r7, #24]
 800af40:	e002      	b.n	800af48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af42:	f04f 33ff 	mov.w	r3, #4294967295
 800af46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af48:	69bb      	ldr	r3, [r7, #24]
	}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b088      	sub	sp, #32
 800af56:	af00      	add	r7, sp, #0
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	461a      	mov	r2, r3
 800af6a:	21a5      	movs	r1, #165	; 0xa5
 800af6c:	f002 fcdd 	bl	800d92a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af7a:	3b01      	subs	r3, #1
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	2b00      	cmp	r3, #0
 800af92:	d009      	beq.n	800afa8 <prvInitialiseNewTask+0x56>
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	e7fe      	b.n	800afa6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01f      	beq.n	800afee <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afae:	2300      	movs	r3, #0
 800afb0:	61fb      	str	r3, [r7, #28]
 800afb2:	e012      	b.n	800afda <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	7819      	ldrb	r1, [r3, #0]
 800afbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	4413      	add	r3, r2
 800afc2:	3334      	adds	r3, #52	; 0x34
 800afc4:	460a      	mov	r2, r1
 800afc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4413      	add	r3, r2
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d006      	beq.n	800afe2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	3301      	adds	r3, #1
 800afd8:	61fb      	str	r3, [r7, #28]
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	2b0f      	cmp	r3, #15
 800afde:	d9e9      	bls.n	800afb4 <prvInitialiseNewTask+0x62>
 800afe0:	e000      	b.n	800afe4 <prvInitialiseNewTask+0x92>
			{
				break;
 800afe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afec:	e003      	b.n	800aff6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	2b37      	cmp	r3, #55	; 0x37
 800affa:	d901      	bls.n	800b000 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800affc:	2337      	movs	r3, #55	; 0x37
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b00a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	2200      	movs	r2, #0
 800b010:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	3304      	adds	r3, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe ff02 	bl	8009e20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	3318      	adds	r3, #24
 800b020:	4618      	mov	r0, r3
 800b022:	f7fe fefd 	bl	8009e20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b02a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b03a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03e:	2200      	movs	r2, #0
 800b040:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	68f9      	ldr	r1, [r7, #12]
 800b04e:	69b8      	ldr	r0, [r7, #24]
 800b050:	f001 faa4 	bl	800c59c <pxPortInitialiseStack>
 800b054:	4602      	mov	r2, r0
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b066:	bf00      	nop
 800b068:	3720      	adds	r7, #32
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
	...

0800b070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b078:	f001 fbb8 	bl	800c7ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b07c:	4b2d      	ldr	r3, [pc, #180]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3301      	adds	r3, #1
 800b082:	4a2c      	ldr	r2, [pc, #176]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b086:	4b2c      	ldr	r3, [pc, #176]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d109      	bne.n	800b0a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b08e:	4a2a      	ldr	r2, [pc, #168]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b094:	4b27      	ldr	r3, [pc, #156]	; (800b134 <prvAddNewTaskToReadyList+0xc4>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d110      	bne.n	800b0be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b09c:	f000 fc94 	bl	800b9c8 <prvInitialiseTaskLists>
 800b0a0:	e00d      	b.n	800b0be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0a2:	4b26      	ldr	r3, [pc, #152]	; (800b13c <prvAddNewTaskToReadyList+0xcc>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d109      	bne.n	800b0be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0aa:	4b23      	ldr	r3, [pc, #140]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d802      	bhi.n	800b0be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0b8:	4a1f      	ldr	r2, [pc, #124]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0be:	4b20      	ldr	r3, [pc, #128]	; (800b140 <prvAddNewTaskToReadyList+0xd0>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	4a1e      	ldr	r2, [pc, #120]	; (800b140 <prvAddNewTaskToReadyList+0xd0>)
 800b0c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0c8:	4b1d      	ldr	r3, [pc, #116]	; (800b140 <prvAddNewTaskToReadyList+0xd0>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d4:	4b1b      	ldr	r3, [pc, #108]	; (800b144 <prvAddNewTaskToReadyList+0xd4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d903      	bls.n	800b0e4 <prvAddNewTaskToReadyList+0x74>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	4a18      	ldr	r2, [pc, #96]	; (800b144 <prvAddNewTaskToReadyList+0xd4>)
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a15      	ldr	r2, [pc, #84]	; (800b148 <prvAddNewTaskToReadyList+0xd8>)
 800b0f2:	441a      	add	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fe fe9d 	bl	8009e3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b100:	f001 fba2 	bl	800c848 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <prvAddNewTaskToReadyList+0xcc>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b10c:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <prvAddNewTaskToReadyList+0xc8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	429a      	cmp	r2, r3
 800b118:	d207      	bcs.n	800b12a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b11a:	4b0c      	ldr	r3, [pc, #48]	; (800b14c <prvAddNewTaskToReadyList+0xdc>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20000da8 	.word	0x20000da8
 800b138:	200008d4 	.word	0x200008d4
 800b13c:	20000db4 	.word	0x20000db4
 800b140:	20000dc4 	.word	0x20000dc4
 800b144:	20000db0 	.word	0x20000db0
 800b148:	200008d8 	.word	0x200008d8
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	; 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d109      	bne.n	800b178 <vTaskDelayUntil+0x28>
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	e7fe      	b.n	800b176 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d109      	bne.n	800b192 <vTaskDelayUntil+0x42>
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	613b      	str	r3, [r7, #16]
 800b190:	e7fe      	b.n	800b190 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800b192:	4b29      	ldr	r3, [pc, #164]	; (800b238 <vTaskDelayUntil+0xe8>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d009      	beq.n	800b1ae <vTaskDelayUntil+0x5e>
 800b19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	e7fe      	b.n	800b1ac <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800b1ae:	f000 f8e1 	bl	800b374 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b1b2:	4b22      	ldr	r3, [pc, #136]	; (800b23c <vTaskDelayUntil+0xec>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	4413      	add	r3, r2
 800b1c0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6a3a      	ldr	r2, [r7, #32]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d20b      	bcs.n	800b1e4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d211      	bcs.n	800b1fa <vTaskDelayUntil+0xaa>
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d90d      	bls.n	800b1fa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1e2:	e00a      	b.n	800b1fa <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	69fa      	ldr	r2, [r7, #28]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d303      	bcc.n	800b1f6 <vTaskDelayUntil+0xa6>
 800b1ee:	69fa      	ldr	r2, [r7, #28]
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d901      	bls.n	800b1fa <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	69fa      	ldr	r2, [r7, #28]
 800b1fe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	2b00      	cmp	r3, #0
 800b204:	d006      	beq.n	800b214 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b206:	69fa      	ldr	r2, [r7, #28]
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	2100      	movs	r1, #0
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 fe2a 	bl	800be68 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b214:	f000 f8bc 	bl	800b390 <xTaskResumeAll>
 800b218:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d107      	bne.n	800b230 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <vTaskDelayUntil+0xf0>)
 800b222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b230:	bf00      	nop
 800b232:	3728      	adds	r7, #40	; 0x28
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	20000dd0 	.word	0x20000dd0
 800b23c:	20000dac 	.word	0x20000dac
 800b240:	e000ed04 	.word	0xe000ed04

0800b244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d016      	beq.n	800b284 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b256:	4b13      	ldr	r3, [pc, #76]	; (800b2a4 <vTaskDelay+0x60>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d009      	beq.n	800b272 <vTaskDelay+0x2e>
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	60bb      	str	r3, [r7, #8]
 800b270:	e7fe      	b.n	800b270 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b272:	f000 f87f 	bl	800b374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b276:	2100      	movs	r1, #0
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fdf5 	bl	800be68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b27e:	f000 f887 	bl	800b390 <xTaskResumeAll>
 800b282:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d107      	bne.n	800b29a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <vTaskDelay+0x64>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b29a:	bf00      	nop
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000dd0 	.word	0x20000dd0
 800b2a8:	e000ed04 	.word	0xe000ed04

0800b2ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08a      	sub	sp, #40	; 0x28
 800b2b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2ba:	463a      	mov	r2, r7
 800b2bc:	1d39      	adds	r1, r7, #4
 800b2be:	f107 0308 	add.w	r3, r7, #8
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fd58 	bl	8009d78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	9202      	str	r2, [sp, #8]
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	460a      	mov	r2, r1
 800b2da:	4920      	ldr	r1, [pc, #128]	; (800b35c <vTaskStartScheduler+0xb0>)
 800b2dc:	4820      	ldr	r0, [pc, #128]	; (800b360 <vTaskStartScheduler+0xb4>)
 800b2de:	f7ff fd99 	bl	800ae14 <xTaskCreateStatic>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	4b1f      	ldr	r3, [pc, #124]	; (800b364 <vTaskStartScheduler+0xb8>)
 800b2e6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2e8:	4b1e      	ldr	r3, [pc, #120]	; (800b364 <vTaskStartScheduler+0xb8>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	e001      	b.n	800b2fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d102      	bne.n	800b306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b300:	f000 fe06 	bl	800bf10 <xTimerCreateTimerTask>
 800b304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d115      	bne.n	800b338 <vTaskStartScheduler+0x8c>
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b31e:	4b12      	ldr	r3, [pc, #72]	; (800b368 <vTaskStartScheduler+0xbc>)
 800b320:	f04f 32ff 	mov.w	r2, #4294967295
 800b324:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b326:	4b11      	ldr	r3, [pc, #68]	; (800b36c <vTaskStartScheduler+0xc0>)
 800b328:	2201      	movs	r2, #1
 800b32a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b32c:	4b10      	ldr	r3, [pc, #64]	; (800b370 <vTaskStartScheduler+0xc4>)
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b332:	f001 f9bd 	bl	800c6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b336:	e00d      	b.n	800b354 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b33e:	d109      	bne.n	800b354 <vTaskStartScheduler+0xa8>
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	e7fe      	b.n	800b352 <vTaskStartScheduler+0xa6>
}
 800b354:	bf00      	nop
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	0800e264 	.word	0x0800e264
 800b360:	0800b999 	.word	0x0800b999
 800b364:	20000dcc 	.word	0x20000dcc
 800b368:	20000dc8 	.word	0x20000dc8
 800b36c:	20000db4 	.word	0x20000db4
 800b370:	20000dac 	.word	0x20000dac

0800b374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b374:	b480      	push	{r7}
 800b376:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b378:	4b04      	ldr	r3, [pc, #16]	; (800b38c <vTaskSuspendAll+0x18>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3301      	adds	r3, #1
 800b37e:	4a03      	ldr	r2, [pc, #12]	; (800b38c <vTaskSuspendAll+0x18>)
 800b380:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b382:	bf00      	nop
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	20000dd0 	.word	0x20000dd0

0800b390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b39e:	4b41      	ldr	r3, [pc, #260]	; (800b4a4 <xTaskResumeAll+0x114>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d109      	bne.n	800b3ba <xTaskResumeAll+0x2a>
 800b3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	603b      	str	r3, [r7, #0]
 800b3b8:	e7fe      	b.n	800b3b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3ba:	f001 fa17 	bl	800c7ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3be:	4b39      	ldr	r3, [pc, #228]	; (800b4a4 <xTaskResumeAll+0x114>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	4a37      	ldr	r2, [pc, #220]	; (800b4a4 <xTaskResumeAll+0x114>)
 800b3c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3c8:	4b36      	ldr	r3, [pc, #216]	; (800b4a4 <xTaskResumeAll+0x114>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d162      	bne.n	800b496 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3d0:	4b35      	ldr	r3, [pc, #212]	; (800b4a8 <xTaskResumeAll+0x118>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d05e      	beq.n	800b496 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3d8:	e02f      	b.n	800b43a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3da:	4b34      	ldr	r3, [pc, #208]	; (800b4ac <xTaskResumeAll+0x11c>)
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3318      	adds	r3, #24
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe fd84 	bl	8009ef4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe fd7f 	bl	8009ef4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fa:	4b2d      	ldr	r3, [pc, #180]	; (800b4b0 <xTaskResumeAll+0x120>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d903      	bls.n	800b40a <xTaskResumeAll+0x7a>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	4a2a      	ldr	r2, [pc, #168]	; (800b4b0 <xTaskResumeAll+0x120>)
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4a27      	ldr	r2, [pc, #156]	; (800b4b4 <xTaskResumeAll+0x124>)
 800b418:	441a      	add	r2, r3
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3304      	adds	r3, #4
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f7fe fd0a 	bl	8009e3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42a:	4b23      	ldr	r3, [pc, #140]	; (800b4b8 <xTaskResumeAll+0x128>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	429a      	cmp	r2, r3
 800b432:	d302      	bcc.n	800b43a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b434:	4b21      	ldr	r3, [pc, #132]	; (800b4bc <xTaskResumeAll+0x12c>)
 800b436:	2201      	movs	r2, #1
 800b438:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b43a:	4b1c      	ldr	r3, [pc, #112]	; (800b4ac <xTaskResumeAll+0x11c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1cb      	bne.n	800b3da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b448:	f000 fb58 	bl	800bafc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b44c:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <xTaskResumeAll+0x130>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d010      	beq.n	800b47a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b458:	f000 f858 	bl	800b50c <xTaskIncrementTick>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b462:	4b16      	ldr	r3, [pc, #88]	; (800b4bc <xTaskResumeAll+0x12c>)
 800b464:	2201      	movs	r2, #1
 800b466:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3b01      	subs	r3, #1
 800b46c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1f1      	bne.n	800b458 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b474:	4b12      	ldr	r3, [pc, #72]	; (800b4c0 <xTaskResumeAll+0x130>)
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b47a:	4b10      	ldr	r3, [pc, #64]	; (800b4bc <xTaskResumeAll+0x12c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d009      	beq.n	800b496 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b482:	2301      	movs	r3, #1
 800b484:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b486:	4b0f      	ldr	r3, [pc, #60]	; (800b4c4 <xTaskResumeAll+0x134>)
 800b488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b496:	f001 f9d7 	bl	800c848 <vPortExitCritical>

	return xAlreadyYielded;
 800b49a:	68bb      	ldr	r3, [r7, #8]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000dd0 	.word	0x20000dd0
 800b4a8:	20000da8 	.word	0x20000da8
 800b4ac:	20000d68 	.word	0x20000d68
 800b4b0:	20000db0 	.word	0x20000db0
 800b4b4:	200008d8 	.word	0x200008d8
 800b4b8:	200008d4 	.word	0x200008d4
 800b4bc:	20000dbc 	.word	0x20000dbc
 800b4c0:	20000db8 	.word	0x20000db8
 800b4c4:	e000ed04 	.word	0xe000ed04

0800b4c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <xTaskGetTickCount+0x1c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4d4:	687b      	ldr	r3, [r7, #4]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	370c      	adds	r7, #12
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20000dac 	.word	0x20000dac

0800b4e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4ee:	f001 fa59 	bl	800c9a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b4f6:	4b04      	ldr	r3, [pc, #16]	; (800b508 <xTaskGetTickCountFromISR+0x20>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4fc:	683b      	ldr	r3, [r7, #0]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20000dac 	.word	0x20000dac

0800b50c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b512:	2300      	movs	r3, #0
 800b514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b516:	4b4e      	ldr	r3, [pc, #312]	; (800b650 <xTaskIncrementTick+0x144>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f040 8088 	bne.w	800b630 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b520:	4b4c      	ldr	r3, [pc, #304]	; (800b654 <xTaskIncrementTick+0x148>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3301      	adds	r3, #1
 800b526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b528:	4a4a      	ldr	r2, [pc, #296]	; (800b654 <xTaskIncrementTick+0x148>)
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d11f      	bne.n	800b574 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b534:	4b48      	ldr	r3, [pc, #288]	; (800b658 <xTaskIncrementTick+0x14c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <xTaskIncrementTick+0x46>
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	603b      	str	r3, [r7, #0]
 800b550:	e7fe      	b.n	800b550 <xTaskIncrementTick+0x44>
 800b552:	4b41      	ldr	r3, [pc, #260]	; (800b658 <xTaskIncrementTick+0x14c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	4b40      	ldr	r3, [pc, #256]	; (800b65c <xTaskIncrementTick+0x150>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a3e      	ldr	r2, [pc, #248]	; (800b658 <xTaskIncrementTick+0x14c>)
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	4a3e      	ldr	r2, [pc, #248]	; (800b65c <xTaskIncrementTick+0x150>)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	4b3e      	ldr	r3, [pc, #248]	; (800b660 <xTaskIncrementTick+0x154>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3301      	adds	r3, #1
 800b56c:	4a3c      	ldr	r2, [pc, #240]	; (800b660 <xTaskIncrementTick+0x154>)
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	f000 fac4 	bl	800bafc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b574:	4b3b      	ldr	r3, [pc, #236]	; (800b664 <xTaskIncrementTick+0x158>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d349      	bcc.n	800b612 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b57e:	4b36      	ldr	r3, [pc, #216]	; (800b658 <xTaskIncrementTick+0x14c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d104      	bne.n	800b592 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b588:	4b36      	ldr	r3, [pc, #216]	; (800b664 <xTaskIncrementTick+0x158>)
 800b58a:	f04f 32ff 	mov.w	r2, #4294967295
 800b58e:	601a      	str	r2, [r3, #0]
					break;
 800b590:	e03f      	b.n	800b612 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b592:	4b31      	ldr	r3, [pc, #196]	; (800b658 <xTaskIncrementTick+0x14c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d203      	bcs.n	800b5b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5aa:	4a2e      	ldr	r2, [pc, #184]	; (800b664 <xTaskIncrementTick+0x158>)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5b0:	e02f      	b.n	800b612 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe fc9c 	bl	8009ef4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d004      	beq.n	800b5ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	3318      	adds	r3, #24
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe fc93 	bl	8009ef4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d2:	4b25      	ldr	r3, [pc, #148]	; (800b668 <xTaskIncrementTick+0x15c>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d903      	bls.n	800b5e2 <xTaskIncrementTick+0xd6>
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	4a22      	ldr	r2, [pc, #136]	; (800b668 <xTaskIncrementTick+0x15c>)
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4a1f      	ldr	r2, [pc, #124]	; (800b66c <xTaskIncrementTick+0x160>)
 800b5f0:	441a      	add	r2, r3
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f7fe fc1e 	bl	8009e3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b602:	4b1b      	ldr	r3, [pc, #108]	; (800b670 <xTaskIncrementTick+0x164>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	429a      	cmp	r2, r3
 800b60a:	d3b8      	bcc.n	800b57e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b60c:	2301      	movs	r3, #1
 800b60e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b610:	e7b5      	b.n	800b57e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b612:	4b17      	ldr	r3, [pc, #92]	; (800b670 <xTaskIncrementTick+0x164>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4914      	ldr	r1, [pc, #80]	; (800b66c <xTaskIncrementTick+0x160>)
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	440b      	add	r3, r1
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d907      	bls.n	800b63a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b62a:	2301      	movs	r3, #1
 800b62c:	617b      	str	r3, [r7, #20]
 800b62e:	e004      	b.n	800b63a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b630:	4b10      	ldr	r3, [pc, #64]	; (800b674 <xTaskIncrementTick+0x168>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3301      	adds	r3, #1
 800b636:	4a0f      	ldr	r2, [pc, #60]	; (800b674 <xTaskIncrementTick+0x168>)
 800b638:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b63a:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <xTaskIncrementTick+0x16c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b642:	2301      	movs	r3, #1
 800b644:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b646:	697b      	ldr	r3, [r7, #20]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20000dd0 	.word	0x20000dd0
 800b654:	20000dac 	.word	0x20000dac
 800b658:	20000d60 	.word	0x20000d60
 800b65c:	20000d64 	.word	0x20000d64
 800b660:	20000dc0 	.word	0x20000dc0
 800b664:	20000dc8 	.word	0x20000dc8
 800b668:	20000db0 	.word	0x20000db0
 800b66c:	200008d8 	.word	0x200008d8
 800b670:	200008d4 	.word	0x200008d4
 800b674:	20000db8 	.word	0x20000db8
 800b678:	20000dbc 	.word	0x20000dbc

0800b67c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b682:	4b27      	ldr	r3, [pc, #156]	; (800b720 <vTaskSwitchContext+0xa4>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b68a:	4b26      	ldr	r3, [pc, #152]	; (800b724 <vTaskSwitchContext+0xa8>)
 800b68c:	2201      	movs	r2, #1
 800b68e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b690:	e040      	b.n	800b714 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b692:	4b24      	ldr	r3, [pc, #144]	; (800b724 <vTaskSwitchContext+0xa8>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b698:	4b23      	ldr	r3, [pc, #140]	; (800b728 <vTaskSwitchContext+0xac>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	e00f      	b.n	800b6c0 <vTaskSwitchContext+0x44>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <vTaskSwitchContext+0x3e>
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	607b      	str	r3, [r7, #4]
 800b6b8:	e7fe      	b.n	800b6b8 <vTaskSwitchContext+0x3c>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	491a      	ldr	r1, [pc, #104]	; (800b72c <vTaskSwitchContext+0xb0>)
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	440b      	add	r3, r1
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d0e5      	beq.n	800b6a0 <vTaskSwitchContext+0x24>
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4a13      	ldr	r2, [pc, #76]	; (800b72c <vTaskSwitchContext+0xb0>)
 800b6e0:	4413      	add	r3, r2
 800b6e2:	60bb      	str	r3, [r7, #8]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	685a      	ldr	r2, [r3, #4]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	605a      	str	r2, [r3, #4]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	685a      	ldr	r2, [r3, #4]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d104      	bne.n	800b704 <vTaskSwitchContext+0x88>
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	605a      	str	r2, [r3, #4]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	4a09      	ldr	r2, [pc, #36]	; (800b730 <vTaskSwitchContext+0xb4>)
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	4a06      	ldr	r2, [pc, #24]	; (800b728 <vTaskSwitchContext+0xac>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6013      	str	r3, [r2, #0]
}
 800b714:	bf00      	nop
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	20000dd0 	.word	0x20000dd0
 800b724:	20000dbc 	.word	0x20000dbc
 800b728:	20000db0 	.word	0x20000db0
 800b72c:	200008d8 	.word	0x200008d8
 800b730:	200008d4 	.word	0x200008d4

0800b734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d109      	bne.n	800b758 <vTaskPlaceOnEventList+0x24>
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	60fb      	str	r3, [r7, #12]
 800b756:	e7fe      	b.n	800b756 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b758:	4b07      	ldr	r3, [pc, #28]	; (800b778 <vTaskPlaceOnEventList+0x44>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3318      	adds	r3, #24
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7fe fb8e 	bl	8009e82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b766:	2101      	movs	r1, #1
 800b768:	6838      	ldr	r0, [r7, #0]
 800b76a:	f000 fb7d 	bl	800be68 <prvAddCurrentTaskToDelayedList>
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	200008d4 	.word	0x200008d4

0800b77c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <vTaskPlaceOnEventListRestricted+0x26>
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e7fe      	b.n	800b7a0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7a2:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <vTaskPlaceOnEventListRestricted+0x50>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3318      	adds	r3, #24
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f7fe fb45 	bl	8009e3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7bc:	6879      	ldr	r1, [r7, #4]
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f000 fb52 	bl	800be68 <prvAddCurrentTaskToDelayedList>
	}
 800b7c4:	bf00      	nop
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	200008d4 	.word	0x200008d4

0800b7d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d109      	bne.n	800b7fa <xTaskRemoveFromEventList+0x2a>
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	e7fe      	b.n	800b7f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	3318      	adds	r3, #24
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fe fb78 	bl	8009ef4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b804:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <xTaskRemoveFromEventList+0xac>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d11d      	bne.n	800b848 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	3304      	adds	r3, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe fb6f 	bl	8009ef4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81a:	4b19      	ldr	r3, [pc, #100]	; (800b880 <xTaskRemoveFromEventList+0xb0>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d903      	bls.n	800b82a <xTaskRemoveFromEventList+0x5a>
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b826:	4a16      	ldr	r2, [pc, #88]	; (800b880 <xTaskRemoveFromEventList+0xb0>)
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82e:	4613      	mov	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4a13      	ldr	r2, [pc, #76]	; (800b884 <xTaskRemoveFromEventList+0xb4>)
 800b838:	441a      	add	r2, r3
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4619      	mov	r1, r3
 800b840:	4610      	mov	r0, r2
 800b842:	f7fe fafa 	bl	8009e3a <vListInsertEnd>
 800b846:	e005      	b.n	800b854 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	3318      	adds	r3, #24
 800b84c:	4619      	mov	r1, r3
 800b84e:	480e      	ldr	r0, [pc, #56]	; (800b888 <xTaskRemoveFromEventList+0xb8>)
 800b850:	f7fe faf3 	bl	8009e3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b858:	4b0c      	ldr	r3, [pc, #48]	; (800b88c <xTaskRemoveFromEventList+0xbc>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	429a      	cmp	r2, r3
 800b860:	d905      	bls.n	800b86e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b862:	2301      	movs	r3, #1
 800b864:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b866:	4b0a      	ldr	r3, [pc, #40]	; (800b890 <xTaskRemoveFromEventList+0xc0>)
 800b868:	2201      	movs	r2, #1
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	e001      	b.n	800b872 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b872:	697b      	ldr	r3, [r7, #20]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3718      	adds	r7, #24
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20000dd0 	.word	0x20000dd0
 800b880:	20000db0 	.word	0x20000db0
 800b884:	200008d8 	.word	0x200008d8
 800b888:	20000d68 	.word	0x20000d68
 800b88c:	200008d4 	.word	0x200008d4
 800b890:	20000dbc 	.word	0x20000dbc

0800b894 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b89c:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <vTaskInternalSetTimeOutState+0x24>)
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8a4:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <vTaskInternalSetTimeOutState+0x28>)
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	605a      	str	r2, [r3, #4]
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	20000dc0 	.word	0x20000dc0
 800b8bc:	20000dac 	.word	0x20000dac

0800b8c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d109      	bne.n	800b8e4 <xTaskCheckForTimeOut+0x24>
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	613b      	str	r3, [r7, #16]
 800b8e2:	e7fe      	b.n	800b8e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d109      	bne.n	800b8fe <xTaskCheckForTimeOut+0x3e>
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	e7fe      	b.n	800b8fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b8fe:	f000 ff75 	bl	800c7ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b902:	4b1d      	ldr	r3, [pc, #116]	; (800b978 <xTaskCheckForTimeOut+0xb8>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91a:	d102      	bne.n	800b922 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b91c:	2300      	movs	r3, #0
 800b91e:	61fb      	str	r3, [r7, #28]
 800b920:	e023      	b.n	800b96a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	4b15      	ldr	r3, [pc, #84]	; (800b97c <xTaskCheckForTimeOut+0xbc>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d007      	beq.n	800b93e <xTaskCheckForTimeOut+0x7e>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	429a      	cmp	r2, r3
 800b936:	d302      	bcc.n	800b93e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b938:	2301      	movs	r3, #1
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	e015      	b.n	800b96a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	429a      	cmp	r2, r3
 800b946:	d20b      	bcs.n	800b960 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff ff9d 	bl	800b894 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	e004      	b.n	800b96a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b966:	2301      	movs	r3, #1
 800b968:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b96a:	f000 ff6d 	bl	800c848 <vPortExitCritical>

	return xReturn;
 800b96e:	69fb      	ldr	r3, [r7, #28]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3720      	adds	r7, #32
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	20000dac 	.word	0x20000dac
 800b97c:	20000dc0 	.word	0x20000dc0

0800b980 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b980:	b480      	push	{r7}
 800b982:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b984:	4b03      	ldr	r3, [pc, #12]	; (800b994 <vTaskMissedYield+0x14>)
 800b986:	2201      	movs	r2, #1
 800b988:	601a      	str	r2, [r3, #0]
}
 800b98a:	bf00      	nop
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	20000dbc 	.word	0x20000dbc

0800b998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9a0:	f000 f852 	bl	800ba48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9a4:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <prvIdleTask+0x28>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d9f9      	bls.n	800b9a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9ac:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <prvIdleTask+0x2c>)
 800b9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9bc:	e7f0      	b.n	800b9a0 <prvIdleTask+0x8>
 800b9be:	bf00      	nop
 800b9c0:	200008d8 	.word	0x200008d8
 800b9c4:	e000ed04 	.word	0xe000ed04

0800b9c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	607b      	str	r3, [r7, #4]
 800b9d2:	e00c      	b.n	800b9ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4a12      	ldr	r2, [pc, #72]	; (800ba28 <prvInitialiseTaskLists+0x60>)
 800b9e0:	4413      	add	r3, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe f9fc 	bl	8009de0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b37      	cmp	r3, #55	; 0x37
 800b9f2:	d9ef      	bls.n	800b9d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9f4:	480d      	ldr	r0, [pc, #52]	; (800ba2c <prvInitialiseTaskLists+0x64>)
 800b9f6:	f7fe f9f3 	bl	8009de0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9fa:	480d      	ldr	r0, [pc, #52]	; (800ba30 <prvInitialiseTaskLists+0x68>)
 800b9fc:	f7fe f9f0 	bl	8009de0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba00:	480c      	ldr	r0, [pc, #48]	; (800ba34 <prvInitialiseTaskLists+0x6c>)
 800ba02:	f7fe f9ed 	bl	8009de0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba06:	480c      	ldr	r0, [pc, #48]	; (800ba38 <prvInitialiseTaskLists+0x70>)
 800ba08:	f7fe f9ea 	bl	8009de0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba0c:	480b      	ldr	r0, [pc, #44]	; (800ba3c <prvInitialiseTaskLists+0x74>)
 800ba0e:	f7fe f9e7 	bl	8009de0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba12:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <prvInitialiseTaskLists+0x78>)
 800ba14:	4a05      	ldr	r2, [pc, #20]	; (800ba2c <prvInitialiseTaskLists+0x64>)
 800ba16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba18:	4b0a      	ldr	r3, [pc, #40]	; (800ba44 <prvInitialiseTaskLists+0x7c>)
 800ba1a:	4a05      	ldr	r2, [pc, #20]	; (800ba30 <prvInitialiseTaskLists+0x68>)
 800ba1c:	601a      	str	r2, [r3, #0]
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	200008d8 	.word	0x200008d8
 800ba2c:	20000d38 	.word	0x20000d38
 800ba30:	20000d4c 	.word	0x20000d4c
 800ba34:	20000d68 	.word	0x20000d68
 800ba38:	20000d7c 	.word	0x20000d7c
 800ba3c:	20000d94 	.word	0x20000d94
 800ba40:	20000d60 	.word	0x20000d60
 800ba44:	20000d64 	.word	0x20000d64

0800ba48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba4e:	e019      	b.n	800ba84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba50:	f000 fecc 	bl	800c7ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba54:	4b0f      	ldr	r3, [pc, #60]	; (800ba94 <prvCheckTasksWaitingTermination+0x4c>)
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fa47 	bl	8009ef4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba66:	4b0c      	ldr	r3, [pc, #48]	; (800ba98 <prvCheckTasksWaitingTermination+0x50>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	4a0a      	ldr	r2, [pc, #40]	; (800ba98 <prvCheckTasksWaitingTermination+0x50>)
 800ba6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba70:	4b0a      	ldr	r3, [pc, #40]	; (800ba9c <prvCheckTasksWaitingTermination+0x54>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	4a09      	ldr	r2, [pc, #36]	; (800ba9c <prvCheckTasksWaitingTermination+0x54>)
 800ba78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba7a:	f000 fee5 	bl	800c848 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f80e 	bl	800baa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba84:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <prvCheckTasksWaitingTermination+0x54>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1e1      	bne.n	800ba50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20000d7c 	.word	0x20000d7c
 800ba98:	20000da8 	.word	0x20000da8
 800ba9c:	20000d90 	.word	0x20000d90

0800baa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d108      	bne.n	800bac4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	4618      	mov	r0, r3
 800bab8:	f001 f874 	bl	800cba4 <vPortFree>
				vPortFree( pxTCB );
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 f871 	bl	800cba4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bac2:	e017      	b.n	800baf4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d103      	bne.n	800bad6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f001 f868 	bl	800cba4 <vPortFree>
	}
 800bad4:	e00e      	b.n	800baf4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800badc:	2b02      	cmp	r3, #2
 800bade:	d009      	beq.n	800baf4 <prvDeleteTCB+0x54>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
 800baf2:	e7fe      	b.n	800baf2 <prvDeleteTCB+0x52>
	}
 800baf4:	bf00      	nop
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb02:	4b0c      	ldr	r3, [pc, #48]	; (800bb34 <prvResetNextTaskUnblockTime+0x38>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d104      	bne.n	800bb16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb0c:	4b0a      	ldr	r3, [pc, #40]	; (800bb38 <prvResetNextTaskUnblockTime+0x3c>)
 800bb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb14:	e008      	b.n	800bb28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb16:	4b07      	ldr	r3, [pc, #28]	; (800bb34 <prvResetNextTaskUnblockTime+0x38>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	4a04      	ldr	r2, [pc, #16]	; (800bb38 <prvResetNextTaskUnblockTime+0x3c>)
 800bb26:	6013      	str	r3, [r2, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	20000d60 	.word	0x20000d60
 800bb38:	20000dc8 	.word	0x20000dc8

0800bb3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bb42:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <xTaskGetCurrentTaskHandle+0x1c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bb48:	687b      	ldr	r3, [r7, #4]
	}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	200008d4 	.word	0x200008d4

0800bb5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb62:	4b0b      	ldr	r3, [pc, #44]	; (800bb90 <xTaskGetSchedulerState+0x34>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d102      	bne.n	800bb70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	607b      	str	r3, [r7, #4]
 800bb6e:	e008      	b.n	800bb82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb70:	4b08      	ldr	r3, [pc, #32]	; (800bb94 <xTaskGetSchedulerState+0x38>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb78:	2302      	movs	r3, #2
 800bb7a:	607b      	str	r3, [r7, #4]
 800bb7c:	e001      	b.n	800bb82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb82:	687b      	ldr	r3, [r7, #4]
	}
 800bb84:	4618      	mov	r0, r3
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	20000db4 	.word	0x20000db4
 800bb94:	20000dd0 	.word	0x20000dd0

0800bb98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bba4:	2300      	movs	r3, #0
 800bba6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d051      	beq.n	800bc52 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb2:	4b2a      	ldr	r3, [pc, #168]	; (800bc5c <xTaskPriorityInherit+0xc4>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d241      	bcs.n	800bc40 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	db06      	blt.n	800bbd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbc4:	4b25      	ldr	r3, [pc, #148]	; (800bc5c <xTaskPriorityInherit+0xc4>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	6959      	ldr	r1, [r3, #20]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbda:	4613      	mov	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4413      	add	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4a1f      	ldr	r2, [pc, #124]	; (800bc60 <xTaskPriorityInherit+0xc8>)
 800bbe4:	4413      	add	r3, r2
 800bbe6:	4299      	cmp	r1, r3
 800bbe8:	d122      	bne.n	800bc30 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	3304      	adds	r3, #4
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fe f980 	bl	8009ef4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bbf4:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <xTaskPriorityInherit+0xc4>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc02:	4b18      	ldr	r3, [pc, #96]	; (800bc64 <xTaskPriorityInherit+0xcc>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d903      	bls.n	800bc12 <xTaskPriorityInherit+0x7a>
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0e:	4a15      	ldr	r2, [pc, #84]	; (800bc64 <xTaskPriorityInherit+0xcc>)
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc16:	4613      	mov	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4a10      	ldr	r2, [pc, #64]	; (800bc60 <xTaskPriorityInherit+0xc8>)
 800bc20:	441a      	add	r2, r3
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	3304      	adds	r3, #4
 800bc26:	4619      	mov	r1, r3
 800bc28:	4610      	mov	r0, r2
 800bc2a:	f7fe f906 	bl	8009e3a <vListInsertEnd>
 800bc2e:	e004      	b.n	800bc3a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc30:	4b0a      	ldr	r3, [pc, #40]	; (800bc5c <xTaskPriorityInherit+0xc4>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	e008      	b.n	800bc52 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc44:	4b05      	ldr	r3, [pc, #20]	; (800bc5c <xTaskPriorityInherit+0xc4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d201      	bcs.n	800bc52 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc52:	68fb      	ldr	r3, [r7, #12]
	}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	200008d4 	.word	0x200008d4
 800bc60:	200008d8 	.word	0x200008d8
 800bc64:	20000db0 	.word	0x20000db0

0800bc68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc74:	2300      	movs	r3, #0
 800bc76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d054      	beq.n	800bd28 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc7e:	4b2d      	ldr	r3, [pc, #180]	; (800bd34 <xTaskPriorityDisinherit+0xcc>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d009      	beq.n	800bc9c <xTaskPriorityDisinherit+0x34>
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	e7fe      	b.n	800bc9a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d109      	bne.n	800bcb8 <xTaskPriorityDisinherit+0x50>
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	60bb      	str	r3, [r7, #8]
 800bcb6:	e7fe      	b.n	800bcb6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcbc:	1e5a      	subs	r2, r3, #1
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d02c      	beq.n	800bd28 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d128      	bne.n	800bd28 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fe f90a 	bl	8009ef4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf8:	4b0f      	ldr	r3, [pc, #60]	; (800bd38 <xTaskPriorityDisinherit+0xd0>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d903      	bls.n	800bd08 <xTaskPriorityDisinherit+0xa0>
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	4a0c      	ldr	r2, [pc, #48]	; (800bd38 <xTaskPriorityDisinherit+0xd0>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4a09      	ldr	r2, [pc, #36]	; (800bd3c <xTaskPriorityDisinherit+0xd4>)
 800bd16:	441a      	add	r2, r3
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f7fe f88b 	bl	8009e3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd24:	2301      	movs	r3, #1
 800bd26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd28:	697b      	ldr	r3, [r7, #20]
	}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	200008d4 	.word	0x200008d4
 800bd38:	20000db0 	.word	0x20000db0
 800bd3c:	200008d8 	.word	0x200008d8

0800bd40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d068      	beq.n	800be2a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d109      	bne.n	800bd74 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	60fb      	str	r3, [r7, #12]
 800bd72:	e7fe      	b.n	800bd72 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d902      	bls.n	800bd84 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	61fb      	str	r3, [r7, #28]
 800bd82:	e002      	b.n	800bd8a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8e:	69fa      	ldr	r2, [r7, #28]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d04a      	beq.n	800be2a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d145      	bne.n	800be2a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd9e:	4b25      	ldr	r3, [pc, #148]	; (800be34 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	69ba      	ldr	r2, [r7, #24]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d109      	bne.n	800bdbc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	60bb      	str	r3, [r7, #8]
 800bdba:	e7fe      	b.n	800bdba <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	69fa      	ldr	r2, [r7, #28]
 800bdc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	db04      	blt.n	800bdda <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	6959      	ldr	r1, [r3, #20]
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4a13      	ldr	r2, [pc, #76]	; (800be38 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bdea:	4413      	add	r3, r2
 800bdec:	4299      	cmp	r1, r3
 800bdee:	d11c      	bne.n	800be2a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe f87d 	bl	8009ef4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfe:	4b0f      	ldr	r3, [pc, #60]	; (800be3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	429a      	cmp	r2, r3
 800be04:	d903      	bls.n	800be0e <vTaskPriorityDisinheritAfterTimeout+0xce>
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0a:	4a0c      	ldr	r2, [pc, #48]	; (800be3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4a07      	ldr	r2, [pc, #28]	; (800be38 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800be1c:	441a      	add	r2, r3
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	3304      	adds	r3, #4
 800be22:	4619      	mov	r1, r3
 800be24:	4610      	mov	r0, r2
 800be26:	f7fe f808 	bl	8009e3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be2a:	bf00      	nop
 800be2c:	3720      	adds	r7, #32
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200008d4 	.word	0x200008d4
 800be38:	200008d8 	.word	0x200008d8
 800be3c:	20000db0 	.word	0x20000db0

0800be40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800be40:	b480      	push	{r7}
 800be42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800be44:	4b07      	ldr	r3, [pc, #28]	; (800be64 <pvTaskIncrementMutexHeldCount+0x24>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d004      	beq.n	800be56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800be4c:	4b05      	ldr	r3, [pc, #20]	; (800be64 <pvTaskIncrementMutexHeldCount+0x24>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be52:	3201      	adds	r2, #1
 800be54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800be56:	4b03      	ldr	r3, [pc, #12]	; (800be64 <pvTaskIncrementMutexHeldCount+0x24>)
 800be58:	681b      	ldr	r3, [r3, #0]
	}
 800be5a:	4618      	mov	r0, r3
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	200008d4 	.word	0x200008d4

0800be68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be72:	4b21      	ldr	r3, [pc, #132]	; (800bef8 <prvAddCurrentTaskToDelayedList+0x90>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be78:	4b20      	ldr	r3, [pc, #128]	; (800befc <prvAddCurrentTaskToDelayedList+0x94>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3304      	adds	r3, #4
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fe f838 	bl	8009ef4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8a:	d10a      	bne.n	800bea2 <prvAddCurrentTaskToDelayedList+0x3a>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d007      	beq.n	800bea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be92:	4b1a      	ldr	r3, [pc, #104]	; (800befc <prvAddCurrentTaskToDelayedList+0x94>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3304      	adds	r3, #4
 800be98:	4619      	mov	r1, r3
 800be9a:	4819      	ldr	r0, [pc, #100]	; (800bf00 <prvAddCurrentTaskToDelayedList+0x98>)
 800be9c:	f7fd ffcd 	bl	8009e3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bea0:	e026      	b.n	800bef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4413      	add	r3, r2
 800bea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800beaa:	4b14      	ldr	r3, [pc, #80]	; (800befc <prvAddCurrentTaskToDelayedList+0x94>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d209      	bcs.n	800bece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beba:	4b12      	ldr	r3, [pc, #72]	; (800bf04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	4b0f      	ldr	r3, [pc, #60]	; (800befc <prvAddCurrentTaskToDelayedList+0x94>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3304      	adds	r3, #4
 800bec4:	4619      	mov	r1, r3
 800bec6:	4610      	mov	r0, r2
 800bec8:	f7fd ffdb 	bl	8009e82 <vListInsert>
}
 800becc:	e010      	b.n	800bef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bece:	4b0e      	ldr	r3, [pc, #56]	; (800bf08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	4b0a      	ldr	r3, [pc, #40]	; (800befc <prvAddCurrentTaskToDelayedList+0x94>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f7fd ffd1 	bl	8009e82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d202      	bcs.n	800bef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800beea:	4a08      	ldr	r2, [pc, #32]	; (800bf0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	6013      	str	r3, [r2, #0]
}
 800bef0:	bf00      	nop
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	20000dac 	.word	0x20000dac
 800befc:	200008d4 	.word	0x200008d4
 800bf00:	20000d94 	.word	0x20000d94
 800bf04:	20000d64 	.word	0x20000d64
 800bf08:	20000d60 	.word	0x20000d60
 800bf0c:	20000dc8 	.word	0x20000dc8

0800bf10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08a      	sub	sp, #40	; 0x28
 800bf14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf1a:	f000 faff 	bl	800c51c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf1e:	4b1c      	ldr	r3, [pc, #112]	; (800bf90 <xTimerCreateTimerTask+0x80>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d021      	beq.n	800bf6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf2e:	1d3a      	adds	r2, r7, #4
 800bf30:	f107 0108 	add.w	r1, r7, #8
 800bf34:	f107 030c 	add.w	r3, r7, #12
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fd ff37 	bl	8009dac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	9202      	str	r2, [sp, #8]
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	2302      	movs	r3, #2
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	460a      	mov	r2, r1
 800bf50:	4910      	ldr	r1, [pc, #64]	; (800bf94 <xTimerCreateTimerTask+0x84>)
 800bf52:	4811      	ldr	r0, [pc, #68]	; (800bf98 <xTimerCreateTimerTask+0x88>)
 800bf54:	f7fe ff5e 	bl	800ae14 <xTaskCreateStatic>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	4b10      	ldr	r3, [pc, #64]	; (800bf9c <xTimerCreateTimerTask+0x8c>)
 800bf5c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf5e:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <xTimerCreateTimerTask+0x8c>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf66:	2301      	movs	r3, #1
 800bf68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d109      	bne.n	800bf84 <xTimerCreateTimerTask+0x74>
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	613b      	str	r3, [r7, #16]
 800bf82:	e7fe      	b.n	800bf82 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800bf84:	697b      	ldr	r3, [r7, #20]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3718      	adds	r7, #24
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	20000e04 	.word	0x20000e04
 800bf94:	0800e26c 	.word	0x0800e26c
 800bf98:	0800c0d1 	.word	0x0800c0d1
 800bf9c:	20000e08 	.word	0x20000e08

0800bfa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08a      	sub	sp, #40	; 0x28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d109      	bne.n	800bfcc <xTimerGenericCommand+0x2c>
 800bfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	623b      	str	r3, [r7, #32]
 800bfca:	e7fe      	b.n	800bfca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfcc:	4b19      	ldr	r3, [pc, #100]	; (800c034 <xTimerGenericCommand+0x94>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d02a      	beq.n	800c02a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2b05      	cmp	r3, #5
 800bfe4:	dc18      	bgt.n	800c018 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bfe6:	f7ff fdb9 	bl	800bb5c <xTaskGetSchedulerState>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d109      	bne.n	800c004 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bff0:	4b10      	ldr	r3, [pc, #64]	; (800c034 <xTimerGenericCommand+0x94>)
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	f107 0110 	add.w	r1, r7, #16
 800bff8:	2300      	movs	r3, #0
 800bffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bffc:	f7fe f996 	bl	800a32c <xQueueGenericSend>
 800c000:	6278      	str	r0, [r7, #36]	; 0x24
 800c002:	e012      	b.n	800c02a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c004:	4b0b      	ldr	r3, [pc, #44]	; (800c034 <xTimerGenericCommand+0x94>)
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	f107 0110 	add.w	r1, r7, #16
 800c00c:	2300      	movs	r3, #0
 800c00e:	2200      	movs	r2, #0
 800c010:	f7fe f98c 	bl	800a32c <xQueueGenericSend>
 800c014:	6278      	str	r0, [r7, #36]	; 0x24
 800c016:	e008      	b.n	800c02a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c018:	4b06      	ldr	r3, [pc, #24]	; (800c034 <xTimerGenericCommand+0x94>)
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	f107 0110 	add.w	r1, r7, #16
 800c020:	2300      	movs	r3, #0
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	f7fe fa7c 	bl	800a520 <xQueueGenericSendFromISR>
 800c028:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3728      	adds	r7, #40	; 0x28
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20000e04 	.word	0x20000e04

0800c038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c042:	4b22      	ldr	r3, [pc, #136]	; (800c0cc <prvProcessExpiredTimer+0x94>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	3304      	adds	r3, #4
 800c050:	4618      	mov	r0, r3
 800c052:	f7fd ff4f 	bl	8009ef4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d021      	beq.n	800c0a8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	699a      	ldr	r2, [r3, #24]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	18d1      	adds	r1, r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	6978      	ldr	r0, [r7, #20]
 800c072:	f000 f8d1 	bl	800c218 <prvInsertTimerInActiveList>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d01e      	beq.n	800c0ba <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c07c:	2300      	movs	r3, #0
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	2300      	movs	r3, #0
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	2100      	movs	r1, #0
 800c086:	6978      	ldr	r0, [r7, #20]
 800c088:	f7ff ff8a 	bl	800bfa0 <xTimerGenericCommand>
 800c08c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d112      	bne.n	800c0ba <prvProcessExpiredTimer+0x82>
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	60fb      	str	r3, [r7, #12]
 800c0a6:	e7fe      	b.n	800c0a6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ae:	f023 0301 	bic.w	r3, r3, #1
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	6978      	ldr	r0, [r7, #20]
 800c0c0:	4798      	blx	r3
}
 800c0c2:	bf00      	nop
 800c0c4:	3718      	adds	r7, #24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20000dfc 	.word	0x20000dfc

0800c0d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0d8:	f107 0308 	add.w	r3, r7, #8
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 f857 	bl	800c190 <prvGetNextExpireTime>
 800c0e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 f803 	bl	800c0f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c0ee:	f000 f8d5 	bl	800c29c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0f2:	e7f1      	b.n	800c0d8 <prvTimerTask+0x8>

0800c0f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0fe:	f7ff f939 	bl	800b374 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c102:	f107 0308 	add.w	r3, r7, #8
 800c106:	4618      	mov	r0, r3
 800c108:	f000 f866 	bl	800c1d8 <prvSampleTimeNow>
 800c10c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d130      	bne.n	800c176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <prvProcessTimerOrBlockTask+0x3c>
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d806      	bhi.n	800c130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c122:	f7ff f935 	bl	800b390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c126:	68f9      	ldr	r1, [r7, #12]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f7ff ff85 	bl	800c038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c12e:	e024      	b.n	800c17a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d008      	beq.n	800c148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c136:	4b13      	ldr	r3, [pc, #76]	; (800c184 <prvProcessTimerOrBlockTask+0x90>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d101      	bne.n	800c144 <prvProcessTimerOrBlockTask+0x50>
 800c140:	2301      	movs	r3, #1
 800c142:	e000      	b.n	800c146 <prvProcessTimerOrBlockTask+0x52>
 800c144:	2300      	movs	r3, #0
 800c146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c148:	4b0f      	ldr	r3, [pc, #60]	; (800c188 <prvProcessTimerOrBlockTask+0x94>)
 800c14a:	6818      	ldr	r0, [r3, #0]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	4619      	mov	r1, r3
 800c156:	f7fe fe29 	bl	800adac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c15a:	f7ff f919 	bl	800b390 <xTaskResumeAll>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c164:	4b09      	ldr	r3, [pc, #36]	; (800c18c <prvProcessTimerOrBlockTask+0x98>)
 800c166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c16a:	601a      	str	r2, [r3, #0]
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	f3bf 8f6f 	isb	sy
}
 800c174:	e001      	b.n	800c17a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c176:	f7ff f90b 	bl	800b390 <xTaskResumeAll>
}
 800c17a:	bf00      	nop
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	20000e00 	.word	0x20000e00
 800c188:	20000e04 	.word	0x20000e04
 800c18c:	e000ed04 	.word	0xe000ed04

0800c190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c198:	4b0e      	ldr	r3, [pc, #56]	; (800c1d4 <prvGetNextExpireTime+0x44>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <prvGetNextExpireTime+0x16>
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	e000      	b.n	800c1a8 <prvGetNextExpireTime+0x18>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d105      	bne.n	800c1c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1b4:	4b07      	ldr	r3, [pc, #28]	; (800c1d4 <prvGetNextExpireTime+0x44>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	60fb      	str	r3, [r7, #12]
 800c1be:	e001      	b.n	800c1c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	20000dfc 	.word	0x20000dfc

0800c1d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c1e0:	f7ff f972 	bl	800b4c8 <xTaskGetTickCount>
 800c1e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	; (800c214 <prvSampleTimeNow+0x3c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d205      	bcs.n	800c1fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c1f0:	f000 f930 	bl	800c454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	e002      	b.n	800c202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c202:	4a04      	ldr	r2, [pc, #16]	; (800c214 <prvSampleTimeNow+0x3c>)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c208:	68fb      	ldr	r3, [r7, #12]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20000e0c 	.word	0x20000e0c

0800c218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
 800c224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c226:	2300      	movs	r3, #0
 800c228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d812      	bhi.n	800c264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	1ad2      	subs	r2, r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d302      	bcc.n	800c252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c24c:	2301      	movs	r3, #1
 800c24e:	617b      	str	r3, [r7, #20]
 800c250:	e01b      	b.n	800c28a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c252:	4b10      	ldr	r3, [pc, #64]	; (800c294 <prvInsertTimerInActiveList+0x7c>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3304      	adds	r3, #4
 800c25a:	4619      	mov	r1, r3
 800c25c:	4610      	mov	r0, r2
 800c25e:	f7fd fe10 	bl	8009e82 <vListInsert>
 800c262:	e012      	b.n	800c28a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d206      	bcs.n	800c27a <prvInsertTimerInActiveList+0x62>
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	429a      	cmp	r2, r3
 800c272:	d302      	bcc.n	800c27a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c274:	2301      	movs	r3, #1
 800c276:	617b      	str	r3, [r7, #20]
 800c278:	e007      	b.n	800c28a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c27a:	4b07      	ldr	r3, [pc, #28]	; (800c298 <prvInsertTimerInActiveList+0x80>)
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3304      	adds	r3, #4
 800c282:	4619      	mov	r1, r3
 800c284:	4610      	mov	r0, r2
 800c286:	f7fd fdfc 	bl	8009e82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c28a:	697b      	ldr	r3, [r7, #20]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	20000e00 	.word	0x20000e00
 800c298:	20000dfc 	.word	0x20000dfc

0800c29c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08e      	sub	sp, #56	; 0x38
 800c2a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2a2:	e0c6      	b.n	800c432 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	da17      	bge.n	800c2da <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2aa:	1d3b      	adds	r3, r7, #4
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d109      	bne.n	800c2ca <prvProcessReceivedCommands+0x2e>
 800c2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ba:	f383 8811 	msr	BASEPRI, r3
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	61fb      	str	r3, [r7, #28]
 800c2c8:	e7fe      	b.n	800c2c8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d0:	6850      	ldr	r0, [r2, #4]
 800c2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d4:	6892      	ldr	r2, [r2, #8]
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f2c0 80a7 	blt.w	800c430 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d004      	beq.n	800c2f8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fd fdfe 	bl	8009ef4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2f8:	463b      	mov	r3, r7
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7ff ff6c 	bl	800c1d8 <prvSampleTimeNow>
 800c300:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b09      	cmp	r3, #9
 800c306:	f200 8094 	bhi.w	800c432 <prvProcessReceivedCommands+0x196>
 800c30a:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <prvProcessReceivedCommands+0x74>)
 800c30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c310:	0800c339 	.word	0x0800c339
 800c314:	0800c339 	.word	0x0800c339
 800c318:	0800c339 	.word	0x0800c339
 800c31c:	0800c3ab 	.word	0x0800c3ab
 800c320:	0800c3bf 	.word	0x0800c3bf
 800c324:	0800c407 	.word	0x0800c407
 800c328:	0800c339 	.word	0x0800c339
 800c32c:	0800c339 	.word	0x0800c339
 800c330:	0800c3ab 	.word	0x0800c3ab
 800c334:	0800c3bf 	.word	0x0800c3bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c33e:	f043 0301 	orr.w	r3, r3, #1
 800c342:	b2da      	uxtb	r2, r3
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	18d1      	adds	r1, r2, r3
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c358:	f7ff ff5e 	bl	800c218 <prvInsertTimerInActiveList>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d067      	beq.n	800c432 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c368:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d05c      	beq.n	800c432 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	699b      	ldr	r3, [r3, #24]
 800c37e:	441a      	add	r2, r3
 800c380:	2300      	movs	r3, #0
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	2300      	movs	r3, #0
 800c386:	2100      	movs	r1, #0
 800c388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c38a:	f7ff fe09 	bl	800bfa0 <xTimerGenericCommand>
 800c38e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d14d      	bne.n	800c432 <prvProcessReceivedCommands+0x196>
 800c396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	61bb      	str	r3, [r7, #24]
 800c3a8:	e7fe      	b.n	800c3a8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b0:	f023 0301 	bic.w	r3, r3, #1
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3bc:	e039      	b.n	800c432 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c4:	f043 0301 	orr.w	r3, r3, #1
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d109      	bne.n	800c3f2 <prvProcessReceivedCommands+0x156>
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	617b      	str	r3, [r7, #20]
 800c3f0:	e7fe      	b.n	800c3f0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f4:	699a      	ldr	r2, [r3, #24]
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	18d1      	adds	r1, r2, r3
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c400:	f7ff ff0a 	bl	800c218 <prvInsertTimerInActiveList>
					break;
 800c404:	e015      	b.n	800c432 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c40c:	f003 0302 	and.w	r3, r3, #2
 800c410:	2b00      	cmp	r3, #0
 800c412:	d103      	bne.n	800c41c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c416:	f000 fbc5 	bl	800cba4 <vPortFree>
 800c41a:	e00a      	b.n	800c432 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c42e:	e000      	b.n	800c432 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c432:	4b07      	ldr	r3, [pc, #28]	; (800c450 <prvProcessReceivedCommands+0x1b4>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	1d39      	adds	r1, r7, #4
 800c438:	2200      	movs	r2, #0
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe f904 	bl	800a648 <xQueueReceive>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	f47f af2e 	bne.w	800c2a4 <prvProcessReceivedCommands+0x8>
	}
}
 800c448:	bf00      	nop
 800c44a:	3730      	adds	r7, #48	; 0x30
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	20000e04 	.word	0x20000e04

0800c454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c45a:	e047      	b.n	800c4ec <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c45c:	4b2d      	ldr	r3, [pc, #180]	; (800c514 <prvSwitchTimerLists+0xc0>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c466:	4b2b      	ldr	r3, [pc, #172]	; (800c514 <prvSwitchTimerLists+0xc0>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3304      	adds	r3, #4
 800c474:	4618      	mov	r0, r3
 800c476:	f7fd fd3d 	bl	8009ef4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6a1b      	ldr	r3, [r3, #32]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d02d      	beq.n	800c4ec <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	4413      	add	r3, r2
 800c498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d90e      	bls.n	800c4c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4ae:	4b19      	ldr	r3, [pc, #100]	; (800c514 <prvSwitchTimerLists+0xc0>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	f7fd fce2 	bl	8009e82 <vListInsert>
 800c4be:	e015      	b.n	800c4ec <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7ff fd68 	bl	800bfa0 <xTimerGenericCommand>
 800c4d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <prvSwitchTimerLists+0x98>
 800c4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	603b      	str	r3, [r7, #0]
 800c4ea:	e7fe      	b.n	800c4ea <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4ec:	4b09      	ldr	r3, [pc, #36]	; (800c514 <prvSwitchTimerLists+0xc0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1b2      	bne.n	800c45c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4f6:	4b07      	ldr	r3, [pc, #28]	; (800c514 <prvSwitchTimerLists+0xc0>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4fc:	4b06      	ldr	r3, [pc, #24]	; (800c518 <prvSwitchTimerLists+0xc4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a04      	ldr	r2, [pc, #16]	; (800c514 <prvSwitchTimerLists+0xc0>)
 800c502:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c504:	4a04      	ldr	r2, [pc, #16]	; (800c518 <prvSwitchTimerLists+0xc4>)
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	6013      	str	r3, [r2, #0]
}
 800c50a:	bf00      	nop
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	20000dfc 	.word	0x20000dfc
 800c518:	20000e00 	.word	0x20000e00

0800c51c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c522:	f000 f963 	bl	800c7ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c526:	4b15      	ldr	r3, [pc, #84]	; (800c57c <prvCheckForValidListAndQueue+0x60>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d120      	bne.n	800c570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c52e:	4814      	ldr	r0, [pc, #80]	; (800c580 <prvCheckForValidListAndQueue+0x64>)
 800c530:	f7fd fc56 	bl	8009de0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c534:	4813      	ldr	r0, [pc, #76]	; (800c584 <prvCheckForValidListAndQueue+0x68>)
 800c536:	f7fd fc53 	bl	8009de0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c53a:	4b13      	ldr	r3, [pc, #76]	; (800c588 <prvCheckForValidListAndQueue+0x6c>)
 800c53c:	4a10      	ldr	r2, [pc, #64]	; (800c580 <prvCheckForValidListAndQueue+0x64>)
 800c53e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c540:	4b12      	ldr	r3, [pc, #72]	; (800c58c <prvCheckForValidListAndQueue+0x70>)
 800c542:	4a10      	ldr	r2, [pc, #64]	; (800c584 <prvCheckForValidListAndQueue+0x68>)
 800c544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c546:	2300      	movs	r3, #0
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	4b11      	ldr	r3, [pc, #68]	; (800c590 <prvCheckForValidListAndQueue+0x74>)
 800c54c:	4a11      	ldr	r2, [pc, #68]	; (800c594 <prvCheckForValidListAndQueue+0x78>)
 800c54e:	2110      	movs	r1, #16
 800c550:	200a      	movs	r0, #10
 800c552:	f7fd fd61 	bl	800a018 <xQueueGenericCreateStatic>
 800c556:	4602      	mov	r2, r0
 800c558:	4b08      	ldr	r3, [pc, #32]	; (800c57c <prvCheckForValidListAndQueue+0x60>)
 800c55a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c55c:	4b07      	ldr	r3, [pc, #28]	; (800c57c <prvCheckForValidListAndQueue+0x60>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d005      	beq.n	800c570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c564:	4b05      	ldr	r3, [pc, #20]	; (800c57c <prvCheckForValidListAndQueue+0x60>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	490b      	ldr	r1, [pc, #44]	; (800c598 <prvCheckForValidListAndQueue+0x7c>)
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe fbf6 	bl	800ad5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c570:	f000 f96a 	bl	800c848 <vPortExitCritical>
}
 800c574:	bf00      	nop
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	20000e04 	.word	0x20000e04
 800c580:	20000dd4 	.word	0x20000dd4
 800c584:	20000de8 	.word	0x20000de8
 800c588:	20000dfc 	.word	0x20000dfc
 800c58c:	20000e00 	.word	0x20000e00
 800c590:	20000eb0 	.word	0x20000eb0
 800c594:	20000e10 	.word	0x20000e10
 800c598:	0800e274 	.word	0x0800e274

0800c59c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	3b04      	subs	r3, #4
 800c5ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3b04      	subs	r3, #4
 800c5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f023 0201 	bic.w	r2, r3, #1
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3b04      	subs	r3, #4
 800c5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5cc:	4a0c      	ldr	r2, [pc, #48]	; (800c600 <pxPortInitialiseStack+0x64>)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3b14      	subs	r3, #20
 800c5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f06f 0202 	mvn.w	r2, #2
 800c5ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3b20      	subs	r3, #32
 800c5f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	0800c605 	.word	0x0800c605

0800c604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c60e:	4b11      	ldr	r3, [pc, #68]	; (800c654 <prvTaskExitError+0x50>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c616:	d009      	beq.n	800c62c <prvTaskExitError+0x28>
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	60fb      	str	r3, [r7, #12]
 800c62a:	e7fe      	b.n	800c62a <prvTaskExitError+0x26>
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c63e:	bf00      	nop
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d0fc      	beq.n	800c640 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c646:	bf00      	nop
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	2000011c 	.word	0x2000011c
	...

0800c660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c660:	4b07      	ldr	r3, [pc, #28]	; (800c680 <pxCurrentTCBConst2>)
 800c662:	6819      	ldr	r1, [r3, #0]
 800c664:	6808      	ldr	r0, [r1, #0]
 800c666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66a:	f380 8809 	msr	PSP, r0
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f04f 0000 	mov.w	r0, #0
 800c676:	f380 8811 	msr	BASEPRI, r0
 800c67a:	4770      	bx	lr
 800c67c:	f3af 8000 	nop.w

0800c680 <pxCurrentTCBConst2>:
 800c680:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop

0800c688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c688:	4808      	ldr	r0, [pc, #32]	; (800c6ac <prvPortStartFirstTask+0x24>)
 800c68a:	6800      	ldr	r0, [r0, #0]
 800c68c:	6800      	ldr	r0, [r0, #0]
 800c68e:	f380 8808 	msr	MSP, r0
 800c692:	f04f 0000 	mov.w	r0, #0
 800c696:	f380 8814 	msr	CONTROL, r0
 800c69a:	b662      	cpsie	i
 800c69c:	b661      	cpsie	f
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	df00      	svc	0
 800c6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6aa:	bf00      	nop
 800c6ac:	e000ed08 	.word	0xe000ed08

0800c6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6b6:	4b44      	ldr	r3, [pc, #272]	; (800c7c8 <xPortStartScheduler+0x118>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a44      	ldr	r2, [pc, #272]	; (800c7cc <xPortStartScheduler+0x11c>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d109      	bne.n	800c6d4 <xPortStartScheduler+0x24>
 800c6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	613b      	str	r3, [r7, #16]
 800c6d2:	e7fe      	b.n	800c6d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6d4:	4b3c      	ldr	r3, [pc, #240]	; (800c7c8 <xPortStartScheduler+0x118>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a3d      	ldr	r2, [pc, #244]	; (800c7d0 <xPortStartScheduler+0x120>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d109      	bne.n	800c6f2 <xPortStartScheduler+0x42>
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60fb      	str	r3, [r7, #12]
 800c6f0:	e7fe      	b.n	800c6f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6f2:	4b38      	ldr	r3, [pc, #224]	; (800c7d4 <xPortStartScheduler+0x124>)
 800c6f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	22ff      	movs	r2, #255	; 0xff
 800c702:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c714:	b2da      	uxtb	r2, r3
 800c716:	4b30      	ldr	r3, [pc, #192]	; (800c7d8 <xPortStartScheduler+0x128>)
 800c718:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c71a:	4b30      	ldr	r3, [pc, #192]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c71c:	2207      	movs	r2, #7
 800c71e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c720:	e009      	b.n	800c736 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c722:	4b2e      	ldr	r3, [pc, #184]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	3b01      	subs	r3, #1
 800c728:	4a2c      	ldr	r2, [pc, #176]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c72a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c72c:	78fb      	ldrb	r3, [r7, #3]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	b2db      	uxtb	r3, r3
 800c734:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c736:	78fb      	ldrb	r3, [r7, #3]
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c73e:	2b80      	cmp	r3, #128	; 0x80
 800c740:	d0ef      	beq.n	800c722 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c742:	4b26      	ldr	r3, [pc, #152]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f1c3 0307 	rsb	r3, r3, #7
 800c74a:	2b04      	cmp	r3, #4
 800c74c:	d009      	beq.n	800c762 <xPortStartScheduler+0xb2>
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	60bb      	str	r3, [r7, #8]
 800c760:	e7fe      	b.n	800c760 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c762:	4b1e      	ldr	r3, [pc, #120]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	4a1c      	ldr	r2, [pc, #112]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c76a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c76c:	4b1b      	ldr	r3, [pc, #108]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c774:	4a19      	ldr	r2, [pc, #100]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c776:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c780:	4b17      	ldr	r3, [pc, #92]	; (800c7e0 <xPortStartScheduler+0x130>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a16      	ldr	r2, [pc, #88]	; (800c7e0 <xPortStartScheduler+0x130>)
 800c786:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c78a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c78c:	4b14      	ldr	r3, [pc, #80]	; (800c7e0 <xPortStartScheduler+0x130>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a13      	ldr	r2, [pc, #76]	; (800c7e0 <xPortStartScheduler+0x130>)
 800c792:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c796:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c798:	f000 f8d6 	bl	800c948 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c79c:	4b11      	ldr	r3, [pc, #68]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7a2:	f000 f8f5 	bl	800c990 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7a6:	4b10      	ldr	r3, [pc, #64]	; (800c7e8 <xPortStartScheduler+0x138>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a0f      	ldr	r2, [pc, #60]	; (800c7e8 <xPortStartScheduler+0x138>)
 800c7ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7b2:	f7ff ff69 	bl	800c688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7b6:	f7fe ff61 	bl	800b67c <vTaskSwitchContext>
	prvTaskExitError();
 800c7ba:	f7ff ff23 	bl	800c604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3718      	adds	r7, #24
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	e000ed00 	.word	0xe000ed00
 800c7cc:	410fc271 	.word	0x410fc271
 800c7d0:	410fc270 	.word	0x410fc270
 800c7d4:	e000e400 	.word	0xe000e400
 800c7d8:	20000f00 	.word	0x20000f00
 800c7dc:	20000f04 	.word	0x20000f04
 800c7e0:	e000ed20 	.word	0xe000ed20
 800c7e4:	2000011c 	.word	0x2000011c
 800c7e8:	e000ef34 	.word	0xe000ef34

0800c7ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c804:	4b0e      	ldr	r3, [pc, #56]	; (800c840 <vPortEnterCritical+0x54>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3301      	adds	r3, #1
 800c80a:	4a0d      	ldr	r2, [pc, #52]	; (800c840 <vPortEnterCritical+0x54>)
 800c80c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c80e:	4b0c      	ldr	r3, [pc, #48]	; (800c840 <vPortEnterCritical+0x54>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d10e      	bne.n	800c834 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c816:	4b0b      	ldr	r3, [pc, #44]	; (800c844 <vPortEnterCritical+0x58>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d009      	beq.n	800c834 <vPortEnterCritical+0x48>
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	603b      	str	r3, [r7, #0]
 800c832:	e7fe      	b.n	800c832 <vPortEnterCritical+0x46>
	}
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	2000011c 	.word	0x2000011c
 800c844:	e000ed04 	.word	0xe000ed04

0800c848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c84e:	4b11      	ldr	r3, [pc, #68]	; (800c894 <vPortExitCritical+0x4c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d109      	bne.n	800c86a <vPortExitCritical+0x22>
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	607b      	str	r3, [r7, #4]
 800c868:	e7fe      	b.n	800c868 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c86a:	4b0a      	ldr	r3, [pc, #40]	; (800c894 <vPortExitCritical+0x4c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3b01      	subs	r3, #1
 800c870:	4a08      	ldr	r2, [pc, #32]	; (800c894 <vPortExitCritical+0x4c>)
 800c872:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c874:	4b07      	ldr	r3, [pc, #28]	; (800c894 <vPortExitCritical+0x4c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d104      	bne.n	800c886 <vPortExitCritical+0x3e>
 800c87c:	2300      	movs	r3, #0
 800c87e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c886:	bf00      	nop
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	2000011c 	.word	0x2000011c
	...

0800c8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8a0:	f3ef 8009 	mrs	r0, PSP
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	4b15      	ldr	r3, [pc, #84]	; (800c900 <pxCurrentTCBConst>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	f01e 0f10 	tst.w	lr, #16
 800c8b0:	bf08      	it	eq
 800c8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ba:	6010      	str	r0, [r2, #0]
 800c8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8c4:	f380 8811 	msr	BASEPRI, r0
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f7fe fed4 	bl	800b67c <vTaskSwitchContext>
 800c8d4:	f04f 0000 	mov.w	r0, #0
 800c8d8:	f380 8811 	msr	BASEPRI, r0
 800c8dc:	bc09      	pop	{r0, r3}
 800c8de:	6819      	ldr	r1, [r3, #0]
 800c8e0:	6808      	ldr	r0, [r1, #0]
 800c8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e6:	f01e 0f10 	tst.w	lr, #16
 800c8ea:	bf08      	it	eq
 800c8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8f0:	f380 8809 	msr	PSP, r0
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	f3af 8000 	nop.w

0800c900 <pxCurrentTCBConst>:
 800c900:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop

0800c908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c920:	f7fe fdf4 	bl	800b50c <xTaskIncrementTick>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c92a:	4b06      	ldr	r3, [pc, #24]	; (800c944 <SysTick_Handler+0x3c>)
 800c92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	2300      	movs	r3, #0
 800c934:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	e000ed04 	.word	0xe000ed04

0800c948 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c948:	b480      	push	{r7}
 800c94a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c94c:	4b0b      	ldr	r3, [pc, #44]	; (800c97c <vPortSetupTimerInterrupt+0x34>)
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c952:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <vPortSetupTimerInterrupt+0x38>)
 800c954:	2200      	movs	r2, #0
 800c956:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c958:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <vPortSetupTimerInterrupt+0x3c>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a0a      	ldr	r2, [pc, #40]	; (800c988 <vPortSetupTimerInterrupt+0x40>)
 800c95e:	fba2 2303 	umull	r2, r3, r2, r3
 800c962:	099b      	lsrs	r3, r3, #6
 800c964:	4a09      	ldr	r2, [pc, #36]	; (800c98c <vPortSetupTimerInterrupt+0x44>)
 800c966:	3b01      	subs	r3, #1
 800c968:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c96a:	4b04      	ldr	r3, [pc, #16]	; (800c97c <vPortSetupTimerInterrupt+0x34>)
 800c96c:	2207      	movs	r2, #7
 800c96e:	601a      	str	r2, [r3, #0]
}
 800c970:	bf00      	nop
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	e000e010 	.word	0xe000e010
 800c980:	e000e018 	.word	0xe000e018
 800c984:	20000000 	.word	0x20000000
 800c988:	10624dd3 	.word	0x10624dd3
 800c98c:	e000e014 	.word	0xe000e014

0800c990 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c990:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9a0 <vPortEnableVFP+0x10>
 800c994:	6801      	ldr	r1, [r0, #0]
 800c996:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c99a:	6001      	str	r1, [r0, #0]
 800c99c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c99e:	bf00      	nop
 800c9a0:	e000ed88 	.word	0xe000ed88

0800c9a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9aa:	f3ef 8305 	mrs	r3, IPSR
 800c9ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b0f      	cmp	r3, #15
 800c9b4:	d913      	bls.n	800c9de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9b6:	4a16      	ldr	r2, [pc, #88]	; (800ca10 <vPortValidateInterruptPriority+0x6c>)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9c0:	4b14      	ldr	r3, [pc, #80]	; (800ca14 <vPortValidateInterruptPriority+0x70>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	7afa      	ldrb	r2, [r7, #11]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d209      	bcs.n	800c9de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	607b      	str	r3, [r7, #4]
 800c9dc:	e7fe      	b.n	800c9dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9de:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <vPortValidateInterruptPriority+0x74>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c9e6:	4b0d      	ldr	r3, [pc, #52]	; (800ca1c <vPortValidateInterruptPriority+0x78>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d909      	bls.n	800ca02 <vPortValidateInterruptPriority+0x5e>
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	603b      	str	r3, [r7, #0]
 800ca00:	e7fe      	b.n	800ca00 <vPortValidateInterruptPriority+0x5c>
	}
 800ca02:	bf00      	nop
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	e000e3f0 	.word	0xe000e3f0
 800ca14:	20000f00 	.word	0x20000f00
 800ca18:	e000ed0c 	.word	0xe000ed0c
 800ca1c:	20000f04 	.word	0x20000f04

0800ca20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08a      	sub	sp, #40	; 0x28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca2c:	f7fe fca2 	bl	800b374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca30:	4b57      	ldr	r3, [pc, #348]	; (800cb90 <pvPortMalloc+0x170>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca38:	f000 f90c 	bl	800cc54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca3c:	4b55      	ldr	r3, [pc, #340]	; (800cb94 <pvPortMalloc+0x174>)
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4013      	ands	r3, r2
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f040 808c 	bne.w	800cb62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d01c      	beq.n	800ca8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ca50:	2208      	movs	r2, #8
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4413      	add	r3, r2
 800ca56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d013      	beq.n	800ca8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f023 0307 	bic.w	r3, r3, #7
 800ca68:	3308      	adds	r3, #8
 800ca6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f003 0307 	and.w	r3, r3, #7
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d009      	beq.n	800ca8a <pvPortMalloc+0x6a>
 800ca76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	e7fe      	b.n	800ca88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d068      	beq.n	800cb62 <pvPortMalloc+0x142>
 800ca90:	4b41      	ldr	r3, [pc, #260]	; (800cb98 <pvPortMalloc+0x178>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d863      	bhi.n	800cb62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca9a:	4b40      	ldr	r3, [pc, #256]	; (800cb9c <pvPortMalloc+0x17c>)
 800ca9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca9e:	4b3f      	ldr	r3, [pc, #252]	; (800cb9c <pvPortMalloc+0x17c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caa4:	e004      	b.n	800cab0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d903      	bls.n	800cac2 <pvPortMalloc+0xa2>
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1f1      	bne.n	800caa6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cac2:	4b33      	ldr	r3, [pc, #204]	; (800cb90 <pvPortMalloc+0x170>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac8:	429a      	cmp	r2, r3
 800caca:	d04a      	beq.n	800cb62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2208      	movs	r2, #8
 800cad2:	4413      	add	r3, r2
 800cad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	1ad2      	subs	r2, r2, r3
 800cae6:	2308      	movs	r3, #8
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	429a      	cmp	r2, r3
 800caec:	d91e      	bls.n	800cb2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4413      	add	r3, r2
 800caf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	f003 0307 	and.w	r3, r3, #7
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d009      	beq.n	800cb14 <pvPortMalloc+0xf4>
 800cb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb04:	f383 8811 	msr	BASEPRI, r3
 800cb08:	f3bf 8f6f 	isb	sy
 800cb0c:	f3bf 8f4f 	dsb	sy
 800cb10:	613b      	str	r3, [r7, #16]
 800cb12:	e7fe      	b.n	800cb12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	1ad2      	subs	r2, r2, r3
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb26:	69b8      	ldr	r0, [r7, #24]
 800cb28:	f000 f8f6 	bl	800cd18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb2c:	4b1a      	ldr	r3, [pc, #104]	; (800cb98 <pvPortMalloc+0x178>)
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	4a18      	ldr	r2, [pc, #96]	; (800cb98 <pvPortMalloc+0x178>)
 800cb38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb3a:	4b17      	ldr	r3, [pc, #92]	; (800cb98 <pvPortMalloc+0x178>)
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b18      	ldr	r3, [pc, #96]	; (800cba0 <pvPortMalloc+0x180>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d203      	bcs.n	800cb4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb46:	4b14      	ldr	r3, [pc, #80]	; (800cb98 <pvPortMalloc+0x178>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a15      	ldr	r2, [pc, #84]	; (800cba0 <pvPortMalloc+0x180>)
 800cb4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	4b10      	ldr	r3, [pc, #64]	; (800cb94 <pvPortMalloc+0x174>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	431a      	orrs	r2, r3
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	2200      	movs	r2, #0
 800cb60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb62:	f7fe fc15 	bl	800b390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	f003 0307 	and.w	r3, r3, #7
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d009      	beq.n	800cb84 <pvPortMalloc+0x164>
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	e7fe      	b.n	800cb82 <pvPortMalloc+0x162>
	return pvReturn;
 800cb84:	69fb      	ldr	r3, [r7, #28]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3728      	adds	r7, #40	; 0x28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	20001ac8 	.word	0x20001ac8
 800cb94:	20001ad4 	.word	0x20001ad4
 800cb98:	20001acc 	.word	0x20001acc
 800cb9c:	20001ac0 	.word	0x20001ac0
 800cba0:	20001ad0 	.word	0x20001ad0

0800cba4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d046      	beq.n	800cc44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbb6:	2308      	movs	r3, #8
 800cbb8:	425b      	negs	r3, r3
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	4b20      	ldr	r3, [pc, #128]	; (800cc4c <vPortFree+0xa8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4013      	ands	r3, r2
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d109      	bne.n	800cbe6 <vPortFree+0x42>
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e7fe      	b.n	800cbe4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d009      	beq.n	800cc02 <vPortFree+0x5e>
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	60bb      	str	r3, [r7, #8]
 800cc00:	e7fe      	b.n	800cc00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	4b11      	ldr	r3, [pc, #68]	; (800cc4c <vPortFree+0xa8>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4013      	ands	r3, r2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d019      	beq.n	800cc44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d115      	bne.n	800cc44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <vPortFree+0xa8>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	43db      	mvns	r3, r3
 800cc22:	401a      	ands	r2, r3
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc28:	f7fe fba4 	bl	800b374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	685a      	ldr	r2, [r3, #4]
 800cc30:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <vPortFree+0xac>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4413      	add	r3, r2
 800cc36:	4a06      	ldr	r2, [pc, #24]	; (800cc50 <vPortFree+0xac>)
 800cc38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc3a:	6938      	ldr	r0, [r7, #16]
 800cc3c:	f000 f86c 	bl	800cd18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cc40:	f7fe fba6 	bl	800b390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc44:	bf00      	nop
 800cc46:	3718      	adds	r7, #24
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20001ad4 	.word	0x20001ad4
 800cc50:	20001acc 	.word	0x20001acc

0800cc54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cc5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc60:	4b27      	ldr	r3, [pc, #156]	; (800cd00 <prvHeapInit+0xac>)
 800cc62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00c      	beq.n	800cc88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3307      	adds	r3, #7
 800cc72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f023 0307 	bic.w	r3, r3, #7
 800cc7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	4a1f      	ldr	r2, [pc, #124]	; (800cd00 <prvHeapInit+0xac>)
 800cc84:	4413      	add	r3, r2
 800cc86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc8c:	4a1d      	ldr	r2, [pc, #116]	; (800cd04 <prvHeapInit+0xb0>)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc92:	4b1c      	ldr	r3, [pc, #112]	; (800cd04 <prvHeapInit+0xb0>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cca0:	2208      	movs	r2, #8
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	1a9b      	subs	r3, r3, r2
 800cca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f023 0307 	bic.w	r3, r3, #7
 800ccae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4a15      	ldr	r2, [pc, #84]	; (800cd08 <prvHeapInit+0xb4>)
 800ccb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccb6:	4b14      	ldr	r3, [pc, #80]	; (800cd08 <prvHeapInit+0xb4>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccbe:	4b12      	ldr	r3, [pc, #72]	; (800cd08 <prvHeapInit+0xb4>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccd4:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <prvHeapInit+0xb4>)
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	4a0a      	ldr	r2, [pc, #40]	; (800cd0c <prvHeapInit+0xb8>)
 800cce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	4a09      	ldr	r2, [pc, #36]	; (800cd10 <prvHeapInit+0xbc>)
 800ccea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccec:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <prvHeapInit+0xc0>)
 800ccee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ccf2:	601a      	str	r2, [r3, #0]
}
 800ccf4:	bf00      	nop
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	20000f08 	.word	0x20000f08
 800cd04:	20001ac0 	.word	0x20001ac0
 800cd08:	20001ac8 	.word	0x20001ac8
 800cd0c:	20001ad0 	.word	0x20001ad0
 800cd10:	20001acc 	.word	0x20001acc
 800cd14:	20001ad4 	.word	0x20001ad4

0800cd18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd20:	4b28      	ldr	r3, [pc, #160]	; (800cdc4 <prvInsertBlockIntoFreeList+0xac>)
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	e002      	b.n	800cd2c <prvInsertBlockIntoFreeList+0x14>
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	60fb      	str	r3, [r7, #12]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d8f7      	bhi.n	800cd26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	4413      	add	r3, r2
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d108      	bne.n	800cd5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	441a      	add	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	441a      	add	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d118      	bne.n	800cda0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	4b15      	ldr	r3, [pc, #84]	; (800cdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d00d      	beq.n	800cd96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	441a      	add	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	e008      	b.n	800cda8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd96:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	601a      	str	r2, [r3, #0]
 800cd9e:	e003      	b.n	800cda8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d002      	beq.n	800cdb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdb6:	bf00      	nop
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	20001ac0 	.word	0x20001ac0
 800cdc8:	20001ac8 	.word	0x20001ac8

0800cdcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	4912      	ldr	r1, [pc, #72]	; (800ce1c <MX_USB_DEVICE_Init+0x50>)
 800cdd4:	4812      	ldr	r0, [pc, #72]	; (800ce20 <MX_USB_DEVICE_Init+0x54>)
 800cdd6:	f7fb faa5 	bl	8008324 <USBD_Init>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d001      	beq.n	800cde4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cde0:	f7f4 f89c 	bl	8000f1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cde4:	490f      	ldr	r1, [pc, #60]	; (800ce24 <MX_USB_DEVICE_Init+0x58>)
 800cde6:	480e      	ldr	r0, [pc, #56]	; (800ce20 <MX_USB_DEVICE_Init+0x54>)
 800cde8:	f7fb fac7 	bl	800837a <USBD_RegisterClass>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d001      	beq.n	800cdf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cdf2:	f7f4 f893 	bl	8000f1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cdf6:	490c      	ldr	r1, [pc, #48]	; (800ce28 <MX_USB_DEVICE_Init+0x5c>)
 800cdf8:	4809      	ldr	r0, [pc, #36]	; (800ce20 <MX_USB_DEVICE_Init+0x54>)
 800cdfa:	f7fb f9f5 	bl	80081e8 <USBD_CDC_RegisterInterface>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce04:	f7f4 f88a 	bl	8000f1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce08:	4805      	ldr	r0, [pc, #20]	; (800ce20 <MX_USB_DEVICE_Init+0x54>)
 800ce0a:	f7fb fad0 	bl	80083ae <USBD_Start>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce14:	f7f4 f882 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce18:	bf00      	nop
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	20000130 	.word	0x20000130
 800ce20:	2000c12c 	.word	0x2000c12c
 800ce24:	20000018 	.word	0x20000018
 800ce28:	20000120 	.word	0x20000120

0800ce2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce30:	2200      	movs	r2, #0
 800ce32:	4905      	ldr	r1, [pc, #20]	; (800ce48 <CDC_Init_FS+0x1c>)
 800ce34:	4805      	ldr	r0, [pc, #20]	; (800ce4c <CDC_Init_FS+0x20>)
 800ce36:	f7fb f9ee 	bl	8008216 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce3a:	4905      	ldr	r1, [pc, #20]	; (800ce50 <CDC_Init_FS+0x24>)
 800ce3c:	4803      	ldr	r0, [pc, #12]	; (800ce4c <CDC_Init_FS+0x20>)
 800ce3e:	f7fb fa04 	bl	800824a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	2000c7d8 	.word	0x2000c7d8
 800ce4c:	2000c12c 	.word	0x2000c12c
 800ce50:	2000c3f0 	.word	0x2000c3f0

0800ce54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ce54:	b480      	push	{r7}
 800ce56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ce58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	6039      	str	r1, [r7, #0]
 800ce6e:	71fb      	strb	r3, [r7, #7]
 800ce70:	4613      	mov	r3, r2
 800ce72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	2b23      	cmp	r3, #35	; 0x23
 800ce78:	d84a      	bhi.n	800cf10 <CDC_Control_FS+0xac>
 800ce7a:	a201      	add	r2, pc, #4	; (adr r2, 800ce80 <CDC_Control_FS+0x1c>)
 800ce7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce80:	0800cf11 	.word	0x0800cf11
 800ce84:	0800cf11 	.word	0x0800cf11
 800ce88:	0800cf11 	.word	0x0800cf11
 800ce8c:	0800cf11 	.word	0x0800cf11
 800ce90:	0800cf11 	.word	0x0800cf11
 800ce94:	0800cf11 	.word	0x0800cf11
 800ce98:	0800cf11 	.word	0x0800cf11
 800ce9c:	0800cf11 	.word	0x0800cf11
 800cea0:	0800cf11 	.word	0x0800cf11
 800cea4:	0800cf11 	.word	0x0800cf11
 800cea8:	0800cf11 	.word	0x0800cf11
 800ceac:	0800cf11 	.word	0x0800cf11
 800ceb0:	0800cf11 	.word	0x0800cf11
 800ceb4:	0800cf11 	.word	0x0800cf11
 800ceb8:	0800cf11 	.word	0x0800cf11
 800cebc:	0800cf11 	.word	0x0800cf11
 800cec0:	0800cf11 	.word	0x0800cf11
 800cec4:	0800cf11 	.word	0x0800cf11
 800cec8:	0800cf11 	.word	0x0800cf11
 800cecc:	0800cf11 	.word	0x0800cf11
 800ced0:	0800cf11 	.word	0x0800cf11
 800ced4:	0800cf11 	.word	0x0800cf11
 800ced8:	0800cf11 	.word	0x0800cf11
 800cedc:	0800cf11 	.word	0x0800cf11
 800cee0:	0800cf11 	.word	0x0800cf11
 800cee4:	0800cf11 	.word	0x0800cf11
 800cee8:	0800cf11 	.word	0x0800cf11
 800ceec:	0800cf11 	.word	0x0800cf11
 800cef0:	0800cf11 	.word	0x0800cf11
 800cef4:	0800cf11 	.word	0x0800cf11
 800cef8:	0800cf11 	.word	0x0800cf11
 800cefc:	0800cf11 	.word	0x0800cf11
 800cf00:	0800cf11 	.word	0x0800cf11
 800cf04:	0800cf11 	.word	0x0800cf11
 800cf08:	0800cf11 	.word	0x0800cf11
 800cf0c:	0800cf11 	.word	0x0800cf11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf10:	bf00      	nop
  }

  return (USBD_OK);
 800cf12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	4805      	ldr	r0, [pc, #20]	; (800cf44 <CDC_Receive_FS+0x24>)
 800cf2e:	f7fb f98c 	bl	800824a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf32:	4804      	ldr	r0, [pc, #16]	; (800cf44 <CDC_Receive_FS+0x24>)
 800cf34:	f7fb f9cc 	bl	80082d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	2000c12c 	.word	0x2000c12c

0800cf48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	460b      	mov	r3, r1
 800cf52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf58:	4b0d      	ldr	r3, [pc, #52]	; (800cf90 <CDC_Transmit_FS+0x48>)
 800cf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d001      	beq.n	800cf6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e00b      	b.n	800cf86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf6e:	887b      	ldrh	r3, [r7, #2]
 800cf70:	461a      	mov	r2, r3
 800cf72:	6879      	ldr	r1, [r7, #4]
 800cf74:	4806      	ldr	r0, [pc, #24]	; (800cf90 <CDC_Transmit_FS+0x48>)
 800cf76:	f7fb f94e 	bl	8008216 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf7a:	4805      	ldr	r0, [pc, #20]	; (800cf90 <CDC_Transmit_FS+0x48>)
 800cf7c:	f7fb f979 	bl	8008272 <USBD_CDC_TransmitPacket>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	2000c12c 	.word	0x2000c12c

0800cf94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	6039      	str	r1, [r7, #0]
 800cf9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	2212      	movs	r2, #18
 800cfa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cfa6:	4b03      	ldr	r3, [pc, #12]	; (800cfb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	20000150 	.word	0x20000150

0800cfb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	6039      	str	r1, [r7, #0]
 800cfc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2204      	movs	r2, #4
 800cfc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cfca:	4b03      	ldr	r3, [pc, #12]	; (800cfd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr
 800cfd8:	20000170 	.word	0x20000170

0800cfdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	6039      	str	r1, [r7, #0]
 800cfe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfe8:	79fb      	ldrb	r3, [r7, #7]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d105      	bne.n	800cffa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	4907      	ldr	r1, [pc, #28]	; (800d010 <USBD_FS_ProductStrDescriptor+0x34>)
 800cff2:	4808      	ldr	r0, [pc, #32]	; (800d014 <USBD_FS_ProductStrDescriptor+0x38>)
 800cff4:	f7fc f976 	bl	80092e4 <USBD_GetString>
 800cff8:	e004      	b.n	800d004 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	4904      	ldr	r1, [pc, #16]	; (800d010 <USBD_FS_ProductStrDescriptor+0x34>)
 800cffe:	4805      	ldr	r0, [pc, #20]	; (800d014 <USBD_FS_ProductStrDescriptor+0x38>)
 800d000:	f7fc f970 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d004:	4b02      	ldr	r3, [pc, #8]	; (800d010 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	2000cbc0 	.word	0x2000cbc0
 800d014:	0800e27c 	.word	0x0800e27c

0800d018 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	4603      	mov	r3, r0
 800d020:	6039      	str	r1, [r7, #0]
 800d022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	4904      	ldr	r1, [pc, #16]	; (800d038 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d028:	4804      	ldr	r0, [pc, #16]	; (800d03c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d02a:	f7fc f95b 	bl	80092e4 <USBD_GetString>
  return USBD_StrDesc;
 800d02e:	4b02      	ldr	r3, [pc, #8]	; (800d038 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	2000cbc0 	.word	0x2000cbc0
 800d03c:	0800e294 	.word	0x0800e294

0800d040 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	4603      	mov	r3, r0
 800d048:	6039      	str	r1, [r7, #0]
 800d04a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	221a      	movs	r2, #26
 800d050:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d052:	f000 f855 	bl	800d100 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d056:	4b02      	ldr	r3, [pc, #8]	; (800d060 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	20000174 	.word	0x20000174

0800d064 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	4603      	mov	r3, r0
 800d06c:	6039      	str	r1, [r7, #0]
 800d06e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d070:	79fb      	ldrb	r3, [r7, #7]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d105      	bne.n	800d082 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	4907      	ldr	r1, [pc, #28]	; (800d098 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d07a:	4808      	ldr	r0, [pc, #32]	; (800d09c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d07c:	f7fc f932 	bl	80092e4 <USBD_GetString>
 800d080:	e004      	b.n	800d08c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	4904      	ldr	r1, [pc, #16]	; (800d098 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d086:	4805      	ldr	r0, [pc, #20]	; (800d09c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d088:	f7fc f92c 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d08c:	4b02      	ldr	r3, [pc, #8]	; (800d098 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	2000cbc0 	.word	0x2000cbc0
 800d09c:	0800e2a8 	.word	0x0800e2a8

0800d0a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	6039      	str	r1, [r7, #0]
 800d0aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d105      	bne.n	800d0be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	4907      	ldr	r1, [pc, #28]	; (800d0d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0b6:	4808      	ldr	r0, [pc, #32]	; (800d0d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0b8:	f7fc f914 	bl	80092e4 <USBD_GetString>
 800d0bc:	e004      	b.n	800d0c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	4904      	ldr	r1, [pc, #16]	; (800d0d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d0c2:	4805      	ldr	r0, [pc, #20]	; (800d0d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d0c4:	f7fc f90e 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0c8:	4b02      	ldr	r3, [pc, #8]	; (800d0d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	2000cbc0 	.word	0x2000cbc0
 800d0d8:	0800e2b4 	.word	0x0800e2b4

0800d0dc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	6039      	str	r1, [r7, #0]
 800d0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	220c      	movs	r2, #12
 800d0ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d0ee:	4b03      	ldr	r3, [pc, #12]	; (800d0fc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	20000164 	.word	0x20000164

0800d100 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d106:	4b0f      	ldr	r3, [pc, #60]	; (800d144 <Get_SerialNum+0x44>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d10c:	4b0e      	ldr	r3, [pc, #56]	; (800d148 <Get_SerialNum+0x48>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d112:	4b0e      	ldr	r3, [pc, #56]	; (800d14c <Get_SerialNum+0x4c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d009      	beq.n	800d13a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d126:	2208      	movs	r2, #8
 800d128:	4909      	ldr	r1, [pc, #36]	; (800d150 <Get_SerialNum+0x50>)
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f000 f814 	bl	800d158 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d130:	2204      	movs	r2, #4
 800d132:	4908      	ldr	r1, [pc, #32]	; (800d154 <Get_SerialNum+0x54>)
 800d134:	68b8      	ldr	r0, [r7, #8]
 800d136:	f000 f80f 	bl	800d158 <IntToUnicode>
  }
}
 800d13a:	bf00      	nop
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	1fff7590 	.word	0x1fff7590
 800d148:	1fff7594 	.word	0x1fff7594
 800d14c:	1fff7598 	.word	0x1fff7598
 800d150:	20000176 	.word	0x20000176
 800d154:	20000186 	.word	0x20000186

0800d158 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d158:	b480      	push	{r7}
 800d15a:	b087      	sub	sp, #28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	4613      	mov	r3, r2
 800d164:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d16a:	2300      	movs	r3, #0
 800d16c:	75fb      	strb	r3, [r7, #23]
 800d16e:	e027      	b.n	800d1c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	0f1b      	lsrs	r3, r3, #28
 800d174:	2b09      	cmp	r3, #9
 800d176:	d80b      	bhi.n	800d190 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	0f1b      	lsrs	r3, r3, #28
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	4619      	mov	r1, r3
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	440b      	add	r3, r1
 800d188:	3230      	adds	r2, #48	; 0x30
 800d18a:	b2d2      	uxtb	r2, r2
 800d18c:	701a      	strb	r2, [r3, #0]
 800d18e:	e00a      	b.n	800d1a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	0f1b      	lsrs	r3, r3, #28
 800d194:	b2da      	uxtb	r2, r3
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	4619      	mov	r1, r3
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	440b      	add	r3, r1
 800d1a0:	3237      	adds	r2, #55	; 0x37
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	011b      	lsls	r3, r3, #4
 800d1aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	75fb      	strb	r3, [r7, #23]
 800d1c0:	7dfa      	ldrb	r2, [r7, #23]
 800d1c2:	79fb      	ldrb	r3, [r7, #7]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d3d3      	bcc.n	800d170 <IntToUnicode+0x18>
  }
}
 800d1c8:	bf00      	nop
 800d1ca:	371c      	adds	r7, #28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a0d      	ldr	r2, [pc, #52]	; (800d218 <HAL_PCD_MspInit+0x44>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d113      	bne.n	800d20e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d1e6:	4b0d      	ldr	r3, [pc, #52]	; (800d21c <HAL_PCD_MspInit+0x48>)
 800d1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ea:	4a0c      	ldr	r2, [pc, #48]	; (800d21c <HAL_PCD_MspInit+0x48>)
 800d1ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d1f0:	6593      	str	r3, [r2, #88]	; 0x58
 800d1f2:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <HAL_PCD_MspInit+0x48>)
 800d1f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800d1fe:	2200      	movs	r2, #0
 800d200:	2105      	movs	r1, #5
 800d202:	2043      	movs	r0, #67	; 0x43
 800d204:	f7f5 fa44 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d208:	2043      	movs	r0, #67	; 0x43
 800d20a:	f7f5 fa5d 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d20e:	bf00      	nop
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	40006800 	.word	0x40006800
 800d21c:	40021000 	.word	0x40021000

0800d220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f7fb f902 	bl	8008440 <USBD_LL_SetupStage>
}
 800d23c:	bf00      	nop
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d256:	78fb      	ldrb	r3, [r7, #3]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	015b      	lsls	r3, r3, #5
 800d25c:	4413      	add	r3, r2
 800d25e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	4619      	mov	r1, r3
 800d268:	f7fb f935 	bl	80084d6 <USBD_LL_DataOutStage>
}
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d286:	78fb      	ldrb	r3, [r7, #3]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	015b      	lsls	r3, r3, #5
 800d28c:	4413      	add	r3, r2
 800d28e:	333c      	adds	r3, #60	; 0x3c
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	78fb      	ldrb	r3, [r7, #3]
 800d294:	4619      	mov	r1, r3
 800d296:	f7fb f98f 	bl	80085b8 <USBD_LL_DataInStage>
}
 800d29a:	bf00      	nop
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7fb faa2 	bl	80087fa <USBD_LL_SOF>
}
 800d2b6:	bf00      	nop
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b084      	sub	sp, #16
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d001      	beq.n	800d2d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d2d2:	f7f3 fe23 	bl	8000f1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d2dc:	7bfa      	ldrb	r2, [r7, #15]
 800d2de:	4611      	mov	r1, r2
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fb fa4f 	bl	8008784 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fb fa08 	bl	8008702 <USBD_LL_Reset>
}
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fb fa4a 	bl	80087a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d005      	beq.n	800d324 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d318:	4b04      	ldr	r3, [pc, #16]	; (800d32c <HAL_PCD_SuspendCallback+0x30>)
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	4a03      	ldr	r2, [pc, #12]	; (800d32c <HAL_PCD_SuspendCallback+0x30>)
 800d31e:	f043 0306 	orr.w	r3, r3, #6
 800d322:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d324:	bf00      	nop
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	e000ed00 	.word	0xe000ed00

0800d330 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d007      	beq.n	800d350 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d340:	4b08      	ldr	r3, [pc, #32]	; (800d364 <HAL_PCD_ResumeCallback+0x34>)
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	4a07      	ldr	r2, [pc, #28]	; (800d364 <HAL_PCD_ResumeCallback+0x34>)
 800d346:	f023 0306 	bic.w	r3, r3, #6
 800d34a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d34c:	f000 fab2 	bl	800d8b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d356:	4618      	mov	r0, r3
 800d358:	f7fb fa39 	bl	80087ce <USBD_LL_Resume>
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	e000ed00 	.word	0xe000ed00

0800d368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d370:	f7f7 f824 	bl	80043bc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d374:	4a2b      	ldr	r2, [pc, #172]	; (800d424 <USBD_LL_Init+0xbc>)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a29      	ldr	r2, [pc, #164]	; (800d424 <USBD_LL_Init+0xbc>)
 800d380:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d384:	4b27      	ldr	r3, [pc, #156]	; (800d424 <USBD_LL_Init+0xbc>)
 800d386:	4a28      	ldr	r2, [pc, #160]	; (800d428 <USBD_LL_Init+0xc0>)
 800d388:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d38a:	4b26      	ldr	r3, [pc, #152]	; (800d424 <USBD_LL_Init+0xbc>)
 800d38c:	2208      	movs	r2, #8
 800d38e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d390:	4b24      	ldr	r3, [pc, #144]	; (800d424 <USBD_LL_Init+0xbc>)
 800d392:	2202      	movs	r2, #2
 800d394:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d396:	4b23      	ldr	r3, [pc, #140]	; (800d424 <USBD_LL_Init+0xbc>)
 800d398:	2202      	movs	r2, #2
 800d39a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d39c:	4b21      	ldr	r3, [pc, #132]	; (800d424 <USBD_LL_Init+0xbc>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d3a2:	4b20      	ldr	r3, [pc, #128]	; (800d424 <USBD_LL_Init+0xbc>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d3a8:	4b1e      	ldr	r3, [pc, #120]	; (800d424 <USBD_LL_Init+0xbc>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d3ae:	4b1d      	ldr	r3, [pc, #116]	; (800d424 <USBD_LL_Init+0xbc>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d3b4:	481b      	ldr	r0, [pc, #108]	; (800d424 <USBD_LL_Init+0xbc>)
 800d3b6:	f7f6 f85a 	bl	800346e <HAL_PCD_Init>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d3c0:	f7f3 fdac 	bl	8000f1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3ca:	2318      	movs	r3, #24
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	f7f6 ff28 	bl	8004224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3da:	2358      	movs	r3, #88	; 0x58
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2180      	movs	r1, #128	; 0x80
 800d3e0:	f7f6 ff20 	bl	8004224 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3ea:	23c0      	movs	r3, #192	; 0xc0
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2181      	movs	r1, #129	; 0x81
 800d3f0:	f7f6 ff18 	bl	8004224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d3fe:	2200      	movs	r2, #0
 800d400:	2101      	movs	r1, #1
 800d402:	f7f6 ff0f 	bl	8004224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d40c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d410:	2200      	movs	r2, #0
 800d412:	2182      	movs	r1, #130	; 0x82
 800d414:	f7f6 ff06 	bl	8004224 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	2000cdc0 	.word	0x2000cdc0
 800d428:	40006800 	.word	0x40006800

0800d42c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d442:	4618      	mov	r0, r3
 800d444:	f7f6 f8fb 	bl	800363e <HAL_PCD_Start>
 800d448:	4603      	mov	r3, r0
 800d44a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	2b03      	cmp	r3, #3
 800d450:	d816      	bhi.n	800d480 <USBD_LL_Start+0x54>
 800d452:	a201      	add	r2, pc, #4	; (adr r2, 800d458 <USBD_LL_Start+0x2c>)
 800d454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d458:	0800d469 	.word	0x0800d469
 800d45c:	0800d46f 	.word	0x0800d46f
 800d460:	0800d475 	.word	0x0800d475
 800d464:	0800d47b 	.word	0x0800d47b
    case HAL_OK :
      usb_status = USBD_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
    break;
 800d46c:	e00b      	b.n	800d486 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d46e:	2302      	movs	r3, #2
 800d470:	73fb      	strb	r3, [r7, #15]
    break;
 800d472:	e008      	b.n	800d486 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d474:	2301      	movs	r3, #1
 800d476:	73fb      	strb	r3, [r7, #15]
    break;
 800d478:	e005      	b.n	800d486 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d47a:	2302      	movs	r3, #2
 800d47c:	73fb      	strb	r3, [r7, #15]
    break;
 800d47e:	e002      	b.n	800d486 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d480:	2302      	movs	r3, #2
 800d482:	73fb      	strb	r3, [r7, #15]
    break;
 800d484:	bf00      	nop
  }
  return usb_status;
 800d486:	7bfb      	ldrb	r3, [r7, #15]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	4608      	mov	r0, r1
 800d49a:	4611      	mov	r1, r2
 800d49c:	461a      	mov	r2, r3
 800d49e:	4603      	mov	r3, r0
 800d4a0:	70fb      	strb	r3, [r7, #3]
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	70bb      	strb	r3, [r7, #2]
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d4b8:	78bb      	ldrb	r3, [r7, #2]
 800d4ba:	883a      	ldrh	r2, [r7, #0]
 800d4bc:	78f9      	ldrb	r1, [r7, #3]
 800d4be:	f7f6 fa53 	bl	8003968 <HAL_PCD_EP_Open>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4c6:	7bbb      	ldrb	r3, [r7, #14]
 800d4c8:	2b03      	cmp	r3, #3
 800d4ca:	d817      	bhi.n	800d4fc <USBD_LL_OpenEP+0x6c>
 800d4cc:	a201      	add	r2, pc, #4	; (adr r2, 800d4d4 <USBD_LL_OpenEP+0x44>)
 800d4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d2:	bf00      	nop
 800d4d4:	0800d4e5 	.word	0x0800d4e5
 800d4d8:	0800d4eb 	.word	0x0800d4eb
 800d4dc:	0800d4f1 	.word	0x0800d4f1
 800d4e0:	0800d4f7 	.word	0x0800d4f7
    case HAL_OK :
      usb_status = USBD_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e8:	e00b      	b.n	800d502 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ee:	e008      	b.n	800d502 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f4:	e005      	b.n	800d502 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4fa:	e002      	b.n	800d502 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d500:	bf00      	nop
  }
  return usb_status;
 800d502:	7bfb      	ldrb	r3, [r7, #15]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3710      	adds	r7, #16
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	460b      	mov	r3, r1
 800d516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d526:	78fa      	ldrb	r2, [r7, #3]
 800d528:	4611      	mov	r1, r2
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7f6 fa7c 	bl	8003a28 <HAL_PCD_EP_Close>
 800d530:	4603      	mov	r3, r0
 800d532:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	2b03      	cmp	r3, #3
 800d538:	d816      	bhi.n	800d568 <USBD_LL_CloseEP+0x5c>
 800d53a:	a201      	add	r2, pc, #4	; (adr r2, 800d540 <USBD_LL_CloseEP+0x34>)
 800d53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d540:	0800d551 	.word	0x0800d551
 800d544:	0800d557 	.word	0x0800d557
 800d548:	0800d55d 	.word	0x0800d55d
 800d54c:	0800d563 	.word	0x0800d563
    case HAL_OK :
      usb_status = USBD_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	73fb      	strb	r3, [r7, #15]
    break;
 800d554:	e00b      	b.n	800d56e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d556:	2302      	movs	r3, #2
 800d558:	73fb      	strb	r3, [r7, #15]
    break;
 800d55a:	e008      	b.n	800d56e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d55c:	2301      	movs	r3, #1
 800d55e:	73fb      	strb	r3, [r7, #15]
    break;
 800d560:	e005      	b.n	800d56e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d562:	2302      	movs	r3, #2
 800d564:	73fb      	strb	r3, [r7, #15]
    break;
 800d566:	e002      	b.n	800d56e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d568:	2302      	movs	r3, #2
 800d56a:	73fb      	strb	r3, [r7, #15]
    break;
 800d56c:	bf00      	nop
  }
  return usb_status;  
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d588:	2300      	movs	r3, #0
 800d58a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d592:	78fa      	ldrb	r2, [r7, #3]
 800d594:	4611      	mov	r1, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f7f6 fb10 	bl	8003bbc <HAL_PCD_EP_SetStall>
 800d59c:	4603      	mov	r3, r0
 800d59e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5a0:	7bbb      	ldrb	r3, [r7, #14]
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d816      	bhi.n	800d5d4 <USBD_LL_StallEP+0x5c>
 800d5a6:	a201      	add	r2, pc, #4	; (adr r2, 800d5ac <USBD_LL_StallEP+0x34>)
 800d5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ac:	0800d5bd 	.word	0x0800d5bd
 800d5b0:	0800d5c3 	.word	0x0800d5c3
 800d5b4:	0800d5c9 	.word	0x0800d5c9
 800d5b8:	0800d5cf 	.word	0x0800d5cf
    case HAL_OK :
      usb_status = USBD_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73fb      	strb	r3, [r7, #15]
    break;
 800d5c0:	e00b      	b.n	800d5da <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5c6:	e008      	b.n	800d5da <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d5cc:	e005      	b.n	800d5da <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d2:	e002      	b.n	800d5da <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d8:	bf00      	nop
  }
  return usb_status;  
 800d5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5fe:	78fa      	ldrb	r2, [r7, #3]
 800d600:	4611      	mov	r1, r2
 800d602:	4618      	mov	r0, r3
 800d604:	f7f6 fb34 	bl	8003c70 <HAL_PCD_EP_ClrStall>
 800d608:	4603      	mov	r3, r0
 800d60a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d816      	bhi.n	800d640 <USBD_LL_ClearStallEP+0x5c>
 800d612:	a201      	add	r2, pc, #4	; (adr r2, 800d618 <USBD_LL_ClearStallEP+0x34>)
 800d614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d618:	0800d629 	.word	0x0800d629
 800d61c:	0800d62f 	.word	0x0800d62f
 800d620:	0800d635 	.word	0x0800d635
 800d624:	0800d63b 	.word	0x0800d63b
    case HAL_OK :
      usb_status = USBD_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	73fb      	strb	r3, [r7, #15]
    break;
 800d62c:	e00b      	b.n	800d646 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d62e:	2302      	movs	r3, #2
 800d630:	73fb      	strb	r3, [r7, #15]
    break;
 800d632:	e008      	b.n	800d646 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d634:	2301      	movs	r3, #1
 800d636:	73fb      	strb	r3, [r7, #15]
    break;
 800d638:	e005      	b.n	800d646 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d63a:	2302      	movs	r3, #2
 800d63c:	73fb      	strb	r3, [r7, #15]
    break;
 800d63e:	e002      	b.n	800d646 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d640:	2302      	movs	r3, #2
 800d642:	73fb      	strb	r3, [r7, #15]
    break;
 800d644:	bf00      	nop
  }
  return usb_status; 
 800d646:	7bfb      	ldrb	r3, [r7, #15]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	460b      	mov	r3, r1
 800d65a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d662:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	da08      	bge.n	800d67e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d66c:	78fb      	ldrb	r3, [r7, #3]
 800d66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	015b      	lsls	r3, r3, #5
 800d676:	4413      	add	r3, r2
 800d678:	332a      	adds	r3, #42	; 0x2a
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	e008      	b.n	800d690 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d67e:	78fb      	ldrb	r3, [r7, #3]
 800d680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	015b      	lsls	r3, r3, #5
 800d688:	4413      	add	r3, r2
 800d68a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d68e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d690:	4618      	mov	r0, r3
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6b6:	78fa      	ldrb	r2, [r7, #3]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f6 f92f 	bl	800391e <HAL_PCD_SetAddress>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d816      	bhi.n	800d6f8 <USBD_LL_SetUSBAddress+0x5c>
 800d6ca:	a201      	add	r2, pc, #4	; (adr r2, 800d6d0 <USBD_LL_SetUSBAddress+0x34>)
 800d6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d0:	0800d6e1 	.word	0x0800d6e1
 800d6d4:	0800d6e7 	.word	0x0800d6e7
 800d6d8:	0800d6ed 	.word	0x0800d6ed
 800d6dc:	0800d6f3 	.word	0x0800d6f3
    case HAL_OK :
      usb_status = USBD_OK;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e4:	e00b      	b.n	800d6fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ea:	e008      	b.n	800d6fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f0:	e005      	b.n	800d6fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6f2:	2302      	movs	r3, #2
 800d6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f6:	e002      	b.n	800d6fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d6f8:	2302      	movs	r3, #2
 800d6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d6fc:	bf00      	nop
  }
  return usb_status;  
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	607a      	str	r2, [r7, #4]
 800d712:	461a      	mov	r2, r3
 800d714:	460b      	mov	r3, r1
 800d716:	72fb      	strb	r3, [r7, #11]
 800d718:	4613      	mov	r3, r2
 800d71a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d71c:	2300      	movs	r3, #0
 800d71e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d72a:	893b      	ldrh	r3, [r7, #8]
 800d72c:	7af9      	ldrb	r1, [r7, #11]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	f7f6 fa0b 	bl	8003b4a <HAL_PCD_EP_Transmit>
 800d734:	4603      	mov	r3, r0
 800d736:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d738:	7dbb      	ldrb	r3, [r7, #22]
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d816      	bhi.n	800d76c <USBD_LL_Transmit+0x64>
 800d73e:	a201      	add	r2, pc, #4	; (adr r2, 800d744 <USBD_LL_Transmit+0x3c>)
 800d740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d744:	0800d755 	.word	0x0800d755
 800d748:	0800d75b 	.word	0x0800d75b
 800d74c:	0800d761 	.word	0x0800d761
 800d750:	0800d767 	.word	0x0800d767
    case HAL_OK :
      usb_status = USBD_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	75fb      	strb	r3, [r7, #23]
    break;
 800d758:	e00b      	b.n	800d772 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d75a:	2302      	movs	r3, #2
 800d75c:	75fb      	strb	r3, [r7, #23]
    break;
 800d75e:	e008      	b.n	800d772 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d760:	2301      	movs	r3, #1
 800d762:	75fb      	strb	r3, [r7, #23]
    break;
 800d764:	e005      	b.n	800d772 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d766:	2302      	movs	r3, #2
 800d768:	75fb      	strb	r3, [r7, #23]
    break;
 800d76a:	e002      	b.n	800d772 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d76c:	2302      	movs	r3, #2
 800d76e:	75fb      	strb	r3, [r7, #23]
    break;
 800d770:	bf00      	nop
  }
  return usb_status;    
 800d772:	7dfb      	ldrb	r3, [r7, #23]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	607a      	str	r2, [r7, #4]
 800d786:	461a      	mov	r2, r3
 800d788:	460b      	mov	r3, r1
 800d78a:	72fb      	strb	r3, [r7, #11]
 800d78c:	4613      	mov	r3, r2
 800d78e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d79e:	893b      	ldrh	r3, [r7, #8]
 800d7a0:	7af9      	ldrb	r1, [r7, #11]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	f7f6 f982 	bl	8003aac <HAL_PCD_EP_Receive>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d7ac:	7dbb      	ldrb	r3, [r7, #22]
 800d7ae:	2b03      	cmp	r3, #3
 800d7b0:	d816      	bhi.n	800d7e0 <USBD_LL_PrepareReceive+0x64>
 800d7b2:	a201      	add	r2, pc, #4	; (adr r2, 800d7b8 <USBD_LL_PrepareReceive+0x3c>)
 800d7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b8:	0800d7c9 	.word	0x0800d7c9
 800d7bc:	0800d7cf 	.word	0x0800d7cf
 800d7c0:	0800d7d5 	.word	0x0800d7d5
 800d7c4:	0800d7db 	.word	0x0800d7db
    case HAL_OK :
      usb_status = USBD_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	75fb      	strb	r3, [r7, #23]
    break;
 800d7cc:	e00b      	b.n	800d7e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	75fb      	strb	r3, [r7, #23]
    break;
 800d7d2:	e008      	b.n	800d7e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	75fb      	strb	r3, [r7, #23]
    break;
 800d7d8:	e005      	b.n	800d7e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7da:	2302      	movs	r3, #2
 800d7dc:	75fb      	strb	r3, [r7, #23]
    break;
 800d7de:	e002      	b.n	800d7e6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	75fb      	strb	r3, [r7, #23]
    break;
 800d7e4:	bf00      	nop
  }
  return usb_status; 
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d802:	78fa      	ldrb	r2, [r7, #3]
 800d804:	4611      	mov	r1, r2
 800d806:	4618      	mov	r0, r3
 800d808:	f7f6 f98a 	bl	8003b20 <HAL_PCD_EP_GetRxCount>
 800d80c:	4603      	mov	r3, r0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
	...

0800d818 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	460b      	mov	r3, r1
 800d822:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d824:	78fb      	ldrb	r3, [r7, #3]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d002      	beq.n	800d830 <HAL_PCDEx_LPM_Callback+0x18>
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d013      	beq.n	800d856 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800d82e:	e023      	b.n	800d878 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d007      	beq.n	800d848 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d838:	f000 f83c 	bl	800d8b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d83c:	4b10      	ldr	r3, [pc, #64]	; (800d880 <HAL_PCDEx_LPM_Callback+0x68>)
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	4a0f      	ldr	r2, [pc, #60]	; (800d880 <HAL_PCDEx_LPM_Callback+0x68>)
 800d842:	f023 0306 	bic.w	r3, r3, #6
 800d846:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fa ffbd 	bl	80087ce <USBD_LL_Resume>
    break;
 800d854:	e010      	b.n	800d878 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fa ffa1 	bl	80087a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	699b      	ldr	r3, [r3, #24]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d005      	beq.n	800d876 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d86a:	4b05      	ldr	r3, [pc, #20]	; (800d880 <HAL_PCDEx_LPM_Callback+0x68>)
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	4a04      	ldr	r2, [pc, #16]	; (800d880 <HAL_PCDEx_LPM_Callback+0x68>)
 800d870:	f043 0306 	orr.w	r3, r3, #6
 800d874:	6113      	str	r3, [r2, #16]
    break;   
 800d876:	bf00      	nop
}
 800d878:	bf00      	nop
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	e000ed00 	.word	0xe000ed00

0800d884 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d88c:	4b03      	ldr	r3, [pc, #12]	; (800d89c <USBD_static_malloc+0x18>)
}
 800d88e:	4618      	mov	r0, r3
 800d890:	370c      	adds	r7, #12
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	20001ad8 	.word	0x20001ad8

0800d8a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]

}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d8b8:	f7f3 f972 	bl	8000ba0 <SystemClock_Config>
}
 800d8bc:	bf00      	nop
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <__errno>:
 800d8c0:	4b01      	ldr	r3, [pc, #4]	; (800d8c8 <__errno+0x8>)
 800d8c2:	6818      	ldr	r0, [r3, #0]
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	20000190 	.word	0x20000190

0800d8cc <__libc_init_array>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	4e0d      	ldr	r6, [pc, #52]	; (800d904 <__libc_init_array+0x38>)
 800d8d0:	4c0d      	ldr	r4, [pc, #52]	; (800d908 <__libc_init_array+0x3c>)
 800d8d2:	1ba4      	subs	r4, r4, r6
 800d8d4:	10a4      	asrs	r4, r4, #2
 800d8d6:	2500      	movs	r5, #0
 800d8d8:	42a5      	cmp	r5, r4
 800d8da:	d109      	bne.n	800d8f0 <__libc_init_array+0x24>
 800d8dc:	4e0b      	ldr	r6, [pc, #44]	; (800d90c <__libc_init_array+0x40>)
 800d8de:	4c0c      	ldr	r4, [pc, #48]	; (800d910 <__libc_init_array+0x44>)
 800d8e0:	f000 fc42 	bl	800e168 <_init>
 800d8e4:	1ba4      	subs	r4, r4, r6
 800d8e6:	10a4      	asrs	r4, r4, #2
 800d8e8:	2500      	movs	r5, #0
 800d8ea:	42a5      	cmp	r5, r4
 800d8ec:	d105      	bne.n	800d8fa <__libc_init_array+0x2e>
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}
 800d8f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8f4:	4798      	blx	r3
 800d8f6:	3501      	adds	r5, #1
 800d8f8:	e7ee      	b.n	800d8d8 <__libc_init_array+0xc>
 800d8fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8fe:	4798      	blx	r3
 800d900:	3501      	adds	r5, #1
 800d902:	e7f2      	b.n	800d8ea <__libc_init_array+0x1e>
 800d904:	0800e3f4 	.word	0x0800e3f4
 800d908:	0800e3f4 	.word	0x0800e3f4
 800d90c:	0800e3f4 	.word	0x0800e3f4
 800d910:	0800e3f8 	.word	0x0800e3f8

0800d914 <memcpy>:
 800d914:	b510      	push	{r4, lr}
 800d916:	1e43      	subs	r3, r0, #1
 800d918:	440a      	add	r2, r1
 800d91a:	4291      	cmp	r1, r2
 800d91c:	d100      	bne.n	800d920 <memcpy+0xc>
 800d91e:	bd10      	pop	{r4, pc}
 800d920:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d924:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d928:	e7f7      	b.n	800d91a <memcpy+0x6>

0800d92a <memset>:
 800d92a:	4402      	add	r2, r0
 800d92c:	4603      	mov	r3, r0
 800d92e:	4293      	cmp	r3, r2
 800d930:	d100      	bne.n	800d934 <memset+0xa>
 800d932:	4770      	bx	lr
 800d934:	f803 1b01 	strb.w	r1, [r3], #1
 800d938:	e7f9      	b.n	800d92e <memset+0x4>

0800d93a <_vsniprintf_r>:
 800d93a:	b530      	push	{r4, r5, lr}
 800d93c:	1e14      	subs	r4, r2, #0
 800d93e:	4605      	mov	r5, r0
 800d940:	b09b      	sub	sp, #108	; 0x6c
 800d942:	4618      	mov	r0, r3
 800d944:	da05      	bge.n	800d952 <_vsniprintf_r+0x18>
 800d946:	238b      	movs	r3, #139	; 0x8b
 800d948:	602b      	str	r3, [r5, #0]
 800d94a:	f04f 30ff 	mov.w	r0, #4294967295
 800d94e:	b01b      	add	sp, #108	; 0x6c
 800d950:	bd30      	pop	{r4, r5, pc}
 800d952:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d956:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d95a:	bf14      	ite	ne
 800d95c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d960:	4623      	moveq	r3, r4
 800d962:	9302      	str	r3, [sp, #8]
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d96a:	9100      	str	r1, [sp, #0]
 800d96c:	9104      	str	r1, [sp, #16]
 800d96e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d972:	4602      	mov	r2, r0
 800d974:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d976:	4669      	mov	r1, sp
 800d978:	4628      	mov	r0, r5
 800d97a:	f000 f873 	bl	800da64 <_svfiprintf_r>
 800d97e:	1c43      	adds	r3, r0, #1
 800d980:	bfbc      	itt	lt
 800d982:	238b      	movlt	r3, #139	; 0x8b
 800d984:	602b      	strlt	r3, [r5, #0]
 800d986:	2c00      	cmp	r4, #0
 800d988:	d0e1      	beq.n	800d94e <_vsniprintf_r+0x14>
 800d98a:	9b00      	ldr	r3, [sp, #0]
 800d98c:	2200      	movs	r2, #0
 800d98e:	701a      	strb	r2, [r3, #0]
 800d990:	e7dd      	b.n	800d94e <_vsniprintf_r+0x14>
	...

0800d994 <vsniprintf>:
 800d994:	b507      	push	{r0, r1, r2, lr}
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	4613      	mov	r3, r2
 800d99a:	460a      	mov	r2, r1
 800d99c:	4601      	mov	r1, r0
 800d99e:	4803      	ldr	r0, [pc, #12]	; (800d9ac <vsniprintf+0x18>)
 800d9a0:	6800      	ldr	r0, [r0, #0]
 800d9a2:	f7ff ffca 	bl	800d93a <_vsniprintf_r>
 800d9a6:	b003      	add	sp, #12
 800d9a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9ac:	20000190 	.word	0x20000190

0800d9b0 <__ssputs_r>:
 800d9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b4:	688e      	ldr	r6, [r1, #8]
 800d9b6:	429e      	cmp	r6, r3
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	4690      	mov	r8, r2
 800d9be:	4699      	mov	r9, r3
 800d9c0:	d837      	bhi.n	800da32 <__ssputs_r+0x82>
 800d9c2:	898a      	ldrh	r2, [r1, #12]
 800d9c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9c8:	d031      	beq.n	800da2e <__ssputs_r+0x7e>
 800d9ca:	6825      	ldr	r5, [r4, #0]
 800d9cc:	6909      	ldr	r1, [r1, #16]
 800d9ce:	1a6f      	subs	r7, r5, r1
 800d9d0:	6965      	ldr	r5, [r4, #20]
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d9dc:	f109 0301 	add.w	r3, r9, #1
 800d9e0:	443b      	add	r3, r7
 800d9e2:	429d      	cmp	r5, r3
 800d9e4:	bf38      	it	cc
 800d9e6:	461d      	movcc	r5, r3
 800d9e8:	0553      	lsls	r3, r2, #21
 800d9ea:	d530      	bpl.n	800da4e <__ssputs_r+0x9e>
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	f000 fb21 	bl	800e034 <_malloc_r>
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	b950      	cbnz	r0, 800da0c <__ssputs_r+0x5c>
 800d9f6:	230c      	movs	r3, #12
 800d9f8:	f8ca 3000 	str.w	r3, [sl]
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da02:	81a3      	strh	r3, [r4, #12]
 800da04:	f04f 30ff 	mov.w	r0, #4294967295
 800da08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0c:	463a      	mov	r2, r7
 800da0e:	6921      	ldr	r1, [r4, #16]
 800da10:	f7ff ff80 	bl	800d914 <memcpy>
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da1e:	81a3      	strh	r3, [r4, #12]
 800da20:	6126      	str	r6, [r4, #16]
 800da22:	6165      	str	r5, [r4, #20]
 800da24:	443e      	add	r6, r7
 800da26:	1bed      	subs	r5, r5, r7
 800da28:	6026      	str	r6, [r4, #0]
 800da2a:	60a5      	str	r5, [r4, #8]
 800da2c:	464e      	mov	r6, r9
 800da2e:	454e      	cmp	r6, r9
 800da30:	d900      	bls.n	800da34 <__ssputs_r+0x84>
 800da32:	464e      	mov	r6, r9
 800da34:	4632      	mov	r2, r6
 800da36:	4641      	mov	r1, r8
 800da38:	6820      	ldr	r0, [r4, #0]
 800da3a:	f000 fa93 	bl	800df64 <memmove>
 800da3e:	68a3      	ldr	r3, [r4, #8]
 800da40:	1b9b      	subs	r3, r3, r6
 800da42:	60a3      	str	r3, [r4, #8]
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	441e      	add	r6, r3
 800da48:	6026      	str	r6, [r4, #0]
 800da4a:	2000      	movs	r0, #0
 800da4c:	e7dc      	b.n	800da08 <__ssputs_r+0x58>
 800da4e:	462a      	mov	r2, r5
 800da50:	f000 fb4a 	bl	800e0e8 <_realloc_r>
 800da54:	4606      	mov	r6, r0
 800da56:	2800      	cmp	r0, #0
 800da58:	d1e2      	bne.n	800da20 <__ssputs_r+0x70>
 800da5a:	6921      	ldr	r1, [r4, #16]
 800da5c:	4650      	mov	r0, sl
 800da5e:	f000 fa9b 	bl	800df98 <_free_r>
 800da62:	e7c8      	b.n	800d9f6 <__ssputs_r+0x46>

0800da64 <_svfiprintf_r>:
 800da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	461d      	mov	r5, r3
 800da6a:	898b      	ldrh	r3, [r1, #12]
 800da6c:	061f      	lsls	r7, r3, #24
 800da6e:	b09d      	sub	sp, #116	; 0x74
 800da70:	4680      	mov	r8, r0
 800da72:	460c      	mov	r4, r1
 800da74:	4616      	mov	r6, r2
 800da76:	d50f      	bpl.n	800da98 <_svfiprintf_r+0x34>
 800da78:	690b      	ldr	r3, [r1, #16]
 800da7a:	b96b      	cbnz	r3, 800da98 <_svfiprintf_r+0x34>
 800da7c:	2140      	movs	r1, #64	; 0x40
 800da7e:	f000 fad9 	bl	800e034 <_malloc_r>
 800da82:	6020      	str	r0, [r4, #0]
 800da84:	6120      	str	r0, [r4, #16]
 800da86:	b928      	cbnz	r0, 800da94 <_svfiprintf_r+0x30>
 800da88:	230c      	movs	r3, #12
 800da8a:	f8c8 3000 	str.w	r3, [r8]
 800da8e:	f04f 30ff 	mov.w	r0, #4294967295
 800da92:	e0c8      	b.n	800dc26 <_svfiprintf_r+0x1c2>
 800da94:	2340      	movs	r3, #64	; 0x40
 800da96:	6163      	str	r3, [r4, #20]
 800da98:	2300      	movs	r3, #0
 800da9a:	9309      	str	r3, [sp, #36]	; 0x24
 800da9c:	2320      	movs	r3, #32
 800da9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800daa2:	2330      	movs	r3, #48	; 0x30
 800daa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daa8:	9503      	str	r5, [sp, #12]
 800daaa:	f04f 0b01 	mov.w	fp, #1
 800daae:	4637      	mov	r7, r6
 800dab0:	463d      	mov	r5, r7
 800dab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dab6:	b10b      	cbz	r3, 800dabc <_svfiprintf_r+0x58>
 800dab8:	2b25      	cmp	r3, #37	; 0x25
 800daba:	d13e      	bne.n	800db3a <_svfiprintf_r+0xd6>
 800dabc:	ebb7 0a06 	subs.w	sl, r7, r6
 800dac0:	d00b      	beq.n	800dada <_svfiprintf_r+0x76>
 800dac2:	4653      	mov	r3, sl
 800dac4:	4632      	mov	r2, r6
 800dac6:	4621      	mov	r1, r4
 800dac8:	4640      	mov	r0, r8
 800daca:	f7ff ff71 	bl	800d9b0 <__ssputs_r>
 800dace:	3001      	adds	r0, #1
 800dad0:	f000 80a4 	beq.w	800dc1c <_svfiprintf_r+0x1b8>
 800dad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad6:	4453      	add	r3, sl
 800dad8:	9309      	str	r3, [sp, #36]	; 0x24
 800dada:	783b      	ldrb	r3, [r7, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 809d 	beq.w	800dc1c <_svfiprintf_r+0x1b8>
 800dae2:	2300      	movs	r3, #0
 800dae4:	f04f 32ff 	mov.w	r2, #4294967295
 800dae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daec:	9304      	str	r3, [sp, #16]
 800daee:	9307      	str	r3, [sp, #28]
 800daf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daf4:	931a      	str	r3, [sp, #104]	; 0x68
 800daf6:	462f      	mov	r7, r5
 800daf8:	2205      	movs	r2, #5
 800dafa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dafe:	4850      	ldr	r0, [pc, #320]	; (800dc40 <_svfiprintf_r+0x1dc>)
 800db00:	f7f2 fb6e 	bl	80001e0 <memchr>
 800db04:	9b04      	ldr	r3, [sp, #16]
 800db06:	b9d0      	cbnz	r0, 800db3e <_svfiprintf_r+0xda>
 800db08:	06d9      	lsls	r1, r3, #27
 800db0a:	bf44      	itt	mi
 800db0c:	2220      	movmi	r2, #32
 800db0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db12:	071a      	lsls	r2, r3, #28
 800db14:	bf44      	itt	mi
 800db16:	222b      	movmi	r2, #43	; 0x2b
 800db18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db1c:	782a      	ldrb	r2, [r5, #0]
 800db1e:	2a2a      	cmp	r2, #42	; 0x2a
 800db20:	d015      	beq.n	800db4e <_svfiprintf_r+0xea>
 800db22:	9a07      	ldr	r2, [sp, #28]
 800db24:	462f      	mov	r7, r5
 800db26:	2000      	movs	r0, #0
 800db28:	250a      	movs	r5, #10
 800db2a:	4639      	mov	r1, r7
 800db2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db30:	3b30      	subs	r3, #48	; 0x30
 800db32:	2b09      	cmp	r3, #9
 800db34:	d94d      	bls.n	800dbd2 <_svfiprintf_r+0x16e>
 800db36:	b1b8      	cbz	r0, 800db68 <_svfiprintf_r+0x104>
 800db38:	e00f      	b.n	800db5a <_svfiprintf_r+0xf6>
 800db3a:	462f      	mov	r7, r5
 800db3c:	e7b8      	b.n	800dab0 <_svfiprintf_r+0x4c>
 800db3e:	4a40      	ldr	r2, [pc, #256]	; (800dc40 <_svfiprintf_r+0x1dc>)
 800db40:	1a80      	subs	r0, r0, r2
 800db42:	fa0b f000 	lsl.w	r0, fp, r0
 800db46:	4318      	orrs	r0, r3
 800db48:	9004      	str	r0, [sp, #16]
 800db4a:	463d      	mov	r5, r7
 800db4c:	e7d3      	b.n	800daf6 <_svfiprintf_r+0x92>
 800db4e:	9a03      	ldr	r2, [sp, #12]
 800db50:	1d11      	adds	r1, r2, #4
 800db52:	6812      	ldr	r2, [r2, #0]
 800db54:	9103      	str	r1, [sp, #12]
 800db56:	2a00      	cmp	r2, #0
 800db58:	db01      	blt.n	800db5e <_svfiprintf_r+0xfa>
 800db5a:	9207      	str	r2, [sp, #28]
 800db5c:	e004      	b.n	800db68 <_svfiprintf_r+0x104>
 800db5e:	4252      	negs	r2, r2
 800db60:	f043 0302 	orr.w	r3, r3, #2
 800db64:	9207      	str	r2, [sp, #28]
 800db66:	9304      	str	r3, [sp, #16]
 800db68:	783b      	ldrb	r3, [r7, #0]
 800db6a:	2b2e      	cmp	r3, #46	; 0x2e
 800db6c:	d10c      	bne.n	800db88 <_svfiprintf_r+0x124>
 800db6e:	787b      	ldrb	r3, [r7, #1]
 800db70:	2b2a      	cmp	r3, #42	; 0x2a
 800db72:	d133      	bne.n	800dbdc <_svfiprintf_r+0x178>
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	1d1a      	adds	r2, r3, #4
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	9203      	str	r2, [sp, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	bfb8      	it	lt
 800db80:	f04f 33ff 	movlt.w	r3, #4294967295
 800db84:	3702      	adds	r7, #2
 800db86:	9305      	str	r3, [sp, #20]
 800db88:	4d2e      	ldr	r5, [pc, #184]	; (800dc44 <_svfiprintf_r+0x1e0>)
 800db8a:	7839      	ldrb	r1, [r7, #0]
 800db8c:	2203      	movs	r2, #3
 800db8e:	4628      	mov	r0, r5
 800db90:	f7f2 fb26 	bl	80001e0 <memchr>
 800db94:	b138      	cbz	r0, 800dba6 <_svfiprintf_r+0x142>
 800db96:	2340      	movs	r3, #64	; 0x40
 800db98:	1b40      	subs	r0, r0, r5
 800db9a:	fa03 f000 	lsl.w	r0, r3, r0
 800db9e:	9b04      	ldr	r3, [sp, #16]
 800dba0:	4303      	orrs	r3, r0
 800dba2:	3701      	adds	r7, #1
 800dba4:	9304      	str	r3, [sp, #16]
 800dba6:	7839      	ldrb	r1, [r7, #0]
 800dba8:	4827      	ldr	r0, [pc, #156]	; (800dc48 <_svfiprintf_r+0x1e4>)
 800dbaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbae:	2206      	movs	r2, #6
 800dbb0:	1c7e      	adds	r6, r7, #1
 800dbb2:	f7f2 fb15 	bl	80001e0 <memchr>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d038      	beq.n	800dc2c <_svfiprintf_r+0x1c8>
 800dbba:	4b24      	ldr	r3, [pc, #144]	; (800dc4c <_svfiprintf_r+0x1e8>)
 800dbbc:	bb13      	cbnz	r3, 800dc04 <_svfiprintf_r+0x1a0>
 800dbbe:	9b03      	ldr	r3, [sp, #12]
 800dbc0:	3307      	adds	r3, #7
 800dbc2:	f023 0307 	bic.w	r3, r3, #7
 800dbc6:	3308      	adds	r3, #8
 800dbc8:	9303      	str	r3, [sp, #12]
 800dbca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbcc:	444b      	add	r3, r9
 800dbce:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd0:	e76d      	b.n	800daae <_svfiprintf_r+0x4a>
 800dbd2:	fb05 3202 	mla	r2, r5, r2, r3
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	460f      	mov	r7, r1
 800dbda:	e7a6      	b.n	800db2a <_svfiprintf_r+0xc6>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	3701      	adds	r7, #1
 800dbe0:	9305      	str	r3, [sp, #20]
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	250a      	movs	r5, #10
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbec:	3a30      	subs	r2, #48	; 0x30
 800dbee:	2a09      	cmp	r2, #9
 800dbf0:	d903      	bls.n	800dbfa <_svfiprintf_r+0x196>
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d0c8      	beq.n	800db88 <_svfiprintf_r+0x124>
 800dbf6:	9105      	str	r1, [sp, #20]
 800dbf8:	e7c6      	b.n	800db88 <_svfiprintf_r+0x124>
 800dbfa:	fb05 2101 	mla	r1, r5, r1, r2
 800dbfe:	2301      	movs	r3, #1
 800dc00:	4607      	mov	r7, r0
 800dc02:	e7f0      	b.n	800dbe6 <_svfiprintf_r+0x182>
 800dc04:	ab03      	add	r3, sp, #12
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	4622      	mov	r2, r4
 800dc0a:	4b11      	ldr	r3, [pc, #68]	; (800dc50 <_svfiprintf_r+0x1ec>)
 800dc0c:	a904      	add	r1, sp, #16
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f3af 8000 	nop.w
 800dc14:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc18:	4681      	mov	r9, r0
 800dc1a:	d1d6      	bne.n	800dbca <_svfiprintf_r+0x166>
 800dc1c:	89a3      	ldrh	r3, [r4, #12]
 800dc1e:	065b      	lsls	r3, r3, #25
 800dc20:	f53f af35 	bmi.w	800da8e <_svfiprintf_r+0x2a>
 800dc24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc26:	b01d      	add	sp, #116	; 0x74
 800dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	ab03      	add	r3, sp, #12
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	4622      	mov	r2, r4
 800dc32:	4b07      	ldr	r3, [pc, #28]	; (800dc50 <_svfiprintf_r+0x1ec>)
 800dc34:	a904      	add	r1, sp, #16
 800dc36:	4640      	mov	r0, r8
 800dc38:	f000 f882 	bl	800dd40 <_printf_i>
 800dc3c:	e7ea      	b.n	800dc14 <_svfiprintf_r+0x1b0>
 800dc3e:	bf00      	nop
 800dc40:	0800e3c0 	.word	0x0800e3c0
 800dc44:	0800e3c6 	.word	0x0800e3c6
 800dc48:	0800e3ca 	.word	0x0800e3ca
 800dc4c:	00000000 	.word	0x00000000
 800dc50:	0800d9b1 	.word	0x0800d9b1

0800dc54 <_printf_common>:
 800dc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc58:	4691      	mov	r9, r2
 800dc5a:	461f      	mov	r7, r3
 800dc5c:	688a      	ldr	r2, [r1, #8]
 800dc5e:	690b      	ldr	r3, [r1, #16]
 800dc60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc64:	4293      	cmp	r3, r2
 800dc66:	bfb8      	it	lt
 800dc68:	4613      	movlt	r3, r2
 800dc6a:	f8c9 3000 	str.w	r3, [r9]
 800dc6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc72:	4606      	mov	r6, r0
 800dc74:	460c      	mov	r4, r1
 800dc76:	b112      	cbz	r2, 800dc7e <_printf_common+0x2a>
 800dc78:	3301      	adds	r3, #1
 800dc7a:	f8c9 3000 	str.w	r3, [r9]
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	0699      	lsls	r1, r3, #26
 800dc82:	bf42      	ittt	mi
 800dc84:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dc88:	3302      	addmi	r3, #2
 800dc8a:	f8c9 3000 	strmi.w	r3, [r9]
 800dc8e:	6825      	ldr	r5, [r4, #0]
 800dc90:	f015 0506 	ands.w	r5, r5, #6
 800dc94:	d107      	bne.n	800dca6 <_printf_common+0x52>
 800dc96:	f104 0a19 	add.w	sl, r4, #25
 800dc9a:	68e3      	ldr	r3, [r4, #12]
 800dc9c:	f8d9 2000 	ldr.w	r2, [r9]
 800dca0:	1a9b      	subs	r3, r3, r2
 800dca2:	42ab      	cmp	r3, r5
 800dca4:	dc28      	bgt.n	800dcf8 <_printf_common+0xa4>
 800dca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dcaa:	6822      	ldr	r2, [r4, #0]
 800dcac:	3300      	adds	r3, #0
 800dcae:	bf18      	it	ne
 800dcb0:	2301      	movne	r3, #1
 800dcb2:	0692      	lsls	r2, r2, #26
 800dcb4:	d42d      	bmi.n	800dd12 <_printf_common+0xbe>
 800dcb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcba:	4639      	mov	r1, r7
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	47c0      	blx	r8
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	d020      	beq.n	800dd06 <_printf_common+0xb2>
 800dcc4:	6823      	ldr	r3, [r4, #0]
 800dcc6:	68e5      	ldr	r5, [r4, #12]
 800dcc8:	f8d9 2000 	ldr.w	r2, [r9]
 800dccc:	f003 0306 	and.w	r3, r3, #6
 800dcd0:	2b04      	cmp	r3, #4
 800dcd2:	bf08      	it	eq
 800dcd4:	1aad      	subeq	r5, r5, r2
 800dcd6:	68a3      	ldr	r3, [r4, #8]
 800dcd8:	6922      	ldr	r2, [r4, #16]
 800dcda:	bf0c      	ite	eq
 800dcdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dce0:	2500      	movne	r5, #0
 800dce2:	4293      	cmp	r3, r2
 800dce4:	bfc4      	itt	gt
 800dce6:	1a9b      	subgt	r3, r3, r2
 800dce8:	18ed      	addgt	r5, r5, r3
 800dcea:	f04f 0900 	mov.w	r9, #0
 800dcee:	341a      	adds	r4, #26
 800dcf0:	454d      	cmp	r5, r9
 800dcf2:	d11a      	bne.n	800dd2a <_printf_common+0xd6>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	e008      	b.n	800dd0a <_printf_common+0xb6>
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	4652      	mov	r2, sl
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	4630      	mov	r0, r6
 800dd00:	47c0      	blx	r8
 800dd02:	3001      	adds	r0, #1
 800dd04:	d103      	bne.n	800dd0e <_printf_common+0xba>
 800dd06:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd0e:	3501      	adds	r5, #1
 800dd10:	e7c3      	b.n	800dc9a <_printf_common+0x46>
 800dd12:	18e1      	adds	r1, r4, r3
 800dd14:	1c5a      	adds	r2, r3, #1
 800dd16:	2030      	movs	r0, #48	; 0x30
 800dd18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd1c:	4422      	add	r2, r4
 800dd1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd26:	3302      	adds	r3, #2
 800dd28:	e7c5      	b.n	800dcb6 <_printf_common+0x62>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	4639      	mov	r1, r7
 800dd30:	4630      	mov	r0, r6
 800dd32:	47c0      	blx	r8
 800dd34:	3001      	adds	r0, #1
 800dd36:	d0e6      	beq.n	800dd06 <_printf_common+0xb2>
 800dd38:	f109 0901 	add.w	r9, r9, #1
 800dd3c:	e7d8      	b.n	800dcf0 <_printf_common+0x9c>
	...

0800dd40 <_printf_i>:
 800dd40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dd48:	460c      	mov	r4, r1
 800dd4a:	7e09      	ldrb	r1, [r1, #24]
 800dd4c:	b085      	sub	sp, #20
 800dd4e:	296e      	cmp	r1, #110	; 0x6e
 800dd50:	4617      	mov	r7, r2
 800dd52:	4606      	mov	r6, r0
 800dd54:	4698      	mov	r8, r3
 800dd56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd58:	f000 80b3 	beq.w	800dec2 <_printf_i+0x182>
 800dd5c:	d822      	bhi.n	800dda4 <_printf_i+0x64>
 800dd5e:	2963      	cmp	r1, #99	; 0x63
 800dd60:	d036      	beq.n	800ddd0 <_printf_i+0x90>
 800dd62:	d80a      	bhi.n	800dd7a <_printf_i+0x3a>
 800dd64:	2900      	cmp	r1, #0
 800dd66:	f000 80b9 	beq.w	800dedc <_printf_i+0x19c>
 800dd6a:	2958      	cmp	r1, #88	; 0x58
 800dd6c:	f000 8083 	beq.w	800de76 <_printf_i+0x136>
 800dd70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dd78:	e032      	b.n	800dde0 <_printf_i+0xa0>
 800dd7a:	2964      	cmp	r1, #100	; 0x64
 800dd7c:	d001      	beq.n	800dd82 <_printf_i+0x42>
 800dd7e:	2969      	cmp	r1, #105	; 0x69
 800dd80:	d1f6      	bne.n	800dd70 <_printf_i+0x30>
 800dd82:	6820      	ldr	r0, [r4, #0]
 800dd84:	6813      	ldr	r3, [r2, #0]
 800dd86:	0605      	lsls	r5, r0, #24
 800dd88:	f103 0104 	add.w	r1, r3, #4
 800dd8c:	d52a      	bpl.n	800dde4 <_printf_i+0xa4>
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6011      	str	r1, [r2, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	da03      	bge.n	800dd9e <_printf_i+0x5e>
 800dd96:	222d      	movs	r2, #45	; 0x2d
 800dd98:	425b      	negs	r3, r3
 800dd9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dd9e:	486f      	ldr	r0, [pc, #444]	; (800df5c <_printf_i+0x21c>)
 800dda0:	220a      	movs	r2, #10
 800dda2:	e039      	b.n	800de18 <_printf_i+0xd8>
 800dda4:	2973      	cmp	r1, #115	; 0x73
 800dda6:	f000 809d 	beq.w	800dee4 <_printf_i+0x1a4>
 800ddaa:	d808      	bhi.n	800ddbe <_printf_i+0x7e>
 800ddac:	296f      	cmp	r1, #111	; 0x6f
 800ddae:	d020      	beq.n	800ddf2 <_printf_i+0xb2>
 800ddb0:	2970      	cmp	r1, #112	; 0x70
 800ddb2:	d1dd      	bne.n	800dd70 <_printf_i+0x30>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	f043 0320 	orr.w	r3, r3, #32
 800ddba:	6023      	str	r3, [r4, #0]
 800ddbc:	e003      	b.n	800ddc6 <_printf_i+0x86>
 800ddbe:	2975      	cmp	r1, #117	; 0x75
 800ddc0:	d017      	beq.n	800ddf2 <_printf_i+0xb2>
 800ddc2:	2978      	cmp	r1, #120	; 0x78
 800ddc4:	d1d4      	bne.n	800dd70 <_printf_i+0x30>
 800ddc6:	2378      	movs	r3, #120	; 0x78
 800ddc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ddcc:	4864      	ldr	r0, [pc, #400]	; (800df60 <_printf_i+0x220>)
 800ddce:	e055      	b.n	800de7c <_printf_i+0x13c>
 800ddd0:	6813      	ldr	r3, [r2, #0]
 800ddd2:	1d19      	adds	r1, r3, #4
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6011      	str	r1, [r2, #0]
 800ddd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dde0:	2301      	movs	r3, #1
 800dde2:	e08c      	b.n	800defe <_printf_i+0x1be>
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6011      	str	r1, [r2, #0]
 800dde8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ddec:	bf18      	it	ne
 800ddee:	b21b      	sxthne	r3, r3
 800ddf0:	e7cf      	b.n	800dd92 <_printf_i+0x52>
 800ddf2:	6813      	ldr	r3, [r2, #0]
 800ddf4:	6825      	ldr	r5, [r4, #0]
 800ddf6:	1d18      	adds	r0, r3, #4
 800ddf8:	6010      	str	r0, [r2, #0]
 800ddfa:	0628      	lsls	r0, r5, #24
 800ddfc:	d501      	bpl.n	800de02 <_printf_i+0xc2>
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	e002      	b.n	800de08 <_printf_i+0xc8>
 800de02:	0668      	lsls	r0, r5, #25
 800de04:	d5fb      	bpl.n	800ddfe <_printf_i+0xbe>
 800de06:	881b      	ldrh	r3, [r3, #0]
 800de08:	4854      	ldr	r0, [pc, #336]	; (800df5c <_printf_i+0x21c>)
 800de0a:	296f      	cmp	r1, #111	; 0x6f
 800de0c:	bf14      	ite	ne
 800de0e:	220a      	movne	r2, #10
 800de10:	2208      	moveq	r2, #8
 800de12:	2100      	movs	r1, #0
 800de14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de18:	6865      	ldr	r5, [r4, #4]
 800de1a:	60a5      	str	r5, [r4, #8]
 800de1c:	2d00      	cmp	r5, #0
 800de1e:	f2c0 8095 	blt.w	800df4c <_printf_i+0x20c>
 800de22:	6821      	ldr	r1, [r4, #0]
 800de24:	f021 0104 	bic.w	r1, r1, #4
 800de28:	6021      	str	r1, [r4, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d13d      	bne.n	800deaa <_printf_i+0x16a>
 800de2e:	2d00      	cmp	r5, #0
 800de30:	f040 808e 	bne.w	800df50 <_printf_i+0x210>
 800de34:	4665      	mov	r5, ip
 800de36:	2a08      	cmp	r2, #8
 800de38:	d10b      	bne.n	800de52 <_printf_i+0x112>
 800de3a:	6823      	ldr	r3, [r4, #0]
 800de3c:	07db      	lsls	r3, r3, #31
 800de3e:	d508      	bpl.n	800de52 <_printf_i+0x112>
 800de40:	6923      	ldr	r3, [r4, #16]
 800de42:	6862      	ldr	r2, [r4, #4]
 800de44:	429a      	cmp	r2, r3
 800de46:	bfde      	ittt	le
 800de48:	2330      	movle	r3, #48	; 0x30
 800de4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de52:	ebac 0305 	sub.w	r3, ip, r5
 800de56:	6123      	str	r3, [r4, #16]
 800de58:	f8cd 8000 	str.w	r8, [sp]
 800de5c:	463b      	mov	r3, r7
 800de5e:	aa03      	add	r2, sp, #12
 800de60:	4621      	mov	r1, r4
 800de62:	4630      	mov	r0, r6
 800de64:	f7ff fef6 	bl	800dc54 <_printf_common>
 800de68:	3001      	adds	r0, #1
 800de6a:	d14d      	bne.n	800df08 <_printf_i+0x1c8>
 800de6c:	f04f 30ff 	mov.w	r0, #4294967295
 800de70:	b005      	add	sp, #20
 800de72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de76:	4839      	ldr	r0, [pc, #228]	; (800df5c <_printf_i+0x21c>)
 800de78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800de7c:	6813      	ldr	r3, [r2, #0]
 800de7e:	6821      	ldr	r1, [r4, #0]
 800de80:	1d1d      	adds	r5, r3, #4
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6015      	str	r5, [r2, #0]
 800de86:	060a      	lsls	r2, r1, #24
 800de88:	d50b      	bpl.n	800dea2 <_printf_i+0x162>
 800de8a:	07ca      	lsls	r2, r1, #31
 800de8c:	bf44      	itt	mi
 800de8e:	f041 0120 	orrmi.w	r1, r1, #32
 800de92:	6021      	strmi	r1, [r4, #0]
 800de94:	b91b      	cbnz	r3, 800de9e <_printf_i+0x15e>
 800de96:	6822      	ldr	r2, [r4, #0]
 800de98:	f022 0220 	bic.w	r2, r2, #32
 800de9c:	6022      	str	r2, [r4, #0]
 800de9e:	2210      	movs	r2, #16
 800dea0:	e7b7      	b.n	800de12 <_printf_i+0xd2>
 800dea2:	064d      	lsls	r5, r1, #25
 800dea4:	bf48      	it	mi
 800dea6:	b29b      	uxthmi	r3, r3
 800dea8:	e7ef      	b.n	800de8a <_printf_i+0x14a>
 800deaa:	4665      	mov	r5, ip
 800deac:	fbb3 f1f2 	udiv	r1, r3, r2
 800deb0:	fb02 3311 	mls	r3, r2, r1, r3
 800deb4:	5cc3      	ldrb	r3, [r0, r3]
 800deb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800deba:	460b      	mov	r3, r1
 800debc:	2900      	cmp	r1, #0
 800debe:	d1f5      	bne.n	800deac <_printf_i+0x16c>
 800dec0:	e7b9      	b.n	800de36 <_printf_i+0xf6>
 800dec2:	6813      	ldr	r3, [r2, #0]
 800dec4:	6825      	ldr	r5, [r4, #0]
 800dec6:	6961      	ldr	r1, [r4, #20]
 800dec8:	1d18      	adds	r0, r3, #4
 800deca:	6010      	str	r0, [r2, #0]
 800decc:	0628      	lsls	r0, r5, #24
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	d501      	bpl.n	800ded6 <_printf_i+0x196>
 800ded2:	6019      	str	r1, [r3, #0]
 800ded4:	e002      	b.n	800dedc <_printf_i+0x19c>
 800ded6:	066a      	lsls	r2, r5, #25
 800ded8:	d5fb      	bpl.n	800ded2 <_printf_i+0x192>
 800deda:	8019      	strh	r1, [r3, #0]
 800dedc:	2300      	movs	r3, #0
 800dede:	6123      	str	r3, [r4, #16]
 800dee0:	4665      	mov	r5, ip
 800dee2:	e7b9      	b.n	800de58 <_printf_i+0x118>
 800dee4:	6813      	ldr	r3, [r2, #0]
 800dee6:	1d19      	adds	r1, r3, #4
 800dee8:	6011      	str	r1, [r2, #0]
 800deea:	681d      	ldr	r5, [r3, #0]
 800deec:	6862      	ldr	r2, [r4, #4]
 800deee:	2100      	movs	r1, #0
 800def0:	4628      	mov	r0, r5
 800def2:	f7f2 f975 	bl	80001e0 <memchr>
 800def6:	b108      	cbz	r0, 800defc <_printf_i+0x1bc>
 800def8:	1b40      	subs	r0, r0, r5
 800defa:	6060      	str	r0, [r4, #4]
 800defc:	6863      	ldr	r3, [r4, #4]
 800defe:	6123      	str	r3, [r4, #16]
 800df00:	2300      	movs	r3, #0
 800df02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df06:	e7a7      	b.n	800de58 <_printf_i+0x118>
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	462a      	mov	r2, r5
 800df0c:	4639      	mov	r1, r7
 800df0e:	4630      	mov	r0, r6
 800df10:	47c0      	blx	r8
 800df12:	3001      	adds	r0, #1
 800df14:	d0aa      	beq.n	800de6c <_printf_i+0x12c>
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	079b      	lsls	r3, r3, #30
 800df1a:	d413      	bmi.n	800df44 <_printf_i+0x204>
 800df1c:	68e0      	ldr	r0, [r4, #12]
 800df1e:	9b03      	ldr	r3, [sp, #12]
 800df20:	4298      	cmp	r0, r3
 800df22:	bfb8      	it	lt
 800df24:	4618      	movlt	r0, r3
 800df26:	e7a3      	b.n	800de70 <_printf_i+0x130>
 800df28:	2301      	movs	r3, #1
 800df2a:	464a      	mov	r2, r9
 800df2c:	4639      	mov	r1, r7
 800df2e:	4630      	mov	r0, r6
 800df30:	47c0      	blx	r8
 800df32:	3001      	adds	r0, #1
 800df34:	d09a      	beq.n	800de6c <_printf_i+0x12c>
 800df36:	3501      	adds	r5, #1
 800df38:	68e3      	ldr	r3, [r4, #12]
 800df3a:	9a03      	ldr	r2, [sp, #12]
 800df3c:	1a9b      	subs	r3, r3, r2
 800df3e:	42ab      	cmp	r3, r5
 800df40:	dcf2      	bgt.n	800df28 <_printf_i+0x1e8>
 800df42:	e7eb      	b.n	800df1c <_printf_i+0x1dc>
 800df44:	2500      	movs	r5, #0
 800df46:	f104 0919 	add.w	r9, r4, #25
 800df4a:	e7f5      	b.n	800df38 <_printf_i+0x1f8>
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1ac      	bne.n	800deaa <_printf_i+0x16a>
 800df50:	7803      	ldrb	r3, [r0, #0]
 800df52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df5a:	e76c      	b.n	800de36 <_printf_i+0xf6>
 800df5c:	0800e3d1 	.word	0x0800e3d1
 800df60:	0800e3e2 	.word	0x0800e3e2

0800df64 <memmove>:
 800df64:	4288      	cmp	r0, r1
 800df66:	b510      	push	{r4, lr}
 800df68:	eb01 0302 	add.w	r3, r1, r2
 800df6c:	d807      	bhi.n	800df7e <memmove+0x1a>
 800df6e:	1e42      	subs	r2, r0, #1
 800df70:	4299      	cmp	r1, r3
 800df72:	d00a      	beq.n	800df8a <memmove+0x26>
 800df74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df78:	f802 4f01 	strb.w	r4, [r2, #1]!
 800df7c:	e7f8      	b.n	800df70 <memmove+0xc>
 800df7e:	4283      	cmp	r3, r0
 800df80:	d9f5      	bls.n	800df6e <memmove+0xa>
 800df82:	1881      	adds	r1, r0, r2
 800df84:	1ad2      	subs	r2, r2, r3
 800df86:	42d3      	cmn	r3, r2
 800df88:	d100      	bne.n	800df8c <memmove+0x28>
 800df8a:	bd10      	pop	{r4, pc}
 800df8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800df94:	e7f7      	b.n	800df86 <memmove+0x22>
	...

0800df98 <_free_r>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	4605      	mov	r5, r0
 800df9c:	2900      	cmp	r1, #0
 800df9e:	d045      	beq.n	800e02c <_free_r+0x94>
 800dfa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfa4:	1f0c      	subs	r4, r1, #4
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	bfb8      	it	lt
 800dfaa:	18e4      	addlt	r4, r4, r3
 800dfac:	f000 f8d2 	bl	800e154 <__malloc_lock>
 800dfb0:	4a1f      	ldr	r2, [pc, #124]	; (800e030 <_free_r+0x98>)
 800dfb2:	6813      	ldr	r3, [r2, #0]
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	b933      	cbnz	r3, 800dfc6 <_free_r+0x2e>
 800dfb8:	6063      	str	r3, [r4, #4]
 800dfba:	6014      	str	r4, [r2, #0]
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfc2:	f000 b8c8 	b.w	800e156 <__malloc_unlock>
 800dfc6:	42a3      	cmp	r3, r4
 800dfc8:	d90c      	bls.n	800dfe4 <_free_r+0x4c>
 800dfca:	6821      	ldr	r1, [r4, #0]
 800dfcc:	1862      	adds	r2, r4, r1
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	bf04      	itt	eq
 800dfd2:	681a      	ldreq	r2, [r3, #0]
 800dfd4:	685b      	ldreq	r3, [r3, #4]
 800dfd6:	6063      	str	r3, [r4, #4]
 800dfd8:	bf04      	itt	eq
 800dfda:	1852      	addeq	r2, r2, r1
 800dfdc:	6022      	streq	r2, [r4, #0]
 800dfde:	6004      	str	r4, [r0, #0]
 800dfe0:	e7ec      	b.n	800dfbc <_free_r+0x24>
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	685a      	ldr	r2, [r3, #4]
 800dfe6:	b10a      	cbz	r2, 800dfec <_free_r+0x54>
 800dfe8:	42a2      	cmp	r2, r4
 800dfea:	d9fa      	bls.n	800dfe2 <_free_r+0x4a>
 800dfec:	6819      	ldr	r1, [r3, #0]
 800dfee:	1858      	adds	r0, r3, r1
 800dff0:	42a0      	cmp	r0, r4
 800dff2:	d10b      	bne.n	800e00c <_free_r+0x74>
 800dff4:	6820      	ldr	r0, [r4, #0]
 800dff6:	4401      	add	r1, r0
 800dff8:	1858      	adds	r0, r3, r1
 800dffa:	4282      	cmp	r2, r0
 800dffc:	6019      	str	r1, [r3, #0]
 800dffe:	d1dd      	bne.n	800dfbc <_free_r+0x24>
 800e000:	6810      	ldr	r0, [r2, #0]
 800e002:	6852      	ldr	r2, [r2, #4]
 800e004:	605a      	str	r2, [r3, #4]
 800e006:	4401      	add	r1, r0
 800e008:	6019      	str	r1, [r3, #0]
 800e00a:	e7d7      	b.n	800dfbc <_free_r+0x24>
 800e00c:	d902      	bls.n	800e014 <_free_r+0x7c>
 800e00e:	230c      	movs	r3, #12
 800e010:	602b      	str	r3, [r5, #0]
 800e012:	e7d3      	b.n	800dfbc <_free_r+0x24>
 800e014:	6820      	ldr	r0, [r4, #0]
 800e016:	1821      	adds	r1, r4, r0
 800e018:	428a      	cmp	r2, r1
 800e01a:	bf04      	itt	eq
 800e01c:	6811      	ldreq	r1, [r2, #0]
 800e01e:	6852      	ldreq	r2, [r2, #4]
 800e020:	6062      	str	r2, [r4, #4]
 800e022:	bf04      	itt	eq
 800e024:	1809      	addeq	r1, r1, r0
 800e026:	6021      	streq	r1, [r4, #0]
 800e028:	605c      	str	r4, [r3, #4]
 800e02a:	e7c7      	b.n	800dfbc <_free_r+0x24>
 800e02c:	bd38      	pop	{r3, r4, r5, pc}
 800e02e:	bf00      	nop
 800e030:	20001cf8 	.word	0x20001cf8

0800e034 <_malloc_r>:
 800e034:	b570      	push	{r4, r5, r6, lr}
 800e036:	1ccd      	adds	r5, r1, #3
 800e038:	f025 0503 	bic.w	r5, r5, #3
 800e03c:	3508      	adds	r5, #8
 800e03e:	2d0c      	cmp	r5, #12
 800e040:	bf38      	it	cc
 800e042:	250c      	movcc	r5, #12
 800e044:	2d00      	cmp	r5, #0
 800e046:	4606      	mov	r6, r0
 800e048:	db01      	blt.n	800e04e <_malloc_r+0x1a>
 800e04a:	42a9      	cmp	r1, r5
 800e04c:	d903      	bls.n	800e056 <_malloc_r+0x22>
 800e04e:	230c      	movs	r3, #12
 800e050:	6033      	str	r3, [r6, #0]
 800e052:	2000      	movs	r0, #0
 800e054:	bd70      	pop	{r4, r5, r6, pc}
 800e056:	f000 f87d 	bl	800e154 <__malloc_lock>
 800e05a:	4a21      	ldr	r2, [pc, #132]	; (800e0e0 <_malloc_r+0xac>)
 800e05c:	6814      	ldr	r4, [r2, #0]
 800e05e:	4621      	mov	r1, r4
 800e060:	b991      	cbnz	r1, 800e088 <_malloc_r+0x54>
 800e062:	4c20      	ldr	r4, [pc, #128]	; (800e0e4 <_malloc_r+0xb0>)
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	b91b      	cbnz	r3, 800e070 <_malloc_r+0x3c>
 800e068:	4630      	mov	r0, r6
 800e06a:	f000 f863 	bl	800e134 <_sbrk_r>
 800e06e:	6020      	str	r0, [r4, #0]
 800e070:	4629      	mov	r1, r5
 800e072:	4630      	mov	r0, r6
 800e074:	f000 f85e 	bl	800e134 <_sbrk_r>
 800e078:	1c43      	adds	r3, r0, #1
 800e07a:	d124      	bne.n	800e0c6 <_malloc_r+0x92>
 800e07c:	230c      	movs	r3, #12
 800e07e:	6033      	str	r3, [r6, #0]
 800e080:	4630      	mov	r0, r6
 800e082:	f000 f868 	bl	800e156 <__malloc_unlock>
 800e086:	e7e4      	b.n	800e052 <_malloc_r+0x1e>
 800e088:	680b      	ldr	r3, [r1, #0]
 800e08a:	1b5b      	subs	r3, r3, r5
 800e08c:	d418      	bmi.n	800e0c0 <_malloc_r+0x8c>
 800e08e:	2b0b      	cmp	r3, #11
 800e090:	d90f      	bls.n	800e0b2 <_malloc_r+0x7e>
 800e092:	600b      	str	r3, [r1, #0]
 800e094:	50cd      	str	r5, [r1, r3]
 800e096:	18cc      	adds	r4, r1, r3
 800e098:	4630      	mov	r0, r6
 800e09a:	f000 f85c 	bl	800e156 <__malloc_unlock>
 800e09e:	f104 000b 	add.w	r0, r4, #11
 800e0a2:	1d23      	adds	r3, r4, #4
 800e0a4:	f020 0007 	bic.w	r0, r0, #7
 800e0a8:	1ac3      	subs	r3, r0, r3
 800e0aa:	d0d3      	beq.n	800e054 <_malloc_r+0x20>
 800e0ac:	425a      	negs	r2, r3
 800e0ae:	50e2      	str	r2, [r4, r3]
 800e0b0:	e7d0      	b.n	800e054 <_malloc_r+0x20>
 800e0b2:	428c      	cmp	r4, r1
 800e0b4:	684b      	ldr	r3, [r1, #4]
 800e0b6:	bf16      	itet	ne
 800e0b8:	6063      	strne	r3, [r4, #4]
 800e0ba:	6013      	streq	r3, [r2, #0]
 800e0bc:	460c      	movne	r4, r1
 800e0be:	e7eb      	b.n	800e098 <_malloc_r+0x64>
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	6849      	ldr	r1, [r1, #4]
 800e0c4:	e7cc      	b.n	800e060 <_malloc_r+0x2c>
 800e0c6:	1cc4      	adds	r4, r0, #3
 800e0c8:	f024 0403 	bic.w	r4, r4, #3
 800e0cc:	42a0      	cmp	r0, r4
 800e0ce:	d005      	beq.n	800e0dc <_malloc_r+0xa8>
 800e0d0:	1a21      	subs	r1, r4, r0
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f000 f82e 	bl	800e134 <_sbrk_r>
 800e0d8:	3001      	adds	r0, #1
 800e0da:	d0cf      	beq.n	800e07c <_malloc_r+0x48>
 800e0dc:	6025      	str	r5, [r4, #0]
 800e0de:	e7db      	b.n	800e098 <_malloc_r+0x64>
 800e0e0:	20001cf8 	.word	0x20001cf8
 800e0e4:	20001cfc 	.word	0x20001cfc

0800e0e8 <_realloc_r>:
 800e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ea:	4607      	mov	r7, r0
 800e0ec:	4614      	mov	r4, r2
 800e0ee:	460e      	mov	r6, r1
 800e0f0:	b921      	cbnz	r1, 800e0fc <_realloc_r+0x14>
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e0f8:	f7ff bf9c 	b.w	800e034 <_malloc_r>
 800e0fc:	b922      	cbnz	r2, 800e108 <_realloc_r+0x20>
 800e0fe:	f7ff ff4b 	bl	800df98 <_free_r>
 800e102:	4625      	mov	r5, r4
 800e104:	4628      	mov	r0, r5
 800e106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e108:	f000 f826 	bl	800e158 <_malloc_usable_size_r>
 800e10c:	42a0      	cmp	r0, r4
 800e10e:	d20f      	bcs.n	800e130 <_realloc_r+0x48>
 800e110:	4621      	mov	r1, r4
 800e112:	4638      	mov	r0, r7
 800e114:	f7ff ff8e 	bl	800e034 <_malloc_r>
 800e118:	4605      	mov	r5, r0
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d0f2      	beq.n	800e104 <_realloc_r+0x1c>
 800e11e:	4631      	mov	r1, r6
 800e120:	4622      	mov	r2, r4
 800e122:	f7ff fbf7 	bl	800d914 <memcpy>
 800e126:	4631      	mov	r1, r6
 800e128:	4638      	mov	r0, r7
 800e12a:	f7ff ff35 	bl	800df98 <_free_r>
 800e12e:	e7e9      	b.n	800e104 <_realloc_r+0x1c>
 800e130:	4635      	mov	r5, r6
 800e132:	e7e7      	b.n	800e104 <_realloc_r+0x1c>

0800e134 <_sbrk_r>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4c06      	ldr	r4, [pc, #24]	; (800e150 <_sbrk_r+0x1c>)
 800e138:	2300      	movs	r3, #0
 800e13a:	4605      	mov	r5, r0
 800e13c:	4608      	mov	r0, r1
 800e13e:	6023      	str	r3, [r4, #0]
 800e140:	f7f3 f86c 	bl	800121c <_sbrk>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	d102      	bne.n	800e14e <_sbrk_r+0x1a>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	b103      	cbz	r3, 800e14e <_sbrk_r+0x1a>
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	bd38      	pop	{r3, r4, r5, pc}
 800e150:	2000d034 	.word	0x2000d034

0800e154 <__malloc_lock>:
 800e154:	4770      	bx	lr

0800e156 <__malloc_unlock>:
 800e156:	4770      	bx	lr

0800e158 <_malloc_usable_size_r>:
 800e158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e15c:	1f18      	subs	r0, r3, #4
 800e15e:	2b00      	cmp	r3, #0
 800e160:	bfbc      	itt	lt
 800e162:	580b      	ldrlt	r3, [r1, r0]
 800e164:	18c0      	addlt	r0, r0, r3
 800e166:	4770      	bx	lr

0800e168 <_init>:
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16a:	bf00      	nop
 800e16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e16e:	bc08      	pop	{r3}
 800e170:	469e      	mov	lr, r3
 800e172:	4770      	bx	lr

0800e174 <_fini>:
 800e174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e176:	bf00      	nop
 800e178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e17a:	bc08      	pop	{r3}
 800e17c:	469e      	mov	lr, r3
 800e17e:	4770      	bx	lr
