
sensor_board_rev3_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000def0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800e080  0800e080  0001e080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e338  0800e338  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e338  0800e338  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e338  0800e338  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e338  0800e338  0001e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e33c  0800e33c  0001e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800e340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce48  2000021c  0800e55c  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d064  0800e55c  0002d064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000328d9  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d52  00000000  00000000  00052b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020a8  00000000  00000000  00058878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001df0  00000000  00000000  0005a920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a098  00000000  00000000  0005c710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020228  00000000  00000000  000867a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4634  00000000  00000000  000a69d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018b004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ae8  00000000  00000000  0018b080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e068 	.word	0x0800e068

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800e068 	.word	0x0800e068

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	460b      	mov	r3, r1
 8000aba:	72fb      	strb	r3, [r7, #11]
 8000abc:	4613      	mov	r3, r2
 8000abe:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f001 ff43 	bl	8002960 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6898      	ldr	r0, [r3, #8]
 8000ade:	f107 010b 	add.w	r1, r7, #11
 8000ae2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f004 fdf8 	bl	80056dc <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6898      	ldr	r0, [r3, #8]
 8000af0:	893a      	ldrh	r2, [r7, #8]
 8000af2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f004 ff56 	bl	80059a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	889b      	ldrh	r3, [r3, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f001 ff2a 	bl	8002960 <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	460b      	mov	r3, r1
 8000b22:	72fb      	strb	r3, [r7, #11]
 8000b24:	4613      	mov	r3, r2
 8000b26:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	889b      	ldrh	r3, [r3, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	f001 ff14 	bl	8002960 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	6898      	ldr	r0, [r3, #8]
 8000b3c:	f107 010b 	add.w	r1, r7, #11
 8000b40:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b44:	2201      	movs	r2, #1
 8000b46:	f004 fdc9 	bl	80056dc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6898      	ldr	r0, [r3, #8]
 8000b4e:	893a      	ldrh	r2, [r7, #8]
 8000b50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	f004 fdc1 	bl	80056dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	889b      	ldrh	r3, [r3, #4]
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f001 fefb 	bl	8002960 <HAL_GPIO_WritePin>
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8000b7e:	2300      	movs	r3, #0
 8000b80:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8000b82:	2381      	movs	r3, #129	; 0x81
 8000b84:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8000b86:	f107 020f 	add.w	r2, r7, #15
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	216b      	movs	r1, #107	; 0x6b
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffc0 	bl	8000b14 <_icm_write_bytes>
	HAL_Delay(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f001 fc23 	bl	80023e0 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8000b9e:	f107 020f 	add.w	r2, r7, #15
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	216b      	movs	r1, #107	; 0x6b
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffb4 	bl	8000b14 <_icm_write_bytes>
    HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fc17 	bl	80023e0 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8000bb2:	f107 020c 	add.w	r2, r7, #12
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	2175      	movs	r1, #117	; 0x75
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ff76 	bl	8000aac <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8000bc0:	7b3b      	ldrb	r3, [r7, #12]
 8000bc2:	2bac      	cmp	r3, #172	; 0xac
 8000bc4:	d001      	beq.n	8000bca <icm20601_init+0x58>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e093      	b.n	8000cf2 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8000bca:	233f      	movs	r3, #63	; 0x3f
 8000bcc:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8000bce:	f107 020f 	add.w	r2, r7, #15
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	216c      	movs	r1, #108	; 0x6c
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff9c 	bl	8000b14 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000be0:	f107 020f 	add.w	r2, r7, #15
 8000be4:	2301      	movs	r3, #1
 8000be6:	216a      	movs	r1, #106	; 0x6a
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff93 	bl	8000b14 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8000bee:	2341      	movs	r3, #65	; 0x41
 8000bf0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000bf2:	f107 020f 	add.w	r2, r7, #15
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	216a      	movs	r1, #106	; 0x6a
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff8a 	bl	8000b14 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d102      	bne.n	8000c0e <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8000c08:	2308      	movs	r3, #8
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e002      	b.n	8000c14 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7b1b      	ldrb	r3, [r3, #12]
 8000c12:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8000c14:	f107 020f 	add.w	r2, r7, #15
 8000c18:	2301      	movs	r3, #1
 8000c1a:	211d      	movs	r1, #29
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff79 	bl	8000b14 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b5b      	ldrb	r3, [r3, #13]
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8000c2c:	f107 020f 	add.w	r2, r7, #15
 8000c30:	2301      	movs	r3, #1
 8000c32:	211c      	movs	r1, #28
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff6d 	bl	8000b14 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7b9b      	ldrb	r3, [r3, #14]
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d119      	bne.n	8000c76 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000c46:	f107 020f 	add.w	r2, r7, #15
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	211a      	movs	r1, #26
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ff60 	bl	8000b14 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7bdb      	ldrb	r3, [r3, #15]
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000c66:	f107 020f 	add.w	r2, r7, #15
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	211b      	movs	r1, #27
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff50 	bl	8000b14 <_icm_write_bytes>
 8000c74:	e033      	b.n	8000cde <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b9b      	ldrb	r3, [r3, #14]
 8000c7a:	2b09      	cmp	r3, #9
 8000c7c:	d119      	bne.n	8000cb2 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000c82:	f107 020f 	add.w	r2, r7, #15
 8000c86:	2301      	movs	r3, #1
 8000c88:	211a      	movs	r1, #26
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff42 	bl	8000b14 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7bdb      	ldrb	r3, [r3, #15]
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000ca2:	f107 020f 	add.w	r2, r7, #15
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	211b      	movs	r1, #27
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ff32 	bl	8000b14 <_icm_write_bytes>
 8000cb0:	e015      	b.n	8000cde <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b9b      	ldrb	r3, [r3, #14]
 8000cb6:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000cb8:	f107 020f 	add.w	r2, r7, #15
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	211a      	movs	r1, #26
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff27 	bl	8000b14 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7bdb      	ldrb	r3, [r3, #15]
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000cd0:	f107 020f 	add.w	r2, r7, #15
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	211b      	movs	r1, #27
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff1b 	bl	8000b14 <_icm_write_bytes>
     }


    tmp = 0x00;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8000ce2:	f107 020f 	add.w	r2, r7, #15
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	216c      	movs	r1, #108	; 0x6c
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff12 	bl	8000b14 <_icm_write_bytes>


    return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8000d0e:	f107 0208 	add.w	r2, r7, #8
 8000d12:	2306      	movs	r3, #6
 8000d14:	213b      	movs	r1, #59	; 0x3b
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fec8 	bl	8000aac <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8000d1c:	7a3b      	ldrb	r3, [r7, #8]
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	801a      	strh	r2, [r3, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d38:	7a7b      	ldrb	r3, [r7, #9]
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8000d44:	7aba      	ldrb	r2, [r7, #10]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	b212      	sxth	r2, r2
 8000d4c:	801a      	strh	r2, [r3, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3302      	adds	r3, #2
 8000d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d56:	021a      	lsls	r2, r3, #8
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	b212      	sxth	r2, r2
 8000d5e:	801a      	strh	r2, [r3, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3302      	adds	r3, #2
 8000d64:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d68:	7afb      	ldrb	r3, [r7, #11]
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3302      	adds	r3, #2
 8000d70:	430a      	orrs	r2, r1
 8000d72:	b212      	sxth	r2, r2
 8000d74:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8000d76:	7b3a      	ldrb	r2, [r7, #12]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	b212      	sxth	r2, r2
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	3304      	adds	r3, #4
 8000d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d88:	021a      	lsls	r2, r3, #8
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	b212      	sxth	r2, r2
 8000d90:	801a      	strh	r2, [r3, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3304      	adds	r3, #4
 8000d96:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d9a:	7b7b      	ldrb	r3, [r7, #13]
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3304      	adds	r3, #4
 8000da2:	430a      	orrs	r2, r1
 8000da4:	b212      	sxth	r2, r2
 8000da6:	801a      	strh	r2, [r3, #0]
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8000dc4:	f107 0208 	add.w	r2, r7, #8
 8000dc8:	2306      	movs	r3, #6
 8000dca:	2143      	movs	r1, #67	; 0x43
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fe6d 	bl	8000aac <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8000dd2:	7a3b      	ldrb	r3, [r7, #8]
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dee:	7a7b      	ldrb	r3, [r7, #9]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 8000dfa:	7aba      	ldrb	r2, [r7, #10]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	b212      	sxth	r2, r2
 8000e02:	801a      	strh	r2, [r3, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3302      	adds	r3, #2
 8000e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0c:	021a      	lsls	r2, r3, #8
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3302      	adds	r3, #2
 8000e12:	b212      	sxth	r2, r2
 8000e14:	801a      	strh	r2, [r3, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e1e:	7afb      	ldrb	r3, [r7, #11]
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	3302      	adds	r3, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	b212      	sxth	r2, r2
 8000e2a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8000e2c:	7b3a      	ldrb	r2, [r7, #12]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3304      	adds	r3, #4
 8000e32:	b212      	sxth	r2, r2
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	021a      	lsls	r2, r3, #8
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3304      	adds	r3, #4
 8000e44:	b212      	sxth	r2, r2
 8000e46:	801a      	strh	r2, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3304      	adds	r3, #4
 8000e4c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e50:	7b7b      	ldrb	r3, [r7, #13]
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3304      	adds	r3, #4
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	b212      	sxth	r2, r2
 8000e5c:	801a      	strh	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8000e70:	2300      	movs	r3, #0
 8000e72:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	2302      	movs	r3, #2
 8000e7a:	2141      	movs	r1, #65	; 0x41
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fe15 	bl	8000aac <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8000e82:	7b3b      	ldrb	r3, [r7, #12]
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	801a      	strh	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	801a      	strh	r2, [r3, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	801a      	strh	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	0000      	movs	r0, r0
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <_get_conversion_ticks>:
    dst |= (src_low); \
  } while (0);

// *** Local functions *** //

uint32_t _get_conversion_ticks(struct ms5607_dev * dev){
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	uint32_t time;
	time = (BARO_CONVERSION_TIME_OSR_BASE * (dev->osr+1) * osKernelGetTickFreq()) / 1000;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a1b      	ldrb	r3, [r3, #8]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb2c 	bl	8000524 <__aeabi_i2d>
 8000ecc:	a319      	add	r3, pc, #100	; (adr r3, 8000f34 <_get_conversion_ticks+0x7c>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb91 	bl	80005f8 <__aeabi_dmul>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	4625      	mov	r5, r4
 8000edc:	461c      	mov	r4, r3
 8000ede:	f008 fafb 	bl	80094d8 <osKernelGetTickFreq>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb0d 	bl	8000504 <__aeabi_ui2d>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4620      	mov	r0, r4
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	f7ff fb81 	bl	80005f8 <__aeabi_dmul>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	4618      	mov	r0, r3
 8000efc:	4621      	mov	r1, r4
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <_get_conversion_ticks+0x78>)
 8000f04:	f7ff fca2 	bl	800084c <__aeabi_ddiv>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	460c      	mov	r4, r1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	4621      	mov	r1, r4
 8000f10:	f7ff fdac 	bl	8000a6c <__aeabi_d2uiz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	60fb      	str	r3, [r7, #12]
	if (time < 1) time = 1;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <_get_conversion_ticks+0x6a>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
	return time;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2c:	f3af 8000 	nop.w
 8000f30:	408f4000 	.word	0x408f4000
 8000f34:	33333333 	.word	0x33333333
 8000f38:	3fe33333 	.word	0x3fe33333

08000f3c <_ms_read_bytes>:

// Read bytes
void _ms_read_bytes(struct ms5607_dev * dev, uint8_t command, uint8_t *pData, uint16_t size){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	461a      	mov	r2, r3
 8000f48:	460b      	mov	r3, r1
 8000f4a:	72fb      	strb	r3, [r7, #11]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6858      	ldr	r0, [r3, #4]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	f107 020b 	add.w	r2, r7, #11
 8000f5e:	230a      	movs	r3, #10
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	f001 fda4 	bl	8002ab0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->i2c_address, pData, size, BARO_I2C_TIMEOUT);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6858      	ldr	r0, [r3, #4]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	893a      	ldrh	r2, [r7, #8]
 8000f74:	230a      	movs	r3, #10
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	f001 fe8c 	bl	8002c98 <HAL_I2C_Master_Receive>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ms_write_command>:

// Write command
void _ms_write_command(struct ms5607_dev * dev, uint8_t command){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6858      	ldr	r0, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	1cfa      	adds	r2, r7, #3
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f001 fd83 	bl	8002ab0 <HAL_I2C_Master_Transmit>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_read_calibration>:

void _read_calibration(struct ms5607_dev * dev){
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	e038      	b.n	8001032 <_read_calibration+0x80>
		uint8_t rec[2] = {0};
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	813b      	strh	r3, [r7, #8]
		_ms_read_bytes(dev, COMMAND_PROM_READ_BASE+(2*(i+1)), rec, 2);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3351      	adds	r3, #81	; 0x51
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b2d9      	uxtb	r1, r3
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffb1 	bl	8000f3c <_ms_read_bytes>
		UINT8_TO_UINT16(dev->coefficients[i],rec[0], rec[1]);
 8000fda:	7a3b      	ldrb	r3, [r7, #8]
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	460a      	mov	r2, r1
 8000fea:	805a      	strh	r2, [r3, #2]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	885b      	ldrh	r3, [r3, #2]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	805a      	strh	r2, [r3, #2]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3304      	adds	r3, #4
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	885a      	ldrh	r2, [r3, #2]
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	b29b      	uxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b299      	uxth	r1, r3
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3304      	adds	r3, #4
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	460a      	mov	r2, r1
 800102a:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < 6; i++){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b05      	cmp	r3, #5
 8001036:	ddc3      	ble.n	8000fc0 <_read_calibration+0xe>
	}
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <ms5607_init>:

// *** Global functions *** //

void ms5607_init(struct ms5607_dev * dev){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	uint32_t reset_time;
	reset_time = 3 * osKernelGetTickFreq() / 1000;
 8001048:	f008 fa46 	bl	80094d8 <osKernelGetTickFreq>
 800104c:	4602      	mov	r2, r0
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <ms5607_init+0x3c>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	099b      	lsrs	r3, r3, #6
 800105c:	60fb      	str	r3, [r7, #12]
	// General Procedure:
	//  1. reset chip
	//  2. Read out calibration

	// Reset chip
	_ms_write_command(dev, COMMAND_RESET);
 800105e:	211e      	movs	r1, #30
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff91 	bl	8000f88 <_ms_write_command>
	osDelay(reset_time);
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f008 fae6 	bl	8009638 <osDelay>

	// Read calibration
	_read_calibration(dev);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffa0 	bl	8000fb2 <_read_calibration>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	10624dd3 	.word	0x10624dd3

08001080 <ms5607_read_raw_pres_temp>:

void ms5607_read_raw_pres_temp(struct ms5607_dev * dev, int32_t *pressure_raw, int32_t *temperature_raw){
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	uint32_t wait_time;
	uint8_t command;
	uint8_t rec[3] = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2100      	movs	r1, #0
 8001092:	460a      	mov	r2, r1
 8001094:	801a      	strh	r2, [r3, #0]
 8001096:	460a      	mov	r2, r1
 8001098:	709a      	strb	r2, [r3, #2]

	// figure out how many ticks a conversion needs
	wait_time = _get_conversion_ticks(dev);
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f7ff ff0c 	bl	8000eb8 <_get_conversion_ticks>
 80010a0:	6178      	str	r0, [r7, #20]

	// initiate pressure conversion
	command = COMMAND_CONVERT_D1_BASE + (dev->osr *2);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	7a1b      	ldrb	r3, [r3, #8]
 80010a6:	3320      	adds	r3, #32
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 80010ae:	7cfb      	ldrb	r3, [r7, #19]
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ff68 	bl	8000f88 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 80010b8:	6978      	ldr	r0, [r7, #20]
 80010ba:	f008 fabd 	bl	8009638 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 80010be:	f107 0210 	add.w	r2, r7, #16
 80010c2:	2303      	movs	r3, #3
 80010c4:	2100      	movs	r1, #0
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff ff38 	bl	8000f3c <_ms_read_bytes>
	*pressure_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	041a      	lsls	r2, r3, #16
 80010d0:	7c7b      	ldrb	r3, [r7, #17]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	4313      	orrs	r3, r2
 80010d6:	7cba      	ldrb	r2, [r7, #18]
 80010d8:	431a      	orrs	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]

	command = COMMAND_CONVERT_D2_BASE + (dev->osr *2);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	7a1b      	ldrb	r3, [r3, #8]
 80010e2:	3328      	adds	r3, #40	; 0x28
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 80010ea:	7cfb      	ldrb	r3, [r7, #19]
 80010ec:	4619      	mov	r1, r3
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff ff4a 	bl	8000f88 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 80010f4:	6978      	ldr	r0, [r7, #20]
 80010f6:	f008 fa9f 	bl	8009638 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 80010fa:	f107 0210 	add.w	r2, r7, #16
 80010fe:	2303      	movs	r3, #3
 8001100:	2100      	movs	r1, #0
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff1a 	bl	8000f3c <_ms_read_bytes>
	*temperature_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 8001108:	7c3b      	ldrb	r3, [r7, #16]
 800110a:	041a      	lsls	r2, r3, #16
 800110c:	7c7b      	ldrb	r3, [r7, #17]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	4313      	orrs	r3, r2
 8001112:	7cba      	ldrb	r2, [r7, #18]
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <ms5607_read_pres_temp>:

void ms5607_read_pres_temp(struct ms5607_dev * dev, int32_t *temperature, int32_t *pressure){
 8001122:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
	int32_t pressure_raw;
	int32_t temperature_raw;

	ms5607_read_raw_pres_temp(dev, &pressure_raw, &temperature_raw);
 8001130:	f107 0210 	add.w	r2, r7, #16
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff ffa0 	bl	8001080 <ms5607_read_raw_pres_temp>

	// Calculate real values with coefficients
	int64_t dT;
	int64_t OFF, SENS;

	dT = temperature_raw - ((uint32_t) dev->coefficients[4] << 8);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8a5b      	ldrh	r3, [r3, #18]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f04f 0400 	mov.w	r4, #0
 8001150:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	/* Temperature in 2000  = 20.00° C */
	*temperature = (int32_t) 2000 + (dT * dev->coefficients[5] >> 23);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8a9b      	ldrh	r3, [r3, #20]
 8001158:	b29b      	uxth	r3, r3
 800115a:	f04f 0400 	mov.w	r4, #0
 800115e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001160:	fb04 f102 	mul.w	r1, r4, r2
 8001164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001166:	fb03 f202 	mul.w	r2, r3, r2
 800116a:	440a      	add	r2, r1
 800116c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800116e:	fba1 3403 	umull	r3, r4, r1, r3
 8001172:	4422      	add	r2, r4
 8001174:	4614      	mov	r4, r2
 8001176:	f04f 0100 	mov.w	r1, #0
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	0dd9      	lsrs	r1, r3, #23
 8001180:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8001184:	15e2      	asrs	r2, r4, #23
 8001186:	460b      	mov	r3, r1
 8001188:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800118c:	461a      	mov	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	601a      	str	r2, [r3, #0]

	OFF = ((int64_t) dev->coefficients[1] << 17) + ((dev->coefficients[3] * dT) >> 6);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	899b      	ldrh	r3, [r3, #12]
 8001196:	b29b      	uxth	r3, r3
 8001198:	f04f 0400 	mov.w	r4, #0
 800119c:	ea4f 39d3 	mov.w	r9, r3, lsr #15
 80011a0:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8a1b      	ldrh	r3, [r3, #16]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f04f 0400 	mov.w	r4, #0
 80011ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b0:	fb04 f102 	mul.w	r1, r4, r2
 80011b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b6:	fb03 f202 	mul.w	r2, r3, r2
 80011ba:	1888      	adds	r0, r1, r2
 80011bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011be:	fba2 1203 	umull	r1, r2, r2, r3
 80011c2:	1883      	adds	r3, r0, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	f04f 0b00 	mov.w	fp, #0
 80011ca:	f04f 0c00 	mov.w	ip, #0
 80011ce:	ea4f 1b91 	mov.w	fp, r1, lsr #6
 80011d2:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 80011d6:	ea4f 1ca2 	mov.w	ip, r2, asr #6
 80011da:	eb1b 0308 	adds.w	r3, fp, r8
 80011de:	eb4c 0409 	adc.w	r4, ip, r9
 80011e2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	SENS = ((int64_t) dev->coefficients[0] << 16) + ((dev->coefficients[2] * dT) >> 7);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	895b      	ldrh	r3, [r3, #10]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f04f 0400 	mov.w	r4, #0
 80011f0:	0c1e      	lsrs	r6, r3, #16
 80011f2:	041d      	lsls	r5, r3, #16
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	89db      	ldrh	r3, [r3, #14]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	f04f 0400 	mov.w	r4, #0
 80011fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001200:	fb04 f102 	mul.w	r1, r4, r2
 8001204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001206:	fb03 f202 	mul.w	r2, r3, r2
 800120a:	1888      	adds	r0, r1, r2
 800120c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800120e:	fba2 1203 	umull	r1, r2, r2, r3
 8001212:	1883      	adds	r3, r0, r2
 8001214:	461a      	mov	r2, r3
 8001216:	f04f 0800 	mov.w	r8, #0
 800121a:	f04f 0900 	mov.w	r9, #0
 800121e:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8001222:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8001226:	ea4f 19e2 	mov.w	r9, r2, asr #7
 800122a:	eb18 0305 	adds.w	r3, r8, r5
 800122e:	eb49 0406 	adc.w	r4, r9, r6
 8001232:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* Pressure in 110002 = 1100.02 mbar */
	*pressure = (int32_t) ((((pressure_raw * SENS) >> 21) - OFF) >> 15);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	fb04 f102 	mul.w	r1, r4, r2
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	1888      	adds	r0, r1, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	fba2 1203 	umull	r1, r2, r2, r3
 8001250:	1883      	adds	r3, r0, r2
 8001252:	461a      	mov	r2, r3
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	f04f 0400 	mov.w	r4, #0
 800125c:	0d4b      	lsrs	r3, r1, #21
 800125e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8001262:	1554      	asrs	r4, r2, #21
 8001264:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001268:	1a5b      	subs	r3, r3, r1
 800126a:	eb64 0402 	sbc.w	r4, r4, r2
 800126e:	461d      	mov	r5, r3
 8001270:	4626      	mov	r6, r4
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	f04f 0400 	mov.w	r4, #0
 800127a:	0beb      	lsrs	r3, r5, #15
 800127c:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8001280:	13f4      	asrs	r4, r6, #15
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3730      	adds	r7, #48	; 0x30
 800128c:	46bd      	mov	sp, r7
 800128e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b08d      	sub	sp, #52	; 0x34
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f001 f86a 	bl	8002372 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USB_DEVICE_Init();
 800129e:	f00b fd15 	bl	800cccc <MX_USB_DEVICE_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f891 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 f9cf 	bl	8001648 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012aa:	f000 f911 	bl	80014d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012ae:	f000 f94f 	bl	8001550 <MX_SPI1_Init>
  MX_SPI2_Init();
 80012b2:	f000 f98b 	bl	80015cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012b6:	f008 f87d 	bl	80093b4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  /* Barometer Mutex */
  const osMutexAttr_t baro_mutex_attr = {
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <main+0xdc>)
 80012bc:	f107 0420 	add.w	r4, r7, #32
 80012c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  baro_mutex = osMutexNew(&baro_mutex_attr);
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	4618      	mov	r0, r3
 80012cc:	f008 fa22 	bl	8009714 <osMutexNew>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <main+0xe0>)
 80012d4:	601a      	str	r2, [r3, #0]
  /* IMU Mutex */
  const osMutexAttr_t imu_mutex_attr = {
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <main+0xe4>)
 80012d8:	f107 0410 	add.w	r4, r7, #16
 80012dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  imu_mutex = osMutexNew(&imu_mutex_attr);
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4618      	mov	r0, r3
 80012e8:	f008 fa14 	bl	8009714 <osMutexNew>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <main+0xe8>)
 80012f0:	601a      	str	r2, [r3, #0]


#ifdef DEBUG
  const osMutexAttr_t print_mutex_attr = {
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <main+0xec>)
 80012f4:	463c      	mov	r4, r7
 80012f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  osMutexPrioInherit,    					  // attr_bits
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};

  print_mutex = osMutexNew(&print_mutex_attr);
 80012fc:	463b      	mov	r3, r7
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 fa08 	bl	8009714 <osMutexNew>
 8001304:	4602      	mov	r2, r0
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <main+0xf0>)
 8001308:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  preprocess_queue = osMessageQueueNew(PREPROCESS_QUEUE_SIZE, sizeof(imu_data_t), NULL);
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	2020      	movs	r0, #32
 8001310:	f008 fb48 	bl	80099a4 <osMessageQueueNew>
 8001314:	4602      	mov	r2, r0
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <main+0xf4>)
 8001318:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <main+0xf8>)
 800131c:	2100      	movs	r1, #0
 800131e:	481c      	ldr	r0, [pc, #112]	; (8001390 <main+0xfc>)
 8001320:	f008 f8e4 	bl	80094ec <osThreadNew>
 8001324:	4602      	mov	r2, r0
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <main+0x100>)
 8001328:	601a      	str	r2, [r3, #0]

  /* creation of task_baro_read */
  task_baro_readHandle = osThreadNew(vTaskBaroRead, NULL, &task_baro_read_attributes);
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <main+0x104>)
 800132c:	2100      	movs	r1, #0
 800132e:	481b      	ldr	r0, [pc, #108]	; (800139c <main+0x108>)
 8001330:	f008 f8dc 	bl	80094ec <osThreadNew>
 8001334:	4602      	mov	r2, r0
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <main+0x10c>)
 8001338:	601a      	str	r2, [r3, #0]

  /* creation of task_imu_read */
  task_imu_readHandle = osThreadNew(vTaskImuRead, NULL, &task_imu_read_attributes);
 800133a:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <main+0x110>)
 800133c:	2100      	movs	r1, #0
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <main+0x114>)
 8001340:	f008 f8d4 	bl	80094ec <osThreadNew>
 8001344:	4602      	mov	r2, r0
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <main+0x118>)
 8001348:	601a      	str	r2, [r3, #0]

  /* creation of task_send_to_mb */
  task_send_to_mbHandle = osThreadNew(vTaskSendToMb, NULL, &task_send_to_mb_attributes);
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <main+0x11c>)
 800134c:	2100      	movs	r1, #0
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <main+0x120>)
 8001350:	f008 f8cc 	bl	80094ec <osThreadNew>
 8001354:	4602      	mov	r2, r0
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <main+0x124>)
 8001358:	601a      	str	r2, [r3, #0]

  /* creation of task_preprocess */
  task_preprocessHandle = osThreadNew(vTaskPreprocess, NULL, &task_preprocess_attributes);
 800135a:	4a18      	ldr	r2, [pc, #96]	; (80013bc <main+0x128>)
 800135c:	2100      	movs	r1, #0
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <main+0x12c>)
 8001360:	f008 f8c4 	bl	80094ec <osThreadNew>
 8001364:	4602      	mov	r2, r0
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <main+0x130>)
 8001368:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800136a:	f008 f857 	bl	800941c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800136e:	e7fe      	b.n	800136e <main+0xda>
 8001370:	0800e0d8 	.word	0x0800e0d8
 8001374:	2000c0d0 	.word	0x2000c0d0
 8001378:	0800e0f4 	.word	0x0800e0f4
 800137c:	20005f5c 	.word	0x20005f5c
 8001380:	0800e110 	.word	0x0800e110
 8001384:	2000c054 	.word	0x2000c054
 8001388:	20001df0 	.word	0x20001df0
 800138c:	0800e208 	.word	0x0800e208
 8001390:	0800170d 	.word	0x0800170d
 8001394:	20001d90 	.word	0x20001d90
 8001398:	0800e22c 	.word	0x0800e22c
 800139c:	08001b71 	.word	0x08001b71
 80013a0:	2000a04c 	.word	0x2000a04c
 80013a4:	0800e250 	.word	0x0800e250
 80013a8:	08001c31 	.word	0x08001c31
 80013ac:	2000c0bc 	.word	0x2000c0bc
 80013b0:	0800e274 	.word	0x0800e274
 80013b4:	08002171 	.word	0x08002171
 80013b8:	20006048 	.word	0x20006048
 80013bc:	0800e298 	.word	0x0800e298
 80013c0:	08001e29 	.word	0x08001e29
 80013c4:	2000a050 	.word	0x2000a050

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ae      	sub	sp, #184	; 0xb8
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d2:	2244      	movs	r2, #68	; 0x44
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00c fa27 	bl	800d82a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2260      	movs	r2, #96	; 0x60
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00c fa19 	bl	800d82a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013f8:	2310      	movs	r3, #16
 80013fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001408:	2360      	movs	r3, #96	; 0x60
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001414:	2301      	movs	r3, #1
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001420:	2328      	movs	r3, #40	; 0x28
 8001422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001426:	2307      	movs	r3, #7
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800143c:	4618      	mov	r0, r3
 800143e:	f002 ff4f 	bl	80042e0 <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001448:	f000 f97c 	bl	8001744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	230f      	movs	r3, #15
 800144e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001450:	2303      	movs	r3, #3
 8001452:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001460:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001464:	2104      	movs	r1, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fb5a 	bl	8004b20 <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001472:	f000 f967 	bl	8001744 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8001476:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800147a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001480:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001484:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001486:	2301      	movs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800148e:	2318      	movs	r3, #24
 8001490:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001492:	2307      	movs	r3, #7
 8001494:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800149e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fd5a 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80014b2:	f000 f947 	bl	8001744 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ba:	f002 feab 	bl	8004214 <HAL_PWREx_ControlVoltageScaling>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80014c4:	f000 f93e 	bl	8001744 <Error_Handler>
  }
}
 80014c8:	bf00      	nop
 80014ca:	37b8      	adds	r7, #184	; 0xb8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_I2C1_Init+0x74>)
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_I2C1_Init+0x78>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_I2C1_Init+0x74>)
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <MX_I2C1_Init+0x7c>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_I2C1_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <MX_I2C1_Init+0x74>)
 800150c:	f001 fa40 	bl	8002990 <HAL_I2C_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001516:	f000 f915 	bl	8001744 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151a:	2100      	movs	r1, #0
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <MX_I2C1_Init+0x74>)
 800151e:	f001 fe91 	bl	8003244 <HAL_I2CEx_ConfigAnalogFilter>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001528:	f000 f90c 	bl	8001744 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800152c:	2100      	movs	r1, #0
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_I2C1_Init+0x74>)
 8001530:	f001 fed3 	bl	80032da <HAL_I2CEx_ConfigDigitalFilter>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800153a:	f000 f903 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001f10 	.word	0x20001f10
 8001548:	40005400 	.word	0x40005400
 800154c:	00702991 	.word	0x00702991

08001550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001556:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <MX_SPI1_Init+0x78>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_SPI1_Init+0x74>)
 800155c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_SPI1_Init+0x74>)
 800156a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800156e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_SPI1_Init+0x74>)
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001586:	2218      	movs	r2, #24
 8001588:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_SPI1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_SPI1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_SPI1_Init+0x74>)
 800159e:	2207      	movs	r2, #7
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_SPI1_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_SPI1_Init+0x74>)
 80015aa:	2208      	movs	r2, #8
 80015ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_SPI1_Init+0x74>)
 80015b0:	f004 f80a 	bl	80055c8 <HAL_SPI_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ba:	f000 f8c3 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000c058 	.word	0x2000c058
 80015c8:	40013000 	.word	0x40013000

080015cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_SPI2_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_SPI2_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_SPI2_Init+0x74>)
 80015d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI2_Init+0x74>)
 80015e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI2_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SPI2_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI2_Init+0x74>)
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI2_Init+0x74>)
 8001602:	2220      	movs	r2, #32
 8001604:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI2_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI2_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_SPI2_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI2_Init+0x74>)
 800161a:	2207      	movs	r2, #7
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_SPI2_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI2_Init+0x74>)
 8001626:	2208      	movs	r2, #8
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_SPI2_Init+0x74>)
 800162c:	f003 ffcc 	bl	80055c8 <HAL_SPI_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001636:	f000 f885 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20001df4 	.word	0x20001df4
 8001644:	40003800 	.word	0x40003800

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <MX_GPIO_Init+0xbc>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <MX_GPIO_Init+0xbc>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <MX_GPIO_Init+0xbc>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_GPIO_Init+0xbc>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <MX_GPIO_Init+0xbc>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_GPIO_Init+0xbc>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <MX_GPIO_Init+0xbc>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_GPIO_Init+0xbc>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_GPIO_Init+0xbc>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2110      	movs	r1, #16
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f001 f957 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b8:	4813      	ldr	r0, [pc, #76]	; (8001708 <MX_GPIO_Init+0xc0>)
 80016ba:	f001 f951 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016be:	2310      	movs	r3, #16
 80016c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d8:	f000 ffc8 	bl	800266c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4619      	mov	r1, r3
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_GPIO_Init+0xc0>)
 80016f6:	f000 ffb9 	bl	800266c <HAL_GPIO_Init>

}
 80016fa:	bf00      	nop
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	48000400 	.word	0x48000400

0800170c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001714:	f00b fada 	bl	800cccc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001718:	2001      	movs	r0, #1
 800171a:	f007 ff8d 	bl	8009638 <osDelay>
 800171e:	e7fb      	b.n	8001718 <StartDefaultTask+0xc>

08001720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001732:	f000 fe37 	bl	80023a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40012c00 	.word	0x40012c00

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_MspInit+0x4c>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6613      	str	r3, [r2, #96]	; 0x60
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_MspInit+0x4c>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_MspInit+0x4c>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_MspInit+0x4c>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6593      	str	r3, [r2, #88]	; 0x58
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	210f      	movs	r1, #15
 800178e:	f06f 0001 	mvn.w	r0, #1
 8001792:	f000 feff 	bl	8002594 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_I2C_MspInit+0x80>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d129      	bne.n	800181a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_I2C_MspInit+0x84>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_I2C_MspInit+0x84>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_I2C_MspInit+0x84>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e4:	2312      	movs	r3, #18
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f0:	2304      	movs	r3, #4
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fe:	f000 ff35 	bl	800266c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_I2C_MspInit+0x84>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_I2C_MspInit+0x84>)
 8001808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180c:	6593      	str	r3, [r2, #88]	; 0x58
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_I2C_MspInit+0x84>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40005400 	.word	0x40005400
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_SPI_MspInit+0xec>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d129      	bne.n	80018a2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <HAL_SPI_MspInit+0xf0>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	4a32      	ldr	r2, [pc, #200]	; (800191c <HAL_SPI_MspInit+0xf0>)
 8001854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001858:	6613      	str	r3, [r2, #96]	; 0x60
 800185a:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_SPI_MspInit+0xf0>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_SPI_MspInit+0xf0>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a2c      	ldr	r2, [pc, #176]	; (800191c <HAL_SPI_MspInit+0xf0>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_SPI_MspInit+0xf0>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800187e:	23c2      	movs	r3, #194	; 0xc2
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f000 fee6 	bl	800266c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018a0:	e035      	b.n	800190e <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_SPI_MspInit+0xf4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d130      	bne.n	800190e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_SPI_MspInit+0xf0>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <HAL_SPI_MspInit+0xf0>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	6593      	str	r3, [r2, #88]	; 0x58
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_SPI_MspInit+0xf0>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_SPI_MspInit+0xf0>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_SPI_MspInit+0xf0>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_SPI_MspInit+0xf0>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80018dc:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ee:	2305      	movs	r3, #5
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	480a      	ldr	r0, [pc, #40]	; (8001924 <HAL_SPI_MspInit+0xf8>)
 80018fa:	f000 feb7 	bl	800266c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2105      	movs	r1, #5
 8001902:	2024      	movs	r0, #36	; 0x24
 8001904:	f000 fe46 	bl	8002594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001908:	2024      	movs	r0, #36	; 0x24
 800190a:	f000 fe5f 	bl	80025cc <HAL_NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	; 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40013000 	.word	0x40013000
 800191c:	40021000 	.word	0x40021000
 8001920:	40003800 	.word	0x40003800
 8001924:	48000400 	.word	0x48000400

08001928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	2019      	movs	r0, #25
 800193e:	f000 fe29 	bl	8002594 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001942:	2019      	movs	r0, #25
 8001944:	f000 fe42 	bl	80025cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_InitTick+0x9c>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_InitTick+0x9c>)
 800194e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_InitTick+0x9c>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001960:	f107 0210 	add.w	r2, r7, #16
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fa66 	bl	8004e3c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001970:	f003 fa4e 	bl	8004e10 <HAL_RCC_GetPCLK2Freq>
 8001974:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_InitTick+0xa0>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0c9b      	lsrs	r3, r3, #18
 8001980:	3b01      	subs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_InitTick+0xa4>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_InitTick+0xa8>)
 8001988:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_InitTick+0xa4>)
 800198c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001990:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_InitTick+0xa4>)
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_InitTick+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_InitTick+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <HAL_InitTick+0xa4>)
 80019a6:	f004 fdcf 	bl	8006548 <HAL_TIM_Base_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d104      	bne.n	80019ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019b0:	4806      	ldr	r0, [pc, #24]	; (80019cc <HAL_InitTick+0xa4>)
 80019b2:	f004 fdff 	bl	80065b4 <HAL_TIM_Base_Start_IT>
 80019b6:	4603      	mov	r3, r0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	2000c0d4 	.word	0x2000c0d4
 80019d0:	40012c00 	.word	0x40012c00

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a0e:	f004 fdfb 	bl	8006608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000c0d4 	.word	0x2000c0d4

08001a1c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <SPI2_IRQHandler+0x10>)
 8001a22:	f004 fafd 	bl	8006020 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20001df4 	.word	0x20001df4

08001a30 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <USB_IRQHandler+0x10>)
 8001a36:	f001 fda6 	bl	8003586 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000cdec 	.word	0x2000cdec

08001a44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x50>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x16>
		heap_end = &end;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <_sbrk+0x50>)
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <_sbrk+0x54>)
 8001a58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <_sbrk+0x50>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <_sbrk+0x50>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	466a      	mov	r2, sp
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d907      	bls.n	8001a7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a6e:	f00b fea7 	bl	800d7c0 <__errno>
 8001a72:	4602      	mov	r2, r0
 8001a74:	230c      	movs	r3, #12
 8001a76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	e006      	b.n	8001a8c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <_sbrk+0x50>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <_sbrk+0x50>)
 8001a88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000238 	.word	0x20000238
 8001a98:	2000d068 	.word	0x2000d068

08001a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <SystemInit+0x64>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <SystemInit+0x64>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <SystemInit+0x68>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <SystemInit+0x68>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <SystemInit+0x68>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <SystemInit+0x68>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <SystemInit+0x68>)
 8001ac8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001acc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <SystemInit+0x68>)
 8001ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <SystemInit+0x68>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <SystemInit+0x68>)
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <SystemInit+0x68>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SystemInit+0x64>)
 8001aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001af2:	609a      	str	r2, [r3, #8]
#endif
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	40021000 	.word	0x40021000

08001b08 <UsbPrint>:
#include <stdio.h>
#include <stdarg.h>

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8001b08:	b40f      	push	{r0, r1, r2, r3}
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <UsbPrint+0x60>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f007 fe94 	bl	8009848 <osMutexAcquire>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	21c8      	movs	r1, #200	; 0xc8
 8001b32:	480e      	ldr	r0, [pc, #56]	; (8001b6c <UsbPrint+0x64>)
 8001b34:	f00b feae 	bl	800d894 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <UsbPrint+0x64>)
 8001b3a:	f7fe fb49 	bl	80001d0 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <UsbPrint+0x64>)
 8001b46:	f00b f97f 	bl	800ce48 <CDC_Transmit_FS>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <UsbPrint+0x60>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f007 fed6 	bl	8009904 <osMutexRelease>
	}
#endif
	return ret;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b64:	b004      	add	sp, #16
 8001b66:	4770      	bx	lr
 8001b68:	2000c054 	.word	0x2000c054
 8001b6c:	20005f80 	.word	0x20005f80

08001b70 <vTaskBaroRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskBaroRead(void *argument) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;
	/* actual measurements from sensor */
	int32_t temperature;
	int32_t pressure;

	vInitBaro();
 8001b78:	f000 f840 	bl	8001bfc <vInitBaro>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001b7c:	f007 fc84 	bl	8009488 <osKernelGetTickCount>
 8001b80:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / BARO_SAMPLING_FREQ;
 8001b82:	f007 fca9 	bl	80094d8 <osKernelGetTickFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <vTaskBaroRead+0x7c>)
 8001b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	613b      	str	r3, [r7, #16]
	while (1) {
		tick_count += tick_update;
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]
		vReadBaro(&temperature, &pressure);
 8001b9a:	f107 0208 	add.w	r2, r7, #8
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f833 	bl	8001c10 <vReadBaro>

		UsbPrint("P: %ld; T: %ld; t: %ld\n", pressure,
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	480f      	ldr	r0, [pc, #60]	; (8001bf0 <vTaskBaroRead+0x80>)
 8001bb2:	f7ff ffa9 	bl	8001b08 <UsbPrint>
				temperature, tick_count);

		/* If the Mutex is acquired we write the data into the right variable */
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <vTaskBaroRead+0x84>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 fe43 	bl	8009848 <osMutexAcquire>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10d      	bne.n	8001be4 <vTaskBaroRead+0x74>
			baro_data_to_mb.temperature = temperature;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <vTaskBaroRead+0x88>)
 8001bcc:	6053      	str	r3, [r2, #4]
			baro_data_to_mb.pressure = pressure;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <vTaskBaroRead+0x88>)
 8001bd2:	6013      	str	r3, [r2, #0]
			baro_data_to_mb.ts = tick_count;
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <vTaskBaroRead+0x88>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	6093      	str	r3, [r2, #8]
			osMutexRelease(baro_mutex);
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <vTaskBaroRead+0x84>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f007 fe90 	bl	8009904 <osMutexRelease>
		}

		osDelayUntil(tick_count);
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f007 fd55 	bl	8009694 <osDelayUntil>
		tick_count += tick_update;
 8001bea:	e7d2      	b.n	8001b92 <vTaskBaroRead+0x22>
 8001bec:	51eb851f 	.word	0x51eb851f
 8001bf0:	0800e120 	.word	0x0800e120
 8001bf4:	2000c0d0 	.word	0x2000c0d0
 8001bf8:	20001d84 	.word	0x20001d84

08001bfc <vInitBaro>:
	}
}

void vInitBaro() {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	ms5607_init(&MS);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <vInitBaro+0x10>)
 8001c02:	f7ff fa1d 	bl	8001040 <ms5607_init>
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000004 	.word	0x20000004

08001c10 <vReadBaro>:

void vReadBaro(int32_t *temperature, int32_t *pressure) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	ms5607_read_pres_temp(&MS, temperature, pressure);
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <vReadBaro+0x1c>)
 8001c20:	f7ff fa7f 	bl	8001122 <ms5607_read_pres_temp>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000004 	.word	0x20000004

08001c30 <vTaskImuRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskImuRead(void *argument) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	; 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;

	/* initialize data variables */
	int16_t gyroscope_data[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	809a      	strh	r2, [r3, #4]
	int16_t acceleration[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	809a      	strh	r2, [r3, #4]
	int16_t temperature;


	/* initialize counter as we want to average over 4 samples every time */
	int8_t counter = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	/* initialize queue message */
	imu_data_t queue_data = { 0 };
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]


	vInitImu20601();
 8001c60:	f000 f8ae 	bl	8001dc0 <vInitImu20601>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001c64:	f007 fc10 	bl	8009488 <osKernelGetTickCount>
 8001c68:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / IMU20601_SAMPLING_FREQ;
 8001c6a:	f007 fc35 	bl	80094d8 <osKernelGetTickFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <vTaskImuRead+0x188>)
 8001c72:	fba3 2302 	umull	r2, r3, r3, r2
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (;;) {
		tick_count += tick_update;
 8001c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7e:	4413      	add	r3, r2
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
		vReadImu20601(gyroscope_data, acceleration, &temperature);
 8001c82:	f107 021a 	add.w	r2, r7, #26
 8001c86:	f107 011c 	add.w	r1, r7, #28
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f8b0 	bl	8001df4 <vReadImu20601>
		/*UsbPrint("[DBG] RAW Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld, T:%ld; \n",
				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
				acceleration[0], acceleration[1], acceleration[2], temperature);
*/
		//TODO [nstojosk] : can this overflow?
		queue_data.gyro_x += gyroscope_data[0];
 8001c94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	813b      	strh	r3, [r7, #8]
		queue_data.gyro_y += gyroscope_data[1];
 8001ca8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	817b      	strh	r3, [r7, #10]
		queue_data.gyro_z += gyroscope_data[2];
 8001cbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	81bb      	strh	r3, [r7, #12]
		queue_data.acc_x += acceleration[0];
 8001cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	81fb      	strh	r3, [r7, #14]
		queue_data.acc_y += acceleration[1];
 8001ce4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	823b      	strh	r3, [r7, #16]
		queue_data.acc_z += acceleration[2];
 8001cf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	827b      	strh	r3, [r7, #18]
		++counter;
 8001d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (counter == 4) {
 8001d18:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d146      	bne.n	8001dae <vTaskImuRead+0x17e>
			/* reset counter */
			counter = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

			/* Average Data */
			queue_data.gyro_x /= 4;
 8001d26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da00      	bge.n	8001d30 <vTaskImuRead+0x100>
 8001d2e:	3303      	adds	r3, #3
 8001d30:	109b      	asrs	r3, r3, #2
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	813b      	strh	r3, [r7, #8]
			queue_data.gyro_y /= 4;
 8001d36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da00      	bge.n	8001d40 <vTaskImuRead+0x110>
 8001d3e:	3303      	adds	r3, #3
 8001d40:	109b      	asrs	r3, r3, #2
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	817b      	strh	r3, [r7, #10]
			queue_data.gyro_z /= 4;
 8001d46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da00      	bge.n	8001d50 <vTaskImuRead+0x120>
 8001d4e:	3303      	adds	r3, #3
 8001d50:	109b      	asrs	r3, r3, #2
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	81bb      	strh	r3, [r7, #12]
			queue_data.acc_x /= 4;
 8001d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da00      	bge.n	8001d60 <vTaskImuRead+0x130>
 8001d5e:	3303      	adds	r3, #3
 8001d60:	109b      	asrs	r3, r3, #2
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	81fb      	strh	r3, [r7, #14]
			queue_data.acc_y /= 4;
 8001d66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	da00      	bge.n	8001d70 <vTaskImuRead+0x140>
 8001d6e:	3303      	adds	r3, #3
 8001d70:	109b      	asrs	r3, r3, #2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	823b      	strh	r3, [r7, #16]
			queue_data.acc_z /= 4;
 8001d76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da00      	bge.n	8001d80 <vTaskImuRead+0x150>
 8001d7e:	3303      	adds	r3, #3
 8001d80:	109b      	asrs	r3, r3, #2
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	827b      	strh	r3, [r7, #18]
			/* I dont know it this works with the overflow of the tick_count! */
			queue_data.ts = tick_count;
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	617b      	str	r3, [r7, #20]

			/* Send Data to Queue */
			osMessageQueuePut(preprocess_queue, &queue_data, 0U, 0U);
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <vTaskImuRead+0x18c>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f107 0108 	add.w	r1, r7, #8
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	f007 fe8b 	bl	8009ab0 <osMessageQueuePut>

			/* reset queue value */
			queue_data = EMPTY_IMU;
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
			counter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}
		osDelayUntil(tick_count);
 8001dae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001db0:	f007 fc70 	bl	8009694 <osDelayUntil>
		tick_count += tick_update;
 8001db4:	e761      	b.n	8001c7a <vTaskImuRead+0x4a>
 8001db6:	bf00      	nop
 8001db8:	51eb851f 	.word	0x51eb851f
 8001dbc:	20001df0 	.word	0x20001df0

08001dc0 <vInitImu20601>:
	}
}

void vInitImu20601() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
	osDelayUntil(1000);
 8001dc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dca:	f007 fc63 	bl	8009694 <osDelayUntil>
	uint8_t r = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	do {
		r = icm20601_init(&ICM);
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <vInitImu20601+0x30>)
 8001dd4:	f7fe fecd 	bl	8000b72 <icm20601_init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(10);
 8001ddc:	200a      	movs	r0, #10
 8001dde:	f000 faff 	bl	80023e0 <HAL_Delay>
	} while(!r);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f4      	beq.n	8001dd2 <vInitImu20601+0x12>

}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000001c 	.word	0x2000001c

08001df4 <vReadImu20601>:

void vReadImu20601(int16_t gyroscope_data[], int16_t acceleration[], int16_t *temperature) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
	icm20601_read_accel_raw(&ICM, acceleration);
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <vReadImu20601+0x2c>)
 8001e04:	f7fe ff79 	bl	8000cfa <icm20601_read_accel_raw>
	icm20601_read_gyro_raw(&ICM, gyroscope_data);
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <vReadImu20601+0x2c>)
 8001e0c:	f7fe ffd0 	bl	8000db0 <icm20601_read_gyro_raw>
	icm20601_read_temp_raw(&ICM, temperature);
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <vReadImu20601+0x2c>)
 8001e14:	f7ff f827 	bl	8000e66 <icm20601_read_temp_raw>
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000001c 	.word	0x2000001c
 8001e24:	00000000 	.word	0x00000000

08001e28 <vTaskPreprocess>:
 *      Author: Jonas
 */

#include "tasks/task_preprocess.h"

void vTaskPreprocess(void *argument) {
 8001e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2a:	b08f      	sub	sp, #60	; 0x3c
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	/* registers for the Filter */
	int32_t registers[4] = { 0 };
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]

	int32_t filtered_acc_z;
	int32_t raw_acc_z;

	/* Queue data and Status Initialization */
	imu_data_t queue_data = { 0 };
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001e4c:	f007 fb1c 	bl	8009488 <osKernelGetTickCount>
 8001e50:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / SAMPLING_RATE_PREP;
 8001e52:	f007 fb41 	bl	80094d8 <osKernelGetTickFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4bc1      	ldr	r3, [pc, #772]	; (8002160 <vTaskPreprocess+0x338>)
 8001e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30

	/* Infinite loop */
	for (;;) {
		tick_count += tick_update;
 8001e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	4413      	add	r3, r2
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
		if (osMessageQueueGet(preprocess_queue, &queue_data, NULL,
 8001e6a:	4bbe      	ldr	r3, [pc, #760]	; (8002164 <vTaskPreprocess+0x33c>)
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	f107 0108 	add.w	r1, r7, #8
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	2200      	movs	r2, #0
 8001e78:	f007 fe8e 	bl	8009b98 <osMessageQueueGet>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ef      	bne.n	8001e62 <vTaskPreprocess+0x3a>
		osWaitForever) == osOK) {
			raw_acc_z = queue_data.acc_z;
 8001e82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
			filtered_acc_z = A0
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e8a:	f7fe fb4b 	bl	8000524 <__aeabi_i2d>
 8001e8e:	4605      	mov	r5, r0
 8001e90:	460e      	mov	r6, r1
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	a4a3      	add	r4, pc, #652	; (adr r4, 8002128 <vTaskPreprocess+0x300>)
 8001e9c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	f7fe fba8 	bl	80005f8 <__aeabi_dmul>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	460c      	mov	r4, r1
 8001eac:	461a      	mov	r2, r3
 8001eae:	4623      	mov	r3, r4
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	4631      	mov	r1, r6
 8001eb4:	f7fe f9ea 	bl	800028c <__adddf3>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	4626      	mov	r6, r4
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb2e 	bl	8000524 <__aeabi_i2d>
 8001ec8:	a499      	add	r4, pc, #612	; (adr r4, 8002130 <vTaskPreprocess+0x308>)
 8001eca:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	f7fe fb91 	bl	80005f8 <__aeabi_dmul>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460c      	mov	r4, r1
 8001eda:	461a      	mov	r2, r3
 8001edc:	4623      	mov	r3, r4
 8001ede:	4628      	mov	r0, r5
 8001ee0:	4631      	mov	r1, r6
 8001ee2:	f7fe f9d3 	bl	800028c <__adddf3>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460c      	mov	r4, r1
 8001eea:	461d      	mov	r5, r3
 8001eec:	4626      	mov	r6, r4
							+ B3 * registers[2] + B4 * registers[3]) +
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	a490      	add	r4, pc, #576	; (adr r4, 8002138 <vTaskPreprocess+0x310>)
 8001ef8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	f7fe fb7a 	bl	80005f8 <__aeabi_dmul>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	4631      	mov	r1, r6
 8001f10:	f7fe f9bc 	bl	800028c <__adddf3>
 8001f14:	4603      	mov	r3, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	461d      	mov	r5, r3
 8001f1a:	4626      	mov	r6, r4
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb00 	bl	8000524 <__aeabi_i2d>
 8001f24:	a486      	add	r4, pc, #536	; (adr r4, 8002140 <vTaskPreprocess+0x318>)
 8001f26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4623      	mov	r3, r4
 8001f2e:	f7fe fb63 	bl	80005f8 <__aeabi_dmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	460c      	mov	r4, r1
 8001f36:	461a      	mov	r2, r3
 8001f38:	4623      	mov	r3, r4
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	4631      	mov	r1, r6
 8001f3e:	f7fe f9a5 	bl	800028c <__adddf3>
 8001f42:	4603      	mov	r3, r0
 8001f44:	460c      	mov	r4, r1
 8001f46:	4618      	mov	r0, r3
 8001f48:	4621      	mov	r1, r4
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001f4a:	a47f      	add	r4, pc, #508	; (adr r4, 8002148 <vTaskPreprocess+0x320>)
 8001f4c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	f7fe fb50 	bl	80005f8 <__aeabi_dmul>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fade 	bl	8000524 <__aeabi_i2d>
 8001f68:	a479      	add	r4, pc, #484	; (adr r4, 8002150 <vTaskPreprocess+0x328>)
 8001f6a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	f7fe fb41 	bl	80005f8 <__aeabi_dmul>
 8001f76:	4603      	mov	r3, r0
 8001f78:	460c      	mov	r4, r1
							+ B3 * registers[2] + B4 * registers[3]) +
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	4631      	mov	r1, r6
 8001f82:	f7fe f983 	bl	800028c <__adddf3>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fac7 	bl	8000524 <__aeabi_i2d>
 8001f96:	a470      	add	r4, pc, #448	; (adr r4, 8002158 <vTaskPreprocess+0x330>)
 8001f98:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	f7fe fb2a 	bl	80005f8 <__aeabi_dmul>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	460c      	mov	r4, r1
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	4628      	mov	r0, r5
 8001fae:	4631      	mov	r1, r6
 8001fb0:	f7fe f96c 	bl	800028c <__adddf3>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	461d      	mov	r5, r3
 8001fba:	4626      	mov	r6, r4
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fab0 	bl	8000524 <__aeabi_i2d>
 8001fc4:	a462      	add	r4, pc, #392	; (adr r4, 8002150 <vTaskPreprocess+0x328>)
 8001fc6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4623      	mov	r3, r4
 8001fce:	f7fe fb13 	bl	80005f8 <__aeabi_dmul>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4623      	mov	r3, r4
 8001fda:	4628      	mov	r0, r5
 8001fdc:	4631      	mov	r1, r6
 8001fde:	f7fe f955 	bl	800028c <__adddf3>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	4626      	mov	r6, r4
					+ A4 * registers[3];
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa99 	bl	8000524 <__aeabi_i2d>
 8001ff2:	a455      	add	r4, pc, #340	; (adr r4, 8002148 <vTaskPreprocess+0x320>)
 8001ff4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f7fe fafc 	bl	80005f8 <__aeabi_dmul>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	461a      	mov	r2, r3
 8002006:	4623      	mov	r3, r4
 8002008:	4628      	mov	r0, r5
 800200a:	4631      	mov	r1, r6
 800200c:	f7fe f93e 	bl	800028c <__adddf3>
 8002010:	4603      	mov	r3, r0
 8002012:	460c      	mov	r4, r1
			filtered_acc_z = A0
 8002014:	4618      	mov	r0, r3
 8002016:	4621      	mov	r1, r4
 8002018:	f7fe fd00 	bl	8000a1c <__aeabi_d2iz>
 800201c:	4603      	mov	r3, r0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
			registers[3] = registers[2];
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
			registers[2] = registers[1];
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	623b      	str	r3, [r7, #32]
			registers[1] = registers[0];
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	61fb      	str	r3, [r7, #28]
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 800202c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800202e:	f7fe fa79 	bl	8000524 <__aeabi_i2d>
 8002032:	4605      	mov	r5, r0
 8002034:	460e      	mov	r6, r1
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa73 	bl	8000524 <__aeabi_i2d>
 800203e:	a43a      	add	r4, pc, #232	; (adr r4, 8002128 <vTaskPreprocess+0x300>)
 8002040:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	f7fe fad6 	bl	80005f8 <__aeabi_dmul>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	4628      	mov	r0, r5
 8002056:	4631      	mov	r1, r6
 8002058:	f7fe f918 	bl	800028c <__adddf3>
 800205c:	4603      	mov	r3, r0
 800205e:	460c      	mov	r4, r1
 8002060:	461d      	mov	r5, r3
 8002062:	4626      	mov	r6, r4
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa5c 	bl	8000524 <__aeabi_i2d>
 800206c:	a430      	add	r4, pc, #192	; (adr r4, 8002130 <vTaskPreprocess+0x308>)
 800206e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002072:	461a      	mov	r2, r3
 8002074:	4623      	mov	r3, r4
 8002076:	f7fe fabf 	bl	80005f8 <__aeabi_dmul>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	461a      	mov	r2, r3
 8002080:	4623      	mov	r3, r4
 8002082:	4628      	mov	r0, r5
 8002084:	4631      	mov	r1, r6
 8002086:	f7fe f901 	bl	800028c <__adddf3>
 800208a:	4603      	mov	r3, r0
 800208c:	460c      	mov	r4, r1
 800208e:	461d      	mov	r5, r3
 8002090:	4626      	mov	r6, r4
					+ B3 * registers[2] + B4 * registers[3];
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa45 	bl	8000524 <__aeabi_i2d>
 800209a:	a427      	add	r4, pc, #156	; (adr r4, 8002138 <vTaskPreprocess+0x310>)
 800209c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	f7fe faa8 	bl	80005f8 <__aeabi_dmul>
 80020a8:	4603      	mov	r3, r0
 80020aa:	460c      	mov	r4, r1
 80020ac:	461a      	mov	r2, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	4628      	mov	r0, r5
 80020b2:	4631      	mov	r1, r6
 80020b4:	f7fe f8ea 	bl	800028c <__adddf3>
 80020b8:	4603      	mov	r3, r0
 80020ba:	460c      	mov	r4, r1
 80020bc:	461d      	mov	r5, r3
 80020be:	4626      	mov	r6, r4
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa2e 	bl	8000524 <__aeabi_i2d>
 80020c8:	a41d      	add	r4, pc, #116	; (adr r4, 8002140 <vTaskPreprocess+0x318>)
 80020ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4623      	mov	r3, r4
 80020d2:	f7fe fa91 	bl	80005f8 <__aeabi_dmul>
 80020d6:	4603      	mov	r3, r0
 80020d8:	460c      	mov	r4, r1
 80020da:	461a      	mov	r2, r3
 80020dc:	4623      	mov	r3, r4
 80020de:	4628      	mov	r0, r5
 80020e0:	4631      	mov	r1, r6
 80020e2:	f7fe f8d3 	bl	800028c <__adddf3>
 80020e6:	4603      	mov	r3, r0
 80020e8:	460c      	mov	r4, r1
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 80020ea:	4618      	mov	r0, r3
 80020ec:	4621      	mov	r1, r4
 80020ee:	f7fe fc95 	bl	8000a1c <__aeabi_d2iz>
 80020f2:	4603      	mov	r3, r0
 80020f4:	61bb      	str	r3, [r7, #24]

			/* Write Result into Motherboard Variable if Mutex is available */
			if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <vTaskPreprocess+0x340>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f007 fba3 	bl	8009848 <osMutexAcquire>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f aeac 	bne.w	8001e62 <vTaskPreprocess+0x3a>
				imu_data_to_mb = queue_data;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <vTaskPreprocess+0x344>)
 800210c:	461c      	mov	r4, r3
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//				imu_data_to_mb.acc_z = filtered_acc_z; /* Insert filtered data */
				osMutexRelease(imu_mutex);
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <vTaskPreprocess+0x340>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f007 fbf1 	bl	8009904 <osMutexRelease>
		tick_count += tick_update;
 8002122:	e69e      	b.n	8001e62 <vTaskPreprocess+0x3a>
 8002124:	f3af 8000 	nop.w
 8002128:	1c708e5c 	.word	0x1c708e5c
 800212c:	bfdc71c7 	.word	0xbfdc71c7
 8002130:	bd4fbd69 	.word	0xbd4fbd69
 8002134:	bfb2f684 	.word	0xbfb2f684
 8002138:	80e71b2d 	.word	0x80e71b2d
 800213c:	bf76796e 	.word	0xbf76796e
 8002140:	e17eb593 	.word	0xe17eb593
 8002144:	bf23fa32 	.word	0xbf23fa32
 8002148:	3a1a0235 	.word	0x3a1a0235
 800214c:	3fee7bb0 	.word	0x3fee7bb0
 8002150:	3eeef58e 	.word	0x3eeef58e
 8002154:	400e7bb0 	.word	0x400e7bb0
 8002158:	2b9381a8 	.word	0x2b9381a8
 800215c:	4016dcc4 	.word	0x4016dcc4
 8002160:	cccccccd 	.word	0xcccccccd
 8002164:	20001df0 	.word	0x20001df0
 8002168:	20005f5c 	.word	0x20005f5c
 800216c:	2000c0c0 	.word	0x2000c0c0

08002170 <vTaskSendToMb>:

/* include */
#include "tasks/task_send_to_mb.h"
uint8_t baro_buffer[12] = { 0 };

void vTaskSendToMb(void *argument) {
 8002170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002172:	b091      	sub	sp, #68	; 0x44
 8002174:	af04      	add	r7, sp, #16
 8002176:	6078      	str	r0, [r7, #4]

	/* Local Data Variable initialization */
	imu_data_t last_imu_data = { 0 };
 8002178:	f107 0318 	add.w	r3, r7, #24
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
	baro_data_t last_baro_data = { 0 };
 8002186:	f107 030c 	add.w	r3, r7, #12
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8002192:	f007 f979 	bl	8009488 <osKernelGetTickCount>
 8002196:	62f8      	str	r0, [r7, #44]	; 0x2c
	tick_update = osKernelGetTickFreq() / MB_SAMPLING_RATE;
 8002198:	f007 f99e 	bl	80094d8 <osKernelGetTickFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b57      	ldr	r3, [pc, #348]	; (80022fc <vTaskSendToMb+0x18c>)
 80021a0:	fba3 2302 	umull	r2, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28

	for (;;) {
		tick_count += tick_update;
 80021a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	4413      	add	r3, r2
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* acquire current Data */
		if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <vTaskSendToMb+0x190>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f007 fb46 	bl	8009848 <osMutexAcquire>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <vTaskSendToMb+0x68>
			last_imu_data = imu_data_to_mb;
 80021c2:	4b50      	ldr	r3, [pc, #320]	; (8002304 <vTaskSendToMb+0x194>)
 80021c4:	f107 0418 	add.w	r4, r7, #24
 80021c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(imu_mutex);
 80021ce:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <vTaskSendToMb+0x190>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f007 fb96 	bl	8009904 <osMutexRelease>
		}

		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 80021d8:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <vTaskSendToMb+0x198>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f007 fb32 	bl	8009848 <osMutexAcquire>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <vTaskSendToMb+0x90>
			last_baro_data = baro_data_to_mb;
 80021ea:	4a48      	ldr	r2, [pc, #288]	; (800230c <vTaskSendToMb+0x19c>)
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			osMutexRelease(baro_mutex);
 80021f6:	4b44      	ldr	r3, [pc, #272]	; (8002308 <vTaskSendToMb+0x198>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f007 fb82 	bl	8009904 <osMutexRelease>
		}

		fullsb_data.baro = last_baro_data;
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002202:	461c      	mov	r4, r3
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800220c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		fullsb_data.imu = last_imu_data;
 8002210:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002212:	f103 040c 	add.w	r4, r3, #12
 8002216:	f107 0318 	add.w	r3, r7, #24
 800221a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4413      	add	r3, r2
 800222e:	b2da      	uxtb	r2, r3
				fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 8002230:	4b37      	ldr	r3, [pc, #220]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002232:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	b2da      	uxtb	r2, r3
				fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 800223c:	4b34      	ldr	r3, [pc, #208]	; (8002310 <vTaskSendToMb+0x1a0>)
 800223e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4413      	add	r3, r2
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <vTaskSendToMb+0x1a0>)
 800224a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4413      	add	r3, r2
 8002252:	b2da      	uxtb	r2, r3
				fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002256:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
				fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4413      	add	r3, r2
 800225e:	b2da      	uxtb	r2, r3
				fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002262:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4413      	add	r3, r2
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <vTaskSendToMb+0x1a0>)
 800226e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4413      	add	r3, r2
 8002276:	b2da      	uxtb	r2, r3
		fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <vTaskSendToMb+0x1a0>)
 800227a:	771a      	strb	r2, [r3, #28]

		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu; %lu\n", last_baro_data.pressure,
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	6978      	ldr	r0, [r7, #20]
				last_baro_data.temperature, last_baro_data.ts, fullsb_data.checksum);
 8002282:	4b23      	ldr	r3, [pc, #140]	; (8002310 <vTaskSendToMb+0x1a0>)
 8002284:	7f1b      	ldrb	r3, [r3, #28]
		UsbPrint("[DBG] P: %ld; T: %ld; t: %lu; %lu\n", last_baro_data.pressure,
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	4822      	ldr	r0, [pc, #136]	; (8002314 <vTaskSendToMb+0x1a4>)
 800228c:	f7ff fc3c 	bl	8001b08 <UsbPrint>

		UsbPrint(
				"[DBG Task Send] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				last_imu_data.gyro_x, last_imu_data.gyro_y,
 8002290:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
		UsbPrint(
 8002294:	461c      	mov	r4, r3
				last_imu_data.gyro_x, last_imu_data.gyro_y,
 8002296:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
		UsbPrint(
 800229a:	461d      	mov	r5, r3
				last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 800229c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
		UsbPrint(
 80022a0:	461e      	mov	r6, r3
				last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 80022a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
		UsbPrint(
 80022a6:	461a      	mov	r2, r3
				last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 80022a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
		UsbPrint(
 80022ac:	4619      	mov	r1, r3
				last_imu_data.acc_z, last_imu_data.ts);
 80022ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
		UsbPrint(
 80022b2:	4618      	mov	r0, r3
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	9002      	str	r0, [sp, #8]
 80022ba:	9101      	str	r1, [sp, #4]
 80022bc:	9200      	str	r2, [sp, #0]
 80022be:	4633      	mov	r3, r6
 80022c0:	462a      	mov	r2, r5
 80022c2:	4621      	mov	r1, r4
 80022c4:	4814      	ldr	r0, [pc, #80]	; (8002318 <vTaskSendToMb+0x1a8>)
 80022c6:	f7ff fc1f 	bl	8001b08 <UsbPrint>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d4:	f000 fb44 	bl	8002960 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &fullsb_data, sizeof(fullsb_data), SPI_TIMEOUT);
 80022d8:	231e      	movs	r3, #30
 80022da:	2220      	movs	r2, #32
 80022dc:	490c      	ldr	r1, [pc, #48]	; (8002310 <vTaskSendToMb+0x1a0>)
 80022de:	480f      	ldr	r0, [pc, #60]	; (800231c <vTaskSendToMb+0x1ac>)
 80022e0:	f003 f9fc 	bl	80056dc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ee:	f000 fb37 	bl	8002960 <HAL_GPIO_WritePin>




		osDelayUntil(tick_count);
 80022f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022f4:	f007 f9ce 	bl	8009694 <osDelayUntil>
		tick_count += tick_update;
 80022f8:	e756      	b.n	80021a8 <vTaskSendToMb+0x38>
 80022fa:	bf00      	nop
 80022fc:	51eb851f 	.word	0x51eb851f
 8002300:	20005f5c 	.word	0x20005f5c
 8002304:	2000c0c0 	.word	0x2000c0c0
 8002308:	2000c0d0 	.word	0x2000c0d0
 800230c:	20001d84 	.word	0x20001d84
 8002310:	20005f60 	.word	0x20005f60
 8002314:	0800e138 	.word	0x0800e138
 8002318:	0800e15c 	.word	0x0800e15c
 800231c:	20001df4 	.word	0x20001df4

08002320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002358 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002324:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002326:	e003      	b.n	8002330 <LoopCopyDataInit>

08002328 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800232a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800232c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800232e:	3104      	adds	r1, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002330:	480b      	ldr	r0, [pc, #44]	; (8002360 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002334:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002336:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002338:	d3f6      	bcc.n	8002328 <CopyDataInit>
	ldr	r2, =_sbss
 800233a:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <LoopForever+0x12>)
	b	LoopFillZerobss
 800233c:	e002      	b.n	8002344 <LoopFillZerobss>

0800233e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800233e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002340:	f842 3b04 	str.w	r3, [r2], #4

08002344 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <LoopForever+0x16>)
	cmp	r2, r3
 8002346:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002348:	d3f9      	bcc.n	800233e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800234a:	f7ff fba7 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800234e:	f00b fa3d 	bl	800d7cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002352:	f7fe ff9f 	bl	8001294 <main>

08002356 <LoopForever>:

LoopForever:
    b LoopForever
 8002356:	e7fe      	b.n	8002356 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002358:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800235c:	0800e340 	.word	0x0800e340
	ldr	r0, =_sdata
 8002360:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002364:	2000021c 	.word	0x2000021c
	ldr	r2, =_sbss
 8002368:	2000021c 	.word	0x2000021c
	ldr	r3, = _ebss
 800236c:	2000d064 	.word	0x2000d064

08002370 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC1_IRQHandler>

08002372 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 f8fe 	bl	800257e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002382:	2000      	movs	r0, #0
 8002384:	f7ff fad0 	bl	8001928 <HAL_InitTick>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	e001      	b.n	8002398 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002394:	f7ff f9de 	bl	8001754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002398:	79fb      	ldrb	r3, [r7, #7]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x1c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_IncTick+0x20>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_IncTick+0x1c>)
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	2000c114 	.word	0x2000c114
 80023c4:	20000030 	.word	0x20000030

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000c114 	.word	0x2000c114

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d004      	beq.n	8002404 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_Delay+0x40>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002404:	bf00      	nop
 8002406:	f7ff ffdf 	bl	80023c8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	429a      	cmp	r2, r3
 8002414:	d8f7      	bhi.n	8002406 <HAL_Delay+0x26>
  {
  }
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000030 	.word	0x20000030

08002424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0b      	blt.n	80024b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4907      	ldr	r1, [pc, #28]	; (80024c0 <__NVIC_EnableIRQ+0x38>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000e100 	.word	0xe000e100

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	; (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	2b04      	cmp	r3, #4
 8002534:	bf28      	it	cs
 8002536:	2304      	movcs	r3, #4
 8002538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3304      	adds	r3, #4
 800253e:	2b06      	cmp	r3, #6
 8002540:	d902      	bls.n	8002548 <NVIC_EncodePriority+0x30>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3b03      	subs	r3, #3
 8002546:	e000      	b.n	800254a <NVIC_EncodePriority+0x32>
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43d9      	mvns	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	4313      	orrs	r3, r2
         );
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ff4c 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025a6:	f7ff ff61 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	6978      	ldr	r0, [r7, #20]
 80025b2:	f7ff ffb1 	bl	8002518 <NVIC_EncodePriority>
 80025b6:	4602      	mov	r2, r0
 80025b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff80 	bl	80024c4 <__NVIC_SetPriority>
}
 80025c4:	bf00      	nop
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff54 	bl	8002488 <__NVIC_EnableIRQ>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d005      	beq.n	800260c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2204      	movs	r2, #4
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e029      	b.n	8002660 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 020e 	bic.w	r2, r2, #14
 800261a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f003 021c 	and.w	r2, r3, #28
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f202 	lsl.w	r2, r1, r2
 800263e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
    }
  }
  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267a:	e154      	b.n	8002926 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8146 	beq.w	8002920 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d00b      	beq.n	80026b4 <HAL_GPIO_Init+0x48>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d007      	beq.n	80026b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a8:	2b11      	cmp	r3, #17
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d130      	bne.n	8002716 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ea:	2201      	movs	r2, #1
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 0201 	and.w	r2, r3, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0xea>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b12      	cmp	r3, #18
 8002754:	d123      	bne.n	800279e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	6939      	ldr	r1, [r7, #16]
 800279a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4013      	ands	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0203 	and.w	r2, r3, #3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80a0 	beq.w	8002920 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e0:	4b58      	ldr	r3, [pc, #352]	; (8002944 <HAL_GPIO_Init+0x2d8>)
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	4a57      	ldr	r2, [pc, #348]	; (8002944 <HAL_GPIO_Init+0x2d8>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6613      	str	r3, [r2, #96]	; 0x60
 80027ec:	4b55      	ldr	r3, [pc, #340]	; (8002944 <HAL_GPIO_Init+0x2d8>)
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027f8:	4a53      	ldr	r2, [pc, #332]	; (8002948 <HAL_GPIO_Init+0x2dc>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002822:	d019      	beq.n	8002858 <HAL_GPIO_Init+0x1ec>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a49      	ldr	r2, [pc, #292]	; (800294c <HAL_GPIO_Init+0x2e0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d013      	beq.n	8002854 <HAL_GPIO_Init+0x1e8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a48      	ldr	r2, [pc, #288]	; (8002950 <HAL_GPIO_Init+0x2e4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00d      	beq.n	8002850 <HAL_GPIO_Init+0x1e4>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a47      	ldr	r2, [pc, #284]	; (8002954 <HAL_GPIO_Init+0x2e8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <HAL_GPIO_Init+0x1e0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a46      	ldr	r2, [pc, #280]	; (8002958 <HAL_GPIO_Init+0x2ec>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_GPIO_Init+0x1dc>
 8002844:	2304      	movs	r3, #4
 8002846:	e008      	b.n	800285a <HAL_GPIO_Init+0x1ee>
 8002848:	2307      	movs	r3, #7
 800284a:	e006      	b.n	800285a <HAL_GPIO_Init+0x1ee>
 800284c:	2303      	movs	r3, #3
 800284e:	e004      	b.n	800285a <HAL_GPIO_Init+0x1ee>
 8002850:	2302      	movs	r3, #2
 8002852:	e002      	b.n	800285a <HAL_GPIO_Init+0x1ee>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_GPIO_Init+0x1ee>
 8002858:	2300      	movs	r3, #0
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	f002 0203 	and.w	r2, r2, #3
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	4093      	lsls	r3, r2
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800286a:	4937      	ldr	r1, [pc, #220]	; (8002948 <HAL_GPIO_Init+0x2dc>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002878:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_GPIO_Init+0x2f0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289c:	4a2f      	ldr	r2, [pc, #188]	; (800295c <HAL_GPIO_Init+0x2f0>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028a2:	4b2e      	ldr	r3, [pc, #184]	; (800295c <HAL_GPIO_Init+0x2f0>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028c6:	4a25      	ldr	r2, [pc, #148]	; (800295c <HAL_GPIO_Init+0x2f0>)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_GPIO_Init+0x2f0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_GPIO_Init+0x2f0>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_GPIO_Init+0x2f0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_GPIO_Init+0x2f0>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f aea3 	bne.w	800267c <HAL_GPIO_Init+0x10>
  }
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	48000400 	.word	0x48000400
 8002950:	48000800 	.word	0x48000800
 8002954:	48000c00 	.word	0x48000c00
 8002958:	48001000 	.word	0x48001000
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800297c:	e002      	b.n	8002984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e081      	b.n	8002aa6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fef4 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e006      	b.n	8002a18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d104      	bne.n	8002a2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	ea42 0103 	orr.w	r1, r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69d9      	ldr	r1, [r3, #28]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	f040 80da 	bne.w	8002c86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_I2C_Master_Transmit+0x30>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0d3      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1d8>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ae8:	f7ff fc6e 	bl	80023c8 <HAL_GetTick>
 8002aec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2319      	movs	r3, #25
 8002af4:	2201      	movs	r2, #1
 8002af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f9e6 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0be      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2221      	movs	r2, #33	; 0x21
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2210      	movs	r2, #16
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	893a      	ldrh	r2, [r7, #8]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2bff      	cmp	r3, #255	; 0xff
 8002b3a:	d90e      	bls.n	8002b5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	8979      	ldrh	r1, [r7, #10]
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fb48 	bl	80031e8 <I2C_TransferConfig>
 8002b58:	e06c      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	8979      	ldrh	r1, [r7, #10]
 8002b6c:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fb37 	bl	80031e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b7a:	e05b      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	6a39      	ldr	r1, [r7, #32]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f9e3 	bl	8002f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e07b      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d034      	beq.n	8002c34 <HAL_I2C_Master_Transmit+0x184>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d130      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f975 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04d      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2bff      	cmp	r3, #255	; 0xff
 8002bf4:	d90e      	bls.n	8002c14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	8979      	ldrh	r1, [r7, #10]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 faeb 	bl	80031e8 <I2C_TransferConfig>
 8002c12:	e00f      	b.n	8002c34 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	8979      	ldrh	r1, [r7, #10]
 8002c26:	2300      	movs	r3, #0
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fada 	bl	80031e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d19e      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f9c2 	bl	8002fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e01a      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2220      	movs	r2, #32
 8002c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c66:	400b      	ands	r3, r1
 8002c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
  }
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	80002000 	.word	0x80002000
 8002c94:	fe00e800 	.word	0xfe00e800

08002c98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	817b      	strh	r3, [r7, #10]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	f040 80db 	bne.w	8002e70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_I2C_Master_Receive+0x30>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0d4      	b.n	8002e72 <HAL_I2C_Master_Receive+0x1da>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cd0:	f7ff fb7a 	bl	80023c8 <HAL_GetTick>
 8002cd4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2319      	movs	r3, #25
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f8f2 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0bf      	b.n	8002e72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2222      	movs	r2, #34	; 0x22
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	893a      	ldrh	r2, [r7, #8]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2bff      	cmp	r3, #255	; 0xff
 8002d22:	d90e      	bls.n	8002d42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	8979      	ldrh	r1, [r7, #10]
 8002d32:	4b52      	ldr	r3, [pc, #328]	; (8002e7c <HAL_I2C_Master_Receive+0x1e4>)
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fa54 	bl	80031e8 <I2C_TransferConfig>
 8002d40:	e06d      	b.n	8002e1e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	8979      	ldrh	r1, [r7, #10]
 8002d54:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <HAL_I2C_Master_Receive+0x1e4>)
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa43 	bl	80031e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d62:	e05c      	b.n	8002e1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	6a39      	ldr	r1, [r7, #32]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f96b 	bl	8003044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e07c      	b.n	8002e72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d034      	beq.n	8002e1e <HAL_I2C_Master_Receive+0x186>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d130      	bne.n	8002e1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f880 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e04d      	b.n	8002e72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2bff      	cmp	r3, #255	; 0xff
 8002dde:	d90e      	bls.n	8002dfe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	22ff      	movs	r2, #255	; 0xff
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	8979      	ldrh	r1, [r7, #10]
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f9f6 	bl	80031e8 <I2C_TransferConfig>
 8002dfc:	e00f      	b.n	8002e1e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	2300      	movs	r3, #0
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f9e5 	bl	80031e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d19d      	bne.n	8002d64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6a39      	ldr	r1, [r7, #32]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f8cd 	bl	8002fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e01a      	b.n	8002e72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2220      	movs	r2, #32
 8002e42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_I2C_Master_Receive+0x1e8>)
 8002e50:	400b      	ands	r3, r1
 8002e52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	80002400 	.word	0x80002400
 8002e80:	fe00e800 	.word	0xfe00e800

08002e84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d103      	bne.n	8002ea2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d007      	beq.n	8002ec0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	619a      	str	r2, [r3, #24]
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002edc:	e022      	b.n	8002f24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d01e      	beq.n	8002f24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7ff fa6f 	bl	80023c8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d113      	bne.n	8002f24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e00f      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d0cd      	beq.n	8002ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f58:	e02c      	b.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f8dc 	bl	800311c <I2C_IsAcknowledgeFailed>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e02a      	b.n	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d01e      	beq.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f76:	f7ff fa27 	bl	80023c8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d113      	bne.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e007      	b.n	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d1cb      	bne.n	8002f5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd8:	e028      	b.n	800302c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f89c 	bl	800311c <I2C_IsAcknowledgeFailed>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e026      	b.n	800303c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7ff f9eb 	bl	80023c8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d113      	bne.n	800302c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e007      	b.n	800303c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b20      	cmp	r3, #32
 8003038:	d1cf      	bne.n	8002fda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003050:	e055      	b.n	80030fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f860 	bl	800311c <I2C_IsAcknowledgeFailed>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e053      	b.n	800310e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b20      	cmp	r3, #32
 8003072:	d129      	bne.n	80030c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b04      	cmp	r3, #4
 8003080:	d105      	bne.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e03f      	b.n	800310e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2220      	movs	r2, #32
 8003094:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80030a2:	400b      	ands	r3, r1
 80030a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e022      	b.n	800310e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7ff f97e 	bl	80023c8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d1a2      	bne.n	8003052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	fe00e800 	.word	0xfe00e800

0800311c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b10      	cmp	r3, #16
 8003134:	d151      	bne.n	80031da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003136:	e022      	b.n	800317e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d01e      	beq.n	800317e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7ff f942 	bl	80023c8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <I2C_IsAcknowledgeFailed+0x3a>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d113      	bne.n	800317e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e02e      	b.n	80031dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d1d5      	bne.n	8003138 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2210      	movs	r2, #16
 8003192:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2220      	movs	r2, #32
 800319a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff fe71 	bl	8002e84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	fe00e800 	.word	0xfe00e800

080031e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	817b      	strh	r3, [r7, #10]
 80031f6:	4613      	mov	r3, r2
 80031f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	0d5b      	lsrs	r3, r3, #21
 8003204:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003208:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <I2C_TransferConfig+0x58>)
 800320a:	430b      	orrs	r3, r1
 800320c:	43db      	mvns	r3, r3
 800320e:	ea02 0103 	and.w	r1, r2, r3
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003218:	7a7b      	ldrb	r3, [r7, #9]
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	431a      	orrs	r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	03ff63ff 	.word	0x03ff63ff

08003244 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b20      	cmp	r3, #32
 8003258:	d138      	bne.n	80032cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003264:	2302      	movs	r3, #2
 8003266:	e032      	b.n	80032ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0201 	bic.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d139      	bne.n	8003364 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e033      	b.n	8003366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2224      	movs	r2, #36	; 0x24
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800332c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003374:	b08b      	sub	sp, #44	; 0x2c
 8003376:	af06      	add	r7, sp, #24
 8003378:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0da      	b.n	800353a <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f009 fe9b 	bl	800d0d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2203      	movs	r2, #3
 80033a2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fb20 	bl	80069f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	687e      	ldr	r6, [r7, #4]
 80033b8:	466d      	mov	r5, sp
 80033ba:	f106 0410 	add.w	r4, r6, #16
 80033be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	602b      	str	r3, [r5, #0]
 80033c6:	1d33      	adds	r3, r6, #4
 80033c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ca:	6838      	ldr	r0, [r7, #0]
 80033cc:	f003 fae6 	bl	800699c <USB_CoreInit>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0ab      	b.n	800353a <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fb1c 	bl	8006a26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e035      	b.n	8003460 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	015b      	lsls	r3, r3, #5
 80033fa:	4413      	add	r3, r2
 80033fc:	3329      	adds	r3, #41	; 0x29
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	4413      	add	r3, r2
 800340a:	3328      	adds	r3, #40	; 0x28
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	b291      	uxth	r1, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	015b      	lsls	r3, r3, #5
 800341a:	4413      	add	r3, r2
 800341c:	3336      	adds	r3, #54	; 0x36
 800341e:	460a      	mov	r2, r1
 8003420:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	015b      	lsls	r3, r3, #5
 8003428:	4413      	add	r3, r2
 800342a:	332b      	adds	r3, #43	; 0x2b
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	015b      	lsls	r3, r3, #5
 8003436:	4413      	add	r3, r2
 8003438:	3338      	adds	r3, #56	; 0x38
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	015b      	lsls	r3, r3, #5
 8003444:	4413      	add	r3, r2
 8003446:	333c      	adds	r3, #60	; 0x3c
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	3302      	adds	r3, #2
 8003452:	015b      	lsls	r3, r3, #5
 8003454:	4413      	add	r3, r2
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	3301      	adds	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	429a      	cmp	r2, r3
 8003468:	d3c4      	bcc.n	80033f4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	e031      	b.n	80034d4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	015b      	lsls	r3, r3, #5
 8003476:	4413      	add	r3, r2
 8003478:	f203 1329 	addw	r3, r3, #297	; 0x129
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	015b      	lsls	r3, r3, #5
 8003486:	4413      	add	r3, r2
 8003488:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	015b      	lsls	r3, r3, #5
 8003496:	4413      	add	r3, r2
 8003498:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	015b      	lsls	r3, r3, #5
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	015b      	lsls	r3, r3, #5
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	330a      	adds	r3, #10
 80034c6:	015b      	lsls	r3, r3, #5
 80034c8:	4413      	add	r3, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	3301      	adds	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3c8      	bcc.n	8003470 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	687e      	ldr	r6, [r7, #4]
 80034e6:	466d      	mov	r5, sp
 80034e8:	f106 0410 	add.w	r4, r6, #16
 80034ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	602b      	str	r3, [r5, #0]
 80034f4:	1d33      	adds	r3, r6, #4
 80034f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f8:	6838      	ldr	r0, [r7, #0]
 80034fa:	f003 faa1 	bl	8006a40 <USB_DevInit>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e014      	b.n	800353a <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d102      	bne.n	800352e <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fe3a 	bl	80041a2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f004 fae7 	bl	8007b06 <USB_DevDisconnect>

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003542 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_PCD_Start+0x16>
 8003554:	2302      	movs	r3, #2
 8003556:	e012      	b.n	800357e <HAL_PCD_Start+0x3c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f004 fab7 	bl	8007ad8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fa25 	bl	80069be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f004 facc 	bl	8007b30 <USB_ReadInterrupts>
 8003598:	4603      	mov	r3, r0
 800359a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a2:	d102      	bne.n	80035aa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb33 	bl	8003c10 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 fabe 	bl	8007b30 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d112      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	b292      	uxth	r2, r2
 80035d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f009 fdf0 	bl	800d1be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80035de:	2100      	movs	r1, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f91e 	bl	8003822 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 faa0 	bl	8007b30 <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fa:	d10b      	bne.n	8003614 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800360e:	b292      	uxth	r2, r2
 8003610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f004 fa89 	bl	8007b30 <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003628:	d10b      	bne.n	8003642 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363c:	b292      	uxth	r2, r2
 800363e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fa72 	bl	8007b30 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003656:	d133      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003660:	b29a      	uxth	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	b292      	uxth	r2, r2
 800366c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003678:	b29a      	uxth	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0208 	bic.w	r2, r2, #8
 8003682:	b292      	uxth	r2, r2
 8003684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800369a:	2100      	movs	r1, #0
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f00a f83b 	bl	800d718 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f009 fdc4 	bl	800d230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ba:	b292      	uxth	r2, r2
 80036bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f004 fa33 	bl	8007b30 <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d4:	d126      	bne.n	8003724 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036de:	b29a      	uxth	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	b292      	uxth	r2, r2
 80036ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003700:	b292      	uxth	r2, r2
 8003702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0204 	orr.w	r2, r2, #4
 8003718:	b292      	uxth	r2, r2
 800371a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f009 fd6c 	bl	800d1fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f004 fa01 	bl	8007b30 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d13f      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374a:	b292      	uxth	r2, r2
 800374c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003756:	2b00      	cmp	r3, #0
 8003758:	d12b      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0204 	orr.w	r2, r2, #4
 800376c:	b292      	uxth	r2, r2
 800376e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0208 	orr.w	r2, r2, #8
 8003784:	b292      	uxth	r2, r2
 8003786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800379a:	b29b      	uxth	r3, r3
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80037a8:	2101      	movs	r1, #1
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f009 ffb4 	bl	800d718 <HAL_PCDEx_LPM_Callback>
 80037b0:	e002      	b.n	80037b8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f009 fd22 	bl	800d1fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 f9b7 	bl	8007b30 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d10e      	bne.n	80037ec <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037e0:	b292      	uxth	r2, r2
 80037e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f009 fcdb 	bl	800d1a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f004 f99d 	bl	8007b30 <USB_ReadInterrupts>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d10b      	bne.n	800381a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003814:	b292      	uxth	r2, r2
 8003816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_PCD_SetAddress+0x1a>
 8003838:	2302      	movs	r3, #2
 800383a:	e013      	b.n	8003864 <HAL_PCD_SetAddress+0x42>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f004 f92b 	bl	8007ab0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	4608      	mov	r0, r1
 8003876:	4611      	mov	r1, r2
 8003878:	461a      	mov	r2, r3
 800387a:	4603      	mov	r3, r0
 800387c:	70fb      	strb	r3, [r7, #3]
 800387e:	460b      	mov	r3, r1
 8003880:	803b      	strh	r3, [r7, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800388a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388e:	2b00      	cmp	r3, #0
 8003890:	da0b      	bge.n	80038aa <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	015b      	lsls	r3, r3, #5
 800389a:	3328      	adds	r3, #40	; 0x28
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	705a      	strb	r2, [r3, #1]
 80038a8:	e00b      	b.n	80038c2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	015b      	lsls	r3, r3, #5
 80038b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038ce:	883a      	ldrh	r2, [r7, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	78ba      	ldrb	r2, [r7, #2]
 80038d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038ec:	78bb      	ldrb	r3, [r7, #2]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d102      	bne.n	80038f8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_PCD_EP_Open+0x9a>
 8003902:	2302      	movs	r3, #2
 8003904:	e00e      	b.n	8003924 <HAL_PCD_EP_Open+0xb8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 f8b7 	bl	8006a88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003922:	7afb      	ldrb	r3, [r7, #11]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800393c:	2b00      	cmp	r3, #0
 800393e:	da0b      	bge.n	8003958 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	3328      	adds	r3, #40	; 0x28
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	705a      	strb	r2, [r3, #1]
 8003956:	e00b      	b.n	8003970 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	015b      	lsls	r3, r3, #5
 8003960:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_PCD_EP_Close+0x5e>
 8003986:	2302      	movs	r3, #2
 8003988:	e00e      	b.n	80039a8 <HAL_PCD_EP_Close+0x7c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fb65 	bl	8007068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	460b      	mov	r3, r1
 80039be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	015b      	lsls	r3, r3, #5
 80039c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ea:	7afb      	ldrb	r3, [r7, #11]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f6:	7afb      	ldrb	r3, [r7, #11]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6979      	ldr	r1, [r7, #20]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 fcc4 	bl	8007394 <USB_EPStartXfer>
 8003a0c:	e005      	b.n	8003a1a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 fcbd 	bl	8007394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	330a      	adds	r3, #10
 8003a3a:	015b      	lsls	r3, r3, #5
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3304      	adds	r3, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	015b      	lsls	r3, r3, #5
 8003a66:	3328      	adds	r3, #40	; 0x28
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2201      	movs	r2, #1
 8003a84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a86:	7afb      	ldrb	r3, [r7, #11]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a92:	7afb      	ldrb	r3, [r7, #11]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6979      	ldr	r1, [r7, #20]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fc76 	bl	8007394 <USB_EPStartXfer>
 8003aa8:	e005      	b.n	8003ab6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6979      	ldr	r1, [r7, #20]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 fc6f 	bl	8007394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d901      	bls.n	8003ade <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e046      	b.n	8003b6c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da0b      	bge.n	8003afe <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	015b      	lsls	r3, r3, #5
 8003aee:	3328      	adds	r3, #40	; 0x28
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	705a      	strb	r2, [r3, #1]
 8003afc:	e009      	b.n	8003b12 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	015b      	lsls	r3, r3, #5
 8003b02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_PCD_EP_SetStall+0x72>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e01c      	b.n	8003b6c <HAL_PCD_EP_SetStall+0xac>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 fedf 	bl	8007904 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d108      	bne.n	8003b62 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f003 fff7 	bl	8007b50 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d901      	bls.n	8003b92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e03a      	b.n	8003c08 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da0b      	bge.n	8003bb2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	015b      	lsls	r3, r3, #5
 8003ba2:	3328      	adds	r3, #40	; 0x28
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	705a      	strb	r2, [r3, #1]
 8003bb0:	e00b      	b.n	8003bca <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	015b      	lsls	r3, r3, #5
 8003bba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_PCD_EP_ClrStall+0x76>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e00e      	b.n	8003c08 <HAL_PCD_EP_ClrStall+0x94>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f003 fec5 	bl	8007988 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c18:	e274      	b.n	8004104 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c22:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c24:	8afb      	ldrh	r3, [r7, #22]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003c2e:	7d7b      	ldrb	r3, [r7, #21]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f040 813c 	bne.w	8003eae <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c36:	8afb      	ldrh	r3, [r7, #22]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d14f      	bne.n	8003ce0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c50:	b29c      	uxth	r4, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3328      	adds	r3, #40	; 0x28
 8003c66:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f009 fa67 	bl	800d174 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8228 	beq.w	8004104 <PCD_EP_ISR_Handler+0x4f4>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 8223 	bne.w	8004104 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003cde:	e211      	b.n	8004104 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ce6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003cf0:	8a7b      	ldrh	r3, [r7, #18]
 8003cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d031      	beq.n	8003d5e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f003 ff58 	bl	8007bea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d46:	4013      	ands	r3, r2
 8003d48:	b29c      	uxth	r4, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003d52:	b292      	uxth	r2, r2
 8003d54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f009 f9e2 	bl	800d120 <HAL_PCD_SetupStageCallback>
 8003d5c:	e1d2      	b.n	8004104 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f280 81ce 	bge.w	8004104 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29c      	uxth	r4, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003d80:	b292      	uxth	r2, r2
 8003d82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d019      	beq.n	8003de8 <PCD_EP_ISR_Handler+0x1d8>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d015      	beq.n	8003de8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6959      	ldr	r1, [r3, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f003 ff0c 	bl	8007bea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	441a      	add	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003de0:	2100      	movs	r1, #0
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f009 f9ae 	bl	800d144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461c      	mov	r4, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	441c      	add	r4, r3
 8003dfa:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003dfe:	461c      	mov	r4, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <PCD_EP_ISR_Handler+0x216>
 8003e08:	8823      	ldrh	r3, [r4, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8023      	strh	r3, [r4, #0]
 8003e14:	8823      	ldrh	r3, [r4, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8023      	strh	r3, [r4, #0]
 8003e24:	e02d      	b.n	8003e82 <PCD_EP_ISR_Handler+0x272>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e2c:	d812      	bhi.n	8003e54 <PCD_EP_ISR_Handler+0x244>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <PCD_EP_ISR_Handler+0x238>
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	3301      	adds	r3, #1
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8023      	strh	r3, [r4, #0]
 8003e52:	e016      	b.n	8003e82 <PCD_EP_ISR_Handler+0x272>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <PCD_EP_ISR_Handler+0x25e>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	029b      	lsls	r3, r3, #10
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	b29c      	uxth	r4, r3
 8003e94:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e98:	b29c      	uxth	r4, r3
 8003e9a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e9e:	b29c      	uxth	r4, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b9e      	ldr	r3, [pc, #632]	; (8004120 <PCD_EP_ISR_Handler+0x510>)
 8003ea6:	4323      	orrs	r3, r4
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	8013      	strh	r3, [r2, #0]
 8003eac:	e12a      	b.n	8004104 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	7d7b      	ldrb	r3, [r7, #21]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ebe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f280 80cb 	bge.w	800405e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	7d7b      	ldrb	r3, [r7, #21]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003edc:	4013      	ands	r3, r2
 8003ede:	b29c      	uxth	r4, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	7d7b      	ldrb	r3, [r7, #21]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ef4:	7d7b      	ldrb	r3, [r7, #21]
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	7b1b      	ldrb	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11f      	bne.n	8003f4a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	4413      	add	r3, r2
 8003f24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003f30:	8bfb      	ldrh	r3, [r7, #30]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d06e      	beq.n	8004014 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6959      	ldr	r1, [r3, #20]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88da      	ldrh	r2, [r3, #6]
 8003f42:	8bfb      	ldrh	r3, [r7, #30]
 8003f44:	f003 fe51 	bl	8007bea <USB_ReadPMA>
 8003f48:	e064      	b.n	8004014 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f64:	b29c      	uxth	r4, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	4b6b      	ldr	r3, [pc, #428]	; (8004124 <PCD_EP_ISR_Handler+0x514>)
 8003f76:	4323      	orrs	r3, r4
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01f      	beq.n	8003fd6 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fba:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003fbc:	8bfb      	ldrh	r3, [r7, #30]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d028      	beq.n	8004014 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6959      	ldr	r1, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	891a      	ldrh	r2, [r3, #8]
 8003fce:	8bfb      	ldrh	r3, [r7, #30]
 8003fd0:	f003 fe0b 	bl	8007bea <USB_ReadPMA>
 8003fd4:	e01e      	b.n	8004014 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003ffc:	8bfb      	ldrh	r3, [r7, #30]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6959      	ldr	r1, [r3, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	895a      	ldrh	r2, [r3, #10]
 800400e:	8bfb      	ldrh	r3, [r7, #30]
 8004010:	f003 fdeb 	bl	8007bea <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	8bfb      	ldrh	r3, [r7, #30]
 800401a:	441a      	add	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	8bfb      	ldrh	r3, [r7, #30]
 8004026:	441a      	add	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <PCD_EP_ISR_Handler+0x42e>
 8004034:	8bfa      	ldrh	r2, [r7, #30]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	429a      	cmp	r2, r3
 800403c:	d206      	bcs.n	800404c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f009 f87d 	bl	800d144 <HAL_PCD_DataOutStageCallback>
 800404a:	e008      	b.n	800405e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	7819      	ldrb	r1, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fca9 	bl	80039b0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800405e:	8a7b      	ldrh	r3, [r7, #18]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d04d      	beq.n	8004104 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004068:	7d7b      	ldrb	r3, [r7, #21]
 800406a:	015b      	lsls	r3, r3, #5
 800406c:	3328      	adds	r3, #40	; 0x28
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	7d7b      	ldrb	r3, [r7, #21]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408c:	b29c      	uxth	r4, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	7d7b      	ldrb	r3, [r7, #21]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800409e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f009 f842 	bl	800d174 <HAL_PCD_DataInStageCallback>
 80040f0:	e008      	b.n	8004104 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	7819      	ldrb	r1, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fca5 	bl	8003a4e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800410c:	b29b      	uxth	r3, r3
 800410e:	b21b      	sxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	f6ff ad82 	blt.w	8003c1a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3724      	adds	r7, #36	; 0x24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd90      	pop	{r4, r7, pc}
 8004120:	ffff8080 	.word	0xffff8080
 8004124:	ffff80c0 	.word	0xffff80c0

08004128 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	4613      	mov	r3, r2
 8004138:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	015b      	lsls	r3, r3, #5
 800414e:	3328      	adds	r3, #40	; 0x28
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e006      	b.n	8004166 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004158:	897b      	ldrh	r3, [r7, #10]
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004166:	893b      	ldrh	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2200      	movs	r2, #0
 8004170:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	b29a      	uxth	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	80da      	strh	r2, [r3, #6]
 800417a:	e00b      	b.n	8004194 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2201      	movs	r2, #1
 8004180:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	b29a      	uxth	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	b29a      	uxth	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <HAL_PWREx_GetVoltageRange+0x18>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40007000 	.word	0x40007000

08004214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004222:	d130      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004224:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004230:	d038      	beq.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004240:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2232      	movs	r2, #50	; 0x32
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0c9b      	lsrs	r3, r3, #18
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004258:	e002      	b.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3b01      	subs	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426c:	d102      	bne.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x60>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f2      	bne.n	800425a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	d110      	bne.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e00f      	b.n	80042a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004292:	d007      	beq.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800429c:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40007000 	.word	0x40007000
 80042b8:	20000000 	.word	0x20000000
 80042bc:	431bde83 	.word	0x431bde83

080042c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80042ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ce:	6053      	str	r3, [r2, #4]
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40007000 	.word	0x40007000

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f000 bc11 	b.w	8004b16 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f4:	4ba0      	ldr	r3, [pc, #640]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 030c 	and.w	r3, r3, #12
 80042fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fe:	4b9e      	ldr	r3, [pc, #632]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80e4 	beq.w	80044de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_RCC_OscConfig+0x4c>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	f040 808b 	bne.w	800443a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b01      	cmp	r3, #1
 8004328:	f040 8087 	bne.w	800443a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432c:	4b92      	ldr	r3, [pc, #584]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_OscConfig+0x64>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e3e8      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	4b8b      	ldr	r3, [pc, #556]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_RCC_OscConfig+0x7e>
 8004354:	4b88      	ldr	r3, [pc, #544]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435c:	e005      	b.n	800436a <HAL_RCC_OscConfig+0x8a>
 800435e:	4b86      	ldr	r3, [pc, #536]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436a:	4293      	cmp	r3, r2
 800436c:	d223      	bcs.n	80043b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fd94 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e3c9      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004382:	4b7d      	ldr	r3, [pc, #500]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7c      	ldr	r2, [pc, #496]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004388:	f043 0308 	orr.w	r3, r3, #8
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b7a      	ldr	r3, [pc, #488]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4977      	ldr	r1, [pc, #476]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a0:	4b75      	ldr	r3, [pc, #468]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	4972      	ldr	r1, [pc, #456]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
 80043b4:	e025      	b.n	8004402 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b6:	4b70      	ldr	r3, [pc, #448]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6f      	ldr	r2, [pc, #444]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b6d      	ldr	r3, [pc, #436]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	496a      	ldr	r1, [pc, #424]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d4:	4b68      	ldr	r3, [pc, #416]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	4965      	ldr	r1, [pc, #404]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fd54 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e389      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004402:	f000 fc6f 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004406:	4601      	mov	r1, r0
 8004408:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	4a5a      	ldr	r2, [pc, #360]	; (800457c <HAL_RCC_OscConfig+0x29c>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	fa21 f303 	lsr.w	r3, r1, r3
 800441e:	4a58      	ldr	r2, [pc, #352]	; (8004580 <HAL_RCC_OscConfig+0x2a0>)
 8004420:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004422:	4b58      	ldr	r3, [pc, #352]	; (8004584 <HAL_RCC_OscConfig+0x2a4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fa7e 	bl	8001928 <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d052      	beq.n	80044dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	e36d      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004442:	4b4d      	ldr	r3, [pc, #308]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a4c      	ldr	r2, [pc, #304]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800444e:	f7fd ffbb 	bl	80023c8 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004456:	f7fd ffb7 	bl	80023c8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e356      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004468:	4b43      	ldr	r3, [pc, #268]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004474:	4b40      	ldr	r3, [pc, #256]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3f      	ldr	r2, [pc, #252]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800447a:	f043 0308 	orr.w	r3, r3, #8
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	493a      	ldr	r1, [pc, #232]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004492:	4b39      	ldr	r3, [pc, #228]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	4935      	ldr	r1, [pc, #212]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
 80044a6:	e01a      	b.n	80044de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a32      	ldr	r2, [pc, #200]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b4:	f7fd ff88 	bl	80023c8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044bc:	f7fd ff84 	bl	80023c8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e323      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x1dc>
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d073      	beq.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_OscConfig+0x21c>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d10e      	bne.n	8004514 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d10b      	bne.n	8004514 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d063      	beq.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d15f      	bne.n	80045d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e300      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451c:	d106      	bne.n	800452c <HAL_RCC_OscConfig+0x24c>
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e01d      	b.n	8004568 <HAL_RCC_OscConfig+0x288>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x270>
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0x288>
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a05      	ldr	r2, [pc, #20]	; (8004578 <HAL_RCC_OscConfig+0x298>)
 8004562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01b      	beq.n	80045a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd ff2a 	bl	80023c8 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004576:	e010      	b.n	800459a <HAL_RCC_OscConfig+0x2ba>
 8004578:	40021000 	.word	0x40021000
 800457c:	0800e2bc 	.word	0x0800e2bc
 8004580:	20000000 	.word	0x20000000
 8004584:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fd ff1e 	bl	80023c8 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e2bd      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459a:	4baf      	ldr	r3, [pc, #700]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x2a8>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd ff0e 	bl	80023c8 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd ff0a 	bl	80023c8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e2a9      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c2:	4ba5      	ldr	r3, [pc, #660]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2d0>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d060      	beq.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_OscConfig+0x310>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b0c      	cmp	r3, #12
 80045e8:	d119      	bne.n	800461e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d116      	bne.n	800461e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f0:	4b99      	ldr	r3, [pc, #612]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_OscConfig+0x328>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e286      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b93      	ldr	r3, [pc, #588]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	4990      	ldr	r1, [pc, #576]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461c:	e040      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d023      	beq.n	800466e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004626:	4b8c      	ldr	r3, [pc, #560]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a8b      	ldr	r2, [pc, #556]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fd fec9 	bl	80023c8 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463a:	f7fd fec5 	bl	80023c8 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e264      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	4b82      	ldr	r3, [pc, #520]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004658:	4b7f      	ldr	r3, [pc, #508]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	061b      	lsls	r3, r3, #24
 8004666:	497c      	ldr	r1, [pc, #496]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	e018      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466e:	4b7a      	ldr	r3, [pc, #488]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a79      	ldr	r2, [pc, #484]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fd fea5 	bl	80023c8 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004682:	f7fd fea1 	bl	80023c8 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e240      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004694:	4b70      	ldr	r3, [pc, #448]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03c      	beq.n	8004726 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01c      	beq.n	80046ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b4:	4b68      	ldr	r3, [pc, #416]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80046b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ba:	4a67      	ldr	r2, [pc, #412]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fd fe80 	bl	80023c8 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fd fe7c 	bl	80023c8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e21b      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046de:	4b5e      	ldr	r3, [pc, #376]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ef      	beq.n	80046cc <HAL_RCC_OscConfig+0x3ec>
 80046ec:	e01b      	b.n	8004726 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ee:	4b5a      	ldr	r3, [pc, #360]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f4:	4a58      	ldr	r2, [pc, #352]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fd fe63 	bl	80023c8 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fd fe5f 	bl	80023c8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e1fe      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004718:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800471a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ef      	bne.n	8004706 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80a6 	beq.w	8004880 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004734:	2300      	movs	r3, #0
 8004736:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004738:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10d      	bne.n	8004760 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b44      	ldr	r3, [pc, #272]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	4a43      	ldr	r2, [pc, #268]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	; 0x58
 8004750:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475c:	2301      	movs	r3, #1
 800475e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004760:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_RCC_OscConfig+0x57c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d118      	bne.n	800479e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCC_OscConfig+0x57c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a3a      	ldr	r2, [pc, #232]	; (800485c <HAL_RCC_OscConfig+0x57c>)
 8004772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004778:	f7fd fe26 	bl	80023c8 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fd fe22 	bl	80023c8 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1c1      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	4b32      	ldr	r3, [pc, #200]	; (800485c <HAL_RCC_OscConfig+0x57c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d108      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4d8>
 80047a6:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b6:	e024      	b.n	8004802 <HAL_RCC_OscConfig+0x522>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d110      	bne.n	80047e2 <HAL_RCC_OscConfig+0x502>
 80047c0:	4b25      	ldr	r3, [pc, #148]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	4a24      	ldr	r2, [pc, #144]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047c8:	f043 0304 	orr.w	r3, r3, #4
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d0:	4b21      	ldr	r3, [pc, #132]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a20      	ldr	r2, [pc, #128]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e0:	e00f      	b.n	8004802 <HAL_RCC_OscConfig+0x522>
 80047e2:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047f2:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	4a17      	ldr	r2, [pc, #92]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 80047fa:	f023 0304 	bic.w	r3, r3, #4
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d016      	beq.n	8004838 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fd fddd 	bl	80023c8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fd fdd9 	bl	80023c8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e176      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_OscConfig+0x578>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ed      	beq.n	8004812 <HAL_RCC_OscConfig+0x532>
 8004836:	e01a      	b.n	800486e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd fdc6 	bl	80023c8 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800483e:	e00f      	b.n	8004860 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fd fdc2 	bl	80023c8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d906      	bls.n	8004860 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e15f      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004860:	4baa      	ldr	r3, [pc, #680]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e8      	bne.n	8004840 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800486e:	7ffb      	ldrb	r3, [r7, #31]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d105      	bne.n	8004880 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004874:	4ba5      	ldr	r3, [pc, #660]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	4aa4      	ldr	r2, [pc, #656]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 800487a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03c      	beq.n	8004906 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01c      	beq.n	80048ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004894:	4b9d      	ldr	r3, [pc, #628]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800489a:	4a9c      	ldr	r2, [pc, #624]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd fd90 	bl	80023c8 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ac:	f7fd fd8c 	bl	80023c8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e12b      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048be:	4b93      	ldr	r3, [pc, #588]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80048c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ef      	beq.n	80048ac <HAL_RCC_OscConfig+0x5cc>
 80048cc:	e01b      	b.n	8004906 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ce:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80048d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d4:	4a8d      	ldr	r2, [pc, #564]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fd fd73 	bl	80023c8 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048e6:	f7fd fd6f 	bl	80023c8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e10e      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048f8:	4b84      	ldr	r3, [pc, #528]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80048fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ef      	bne.n	80048e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8102 	beq.w	8004b14 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	2b02      	cmp	r3, #2
 8004916:	f040 80c5 	bne.w	8004aa4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800491a:	4b7c      	ldr	r3, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f003 0203 	and.w	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	429a      	cmp	r2, r3
 800492c:	d12c      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	3b01      	subs	r3, #1
 800493a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d123      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d11b      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d113      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d109      	bne.n	8004988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	3b01      	subs	r3, #1
 8004982:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d067      	beq.n	8004a58 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d062      	beq.n	8004a54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800498e:	4b5f      	ldr	r3, [pc, #380]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0bb      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800499e:	4b5b      	ldr	r3, [pc, #364]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80049a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049aa:	f7fd fd0d 	bl	80023c8 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fd fd09 	bl	80023c8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0a8      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c4:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d0:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	4b4e      	ldr	r3, [pc, #312]	; (8004b10 <HAL_RCC_OscConfig+0x830>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	4311      	orrs	r1, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049ea:	0212      	lsls	r2, r2, #8
 80049ec:	4311      	orrs	r1, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049f2:	0852      	lsrs	r2, r2, #1
 80049f4:	3a01      	subs	r2, #1
 80049f6:	0552      	lsls	r2, r2, #21
 80049f8:	4311      	orrs	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049fe:	0852      	lsrs	r2, r2, #1
 8004a00:	3a01      	subs	r2, #1
 8004a02:	0652      	lsls	r2, r2, #25
 8004a04:	4311      	orrs	r1, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a0a:	06d2      	lsls	r2, r2, #27
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	493f      	ldr	r1, [pc, #252]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a14:	4b3d      	ldr	r3, [pc, #244]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3c      	ldr	r2, [pc, #240]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a20:	4b3a      	ldr	r3, [pc, #232]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a2c:	f7fd fccc 	bl	80023c8 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a34:	f7fd fcc8 	bl	80023c8 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e067      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a46:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a52:	e05f      	b.n	8004b14 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e05e      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a58:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d157      	bne.n	8004b14 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a64:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a70:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a7c:	f7fd fca4 	bl	80023c8 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd fca0 	bl	80023c8 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e03f      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x7a4>
 8004aa2:	e037      	b.n	8004b14 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	d02d      	beq.n	8004b06 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ac8:	f023 0303 	bic.w	r3, r3, #3
 8004acc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004ad4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004adc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ade:	f7fd fc73 	bl	80023c8 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae6:	f7fd fc6f 	bl	80023c8 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e00e      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <HAL_RCC_OscConfig+0x82c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f0      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x806>
 8004b04:	e006      	b.n	8004b14 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e005      	b.n	8004b16 <HAL_RCC_OscConfig+0x836>
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop

08004b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0c8      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b34:	4b66      	ldr	r3, [pc, #408]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d910      	bls.n	8004b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b63      	ldr	r3, [pc, #396]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 0207 	bic.w	r2, r3, #7
 8004b4a:	4961      	ldr	r1, [pc, #388]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0b0      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d04c      	beq.n	8004c0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d107      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b78:	4b56      	ldr	r3, [pc, #344]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d121      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e09e      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b90:	4b50      	ldr	r3, [pc, #320]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d115      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e092      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ba8:	4b4a      	ldr	r3, [pc, #296]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e086      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e07e      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc8:	4b42      	ldr	r3, [pc, #264]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f023 0203 	bic.w	r2, r3, #3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	493f      	ldr	r1, [pc, #252]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bda:	f7fd fbf5 	bl	80023c8 <HAL_GetTick>
 8004bde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be2:	f7fd fbf1 	bl	80023c8 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e066      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf8:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 020c 	and.w	r2, r3, #12
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d1eb      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c16:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	492c      	ldr	r1, [pc, #176]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c28:	4b29      	ldr	r3, [pc, #164]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d210      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 0207 	bic.w	r2, r3, #7
 8004c3e:	4924      	ldr	r1, [pc, #144]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e036      	b.n	8004cc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4918      	ldr	r1, [pc, #96]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4910      	ldr	r1, [pc, #64]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c96:	f000 f825 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	5cd3      	ldrb	r3, [r2, r3]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	fa21 f303 	lsr.w	r3, r1, r3
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fe34 	bl	8001928 <HAL_InitTick>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40022000 	.word	0x40022000
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800e2bc 	.word	0x0800e2bc
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	2000002c 	.word	0x2000002c

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	; 0x24
 8004ce8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cfc:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x34>
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d121      	bne.n	8004d56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d11e      	bne.n	8004d56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d18:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d24:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	e005      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d34:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d40:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <HAL_RCC_GetSysClockFreq+0x108>)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d54:	e00a      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d5c:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	e004      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d68:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d133      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d002      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0xa4>
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_GetSysClockFreq+0xaa>
 8004d86:	e005      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d8a:	617b      	str	r3, [r7, #20]
      break;
 8004d8c:	e005      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d8e:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d90:	617b      	str	r3, [r7, #20]
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	617b      	str	r3, [r7, #20]
      break;
 8004d98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	091b      	lsrs	r3, r3, #4
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	3301      	adds	r3, #1
 8004da6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	0a1b      	lsrs	r3, r3, #8
 8004dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	fb02 f203 	mul.w	r2, r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	0e5b      	lsrs	r3, r3, #25
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dda:	69bb      	ldr	r3, [r7, #24]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3724      	adds	r7, #36	; 0x24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40021000 	.word	0x40021000
 8004dec:	0800e2d4 	.word	0x0800e2d4
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	007a1200 	.word	0x007a1200

08004df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000000 	.word	0x20000000

08004e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e14:	f7ff fff0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e18:	4601      	mov	r1, r0
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0adb      	lsrs	r3, r3, #11
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e26:	5cd3      	ldrb	r3, [r2, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	0800e2cc 	.word	0x0800e2cc

08004e3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	220f      	movs	r2, #15
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0203 	and.w	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_GetClockConfig+0x5c>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <HAL_RCC_GetClockConfig+0x60>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0207 	and.w	r2, r3, #7
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40022000 	.word	0x40022000

08004ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eb8:	f7ff f99e 	bl	80041f8 <HAL_PWREx_GetVoltageRange>
 8004ebc:	6178      	str	r0, [r7, #20]
 8004ebe:	e014      	b.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ed8:	f7ff f98e 	bl	80041f8 <HAL_PWREx_GetVoltageRange>
 8004edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d10b      	bne.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d919      	bls.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2ba0      	cmp	r3, #160	; 0xa0
 8004efc:	d902      	bls.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004efe:	2302      	movs	r3, #2
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e013      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e010      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d902      	bls.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f10:	2303      	movs	r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e00a      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d102      	bne.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e004      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d101      	bne.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f28:	2301      	movs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 0207 	bic.w	r2, r3, #7
 8004f34:	4909      	ldr	r1, [pc, #36]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40022000 	.word	0x40022000

08004f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d02f      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f84:	d005      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f90:	e00f      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f92:	4b5d      	ldr	r3, [pc, #372]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4a5c      	ldr	r2, [pc, #368]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f9e:	e00c      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fa1e 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc0:	4b51      	ldr	r3, [pc, #324]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	494e      	ldr	r1, [pc, #312]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fd6:	e001      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 809e 	beq.w	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fea:	2300      	movs	r3, #0
 8004fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fee:	4b46      	ldr	r3, [pc, #280]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005004:	4b40      	ldr	r3, [pc, #256]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500e:	6593      	str	r3, [r2, #88]	; 0x58
 8005010:	4b3d      	ldr	r3, [pc, #244]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501c:	2301      	movs	r3, #1
 800501e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005020:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a39      	ldr	r2, [pc, #228]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800502c:	f7fd f9cc 	bl	80023c8 <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005032:	e009      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7fd f9c8 	bl	80023c8 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d902      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	74fb      	strb	r3, [r7, #19]
        break;
 8005046:	e005      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005048:	4b30      	ldr	r3, [pc, #192]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ef      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d15a      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800505a:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	429a      	cmp	r2, r3
 8005074:	d019      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005082:	4b21      	ldr	r3, [pc, #132]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800508a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050a2:	4a19      	ldr	r2, [pc, #100]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d016      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fd f988 	bl	80023c8 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ba:	e00b      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fd f984 	bl	80023c8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d902      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	74fb      	strb	r3, [r7, #19]
            break;
 80050d2:	e006      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0ec      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80050e2:	7cfb      	ldrb	r3, [r7, #19]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f6:	4904      	ldr	r1, [pc, #16]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050fe:	e009      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	74bb      	strb	r3, [r7, #18]
 8005104:	e006      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000
 800510c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005114:	7c7b      	ldrb	r3, [r7, #17]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d105      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511a:	4bb2      	ldr	r3, [pc, #712]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	4ab1      	ldr	r2, [pc, #708]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005132:	4bac      	ldr	r3, [pc, #688]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f023 0203 	bic.w	r2, r3, #3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	49a8      	ldr	r1, [pc, #672]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005154:	4ba3      	ldr	r3, [pc, #652]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f023 020c 	bic.w	r2, r3, #12
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	49a0      	ldr	r1, [pc, #640]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005176:	4b9b      	ldr	r3, [pc, #620]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	4997      	ldr	r1, [pc, #604]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005198:	4b92      	ldr	r3, [pc, #584]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	498f      	ldr	r1, [pc, #572]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ba:	4b8a      	ldr	r3, [pc, #552]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	4986      	ldr	r1, [pc, #536]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051dc:	4b81      	ldr	r3, [pc, #516]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	497e      	ldr	r1, [pc, #504]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051fe:	4b79      	ldr	r3, [pc, #484]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	4975      	ldr	r1, [pc, #468]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005220:	4b70      	ldr	r3, [pc, #448]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	496d      	ldr	r1, [pc, #436]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005242:	4b68      	ldr	r3, [pc, #416]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	4964      	ldr	r1, [pc, #400]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d028      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005264:	4b5f      	ldr	r3, [pc, #380]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005272:	495c      	ldr	r1, [pc, #368]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005282:	d106      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005284:	4b57      	ldr	r3, [pc, #348]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a56      	ldr	r2, [pc, #344]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800528a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528e:	60d3      	str	r3, [r2, #12]
 8005290:	e011      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800529a:	d10c      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	2101      	movs	r1, #1
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f8a0 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d028      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052c2:	4b48      	ldr	r3, [pc, #288]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d0:	4944      	ldr	r1, [pc, #272]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e0:	d106      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e2:	4b40      	ldr	r3, [pc, #256]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4a3f      	ldr	r2, [pc, #252]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ec:	60d3      	str	r3, [r2, #12]
 80052ee:	e011      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f8:	d10c      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	2101      	movs	r1, #1
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f871 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d028      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005320:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	492d      	ldr	r1, [pc, #180]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800533e:	d106      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005340:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800534a:	60d3      	str	r3, [r2, #12]
 800534c:	e011      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005356:	d10c      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	2101      	movs	r1, #1
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f842 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 800536e:	7cfb      	ldrb	r3, [r7, #19]
 8005370:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01c      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537e:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538c:	4915      	ldr	r1, [pc, #84]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3304      	adds	r3, #4
 80053a2:	2102      	movs	r1, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f81f 	bl	80053e8 <RCCEx_PLLSAI1_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	4904      	ldr	r1, [pc, #16]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053da:	7cbb      	ldrb	r3, [r7, #18]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000

080053e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053f6:	4b73      	ldr	r3, [pc, #460]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005402:	4b70      	ldr	r3, [pc, #448]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0203 	and.w	r2, r3, #3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d10d      	bne.n	800542e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
       ||
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800541a:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
       ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d044      	beq.n	80054b8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
 8005432:	e041      	b.n	80054b8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d00c      	beq.n	8005456 <RCCEx_PLLSAI1_Config+0x6e>
 800543c:	2b03      	cmp	r3, #3
 800543e:	d013      	beq.n	8005468 <RCCEx_PLLSAI1_Config+0x80>
 8005440:	2b01      	cmp	r3, #1
 8005442:	d120      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005444:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d11d      	bne.n	800548c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005454:	e01a      	b.n	800548c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005456:	4b5b      	ldr	r3, [pc, #364]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545e:	2b00      	cmp	r3, #0
 8005460:	d116      	bne.n	8005490 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005466:	e013      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005468:	4b56      	ldr	r3, [pc, #344]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10f      	bne.n	8005494 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005474:	4b53      	ldr	r3, [pc, #332]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005484:	e006      	b.n	8005494 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
      break;
 800548a:	e004      	b.n	8005496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800548c:	bf00      	nop
 800548e:	e002      	b.n	8005496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005494:	bf00      	nop
    }

    if(status == HAL_OK)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800549c:	4b49      	ldr	r3, [pc, #292]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6819      	ldr	r1, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	430b      	orrs	r3, r1
 80054b2:	4944      	ldr	r1, [pc, #272]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d17c      	bne.n	80055b8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054be:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a40      	ldr	r2, [pc, #256]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ca:	f7fc ff7d 	bl	80023c8 <HAL_GetTick>
 80054ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054d0:	e009      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d2:	f7fc ff79 	bl	80023c8 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d902      	bls.n	80054e6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	73fb      	strb	r3, [r7, #15]
        break;
 80054e4:	e005      	b.n	80054f2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054e6:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1ef      	bne.n	80054d2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d15f      	bne.n	80055b8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d110      	bne.n	8005520 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005506:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6892      	ldr	r2, [r2, #8]
 800550e:	0211      	lsls	r1, r2, #8
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68d2      	ldr	r2, [r2, #12]
 8005514:	06d2      	lsls	r2, r2, #27
 8005516:	430a      	orrs	r2, r1
 8005518:	492a      	ldr	r1, [pc, #168]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
 800551e:	e027      	b.n	8005570 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d112      	bne.n	800554c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005526:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800552e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6892      	ldr	r2, [r2, #8]
 8005536:	0211      	lsls	r1, r2, #8
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6912      	ldr	r2, [r2, #16]
 800553c:	0852      	lsrs	r2, r2, #1
 800553e:	3a01      	subs	r2, #1
 8005540:	0552      	lsls	r2, r2, #21
 8005542:	430a      	orrs	r2, r1
 8005544:	491f      	ldr	r1, [pc, #124]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	610b      	str	r3, [r1, #16]
 800554a:	e011      	b.n	8005570 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800554c:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6892      	ldr	r2, [r2, #8]
 800555c:	0211      	lsls	r1, r2, #8
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6952      	ldr	r2, [r2, #20]
 8005562:	0852      	lsrs	r2, r2, #1
 8005564:	3a01      	subs	r2, #1
 8005566:	0652      	lsls	r2, r2, #25
 8005568:	430a      	orrs	r2, r1
 800556a:	4916      	ldr	r1, [pc, #88]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800556c:	4313      	orrs	r3, r2
 800556e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005570:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800557a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fc ff24 	bl	80023c8 <HAL_GetTick>
 8005580:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005582:	e009      	b.n	8005598 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005584:	f7fc ff20 	bl	80023c8 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d902      	bls.n	8005598 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	73fb      	strb	r3, [r7, #15]
          break;
 8005596:	e005      	b.n	80055a4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005598:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0ef      	beq.n	8005584 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	4904      	ldr	r1, [pc, #16]	; (80055c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000

080055c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e07c      	b.n	80056d4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fc f919 	bl	800182c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005610:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800561a:	d902      	bls.n	8005622 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e002      	b.n	8005628 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005630:	d007      	beq.n	8005642 <HAL_SPI_Init+0x7a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800563a:	d002      	beq.n	8005642 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005652:	d903      	bls.n	800565c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
 800565a:	e002      	b.n	8005662 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	ea42 0103 	orr.w	r1, r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	f003 0204 	and.w	r2, r3, #4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	ea42 0103 	orr.w	r1, r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_Transmit+0x22>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e150      	b.n	80059a0 <HAL_SPI_Transmit+0x2c4>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005706:	f7fc fe5f 	bl	80023c8 <HAL_GetTick>
 800570a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d002      	beq.n	8005722 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800571c:	2302      	movs	r3, #2
 800571e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005720:	e135      	b.n	800598e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_SPI_Transmit+0x52>
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005732:	e12c      	b.n	800598e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2203      	movs	r2, #3
 8005738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	88fa      	ldrh	r2, [r7, #6]
 8005752:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800577e:	d107      	bne.n	8005790 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800578e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d007      	beq.n	80057ae <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057b6:	d94b      	bls.n	8005850 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_SPI_Transmit+0xea>
 80057c0:	8afb      	ldrh	r3, [r7, #22]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d13e      	bne.n	8005844 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	881a      	ldrh	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	1c9a      	adds	r2, r3, #2
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057ea:	e02b      	b.n	8005844 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d112      	bne.n	8005820 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	1c9a      	adds	r2, r3, #2
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581e:	e011      	b.n	8005844 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005820:	f7fc fdd2 	bl	80023c8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d803      	bhi.n	8005838 <HAL_SPI_Transmit+0x15c>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d102      	bne.n	800583e <HAL_SPI_Transmit+0x162>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005842:	e0a4      	b.n	800598e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1ce      	bne.n	80057ec <HAL_SPI_Transmit+0x110>
 800584e:	e07c      	b.n	800594a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_SPI_Transmit+0x182>
 8005858:	8afb      	ldrh	r3, [r7, #22]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d170      	bne.n	8005940 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d912      	bls.n	800588e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	881a      	ldrh	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	1c9a      	adds	r2, r3, #2
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b02      	subs	r3, #2
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800588c:	e058      	b.n	8005940 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80058b4:	e044      	b.n	8005940 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d12b      	bne.n	800591c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d912      	bls.n	80058f4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	1c9a      	adds	r2, r3, #2
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b02      	subs	r3, #2
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058f2:	e025      	b.n	8005940 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	7812      	ldrb	r2, [r2, #0]
 8005900:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800591a:	e011      	b.n	8005940 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591c:	f7fc fd54 	bl	80023c8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d803      	bhi.n	8005934 <HAL_SPI_Transmit+0x258>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d102      	bne.n	800593a <HAL_SPI_Transmit+0x25e>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800593e:	e026      	b.n	800598e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1b5      	bne.n	80058b6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fdb4 	bl	80064bc <SPI_EndRxTxTransaction>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e000      	b.n	800598e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800598c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800599e:	7ffb      	ldrb	r3, [r7, #31]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c4:	d112      	bne.n	80059ec <HAL_SPI_Receive+0x44>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10e      	bne.n	80059ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2204      	movs	r2, #4
 80059d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f908 	bl	8005bf8 <HAL_SPI_TransmitReceive>
 80059e8:	4603      	mov	r3, r0
 80059ea:	e101      	b.n	8005bf0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_SPI_Receive+0x52>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e0fa      	b.n	8005bf0 <HAL_SPI_Receive+0x248>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a02:	f7fc fce1 	bl	80023c8 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d002      	beq.n	8005a1a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a18:	e0e1      	b.n	8005bde <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Receive+0x7e>
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a2a:	e0d8      	b.n	8005bde <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a76:	d908      	bls.n	8005a8a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	e007      	b.n	8005a9a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a98:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa2:	d107      	bne.n	8005ab4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ab2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d007      	beq.n	8005ad2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ada:	d867      	bhi.n	8005bac <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005adc:	e030      	b.n	8005b40 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d117      	bne.n	8005b1c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f103 020c 	add.w	r2, r3, #12
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b1a:	e011      	b.n	8005b40 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1c:	f7fc fc54 	bl	80023c8 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d803      	bhi.n	8005b34 <HAL_SPI_Receive+0x18c>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d102      	bne.n	8005b3a <HAL_SPI_Receive+0x192>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b3e:	e04e      	b.n	8005bde <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1c8      	bne.n	8005ade <HAL_SPI_Receive+0x136>
 8005b4c:	e034      	b.n	8005bb8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d115      	bne.n	8005b88 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	b292      	uxth	r2, r2
 8005b68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b86:	e011      	b.n	8005bac <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b88:	f7fc fc1e 	bl	80023c8 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d803      	bhi.n	8005ba0 <HAL_SPI_Receive+0x1f8>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Receive+0x1fe>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d102      	bne.n	8005bac <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005baa:	e018      	b.n	8005bde <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ca      	bne.n	8005b4e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fc25 	bl	800640c <SPI_EndRxTransaction>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
 8005bda:	e000      	b.n	8005bde <HAL_SPI_Receive+0x236>
  }

error :
 8005bdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08a      	sub	sp, #40	; 0x28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c06:	2301      	movs	r3, #1
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x26>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e1fb      	b.n	8006016 <HAL_SPI_TransmitReceive+0x41e>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c26:	f7fc fbcf 	bl	80023c8 <HAL_GetTick>
 8005c2a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c3a:	887b      	ldrh	r3, [r7, #2]
 8005c3c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c3e:	887b      	ldrh	r3, [r7, #2]
 8005c40:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c42:	7efb      	ldrb	r3, [r7, #27]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d00e      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x6e>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d106      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x66>
 8005c58:	7efb      	ldrb	r3, [r7, #27]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d003      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c64:	e1cd      	b.n	8006002 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x80>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x80>
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c7e:	e1c0      	b.n	8006002 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d003      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2205      	movs	r2, #5
 8005c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	887a      	ldrh	r2, [r7, #2]
 8005cba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	887a      	ldrh	r2, [r7, #2]
 8005cc0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd6:	d802      	bhi.n	8005cde <HAL_SPI_TransmitReceive+0xe6>
 8005cd8:	8a3b      	ldrh	r3, [r7, #16]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d908      	bls.n	8005cf0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	e007      	b.n	8005d00 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d007      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d26:	d97c      	bls.n	8005e22 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x13e>
 8005d30:	8a7b      	ldrh	r3, [r7, #18]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d169      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	881a      	ldrh	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	1c9a      	adds	r2, r3, #2
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5a:	e056      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d11b      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x1aa>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d016      	beq.n	8005da2 <HAL_SPI_TransmitReceive+0x1aa>
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d113      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	881a      	ldrh	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	1c9a      	adds	r2, r3, #2
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d11c      	bne.n	8005dea <HAL_SPI_TransmitReceive+0x1f2>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d016      	beq.n	8005dea <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	b292      	uxth	r2, r2
 8005dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	1c9a      	adds	r2, r3, #2
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005de6:	2301      	movs	r3, #1
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dea:	f7fc faed 	bl	80023c8 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d807      	bhi.n	8005e0a <HAL_SPI_TransmitReceive+0x212>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d003      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e08:	e0fb      	b.n	8006002 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1a3      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x164>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d19d      	bne.n	8005d5c <HAL_SPI_TransmitReceive+0x164>
 8005e20:	e0df      	b.n	8005fe2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_SPI_TransmitReceive+0x23a>
 8005e2a:	8a7b      	ldrh	r3, [r7, #18]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	f040 80cb 	bne.w	8005fc8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d912      	bls.n	8005e62 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b02      	subs	r3, #2
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e60:	e0b2      	b.n	8005fc8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e88:	e09e      	b.n	8005fc8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d134      	bne.n	8005f02 <HAL_SPI_TransmitReceive+0x30a>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d02f      	beq.n	8005f02 <HAL_SPI_TransmitReceive+0x30a>
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d12c      	bne.n	8005f02 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d912      	bls.n	8005ed8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b02      	subs	r3, #2
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ed6:	e012      	b.n	8005efe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d148      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x3aa>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d042      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d923      	bls.n	8005f70 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	b292      	uxth	r2, r2
 8005f34:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b02      	subs	r3, #2
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d81f      	bhi.n	8005f9e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	e016      	b.n	8005f9e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f103 020c 	add.w	r2, r3, #12
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fa2:	f7fc fa11 	bl	80023c8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d803      	bhi.n	8005fba <HAL_SPI_TransmitReceive+0x3c2>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d102      	bne.n	8005fc0 <HAL_SPI_TransmitReceive+0x3c8>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d103      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005fc6:	e01c      	b.n	8006002 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f47f af5b 	bne.w	8005e8a <HAL_SPI_TransmitReceive+0x292>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f47f af54 	bne.w	8005e8a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fa68 	bl	80064bc <SPI_EndRxTxTransaction>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	661a      	str	r2, [r3, #96]	; 0x60
 8005ffe:	e000      	b.n	8006002 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006000:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006016:	4618      	mov	r0, r3
 8006018:	3728      	adds	r7, #40	; 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	099b      	lsrs	r3, r3, #6
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
    return;
 8006062:	e0d8      	b.n	8006216 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_SPI_IRQHandler+0x66>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
    return;
 8006084:	e0c7      	b.n	8006216 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10c      	bne.n	80060ac <HAL_SPI_IRQHandler+0x8c>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	099b      	lsrs	r3, r3, #6
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_SPI_IRQHandler+0x8c>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80b5 	beq.w	8006216 <HAL_SPI_IRQHandler+0x1f6>
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80ae 	beq.w	8006216 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	099b      	lsrs	r3, r3, #6
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d023      	beq.n	800610e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d011      	beq.n	80060f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	f043 0204 	orr.w	r2, r3, #4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	e00b      	b.n	800610e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]
        return;
 800610c:	e083      	b.n	8006216 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d014      	beq.n	8006144 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611e:	f043 0201 	orr.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	f043 0208 	orr.w	r2, r3, #8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	60bb      	str	r3, [r7, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616e:	2b00      	cmp	r3, #0
 8006170:	d050      	beq.n	8006214 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006180:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <HAL_SPI_IRQHandler+0x17e>
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d034      	beq.n	8006208 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0203 	bic.w	r2, r2, #3
 80061ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d011      	beq.n	80061da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_SPI_IRQHandler+0x1fc>)
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fc fa10 	bl	80025e8 <HAL_DMA_Abort_IT>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	4a0d      	ldr	r2, [pc, #52]	; (800621c <HAL_SPI_IRQHandler+0x1fc>)
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fc f9fa 	bl	80025e8 <HAL_DMA_Abort_IT>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006206:	e003      	b.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f809 	bl	8006220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800620e:	e000      	b.n	8006212 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006210:	bf00      	nop
    return;
 8006212:	bf00      	nop
 8006214:	bf00      	nop
  }
}
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	08006235 	.word	0x08006235

08006220 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff ffe5 	bl	8006220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800626e:	e04c      	b.n	800630a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d048      	beq.n	800630a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006278:	f7fc f8a6 	bl	80023c8 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d902      	bls.n	800628e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d13d      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800629c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a6:	d111      	bne.n	80062cc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b0:	d004      	beq.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ba:	d107      	bne.n	80062cc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d4:	d10f      	bne.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e00f      	b.n	800632a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d1a3      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006340:	e057      	b.n	80063f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006348:	d106      	bne.n	8006358 <SPI_WaitFifoStateUntilTimeout+0x26>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d048      	beq.n	80063f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006360:	f7fc f832 	bl	80023c8 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d902      	bls.n	8006376 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d13d      	bne.n	80063f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800638e:	d111      	bne.n	80063b4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	d004      	beq.n	80063a4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a2:	d107      	bne.n	80063b4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063bc:	d10f      	bne.n	80063de <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e008      	b.n	8006404 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	4013      	ands	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d19f      	bne.n	8006342 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006420:	d111      	bne.n	8006446 <SPI_EndRxTransaction+0x3a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642a:	d004      	beq.n	8006436 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006434:	d107      	bne.n	8006446 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff ff04 	bl	800625e <SPI_WaitFlagStateUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006460:	f043 0220 	orr.w	r2, r3, #32
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e023      	b.n	80064b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006474:	d11d      	bne.n	80064b2 <SPI_EndRxTransaction+0xa6>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647e:	d004      	beq.n	800648a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006488:	d113      	bne.n	80064b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff ff4b 	bl	8006332 <SPI_WaitFifoStateUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a6:	f043 0220 	orr.w	r2, r3, #32
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e000      	b.n	80064b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff ff2c 	bl	8006332 <SPI_WaitFifoStateUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e4:	f043 0220 	orr.w	r2, r3, #32
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e027      	b.n	8006540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	2180      	movs	r1, #128	; 0x80
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff feaf 	bl	800625e <SPI_WaitFlagStateUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650a:	f043 0220 	orr.w	r2, r3, #32
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e014      	b.n	8006540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff ff05 	bl	8006332 <SPI_WaitFifoStateUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006532:	f043 0220 	orr.w	r2, r3, #32
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e000      	b.n	8006540 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e01d      	b.n	8006596 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f815 	bl	800659e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f000 f986 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <HAL_TIM_Base_Start_IT+0x50>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d00b      	beq.n	80065f6 <HAL_TIM_Base_Start_IT+0x42>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e4:	d007      	beq.n	80065f6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	00010007 	.word	0x00010007

08006608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0202 	mvn.w	r2, #2
 8006634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f905 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8f7 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f908 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b04      	cmp	r3, #4
 8006670:	d122      	bne.n	80066b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b04      	cmp	r3, #4
 800667e:	d11b      	bne.n	80066b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0204 	mvn.w	r2, #4
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8db 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f8cd 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8de 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d122      	bne.n	800670c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d11b      	bne.n	800670c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0208 	mvn.w	r2, #8
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2204      	movs	r2, #4
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8b1 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f8a3 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8b4 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b10      	cmp	r3, #16
 8006718:	d122      	bne.n	8006760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b10      	cmp	r3, #16
 8006726:	d11b      	bne.n	8006760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0210 	mvn.w	r2, #16
 8006730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2208      	movs	r2, #8
 8006736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f887 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f879 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f88a 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b01      	cmp	r3, #1
 800676c:	d10e      	bne.n	800678c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d107      	bne.n	800678c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0201 	mvn.w	r2, #1
 8006784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fa ffca 	bl	8001720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006796:	2b80      	cmp	r3, #128	; 0x80
 8006798:	d10e      	bne.n	80067b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b80      	cmp	r3, #128	; 0x80
 80067a6:	d107      	bne.n	80067b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f8de 	bl	8006974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	d10e      	bne.n	80067e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d2:	2b80      	cmp	r3, #128	; 0x80
 80067d4:	d107      	bne.n	80067e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f8d1 	bl	8006988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d10e      	bne.n	8006812 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d107      	bne.n	8006812 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800680a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f838 	bl	8006882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b20      	cmp	r3, #32
 800681e:	d10e      	bne.n	800683e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b20      	cmp	r3, #32
 800682c:	d107      	bne.n	800683e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f06f 0220 	mvn.w	r2, #32
 8006836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f891 	bl	8006960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2a      	ldr	r2, [pc, #168]	; (8006954 <TIM_Base_SetConfig+0xbc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_Base_SetConfig+0x20>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b6:	d108      	bne.n	80068ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a21      	ldr	r2, [pc, #132]	; (8006954 <TIM_Base_SetConfig+0xbc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00b      	beq.n	80068ea <TIM_Base_SetConfig+0x52>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	d007      	beq.n	80068ea <TIM_Base_SetConfig+0x52>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <TIM_Base_SetConfig+0xc0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_Base_SetConfig+0x52>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <TIM_Base_SetConfig+0xc4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d108      	bne.n	80068fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a0c      	ldr	r2, [pc, #48]	; (8006954 <TIM_Base_SetConfig+0xbc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d007      	beq.n	8006938 <TIM_Base_SetConfig+0xa0>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a0b      	ldr	r2, [pc, #44]	; (8006958 <TIM_Base_SetConfig+0xc0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0xa0>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <TIM_Base_SetConfig+0xc4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d103      	bne.n	8006940 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	615a      	str	r2, [r3, #20]
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400

08006960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800699c:	b084      	sub	sp, #16
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	f107 0014 	add.w	r0, r7, #20
 80069aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	b004      	add	sp, #16
 80069bc:	4770      	bx	lr

080069be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069c6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80069ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	4313      	orrs	r3, r2
 80069da:	b29a      	uxth	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80069f8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80069fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4013      	ands	r3, r2
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a40:	b084      	sub	sp, #16
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	f107 0014 	add.w	r0, r7, #20
 8006a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff ffa3 	bl	80069be <USB_EnableGlobalInt>

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a84:	b004      	add	sp, #16
 8006a86:	4770      	bx	lr

08006a88 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a88:	b490      	push	{r4, r7}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d819      	bhi.n	8006aea <USB_ActivateEndpoint+0x62>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <USB_ActivateEndpoint+0x34>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006ae1 	.word	0x08006ae1
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	08006ad7 	.word	0x08006ad7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006acc:	89bb      	ldrh	r3, [r7, #12]
 8006ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ad2:	81bb      	strh	r3, [r7, #12]
      break;
 8006ad4:	e00d      	b.n	8006af2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ad6:	89bb      	ldrh	r3, [r7, #12]
 8006ad8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006adc:	81bb      	strh	r3, [r7, #12]
      break;
 8006ade:	e008      	b.n	8006af2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ae0:	89bb      	ldrh	r3, [r7, #12]
 8006ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ae6:	81bb      	strh	r3, [r7, #12]
      break;
 8006ae8:	e003      	b.n	8006af2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]
      break;
 8006aee:	e000      	b.n	8006af2 <USB_ActivateEndpoint+0x6a>
      break;
 8006af0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	89bb      	ldrh	r3, [r7, #12]
 8006afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	b21b      	sxth	r3, r3
 8006b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	b21a      	sxth	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b21b      	sxth	r3, r3
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b21b      	sxth	r3, r3
 8006b36:	b29c      	uxth	r4, r3
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	4b8a      	ldr	r3, [pc, #552]	; (8006d6c <USB_ActivateEndpoint+0x2e4>)
 8006b44:	4323      	orrs	r3, r4
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	7b1b      	ldrb	r3, [r3, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f040 8112 	bne.w	8006d78 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d067      	beq.n	8006c2c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b5c:	687c      	ldr	r4, [r7, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	441c      	add	r4, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4423      	add	r3, r4
 8006b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b74:	461c      	mov	r4, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	88db      	ldrh	r3, [r3, #6]
 8006b7a:	085b      	lsrs	r3, r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29c      	uxth	r4, r3
 8006b92:	4623      	mov	r3, r4
 8006b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d014      	beq.n	8006bc6 <USB_ActivateEndpoint+0x13e>
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	b29c      	uxth	r4, r3
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	441a      	add	r2, r3
 8006bbe:	4b6c      	ldr	r3, [pc, #432]	; (8006d70 <USB_ActivateEndpoint+0x2e8>)
 8006bc0:	4323      	orrs	r3, r4
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	78db      	ldrb	r3, [r3, #3]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d018      	beq.n	8006c00 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be4:	b29c      	uxth	r4, r3
 8006be6:	f084 0320 	eor.w	r3, r4, #32
 8006bea:	b29c      	uxth	r4, r3
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	441a      	add	r2, r3
 8006bf6:	4b5d      	ldr	r3, [pc, #372]	; (8006d6c <USB_ActivateEndpoint+0x2e4>)
 8006bf8:	4323      	orrs	r3, r4
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8013      	strh	r3, [r2, #0]
 8006bfe:	e22b      	b.n	8007058 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c16:	b29c      	uxth	r4, r3
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	4b52      	ldr	r3, [pc, #328]	; (8006d6c <USB_ActivateEndpoint+0x2e4>)
 8006c24:	4323      	orrs	r3, r4
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]
 8006c2a:	e215      	b.n	8007058 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c2c:	687c      	ldr	r4, [r7, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	441c      	add	r4, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4423      	add	r3, r4
 8006c40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c44:	461c      	mov	r4, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	88db      	ldrh	r3, [r3, #6]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c54:	687c      	ldr	r4, [r7, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	441c      	add	r4, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4423      	add	r3, r4
 8006c68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c6c:	461c      	mov	r4, r3
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10e      	bne.n	8006c94 <USB_ActivateEndpoint+0x20c>
 8006c76:	8823      	ldrh	r3, [r4, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8023      	strh	r3, [r4, #0]
 8006c82:	8823      	ldrh	r3, [r4, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8023      	strh	r3, [r4, #0]
 8006c92:	e02d      	b.n	8006cf0 <USB_ActivateEndpoint+0x268>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b3e      	cmp	r3, #62	; 0x3e
 8006c9a:	d812      	bhi.n	8006cc2 <USB_ActivateEndpoint+0x23a>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	085b      	lsrs	r3, r3, #1
 8006ca2:	60bb      	str	r3, [r7, #8]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <USB_ActivateEndpoint+0x22e>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	8023      	strh	r3, [r4, #0]
 8006cc0:	e016      	b.n	8006cf0 <USB_ActivateEndpoint+0x268>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <USB_ActivateEndpoint+0x254>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	60bb      	str	r3, [r7, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29c      	uxth	r4, r3
 8006cfe:	4623      	mov	r3, r4
 8006d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d014      	beq.n	8006d32 <USB_ActivateEndpoint+0x2aa>
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	b29c      	uxth	r4, r3
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <USB_ActivateEndpoint+0x2ec>)
 8006d2c:	4323      	orrs	r3, r4
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d48:	b29c      	uxth	r4, r3
 8006d4a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006d4e:	b29c      	uxth	r4, r3
 8006d50:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006d54:	b29c      	uxth	r4, r3
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	441a      	add	r2, r3
 8006d60:	4b02      	ldr	r3, [pc, #8]	; (8006d6c <USB_ActivateEndpoint+0x2e4>)
 8006d62:	4323      	orrs	r3, r4
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8013      	strh	r3, [r2, #0]
 8006d68:	e176      	b.n	8007058 <USB_ActivateEndpoint+0x5d0>
 8006d6a:	bf00      	nop
 8006d6c:	ffff8080 	.word	0xffff8080
 8006d70:	ffff80c0 	.word	0xffff80c0
 8006d74:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	b29c      	uxth	r4, r3
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	4b96      	ldr	r3, [pc, #600]	; (8006ff4 <USB_ActivateEndpoint+0x56c>)
 8006d9c:	4323      	orrs	r3, r4
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006da2:	687c      	ldr	r4, [r7, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	441c      	add	r4, r3
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	4423      	add	r3, r4
 8006db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dba:	461c      	mov	r4, r3
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	891b      	ldrh	r3, [r3, #8]
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	8023      	strh	r3, [r4, #0]
 8006dca:	687c      	ldr	r4, [r7, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	441c      	add	r4, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4423      	add	r3, r4
 8006dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006de2:	461c      	mov	r4, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	895b      	ldrh	r3, [r3, #10]
 8006de8:	085b      	lsrs	r3, r3, #1
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 8088 	bne.w	8006f0c <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29c      	uxth	r4, r3
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d014      	beq.n	8006e3e <USB_ActivateEndpoint+0x3b6>
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2a:	b29c      	uxth	r4, r3
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	4b70      	ldr	r3, [pc, #448]	; (8006ff8 <USB_ActivateEndpoint+0x570>)
 8006e38:	4323      	orrs	r3, r4
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29c      	uxth	r4, r3
 8006e4c:	4623      	mov	r3, r4
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d014      	beq.n	8006e80 <USB_ActivateEndpoint+0x3f8>
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	b29c      	uxth	r4, r3
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	4b60      	ldr	r3, [pc, #384]	; (8006ffc <USB_ActivateEndpoint+0x574>)
 8006e7a:	4323      	orrs	r3, r4
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	b29c      	uxth	r4, r3
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	441a      	add	r2, r3
 8006ea2:	4b56      	ldr	r3, [pc, #344]	; (8006ffc <USB_ActivateEndpoint+0x574>)
 8006ea4:	4323      	orrs	r3, r4
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec0:	b29c      	uxth	r4, r3
 8006ec2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006ec6:	b29c      	uxth	r4, r3
 8006ec8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006ecc:	b29c      	uxth	r4, r3
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	4b49      	ldr	r3, [pc, #292]	; (8007000 <USB_ActivateEndpoint+0x578>)
 8006eda:	4323      	orrs	r3, r4
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef6:	b29c      	uxth	r4, r3
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	441a      	add	r2, r3
 8006f02:	4b3f      	ldr	r3, [pc, #252]	; (8007000 <USB_ActivateEndpoint+0x578>)
 8006f04:	4323      	orrs	r3, r4
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	8013      	strh	r3, [r2, #0]
 8006f0a:	e0a5      	b.n	8007058 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29c      	uxth	r4, r3
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d014      	beq.n	8006f4e <USB_ActivateEndpoint+0x4c6>
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	b29c      	uxth	r4, r3
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	441a      	add	r2, r3
 8006f46:	4b2c      	ldr	r3, [pc, #176]	; (8006ff8 <USB_ActivateEndpoint+0x570>)
 8006f48:	4323      	orrs	r3, r4
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29c      	uxth	r4, r3
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d014      	beq.n	8006f90 <USB_ActivateEndpoint+0x508>
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7c:	b29c      	uxth	r4, r3
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	441a      	add	r2, r3
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <USB_ActivateEndpoint+0x574>)
 8006f8a:	4323      	orrs	r3, r4
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa6:	b29c      	uxth	r4, r3
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <USB_ActivateEndpoint+0x570>)
 8006fb4:	4323      	orrs	r3, r4
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	78db      	ldrb	r3, [r3, #3]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d020      	beq.n	8007004 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	b29c      	uxth	r4, r3
 8006fda:	f084 0320 	eor.w	r3, r4, #32
 8006fde:	b29c      	uxth	r4, r3
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	441a      	add	r2, r3
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <USB_ActivateEndpoint+0x578>)
 8006fec:	4323      	orrs	r3, r4
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]
 8006ff2:	e01c      	b.n	800702e <USB_ActivateEndpoint+0x5a6>
 8006ff4:	ffff8180 	.word	0xffff8180
 8006ff8:	ffffc080 	.word	0xffffc080
 8006ffc:	ffff80c0 	.word	0xffff80c0
 8007000:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701a:	b29c      	uxth	r4, r3
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <USB_ActivateEndpoint+0x5dc>)
 8007028:	4323      	orrs	r3, r4
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007044:	b29c      	uxth	r4, r3
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	441a      	add	r2, r3
 8007050:	4b04      	ldr	r3, [pc, #16]	; (8007064 <USB_ActivateEndpoint+0x5dc>)
 8007052:	4323      	orrs	r3, r4
 8007054:	b29b      	uxth	r3, r3
 8007056:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bc90      	pop	{r4, r7}
 8007062:	4770      	bx	lr
 8007064:	ffff8080 	.word	0xffff8080

08007068 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007068:	b490      	push	{r4, r7}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	7b1b      	ldrb	r3, [r3, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d171      	bne.n	800715e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d036      	beq.n	80070f0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29c      	uxth	r4, r3
 8007090:	4623      	mov	r3, r4
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d014      	beq.n	80070c4 <USB_DeactivateEndpoint+0x5c>
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b0:	b29c      	uxth	r4, r3
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	4b6b      	ldr	r3, [pc, #428]	; (800726c <USB_DeactivateEndpoint+0x204>)
 80070be:	4323      	orrs	r3, r4
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070da:	b29c      	uxth	r4, r3
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	441a      	add	r2, r3
 80070e6:	4b62      	ldr	r3, [pc, #392]	; (8007270 <USB_DeactivateEndpoint+0x208>)
 80070e8:	4323      	orrs	r3, r4
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	8013      	strh	r3, [r2, #0]
 80070ee:	e144      	b.n	800737a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29c      	uxth	r4, r3
 80070fe:	4623      	mov	r3, r4
 8007100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d014      	beq.n	8007132 <USB_DeactivateEndpoint+0xca>
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	b29c      	uxth	r4, r3
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	441a      	add	r2, r3
 800712a:	4b52      	ldr	r3, [pc, #328]	; (8007274 <USB_DeactivateEndpoint+0x20c>)
 800712c:	4323      	orrs	r3, r4
 800712e:	b29b      	uxth	r3, r3
 8007130:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007148:	b29c      	uxth	r4, r3
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	4b46      	ldr	r3, [pc, #280]	; (8007270 <USB_DeactivateEndpoint+0x208>)
 8007156:	4323      	orrs	r3, r4
 8007158:	b29b      	uxth	r3, r3
 800715a:	8013      	strh	r3, [r2, #0]
 800715c:	e10d      	b.n	800737a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 8088 	bne.w	8007278 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29c      	uxth	r4, r3
 8007176:	4623      	mov	r3, r4
 8007178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d014      	beq.n	80071aa <USB_DeactivateEndpoint+0x142>
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	b29c      	uxth	r4, r3
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	4b34      	ldr	r3, [pc, #208]	; (8007274 <USB_DeactivateEndpoint+0x20c>)
 80071a4:	4323      	orrs	r3, r4
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29c      	uxth	r4, r3
 80071b8:	4623      	mov	r3, r4
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d014      	beq.n	80071ec <USB_DeactivateEndpoint+0x184>
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d8:	b29c      	uxth	r4, r3
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	441a      	add	r2, r3
 80071e4:	4b21      	ldr	r3, [pc, #132]	; (800726c <USB_DeactivateEndpoint+0x204>)
 80071e6:	4323      	orrs	r3, r4
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	b29c      	uxth	r4, r3
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	4b17      	ldr	r3, [pc, #92]	; (800726c <USB_DeactivateEndpoint+0x204>)
 8007210:	4323      	orrs	r3, r4
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722c:	b29c      	uxth	r4, r3
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	441a      	add	r2, r3
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <USB_DeactivateEndpoint+0x208>)
 800723a:	4323      	orrs	r3, r4
 800723c:	b29b      	uxth	r3, r3
 800723e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007256:	b29c      	uxth	r4, r3
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	4b03      	ldr	r3, [pc, #12]	; (8007270 <USB_DeactivateEndpoint+0x208>)
 8007264:	4323      	orrs	r3, r4
 8007266:	b29b      	uxth	r3, r3
 8007268:	8013      	strh	r3, [r2, #0]
 800726a:	e086      	b.n	800737a <USB_DeactivateEndpoint+0x312>
 800726c:	ffff80c0 	.word	0xffff80c0
 8007270:	ffff8080 	.word	0xffff8080
 8007274:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29c      	uxth	r4, r3
 8007286:	4623      	mov	r3, r4
 8007288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d014      	beq.n	80072ba <USB_DeactivateEndpoint+0x252>
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a6:	b29c      	uxth	r4, r3
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	441a      	add	r2, r3
 80072b2:	4b35      	ldr	r3, [pc, #212]	; (8007388 <USB_DeactivateEndpoint+0x320>)
 80072b4:	4323      	orrs	r3, r4
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29c      	uxth	r4, r3
 80072c8:	4623      	mov	r3, r4
 80072ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d014      	beq.n	80072fc <USB_DeactivateEndpoint+0x294>
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e8:	b29c      	uxth	r4, r3
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	4b25      	ldr	r3, [pc, #148]	; (800738c <USB_DeactivateEndpoint+0x324>)
 80072f6:	4323      	orrs	r3, r4
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	b29c      	uxth	r4, r3
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <USB_DeactivateEndpoint+0x320>)
 8007320:	4323      	orrs	r3, r4
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733c:	b29c      	uxth	r4, r3
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	441a      	add	r2, r3
 8007348:	4b11      	ldr	r3, [pc, #68]	; (8007390 <USB_DeactivateEndpoint+0x328>)
 800734a:	4323      	orrs	r3, r4
 800734c:	b29b      	uxth	r3, r3
 800734e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	b29c      	uxth	r4, r3
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	441a      	add	r2, r3
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <USB_DeactivateEndpoint+0x328>)
 8007374:	4323      	orrs	r3, r4
 8007376:	b29b      	uxth	r3, r3
 8007378:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bc90      	pop	{r4, r7}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	ffffc080 	.word	0xffffc080
 800738c:	ffff80c0 	.word	0xffff80c0
 8007390:	ffff8080 	.word	0xffff8080

08007394 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b08d      	sub	sp, #52	; 0x34
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	f040 8160 	bne.w	8007668 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d909      	bls.n	80073c8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	619a      	str	r2, [r3, #24]
 80073c6:	e005      	b.n	80073d4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2200      	movs	r2, #0
 80073d2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	7b1b      	ldrb	r3, [r3, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d119      	bne.n	8007410 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6959      	ldr	r1, [r3, #20]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	88da      	ldrh	r2, [r3, #6]
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fbbd 	bl	8007b68 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073ee:	687c      	ldr	r4, [r7, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	441c      	add	r4, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4423      	add	r3, r4
 8007402:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007406:	461c      	mov	r4, r3
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	b29b      	uxth	r3, r3
 800740c:	8023      	strh	r3, [r4, #0]
 800740e:	e10f      	b.n	8007630 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d065      	beq.n	80074f2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007426:	687c      	ldr	r4, [r7, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d148      	bne.n	80074c2 <USB_EPStartXfer+0x12e>
 8007430:	687c      	ldr	r4, [r7, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007438:	b29b      	uxth	r3, r3
 800743a:	441c      	add	r4, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	4423      	add	r3, r4
 8007444:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007448:	461c      	mov	r4, r3
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10e      	bne.n	800746e <USB_EPStartXfer+0xda>
 8007450:	8823      	ldrh	r3, [r4, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007458:	b29b      	uxth	r3, r3
 800745a:	8023      	strh	r3, [r4, #0]
 800745c:	8823      	ldrh	r3, [r4, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29b      	uxth	r3, r3
 800746a:	8023      	strh	r3, [r4, #0]
 800746c:	e03d      	b.n	80074ea <USB_EPStartXfer+0x156>
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	2b3e      	cmp	r3, #62	; 0x3e
 8007472:	d810      	bhi.n	8007496 <USB_EPStartXfer+0x102>
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <USB_EPStartXfer+0xf6>
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	3301      	adds	r3, #1
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	b29b      	uxth	r3, r3
 800748e:	029b      	lsls	r3, r3, #10
 8007490:	b29b      	uxth	r3, r3
 8007492:	8023      	strh	r3, [r4, #0]
 8007494:	e029      	b.n	80074ea <USB_EPStartXfer+0x156>
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <USB_EPStartXfer+0x118>
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	3b01      	subs	r3, #1
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	029b      	lsls	r3, r3, #10
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8023      	strh	r3, [r4, #0]
 80074c0:	e013      	b.n	80074ea <USB_EPStartXfer+0x156>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d10f      	bne.n	80074ea <USB_EPStartXfer+0x156>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	441c      	add	r4, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4423      	add	r3, r4
 80074dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	895b      	ldrh	r3, [r3, #10]
 80074ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80074f0:	e063      	b.n	80075ba <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d148      	bne.n	800758c <USB_EPStartXfer+0x1f8>
 80074fa:	687c      	ldr	r4, [r7, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007502:	b29b      	uxth	r3, r3
 8007504:	441c      	add	r4, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	4423      	add	r3, r4
 800750e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007512:	461c      	mov	r4, r3
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10e      	bne.n	8007538 <USB_EPStartXfer+0x1a4>
 800751a:	8823      	ldrh	r3, [r4, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007522:	b29b      	uxth	r3, r3
 8007524:	8023      	strh	r3, [r4, #0]
 8007526:	8823      	ldrh	r3, [r4, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007532:	b29b      	uxth	r3, r3
 8007534:	8023      	strh	r3, [r4, #0]
 8007536:	e03d      	b.n	80075b4 <USB_EPStartXfer+0x220>
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	2b3e      	cmp	r3, #62	; 0x3e
 800753c:	d810      	bhi.n	8007560 <USB_EPStartXfer+0x1cc>
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	085b      	lsrs	r3, r3, #1
 8007542:	623b      	str	r3, [r7, #32]
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <USB_EPStartXfer+0x1c0>
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	3301      	adds	r3, #1
 8007552:	623b      	str	r3, [r7, #32]
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	b29b      	uxth	r3, r3
 8007558:	029b      	lsls	r3, r3, #10
 800755a:	b29b      	uxth	r3, r3
 800755c:	8023      	strh	r3, [r4, #0]
 800755e:	e029      	b.n	80075b4 <USB_EPStartXfer+0x220>
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	623b      	str	r3, [r7, #32]
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <USB_EPStartXfer+0x1e2>
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	3b01      	subs	r3, #1
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	b29b      	uxth	r3, r3
 800757a:	029b      	lsls	r3, r3, #10
 800757c:	b29b      	uxth	r3, r3
 800757e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007586:	b29b      	uxth	r3, r3
 8007588:	8023      	strh	r3, [r4, #0]
 800758a:	e013      	b.n	80075b4 <USB_EPStartXfer+0x220>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10f      	bne.n	80075b4 <USB_EPStartXfer+0x220>
 8007594:	687c      	ldr	r4, [r7, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759c:	b29b      	uxth	r3, r3
 800759e:	441c      	add	r4, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	4423      	add	r3, r4
 80075a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075ac:	461c      	mov	r4, r3
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	891b      	ldrh	r3, [r3, #8]
 80075b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	6959      	ldr	r1, [r3, #20]
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 facf 	bl	8007b68 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d115      	bne.n	80075fe <USB_EPStartXfer+0x26a>
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e8:	b29c      	uxth	r4, r3
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	441a      	add	r2, r3
 80075f4:	4b9a      	ldr	r3, [pc, #616]	; (8007860 <USB_EPStartXfer+0x4cc>)
 80075f6:	4323      	orrs	r3, r4
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	8013      	strh	r3, [r2, #0]
 80075fc:	e018      	b.n	8007630 <USB_EPStartXfer+0x29c>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d114      	bne.n	8007630 <USB_EPStartXfer+0x29c>
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761c:	b29c      	uxth	r4, r3
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	441a      	add	r2, r3
 8007628:	4b8e      	ldr	r3, [pc, #568]	; (8007864 <USB_EPStartXfer+0x4d0>)
 800762a:	4323      	orrs	r3, r4
 800762c:	b29b      	uxth	r3, r3
 800762e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007646:	b29c      	uxth	r4, r3
 8007648:	f084 0310 	eor.w	r3, r4, #16
 800764c:	b29c      	uxth	r4, r3
 800764e:	f084 0320 	eor.w	r3, r4, #32
 8007652:	b29c      	uxth	r4, r3
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	441a      	add	r2, r3
 800765e:	4b82      	ldr	r3, [pc, #520]	; (8007868 <USB_EPStartXfer+0x4d4>)
 8007660:	4323      	orrs	r3, r4
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]
 8007666:	e146      	b.n	80078f6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	429a      	cmp	r2, r3
 8007672:	d909      	bls.n	8007688 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	1ad2      	subs	r2, r2, r3
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	619a      	str	r2, [r3, #24]
 8007686:	e005      	b.n	8007694 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	7b1b      	ldrb	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d148      	bne.n	800772e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800769c:	687c      	ldr	r4, [r7, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	441c      	add	r4, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	4423      	add	r3, r4
 80076b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076b4:	461c      	mov	r4, r3
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10e      	bne.n	80076da <USB_EPStartXfer+0x346>
 80076bc:	8823      	ldrh	r3, [r4, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8023      	strh	r3, [r4, #0]
 80076c8:	8823      	ldrh	r3, [r4, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	8023      	strh	r3, [r4, #0]
 80076d8:	e0f2      	b.n	80078c0 <USB_EPStartXfer+0x52c>
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	2b3e      	cmp	r3, #62	; 0x3e
 80076de:	d810      	bhi.n	8007702 <USB_EPStartXfer+0x36e>
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <USB_EPStartXfer+0x362>
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	3301      	adds	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	029b      	lsls	r3, r3, #10
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8023      	strh	r3, [r4, #0]
 8007700:	e0de      	b.n	80078c0 <USB_EPStartXfer+0x52c>
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <USB_EPStartXfer+0x384>
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	3b01      	subs	r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	b29b      	uxth	r3, r3
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	b29b      	uxth	r3, r3
 8007720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007728:	b29b      	uxth	r3, r3
 800772a:	8023      	strh	r3, [r4, #0]
 800772c:	e0c8      	b.n	80078c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	785b      	ldrb	r3, [r3, #1]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d148      	bne.n	80077c8 <USB_EPStartXfer+0x434>
 8007736:	687c      	ldr	r4, [r7, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	441c      	add	r4, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	4423      	add	r3, r4
 800774a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800774e:	461c      	mov	r4, r3
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10e      	bne.n	8007774 <USB_EPStartXfer+0x3e0>
 8007756:	8823      	ldrh	r3, [r4, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800775e:	b29b      	uxth	r3, r3
 8007760:	8023      	strh	r3, [r4, #0]
 8007762:	8823      	ldrh	r3, [r4, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776e:	b29b      	uxth	r3, r3
 8007770:	8023      	strh	r3, [r4, #0]
 8007772:	e03d      	b.n	80077f0 <USB_EPStartXfer+0x45c>
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	2b3e      	cmp	r3, #62	; 0x3e
 8007778:	d810      	bhi.n	800779c <USB_EPStartXfer+0x408>
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <USB_EPStartXfer+0x3fc>
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	3301      	adds	r3, #1
 800778e:	61bb      	str	r3, [r7, #24]
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29b      	uxth	r3, r3
 8007798:	8023      	strh	r3, [r4, #0]
 800779a:	e029      	b.n	80077f0 <USB_EPStartXfer+0x45c>
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d102      	bne.n	80077b2 <USB_EPStartXfer+0x41e>
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	029b      	lsls	r3, r3, #10
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	8023      	strh	r3, [r4, #0]
 80077c6:	e013      	b.n	80077f0 <USB_EPStartXfer+0x45c>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	785b      	ldrb	r3, [r3, #1]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d10f      	bne.n	80077f0 <USB_EPStartXfer+0x45c>
 80077d0:	687c      	ldr	r4, [r7, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d8:	b29b      	uxth	r3, r3
 80077da:	441c      	add	r4, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4423      	add	r3, r4
 80077e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077e8:	461c      	mov	r4, r3
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	8023      	strh	r3, [r4, #0]
 80077f0:	687c      	ldr	r4, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d14e      	bne.n	8007898 <USB_EPStartXfer+0x504>
 80077fa:	687c      	ldr	r4, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007802:	b29b      	uxth	r3, r3
 8007804:	441c      	add	r4, r3
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	4423      	add	r3, r4
 800780e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007812:	461c      	mov	r4, r3
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10e      	bne.n	8007838 <USB_EPStartXfer+0x4a4>
 800781a:	8823      	ldrh	r3, [r4, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007822:	b29b      	uxth	r3, r3
 8007824:	8023      	strh	r3, [r4, #0]
 8007826:	8823      	ldrh	r3, [r4, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007832:	b29b      	uxth	r3, r3
 8007834:	8023      	strh	r3, [r4, #0]
 8007836:	e043      	b.n	80078c0 <USB_EPStartXfer+0x52c>
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	2b3e      	cmp	r3, #62	; 0x3e
 800783c:	d816      	bhi.n	800786c <USB_EPStartXfer+0x4d8>
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	085b      	lsrs	r3, r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <USB_EPStartXfer+0x4c0>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	3301      	adds	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	b29b      	uxth	r3, r3
 8007858:	029b      	lsls	r3, r3, #10
 800785a:	b29b      	uxth	r3, r3
 800785c:	8023      	strh	r3, [r4, #0]
 800785e:	e02f      	b.n	80078c0 <USB_EPStartXfer+0x52c>
 8007860:	ffff80c0 	.word	0xffff80c0
 8007864:	ffffc080 	.word	0xffffc080
 8007868:	ffff8080 	.word	0xffff8080
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <USB_EPStartXfer+0x4ee>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3b01      	subs	r3, #1
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	b29b      	uxth	r3, r3
 8007886:	029b      	lsls	r3, r3, #10
 8007888:	b29b      	uxth	r3, r3
 800788a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007892:	b29b      	uxth	r3, r3
 8007894:	8023      	strh	r3, [r4, #0]
 8007896:	e013      	b.n	80078c0 <USB_EPStartXfer+0x52c>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10f      	bne.n	80078c0 <USB_EPStartXfer+0x52c>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	441c      	add	r4, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4423      	add	r3, r4
 80078b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d6:	b29c      	uxth	r4, r3
 80078d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80078dc:	b29c      	uxth	r4, r3
 80078de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80078e2:	b29c      	uxth	r4, r3
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	441a      	add	r2, r3
 80078ee:	4b04      	ldr	r3, [pc, #16]	; (8007900 <USB_EPStartXfer+0x56c>)
 80078f0:	4323      	orrs	r3, r4
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3734      	adds	r7, #52	; 0x34
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd90      	pop	{r4, r7, pc}
 8007900:	ffff8080 	.word	0xffff8080

08007904 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007904:	b490      	push	{r4, r7}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792c:	b29c      	uxth	r4, r3
 800792e:	f084 0310 	eor.w	r3, r4, #16
 8007932:	b29c      	uxth	r4, r3
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	441a      	add	r2, r3
 800793e:	4b11      	ldr	r3, [pc, #68]	; (8007984 <USB_EPSetStall+0x80>)
 8007940:	4323      	orrs	r3, r4
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]
 8007946:	e017      	b.n	8007978 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	b29c      	uxth	r4, r3
 8007960:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007964:	b29c      	uxth	r4, r3
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	441a      	add	r2, r3
 8007970:	4b04      	ldr	r3, [pc, #16]	; (8007984 <USB_EPSetStall+0x80>)
 8007972:	4323      	orrs	r3, r4
 8007974:	b29b      	uxth	r3, r3
 8007976:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bc90      	pop	{r4, r7}
 8007982:	4770      	bx	lr
 8007984:	ffff8080 	.word	0xffff8080

08007988 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007988:	b490      	push	{r4, r7}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	7b1b      	ldrb	r3, [r3, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d17d      	bne.n	8007a96 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d03d      	beq.n	8007a1e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29c      	uxth	r4, r3
 80079b0:	4623      	mov	r3, r4
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d014      	beq.n	80079e4 <USB_EPClearStall+0x5c>
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d0:	b29c      	uxth	r4, r3
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	441a      	add	r2, r3
 80079dc:	4b31      	ldr	r3, [pc, #196]	; (8007aa4 <USB_EPClearStall+0x11c>)
 80079de:	4323      	orrs	r3, r4
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	78db      	ldrb	r3, [r3, #3]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d054      	beq.n	8007a96 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a02:	b29c      	uxth	r4, r3
 8007a04:	f084 0320 	eor.w	r3, r4, #32
 8007a08:	b29c      	uxth	r4, r3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <USB_EPClearStall+0x120>)
 8007a16:	4323      	orrs	r3, r4
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	8013      	strh	r3, [r2, #0]
 8007a1c:	e03b      	b.n	8007a96 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29c      	uxth	r4, r3
 8007a2c:	4623      	mov	r3, r4
 8007a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d014      	beq.n	8007a60 <USB_EPClearStall+0xd8>
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	b29c      	uxth	r4, r3
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	4b14      	ldr	r3, [pc, #80]	; (8007aac <USB_EPClearStall+0x124>)
 8007a5a:	4323      	orrs	r3, r4
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a76:	b29c      	uxth	r4, r3
 8007a78:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007a7c:	b29c      	uxth	r4, r3
 8007a7e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007a82:	b29c      	uxth	r4, r3
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	441a      	add	r2, r3
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <USB_EPClearStall+0x120>)
 8007a90:	4323      	orrs	r3, r4
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc90      	pop	{r4, r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	ffff80c0 	.word	0xffff80c0
 8007aa8:	ffff8080 	.word	0xffff8080
 8007aac:	ffffc080 	.word	0xffffc080

08007ab0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2280      	movs	r2, #128	; 0x80
 8007ac6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b42:	68fb      	ldr	r3, [r7, #12]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b08d      	sub	sp, #52	; 0x34
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4611      	mov	r1, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	460b      	mov	r3, r1
 8007b78:	80fb      	strh	r3, [r7, #6]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b7e:	88bb      	ldrh	r3, [r7, #4]
 8007b80:	3301      	adds	r3, #1
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b8e:	88fa      	ldrh	r2, [r7, #6]
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9e:	e01b      	b.n	8007bd8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	3301      	adds	r3, #1
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	3302      	adds	r3, #2
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	3301      	adds	r3, #1
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e0      	bne.n	8007ba0 <USB_WritePMA+0x38>
  }
}
 8007bde:	bf00      	nop
 8007be0:	3734      	adds	r7, #52	; 0x34
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b08b      	sub	sp, #44	; 0x2c
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	80fb      	strh	r3, [r7, #6]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007c00:	88bb      	ldrh	r3, [r7, #4]
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c1a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c20:	e018      	b.n	8007c54 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	0a1b      	lsrs	r3, r3, #8
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	3b01      	subs	r3, #1
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e3      	bne.n	8007c22 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007c5a:	88bb      	ldrh	r3, [r7, #4]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	701a      	strb	r2, [r3, #0]
  }
}
 8007c76:	bf00      	nop
 8007c78:	372c      	adds	r7, #44	; 0x2c
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7c1b      	ldrb	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d115      	bne.n	8007cc6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	2181      	movs	r1, #129	; 0x81
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f005 fb74 	bl	800d390 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f005 fb6a 	bl	800d390 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007cc4:	e012      	b.n	8007cec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	2202      	movs	r2, #2
 8007cca:	2181      	movs	r1, #129	; 0x81
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f005 fb5f 	bl	800d390 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	2202      	movs	r2, #2
 8007cdc:	2101      	movs	r1, #1
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f005 fb56 	bl	800d390 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cec:	2308      	movs	r3, #8
 8007cee:	2203      	movs	r2, #3
 8007cf0:	2182      	movs	r1, #130	; 0x82
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f005 fb4c 	bl	800d390 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cfe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d02:	f005 fd3f 	bl	800d784 <USBD_static_malloc>
 8007d06:	4602      	mov	r2, r0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
 8007d1c:	e026      	b.n	8007d6c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7c1b      	ldrb	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d109      	bne.n	8007d5c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d52:	2101      	movs	r1, #1
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f005 fc91 	bl	800d67c <USBD_LL_PrepareReceive>
 8007d5a:	e007      	b.n	8007d6c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d62:	2340      	movs	r3, #64	; 0x40
 8007d64:	2101      	movs	r1, #1
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f005 fc88 	bl	800d67c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d86:	2181      	movs	r1, #129	; 0x81
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f005 fb3f 	bl	800d40c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d94:	2101      	movs	r1, #1
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f005 fb38 	bl	800d40c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007da4:	2182      	movs	r1, #130	; 0x82
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f005 fb30 	bl	800d40c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00e      	beq.n	8007dda <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f005 fce7 	bl	800d7a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d039      	beq.n	8007e82 <USBD_CDC_Setup+0x9e>
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d17c      	bne.n	8007f0c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d029      	beq.n	8007e6e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da11      	bge.n	8007e48 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007e30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	88d2      	ldrh	r2, [r2, #6]
 8007e36:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e38:	6939      	ldr	r1, [r7, #16]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	88db      	ldrh	r3, [r3, #6]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fa2b 	bl	800929c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e46:	e068      	b.n	8007f1a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	785a      	ldrb	r2, [r3, #1]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	88db      	ldrh	r3, [r3, #6]
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e5e:	6939      	ldr	r1, [r7, #16]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	88db      	ldrh	r3, [r3, #6]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 fa46 	bl	80092f8 <USBD_CtlPrepareRx>
      break;
 8007e6c:	e055      	b.n	8007f1a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	7850      	ldrb	r0, [r2, #1]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	4798      	blx	r3
      break;
 8007e80:	e04b      	b.n	8007f1a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b0a      	cmp	r3, #10
 8007e88:	d017      	beq.n	8007eba <USBD_CDC_Setup+0xd6>
 8007e8a:	2b0b      	cmp	r3, #11
 8007e8c:	d029      	beq.n	8007ee2 <USBD_CDC_Setup+0xfe>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d133      	bne.n	8007efa <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d107      	bne.n	8007eac <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f9f9 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eaa:	e02e      	b.n	8007f0a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 f989 	bl	80091c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	75fb      	strb	r3, [r7, #23]
          break;
 8007eb8:	e027      	b.n	8007f0a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d107      	bne.n	8007ed4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ec4:	f107 030f 	add.w	r3, r7, #15
 8007ec8:	2201      	movs	r2, #1
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 f9e5 	bl	800929c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ed2:	e01a      	b.n	8007f0a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f975 	bl	80091c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007edc:	2302      	movs	r3, #2
 8007ede:	75fb      	strb	r3, [r7, #23]
          break;
 8007ee0:	e013      	b.n	8007f0a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d00d      	beq.n	8007f08 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 f969 	bl	80091c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ef8:	e006      	b.n	8007f08 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f962 	bl	80091c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f02:	2302      	movs	r3, #2
 8007f04:	75fb      	strb	r3, [r7, #23]
          break;
 8007f06:	e000      	b.n	8007f0a <USBD_CDC_Setup+0x126>
          break;
 8007f08:	bf00      	nop
      }
      break;
 8007f0a:	e006      	b.n	8007f1a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 f959 	bl	80091c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	75fb      	strb	r3, [r7, #23]
      break;
 8007f18:	bf00      	nop
  }

  return ret;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f36:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f3e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d037      	beq.n	8007fba <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	331c      	adds	r3, #28
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d026      	beq.n	8007fae <USBD_CDC_DataIn+0x8a>
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	440b      	add	r3, r1
 8007f6e:	331c      	adds	r3, #28
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	78fa      	ldrb	r2, [r7, #3]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	0152      	lsls	r2, r2, #5
 8007f78:	440a      	add	r2, r1
 8007f7a:	3238      	adds	r2, #56	; 0x38
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f82:	fb02 f201 	mul.w	r2, r2, r1
 8007f86:	1a9b      	subs	r3, r3, r2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d110      	bne.n	8007fae <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	440b      	add	r3, r1
 8007f9a:	331c      	adds	r3, #28
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fa0:	78f9      	ldrb	r1, [r7, #3]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f005 fb2e 	bl	800d608 <USBD_LL_Transmit>
 8007fac:	e003      	b.n	8007fb6 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e000      	b.n	8007fbc <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8007fba:	2302      	movs	r3, #2
  }
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f005 fb87 	bl	800d6f0 <USBD_LL_GetRxDataSize>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00d      	beq.n	8008010 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008008:	4611      	mov	r1, r2
 800800a:	4798      	blx	r3

    return USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	e000      	b.n	8008012 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008010:	2302      	movs	r3, #2
  }
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008028:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008030:	2b00      	cmp	r3, #0
 8008032:	d015      	beq.n	8008060 <USBD_CDC_EP0_RxReady+0x46>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800803a:	2bff      	cmp	r3, #255	; 0xff
 800803c:	d010      	beq.n	8008060 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800804c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008054:	b292      	uxth	r2, r2
 8008056:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	22ff      	movs	r2, #255	; 0xff
 800805c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2243      	movs	r2, #67	; 0x43
 8008078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	200000bc 	.word	0x200000bc

0800808c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2243      	movs	r2, #67	; 0x43
 8008098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20000078 	.word	0x20000078

080080ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2243      	movs	r2, #67	; 0x43
 80080b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80080ba:	4b03      	ldr	r3, [pc, #12]	; (80080c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	20000100 	.word	0x20000100

080080cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	220a      	movs	r2, #10
 80080d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	20000034 	.word	0x20000034

080080ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080f6:	2302      	movs	r3, #2
 80080f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d005      	beq.n	800810c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800811a:	b480      	push	{r7}
 800811c:	b087      	sub	sp, #28
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	4613      	mov	r3, r2
 8008126:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800814e:	b480      	push	{r7}
 8008150:	b085      	sub	sp, #20
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008184:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01c      	beq.n	80081ca <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008196:	2b00      	cmp	r3, #0
 8008198:	d115      	bne.n	80081c6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	2181      	movs	r1, #129	; 0x81
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f005 fa23 	bl	800d608 <USBD_LL_Transmit>

      return USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e002      	b.n	80081cc <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d017      	beq.n	800821e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	7c1b      	ldrb	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008200:	2101      	movs	r1, #1
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f005 fa3a 	bl	800d67c <USBD_LL_PrepareReceive>
 8008208:	e007      	b.n	800821a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008210:	2340      	movs	r3, #64	; 0x40
 8008212:	2101      	movs	r1, #1
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f005 fa31 	bl	800d67c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800821e:	2302      	movs	r3, #2
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800823c:	2302      	movs	r3, #2
 800823e:	e01a      	b.n	8008276 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	79fa      	ldrb	r2, [r7, #7]
 800826c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f004 fffa 	bl	800d268 <USBD_LL_Init>

  return USBD_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d006      	beq.n	80082a0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
 800829e:	e001      	b.n	80082a4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80082a0:	2302      	movs	r3, #2
 80082a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f005 f836 	bl	800d32c <USBD_LL_Start>

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082ec:	2302      	movs	r3, #2
 80082ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00c      	beq.n	8008314 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	4611      	mov	r1, r2
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	460b      	mov	r3, r1
 8008328:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	4611      	mov	r1, r2
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3

  return USBD_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fef8 	bl	800914c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	2b01      	cmp	r3, #1
 800837e:	d00c      	beq.n	800839a <USBD_LL_SetupStage+0x56>
 8008380:	2b01      	cmp	r3, #1
 8008382:	d302      	bcc.n	800838a <USBD_LL_SetupStage+0x46>
 8008384:	2b02      	cmp	r3, #2
 8008386:	d010      	beq.n	80083aa <USBD_LL_SetupStage+0x66>
 8008388:	e017      	b.n	80083ba <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f9ce 	bl	8008734 <USBD_StdDevReq>
      break;
 8008398:	e01a      	b.n	80083d0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa30 	bl	8008808 <USBD_StdItfReq>
      break;
 80083a8:	e012      	b.n	80083d0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa6e 	bl	8008894 <USBD_StdEPReq>
      break;
 80083b8:	e00a      	b.n	80083d0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f005 f855 	bl	800d478 <USBD_LL_StallEP>
      break;
 80083ce:	bf00      	nop
  }

  return USBD_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b086      	sub	sp, #24
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	460b      	mov	r3, r1
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d14b      	bne.n	8008486 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d134      	bne.n	800846a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d919      	bls.n	8008440 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	1ad2      	subs	r2, r2, r3
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008422:	429a      	cmp	r2, r3
 8008424:	d203      	bcs.n	800842e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800842a:	b29b      	uxth	r3, r3
 800842c:	e002      	b.n	8008434 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008432:	b29b      	uxth	r3, r3
 8008434:	461a      	mov	r2, r3
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 ff7b 	bl	8009334 <USBD_CtlContinueRx>
 800843e:	e038      	b.n	80084b2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008452:	2b03      	cmp	r3, #3
 8008454:	d105      	bne.n	8008462 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 ff78 	bl	8009358 <USBD_CtlSendStatus>
 8008468:	e023      	b.n	80084b2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008470:	2b05      	cmp	r3, #5
 8008472:	d11e      	bne.n	80084b2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800847c:	2100      	movs	r1, #0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f004 fffa 	bl	800d478 <USBD_LL_StallEP>
 8008484:	e015      	b.n	80084b2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00d      	beq.n	80084ae <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008498:	2b03      	cmp	r3, #3
 800849a:	d108      	bne.n	80084ae <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	7afa      	ldrb	r2, [r7, #11]
 80084a6:	4611      	mov	r1, r2
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	4798      	blx	r3
 80084ac:	e001      	b.n	80084b2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084ae:	2302      	movs	r3, #2
 80084b0:	e000      	b.n	80084b4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	460b      	mov	r3, r1
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084ca:	7afb      	ldrb	r3, [r7, #11]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d17f      	bne.n	80085d0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3314      	adds	r3, #20
 80084d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d15c      	bne.n	800859a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d915      	bls.n	8008518 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	1ad2      	subs	r2, r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fee5 	bl	80092d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800850a:	2300      	movs	r3, #0
 800850c:	2200      	movs	r2, #0
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f005 f8b3 	bl	800d67c <USBD_LL_PrepareReceive>
 8008516:	e04e      	b.n	80085b6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	6912      	ldr	r2, [r2, #16]
 8008520:	fbb3 f1f2 	udiv	r1, r3, r2
 8008524:	fb02 f201 	mul.w	r2, r2, r1
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d11c      	bne.n	8008568 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008536:	429a      	cmp	r2, r3
 8008538:	d316      	bcc.n	8008568 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008544:	429a      	cmp	r2, r3
 8008546:	d20f      	bcs.n	8008568 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 fec1 	bl	80092d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800855a:	2300      	movs	r3, #0
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f005 f88b 	bl	800d67c <USBD_LL_PrepareReceive>
 8008566:	e026      	b.n	80085b6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800857a:	2b03      	cmp	r3, #3
 800857c:	d105      	bne.n	800858a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800858a:	2180      	movs	r1, #128	; 0x80
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f004 ff73 	bl	800d478 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fef3 	bl	800937e <USBD_CtlReceiveStatus>
 8008598:	e00d      	b.n	80085b6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d004      	beq.n	80085ae <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d103      	bne.n	80085b6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085ae:	2180      	movs	r1, #128	; 0x80
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f004 ff61 	bl	800d478 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d11d      	bne.n	80085fc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff fe82 	bl	80082ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085ce:	e015      	b.n	80085fc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00d      	beq.n	80085f8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d108      	bne.n	80085f8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	7afa      	ldrb	r2, [r7, #11]
 80085f0:	4611      	mov	r1, r2
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	4798      	blx	r3
 80085f6:	e001      	b.n	80085fc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085f8:	2302      	movs	r3, #2
 80085fa:	e000      	b.n	80085fe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800860e:	2340      	movs	r3, #64	; 0x40
 8008610:	2200      	movs	r2, #0
 8008612:	2100      	movs	r1, #0
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f004 febb 	bl	800d390 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2240      	movs	r2, #64	; 0x40
 8008626:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800862a:	2340      	movs	r3, #64	; 0x40
 800862c:	2200      	movs	r2, #0
 800862e:	2180      	movs	r1, #128	; 0x80
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f004 fead 	bl	800d390 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2240      	movs	r2, #64	; 0x40
 8008640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6852      	ldr	r2, [r2, #4]
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	4611      	mov	r1, r2
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
  }

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2204      	movs	r2, #4
 80086c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d105      	bne.n	80086f0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870c:	2b03      	cmp	r3, #3
 800870e:	d10b      	bne.n	8008728 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d005      	beq.n	8008728 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800874a:	2b20      	cmp	r3, #32
 800874c:	d004      	beq.n	8008758 <USBD_StdDevReq+0x24>
 800874e:	2b40      	cmp	r3, #64	; 0x40
 8008750:	d002      	beq.n	8008758 <USBD_StdDevReq+0x24>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d008      	beq.n	8008768 <USBD_StdDevReq+0x34>
 8008756:	e04c      	b.n	80087f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
      break;
 8008766:	e049      	b.n	80087fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	785b      	ldrb	r3, [r3, #1]
 800876c:	2b09      	cmp	r3, #9
 800876e:	d83a      	bhi.n	80087e6 <USBD_StdDevReq+0xb2>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <USBD_StdDevReq+0x44>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	080087c9 	.word	0x080087c9
 800877c:	080087dd 	.word	0x080087dd
 8008780:	080087e7 	.word	0x080087e7
 8008784:	080087d3 	.word	0x080087d3
 8008788:	080087e7 	.word	0x080087e7
 800878c:	080087ab 	.word	0x080087ab
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087e7 	.word	0x080087e7
 8008798:	080087bf 	.word	0x080087bf
 800879c:	080087b5 	.word	0x080087b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f9d4 	bl	8008b50 <USBD_GetDescriptor>
          break;
 80087a8:	e022      	b.n	80087f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fb61 	bl	8008e74 <USBD_SetAddress>
          break;
 80087b2:	e01d      	b.n	80087f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb9e 	bl	8008ef8 <USBD_SetConfig>
          break;
 80087bc:	e018      	b.n	80087f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fc27 	bl	8009014 <USBD_GetConfig>
          break;
 80087c6:	e013      	b.n	80087f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fc56 	bl	800907c <USBD_GetStatus>
          break;
 80087d0:	e00e      	b.n	80087f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fc84 	bl	80090e2 <USBD_SetFeature>
          break;
 80087da:	e009      	b.n	80087f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fc93 	bl	800910a <USBD_ClrFeature>
          break;
 80087e4:	e004      	b.n	80087f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fcec 	bl	80091c6 <USBD_CtlError>
          break;
 80087ee:	bf00      	nop
      }
      break;
 80087f0:	e004      	b.n	80087fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fce6 	bl	80091c6 <USBD_CtlError>
      break;
 80087fa:	bf00      	nop
  }

  return ret;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop

08008808 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800881e:	2b20      	cmp	r3, #32
 8008820:	d003      	beq.n	800882a <USBD_StdItfReq+0x22>
 8008822:	2b40      	cmp	r3, #64	; 0x40
 8008824:	d001      	beq.n	800882a <USBD_StdItfReq+0x22>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d12a      	bne.n	8008880 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008830:	3b01      	subs	r3, #1
 8008832:	2b02      	cmp	r3, #2
 8008834:	d81d      	bhi.n	8008872 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	889b      	ldrh	r3, [r3, #4]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b01      	cmp	r3, #1
 800883e:	d813      	bhi.n	8008868 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d110      	bne.n	800887c <USBD_StdItfReq+0x74>
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10d      	bne.n	800887c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fd79 	bl	8009358 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008866:	e009      	b.n	800887c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fcab 	bl	80091c6 <USBD_CtlError>
          break;
 8008870:	e004      	b.n	800887c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fca6 	bl	80091c6 <USBD_CtlError>
          break;
 800887a:	e000      	b.n	800887e <USBD_StdItfReq+0x76>
          break;
 800887c:	bf00      	nop
      }
      break;
 800887e:	e004      	b.n	800888a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fc9f 	bl	80091c6 <USBD_CtlError>
      break;
 8008888:	bf00      	nop
  }

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	889b      	ldrh	r3, [r3, #4]
 80088a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	d004      	beq.n	80088be <USBD_StdEPReq+0x2a>
 80088b4:	2b40      	cmp	r3, #64	; 0x40
 80088b6:	d002      	beq.n	80088be <USBD_StdEPReq+0x2a>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <USBD_StdEPReq+0x3a>
 80088bc:	e13d      	b.n	8008b3a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	4798      	blx	r3
      break;
 80088cc:	e13a      	b.n	8008b44 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d10a      	bne.n	80088f0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]

        return ret;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	e12a      	b.n	8008b46 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d03e      	beq.n	8008976 <USBD_StdEPReq+0xe2>
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d002      	beq.n	8008902 <USBD_StdEPReq+0x6e>
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d070      	beq.n	80089e2 <USBD_StdEPReq+0x14e>
 8008900:	e115      	b.n	8008b2e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008908:	2b02      	cmp	r3, #2
 800890a:	d002      	beq.n	8008912 <USBD_StdEPReq+0x7e>
 800890c:	2b03      	cmp	r3, #3
 800890e:	d015      	beq.n	800893c <USBD_StdEPReq+0xa8>
 8008910:	e02b      	b.n	800896a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <USBD_StdEPReq+0x9e>
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d009      	beq.n	8008932 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f004 fda8 	bl	800d478 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008928:	2180      	movs	r1, #128	; 0x80
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f004 fda4 	bl	800d478 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008930:	e020      	b.n	8008974 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc46 	bl	80091c6 <USBD_CtlError>
              break;
 800893a:	e01b      	b.n	8008974 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	885b      	ldrh	r3, [r3, #2]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10e      	bne.n	8008962 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <USBD_StdEPReq+0xce>
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d008      	beq.n	8008962 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	88db      	ldrh	r3, [r3, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f004 fd8b 	bl	800d478 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fcf8 	bl	8009358 <USBD_CtlSendStatus>

              break;
 8008968:	e004      	b.n	8008974 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fc2a 	bl	80091c6 <USBD_CtlError>
              break;
 8008972:	bf00      	nop
          }
          break;
 8008974:	e0e0      	b.n	8008b38 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	2b02      	cmp	r3, #2
 800897e:	d002      	beq.n	8008986 <USBD_StdEPReq+0xf2>
 8008980:	2b03      	cmp	r3, #3
 8008982:	d015      	beq.n	80089b0 <USBD_StdEPReq+0x11c>
 8008984:	e026      	b.n	80089d4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00c      	beq.n	80089a6 <USBD_StdEPReq+0x112>
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d009      	beq.n	80089a6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f004 fd6e 	bl	800d478 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800899c:	2180      	movs	r1, #128	; 0x80
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f004 fd6a 	bl	800d478 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089a4:	e01c      	b.n	80089e0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fc0c 	bl	80091c6 <USBD_CtlError>
              break;
 80089ae:	e017      	b.n	80089e0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	885b      	ldrh	r3, [r3, #2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d112      	bne.n	80089de <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f004 fd8c 	bl	800d4e4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fcc3 	bl	8009358 <USBD_CtlSendStatus>
              }
              break;
 80089d2:	e004      	b.n	80089de <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fbf5 	bl	80091c6 <USBD_CtlError>
              break;
 80089dc:	e000      	b.n	80089e0 <USBD_StdEPReq+0x14c>
              break;
 80089de:	bf00      	nop
          }
          break;
 80089e0:	e0aa      	b.n	8008b38 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d002      	beq.n	80089f2 <USBD_StdEPReq+0x15e>
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d032      	beq.n	8008a56 <USBD_StdEPReq+0x1c2>
 80089f0:	e097      	b.n	8008b22 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <USBD_StdEPReq+0x174>
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d004      	beq.n	8008a08 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbe0 	bl	80091c6 <USBD_CtlError>
                break;
 8008a06:	e091      	b.n	8008b2c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da0b      	bge.n	8008a28 <USBD_StdEPReq+0x194>
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	3310      	adds	r3, #16
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	3304      	adds	r3, #4
 8008a26:	e00b      	b.n	8008a40 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3304      	adds	r3, #4
 8008a40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fc24 	bl	800929c <USBD_CtlSendData>
              break;
 8008a54:	e06a      	b.n	8008b2c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da11      	bge.n	8008a82 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	3318      	adds	r3, #24
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d117      	bne.n	8008aa8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fba3 	bl	80091c6 <USBD_CtlError>
                  break;
 8008a80:	e054      	b.n	8008b2c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	f003 020f 	and.w	r2, r3, #15
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fb90 	bl	80091c6 <USBD_CtlError>
                  break;
 8008aa6:	e041      	b.n	8008b2c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da0b      	bge.n	8008ac8 <USBD_StdEPReq+0x234>
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	3310      	adds	r3, #16
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	e00b      	b.n	8008ae0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	3304      	adds	r3, #4
 8008ae0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <USBD_StdEPReq+0x25a>
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b80      	cmp	r3, #128	; 0x80
 8008aec:	d103      	bne.n	8008af6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e00e      	b.n	8008b14 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f004 fd28 	bl	800d550 <USBD_LL_IsStallEP>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e002      	b.n	8008b14 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2202      	movs	r2, #2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fbbe 	bl	800929c <USBD_CtlSendData>
              break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fb4e 	bl	80091c6 <USBD_CtlError>
              break;
 8008b2a:	bf00      	nop
          }
          break;
 8008b2c:	e004      	b.n	8008b38 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fb48 	bl	80091c6 <USBD_CtlError>
          break;
 8008b36:	bf00      	nop
      }
      break;
 8008b38:	e004      	b.n	8008b44 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb42 	bl	80091c6 <USBD_CtlError>
      break;
 8008b42:	bf00      	nop
  }

  return ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	2b0e      	cmp	r3, #14
 8008b72:	f200 8152 	bhi.w	8008e1a <USBD_GetDescriptor+0x2ca>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <USBD_GetDescriptor+0x2c>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008bed 	.word	0x08008bed
 8008b80:	08008c05 	.word	0x08008c05
 8008b84:	08008c45 	.word	0x08008c45
 8008b88:	08008e1b 	.word	0x08008e1b
 8008b8c:	08008e1b 	.word	0x08008e1b
 8008b90:	08008dbb 	.word	0x08008dbb
 8008b94:	08008de7 	.word	0x08008de7
 8008b98:	08008e1b 	.word	0x08008e1b
 8008b9c:	08008e1b 	.word	0x08008e1b
 8008ba0:	08008e1b 	.word	0x08008e1b
 8008ba4:	08008e1b 	.word	0x08008e1b
 8008ba8:	08008e1b 	.word	0x08008e1b
 8008bac:	08008e1b 	.word	0x08008e1b
 8008bb0:	08008e1b 	.word	0x08008e1b
 8008bb4:	08008bb9 	.word	0x08008bb9
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7c12      	ldrb	r2, [r2, #16]
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bda:	e126      	b.n	8008e2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 faf1 	bl	80091c6 <USBD_CtlError>
        err++;
 8008be4:	7afb      	ldrb	r3, [r7, #11]
 8008be6:	3301      	adds	r3, #1
 8008be8:	72fb      	strb	r3, [r7, #11]
      break;
 8008bea:	e11e      	b.n	8008e2a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	7c12      	ldrb	r2, [r2, #16]
 8008bf8:	f107 0108 	add.w	r1, r7, #8
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4798      	blx	r3
 8008c00:	60f8      	str	r0, [r7, #12]
      break;
 8008c02:	e112      	b.n	8008e2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7c1b      	ldrb	r3, [r3, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10d      	bne.n	8008c28 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	f107 0208 	add.w	r2, r7, #8
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4798      	blx	r3
 8008c1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3301      	adds	r3, #1
 8008c22:	2202      	movs	r2, #2
 8008c24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c26:	e100      	b.n	8008e2a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	f107 0208 	add.w	r2, r7, #8
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
 8008c38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
      break;
 8008c42:	e0f2      	b.n	8008e2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	885b      	ldrh	r3, [r3, #2]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	f200 80ac 	bhi.w	8008da8 <USBD_GetDescriptor+0x258>
 8008c50:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <USBD_GetDescriptor+0x108>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008c71 	.word	0x08008c71
 8008c5c:	08008ca5 	.word	0x08008ca5
 8008c60:	08008cd9 	.word	0x08008cd9
 8008c64:	08008d0d 	.word	0x08008d0d
 8008c68:	08008d41 	.word	0x08008d41
 8008c6c:	08008d75 	.word	0x08008d75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c92:	e091      	b.n	8008db8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa95 	bl	80091c6 <USBD_CtlError>
            err++;
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ca2:	e089      	b.n	8008db8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	7c12      	ldrb	r2, [r2, #16]
 8008cbc:	f107 0108 	add.w	r1, r7, #8
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc6:	e077      	b.n	8008db8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa7b 	bl	80091c6 <USBD_CtlError>
            err++;
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd6:	e06f      	b.n	8008db8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7c12      	ldrb	r2, [r2, #16]
 8008cf0:	f107 0108 	add.w	r1, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfa:	e05d      	b.n	8008db8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fa61 	bl	80091c6 <USBD_CtlError>
            err++;
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	3301      	adds	r3, #1
 8008d08:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0a:	e055      	b.n	8008db8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	7c12      	ldrb	r2, [r2, #16]
 8008d24:	f107 0108 	add.w	r1, r7, #8
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4798      	blx	r3
 8008d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2e:	e043      	b.n	8008db8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa47 	bl	80091c6 <USBD_CtlError>
            err++;
 8008d38:	7afb      	ldrb	r3, [r7, #11]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3e:	e03b      	b.n	8008db8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7c12      	ldrb	r2, [r2, #16]
 8008d58:	f107 0108 	add.w	r1, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d62:	e029      	b.n	8008db8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa2d 	bl	80091c6 <USBD_CtlError>
            err++;
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	72fb      	strb	r3, [r7, #11]
          break;
 8008d72:	e021      	b.n	8008db8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	7c12      	ldrb	r2, [r2, #16]
 8008d8c:	f107 0108 	add.w	r1, r7, #8
 8008d90:	4610      	mov	r0, r2
 8008d92:	4798      	blx	r3
 8008d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d96:	e00f      	b.n	8008db8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa13 	bl	80091c6 <USBD_CtlError>
            err++;
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	3301      	adds	r3, #1
 8008da4:	72fb      	strb	r3, [r7, #11]
          break;
 8008da6:	e007      	b.n	8008db8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa0b 	bl	80091c6 <USBD_CtlError>
          err++;
 8008db0:	7afb      	ldrb	r3, [r7, #11]
 8008db2:	3301      	adds	r3, #1
 8008db4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008db6:	e038      	b.n	8008e2a <USBD_GetDescriptor+0x2da>
 8008db8:	e037      	b.n	8008e2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7c1b      	ldrb	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dca:	f107 0208 	add.w	r2, r7, #8
 8008dce:	4610      	mov	r0, r2
 8008dd0:	4798      	blx	r3
 8008dd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dd4:	e029      	b.n	8008e2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f9f4 	bl	80091c6 <USBD_CtlError>
        err++;
 8008dde:	7afb      	ldrb	r3, [r7, #11]
 8008de0:	3301      	adds	r3, #1
 8008de2:	72fb      	strb	r3, [r7, #11]
      break;
 8008de4:	e021      	b.n	8008e2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7c1b      	ldrb	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10d      	bne.n	8008e0a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df6:	f107 0208 	add.w	r2, r7, #8
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4798      	blx	r3
 8008dfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3301      	adds	r3, #1
 8008e04:	2207      	movs	r2, #7
 8008e06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e08:	e00f      	b.n	8008e2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9da 	bl	80091c6 <USBD_CtlError>
        err++;
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	3301      	adds	r3, #1
 8008e16:	72fb      	strb	r3, [r7, #11]
      break;
 8008e18:	e007      	b.n	8008e2a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f9d2 	bl	80091c6 <USBD_CtlError>
      err++;
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	3301      	adds	r3, #1
 8008e26:	72fb      	strb	r3, [r7, #11]
      break;
 8008e28:	bf00      	nop
  }

  if (err != 0U)
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d11c      	bne.n	8008e6a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008e30:	893b      	ldrh	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d011      	beq.n	8008e5a <USBD_GetDescriptor+0x30a>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	88db      	ldrh	r3, [r3, #6]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00d      	beq.n	8008e5a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	88da      	ldrh	r2, [r3, #6]
 8008e42:	893b      	ldrh	r3, [r7, #8]
 8008e44:	4293      	cmp	r3, r2
 8008e46:	bf28      	it	cs
 8008e48:	4613      	movcs	r3, r2
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e4e:	893b      	ldrh	r3, [r7, #8]
 8008e50:	461a      	mov	r2, r3
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fa21 	bl	800929c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d104      	bne.n	8008e6c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa78 	bl	8009358 <USBD_CtlSendStatus>
 8008e68:	e000      	b.n	8008e6c <USBD_GetDescriptor+0x31c>
    return;
 8008e6a:	bf00      	nop
    }
  }
}
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop

08008e74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	889b      	ldrh	r3, [r3, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d130      	bne.n	8008ee8 <USBD_SetAddress+0x74>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d12c      	bne.n	8008ee8 <USBD_SetAddress+0x74>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	885b      	ldrh	r3, [r3, #2]
 8008e92:	2b7f      	cmp	r3, #127	; 0x7f
 8008e94:	d828      	bhi.n	8008ee8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	885b      	ldrh	r3, [r3, #2]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d104      	bne.n	8008eb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f989 	bl	80091c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb4:	e01c      	b.n	8008ef0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7bfa      	ldrb	r2, [r7, #15]
 8008eba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f004 fb6a 	bl	800d59c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fa45 	bl	8009358 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008edc:	e008      	b.n	8008ef0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	e003      	b.n	8008ef0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f96b 	bl	80091c6 <USBD_CtlError>
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	885b      	ldrh	r3, [r3, #2]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	4b41      	ldr	r3, [pc, #260]	; (8009010 <USBD_SetConfig+0x118>)
 8008f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f0c:	4b40      	ldr	r3, [pc, #256]	; (8009010 <USBD_SetConfig+0x118>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d904      	bls.n	8008f1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f955 	bl	80091c6 <USBD_CtlError>
 8008f1c:	e075      	b.n	800900a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d002      	beq.n	8008f2e <USBD_SetConfig+0x36>
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d023      	beq.n	8008f74 <USBD_SetConfig+0x7c>
 8008f2c:	e062      	b.n	8008ff4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f2e:	4b38      	ldr	r3, [pc, #224]	; (8009010 <USBD_SetConfig+0x118>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d01a      	beq.n	8008f6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f36:	4b36      	ldr	r3, [pc, #216]	; (8009010 <USBD_SetConfig+0x118>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2203      	movs	r2, #3
 8008f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f48:	4b31      	ldr	r3, [pc, #196]	; (8009010 <USBD_SetConfig+0x118>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff f9c6 	bl	80082e0 <USBD_SetClassConfig>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d104      	bne.n	8008f64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f932 	bl	80091c6 <USBD_CtlError>
            return;
 8008f62:	e052      	b.n	800900a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f9f7 	bl	8009358 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f6a:	e04e      	b.n	800900a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f9f3 	bl	8009358 <USBD_CtlSendStatus>
        break;
 8008f72:	e04a      	b.n	800900a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f74:	4b26      	ldr	r3, [pc, #152]	; (8009010 <USBD_SetConfig+0x118>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d112      	bne.n	8008fa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008f84:	4b22      	ldr	r3, [pc, #136]	; (8009010 <USBD_SetConfig+0x118>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f8e:	4b20      	ldr	r3, [pc, #128]	; (8009010 <USBD_SetConfig+0x118>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff f9c2 	bl	800831e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f9dc 	bl	8009358 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fa0:	e033      	b.n	800900a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008fa2:	4b1b      	ldr	r3, [pc, #108]	; (8009010 <USBD_SetConfig+0x118>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d01d      	beq.n	8008fec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff f9b0 	bl	800831e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008fbe:	4b14      	ldr	r3, [pc, #80]	; (8009010 <USBD_SetConfig+0x118>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fc8:	4b11      	ldr	r3, [pc, #68]	; (8009010 <USBD_SetConfig+0x118>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff f986 	bl	80082e0 <USBD_SetClassConfig>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d104      	bne.n	8008fe4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f8f2 	bl	80091c6 <USBD_CtlError>
            return;
 8008fe2:	e012      	b.n	800900a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9b7 	bl	8009358 <USBD_CtlSendStatus>
        break;
 8008fea:	e00e      	b.n	800900a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f9b3 	bl	8009358 <USBD_CtlSendStatus>
        break;
 8008ff2:	e00a      	b.n	800900a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8e5 	bl	80091c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <USBD_SetConfig+0x118>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff f98b 	bl	800831e <USBD_ClrClassConfig>
        break;
 8009008:	bf00      	nop
    }
  }
}
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	2000023c 	.word	0x2000023c

08009014 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88db      	ldrh	r3, [r3, #6]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d004      	beq.n	8009030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f8cc 	bl	80091c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800902e:	e021      	b.n	8009074 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009036:	2b01      	cmp	r3, #1
 8009038:	db17      	blt.n	800906a <USBD_GetConfig+0x56>
 800903a:	2b02      	cmp	r3, #2
 800903c:	dd02      	ble.n	8009044 <USBD_GetConfig+0x30>
 800903e:	2b03      	cmp	r3, #3
 8009040:	d00b      	beq.n	800905a <USBD_GetConfig+0x46>
 8009042:	e012      	b.n	800906a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3308      	adds	r3, #8
 800904e:	2201      	movs	r2, #1
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f922 	bl	800929c <USBD_CtlSendData>
        break;
 8009058:	e00c      	b.n	8009074 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3304      	adds	r3, #4
 800905e:	2201      	movs	r2, #1
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f91a 	bl	800929c <USBD_CtlSendData>
        break;
 8009068:	e004      	b.n	8009074 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f8aa 	bl	80091c6 <USBD_CtlError>
        break;
 8009072:	bf00      	nop
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	3b01      	subs	r3, #1
 800908e:	2b02      	cmp	r3, #2
 8009090:	d81e      	bhi.n	80090d0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	88db      	ldrh	r3, [r3, #6]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d004      	beq.n	80090a4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f892 	bl	80091c6 <USBD_CtlError>
        break;
 80090a2:	e01a      	b.n	80090da <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f043 0202 	orr.w	r2, r3, #2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	330c      	adds	r3, #12
 80090c4:	2202      	movs	r2, #2
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8e7 	bl	800929c <USBD_CtlSendData>
      break;
 80090ce:	e004      	b.n	80090da <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f877 	bl	80091c6 <USBD_CtlError>
      break;
 80090d8:	bf00      	nop
  }
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	885b      	ldrh	r3, [r3, #2]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d106      	bne.n	8009102 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f92b 	bl	8009358 <USBD_CtlSendStatus>
  }
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911a:	3b01      	subs	r3, #1
 800911c:	2b02      	cmp	r3, #2
 800911e:	d80b      	bhi.n	8009138 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d10c      	bne.n	8009142 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f911 	bl	8009358 <USBD_CtlSendStatus>
      }
      break;
 8009136:	e004      	b.n	8009142 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f843 	bl	80091c6 <USBD_CtlError>
      break;
 8009140:	e000      	b.n	8009144 <USBD_ClrFeature+0x3a>
      break;
 8009142:	bf00      	nop
  }
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781a      	ldrb	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	785a      	ldrb	r2, [r3, #1]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	3302      	adds	r3, #2
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	b29a      	uxth	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	3303      	adds	r3, #3
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b29b      	uxth	r3, r3
 8009176:	021b      	lsls	r3, r3, #8
 8009178:	b29b      	uxth	r3, r3
 800917a:	4413      	add	r3, r2
 800917c:	b29a      	uxth	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	3304      	adds	r3, #4
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	b29a      	uxth	r2, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	3305      	adds	r3, #5
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	021b      	lsls	r3, r3, #8
 8009194:	b29b      	uxth	r3, r3
 8009196:	4413      	add	r3, r2
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	3306      	adds	r3, #6
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	3307      	adds	r3, #7
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	021b      	lsls	r3, r3, #8
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	80da      	strh	r2, [r3, #6]

}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80091d0:	2180      	movs	r1, #128	; 0x80
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f004 f950 	bl	800d478 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80091d8:	2100      	movs	r1, #0
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f004 f94c 	bl	800d478 <USBD_LL_StallEP>
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d032      	beq.n	8009264 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 f834 	bl	800926c <USBD_GetLen>
 8009204:	4603      	mov	r3, r0
 8009206:	3301      	adds	r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	75fa      	strb	r2, [r7, #23]
 8009218:	461a      	mov	r2, r3
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4413      	add	r3, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	7812      	ldrb	r2, [r2, #0]
 8009222:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	75fa      	strb	r2, [r7, #23]
 800922a:	461a      	mov	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4413      	add	r3, r2
 8009230:	2203      	movs	r2, #3
 8009232:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009234:	e012      	b.n	800925c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	60fa      	str	r2, [r7, #12]
 800923c:	7dfa      	ldrb	r2, [r7, #23]
 800923e:	1c51      	adds	r1, r2, #1
 8009240:	75f9      	strb	r1, [r7, #23]
 8009242:	4611      	mov	r1, r2
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	440a      	add	r2, r1
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	75fa      	strb	r2, [r7, #23]
 8009252:	461a      	mov	r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4413      	add	r3, r2
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e8      	bne.n	8009236 <USBD_GetString+0x4e>
    }
  }
}
 8009264:	bf00      	nop
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009278:	e005      	b.n	8009286 <USBD_GetLen+0x1a>
  {
    len++;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	3301      	adds	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3301      	adds	r3, #1
 8009284:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f5      	bne.n	800927a <USBD_GetLen+0xe>
  }

  return len;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092b2:	88fa      	ldrh	r2, [r7, #6]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80092b8:	88fa      	ldrh	r2, [r7, #6]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092be:	88fb      	ldrh	r3, [r7, #6]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	2100      	movs	r1, #0
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f004 f99f 	bl	800d608 <USBD_LL_Transmit>

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e2:	88fb      	ldrh	r3, [r7, #6]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f004 f98d 	bl	800d608 <USBD_LL_Transmit>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2203      	movs	r2, #3
 800930a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800930e:	88fa      	ldrh	r2, [r7, #6]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009316:	88fa      	ldrh	r2, [r7, #6]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f004 f9a9 	bl	800d67c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	4613      	mov	r3, r2
 8009340:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	2100      	movs	r1, #0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f004 f997 	bl	800d67c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2204      	movs	r2, #4
 8009364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009368:	2300      	movs	r3, #0
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f004 f94a 	bl	800d608 <USBD_LL_Transmit>

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2205      	movs	r2, #5
 800938a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938e:	2300      	movs	r3, #0
 8009390:	2200      	movs	r2, #0
 8009392:	2100      	movs	r1, #0
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f004 f971 	bl	800d67c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80093a8:	bf00      	nop
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ba:	f3ef 8305 	mrs	r3, IPSR
 80093be:	60bb      	str	r3, [r7, #8]
  return(result);
 80093c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10f      	bne.n	80093e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093c6:	f3ef 8310 	mrs	r3, PRIMASK
 80093ca:	607b      	str	r3, [r7, #4]
  return(result);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d105      	bne.n	80093de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80093d2:	f3ef 8311 	mrs	r3, BASEPRI
 80093d6:	603b      	str	r3, [r7, #0]
  return(result);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <osKernelInitialize+0x3a>
 80093de:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <osKernelInitialize+0x64>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d103      	bne.n	80093ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80093e6:	f06f 0305 	mvn.w	r3, #5
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e00c      	b.n	8009408 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <osKernelInitialize+0x64>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d105      	bne.n	8009402 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80093f6:	4b08      	ldr	r3, [pc, #32]	; (8009418 <osKernelInitialize+0x64>)
 80093f8:	2201      	movs	r2, #1
 80093fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e002      	b.n	8009408 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009402:	f04f 33ff 	mov.w	r3, #4294967295
 8009406:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009408:	68fb      	ldr	r3, [r7, #12]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	20000240 	.word	0x20000240

0800941c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009422:	f3ef 8305 	mrs	r3, IPSR
 8009426:	60bb      	str	r3, [r7, #8]
  return(result);
 8009428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10f      	bne.n	800944e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800942e:	f3ef 8310 	mrs	r3, PRIMASK
 8009432:	607b      	str	r3, [r7, #4]
  return(result);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800943a:	f3ef 8311 	mrs	r3, BASEPRI
 800943e:	603b      	str	r3, [r7, #0]
  return(result);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <osKernelStart+0x3a>
 8009446:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <osKernelStart+0x68>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b02      	cmp	r3, #2
 800944c:	d103      	bne.n	8009456 <osKernelStart+0x3a>
    stat = osErrorISR;
 800944e:	f06f 0305 	mvn.w	r3, #5
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e010      	b.n	8009478 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <osKernelStart+0x68>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d109      	bne.n	8009472 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800945e:	f7ff ffa1 	bl	80093a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009462:	4b08      	ldr	r3, [pc, #32]	; (8009484 <osKernelStart+0x68>)
 8009464:	2202      	movs	r2, #2
 8009466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009468:	f001 fea2 	bl	800b1b0 <vTaskStartScheduler>
      stat = osOK;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	e002      	b.n	8009478 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009472:	f04f 33ff 	mov.w	r3, #4294967295
 8009476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009478:	68fb      	ldr	r3, [r7, #12]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000240 	.word	0x20000240

08009488 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800948e:	f3ef 8305 	mrs	r3, IPSR
 8009492:	60bb      	str	r3, [r7, #8]
  return(result);
 8009494:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10f      	bne.n	80094ba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800949a:	f3ef 8310 	mrs	r3, PRIMASK
 800949e:	607b      	str	r3, [r7, #4]
  return(result);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d105      	bne.n	80094b2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094a6:	f3ef 8311 	mrs	r3, BASEPRI
 80094aa:	603b      	str	r3, [r7, #0]
  return(result);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <osKernelGetTickCount+0x3a>
 80094b2:	4b08      	ldr	r3, [pc, #32]	; (80094d4 <osKernelGetTickCount+0x4c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d103      	bne.n	80094c2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80094ba:	f001 ff97 	bl	800b3ec <xTaskGetTickCountFromISR>
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	e002      	b.n	80094c8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80094c2:	f001 ff83 	bl	800b3cc <xTaskGetTickCount>
 80094c6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80094c8:	68fb      	ldr	r3, [r7, #12]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20000240 	.word	0x20000240

080094d8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80094d8:	b480      	push	{r7}
 80094da:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80094dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b090      	sub	sp, #64	; 0x40
 80094f0:	af04      	add	r7, sp, #16
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094fc:	f3ef 8305 	mrs	r3, IPSR
 8009500:	61fb      	str	r3, [r7, #28]
  return(result);
 8009502:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009504:	2b00      	cmp	r3, #0
 8009506:	f040 808f 	bne.w	8009628 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800950a:	f3ef 8310 	mrs	r3, PRIMASK
 800950e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d105      	bne.n	8009522 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009516:	f3ef 8311 	mrs	r3, BASEPRI
 800951a:	617b      	str	r3, [r7, #20]
  return(result);
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <osThreadNew+0x3e>
 8009522:	4b44      	ldr	r3, [pc, #272]	; (8009634 <osThreadNew+0x148>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b02      	cmp	r3, #2
 8009528:	d07e      	beq.n	8009628 <osThreadNew+0x13c>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d07b      	beq.n	8009628 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009530:	2380      	movs	r3, #128	; 0x80
 8009532:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009534:	2318      	movs	r3, #24
 8009536:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009538:	2300      	movs	r3, #0
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800953c:	f04f 33ff 	mov.w	r3, #4294967295
 8009540:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d045      	beq.n	80095d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <osThreadNew+0x6a>
        name = attr->name;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	2b00      	cmp	r3, #0
 8009568:	d008      	beq.n	800957c <osThreadNew+0x90>
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	2b38      	cmp	r3, #56	; 0x38
 800956e:	d805      	bhi.n	800957c <osThreadNew+0x90>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <osThreadNew+0x94>
        return (NULL);
 800957c:	2300      	movs	r3, #0
 800957e:	e054      	b.n	800962a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	089b      	lsrs	r3, r3, #2
 800958e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00e      	beq.n	80095b6 <osThreadNew+0xca>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	2b5b      	cmp	r3, #91	; 0x5b
 800959e:	d90a      	bls.n	80095b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d006      	beq.n	80095b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <osThreadNew+0xca>
        mem = 1;
 80095b0:	2301      	movs	r3, #1
 80095b2:	623b      	str	r3, [r7, #32]
 80095b4:	e010      	b.n	80095d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10c      	bne.n	80095d8 <osThreadNew+0xec>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d108      	bne.n	80095d8 <osThreadNew+0xec>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <osThreadNew+0xec>
          mem = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	623b      	str	r3, [r7, #32]
 80095d2:	e001      	b.n	80095d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d110      	bne.n	8009600 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80095e6:	9202      	str	r2, [sp, #8]
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f001 fb8f 	bl	800ad18 <xTaskCreateStatic>
 80095fa:	4603      	mov	r3, r0
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	e013      	b.n	8009628 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d110      	bne.n	8009628 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	b29a      	uxth	r2, r3
 800960a:	f107 0310 	add.w	r3, r7, #16
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f001 fbd7 	bl	800adcc <xTaskCreate>
 800961e:	4603      	mov	r3, r0
 8009620:	2b01      	cmp	r3, #1
 8009622:	d001      	beq.n	8009628 <osThreadNew+0x13c>
          hTask = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009628:	693b      	ldr	r3, [r7, #16]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3730      	adds	r7, #48	; 0x30
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000240 	.word	0x20000240

08009638 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009640:	f3ef 8305 	mrs	r3, IPSR
 8009644:	613b      	str	r3, [r7, #16]
  return(result);
 8009646:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10f      	bne.n	800966c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800964c:	f3ef 8310 	mrs	r3, PRIMASK
 8009650:	60fb      	str	r3, [r7, #12]
  return(result);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d105      	bne.n	8009664 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009658:	f3ef 8311 	mrs	r3, BASEPRI
 800965c:	60bb      	str	r3, [r7, #8]
  return(result);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d007      	beq.n	8009674 <osDelay+0x3c>
 8009664:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <osDelay+0x58>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d103      	bne.n	8009674 <osDelay+0x3c>
    stat = osErrorISR;
 800966c:	f06f 0305 	mvn.w	r3, #5
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	e007      	b.n	8009684 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009674:	2300      	movs	r3, #0
 8009676:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <osDelay+0x4c>
      vTaskDelay(ticks);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 fd62 	bl	800b148 <vTaskDelay>
    }
  }

  return (stat);
 8009684:	697b      	ldr	r3, [r7, #20]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000240 	.word	0x20000240

08009694 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800969c:	f3ef 8305 	mrs	r3, IPSR
 80096a0:	617b      	str	r3, [r7, #20]
  return(result);
 80096a2:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10f      	bne.n	80096c8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096a8:	f3ef 8310 	mrs	r3, PRIMASK
 80096ac:	613b      	str	r3, [r7, #16]
  return(result);
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d105      	bne.n	80096c0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096b4:	f3ef 8311 	mrs	r3, BASEPRI
 80096b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d007      	beq.n	80096d0 <osDelayUntil+0x3c>
 80096c0:	4b13      	ldr	r3, [pc, #76]	; (8009710 <osDelayUntil+0x7c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d103      	bne.n	80096d0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80096c8:	f06f 0305 	mvn.w	r3, #5
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	e019      	b.n	8009704 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80096d4:	f001 fe7a 	bl	800b3cc <xTaskGetTickCount>
 80096d8:	4603      	mov	r3, r0
 80096da:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <osDelayUntil+0x6a>
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	db06      	blt.n	80096fe <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80096f0:	f107 0308 	add.w	r3, r7, #8
 80096f4:	69b9      	ldr	r1, [r7, #24]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 fcac 	bl	800b054 <vTaskDelayUntil>
 80096fc:	e002      	b.n	8009704 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80096fe:	f06f 0303 	mvn.w	r3, #3
 8009702:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009704:	69fb      	ldr	r3, [r7, #28]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3720      	adds	r7, #32
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000240 	.word	0x20000240

08009714 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009720:	f3ef 8305 	mrs	r3, IPSR
 8009724:	613b      	str	r3, [r7, #16]
  return(result);
 8009726:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009728:	2b00      	cmp	r3, #0
 800972a:	f040 8085 	bne.w	8009838 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800972e:	f3ef 8310 	mrs	r3, PRIMASK
 8009732:	60fb      	str	r3, [r7, #12]
  return(result);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d105      	bne.n	8009746 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800973a:	f3ef 8311 	mrs	r3, BASEPRI
 800973e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <osMutexNew+0x3a>
 8009746:	4b3f      	ldr	r3, [pc, #252]	; (8009844 <osMutexNew+0x130>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b02      	cmp	r3, #2
 800974c:	d074      	beq.n	8009838 <osMutexNew+0x124>
    if (attr != NULL) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <osMutexNew+0x48>
      type = attr->attr_bits;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	623b      	str	r3, [r7, #32]
 800975a:	e001      	b.n	8009760 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <osMutexNew+0x5c>
      rmtx = 1U;
 800976a:	2301      	movs	r3, #1
 800976c:	61fb      	str	r3, [r7, #28]
 800976e:	e001      	b.n	8009774 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	f003 0308 	and.w	r3, r3, #8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d15c      	bne.n	8009838 <osMutexNew+0x124>
      mem = -1;
 800977e:	f04f 33ff 	mov.w	r3, #4294967295
 8009782:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d015      	beq.n	80097b6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d006      	beq.n	80097a0 <osMutexNew+0x8c>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	2b4f      	cmp	r3, #79	; 0x4f
 8009798:	d902      	bls.n	80097a0 <osMutexNew+0x8c>
          mem = 1;
 800979a:	2301      	movs	r3, #1
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	e00c      	b.n	80097ba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d108      	bne.n	80097ba <osMutexNew+0xa6>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <osMutexNew+0xa6>
            mem = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61bb      	str	r3, [r7, #24]
 80097b4:	e001      	b.n	80097ba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d112      	bne.n	80097e6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	4619      	mov	r1, r3
 80097cc:	2004      	movs	r0, #4
 80097ce:	f000 fcac 	bl	800a12a <xQueueCreateMutexStatic>
 80097d2:	6278      	str	r0, [r7, #36]	; 0x24
 80097d4:	e016      	b.n	8009804 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	4619      	mov	r1, r3
 80097dc:	2001      	movs	r0, #1
 80097de:	f000 fca4 	bl	800a12a <xQueueCreateMutexStatic>
 80097e2:	6278      	str	r0, [r7, #36]	; 0x24
 80097e4:	e00e      	b.n	8009804 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10b      	bne.n	8009804 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80097f2:	2004      	movs	r0, #4
 80097f4:	f000 fc81 	bl	800a0fa <xQueueCreateMutex>
 80097f8:	6278      	str	r0, [r7, #36]	; 0x24
 80097fa:	e003      	b.n	8009804 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80097fc:	2001      	movs	r0, #1
 80097fe:	f000 fc7c 	bl	800a0fa <xQueueCreateMutex>
 8009802:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00c      	beq.n	8009824 <osMutexNew+0x110>
        if (attr != NULL) {
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <osMutexNew+0x104>
          name = attr->name;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e001      	b.n	800981c <osMutexNew+0x108>
        } else {
          name = NULL;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800981c:	6979      	ldr	r1, [r7, #20]
 800981e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009820:	f001 fa1e 	bl	800ac60 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d006      	beq.n	8009838 <osMutexNew+0x124>
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800983a:	4618      	mov	r0, r3
 800983c:	3728      	adds	r7, #40	; 0x28
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20000240 	.word	0x20000240

08009848 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f023 0301 	bic.w	r3, r3, #1
 8009858:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009862:	2300      	movs	r3, #0
 8009864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009866:	f3ef 8305 	mrs	r3, IPSR
 800986a:	613b      	str	r3, [r7, #16]
  return(result);
 800986c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10f      	bne.n	8009892 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009872:	f3ef 8310 	mrs	r3, PRIMASK
 8009876:	60fb      	str	r3, [r7, #12]
  return(result);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d105      	bne.n	800988a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800987e:	f3ef 8311 	mrs	r3, BASEPRI
 8009882:	60bb      	str	r3, [r7, #8]
  return(result);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <osMutexAcquire+0x52>
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <osMutexAcquire+0xb8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b02      	cmp	r3, #2
 8009890:	d103      	bne.n	800989a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009892:	f06f 0305 	mvn.w	r3, #5
 8009896:	61fb      	str	r3, [r7, #28]
 8009898:	e02c      	b.n	80098f4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d103      	bne.n	80098a8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80098a0:	f06f 0303 	mvn.w	r3, #3
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	e025      	b.n	80098f4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d011      	beq.n	80098d2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	69b8      	ldr	r0, [r7, #24]
 80098b2:	f000 fc88 	bl	800a1c6 <xQueueTakeMutexRecursive>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d01b      	beq.n	80098f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80098c2:	f06f 0301 	mvn.w	r3, #1
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	e014      	b.n	80098f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80098ca:	f06f 0302 	mvn.w	r3, #2
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	e010      	b.n	80098f4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	69b8      	ldr	r0, [r7, #24]
 80098d6:	f000 ff15 	bl	800a704 <xQueueSemaphoreTake>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d009      	beq.n	80098f4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80098e6:	f06f 0301 	mvn.w	r3, #1
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	e002      	b.n	80098f4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80098ee:	f06f 0302 	mvn.w	r3, #2
 80098f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80098f4:	69fb      	ldr	r3, [r7, #28]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3720      	adds	r7, #32
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000240 	.word	0x20000240

08009904 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800991c:	2300      	movs	r3, #0
 800991e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009920:	f3ef 8305 	mrs	r3, IPSR
 8009924:	613b      	str	r3, [r7, #16]
  return(result);
 8009926:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10f      	bne.n	800994c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800992c:	f3ef 8310 	mrs	r3, PRIMASK
 8009930:	60fb      	str	r3, [r7, #12]
  return(result);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d105      	bne.n	8009944 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009938:	f3ef 8311 	mrs	r3, BASEPRI
 800993c:	60bb      	str	r3, [r7, #8]
  return(result);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d007      	beq.n	8009954 <osMutexRelease+0x50>
 8009944:	4b16      	ldr	r3, [pc, #88]	; (80099a0 <osMutexRelease+0x9c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d103      	bne.n	8009954 <osMutexRelease+0x50>
    stat = osErrorISR;
 800994c:	f06f 0305 	mvn.w	r3, #5
 8009950:	61fb      	str	r3, [r7, #28]
 8009952:	e01f      	b.n	8009994 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d103      	bne.n	8009962 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800995a:	f06f 0303 	mvn.w	r3, #3
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e018      	b.n	8009994 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009968:	69b8      	ldr	r0, [r7, #24]
 800996a:	f000 fbf9 	bl	800a160 <xQueueGiveMutexRecursive>
 800996e:	4603      	mov	r3, r0
 8009970:	2b01      	cmp	r3, #1
 8009972:	d00f      	beq.n	8009994 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009974:	f06f 0302 	mvn.w	r3, #2
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	e00b      	b.n	8009994 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800997c:	2300      	movs	r3, #0
 800997e:	2200      	movs	r2, #0
 8009980:	2100      	movs	r1, #0
 8009982:	69b8      	ldr	r0, [r7, #24]
 8009984:	f000 fc54 	bl	800a230 <xQueueGenericSend>
 8009988:	4603      	mov	r3, r0
 800998a:	2b01      	cmp	r3, #1
 800998c:	d002      	beq.n	8009994 <osMutexRelease+0x90>
        stat = osErrorResource;
 800998e:	f06f 0302 	mvn.w	r3, #2
 8009992:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009994:	69fb      	ldr	r3, [r7, #28]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000240 	.word	0x20000240

080099a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08c      	sub	sp, #48	; 0x30
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80099b0:	2300      	movs	r3, #0
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b4:	f3ef 8305 	mrs	r3, IPSR
 80099b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80099ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d170      	bne.n	8009aa2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099c0:	f3ef 8310 	mrs	r3, PRIMASK
 80099c4:	617b      	str	r3, [r7, #20]
  return(result);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d105      	bne.n	80099d8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099cc:	f3ef 8311 	mrs	r3, BASEPRI
 80099d0:	613b      	str	r3, [r7, #16]
  return(result);
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <osMessageQueueNew+0x3c>
 80099d8:	4b34      	ldr	r3, [pc, #208]	; (8009aac <osMessageQueueNew+0x108>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d060      	beq.n	8009aa2 <osMessageQueueNew+0xfe>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d05d      	beq.n	8009aa2 <osMessageQueueNew+0xfe>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d05a      	beq.n	8009aa2 <osMessageQueueNew+0xfe>
    mem = -1;
 80099ec:	f04f 33ff 	mov.w	r3, #4294967295
 80099f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d029      	beq.n	8009a4c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d012      	beq.n	8009a26 <osMessageQueueNew+0x82>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	2b4f      	cmp	r3, #79	; 0x4f
 8009a06:	d90e      	bls.n	8009a26 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695a      	ldr	r2, [r3, #20]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68b9      	ldr	r1, [r7, #8]
 8009a18:	fb01 f303 	mul.w	r3, r1, r3
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d302      	bcc.n	8009a26 <osMessageQueueNew+0x82>
        mem = 1;
 8009a20:	2301      	movs	r3, #1
 8009a22:	623b      	str	r3, [r7, #32]
 8009a24:	e014      	b.n	8009a50 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d110      	bne.n	8009a50 <osMessageQueueNew+0xac>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10c      	bne.n	8009a50 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d108      	bne.n	8009a50 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d104      	bne.n	8009a50 <osMessageQueueNew+0xac>
          mem = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	623b      	str	r3, [r7, #32]
 8009a4a:	e001      	b.n	8009a50 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d10c      	bne.n	8009a70 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691a      	ldr	r2, [r3, #16]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6899      	ldr	r1, [r3, #8]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	460b      	mov	r3, r1
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 fa58 	bl	8009f1c <xQueueGenericCreateStatic>
 8009a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8009a6e:	e008      	b.n	8009a82 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d105      	bne.n	8009a82 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009a76:	2200      	movs	r2, #0
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 fac1 	bl	800a002 <xQueueGenericCreate>
 8009a80:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00c      	beq.n	8009aa2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <osMessageQueueNew+0xf2>
        name = attr->name;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	e001      	b.n	8009a9a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009a9a:	69f9      	ldr	r1, [r7, #28]
 8009a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a9e:	f001 f8df 	bl	800ac60 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3728      	adds	r7, #40	; 0x28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20000240 	.word	0x20000240

08009ab0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4613      	mov	r3, r2
 8009abe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ac8:	f3ef 8305 	mrs	r3, IPSR
 8009acc:	61fb      	str	r3, [r7, #28]
  return(result);
 8009ace:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10f      	bne.n	8009af4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad8:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d105      	bne.n	8009aec <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8009ae4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d02c      	beq.n	8009b46 <osMessageQueuePut+0x96>
 8009aec:	4b28      	ldr	r3, [pc, #160]	; (8009b90 <osMessageQueuePut+0xe0>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d128      	bne.n	8009b46 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <osMessageQueuePut+0x56>
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <osMessageQueuePut+0x56>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009b06:	f06f 0303 	mvn.w	r3, #3
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b0c:	e039      	b.n	8009b82 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b12:	f107 0210 	add.w	r2, r7, #16
 8009b16:	2300      	movs	r3, #0
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	6a38      	ldr	r0, [r7, #32]
 8009b1c:	f000 fc82 	bl	800a424 <xQueueGenericSendFromISR>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d003      	beq.n	8009b2e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009b26:	f06f 0302 	mvn.w	r3, #2
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b2c:	e029      	b.n	8009b82 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d026      	beq.n	8009b82 <osMessageQueuePut+0xd2>
 8009b34:	4b17      	ldr	r3, [pc, #92]	; (8009b94 <osMessageQueuePut+0xe4>)
 8009b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b44:	e01d      	b.n	8009b82 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <osMessageQueuePut+0xa2>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d103      	bne.n	8009b5a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009b52:	f06f 0303 	mvn.w	r3, #3
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
 8009b58:	e014      	b.n	8009b84 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	68b9      	ldr	r1, [r7, #8]
 8009b60:	6a38      	ldr	r0, [r7, #32]
 8009b62:	f000 fb65 	bl	800a230 <xQueueGenericSend>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d00b      	beq.n	8009b84 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009b72:	f06f 0301 	mvn.w	r3, #1
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
 8009b78:	e004      	b.n	8009b84 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009b7a:	f06f 0302 	mvn.w	r3, #2
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b80:	e000      	b.n	8009b84 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b82:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3728      	adds	r7, #40	; 0x28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000240 	.word	0x20000240
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bae:	f3ef 8305 	mrs	r3, IPSR
 8009bb2:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bb4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10f      	bne.n	8009bda <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bba:	f3ef 8310 	mrs	r3, PRIMASK
 8009bbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d105      	bne.n	8009bd2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8009bca:	617b      	str	r3, [r7, #20]
  return(result);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d02c      	beq.n	8009c2c <osMessageQueueGet+0x94>
 8009bd2:	4b28      	ldr	r3, [pc, #160]	; (8009c74 <osMessageQueueGet+0xdc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d128      	bne.n	8009c2c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <osMessageQueueGet+0x54>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <osMessageQueueGet+0x54>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009bec:	f06f 0303 	mvn.w	r3, #3
 8009bf0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bf2:	e038      	b.n	8009c66 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009bf8:	f107 0310 	add.w	r3, r7, #16
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	6a38      	ldr	r0, [r7, #32]
 8009c02:	f000 fe87 	bl	800a914 <xQueueReceiveFromISR>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d003      	beq.n	8009c14 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009c0c:	f06f 0302 	mvn.w	r3, #2
 8009c10:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c12:	e028      	b.n	8009c66 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d025      	beq.n	8009c66 <osMessageQueueGet+0xce>
 8009c1a:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <osMessageQueueGet+0xe0>)
 8009c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c2a:	e01c      	b.n	8009c66 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <osMessageQueueGet+0xa0>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009c38:	f06f 0303 	mvn.w	r3, #3
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3e:	e013      	b.n	8009c68 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	6a38      	ldr	r0, [r7, #32]
 8009c46:	f000 fc81 	bl	800a54c <xQueueReceive>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d00b      	beq.n	8009c68 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009c56:	f06f 0301 	mvn.w	r3, #1
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5c:	e004      	b.n	8009c68 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009c5e:	f06f 0302 	mvn.w	r3, #2
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
 8009c64:	e000      	b.n	8009c68 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c66:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3728      	adds	r7, #40	; 0x28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000240 	.word	0x20000240
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4a07      	ldr	r2, [pc, #28]	; (8009ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	4a06      	ldr	r2, [pc, #24]	; (8009cac <vApplicationGetIdleTaskMemory+0x30>)
 8009c92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2280      	movs	r2, #128	; 0x80
 8009c98:	601a      	str	r2, [r3, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20000244 	.word	0x20000244
 8009cac:	200002a0 	.word	0x200002a0

08009cb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4a07      	ldr	r2, [pc, #28]	; (8009cdc <vApplicationGetTimerTaskMemory+0x2c>)
 8009cc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	4a06      	ldr	r2, [pc, #24]	; (8009ce0 <vApplicationGetTimerTaskMemory+0x30>)
 8009cc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cce:	601a      	str	r2, [r3, #0]
}
 8009cd0:	bf00      	nop
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	200004a0 	.word	0x200004a0
 8009ce0:	200004fc 	.word	0x200004fc

08009ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f103 0208 	add.w	r2, r3, #8
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f103 0208 	add.w	r2, r3, #8
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f103 0208 	add.w	r2, r3, #8
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d32:	bf00      	nop
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	601a      	str	r2, [r3, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d86:	b480      	push	{r7}
 8009d88:	b085      	sub	sp, #20
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d103      	bne.n	8009da6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e00c      	b.n	8009dc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3308      	adds	r3, #8
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	e002      	b.n	8009db4 <vListInsert+0x2e>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d2f6      	bcs.n	8009dae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	601a      	str	r2, [r3, #0]
}
 8009dec:	bf00      	nop
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	6892      	ldr	r2, [r2, #8]
 8009e0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6852      	ldr	r2, [r2, #4]
 8009e18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d103      	bne.n	8009e2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	1e5a      	subs	r2, r3, #1
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d109      	bne.n	8009e74 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	60bb      	str	r3, [r7, #8]
 8009e72:	e7fe      	b.n	8009e72 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009e74:	f002 fc3a 	bl	800c6ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e80:	68f9      	ldr	r1, [r7, #12]
 8009e82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e84:	fb01 f303 	mul.w	r3, r1, r3
 8009e88:	441a      	add	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009eaa:	fb01 f303 	mul.w	r3, r1, r3
 8009eae:	441a      	add	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	22ff      	movs	r2, #255	; 0xff
 8009eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	22ff      	movs	r2, #255	; 0xff
 8009ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d114      	bne.n	8009ef4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01a      	beq.n	8009f08 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3310      	adds	r3, #16
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 fbfc 	bl	800b6d4 <xTaskRemoveFromEventList>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d012      	beq.n	8009f08 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ee2:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <xQueueGenericReset+0xcc>)
 8009ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	e009      	b.n	8009f08 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3310      	adds	r3, #16
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff fef3 	bl	8009ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3324      	adds	r3, #36	; 0x24
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff feee 	bl	8009ce4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f08:	f002 fc1e 	bl	800c748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f0c:	2301      	movs	r3, #1
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	e000ed04 	.word	0xe000ed04

08009f1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08e      	sub	sp, #56	; 0x38
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d109      	bne.n	8009f44 <xQueueGenericCreateStatic+0x28>
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f42:	e7fe      	b.n	8009f42 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <xQueueGenericCreateStatic+0x42>
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	f383 8811 	msr	BASEPRI, r3
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f5c:	e7fe      	b.n	8009f5c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <xQueueGenericCreateStatic+0x4e>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <xQueueGenericCreateStatic+0x52>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <xQueueGenericCreateStatic+0x54>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <xQueueGenericCreateStatic+0x6c>
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	623b      	str	r3, [r7, #32]
 8009f86:	e7fe      	b.n	8009f86 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <xQueueGenericCreateStatic+0x78>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <xQueueGenericCreateStatic+0x7c>
 8009f94:	2301      	movs	r3, #1
 8009f96:	e000      	b.n	8009f9a <xQueueGenericCreateStatic+0x7e>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d109      	bne.n	8009fb2 <xQueueGenericCreateStatic+0x96>
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fb2:	2350      	movs	r3, #80	; 0x50
 8009fb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b50      	cmp	r3, #80	; 0x50
 8009fba:	d009      	beq.n	8009fd0 <xQueueGenericCreateStatic+0xb4>
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	61bb      	str	r3, [r7, #24]
 8009fce:	e7fe      	b.n	8009fce <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00d      	beq.n	8009ff8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fe4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	4613      	mov	r3, r2
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f844 	bl	800a080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3730      	adds	r7, #48	; 0x30
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a002:	b580      	push	{r7, lr}
 800a004:	b08a      	sub	sp, #40	; 0x28
 800a006:	af02      	add	r7, sp, #8
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	4613      	mov	r3, r2
 800a00e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d109      	bne.n	800a02a <xQueueGenericCreate+0x28>
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	613b      	str	r3, [r7, #16]
 800a028:	e7fe      	b.n	800a028 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a030:	2300      	movs	r3, #0
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	e004      	b.n	800a040 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	fb02 f303 	mul.w	r3, r2, r3
 800a03e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	3350      	adds	r3, #80	; 0x50
 800a044:	4618      	mov	r0, r3
 800a046:	f002 fc6b 	bl	800c920 <pvPortMalloc>
 800a04a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d011      	beq.n	800a076 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	3350      	adds	r3, #80	; 0x50
 800a05a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a064:	79fa      	ldrb	r2, [r7, #7]
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	4613      	mov	r3, r2
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	68b9      	ldr	r1, [r7, #8]
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 f805 	bl	800a080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a076:	69bb      	ldr	r3, [r7, #24]
	}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	e002      	b.n	800a0a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	69b8      	ldr	r0, [r7, #24]
 800a0b2:	f7ff fecb 	bl	8009e4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	78fa      	ldrb	r2, [r7, #3]
 800a0ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00e      	beq.n	800a0f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f89f 	bl	800a230 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b086      	sub	sp, #24
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	4603      	mov	r3, r0
 800a102:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a104:	2301      	movs	r3, #1
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	2300      	movs	r3, #0
 800a10a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	461a      	mov	r2, r3
 800a110:	6939      	ldr	r1, [r7, #16]
 800a112:	6978      	ldr	r0, [r7, #20]
 800a114:	f7ff ff75 	bl	800a002 <xQueueGenericCreate>
 800a118:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff ffd3 	bl	800a0c6 <prvInitialiseMutex>

		return xNewQueue;
 800a120:	68fb      	ldr	r3, [r7, #12]
	}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b088      	sub	sp, #32
 800a12e:	af02      	add	r7, sp, #8
 800a130:	4603      	mov	r3, r0
 800a132:	6039      	str	r1, [r7, #0]
 800a134:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a136:	2301      	movs	r3, #1
 800a138:	617b      	str	r3, [r7, #20]
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2200      	movs	r2, #0
 800a146:	6939      	ldr	r1, [r7, #16]
 800a148:	6978      	ldr	r0, [r7, #20]
 800a14a:	f7ff fee7 	bl	8009f1c <xQueueGenericCreateStatic>
 800a14e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff ffb8 	bl	800a0c6 <prvInitialiseMutex>

		return xNewQueue;
 800a156:	68fb      	ldr	r3, [r7, #12]
	}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a160:	b590      	push	{r4, r7, lr}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d109      	bne.n	800a186 <xQueueGiveMutexRecursive+0x26>
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	e7fe      	b.n	800a184 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	689c      	ldr	r4, [r3, #8]
 800a18a:	f001 fc59 	bl	800ba40 <xTaskGetCurrentTaskHandle>
 800a18e:	4603      	mov	r3, r0
 800a190:	429c      	cmp	r4, r3
 800a192:	d111      	bne.n	800a1b8 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	1e5a      	subs	r2, r3, #1
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d105      	bne.n	800a1b2 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	6938      	ldr	r0, [r7, #16]
 800a1ae:	f000 f83f 	bl	800a230 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	e001      	b.n	800a1bc <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a1bc:	697b      	ldr	r3, [r7, #20]
	}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	371c      	adds	r7, #28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd90      	pop	{r4, r7, pc}

0800a1c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a1c6:	b590      	push	{r4, r7, lr}
 800a1c8:	b087      	sub	sp, #28
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d109      	bne.n	800a1ee <xQueueTakeMutexRecursive+0x28>
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	e7fe      	b.n	800a1ec <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	689c      	ldr	r4, [r3, #8]
 800a1f2:	f001 fc25 	bl	800ba40 <xTaskGetCurrentTaskHandle>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	d107      	bne.n	800a20c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a206:	2301      	movs	r3, #1
 800a208:	617b      	str	r3, [r7, #20]
 800a20a:	e00c      	b.n	800a226 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6938      	ldr	r0, [r7, #16]
 800a210:	f000 fa78 	bl	800a704 <xQueueSemaphoreTake>
 800a214:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d004      	beq.n	800a226 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a226:	697b      	ldr	r3, [r7, #20]
	}
 800a228:	4618      	mov	r0, r3
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd90      	pop	{r4, r7, pc}

0800a230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08e      	sub	sp, #56	; 0x38
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a23e:	2300      	movs	r3, #0
 800a240:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d109      	bne.n	800a260 <xQueueGenericSend+0x30>
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a25e:	e7fe      	b.n	800a25e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d103      	bne.n	800a26e <xQueueGenericSend+0x3e>
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <xQueueGenericSend+0x42>
 800a26e:	2301      	movs	r3, #1
 800a270:	e000      	b.n	800a274 <xQueueGenericSend+0x44>
 800a272:	2300      	movs	r3, #0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <xQueueGenericSend+0x5c>
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
 800a28a:	e7fe      	b.n	800a28a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d103      	bne.n	800a29a <xQueueGenericSend+0x6a>
 800a292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a296:	2b01      	cmp	r3, #1
 800a298:	d101      	bne.n	800a29e <xQueueGenericSend+0x6e>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e000      	b.n	800a2a0 <xQueueGenericSend+0x70>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d109      	bne.n	800a2b8 <xQueueGenericSend+0x88>
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	623b      	str	r3, [r7, #32]
 800a2b6:	e7fe      	b.n	800a2b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2b8:	f001 fbd2 	bl	800ba60 <xTaskGetSchedulerState>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d102      	bne.n	800a2c8 <xQueueGenericSend+0x98>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <xQueueGenericSend+0x9c>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e000      	b.n	800a2ce <xQueueGenericSend+0x9e>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d109      	bne.n	800a2e6 <xQueueGenericSend+0xb6>
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	e7fe      	b.n	800a2e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2e6:	f002 fa01 	bl	800c6ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d302      	bcc.n	800a2fc <xQueueGenericSend+0xcc>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d129      	bne.n	800a350 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	68b9      	ldr	r1, [r7, #8]
 800a300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a302:	f000 fb9c 	bl	800aa3e <prvCopyDataToQueue>
 800a306:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d010      	beq.n	800a332 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	3324      	adds	r3, #36	; 0x24
 800a314:	4618      	mov	r0, r3
 800a316:	f001 f9dd 	bl	800b6d4 <xTaskRemoveFromEventList>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d013      	beq.n	800a348 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a320:	4b3f      	ldr	r3, [pc, #252]	; (800a420 <xQueueGenericSend+0x1f0>)
 800a322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	e00a      	b.n	800a348 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a334:	2b00      	cmp	r3, #0
 800a336:	d007      	beq.n	800a348 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a338:	4b39      	ldr	r3, [pc, #228]	; (800a420 <xQueueGenericSend+0x1f0>)
 800a33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a348:	f002 f9fe 	bl	800c748 <vPortExitCritical>
				return pdPASS;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e063      	b.n	800a418 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d103      	bne.n	800a35e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a356:	f002 f9f7 	bl	800c748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a35a:	2300      	movs	r3, #0
 800a35c:	e05c      	b.n	800a418 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a364:	f107 0314 	add.w	r3, r7, #20
 800a368:	4618      	mov	r0, r3
 800a36a:	f001 fa15 	bl	800b798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a36e:	2301      	movs	r3, #1
 800a370:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a372:	f002 f9e9 	bl	800c748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a376:	f000 ff7f 	bl	800b278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a37a:	f002 f9b7 	bl	800c6ec <vPortEnterCritical>
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a384:	b25b      	sxtb	r3, r3
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	d103      	bne.n	800a394 <xQueueGenericSend+0x164>
 800a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a39a:	b25b      	sxtb	r3, r3
 800a39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a0:	d103      	bne.n	800a3aa <xQueueGenericSend+0x17a>
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3aa:	f002 f9cd 	bl	800c748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3ae:	1d3a      	adds	r2, r7, #4
 800a3b0:	f107 0314 	add.w	r3, r7, #20
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f001 fa04 	bl	800b7c4 <xTaskCheckForTimeOut>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d124      	bne.n	800a40c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a3c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3c4:	f000 fc33 	bl	800ac2e <prvIsQueueFull>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d018      	beq.n	800a400 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	3310      	adds	r3, #16
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f001 f92e 	bl	800b638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3de:	f000 fbbe 	bl	800ab5e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3e2:	f000 ff57 	bl	800b294 <xTaskResumeAll>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f47f af7c 	bne.w	800a2e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <xQueueGenericSend+0x1f0>)
 800a3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	e772      	b.n	800a2e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a402:	f000 fbac 	bl	800ab5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a406:	f000 ff45 	bl	800b294 <xTaskResumeAll>
 800a40a:	e76c      	b.n	800a2e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a40e:	f000 fba6 	bl	800ab5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a412:	f000 ff3f 	bl	800b294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a416:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3738      	adds	r7, #56	; 0x38
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08e      	sub	sp, #56	; 0x38
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d109      	bne.n	800a450 <xQueueGenericSendFromISR+0x2c>
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
 800a44e:	e7fe      	b.n	800a44e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d103      	bne.n	800a45e <xQueueGenericSendFromISR+0x3a>
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <xQueueGenericSendFromISR+0x3e>
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <xQueueGenericSendFromISR+0x40>
 800a462:	2300      	movs	r3, #0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d109      	bne.n	800a47c <xQueueGenericSendFromISR+0x58>
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	623b      	str	r3, [r7, #32]
 800a47a:	e7fe      	b.n	800a47a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d103      	bne.n	800a48a <xQueueGenericSendFromISR+0x66>
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a486:	2b01      	cmp	r3, #1
 800a488:	d101      	bne.n	800a48e <xQueueGenericSendFromISR+0x6a>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <xQueueGenericSendFromISR+0x6c>
 800a48e:	2300      	movs	r3, #0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d109      	bne.n	800a4a8 <xQueueGenericSendFromISR+0x84>
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	e7fe      	b.n	800a4a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4a8:	f002 f9fc 	bl	800c8a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	61ba      	str	r2, [r7, #24]
 800a4c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a4c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d302      	bcc.n	800a4da <xQueueGenericSendFromISR+0xb6>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d12c      	bne.n	800a534 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	68b9      	ldr	r1, [r7, #8]
 800a4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ea:	f000 faa8 	bl	800aa3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d112      	bne.n	800a51e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d016      	beq.n	800a52e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	3324      	adds	r3, #36	; 0x24
 800a504:	4618      	mov	r0, r3
 800a506:	f001 f8e5 	bl	800b6d4 <xTaskRemoveFromEventList>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00e      	beq.n	800a52e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	e007      	b.n	800a52e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a51e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a522:	3301      	adds	r3, #1
 800a524:	b2db      	uxtb	r3, r3
 800a526:	b25a      	sxtb	r2, r3
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a52e:	2301      	movs	r3, #1
 800a530:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a532:	e001      	b.n	800a538 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a534:	2300      	movs	r3, #0
 800a536:	637b      	str	r3, [r7, #52]	; 0x34
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a544:	4618      	mov	r0, r3
 800a546:	3738      	adds	r7, #56	; 0x38
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08c      	sub	sp, #48	; 0x30
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a558:	2300      	movs	r3, #0
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	2b00      	cmp	r3, #0
 800a564:	d109      	bne.n	800a57a <xQueueReceive+0x2e>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	623b      	str	r3, [r7, #32]
 800a578:	e7fe      	b.n	800a578 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d103      	bne.n	800a588 <xQueueReceive+0x3c>
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <xQueueReceive+0x40>
 800a588:	2301      	movs	r3, #1
 800a58a:	e000      	b.n	800a58e <xQueueReceive+0x42>
 800a58c:	2300      	movs	r3, #0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d109      	bne.n	800a5a6 <xQueueReceive+0x5a>
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	e7fe      	b.n	800a5a4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5a6:	f001 fa5b 	bl	800ba60 <xTaskGetSchedulerState>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d102      	bne.n	800a5b6 <xQueueReceive+0x6a>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <xQueueReceive+0x6e>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e000      	b.n	800a5bc <xQueueReceive+0x70>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d109      	bne.n	800a5d4 <xQueueReceive+0x88>
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	e7fe      	b.n	800a5d2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5d4:	f002 f88a 	bl	800c6ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01f      	beq.n	800a624 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e8:	f000 fa93 	bl	800ab12 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	1e5a      	subs	r2, r3, #1
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00f      	beq.n	800a61c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	3310      	adds	r3, #16
 800a600:	4618      	mov	r0, r3
 800a602:	f001 f867 	bl	800b6d4 <xTaskRemoveFromEventList>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a60c:	4b3c      	ldr	r3, [pc, #240]	; (800a700 <xQueueReceive+0x1b4>)
 800a60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a61c:	f002 f894 	bl	800c748 <vPortExitCritical>
				return pdPASS;
 800a620:	2301      	movs	r3, #1
 800a622:	e069      	b.n	800a6f8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d103      	bne.n	800a632 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a62a:	f002 f88d 	bl	800c748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a62e:	2300      	movs	r3, #0
 800a630:	e062      	b.n	800a6f8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	2b00      	cmp	r3, #0
 800a636:	d106      	bne.n	800a646 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a638:	f107 0310 	add.w	r3, r7, #16
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f8ab 	bl	800b798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a642:	2301      	movs	r3, #1
 800a644:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a646:	f002 f87f 	bl	800c748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a64a:	f000 fe15 	bl	800b278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a64e:	f002 f84d 	bl	800c6ec <vPortEnterCritical>
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a658:	b25b      	sxtb	r3, r3
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d103      	bne.n	800a668 <xQueueReceive+0x11c>
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a66e:	b25b      	sxtb	r3, r3
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d103      	bne.n	800a67e <xQueueReceive+0x132>
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a67e:	f002 f863 	bl	800c748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a682:	1d3a      	adds	r2, r7, #4
 800a684:	f107 0310 	add.w	r3, r7, #16
 800a688:	4611      	mov	r1, r2
 800a68a:	4618      	mov	r0, r3
 800a68c:	f001 f89a 	bl	800b7c4 <xTaskCheckForTimeOut>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d123      	bne.n	800a6de <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a698:	f000 fab3 	bl	800ac02 <prvIsQueueEmpty>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d017      	beq.n	800a6d2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	3324      	adds	r3, #36	; 0x24
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 ffc4 	bl	800b638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b2:	f000 fa54 	bl	800ab5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6b6:	f000 fded 	bl	800b294 <xTaskResumeAll>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d189      	bne.n	800a5d4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	; (800a700 <xQueueReceive+0x1b4>)
 800a6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	e780      	b.n	800a5d4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d4:	f000 fa43 	bl	800ab5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6d8:	f000 fddc 	bl	800b294 <xTaskResumeAll>
 800a6dc:	e77a      	b.n	800a5d4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e0:	f000 fa3d 	bl	800ab5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6e4:	f000 fdd6 	bl	800b294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ea:	f000 fa8a 	bl	800ac02 <prvIsQueueEmpty>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f43f af6f 	beq.w	800a5d4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3730      	adds	r7, #48	; 0x30
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	e000ed04 	.word	0xe000ed04

0800a704 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08e      	sub	sp, #56	; 0x38
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a70e:	2300      	movs	r3, #0
 800a710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a716:	2300      	movs	r3, #0
 800a718:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d109      	bne.n	800a734 <xQueueSemaphoreTake+0x30>
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	623b      	str	r3, [r7, #32]
 800a732:	e7fe      	b.n	800a732 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d009      	beq.n	800a750 <xQueueSemaphoreTake+0x4c>
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	e7fe      	b.n	800a74e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a750:	f001 f986 	bl	800ba60 <xTaskGetSchedulerState>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <xQueueSemaphoreTake+0x5c>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <xQueueSemaphoreTake+0x60>
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <xQueueSemaphoreTake+0x62>
 800a764:	2300      	movs	r3, #0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d109      	bne.n	800a77e <xQueueSemaphoreTake+0x7a>
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	61bb      	str	r3, [r7, #24]
 800a77c:	e7fe      	b.n	800a77c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a77e:	f001 ffb5 	bl	800c6ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a786:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d024      	beq.n	800a7d8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a790:	1e5a      	subs	r2, r3, #1
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d104      	bne.n	800a7a8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a79e:	f001 fad1 	bl	800bd44 <pvTaskIncrementMutexHeldCount>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00f      	beq.n	800a7d0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b2:	3310      	adds	r3, #16
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 ff8d 	bl	800b6d4 <xTaskRemoveFromEventList>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7c0:	4b53      	ldr	r3, [pc, #332]	; (800a910 <xQueueSemaphoreTake+0x20c>)
 800a7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7d0:	f001 ffba 	bl	800c748 <vPortExitCritical>
				return pdPASS;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e096      	b.n	800a906 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d110      	bne.n	800a800 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d009      	beq.n	800a7f8 <xQueueSemaphoreTake+0xf4>
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	e7fe      	b.n	800a7f6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a7f8:	f001 ffa6 	bl	800c748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	e082      	b.n	800a906 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a806:	f107 030c 	add.w	r3, r7, #12
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 ffc4 	bl	800b798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a810:	2301      	movs	r3, #1
 800a812:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a814:	f001 ff98 	bl	800c748 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a818:	f000 fd2e 	bl	800b278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a81c:	f001 ff66 	bl	800c6ec <vPortEnterCritical>
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a826:	b25b      	sxtb	r3, r3
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d103      	bne.n	800a836 <xQueueSemaphoreTake+0x132>
 800a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a83c:	b25b      	sxtb	r3, r3
 800a83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a842:	d103      	bne.n	800a84c <xQueueSemaphoreTake+0x148>
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a84c:	f001 ff7c 	bl	800c748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a850:	463a      	mov	r2, r7
 800a852:	f107 030c 	add.w	r3, r7, #12
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 ffb3 	bl	800b7c4 <xTaskCheckForTimeOut>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d132      	bne.n	800a8ca <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a864:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a866:	f000 f9cc 	bl	800ac02 <prvIsQueueEmpty>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d026      	beq.n	800a8be <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d109      	bne.n	800a88c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a878:	f001 ff38 	bl	800c6ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	4618      	mov	r0, r3
 800a882:	f001 f90b 	bl	800ba9c <xTaskPriorityInherit>
 800a886:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a888:	f001 ff5e 	bl	800c748 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88e:	3324      	adds	r3, #36	; 0x24
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fecf 	bl	800b638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a89a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a89c:	f000 f95f 	bl	800ab5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8a0:	f000 fcf8 	bl	800b294 <xTaskResumeAll>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f47f af69 	bne.w	800a77e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a8ac:	4b18      	ldr	r3, [pc, #96]	; (800a910 <xQueueSemaphoreTake+0x20c>)
 800a8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	e75f      	b.n	800a77e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8c0:	f000 f94d 	bl	800ab5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8c4:	f000 fce6 	bl	800b294 <xTaskResumeAll>
 800a8c8:	e759      	b.n	800a77e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a8ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8cc:	f000 f947 	bl	800ab5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8d0:	f000 fce0 	bl	800b294 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8d6:	f000 f994 	bl	800ac02 <prvIsQueueEmpty>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f43f af4e 	beq.w	800a77e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00d      	beq.n	800a904 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a8e8:	f001 ff00 	bl	800c6ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a8ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8ee:	f000 f88e 	bl	800aa0e <prvGetDisinheritPriorityAfterTimeout>
 800a8f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 f9a2 	bl	800bc44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a900:	f001 ff22 	bl	800c748 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a906:	4618      	mov	r0, r3
 800a908:	3738      	adds	r7, #56	; 0x38
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	e000ed04 	.word	0xe000ed04

0800a914 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08e      	sub	sp, #56	; 0x38
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	2b00      	cmp	r3, #0
 800a928:	d109      	bne.n	800a93e <xQueueReceiveFromISR+0x2a>
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	623b      	str	r3, [r7, #32]
 800a93c:	e7fe      	b.n	800a93c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d103      	bne.n	800a94c <xQueueReceiveFromISR+0x38>
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <xQueueReceiveFromISR+0x3c>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <xQueueReceiveFromISR+0x3e>
 800a950:	2300      	movs	r3, #0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <xQueueReceiveFromISR+0x56>
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	e7fe      	b.n	800a968 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a96a:	f001 ff9b 	bl	800c8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800a96e:	f3ef 8211 	mrs	r2, BASEPRI
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	61ba      	str	r2, [r7, #24]
 800a984:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a986:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a988:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	2b00      	cmp	r3, #0
 800a994:	d02f      	beq.n	800a9f6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9a0:	68b9      	ldr	r1, [r7, #8]
 800a9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a4:	f000 f8b5 	bl	800ab12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	1e5a      	subs	r2, r3, #1
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b8:	d112      	bne.n	800a9e0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d016      	beq.n	800a9f0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	3310      	adds	r3, #16
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f000 fe84 	bl	800b6d4 <xTaskRemoveFromEventList>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00e      	beq.n	800a9f0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00b      	beq.n	800a9f0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	e007      	b.n	800a9f0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	b25a      	sxtb	r2, r3
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f4:	e001      	b.n	800a9fa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3738      	adds	r7, #56	; 0x38
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa0e:	b480      	push	{r7}
 800aa10:	b085      	sub	sp, #20
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	e001      	b.n	800aa30 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa30:	68fb      	ldr	r3, [r7, #12]
	}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10d      	bne.n	800aa78 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d14d      	bne.n	800ab00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 f87f 	bl	800bb6c <xTaskPriorityDisinherit>
 800aa6e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	609a      	str	r2, [r3, #8]
 800aa76:	e043      	b.n	800ab00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d119      	bne.n	800aab2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6858      	ldr	r0, [r3, #4]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	461a      	mov	r2, r3
 800aa88:	68b9      	ldr	r1, [r7, #8]
 800aa8a:	f002 fec3 	bl	800d814 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa96:	441a      	add	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d32b      	bcc.n	800ab00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	605a      	str	r2, [r3, #4]
 800aab0:	e026      	b.n	800ab00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	68d8      	ldr	r0, [r3, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaba:	461a      	mov	r2, r3
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	f002 fea9 	bl	800d814 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaca:	425b      	negs	r3, r3
 800aacc:	441a      	add	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68da      	ldr	r2, [r3, #12]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d207      	bcs.n	800aaee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	689a      	ldr	r2, [r3, #8]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	425b      	negs	r3, r3
 800aae8:	441a      	add	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d105      	bne.n	800ab00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab08:	697b      	ldr	r3, [r7, #20]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d018      	beq.n	800ab56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	441a      	add	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d303      	bcc.n	800ab46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68d9      	ldr	r1, [r3, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	461a      	mov	r2, r3
 800ab50:	6838      	ldr	r0, [r7, #0]
 800ab52:	f002 fe5f 	bl	800d814 <memcpy>
	}
}
 800ab56:	bf00      	nop
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab66:	f001 fdc1 	bl	800c6ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab70:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab72:	e011      	b.n	800ab98 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d012      	beq.n	800aba2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3324      	adds	r3, #36	; 0x24
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 fda7 	bl	800b6d4 <xTaskRemoveFromEventList>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab8c:	f000 fe7a 	bl	800b884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dce9      	bgt.n	800ab74 <prvUnlockQueue+0x16>
 800aba0:	e000      	b.n	800aba4 <prvUnlockQueue+0x46>
					break;
 800aba2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	22ff      	movs	r2, #255	; 0xff
 800aba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abac:	f001 fdcc 	bl	800c748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abb0:	f001 fd9c 	bl	800c6ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abbc:	e011      	b.n	800abe2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d012      	beq.n	800abec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3310      	adds	r3, #16
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 fd82 	bl	800b6d4 <xTaskRemoveFromEventList>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abd6:	f000 fe55 	bl	800b884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	3b01      	subs	r3, #1
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dce9      	bgt.n	800abbe <prvUnlockQueue+0x60>
 800abea:	e000      	b.n	800abee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	22ff      	movs	r2, #255	; 0xff
 800abf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800abf6:	f001 fda7 	bl	800c748 <vPortExitCritical>
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac0a:	f001 fd6f 	bl	800c6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d102      	bne.n	800ac1c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac16:	2301      	movs	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	e001      	b.n	800ac20 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac20:	f001 fd92 	bl	800c748 <vPortExitCritical>

	return xReturn;
 800ac24:	68fb      	ldr	r3, [r7, #12]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac36:	f001 fd59 	bl	800c6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d102      	bne.n	800ac4c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac46:	2301      	movs	r3, #1
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	e001      	b.n	800ac50 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac50:	f001 fd7a 	bl	800c748 <vPortExitCritical>

	return xReturn;
 800ac54:	68fb      	ldr	r3, [r7, #12]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
	...

0800ac60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	e014      	b.n	800ac9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <vQueueAddToRegistry+0x4c>)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac7c:	490b      	ldr	r1, [pc, #44]	; (800acac <vQueueAddToRegistry+0x4c>)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac86:	4a09      	ldr	r2, [pc, #36]	; (800acac <vQueueAddToRegistry+0x4c>)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac92:	e005      	b.n	800aca0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3301      	adds	r3, #1
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b07      	cmp	r3, #7
 800ac9e:	d9e7      	bls.n	800ac70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aca0:	bf00      	nop
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	2000c118 	.word	0x2000c118

0800acb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800acc0:	f001 fd14 	bl	800c6ec <vPortEnterCritical>
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acca:	b25b      	sxtb	r3, r3
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d103      	bne.n	800acda <vQueueWaitForMessageRestricted+0x2a>
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ace0:	b25b      	sxtb	r3, r3
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace6:	d103      	bne.n	800acf0 <vQueueWaitForMessageRestricted+0x40>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acf0:	f001 fd2a 	bl	800c748 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d106      	bne.n	800ad0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	3324      	adds	r3, #36	; 0x24
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 fcbb 	bl	800b680 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad0a:	6978      	ldr	r0, [r7, #20]
 800ad0c:	f7ff ff27 	bl	800ab5e <prvUnlockQueue>
	}
 800ad10:	bf00      	nop
 800ad12:	3718      	adds	r7, #24
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08e      	sub	sp, #56	; 0x38
 800ad1c:	af04      	add	r7, sp, #16
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d109      	bne.n	800ad40 <xTaskCreateStatic+0x28>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	623b      	str	r3, [r7, #32]
 800ad3e:	e7fe      	b.n	800ad3e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ad40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d109      	bne.n	800ad5a <xTaskCreateStatic+0x42>
 800ad46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	61fb      	str	r3, [r7, #28]
 800ad58:	e7fe      	b.n	800ad58 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad5a:	235c      	movs	r3, #92	; 0x5c
 800ad5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2b5c      	cmp	r3, #92	; 0x5c
 800ad62:	d009      	beq.n	800ad78 <xTaskCreateStatic+0x60>
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	61bb      	str	r3, [r7, #24]
 800ad76:	e7fe      	b.n	800ad76 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01e      	beq.n	800adbe <xTaskCreateStatic+0xa6>
 800ad80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d01b      	beq.n	800adbe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	2202      	movs	r2, #2
 800ad94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	9302      	str	r3, [sp, #8]
 800ada0:	f107 0314 	add.w	r3, r7, #20
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f850 	bl	800ae56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adb8:	f000 f8dc 	bl	800af74 <prvAddNewTaskToReadyList>
 800adbc:	e001      	b.n	800adc2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adc2:	697b      	ldr	r3, [r7, #20]
	}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3728      	adds	r7, #40	; 0x28
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08c      	sub	sp, #48	; 0x30
 800add0:	af04      	add	r7, sp, #16
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	603b      	str	r3, [r7, #0]
 800add8:	4613      	mov	r3, r2
 800adda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800addc:	88fb      	ldrh	r3, [r7, #6]
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 fd9d 	bl	800c920 <pvPortMalloc>
 800ade6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00e      	beq.n	800ae0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adee:	205c      	movs	r0, #92	; 0x5c
 800adf0:	f001 fd96 	bl	800c920 <pvPortMalloc>
 800adf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	631a      	str	r2, [r3, #48]	; 0x30
 800ae02:	e005      	b.n	800ae10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae04:	6978      	ldr	r0, [r7, #20]
 800ae06:	f001 fe4d 	bl	800caa4 <vPortFree>
 800ae0a:	e001      	b.n	800ae10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d017      	beq.n	800ae46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae1e:	88fa      	ldrh	r2, [r7, #6]
 800ae20:	2300      	movs	r3, #0
 800ae22:	9303      	str	r3, [sp, #12]
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	9302      	str	r3, [sp, #8]
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	68b9      	ldr	r1, [r7, #8]
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f000 f80e 	bl	800ae56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae3a:	69f8      	ldr	r0, [r7, #28]
 800ae3c:	f000 f89a 	bl	800af74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae40:	2301      	movs	r3, #1
 800ae42:	61bb      	str	r3, [r7, #24]
 800ae44:	e002      	b.n	800ae4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae46:	f04f 33ff 	mov.w	r3, #4294967295
 800ae4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae4c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b088      	sub	sp, #32
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
 800ae62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	21a5      	movs	r1, #165	; 0xa5
 800ae70:	f002 fcdb 	bl	800d82a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	f023 0307 	bic.w	r3, r3, #7
 800ae8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	f003 0307 	and.w	r3, r3, #7
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d009      	beq.n	800aeac <prvInitialiseNewTask+0x56>
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	617b      	str	r3, [r7, #20]
 800aeaa:	e7fe      	b.n	800aeaa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d01f      	beq.n	800aef2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	e012      	b.n	800aede <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	4413      	add	r3, r2
 800aebe:	7819      	ldrb	r1, [r3, #0]
 800aec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	4413      	add	r3, r2
 800aec6:	3334      	adds	r3, #52	; 0x34
 800aec8:	460a      	mov	r2, r1
 800aeca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	4413      	add	r3, r2
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d006      	beq.n	800aee6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	3301      	adds	r3, #1
 800aedc:	61fb      	str	r3, [r7, #28]
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	2b0f      	cmp	r3, #15
 800aee2:	d9e9      	bls.n	800aeb8 <prvInitialiseNewTask+0x62>
 800aee4:	e000      	b.n	800aee8 <prvInitialiseNewTask+0x92>
			{
				break;
 800aee6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aef0:	e003      	b.n	800aefa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	2b37      	cmp	r3, #55	; 0x37
 800aefe:	d901      	bls.n	800af04 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af00:	2337      	movs	r3, #55	; 0x37
 800af02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	2200      	movs	r2, #0
 800af14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	3304      	adds	r3, #4
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe ff02 	bl	8009d24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	3318      	adds	r3, #24
 800af24:	4618      	mov	r0, r3
 800af26:	f7fe fefd 	bl	8009d24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	2200      	movs	r2, #0
 800af44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	68f9      	ldr	r1, [r7, #12]
 800af52:	69b8      	ldr	r0, [r7, #24]
 800af54:	f001 faa4 	bl	800c4a0 <pxPortInitialiseStack>
 800af58:	4602      	mov	r2, r0
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af6a:	bf00      	nop
 800af6c:	3720      	adds	r7, #32
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af7c:	f001 fbb6 	bl	800c6ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af80:	4b2d      	ldr	r3, [pc, #180]	; (800b038 <prvAddNewTaskToReadyList+0xc4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	4a2c      	ldr	r2, [pc, #176]	; (800b038 <prvAddNewTaskToReadyList+0xc4>)
 800af88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af8a:	4b2c      	ldr	r3, [pc, #176]	; (800b03c <prvAddNewTaskToReadyList+0xc8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d109      	bne.n	800afa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af92:	4a2a      	ldr	r2, [pc, #168]	; (800b03c <prvAddNewTaskToReadyList+0xc8>)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af98:	4b27      	ldr	r3, [pc, #156]	; (800b038 <prvAddNewTaskToReadyList+0xc4>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d110      	bne.n	800afc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afa0:	f000 fc94 	bl	800b8cc <prvInitialiseTaskLists>
 800afa4:	e00d      	b.n	800afc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afa6:	4b26      	ldr	r3, [pc, #152]	; (800b040 <prvAddNewTaskToReadyList+0xcc>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d109      	bne.n	800afc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afae:	4b23      	ldr	r3, [pc, #140]	; (800b03c <prvAddNewTaskToReadyList+0xc8>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	429a      	cmp	r2, r3
 800afba:	d802      	bhi.n	800afc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afbc:	4a1f      	ldr	r2, [pc, #124]	; (800b03c <prvAddNewTaskToReadyList+0xc8>)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afc2:	4b20      	ldr	r3, [pc, #128]	; (800b044 <prvAddNewTaskToReadyList+0xd0>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	4a1e      	ldr	r2, [pc, #120]	; (800b044 <prvAddNewTaskToReadyList+0xd0>)
 800afca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afcc:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <prvAddNewTaskToReadyList+0xd0>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	4b1b      	ldr	r3, [pc, #108]	; (800b048 <prvAddNewTaskToReadyList+0xd4>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d903      	bls.n	800afe8 <prvAddNewTaskToReadyList+0x74>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	4a18      	ldr	r2, [pc, #96]	; (800b048 <prvAddNewTaskToReadyList+0xd4>)
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afec:	4613      	mov	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4a15      	ldr	r2, [pc, #84]	; (800b04c <prvAddNewTaskToReadyList+0xd8>)
 800aff6:	441a      	add	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3304      	adds	r3, #4
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	f7fe fe9d 	bl	8009d3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b004:	f001 fba0 	bl	800c748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b008:	4b0d      	ldr	r3, [pc, #52]	; (800b040 <prvAddNewTaskToReadyList+0xcc>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00e      	beq.n	800b02e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b010:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <prvAddNewTaskToReadyList+0xc8>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d207      	bcs.n	800b02e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b01e:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <prvAddNewTaskToReadyList+0xdc>)
 800b020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b02e:	bf00      	nop
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20000dd0 	.word	0x20000dd0
 800b03c:	200008fc 	.word	0x200008fc
 800b040:	20000ddc 	.word	0x20000ddc
 800b044:	20000dec 	.word	0x20000dec
 800b048:	20000dd8 	.word	0x20000dd8
 800b04c:	20000900 	.word	0x20000900
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08a      	sub	sp, #40	; 0x28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b05e:	2300      	movs	r3, #0
 800b060:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d109      	bne.n	800b07c <vTaskDelayUntil+0x28>
 800b068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	617b      	str	r3, [r7, #20]
 800b07a:	e7fe      	b.n	800b07a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d109      	bne.n	800b096 <vTaskDelayUntil+0x42>
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	e7fe      	b.n	800b094 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800b096:	4b29      	ldr	r3, [pc, #164]	; (800b13c <vTaskDelayUntil+0xe8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <vTaskDelayUntil+0x5e>
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	e7fe      	b.n	800b0b0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800b0b2:	f000 f8e1 	bl	800b278 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b0b6:	4b22      	ldr	r3, [pc, #136]	; (800b140 <vTaskDelayUntil+0xec>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6a3a      	ldr	r2, [r7, #32]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d20b      	bcs.n	800b0e8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d211      	bcs.n	800b0fe <vTaskDelayUntil+0xaa>
 800b0da:	69fa      	ldr	r2, [r7, #28]
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d90d      	bls.n	800b0fe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e6:	e00a      	b.n	800b0fe <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d303      	bcc.n	800b0fa <vTaskDelayUntil+0xa6>
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d901      	bls.n	800b0fe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69fa      	ldr	r2, [r7, #28]
 800b102:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	d006      	beq.n	800b118 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	6a3b      	ldr	r3, [r7, #32]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	2100      	movs	r1, #0
 800b112:	4618      	mov	r0, r3
 800b114:	f000 fe2a 	bl	800bd6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b118:	f000 f8bc 	bl	800b294 <xTaskResumeAll>
 800b11c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d107      	bne.n	800b134 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800b124:	4b07      	ldr	r3, [pc, #28]	; (800b144 <vTaskDelayUntil+0xf0>)
 800b126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b134:	bf00      	nop
 800b136:	3728      	adds	r7, #40	; 0x28
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	20000df8 	.word	0x20000df8
 800b140:	20000dd4 	.word	0x20000dd4
 800b144:	e000ed04 	.word	0xe000ed04

0800b148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b150:	2300      	movs	r3, #0
 800b152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d016      	beq.n	800b188 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b15a:	4b13      	ldr	r3, [pc, #76]	; (800b1a8 <vTaskDelay+0x60>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d009      	beq.n	800b176 <vTaskDelay+0x2e>
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60bb      	str	r3, [r7, #8]
 800b174:	e7fe      	b.n	800b174 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b176:	f000 f87f 	bl	800b278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b17a:	2100      	movs	r1, #0
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fdf5 	bl	800bd6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b182:	f000 f887 	bl	800b294 <xTaskResumeAll>
 800b186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d107      	bne.n	800b19e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b18e:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <vTaskDelay+0x64>)
 800b190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b194:	601a      	str	r2, [r3, #0]
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20000df8 	.word	0x20000df8
 800b1ac:	e000ed04 	.word	0xe000ed04

0800b1b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08a      	sub	sp, #40	; 0x28
 800b1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1be:	463a      	mov	r2, r7
 800b1c0:	1d39      	adds	r1, r7, #4
 800b1c2:	f107 0308 	add.w	r3, r7, #8
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe fd58 	bl	8009c7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	9202      	str	r2, [sp, #8]
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	460a      	mov	r2, r1
 800b1de:	4920      	ldr	r1, [pc, #128]	; (800b260 <vTaskStartScheduler+0xb0>)
 800b1e0:	4820      	ldr	r0, [pc, #128]	; (800b264 <vTaskStartScheduler+0xb4>)
 800b1e2:	f7ff fd99 	bl	800ad18 <xTaskCreateStatic>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	4b1f      	ldr	r3, [pc, #124]	; (800b268 <vTaskStartScheduler+0xb8>)
 800b1ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1ec:	4b1e      	ldr	r3, [pc, #120]	; (800b268 <vTaskStartScheduler+0xb8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	e001      	b.n	800b1fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d102      	bne.n	800b20a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b204:	f000 fe06 	bl	800be14 <xTimerCreateTimerTask>
 800b208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d115      	bne.n	800b23c <vTaskStartScheduler+0x8c>
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b222:	4b12      	ldr	r3, [pc, #72]	; (800b26c <vTaskStartScheduler+0xbc>)
 800b224:	f04f 32ff 	mov.w	r2, #4294967295
 800b228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b22a:	4b11      	ldr	r3, [pc, #68]	; (800b270 <vTaskStartScheduler+0xc0>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b230:	4b10      	ldr	r3, [pc, #64]	; (800b274 <vTaskStartScheduler+0xc4>)
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b236:	f001 f9bb 	bl	800c5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b23a:	e00d      	b.n	800b258 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b242:	d109      	bne.n	800b258 <vTaskStartScheduler+0xa8>
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	e7fe      	b.n	800b256 <vTaskStartScheduler+0xa6>
}
 800b258:	bf00      	nop
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	0800e1a8 	.word	0x0800e1a8
 800b264:	0800b89d 	.word	0x0800b89d
 800b268:	20000df4 	.word	0x20000df4
 800b26c:	20000df0 	.word	0x20000df0
 800b270:	20000ddc 	.word	0x20000ddc
 800b274:	20000dd4 	.word	0x20000dd4

0800b278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b27c:	4b04      	ldr	r3, [pc, #16]	; (800b290 <vTaskSuspendAll+0x18>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	4a03      	ldr	r2, [pc, #12]	; (800b290 <vTaskSuspendAll+0x18>)
 800b284:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b286:	bf00      	nop
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	20000df8 	.word	0x20000df8

0800b294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2a2:	4b41      	ldr	r3, [pc, #260]	; (800b3a8 <xTaskResumeAll+0x114>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <xTaskResumeAll+0x2a>
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	e7fe      	b.n	800b2bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2be:	f001 fa15 	bl	800c6ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2c2:	4b39      	ldr	r3, [pc, #228]	; (800b3a8 <xTaskResumeAll+0x114>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	4a37      	ldr	r2, [pc, #220]	; (800b3a8 <xTaskResumeAll+0x114>)
 800b2ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2cc:	4b36      	ldr	r3, [pc, #216]	; (800b3a8 <xTaskResumeAll+0x114>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d162      	bne.n	800b39a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2d4:	4b35      	ldr	r3, [pc, #212]	; (800b3ac <xTaskResumeAll+0x118>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d05e      	beq.n	800b39a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2dc:	e02f      	b.n	800b33e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2de:	4b34      	ldr	r3, [pc, #208]	; (800b3b0 <xTaskResumeAll+0x11c>)
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3318      	adds	r3, #24
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe fd84 	bl	8009df8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fe fd7f 	bl	8009df8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fe:	4b2d      	ldr	r3, [pc, #180]	; (800b3b4 <xTaskResumeAll+0x120>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d903      	bls.n	800b30e <xTaskResumeAll+0x7a>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30a:	4a2a      	ldr	r2, [pc, #168]	; (800b3b4 <xTaskResumeAll+0x120>)
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4a27      	ldr	r2, [pc, #156]	; (800b3b8 <xTaskResumeAll+0x124>)
 800b31c:	441a      	add	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3304      	adds	r3, #4
 800b322:	4619      	mov	r1, r3
 800b324:	4610      	mov	r0, r2
 800b326:	f7fe fd0a 	bl	8009d3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	4b23      	ldr	r3, [pc, #140]	; (800b3bc <xTaskResumeAll+0x128>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	429a      	cmp	r2, r3
 800b336:	d302      	bcc.n	800b33e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b338:	4b21      	ldr	r3, [pc, #132]	; (800b3c0 <xTaskResumeAll+0x12c>)
 800b33a:	2201      	movs	r2, #1
 800b33c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b33e:	4b1c      	ldr	r3, [pc, #112]	; (800b3b0 <xTaskResumeAll+0x11c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1cb      	bne.n	800b2de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b34c:	f000 fb58 	bl	800ba00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b350:	4b1c      	ldr	r3, [pc, #112]	; (800b3c4 <xTaskResumeAll+0x130>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d010      	beq.n	800b37e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b35c:	f000 f858 	bl	800b410 <xTaskIncrementTick>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d002      	beq.n	800b36c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b366:	4b16      	ldr	r3, [pc, #88]	; (800b3c0 <xTaskResumeAll+0x12c>)
 800b368:	2201      	movs	r2, #1
 800b36a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3b01      	subs	r3, #1
 800b370:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1f1      	bne.n	800b35c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b378:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <xTaskResumeAll+0x130>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b37e:	4b10      	ldr	r3, [pc, #64]	; (800b3c0 <xTaskResumeAll+0x12c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d009      	beq.n	800b39a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b386:	2301      	movs	r3, #1
 800b388:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b38a:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <xTaskResumeAll+0x134>)
 800b38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b39a:	f001 f9d5 	bl	800c748 <vPortExitCritical>

	return xAlreadyYielded;
 800b39e:	68bb      	ldr	r3, [r7, #8]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000df8 	.word	0x20000df8
 800b3ac:	20000dd0 	.word	0x20000dd0
 800b3b0:	20000d90 	.word	0x20000d90
 800b3b4:	20000dd8 	.word	0x20000dd8
 800b3b8:	20000900 	.word	0x20000900
 800b3bc:	200008fc 	.word	0x200008fc
 800b3c0:	20000de4 	.word	0x20000de4
 800b3c4:	20000de0 	.word	0x20000de0
 800b3c8:	e000ed04 	.word	0xe000ed04

0800b3cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3d2:	4b05      	ldr	r3, [pc, #20]	; (800b3e8 <xTaskGetTickCount+0x1c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3d8:	687b      	ldr	r3, [r7, #4]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	20000dd4 	.word	0x20000dd4

0800b3ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3f2:	f001 fa57 	bl	800c8a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b3fa:	4b04      	ldr	r3, [pc, #16]	; (800b40c <xTaskGetTickCountFromISR+0x20>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b400:	683b      	ldr	r3, [r7, #0]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20000dd4 	.word	0x20000dd4

0800b410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b41a:	4b4e      	ldr	r3, [pc, #312]	; (800b554 <xTaskIncrementTick+0x144>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f040 8088 	bne.w	800b534 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b424:	4b4c      	ldr	r3, [pc, #304]	; (800b558 <xTaskIncrementTick+0x148>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b42c:	4a4a      	ldr	r2, [pc, #296]	; (800b558 <xTaskIncrementTick+0x148>)
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d11f      	bne.n	800b478 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b438:	4b48      	ldr	r3, [pc, #288]	; (800b55c <xTaskIncrementTick+0x14c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d009      	beq.n	800b456 <xTaskIncrementTick+0x46>
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	e7fe      	b.n	800b454 <xTaskIncrementTick+0x44>
 800b456:	4b41      	ldr	r3, [pc, #260]	; (800b55c <xTaskIncrementTick+0x14c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	4b40      	ldr	r3, [pc, #256]	; (800b560 <xTaskIncrementTick+0x150>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a3e      	ldr	r2, [pc, #248]	; (800b55c <xTaskIncrementTick+0x14c>)
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	4a3e      	ldr	r2, [pc, #248]	; (800b560 <xTaskIncrementTick+0x150>)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6013      	str	r3, [r2, #0]
 800b46a:	4b3e      	ldr	r3, [pc, #248]	; (800b564 <xTaskIncrementTick+0x154>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3301      	adds	r3, #1
 800b470:	4a3c      	ldr	r2, [pc, #240]	; (800b564 <xTaskIncrementTick+0x154>)
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	f000 fac4 	bl	800ba00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b478:	4b3b      	ldr	r3, [pc, #236]	; (800b568 <xTaskIncrementTick+0x158>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d349      	bcc.n	800b516 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b482:	4b36      	ldr	r3, [pc, #216]	; (800b55c <xTaskIncrementTick+0x14c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d104      	bne.n	800b496 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b48c:	4b36      	ldr	r3, [pc, #216]	; (800b568 <xTaskIncrementTick+0x158>)
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	601a      	str	r2, [r3, #0]
					break;
 800b494:	e03f      	b.n	800b516 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b496:	4b31      	ldr	r3, [pc, #196]	; (800b55c <xTaskIncrementTick+0x14c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d203      	bcs.n	800b4b6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4ae:	4a2e      	ldr	r2, [pc, #184]	; (800b568 <xTaskIncrementTick+0x158>)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4b4:	e02f      	b.n	800b516 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe fc9c 	bl	8009df8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d004      	beq.n	800b4d2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	3318      	adds	r3, #24
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe fc93 	bl	8009df8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d6:	4b25      	ldr	r3, [pc, #148]	; (800b56c <xTaskIncrementTick+0x15c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d903      	bls.n	800b4e6 <xTaskIncrementTick+0xd6>
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	4a22      	ldr	r2, [pc, #136]	; (800b56c <xTaskIncrementTick+0x15c>)
 800b4e4:	6013      	str	r3, [r2, #0]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4a1f      	ldr	r2, [pc, #124]	; (800b570 <xTaskIncrementTick+0x160>)
 800b4f4:	441a      	add	r2, r3
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7fe fc1e 	bl	8009d3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b506:	4b1b      	ldr	r3, [pc, #108]	; (800b574 <xTaskIncrementTick+0x164>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d3b8      	bcc.n	800b482 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b510:	2301      	movs	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b514:	e7b5      	b.n	800b482 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b516:	4b17      	ldr	r3, [pc, #92]	; (800b574 <xTaskIncrementTick+0x164>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51c:	4914      	ldr	r1, [pc, #80]	; (800b570 <xTaskIncrementTick+0x160>)
 800b51e:	4613      	mov	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	440b      	add	r3, r1
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d907      	bls.n	800b53e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b52e:	2301      	movs	r3, #1
 800b530:	617b      	str	r3, [r7, #20]
 800b532:	e004      	b.n	800b53e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b534:	4b10      	ldr	r3, [pc, #64]	; (800b578 <xTaskIncrementTick+0x168>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3301      	adds	r3, #1
 800b53a:	4a0f      	ldr	r2, [pc, #60]	; (800b578 <xTaskIncrementTick+0x168>)
 800b53c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b53e:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <xTaskIncrementTick+0x16c>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b546:	2301      	movs	r3, #1
 800b548:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b54a:	697b      	ldr	r3, [r7, #20]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	20000df8 	.word	0x20000df8
 800b558:	20000dd4 	.word	0x20000dd4
 800b55c:	20000d88 	.word	0x20000d88
 800b560:	20000d8c 	.word	0x20000d8c
 800b564:	20000de8 	.word	0x20000de8
 800b568:	20000df0 	.word	0x20000df0
 800b56c:	20000dd8 	.word	0x20000dd8
 800b570:	20000900 	.word	0x20000900
 800b574:	200008fc 	.word	0x200008fc
 800b578:	20000de0 	.word	0x20000de0
 800b57c:	20000de4 	.word	0x20000de4

0800b580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b586:	4b27      	ldr	r3, [pc, #156]	; (800b624 <vTaskSwitchContext+0xa4>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b58e:	4b26      	ldr	r3, [pc, #152]	; (800b628 <vTaskSwitchContext+0xa8>)
 800b590:	2201      	movs	r2, #1
 800b592:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b594:	e040      	b.n	800b618 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b596:	4b24      	ldr	r3, [pc, #144]	; (800b628 <vTaskSwitchContext+0xa8>)
 800b598:	2200      	movs	r2, #0
 800b59a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b59c:	4b23      	ldr	r3, [pc, #140]	; (800b62c <vTaskSwitchContext+0xac>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	60fb      	str	r3, [r7, #12]
 800b5a2:	e00f      	b.n	800b5c4 <vTaskSwitchContext+0x44>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d109      	bne.n	800b5be <vTaskSwitchContext+0x3e>
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	607b      	str	r3, [r7, #4]
 800b5bc:	e7fe      	b.n	800b5bc <vTaskSwitchContext+0x3c>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	491a      	ldr	r1, [pc, #104]	; (800b630 <vTaskSwitchContext+0xb0>)
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	440b      	add	r3, r1
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0e5      	beq.n	800b5a4 <vTaskSwitchContext+0x24>
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4a13      	ldr	r2, [pc, #76]	; (800b630 <vTaskSwitchContext+0xb0>)
 800b5e4:	4413      	add	r3, r2
 800b5e6:	60bb      	str	r3, [r7, #8]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	605a      	str	r2, [r3, #4]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d104      	bne.n	800b608 <vTaskSwitchContext+0x88>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	605a      	str	r2, [r3, #4]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	4a09      	ldr	r2, [pc, #36]	; (800b634 <vTaskSwitchContext+0xb4>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	4a06      	ldr	r2, [pc, #24]	; (800b62c <vTaskSwitchContext+0xac>)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6013      	str	r3, [r2, #0]
}
 800b618:	bf00      	nop
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	20000df8 	.word	0x20000df8
 800b628:	20000de4 	.word	0x20000de4
 800b62c:	20000dd8 	.word	0x20000dd8
 800b630:	20000900 	.word	0x20000900
 800b634:	200008fc 	.word	0x200008fc

0800b638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d109      	bne.n	800b65c <vTaskPlaceOnEventList+0x24>
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	e7fe      	b.n	800b65a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b65c:	4b07      	ldr	r3, [pc, #28]	; (800b67c <vTaskPlaceOnEventList+0x44>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3318      	adds	r3, #24
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7fe fb8e 	bl	8009d86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b66a:	2101      	movs	r1, #1
 800b66c:	6838      	ldr	r0, [r7, #0]
 800b66e:	f000 fb7d 	bl	800bd6c <prvAddCurrentTaskToDelayedList>
}
 800b672:	bf00      	nop
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200008fc 	.word	0x200008fc

0800b680 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d109      	bne.n	800b6a6 <vTaskPlaceOnEventListRestricted+0x26>
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	e7fe      	b.n	800b6a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6a6:	4b0a      	ldr	r3, [pc, #40]	; (800b6d0 <vTaskPlaceOnEventListRestricted+0x50>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3318      	adds	r3, #24
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7fe fb45 	bl	8009d3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b6be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	68b8      	ldr	r0, [r7, #8]
 800b6c4:	f000 fb52 	bl	800bd6c <prvAddCurrentTaskToDelayedList>
	}
 800b6c8:	bf00      	nop
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	200008fc 	.word	0x200008fc

0800b6d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d109      	bne.n	800b6fe <xTaskRemoveFromEventList+0x2a>
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	60fb      	str	r3, [r7, #12]
 800b6fc:	e7fe      	b.n	800b6fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	3318      	adds	r3, #24
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe fb78 	bl	8009df8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b708:	4b1d      	ldr	r3, [pc, #116]	; (800b780 <xTaskRemoveFromEventList+0xac>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d11d      	bne.n	800b74c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	3304      	adds	r3, #4
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe fb6f 	bl	8009df8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71e:	4b19      	ldr	r3, [pc, #100]	; (800b784 <xTaskRemoveFromEventList+0xb0>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d903      	bls.n	800b72e <xTaskRemoveFromEventList+0x5a>
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72a:	4a16      	ldr	r2, [pc, #88]	; (800b784 <xTaskRemoveFromEventList+0xb0>)
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b732:	4613      	mov	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4a13      	ldr	r2, [pc, #76]	; (800b788 <xTaskRemoveFromEventList+0xb4>)
 800b73c:	441a      	add	r2, r3
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	3304      	adds	r3, #4
 800b742:	4619      	mov	r1, r3
 800b744:	4610      	mov	r0, r2
 800b746:	f7fe fafa 	bl	8009d3e <vListInsertEnd>
 800b74a:	e005      	b.n	800b758 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	3318      	adds	r3, #24
 800b750:	4619      	mov	r1, r3
 800b752:	480e      	ldr	r0, [pc, #56]	; (800b78c <xTaskRemoveFromEventList+0xb8>)
 800b754:	f7fe faf3 	bl	8009d3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <xTaskRemoveFromEventList+0xbc>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	429a      	cmp	r2, r3
 800b764:	d905      	bls.n	800b772 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b766:	2301      	movs	r3, #1
 800b768:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <xTaskRemoveFromEventList+0xc0>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	e001      	b.n	800b776 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b776:	697b      	ldr	r3, [r7, #20]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	20000df8 	.word	0x20000df8
 800b784:	20000dd8 	.word	0x20000dd8
 800b788:	20000900 	.word	0x20000900
 800b78c:	20000d90 	.word	0x20000d90
 800b790:	200008fc 	.word	0x200008fc
 800b794:	20000de4 	.word	0x20000de4

0800b798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7a0:	4b06      	ldr	r3, [pc, #24]	; (800b7bc <vTaskInternalSetTimeOutState+0x24>)
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7a8:	4b05      	ldr	r3, [pc, #20]	; (800b7c0 <vTaskInternalSetTimeOutState+0x28>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	605a      	str	r2, [r3, #4]
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	20000de8 	.word	0x20000de8
 800b7c0:	20000dd4 	.word	0x20000dd4

0800b7c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b088      	sub	sp, #32
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d109      	bne.n	800b7e8 <xTaskCheckForTimeOut+0x24>
 800b7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	613b      	str	r3, [r7, #16]
 800b7e6:	e7fe      	b.n	800b7e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d109      	bne.n	800b802 <xTaskCheckForTimeOut+0x3e>
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	e7fe      	b.n	800b800 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b802:	f000 ff73 	bl	800c6ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b806:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <xTaskCheckForTimeOut+0xb8>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	69ba      	ldr	r2, [r7, #24]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d102      	bne.n	800b826 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]
 800b824:	e023      	b.n	800b86e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	4b15      	ldr	r3, [pc, #84]	; (800b880 <xTaskCheckForTimeOut+0xbc>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d007      	beq.n	800b842 <xTaskCheckForTimeOut+0x7e>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d302      	bcc.n	800b842 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	e015      	b.n	800b86e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d20b      	bcs.n	800b864 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	1ad2      	subs	r2, r2, r3
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7ff ff9d 	bl	800b798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b85e:	2300      	movs	r3, #0
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	e004      	b.n	800b86e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2200      	movs	r2, #0
 800b868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b86a:	2301      	movs	r3, #1
 800b86c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b86e:	f000 ff6b 	bl	800c748 <vPortExitCritical>

	return xReturn;
 800b872:	69fb      	ldr	r3, [r7, #28]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20000dd4 	.word	0x20000dd4
 800b880:	20000de8 	.word	0x20000de8

0800b884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b884:	b480      	push	{r7}
 800b886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b888:	4b03      	ldr	r3, [pc, #12]	; (800b898 <vTaskMissedYield+0x14>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	601a      	str	r2, [r3, #0]
}
 800b88e:	bf00      	nop
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	20000de4 	.word	0x20000de4

0800b89c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8a4:	f000 f852 	bl	800b94c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8a8:	4b06      	ldr	r3, [pc, #24]	; (800b8c4 <prvIdleTask+0x28>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d9f9      	bls.n	800b8a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <prvIdleTask+0x2c>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8c0:	e7f0      	b.n	800b8a4 <prvIdleTask+0x8>
 800b8c2:	bf00      	nop
 800b8c4:	20000900 	.word	0x20000900
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	607b      	str	r3, [r7, #4]
 800b8d6:	e00c      	b.n	800b8f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4a12      	ldr	r2, [pc, #72]	; (800b92c <prvInitialiseTaskLists+0x60>)
 800b8e4:	4413      	add	r3, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe f9fc 	bl	8009ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	607b      	str	r3, [r7, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b37      	cmp	r3, #55	; 0x37
 800b8f6:	d9ef      	bls.n	800b8d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8f8:	480d      	ldr	r0, [pc, #52]	; (800b930 <prvInitialiseTaskLists+0x64>)
 800b8fa:	f7fe f9f3 	bl	8009ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8fe:	480d      	ldr	r0, [pc, #52]	; (800b934 <prvInitialiseTaskLists+0x68>)
 800b900:	f7fe f9f0 	bl	8009ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b904:	480c      	ldr	r0, [pc, #48]	; (800b938 <prvInitialiseTaskLists+0x6c>)
 800b906:	f7fe f9ed 	bl	8009ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b90a:	480c      	ldr	r0, [pc, #48]	; (800b93c <prvInitialiseTaskLists+0x70>)
 800b90c:	f7fe f9ea 	bl	8009ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b910:	480b      	ldr	r0, [pc, #44]	; (800b940 <prvInitialiseTaskLists+0x74>)
 800b912:	f7fe f9e7 	bl	8009ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <prvInitialiseTaskLists+0x78>)
 800b918:	4a05      	ldr	r2, [pc, #20]	; (800b930 <prvInitialiseTaskLists+0x64>)
 800b91a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b91c:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <prvInitialiseTaskLists+0x7c>)
 800b91e:	4a05      	ldr	r2, [pc, #20]	; (800b934 <prvInitialiseTaskLists+0x68>)
 800b920:	601a      	str	r2, [r3, #0]
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20000900 	.word	0x20000900
 800b930:	20000d60 	.word	0x20000d60
 800b934:	20000d74 	.word	0x20000d74
 800b938:	20000d90 	.word	0x20000d90
 800b93c:	20000da4 	.word	0x20000da4
 800b940:	20000dbc 	.word	0x20000dbc
 800b944:	20000d88 	.word	0x20000d88
 800b948:	20000d8c 	.word	0x20000d8c

0800b94c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b952:	e019      	b.n	800b988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b954:	f000 feca 	bl	800c6ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b958:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <prvCheckTasksWaitingTermination+0x4c>)
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3304      	adds	r3, #4
 800b964:	4618      	mov	r0, r3
 800b966:	f7fe fa47 	bl	8009df8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b96a:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <prvCheckTasksWaitingTermination+0x50>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3b01      	subs	r3, #1
 800b970:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <prvCheckTasksWaitingTermination+0x50>)
 800b972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b974:	4b0a      	ldr	r3, [pc, #40]	; (800b9a0 <prvCheckTasksWaitingTermination+0x54>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3b01      	subs	r3, #1
 800b97a:	4a09      	ldr	r2, [pc, #36]	; (800b9a0 <prvCheckTasksWaitingTermination+0x54>)
 800b97c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b97e:	f000 fee3 	bl	800c748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f80e 	bl	800b9a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b988:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <prvCheckTasksWaitingTermination+0x54>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1e1      	bne.n	800b954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000da4 	.word	0x20000da4
 800b99c:	20000dd0 	.word	0x20000dd0
 800b9a0:	20000db8 	.word	0x20000db8

0800b9a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d108      	bne.n	800b9c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f001 f872 	bl	800caa4 <vPortFree>
				vPortFree( pxTCB );
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f001 f86f 	bl	800caa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9c6:	e017      	b.n	800b9f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d103      	bne.n	800b9da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f001 f866 	bl	800caa4 <vPortFree>
	}
 800b9d8:	e00e      	b.n	800b9f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d009      	beq.n	800b9f8 <prvDeleteTCB+0x54>
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e7fe      	b.n	800b9f6 <prvDeleteTCB+0x52>
	}
 800b9f8:	bf00      	nop
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba06:	4b0c      	ldr	r3, [pc, #48]	; (800ba38 <prvResetNextTaskUnblockTime+0x38>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d104      	bne.n	800ba1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <prvResetNextTaskUnblockTime+0x3c>)
 800ba12:	f04f 32ff 	mov.w	r2, #4294967295
 800ba16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba18:	e008      	b.n	800ba2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba1a:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <prvResetNextTaskUnblockTime+0x38>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a04      	ldr	r2, [pc, #16]	; (800ba3c <prvResetNextTaskUnblockTime+0x3c>)
 800ba2a:	6013      	str	r3, [r2, #0]
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	20000d88 	.word	0x20000d88
 800ba3c:	20000df0 	.word	0x20000df0

0800ba40 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <xTaskGetCurrentTaskHandle+0x1c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ba4c:	687b      	ldr	r3, [r7, #4]
	}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	200008fc 	.word	0x200008fc

0800ba60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba66:	4b0b      	ldr	r3, [pc, #44]	; (800ba94 <xTaskGetSchedulerState+0x34>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d102      	bne.n	800ba74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	607b      	str	r3, [r7, #4]
 800ba72:	e008      	b.n	800ba86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba74:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <xTaskGetSchedulerState+0x38>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	607b      	str	r3, [r7, #4]
 800ba80:	e001      	b.n	800ba86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba82:	2300      	movs	r3, #0
 800ba84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba86:	687b      	ldr	r3, [r7, #4]
	}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	20000ddc 	.word	0x20000ddc
 800ba98:	20000df8 	.word	0x20000df8

0800ba9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d051      	beq.n	800bb56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	4b2a      	ldr	r3, [pc, #168]	; (800bb60 <xTaskPriorityInherit+0xc4>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	429a      	cmp	r2, r3
 800babe:	d241      	bcs.n	800bb44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	db06      	blt.n	800bad6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bac8:	4b25      	ldr	r3, [pc, #148]	; (800bb60 <xTaskPriorityInherit+0xc4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	6959      	ldr	r1, [r3, #20]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bade:	4613      	mov	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4413      	add	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4a1f      	ldr	r2, [pc, #124]	; (800bb64 <xTaskPriorityInherit+0xc8>)
 800bae8:	4413      	add	r3, r2
 800baea:	4299      	cmp	r1, r3
 800baec:	d122      	bne.n	800bb34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fe f980 	bl	8009df8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800baf8:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <xTaskPriorityInherit+0xc4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb06:	4b18      	ldr	r3, [pc, #96]	; (800bb68 <xTaskPriorityInherit+0xcc>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d903      	bls.n	800bb16 <xTaskPriorityInherit+0x7a>
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb12:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <xTaskPriorityInherit+0xcc>)
 800bb14:	6013      	str	r3, [r2, #0]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4a10      	ldr	r2, [pc, #64]	; (800bb64 <xTaskPriorityInherit+0xc8>)
 800bb24:	441a      	add	r2, r3
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	f7fe f906 	bl	8009d3e <vListInsertEnd>
 800bb32:	e004      	b.n	800bb3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <xTaskPriorityInherit+0xc4>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	e008      	b.n	800bb56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb48:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <xTaskPriorityInherit+0xc4>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d201      	bcs.n	800bb56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb52:	2301      	movs	r3, #1
 800bb54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb56:	68fb      	ldr	r3, [r7, #12]
	}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	200008fc 	.word	0x200008fc
 800bb64:	20000900 	.word	0x20000900
 800bb68:	20000dd8 	.word	0x20000dd8

0800bb6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d054      	beq.n	800bc2c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb82:	4b2d      	ldr	r3, [pc, #180]	; (800bc38 <xTaskPriorityDisinherit+0xcc>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d009      	beq.n	800bba0 <xTaskPriorityDisinherit+0x34>
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	e7fe      	b.n	800bb9e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d109      	bne.n	800bbbc <xTaskPriorityDisinherit+0x50>
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	60bb      	str	r3, [r7, #8]
 800bbba:	e7fe      	b.n	800bbba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc0:	1e5a      	subs	r2, r3, #1
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d02c      	beq.n	800bc2c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d128      	bne.n	800bc2c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe f90a 	bl	8009df8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfc:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <xTaskPriorityDisinherit+0xd0>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d903      	bls.n	800bc0c <xTaskPriorityDisinherit+0xa0>
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	4a0c      	ldr	r2, [pc, #48]	; (800bc3c <xTaskPriorityDisinherit+0xd0>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4613      	mov	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <xTaskPriorityDisinherit+0xd4>)
 800bc1a:	441a      	add	r2, r3
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fe f88b 	bl	8009d3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc2c:	697b      	ldr	r3, [r7, #20]
	}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	200008fc 	.word	0x200008fc
 800bc3c:	20000dd8 	.word	0x20000dd8
 800bc40:	20000900 	.word	0x20000900

0800bc44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc52:	2301      	movs	r3, #1
 800bc54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d068      	beq.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e7fe      	b.n	800bc76 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d902      	bls.n	800bc88 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	e002      	b.n	800bc8e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d04a      	beq.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d145      	bne.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bca2:	4b25      	ldr	r3, [pc, #148]	; (800bd38 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d109      	bne.n	800bcc0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	e7fe      	b.n	800bcbe <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	69fa      	ldr	r2, [r7, #28]
 800bcca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	db04      	blt.n	800bcde <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	6959      	ldr	r1, [r3, #20]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4a13      	ldr	r2, [pc, #76]	; (800bd3c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bcee:	4413      	add	r3, r2
 800bcf0:	4299      	cmp	r1, r3
 800bcf2:	d11c      	bne.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fe f87d 	bl	8009df8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd02:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d903      	bls.n	800bd12 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0e:	4a0c      	ldr	r2, [pc, #48]	; (800bd40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4a07      	ldr	r2, [pc, #28]	; (800bd3c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bd20:	441a      	add	r2, r3
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fe f808 	bl	8009d3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd2e:	bf00      	nop
 800bd30:	3720      	adds	r7, #32
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	200008fc 	.word	0x200008fc
 800bd3c:	20000900 	.word	0x20000900
 800bd40:	20000dd8 	.word	0x20000dd8

0800bd44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd50:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd56:	3201      	adds	r2, #1
 800bd58:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bd5a:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
	}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	200008fc 	.word	0x200008fc

0800bd6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd76:	4b21      	ldr	r3, [pc, #132]	; (800bdfc <prvAddCurrentTaskToDelayedList+0x90>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd7c:	4b20      	ldr	r3, [pc, #128]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3304      	adds	r3, #4
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fe f838 	bl	8009df8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8e:	d10a      	bne.n	800bda6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd96:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4819      	ldr	r0, [pc, #100]	; (800be04 <prvAddCurrentTaskToDelayedList+0x98>)
 800bda0:	f7fd ffcd 	bl	8009d3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bda4:	e026      	b.n	800bdf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4413      	add	r3, r2
 800bdac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdae:	4b14      	ldr	r3, [pc, #80]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d209      	bcs.n	800bdd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdbe:	4b12      	ldr	r3, [pc, #72]	; (800be08 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f7fd ffdb 	bl	8009d86 <vListInsert>
}
 800bdd0:	e010      	b.n	800bdf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdd2:	4b0e      	ldr	r3, [pc, #56]	; (800be0c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4619      	mov	r1, r3
 800bdde:	4610      	mov	r0, r2
 800bde0:	f7fd ffd1 	bl	8009d86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bde4:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d202      	bcs.n	800bdf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdee:	4a08      	ldr	r2, [pc, #32]	; (800be10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	6013      	str	r3, [r2, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20000dd4 	.word	0x20000dd4
 800be00:	200008fc 	.word	0x200008fc
 800be04:	20000dbc 	.word	0x20000dbc
 800be08:	20000d8c 	.word	0x20000d8c
 800be0c:	20000d88 	.word	0x20000d88
 800be10:	20000df0 	.word	0x20000df0

0800be14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08a      	sub	sp, #40	; 0x28
 800be18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be1a:	2300      	movs	r3, #0
 800be1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be1e:	f000 faff 	bl	800c420 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be22:	4b1c      	ldr	r3, [pc, #112]	; (800be94 <xTimerCreateTimerTask+0x80>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d021      	beq.n	800be6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be2e:	2300      	movs	r3, #0
 800be30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be32:	1d3a      	adds	r2, r7, #4
 800be34:	f107 0108 	add.w	r1, r7, #8
 800be38:	f107 030c 	add.w	r3, r7, #12
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fd ff37 	bl	8009cb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	9202      	str	r2, [sp, #8]
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	2302      	movs	r3, #2
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	2300      	movs	r3, #0
 800be52:	460a      	mov	r2, r1
 800be54:	4910      	ldr	r1, [pc, #64]	; (800be98 <xTimerCreateTimerTask+0x84>)
 800be56:	4811      	ldr	r0, [pc, #68]	; (800be9c <xTimerCreateTimerTask+0x88>)
 800be58:	f7fe ff5e 	bl	800ad18 <xTaskCreateStatic>
 800be5c:	4602      	mov	r2, r0
 800be5e:	4b10      	ldr	r3, [pc, #64]	; (800bea0 <xTimerCreateTimerTask+0x8c>)
 800be60:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be62:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <xTimerCreateTimerTask+0x8c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be6a:	2301      	movs	r3, #1
 800be6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d109      	bne.n	800be88 <xTimerCreateTimerTask+0x74>
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	e7fe      	b.n	800be86 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800be88:	697b      	ldr	r3, [r7, #20]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	20000e2c 	.word	0x20000e2c
 800be98:	0800e1b0 	.word	0x0800e1b0
 800be9c:	0800bfd5 	.word	0x0800bfd5
 800bea0:	20000e30 	.word	0x20000e30

0800bea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08a      	sub	sp, #40	; 0x28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d109      	bne.n	800bed0 <xTimerGenericCommand+0x2c>
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	623b      	str	r3, [r7, #32]
 800bece:	e7fe      	b.n	800bece <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bed0:	4b19      	ldr	r3, [pc, #100]	; (800bf38 <xTimerGenericCommand+0x94>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d02a      	beq.n	800bf2e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2b05      	cmp	r3, #5
 800bee8:	dc18      	bgt.n	800bf1c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800beea:	f7ff fdb9 	bl	800ba60 <xTaskGetSchedulerState>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d109      	bne.n	800bf08 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bef4:	4b10      	ldr	r3, [pc, #64]	; (800bf38 <xTimerGenericCommand+0x94>)
 800bef6:	6818      	ldr	r0, [r3, #0]
 800bef8:	f107 0110 	add.w	r1, r7, #16
 800befc:	2300      	movs	r3, #0
 800befe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf00:	f7fe f996 	bl	800a230 <xQueueGenericSend>
 800bf04:	6278      	str	r0, [r7, #36]	; 0x24
 800bf06:	e012      	b.n	800bf2e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf08:	4b0b      	ldr	r3, [pc, #44]	; (800bf38 <xTimerGenericCommand+0x94>)
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	f107 0110 	add.w	r1, r7, #16
 800bf10:	2300      	movs	r3, #0
 800bf12:	2200      	movs	r2, #0
 800bf14:	f7fe f98c 	bl	800a230 <xQueueGenericSend>
 800bf18:	6278      	str	r0, [r7, #36]	; 0x24
 800bf1a:	e008      	b.n	800bf2e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <xTimerGenericCommand+0x94>)
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	f107 0110 	add.w	r1, r7, #16
 800bf24:	2300      	movs	r3, #0
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	f7fe fa7c 	bl	800a424 <xQueueGenericSendFromISR>
 800bf2c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3728      	adds	r7, #40	; 0x28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20000e2c 	.word	0x20000e2c

0800bf3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf46:	4b22      	ldr	r3, [pc, #136]	; (800bfd0 <prvProcessExpiredTimer+0x94>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fd ff4f 	bl	8009df8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d021      	beq.n	800bfac <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	699a      	ldr	r2, [r3, #24]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	18d1      	adds	r1, r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	6978      	ldr	r0, [r7, #20]
 800bf76:	f000 f8d1 	bl	800c11c <prvInsertTimerInActiveList>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01e      	beq.n	800bfbe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf80:	2300      	movs	r3, #0
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	2300      	movs	r3, #0
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	2100      	movs	r1, #0
 800bf8a:	6978      	ldr	r0, [r7, #20]
 800bf8c:	f7ff ff8a 	bl	800bea4 <xTimerGenericCommand>
 800bf90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d112      	bne.n	800bfbe <prvProcessExpiredTimer+0x82>
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e7fe      	b.n	800bfaa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfb2:	f023 0301 	bic.w	r3, r3, #1
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	6978      	ldr	r0, [r7, #20]
 800bfc4:	4798      	blx	r3
}
 800bfc6:	bf00      	nop
 800bfc8:	3718      	adds	r7, #24
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000e24 	.word	0x20000e24

0800bfd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfdc:	f107 0308 	add.w	r3, r7, #8
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 f857 	bl	800c094 <prvGetNextExpireTime>
 800bfe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	4619      	mov	r1, r3
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f000 f803 	bl	800bff8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bff2:	f000 f8d5 	bl	800c1a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bff6:	e7f1      	b.n	800bfdc <prvTimerTask+0x8>

0800bff8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c002:	f7ff f939 	bl	800b278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c006:	f107 0308 	add.w	r3, r7, #8
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 f866 	bl	800c0dc <prvSampleTimeNow>
 800c010:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d130      	bne.n	800c07a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10a      	bne.n	800c034 <prvProcessTimerOrBlockTask+0x3c>
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	429a      	cmp	r2, r3
 800c024:	d806      	bhi.n	800c034 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c026:	f7ff f935 	bl	800b294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c02a:	68f9      	ldr	r1, [r7, #12]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7ff ff85 	bl	800bf3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c032:	e024      	b.n	800c07e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d008      	beq.n	800c04c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c03a:	4b13      	ldr	r3, [pc, #76]	; (800c088 <prvProcessTimerOrBlockTask+0x90>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <prvProcessTimerOrBlockTask+0x50>
 800c044:	2301      	movs	r3, #1
 800c046:	e000      	b.n	800c04a <prvProcessTimerOrBlockTask+0x52>
 800c048:	2300      	movs	r3, #0
 800c04a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c04c:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <prvProcessTimerOrBlockTask+0x94>)
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	4619      	mov	r1, r3
 800c05a:	f7fe fe29 	bl	800acb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c05e:	f7ff f919 	bl	800b294 <xTaskResumeAll>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10a      	bne.n	800c07e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c068:	4b09      	ldr	r3, [pc, #36]	; (800c090 <prvProcessTimerOrBlockTask+0x98>)
 800c06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	f3bf 8f6f 	isb	sy
}
 800c078:	e001      	b.n	800c07e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c07a:	f7ff f90b 	bl	800b294 <xTaskResumeAll>
}
 800c07e:	bf00      	nop
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20000e28 	.word	0x20000e28
 800c08c:	20000e2c 	.word	0x20000e2c
 800c090:	e000ed04 	.word	0xe000ed04

0800c094 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c09c:	4b0e      	ldr	r3, [pc, #56]	; (800c0d8 <prvGetNextExpireTime+0x44>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <prvGetNextExpireTime+0x16>
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	e000      	b.n	800c0ac <prvGetNextExpireTime+0x18>
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d105      	bne.n	800c0c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0b8:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <prvGetNextExpireTime+0x44>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	60fb      	str	r3, [r7, #12]
 800c0c2:	e001      	b.n	800c0c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20000e24 	.word	0x20000e24

0800c0dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0e4:	f7ff f972 	bl	800b3cc <xTaskGetTickCount>
 800c0e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0ea:	4b0b      	ldr	r3, [pc, #44]	; (800c118 <prvSampleTimeNow+0x3c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d205      	bcs.n	800c100 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c0f4:	f000 f930 	bl	800c358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c106:	4a04      	ldr	r2, [pc, #16]	; (800c118 <prvSampleTimeNow+0x3c>)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c10c:	68fb      	ldr	r3, [r7, #12]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20000e34 	.word	0x20000e34

0800c11c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
 800c128:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c12a:	2300      	movs	r3, #0
 800c12c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	68ba      	ldr	r2, [r7, #8]
 800c132:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d812      	bhi.n	800c168 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	1ad2      	subs	r2, r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d302      	bcc.n	800c156 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c150:	2301      	movs	r3, #1
 800c152:	617b      	str	r3, [r7, #20]
 800c154:	e01b      	b.n	800c18e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c156:	4b10      	ldr	r3, [pc, #64]	; (800c198 <prvInsertTimerInActiveList+0x7c>)
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f7fd fe10 	bl	8009d86 <vListInsert>
 800c166:	e012      	b.n	800c18e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d206      	bcs.n	800c17e <prvInsertTimerInActiveList+0x62>
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	429a      	cmp	r2, r3
 800c176:	d302      	bcc.n	800c17e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c178:	2301      	movs	r3, #1
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	e007      	b.n	800c18e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c17e:	4b07      	ldr	r3, [pc, #28]	; (800c19c <prvInsertTimerInActiveList+0x80>)
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3304      	adds	r3, #4
 800c186:	4619      	mov	r1, r3
 800c188:	4610      	mov	r0, r2
 800c18a:	f7fd fdfc 	bl	8009d86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c18e:	697b      	ldr	r3, [r7, #20]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	20000e28 	.word	0x20000e28
 800c19c:	20000e24 	.word	0x20000e24

0800c1a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08e      	sub	sp, #56	; 0x38
 800c1a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1a6:	e0c6      	b.n	800c336 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	da17      	bge.n	800c1de <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1ae:	1d3b      	adds	r3, r7, #4
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d109      	bne.n	800c1ce <prvProcessReceivedCommands+0x2e>
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	61fb      	str	r3, [r7, #28]
 800c1cc:	e7fe      	b.n	800c1cc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1d4:	6850      	ldr	r0, [r2, #4]
 800c1d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1d8:	6892      	ldr	r2, [r2, #8]
 800c1da:	4611      	mov	r1, r2
 800c1dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f2c0 80a7 	blt.w	800c334 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fd fdfe 	bl	8009df8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1fc:	463b      	mov	r3, r7
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff ff6c 	bl	800c0dc <prvSampleTimeNow>
 800c204:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b09      	cmp	r3, #9
 800c20a:	f200 8094 	bhi.w	800c336 <prvProcessReceivedCommands+0x196>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <prvProcessReceivedCommands+0x74>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c23d 	.word	0x0800c23d
 800c218:	0800c23d 	.word	0x0800c23d
 800c21c:	0800c23d 	.word	0x0800c23d
 800c220:	0800c2af 	.word	0x0800c2af
 800c224:	0800c2c3 	.word	0x0800c2c3
 800c228:	0800c30b 	.word	0x0800c30b
 800c22c:	0800c23d 	.word	0x0800c23d
 800c230:	0800c23d 	.word	0x0800c23d
 800c234:	0800c2af 	.word	0x0800c2af
 800c238:	0800c2c3 	.word	0x0800c2c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c242:	f043 0301 	orr.w	r3, r3, #1
 800c246:	b2da      	uxtb	r2, r3
 800c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c24e:	68ba      	ldr	r2, [r7, #8]
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	18d1      	adds	r1, r2, r3
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c25c:	f7ff ff5e 	bl	800c11c <prvInsertTimerInActiveList>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d067      	beq.n	800c336 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c26c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c274:	f003 0304 	and.w	r3, r3, #4
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d05c      	beq.n	800c336 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	441a      	add	r2, r3
 800c284:	2300      	movs	r3, #0
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	2300      	movs	r3, #0
 800c28a:	2100      	movs	r1, #0
 800c28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c28e:	f7ff fe09 	bl	800bea4 <xTimerGenericCommand>
 800c292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d14d      	bne.n	800c336 <prvProcessReceivedCommands+0x196>
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	61bb      	str	r3, [r7, #24]
 800c2ac:	e7fe      	b.n	800c2ac <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2b4:	f023 0301 	bic.w	r3, r3, #1
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c2c0:	e039      	b.n	800c336 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2c8:	f043 0301 	orr.w	r3, r3, #1
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	699b      	ldr	r3, [r3, #24]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d109      	bne.n	800c2f6 <prvProcessReceivedCommands+0x156>
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	617b      	str	r3, [r7, #20]
 800c2f4:	e7fe      	b.n	800c2f4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	699a      	ldr	r2, [r3, #24]
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	18d1      	adds	r1, r2, r3
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c304:	f7ff ff0a 	bl	800c11c <prvInsertTimerInActiveList>
					break;
 800c308:	e015      	b.n	800c336 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c310:	f003 0302 	and.w	r3, r3, #2
 800c314:	2b00      	cmp	r3, #0
 800c316:	d103      	bne.n	800c320 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c31a:	f000 fbc3 	bl	800caa4 <vPortFree>
 800c31e:	e00a      	b.n	800c336 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c326:	f023 0301 	bic.w	r3, r3, #1
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c332:	e000      	b.n	800c336 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c336:	4b07      	ldr	r3, [pc, #28]	; (800c354 <prvProcessReceivedCommands+0x1b4>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	1d39      	adds	r1, r7, #4
 800c33c:	2200      	movs	r2, #0
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fe f904 	bl	800a54c <xQueueReceive>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	f47f af2e 	bne.w	800c1a8 <prvProcessReceivedCommands+0x8>
	}
}
 800c34c:	bf00      	nop
 800c34e:	3730      	adds	r7, #48	; 0x30
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	20000e2c 	.word	0x20000e2c

0800c358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c35e:	e047      	b.n	800c3f0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c360:	4b2d      	ldr	r3, [pc, #180]	; (800c418 <prvSwitchTimerLists+0xc0>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c36a:	4b2b      	ldr	r3, [pc, #172]	; (800c418 <prvSwitchTimerLists+0xc0>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3304      	adds	r3, #4
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fd fd3d 	bl	8009df8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c38c:	f003 0304 	and.w	r3, r3, #4
 800c390:	2b00      	cmp	r3, #0
 800c392:	d02d      	beq.n	800c3f0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	699b      	ldr	r3, [r3, #24]
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	4413      	add	r3, r2
 800c39c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d90e      	bls.n	800c3c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3b2:	4b19      	ldr	r3, [pc, #100]	; (800c418 <prvSwitchTimerLists+0xc0>)
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4610      	mov	r0, r2
 800c3be:	f7fd fce2 	bl	8009d86 <vListInsert>
 800c3c2:	e015      	b.n	800c3f0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7ff fd68 	bl	800bea4 <xTimerGenericCommand>
 800c3d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d109      	bne.n	800c3f0 <prvSwitchTimerLists+0x98>
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	603b      	str	r3, [r7, #0]
 800c3ee:	e7fe      	b.n	800c3ee <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3f0:	4b09      	ldr	r3, [pc, #36]	; (800c418 <prvSwitchTimerLists+0xc0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1b2      	bne.n	800c360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3fa:	4b07      	ldr	r3, [pc, #28]	; (800c418 <prvSwitchTimerLists+0xc0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c400:	4b06      	ldr	r3, [pc, #24]	; (800c41c <prvSwitchTimerLists+0xc4>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a04      	ldr	r2, [pc, #16]	; (800c418 <prvSwitchTimerLists+0xc0>)
 800c406:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c408:	4a04      	ldr	r2, [pc, #16]	; (800c41c <prvSwitchTimerLists+0xc4>)
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	6013      	str	r3, [r2, #0]
}
 800c40e:	bf00      	nop
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20000e24 	.word	0x20000e24
 800c41c:	20000e28 	.word	0x20000e28

0800c420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c426:	f000 f961 	bl	800c6ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c42a:	4b15      	ldr	r3, [pc, #84]	; (800c480 <prvCheckForValidListAndQueue+0x60>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d120      	bne.n	800c474 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c432:	4814      	ldr	r0, [pc, #80]	; (800c484 <prvCheckForValidListAndQueue+0x64>)
 800c434:	f7fd fc56 	bl	8009ce4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c438:	4813      	ldr	r0, [pc, #76]	; (800c488 <prvCheckForValidListAndQueue+0x68>)
 800c43a:	f7fd fc53 	bl	8009ce4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <prvCheckForValidListAndQueue+0x6c>)
 800c440:	4a10      	ldr	r2, [pc, #64]	; (800c484 <prvCheckForValidListAndQueue+0x64>)
 800c442:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c444:	4b12      	ldr	r3, [pc, #72]	; (800c490 <prvCheckForValidListAndQueue+0x70>)
 800c446:	4a10      	ldr	r2, [pc, #64]	; (800c488 <prvCheckForValidListAndQueue+0x68>)
 800c448:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c44a:	2300      	movs	r3, #0
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	4b11      	ldr	r3, [pc, #68]	; (800c494 <prvCheckForValidListAndQueue+0x74>)
 800c450:	4a11      	ldr	r2, [pc, #68]	; (800c498 <prvCheckForValidListAndQueue+0x78>)
 800c452:	2110      	movs	r1, #16
 800c454:	200a      	movs	r0, #10
 800c456:	f7fd fd61 	bl	8009f1c <xQueueGenericCreateStatic>
 800c45a:	4602      	mov	r2, r0
 800c45c:	4b08      	ldr	r3, [pc, #32]	; (800c480 <prvCheckForValidListAndQueue+0x60>)
 800c45e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <prvCheckForValidListAndQueue+0x60>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d005      	beq.n	800c474 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c468:	4b05      	ldr	r3, [pc, #20]	; (800c480 <prvCheckForValidListAndQueue+0x60>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	490b      	ldr	r1, [pc, #44]	; (800c49c <prvCheckForValidListAndQueue+0x7c>)
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fe fbf6 	bl	800ac60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c474:	f000 f968 	bl	800c748 <vPortExitCritical>
}
 800c478:	bf00      	nop
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20000e2c 	.word	0x20000e2c
 800c484:	20000dfc 	.word	0x20000dfc
 800c488:	20000e10 	.word	0x20000e10
 800c48c:	20000e24 	.word	0x20000e24
 800c490:	20000e28 	.word	0x20000e28
 800c494:	20000ed8 	.word	0x20000ed8
 800c498:	20000e38 	.word	0x20000e38
 800c49c:	0800e1b8 	.word	0x0800e1b8

0800c4a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	3b04      	subs	r3, #4
 800c4b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	3b04      	subs	r3, #4
 800c4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	f023 0201 	bic.w	r2, r3, #1
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3b04      	subs	r3, #4
 800c4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4d0:	4a0c      	ldr	r2, [pc, #48]	; (800c504 <pxPortInitialiseStack+0x64>)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3b14      	subs	r3, #20
 800c4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	3b04      	subs	r3, #4
 800c4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f06f 0202 	mvn.w	r2, #2
 800c4ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3b20      	subs	r3, #32
 800c4f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	0800c509 	.word	0x0800c509

0800c508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c512:	4b11      	ldr	r3, [pc, #68]	; (800c558 <prvTaskExitError+0x50>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51a:	d009      	beq.n	800c530 <prvTaskExitError+0x28>
 800c51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	60fb      	str	r3, [r7, #12]
 800c52e:	e7fe      	b.n	800c52e <prvTaskExitError+0x26>
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c542:	bf00      	nop
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0fc      	beq.n	800c544 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c54a:	bf00      	nop
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	20000144 	.word	0x20000144
 800c55c:	00000000 	.word	0x00000000

0800c560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <pxCurrentTCBConst2>)
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	6808      	ldr	r0, [r1, #0]
 800c566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56a:	f380 8809 	msr	PSP, r0
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f380 8811 	msr	BASEPRI, r0
 800c57a:	4770      	bx	lr
 800c57c:	f3af 8000 	nop.w

0800c580 <pxCurrentTCBConst2>:
 800c580:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop

0800c588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c588:	4808      	ldr	r0, [pc, #32]	; (800c5ac <prvPortStartFirstTask+0x24>)
 800c58a:	6800      	ldr	r0, [r0, #0]
 800c58c:	6800      	ldr	r0, [r0, #0]
 800c58e:	f380 8808 	msr	MSP, r0
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8814 	msr	CONTROL, r0
 800c59a:	b662      	cpsie	i
 800c59c:	b661      	cpsie	f
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	df00      	svc	0
 800c5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed08 	.word	0xe000ed08

0800c5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5b6:	4b44      	ldr	r3, [pc, #272]	; (800c6c8 <xPortStartScheduler+0x118>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a44      	ldr	r2, [pc, #272]	; (800c6cc <xPortStartScheduler+0x11c>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d109      	bne.n	800c5d4 <xPortStartScheduler+0x24>
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	613b      	str	r3, [r7, #16]
 800c5d2:	e7fe      	b.n	800c5d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5d4:	4b3c      	ldr	r3, [pc, #240]	; (800c6c8 <xPortStartScheduler+0x118>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a3d      	ldr	r2, [pc, #244]	; (800c6d0 <xPortStartScheduler+0x120>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d109      	bne.n	800c5f2 <xPortStartScheduler+0x42>
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	e7fe      	b.n	800c5f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5f2:	4b38      	ldr	r3, [pc, #224]	; (800c6d4 <xPortStartScheduler+0x124>)
 800c5f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	22ff      	movs	r2, #255	; 0xff
 800c602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c60c:	78fb      	ldrb	r3, [r7, #3]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c614:	b2da      	uxtb	r2, r3
 800c616:	4b30      	ldr	r3, [pc, #192]	; (800c6d8 <xPortStartScheduler+0x128>)
 800c618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c61a:	4b30      	ldr	r3, [pc, #192]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c61c:	2207      	movs	r2, #7
 800c61e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c620:	e009      	b.n	800c636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c622:	4b2e      	ldr	r3, [pc, #184]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3b01      	subs	r3, #1
 800c628:	4a2c      	ldr	r2, [pc, #176]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c62a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c62c:	78fb      	ldrb	r3, [r7, #3]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	b2db      	uxtb	r3, r3
 800c634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c636:	78fb      	ldrb	r3, [r7, #3]
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c63e:	2b80      	cmp	r3, #128	; 0x80
 800c640:	d0ef      	beq.n	800c622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c642:	4b26      	ldr	r3, [pc, #152]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f1c3 0307 	rsb	r3, r3, #7
 800c64a:	2b04      	cmp	r3, #4
 800c64c:	d009      	beq.n	800c662 <xPortStartScheduler+0xb2>
 800c64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	60bb      	str	r3, [r7, #8]
 800c660:	e7fe      	b.n	800c660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c662:	4b1e      	ldr	r3, [pc, #120]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	021b      	lsls	r3, r3, #8
 800c668:	4a1c      	ldr	r2, [pc, #112]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c66a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c66c:	4b1b      	ldr	r3, [pc, #108]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c674:	4a19      	ldr	r2, [pc, #100]	; (800c6dc <xPortStartScheduler+0x12c>)
 800c676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c680:	4b17      	ldr	r3, [pc, #92]	; (800c6e0 <xPortStartScheduler+0x130>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a16      	ldr	r2, [pc, #88]	; (800c6e0 <xPortStartScheduler+0x130>)
 800c686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c68a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c68c:	4b14      	ldr	r3, [pc, #80]	; (800c6e0 <xPortStartScheduler+0x130>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a13      	ldr	r2, [pc, #76]	; (800c6e0 <xPortStartScheduler+0x130>)
 800c692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c698:	f000 f8d6 	bl	800c848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c69c:	4b11      	ldr	r3, [pc, #68]	; (800c6e4 <xPortStartScheduler+0x134>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6a2:	f000 f8f5 	bl	800c890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6a6:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a0f      	ldr	r2, [pc, #60]	; (800c6e8 <xPortStartScheduler+0x138>)
 800c6ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6b2:	f7ff ff69 	bl	800c588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6b6:	f7fe ff63 	bl	800b580 <vTaskSwitchContext>
	prvTaskExitError();
 800c6ba:	f7ff ff25 	bl	800c508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed00 	.word	0xe000ed00
 800c6cc:	410fc271 	.word	0x410fc271
 800c6d0:	410fc270 	.word	0x410fc270
 800c6d4:	e000e400 	.word	0xe000e400
 800c6d8:	20000f28 	.word	0x20000f28
 800c6dc:	20000f2c 	.word	0x20000f2c
 800c6e0:	e000ed20 	.word	0xe000ed20
 800c6e4:	20000144 	.word	0x20000144
 800c6e8:	e000ef34 	.word	0xe000ef34

0800c6ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c704:	4b0e      	ldr	r3, [pc, #56]	; (800c740 <vPortEnterCritical+0x54>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3301      	adds	r3, #1
 800c70a:	4a0d      	ldr	r2, [pc, #52]	; (800c740 <vPortEnterCritical+0x54>)
 800c70c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <vPortEnterCritical+0x54>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d10e      	bne.n	800c734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c716:	4b0b      	ldr	r3, [pc, #44]	; (800c744 <vPortEnterCritical+0x58>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d009      	beq.n	800c734 <vPortEnterCritical+0x48>
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	603b      	str	r3, [r7, #0]
 800c732:	e7fe      	b.n	800c732 <vPortEnterCritical+0x46>
	}
}
 800c734:	bf00      	nop
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	20000144 	.word	0x20000144
 800c744:	e000ed04 	.word	0xe000ed04

0800c748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c74e:	4b11      	ldr	r3, [pc, #68]	; (800c794 <vPortExitCritical+0x4c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <vPortExitCritical+0x22>
 800c756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	607b      	str	r3, [r7, #4]
 800c768:	e7fe      	b.n	800c768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c76a:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <vPortExitCritical+0x4c>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3b01      	subs	r3, #1
 800c770:	4a08      	ldr	r2, [pc, #32]	; (800c794 <vPortExitCritical+0x4c>)
 800c772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c774:	4b07      	ldr	r3, [pc, #28]	; (800c794 <vPortExitCritical+0x4c>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d104      	bne.n	800c786 <vPortExitCritical+0x3e>
 800c77c:	2300      	movs	r3, #0
 800c77e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c786:	bf00      	nop
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	20000144 	.word	0x20000144
	...

0800c7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7a0:	f3ef 8009 	mrs	r0, PSP
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	4b15      	ldr	r3, [pc, #84]	; (800c800 <pxCurrentTCBConst>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	f01e 0f10 	tst.w	lr, #16
 800c7b0:	bf08      	it	eq
 800c7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ba:	6010      	str	r0, [r2, #0]
 800c7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7c4:	f380 8811 	msr	BASEPRI, r0
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f7fe fed6 	bl	800b580 <vTaskSwitchContext>
 800c7d4:	f04f 0000 	mov.w	r0, #0
 800c7d8:	f380 8811 	msr	BASEPRI, r0
 800c7dc:	bc09      	pop	{r0, r3}
 800c7de:	6819      	ldr	r1, [r3, #0]
 800c7e0:	6808      	ldr	r0, [r1, #0]
 800c7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e6:	f01e 0f10 	tst.w	lr, #16
 800c7ea:	bf08      	it	eq
 800c7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7f0:	f380 8809 	msr	PSP, r0
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	f3af 8000 	nop.w

0800c800 <pxCurrentTCBConst>:
 800c800:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop

0800c808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c820:	f7fe fdf6 	bl	800b410 <xTaskIncrementTick>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c82a:	4b06      	ldr	r3, [pc, #24]	; (800c844 <SysTick_Handler+0x3c>)
 800c82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c830:	601a      	str	r2, [r3, #0]
 800c832:	2300      	movs	r3, #0
 800c834:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000ed04 	.word	0xe000ed04

0800c848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c848:	b480      	push	{r7}
 800c84a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c84c:	4b0b      	ldr	r3, [pc, #44]	; (800c87c <vPortSetupTimerInterrupt+0x34>)
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c852:	4b0b      	ldr	r3, [pc, #44]	; (800c880 <vPortSetupTimerInterrupt+0x38>)
 800c854:	2200      	movs	r2, #0
 800c856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c858:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <vPortSetupTimerInterrupt+0x3c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a0a      	ldr	r2, [pc, #40]	; (800c888 <vPortSetupTimerInterrupt+0x40>)
 800c85e:	fba2 2303 	umull	r2, r3, r2, r3
 800c862:	099b      	lsrs	r3, r3, #6
 800c864:	4a09      	ldr	r2, [pc, #36]	; (800c88c <vPortSetupTimerInterrupt+0x44>)
 800c866:	3b01      	subs	r3, #1
 800c868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c86a:	4b04      	ldr	r3, [pc, #16]	; (800c87c <vPortSetupTimerInterrupt+0x34>)
 800c86c:	2207      	movs	r2, #7
 800c86e:	601a      	str	r2, [r3, #0]
}
 800c870:	bf00      	nop
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	e000e010 	.word	0xe000e010
 800c880:	e000e018 	.word	0xe000e018
 800c884:	20000000 	.word	0x20000000
 800c888:	10624dd3 	.word	0x10624dd3
 800c88c:	e000e014 	.word	0xe000e014

0800c890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8a0 <vPortEnableVFP+0x10>
 800c894:	6801      	ldr	r1, [r0, #0]
 800c896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c89a:	6001      	str	r1, [r0, #0]
 800c89c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c89e:	bf00      	nop
 800c8a0:	e000ed88 	.word	0xe000ed88

0800c8a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8aa:	f3ef 8305 	mrs	r3, IPSR
 800c8ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b0f      	cmp	r3, #15
 800c8b4:	d913      	bls.n	800c8de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8b6:	4a16      	ldr	r2, [pc, #88]	; (800c910 <vPortValidateInterruptPriority+0x6c>)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8c0:	4b14      	ldr	r3, [pc, #80]	; (800c914 <vPortValidateInterruptPriority+0x70>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	7afa      	ldrb	r2, [r7, #11]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d209      	bcs.n	800c8de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	607b      	str	r3, [r7, #4]
 800c8dc:	e7fe      	b.n	800c8dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8de:	4b0e      	ldr	r3, [pc, #56]	; (800c918 <vPortValidateInterruptPriority+0x74>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8e6:	4b0d      	ldr	r3, [pc, #52]	; (800c91c <vPortValidateInterruptPriority+0x78>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d909      	bls.n	800c902 <vPortValidateInterruptPriority+0x5e>
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	603b      	str	r3, [r7, #0]
 800c900:	e7fe      	b.n	800c900 <vPortValidateInterruptPriority+0x5c>
	}
 800c902:	bf00      	nop
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	e000e3f0 	.word	0xe000e3f0
 800c914:	20000f28 	.word	0x20000f28
 800c918:	e000ed0c 	.word	0xe000ed0c
 800c91c:	20000f2c 	.word	0x20000f2c

0800c920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b08a      	sub	sp, #40	; 0x28
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c928:	2300      	movs	r3, #0
 800c92a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c92c:	f7fe fca4 	bl	800b278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c930:	4b57      	ldr	r3, [pc, #348]	; (800ca90 <pvPortMalloc+0x170>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c938:	f000 f90c 	bl	800cb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c93c:	4b55      	ldr	r3, [pc, #340]	; (800ca94 <pvPortMalloc+0x174>)
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4013      	ands	r3, r2
 800c944:	2b00      	cmp	r3, #0
 800c946:	f040 808c 	bne.w	800ca62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d01c      	beq.n	800c98a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c950:	2208      	movs	r2, #8
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4413      	add	r3, r2
 800c956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f003 0307 	and.w	r3, r3, #7
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d013      	beq.n	800c98a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f023 0307 	bic.w	r3, r3, #7
 800c968:	3308      	adds	r3, #8
 800c96a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	2b00      	cmp	r3, #0
 800c974:	d009      	beq.n	800c98a <pvPortMalloc+0x6a>
 800c976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	617b      	str	r3, [r7, #20]
 800c988:	e7fe      	b.n	800c988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d068      	beq.n	800ca62 <pvPortMalloc+0x142>
 800c990:	4b41      	ldr	r3, [pc, #260]	; (800ca98 <pvPortMalloc+0x178>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	429a      	cmp	r2, r3
 800c998:	d863      	bhi.n	800ca62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c99a:	4b40      	ldr	r3, [pc, #256]	; (800ca9c <pvPortMalloc+0x17c>)
 800c99c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c99e:	4b3f      	ldr	r3, [pc, #252]	; (800ca9c <pvPortMalloc+0x17c>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9a4:	e004      	b.n	800c9b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d903      	bls.n	800c9c2 <pvPortMalloc+0xa2>
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1f1      	bne.n	800c9a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9c2:	4b33      	ldr	r3, [pc, #204]	; (800ca90 <pvPortMalloc+0x170>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d04a      	beq.n	800ca62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9cc:	6a3b      	ldr	r3, [r7, #32]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2208      	movs	r2, #8
 800c9d2:	4413      	add	r3, r2
 800c9d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	1ad2      	subs	r2, r2, r3
 800c9e6:	2308      	movs	r3, #8
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d91e      	bls.n	800ca2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	f003 0307 	and.w	r3, r3, #7
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d009      	beq.n	800ca14 <pvPortMalloc+0xf4>
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	613b      	str	r3, [r7, #16]
 800ca12:	e7fe      	b.n	800ca12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	1ad2      	subs	r2, r2, r3
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca26:	69b8      	ldr	r0, [r7, #24]
 800ca28:	f000 f8f6 	bl	800cc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca2c:	4b1a      	ldr	r3, [pc, #104]	; (800ca98 <pvPortMalloc+0x178>)
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	4a18      	ldr	r2, [pc, #96]	; (800ca98 <pvPortMalloc+0x178>)
 800ca38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca3a:	4b17      	ldr	r3, [pc, #92]	; (800ca98 <pvPortMalloc+0x178>)
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	4b18      	ldr	r3, [pc, #96]	; (800caa0 <pvPortMalloc+0x180>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d203      	bcs.n	800ca4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca46:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <pvPortMalloc+0x178>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a15      	ldr	r2, [pc, #84]	; (800caa0 <pvPortMalloc+0x180>)
 800ca4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <pvPortMalloc+0x174>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	431a      	orrs	r2, r3
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca62:	f7fe fc17 	bl	800b294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <pvPortMalloc+0x164>
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	60fb      	str	r3, [r7, #12]
 800ca82:	e7fe      	b.n	800ca82 <pvPortMalloc+0x162>
	return pvReturn;
 800ca84:	69fb      	ldr	r3, [r7, #28]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3728      	adds	r7, #40	; 0x28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20001af0 	.word	0x20001af0
 800ca94:	20001afc 	.word	0x20001afc
 800ca98:	20001af4 	.word	0x20001af4
 800ca9c:	20001ae8 	.word	0x20001ae8
 800caa0:	20001af8 	.word	0x20001af8

0800caa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d046      	beq.n	800cb44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cab6:	2308      	movs	r3, #8
 800cab8:	425b      	negs	r3, r3
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	4413      	add	r3, r2
 800cabe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	4b20      	ldr	r3, [pc, #128]	; (800cb4c <vPortFree+0xa8>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4013      	ands	r3, r2
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d109      	bne.n	800cae6 <vPortFree+0x42>
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	e7fe      	b.n	800cae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d009      	beq.n	800cb02 <vPortFree+0x5e>
 800caee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	60bb      	str	r3, [r7, #8]
 800cb00:	e7fe      	b.n	800cb00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	4b11      	ldr	r3, [pc, #68]	; (800cb4c <vPortFree+0xa8>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d019      	beq.n	800cb44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d115      	bne.n	800cb44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	685a      	ldr	r2, [r3, #4]
 800cb1c:	4b0b      	ldr	r3, [pc, #44]	; (800cb4c <vPortFree+0xa8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	43db      	mvns	r3, r3
 800cb22:	401a      	ands	r2, r3
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb28:	f7fe fba6 	bl	800b278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <vPortFree+0xac>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4413      	add	r3, r2
 800cb36:	4a06      	ldr	r2, [pc, #24]	; (800cb50 <vPortFree+0xac>)
 800cb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb3a:	6938      	ldr	r0, [r7, #16]
 800cb3c:	f000 f86c 	bl	800cc18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cb40:	f7fe fba8 	bl	800b294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb44:	bf00      	nop
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	20001afc 	.word	0x20001afc
 800cb50:	20001af4 	.word	0x20001af4

0800cb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb60:	4b27      	ldr	r3, [pc, #156]	; (800cc00 <prvHeapInit+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00c      	beq.n	800cb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3307      	adds	r3, #7
 800cb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	1ad3      	subs	r3, r2, r3
 800cb82:	4a1f      	ldr	r2, [pc, #124]	; (800cc00 <prvHeapInit+0xac>)
 800cb84:	4413      	add	r3, r2
 800cb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb8c:	4a1d      	ldr	r2, [pc, #116]	; (800cc04 <prvHeapInit+0xb0>)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb92:	4b1c      	ldr	r3, [pc, #112]	; (800cc04 <prvHeapInit+0xb0>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cba0:	2208      	movs	r2, #8
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbb6:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <prvHeapInit+0xb4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbbe:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <prvHeapInit+0xb4>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	1ad2      	subs	r2, r2, r3
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvHeapInit+0xb4>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <prvHeapInit+0xb8>)
 800cbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <prvHeapInit+0xbc>)
 800cbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbec:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <prvHeapInit+0xc0>)
 800cbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cbf2:	601a      	str	r2, [r3, #0]
}
 800cbf4:	bf00      	nop
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr
 800cc00:	20000f30 	.word	0x20000f30
 800cc04:	20001ae8 	.word	0x20001ae8
 800cc08:	20001af0 	.word	0x20001af0
 800cc0c:	20001af8 	.word	0x20001af8
 800cc10:	20001af4 	.word	0x20001af4
 800cc14:	20001afc 	.word	0x20001afc

0800cc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc20:	4b28      	ldr	r3, [pc, #160]	; (800ccc4 <prvInsertBlockIntoFreeList+0xac>)
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e002      	b.n	800cc2c <prvInsertBlockIntoFreeList+0x14>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d8f7      	bhi.n	800cc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	4413      	add	r3, r2
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d108      	bne.n	800cc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	441a      	add	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d118      	bne.n	800cca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d00d      	beq.n	800cc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	441a      	add	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	e008      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc96:	4b0c      	ldr	r3, [pc, #48]	; (800ccc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e003      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d002      	beq.n	800ccb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccb6:	bf00      	nop
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	20001ae8 	.word	0x20001ae8
 800ccc8:	20001af0 	.word	0x20001af0

0800cccc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	4912      	ldr	r1, [pc, #72]	; (800cd1c <MX_USB_DEVICE_Init+0x50>)
 800ccd4:	4812      	ldr	r0, [pc, #72]	; (800cd20 <MX_USB_DEVICE_Init+0x54>)
 800ccd6:	f7fb faa7 	bl	8008228 <USBD_Init>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cce0:	f7f4 fd30 	bl	8001744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cce4:	490f      	ldr	r1, [pc, #60]	; (800cd24 <MX_USB_DEVICE_Init+0x58>)
 800cce6:	480e      	ldr	r0, [pc, #56]	; (800cd20 <MX_USB_DEVICE_Init+0x54>)
 800cce8:	f7fb fac9 	bl	800827e <USBD_RegisterClass>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ccf2:	f7f4 fd27 	bl	8001744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ccf6:	490c      	ldr	r1, [pc, #48]	; (800cd28 <MX_USB_DEVICE_Init+0x5c>)
 800ccf8:	4809      	ldr	r0, [pc, #36]	; (800cd20 <MX_USB_DEVICE_Init+0x54>)
 800ccfa:	f7fb f9f7 	bl	80080ec <USBD_CDC_RegisterInterface>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd04:	f7f4 fd1e 	bl	8001744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd08:	4805      	ldr	r0, [pc, #20]	; (800cd20 <MX_USB_DEVICE_Init+0x54>)
 800cd0a:	f7fb fad2 	bl	80082b2 <USBD_Start>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd14:	f7f4 fd16 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd18:	bf00      	nop
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	20000158 	.word	0x20000158
 800cd20:	2000c158 	.word	0x2000c158
 800cd24:	20000040 	.word	0x20000040
 800cd28:	20000148 	.word	0x20000148

0800cd2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd30:	2200      	movs	r2, #0
 800cd32:	4905      	ldr	r1, [pc, #20]	; (800cd48 <CDC_Init_FS+0x1c>)
 800cd34:	4805      	ldr	r0, [pc, #20]	; (800cd4c <CDC_Init_FS+0x20>)
 800cd36:	f7fb f9f0 	bl	800811a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd3a:	4905      	ldr	r1, [pc, #20]	; (800cd50 <CDC_Init_FS+0x24>)
 800cd3c:	4803      	ldr	r0, [pc, #12]	; (800cd4c <CDC_Init_FS+0x20>)
 800cd3e:	f7fb fa06 	bl	800814e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	2000c804 	.word	0x2000c804
 800cd4c:	2000c158 	.word	0x2000c158
 800cd50:	2000c41c 	.word	0x2000c41c

0800cd54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	6039      	str	r1, [r7, #0]
 800cd6e:	71fb      	strb	r3, [r7, #7]
 800cd70:	4613      	mov	r3, r2
 800cd72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd74:	79fb      	ldrb	r3, [r7, #7]
 800cd76:	2b23      	cmp	r3, #35	; 0x23
 800cd78:	d84a      	bhi.n	800ce10 <CDC_Control_FS+0xac>
 800cd7a:	a201      	add	r2, pc, #4	; (adr r2, 800cd80 <CDC_Control_FS+0x1c>)
 800cd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd80:	0800ce11 	.word	0x0800ce11
 800cd84:	0800ce11 	.word	0x0800ce11
 800cd88:	0800ce11 	.word	0x0800ce11
 800cd8c:	0800ce11 	.word	0x0800ce11
 800cd90:	0800ce11 	.word	0x0800ce11
 800cd94:	0800ce11 	.word	0x0800ce11
 800cd98:	0800ce11 	.word	0x0800ce11
 800cd9c:	0800ce11 	.word	0x0800ce11
 800cda0:	0800ce11 	.word	0x0800ce11
 800cda4:	0800ce11 	.word	0x0800ce11
 800cda8:	0800ce11 	.word	0x0800ce11
 800cdac:	0800ce11 	.word	0x0800ce11
 800cdb0:	0800ce11 	.word	0x0800ce11
 800cdb4:	0800ce11 	.word	0x0800ce11
 800cdb8:	0800ce11 	.word	0x0800ce11
 800cdbc:	0800ce11 	.word	0x0800ce11
 800cdc0:	0800ce11 	.word	0x0800ce11
 800cdc4:	0800ce11 	.word	0x0800ce11
 800cdc8:	0800ce11 	.word	0x0800ce11
 800cdcc:	0800ce11 	.word	0x0800ce11
 800cdd0:	0800ce11 	.word	0x0800ce11
 800cdd4:	0800ce11 	.word	0x0800ce11
 800cdd8:	0800ce11 	.word	0x0800ce11
 800cddc:	0800ce11 	.word	0x0800ce11
 800cde0:	0800ce11 	.word	0x0800ce11
 800cde4:	0800ce11 	.word	0x0800ce11
 800cde8:	0800ce11 	.word	0x0800ce11
 800cdec:	0800ce11 	.word	0x0800ce11
 800cdf0:	0800ce11 	.word	0x0800ce11
 800cdf4:	0800ce11 	.word	0x0800ce11
 800cdf8:	0800ce11 	.word	0x0800ce11
 800cdfc:	0800ce11 	.word	0x0800ce11
 800ce00:	0800ce11 	.word	0x0800ce11
 800ce04:	0800ce11 	.word	0x0800ce11
 800ce08:	0800ce11 	.word	0x0800ce11
 800ce0c:	0800ce11 	.word	0x0800ce11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ce10:	bf00      	nop
  }

  return (USBD_OK);
 800ce12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce2a:	6879      	ldr	r1, [r7, #4]
 800ce2c:	4805      	ldr	r0, [pc, #20]	; (800ce44 <CDC_Receive_FS+0x24>)
 800ce2e:	f7fb f98e 	bl	800814e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce32:	4804      	ldr	r0, [pc, #16]	; (800ce44 <CDC_Receive_FS+0x24>)
 800ce34:	f7fb f9ce 	bl	80081d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ce38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	2000c158 	.word	0x2000c158

0800ce48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ce58:	4b0d      	ldr	r3, [pc, #52]	; (800ce90 <CDC_Transmit_FS+0x48>)
 800ce5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e00b      	b.n	800ce86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ce6e:	887b      	ldrh	r3, [r7, #2]
 800ce70:	461a      	mov	r2, r3
 800ce72:	6879      	ldr	r1, [r7, #4]
 800ce74:	4806      	ldr	r0, [pc, #24]	; (800ce90 <CDC_Transmit_FS+0x48>)
 800ce76:	f7fb f950 	bl	800811a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ce7a:	4805      	ldr	r0, [pc, #20]	; (800ce90 <CDC_Transmit_FS+0x48>)
 800ce7c:	f7fb f97b 	bl	8008176 <USBD_CDC_TransmitPacket>
 800ce80:	4603      	mov	r3, r0
 800ce82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	2000c158 	.word	0x2000c158

0800ce94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	6039      	str	r1, [r7, #0]
 800ce9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	2212      	movs	r2, #18
 800cea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cea6:	4b03      	ldr	r3, [pc, #12]	; (800ceb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr
 800ceb4:	20000178 	.word	0x20000178

0800ceb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	6039      	str	r1, [r7, #0]
 800cec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	2204      	movs	r2, #4
 800cec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ceca:	4b03      	ldr	r3, [pc, #12]	; (800ced8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr
 800ced8:	20000198 	.word	0x20000198

0800cedc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	6039      	str	r1, [r7, #0]
 800cee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cee8:	79fb      	ldrb	r3, [r7, #7]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d105      	bne.n	800cefa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	4907      	ldr	r1, [pc, #28]	; (800cf10 <USBD_FS_ProductStrDescriptor+0x34>)
 800cef2:	4808      	ldr	r0, [pc, #32]	; (800cf14 <USBD_FS_ProductStrDescriptor+0x38>)
 800cef4:	f7fc f978 	bl	80091e8 <USBD_GetString>
 800cef8:	e004      	b.n	800cf04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	4904      	ldr	r1, [pc, #16]	; (800cf10 <USBD_FS_ProductStrDescriptor+0x34>)
 800cefe:	4805      	ldr	r0, [pc, #20]	; (800cf14 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf00:	f7fc f972 	bl	80091e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf04:	4b02      	ldr	r3, [pc, #8]	; (800cf10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	2000cbec 	.word	0x2000cbec
 800cf14:	0800e1c0 	.word	0x0800e1c0

0800cf18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	6039      	str	r1, [r7, #0]
 800cf22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	4904      	ldr	r1, [pc, #16]	; (800cf38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf28:	4804      	ldr	r0, [pc, #16]	; (800cf3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf2a:	f7fc f95d 	bl	80091e8 <USBD_GetString>
  return USBD_StrDesc;
 800cf2e:	4b02      	ldr	r3, [pc, #8]	; (800cf38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	2000cbec 	.word	0x2000cbec
 800cf3c:	0800e1d8 	.word	0x0800e1d8

0800cf40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	4603      	mov	r3, r0
 800cf48:	6039      	str	r1, [r7, #0]
 800cf4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	221a      	movs	r2, #26
 800cf50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf52:	f000 f855 	bl	800d000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf56:	4b02      	ldr	r3, [pc, #8]	; (800cf60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	2000019c 	.word	0x2000019c

0800cf64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	6039      	str	r1, [r7, #0]
 800cf6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d105      	bne.n	800cf82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf76:	683a      	ldr	r2, [r7, #0]
 800cf78:	4907      	ldr	r1, [pc, #28]	; (800cf98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf7a:	4808      	ldr	r0, [pc, #32]	; (800cf9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf7c:	f7fc f934 	bl	80091e8 <USBD_GetString>
 800cf80:	e004      	b.n	800cf8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	4904      	ldr	r1, [pc, #16]	; (800cf98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf86:	4805      	ldr	r0, [pc, #20]	; (800cf9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf88:	f7fc f92e 	bl	80091e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf8c:	4b02      	ldr	r3, [pc, #8]	; (800cf98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	2000cbec 	.word	0x2000cbec
 800cf9c:	0800e1ec 	.word	0x0800e1ec

0800cfa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	6039      	str	r1, [r7, #0]
 800cfaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d105      	bne.n	800cfbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	4907      	ldr	r1, [pc, #28]	; (800cfd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfb6:	4808      	ldr	r0, [pc, #32]	; (800cfd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfb8:	f7fc f916 	bl	80091e8 <USBD_GetString>
 800cfbc:	e004      	b.n	800cfc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfbe:	683a      	ldr	r2, [r7, #0]
 800cfc0:	4904      	ldr	r1, [pc, #16]	; (800cfd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfc2:	4805      	ldr	r0, [pc, #20]	; (800cfd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfc4:	f7fc f910 	bl	80091e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfc8:	4b02      	ldr	r3, [pc, #8]	; (800cfd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3708      	adds	r7, #8
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	2000cbec 	.word	0x2000cbec
 800cfd8:	0800e1f8 	.word	0x0800e1f8

0800cfdc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	6039      	str	r1, [r7, #0]
 800cfe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	220c      	movs	r2, #12
 800cfec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cfee:	4b03      	ldr	r3, [pc, #12]	; (800cffc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	2000018c 	.word	0x2000018c

0800d000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d006:	4b0f      	ldr	r3, [pc, #60]	; (800d044 <Get_SerialNum+0x44>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d00c:	4b0e      	ldr	r3, [pc, #56]	; (800d048 <Get_SerialNum+0x48>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d012:	4b0e      	ldr	r3, [pc, #56]	; (800d04c <Get_SerialNum+0x4c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4413      	add	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d009      	beq.n	800d03a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d026:	2208      	movs	r2, #8
 800d028:	4909      	ldr	r1, [pc, #36]	; (800d050 <Get_SerialNum+0x50>)
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f000 f814 	bl	800d058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d030:	2204      	movs	r2, #4
 800d032:	4908      	ldr	r1, [pc, #32]	; (800d054 <Get_SerialNum+0x54>)
 800d034:	68b8      	ldr	r0, [r7, #8]
 800d036:	f000 f80f 	bl	800d058 <IntToUnicode>
  }
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	1fff7590 	.word	0x1fff7590
 800d048:	1fff7594 	.word	0x1fff7594
 800d04c:	1fff7598 	.word	0x1fff7598
 800d050:	2000019e 	.word	0x2000019e
 800d054:	200001ae 	.word	0x200001ae

0800d058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d058:	b480      	push	{r7}
 800d05a:	b087      	sub	sp, #28
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	4613      	mov	r3, r2
 800d064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d06a:	2300      	movs	r3, #0
 800d06c:	75fb      	strb	r3, [r7, #23]
 800d06e:	e027      	b.n	800d0c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	0f1b      	lsrs	r3, r3, #28
 800d074:	2b09      	cmp	r3, #9
 800d076:	d80b      	bhi.n	800d090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	0f1b      	lsrs	r3, r3, #28
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	4619      	mov	r1, r3
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	440b      	add	r3, r1
 800d088:	3230      	adds	r2, #48	; 0x30
 800d08a:	b2d2      	uxtb	r2, r2
 800d08c:	701a      	strb	r2, [r3, #0]
 800d08e:	e00a      	b.n	800d0a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	0f1b      	lsrs	r3, r3, #28
 800d094:	b2da      	uxtb	r2, r3
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	005b      	lsls	r3, r3, #1
 800d09a:	4619      	mov	r1, r3
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	440b      	add	r3, r1
 800d0a0:	3237      	adds	r2, #55	; 0x37
 800d0a2:	b2d2      	uxtb	r2, r2
 800d0a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d0ba:	7dfb      	ldrb	r3, [r7, #23]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	75fb      	strb	r3, [r7, #23]
 800d0c0:	7dfa      	ldrb	r2, [r7, #23]
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d3d3      	bcc.n	800d070 <IntToUnicode+0x18>
  }
}
 800d0c8:	bf00      	nop
 800d0ca:	371c      	adds	r7, #28
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a0d      	ldr	r2, [pc, #52]	; (800d118 <HAL_PCD_MspInit+0x44>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d113      	bne.n	800d10e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d0e6:	4b0d      	ldr	r3, [pc, #52]	; (800d11c <HAL_PCD_MspInit+0x48>)
 800d0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ea:	4a0c      	ldr	r2, [pc, #48]	; (800d11c <HAL_PCD_MspInit+0x48>)
 800d0ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0f0:	6593      	str	r3, [r2, #88]	; 0x58
 800d0f2:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <HAL_PCD_MspInit+0x48>)
 800d0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800d0fe:	2200      	movs	r2, #0
 800d100:	2105      	movs	r1, #5
 800d102:	2043      	movs	r0, #67	; 0x43
 800d104:	f7f5 fa46 	bl	8002594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d108:	2043      	movs	r0, #67	; 0x43
 800d10a:	f7f5 fa5f 	bl	80025cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d10e:	bf00      	nop
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	40006800 	.word	0x40006800
 800d11c:	40021000 	.word	0x40021000

0800d120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800d134:	4619      	mov	r1, r3
 800d136:	4610      	mov	r0, r2
 800d138:	f7fb f904 	bl	8008344 <USBD_LL_SetupStage>
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	460b      	mov	r3, r1
 800d14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	015b      	lsls	r3, r3, #5
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	78fb      	ldrb	r3, [r7, #3]
 800d166:	4619      	mov	r1, r3
 800d168:	f7fb f937 	bl	80083da <USBD_LL_DataOutStage>
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d186:	78fb      	ldrb	r3, [r7, #3]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	015b      	lsls	r3, r3, #5
 800d18c:	4413      	add	r3, r2
 800d18e:	333c      	adds	r3, #60	; 0x3c
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	78fb      	ldrb	r3, [r7, #3]
 800d194:	4619      	mov	r1, r3
 800d196:	f7fb f991 	bl	80084bc <USBD_LL_DataInStage>
}
 800d19a:	bf00      	nop
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b082      	sub	sp, #8
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fb faa4 	bl	80086fe <USBD_LL_SOF>
}
 800d1b6:	bf00      	nop
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b084      	sub	sp, #16
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d001      	beq.n	800d1d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d1d2:	f7f4 fab7 	bl	8001744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d1dc:	7bfa      	ldrb	r2, [r7, #15]
 800d1de:	4611      	mov	r1, r2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fb fa51 	bl	8008688 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fb fa0a 	bl	8008606 <USBD_LL_Reset>
}
 800d1f2:	bf00      	nop
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fb fa4c 	bl	80086a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	699b      	ldr	r3, [r3, #24]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d005      	beq.n	800d224 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d218:	4b04      	ldr	r3, [pc, #16]	; (800d22c <HAL_PCD_SuspendCallback+0x30>)
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	4a03      	ldr	r2, [pc, #12]	; (800d22c <HAL_PCD_SuspendCallback+0x30>)
 800d21e:	f043 0306 	orr.w	r3, r3, #6
 800d222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	e000ed00 	.word	0xe000ed00

0800d230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	699b      	ldr	r3, [r3, #24]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d007      	beq.n	800d250 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d240:	4b08      	ldr	r3, [pc, #32]	; (800d264 <HAL_PCD_ResumeCallback+0x34>)
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	4a07      	ldr	r2, [pc, #28]	; (800d264 <HAL_PCD_ResumeCallback+0x34>)
 800d246:	f023 0306 	bic.w	r3, r3, #6
 800d24a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d24c:	f000 fab2 	bl	800d7b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d256:	4618      	mov	r0, r3
 800d258:	f7fb fa3b 	bl	80086d2 <USBD_LL_Resume>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	e000ed00 	.word	0xe000ed00

0800d268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d270:	f7f7 f826 	bl	80042c0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d274:	4a2b      	ldr	r2, [pc, #172]	; (800d324 <USBD_LL_Init+0xbc>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a29      	ldr	r2, [pc, #164]	; (800d324 <USBD_LL_Init+0xbc>)
 800d280:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d284:	4b27      	ldr	r3, [pc, #156]	; (800d324 <USBD_LL_Init+0xbc>)
 800d286:	4a28      	ldr	r2, [pc, #160]	; (800d328 <USBD_LL_Init+0xc0>)
 800d288:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d28a:	4b26      	ldr	r3, [pc, #152]	; (800d324 <USBD_LL_Init+0xbc>)
 800d28c:	2208      	movs	r2, #8
 800d28e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d290:	4b24      	ldr	r3, [pc, #144]	; (800d324 <USBD_LL_Init+0xbc>)
 800d292:	2202      	movs	r2, #2
 800d294:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d296:	4b23      	ldr	r3, [pc, #140]	; (800d324 <USBD_LL_Init+0xbc>)
 800d298:	2202      	movs	r2, #2
 800d29a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d29c:	4b21      	ldr	r3, [pc, #132]	; (800d324 <USBD_LL_Init+0xbc>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d2a2:	4b20      	ldr	r3, [pc, #128]	; (800d324 <USBD_LL_Init+0xbc>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d2a8:	4b1e      	ldr	r3, [pc, #120]	; (800d324 <USBD_LL_Init+0xbc>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d2ae:	4b1d      	ldr	r3, [pc, #116]	; (800d324 <USBD_LL_Init+0xbc>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d2b4:	481b      	ldr	r0, [pc, #108]	; (800d324 <USBD_LL_Init+0xbc>)
 800d2b6:	f7f6 f85c 	bl	8003372 <HAL_PCD_Init>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d001      	beq.n	800d2c4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d2c0:	f7f4 fa40 	bl	8001744 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2ca:	2318      	movs	r3, #24
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	f7f6 ff2a 	bl	8004128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2da:	2358      	movs	r3, #88	; 0x58
 800d2dc:	2200      	movs	r2, #0
 800d2de:	2180      	movs	r1, #128	; 0x80
 800d2e0:	f7f6 ff22 	bl	8004128 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2ea:	23c0      	movs	r3, #192	; 0xc0
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2181      	movs	r1, #129	; 0x81
 800d2f0:	f7f6 ff1a 	bl	8004128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d2fe:	2200      	movs	r2, #0
 800d300:	2101      	movs	r1, #1
 800d302:	f7f6 ff11 	bl	8004128 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d30c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d310:	2200      	movs	r2, #0
 800d312:	2182      	movs	r1, #130	; 0x82
 800d314:	f7f6 ff08 	bl	8004128 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	2000cdec 	.word	0x2000cdec
 800d328:	40006800 	.word	0x40006800

0800d32c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d334:	2300      	movs	r3, #0
 800d336:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d342:	4618      	mov	r0, r3
 800d344:	f7f6 f8fd 	bl	8003542 <HAL_PCD_Start>
 800d348:	4603      	mov	r3, r0
 800d34a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d34c:	7bbb      	ldrb	r3, [r7, #14]
 800d34e:	2b03      	cmp	r3, #3
 800d350:	d816      	bhi.n	800d380 <USBD_LL_Start+0x54>
 800d352:	a201      	add	r2, pc, #4	; (adr r2, 800d358 <USBD_LL_Start+0x2c>)
 800d354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d358:	0800d369 	.word	0x0800d369
 800d35c:	0800d36f 	.word	0x0800d36f
 800d360:	0800d375 	.word	0x0800d375
 800d364:	0800d37b 	.word	0x0800d37b
    case HAL_OK :
      usb_status = USBD_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
    break;
 800d36c:	e00b      	b.n	800d386 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d36e:	2302      	movs	r3, #2
 800d370:	73fb      	strb	r3, [r7, #15]
    break;
 800d372:	e008      	b.n	800d386 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d374:	2301      	movs	r3, #1
 800d376:	73fb      	strb	r3, [r7, #15]
    break;
 800d378:	e005      	b.n	800d386 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d37a:	2302      	movs	r3, #2
 800d37c:	73fb      	strb	r3, [r7, #15]
    break;
 800d37e:	e002      	b.n	800d386 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d380:	2302      	movs	r3, #2
 800d382:	73fb      	strb	r3, [r7, #15]
    break;
 800d384:	bf00      	nop
  }
  return usb_status;
 800d386:	7bfb      	ldrb	r3, [r7, #15]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	4608      	mov	r0, r1
 800d39a:	4611      	mov	r1, r2
 800d39c:	461a      	mov	r2, r3
 800d39e:	4603      	mov	r3, r0
 800d3a0:	70fb      	strb	r3, [r7, #3]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	70bb      	strb	r3, [r7, #2]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3b8:	78bb      	ldrb	r3, [r7, #2]
 800d3ba:	883a      	ldrh	r2, [r7, #0]
 800d3bc:	78f9      	ldrb	r1, [r7, #3]
 800d3be:	f7f6 fa55 	bl	800386c <HAL_PCD_EP_Open>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3c6:	7bbb      	ldrb	r3, [r7, #14]
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d817      	bhi.n	800d3fc <USBD_LL_OpenEP+0x6c>
 800d3cc:	a201      	add	r2, pc, #4	; (adr r2, 800d3d4 <USBD_LL_OpenEP+0x44>)
 800d3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d2:	bf00      	nop
 800d3d4:	0800d3e5 	.word	0x0800d3e5
 800d3d8:	0800d3eb 	.word	0x0800d3eb
 800d3dc:	0800d3f1 	.word	0x0800d3f1
 800d3e0:	0800d3f7 	.word	0x0800d3f7
    case HAL_OK :
      usb_status = USBD_OK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e8:	e00b      	b.n	800d402 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ee:	e008      	b.n	800d402 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f4:	e005      	b.n	800d402 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3fa:	e002      	b.n	800d402 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d3fc:	2302      	movs	r3, #2
 800d3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d400:	bf00      	nop
  }
  return usb_status;
 800d402:	7bfb      	ldrb	r3, [r7, #15]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d426:	78fa      	ldrb	r2, [r7, #3]
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7f6 fa7e 	bl	800392c <HAL_PCD_EP_Close>
 800d430:	4603      	mov	r3, r0
 800d432:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800d434:	7bbb      	ldrb	r3, [r7, #14]
 800d436:	2b03      	cmp	r3, #3
 800d438:	d816      	bhi.n	800d468 <USBD_LL_CloseEP+0x5c>
 800d43a:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <USBD_LL_CloseEP+0x34>)
 800d43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d440:	0800d451 	.word	0x0800d451
 800d444:	0800d457 	.word	0x0800d457
 800d448:	0800d45d 	.word	0x0800d45d
 800d44c:	0800d463 	.word	0x0800d463
    case HAL_OK :
      usb_status = USBD_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
    break;
 800d454:	e00b      	b.n	800d46e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d456:	2302      	movs	r3, #2
 800d458:	73fb      	strb	r3, [r7, #15]
    break;
 800d45a:	e008      	b.n	800d46e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d45c:	2301      	movs	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]
    break;
 800d460:	e005      	b.n	800d46e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d462:	2302      	movs	r3, #2
 800d464:	73fb      	strb	r3, [r7, #15]
    break;
 800d466:	e002      	b.n	800d46e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d468:	2302      	movs	r3, #2
 800d46a:	73fb      	strb	r3, [r7, #15]
    break;
 800d46c:	bf00      	nop
  }
  return usb_status;  
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	460b      	mov	r3, r1
 800d482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d492:	78fa      	ldrb	r2, [r7, #3]
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7f6 fb12 	bl	8003ac0 <HAL_PCD_EP_SetStall>
 800d49c:	4603      	mov	r3, r0
 800d49e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	d816      	bhi.n	800d4d4 <USBD_LL_StallEP+0x5c>
 800d4a6:	a201      	add	r2, pc, #4	; (adr r2, 800d4ac <USBD_LL_StallEP+0x34>)
 800d4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ac:	0800d4bd 	.word	0x0800d4bd
 800d4b0:	0800d4c3 	.word	0x0800d4c3
 800d4b4:	0800d4c9 	.word	0x0800d4c9
 800d4b8:	0800d4cf 	.word	0x0800d4cf
    case HAL_OK :
      usb_status = USBD_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c0:	e00b      	b.n	800d4da <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c6:	e008      	b.n	800d4da <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d4cc:	e005      	b.n	800d4da <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d2:	e002      	b.n	800d4da <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d8:	bf00      	nop
  }
  return usb_status;  
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4fe:	78fa      	ldrb	r2, [r7, #3]
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f7f6 fb36 	bl	8003b74 <HAL_PCD_EP_ClrStall>
 800d508:	4603      	mov	r3, r0
 800d50a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d816      	bhi.n	800d540 <USBD_LL_ClearStallEP+0x5c>
 800d512:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <USBD_LL_ClearStallEP+0x34>)
 800d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d518:	0800d529 	.word	0x0800d529
 800d51c:	0800d52f 	.word	0x0800d52f
 800d520:	0800d535 	.word	0x0800d535
 800d524:	0800d53b 	.word	0x0800d53b
    case HAL_OK :
      usb_status = USBD_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73fb      	strb	r3, [r7, #15]
    break;
 800d52c:	e00b      	b.n	800d546 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d52e:	2302      	movs	r3, #2
 800d530:	73fb      	strb	r3, [r7, #15]
    break;
 800d532:	e008      	b.n	800d546 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d534:	2301      	movs	r3, #1
 800d536:	73fb      	strb	r3, [r7, #15]
    break;
 800d538:	e005      	b.n	800d546 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d53a:	2302      	movs	r3, #2
 800d53c:	73fb      	strb	r3, [r7, #15]
    break;
 800d53e:	e002      	b.n	800d546 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d540:	2302      	movs	r3, #2
 800d542:	73fb      	strb	r3, [r7, #15]
    break;
 800d544:	bf00      	nop
  }
  return usb_status; 
 800d546:	7bfb      	ldrb	r3, [r7, #15]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d562:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	da08      	bge.n	800d57e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d56c:	78fb      	ldrb	r3, [r7, #3]
 800d56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	015b      	lsls	r3, r3, #5
 800d576:	4413      	add	r3, r2
 800d578:	332a      	adds	r3, #42	; 0x2a
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	e008      	b.n	800d590 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d57e:	78fb      	ldrb	r3, [r7, #3]
 800d580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	015b      	lsls	r3, r3, #5
 800d588:	4413      	add	r3, r2
 800d58a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d58e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5b6:	78fa      	ldrb	r2, [r7, #3]
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7f6 f931 	bl	8003822 <HAL_PCD_SetAddress>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d5c4:	7bbb      	ldrb	r3, [r7, #14]
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	d816      	bhi.n	800d5f8 <USBD_LL_SetUSBAddress+0x5c>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <USBD_LL_SetUSBAddress+0x34>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d5e1 	.word	0x0800d5e1
 800d5d4:	0800d5e7 	.word	0x0800d5e7
 800d5d8:	0800d5ed 	.word	0x0800d5ed
 800d5dc:	0800d5f3 	.word	0x0800d5f3
    case HAL_OK :
      usb_status = USBD_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e4:	e00b      	b.n	800d5fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ea:	e008      	b.n	800d5fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f0:	e005      	b.n	800d5fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f6:	e002      	b.n	800d5fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d5f8:	2302      	movs	r3, #2
 800d5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fc:	bf00      	nop
  }
  return usb_status;  
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	607a      	str	r2, [r7, #4]
 800d612:	461a      	mov	r2, r3
 800d614:	460b      	mov	r3, r1
 800d616:	72fb      	strb	r3, [r7, #11]
 800d618:	4613      	mov	r3, r2
 800d61a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d62a:	893b      	ldrh	r3, [r7, #8]
 800d62c:	7af9      	ldrb	r1, [r7, #11]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	f7f6 fa0d 	bl	8003a4e <HAL_PCD_EP_Transmit>
 800d634:	4603      	mov	r3, r0
 800d636:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d638:	7dbb      	ldrb	r3, [r7, #22]
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d816      	bhi.n	800d66c <USBD_LL_Transmit+0x64>
 800d63e:	a201      	add	r2, pc, #4	; (adr r2, 800d644 <USBD_LL_Transmit+0x3c>)
 800d640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d644:	0800d655 	.word	0x0800d655
 800d648:	0800d65b 	.word	0x0800d65b
 800d64c:	0800d661 	.word	0x0800d661
 800d650:	0800d667 	.word	0x0800d667
    case HAL_OK :
      usb_status = USBD_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	75fb      	strb	r3, [r7, #23]
    break;
 800d658:	e00b      	b.n	800d672 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d65a:	2302      	movs	r3, #2
 800d65c:	75fb      	strb	r3, [r7, #23]
    break;
 800d65e:	e008      	b.n	800d672 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d660:	2301      	movs	r3, #1
 800d662:	75fb      	strb	r3, [r7, #23]
    break;
 800d664:	e005      	b.n	800d672 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d666:	2302      	movs	r3, #2
 800d668:	75fb      	strb	r3, [r7, #23]
    break;
 800d66a:	e002      	b.n	800d672 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d66c:	2302      	movs	r3, #2
 800d66e:	75fb      	strb	r3, [r7, #23]
    break;
 800d670:	bf00      	nop
  }
  return usb_status;    
 800d672:	7dfb      	ldrb	r3, [r7, #23]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	607a      	str	r2, [r7, #4]
 800d686:	461a      	mov	r2, r3
 800d688:	460b      	mov	r3, r1
 800d68a:	72fb      	strb	r3, [r7, #11]
 800d68c:	4613      	mov	r3, r2
 800d68e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d69e:	893b      	ldrh	r3, [r7, #8]
 800d6a0:	7af9      	ldrb	r1, [r7, #11]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	f7f6 f984 	bl	80039b0 <HAL_PCD_EP_Receive>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d6ac:	7dbb      	ldrb	r3, [r7, #22]
 800d6ae:	2b03      	cmp	r3, #3
 800d6b0:	d816      	bhi.n	800d6e0 <USBD_LL_PrepareReceive+0x64>
 800d6b2:	a201      	add	r2, pc, #4	; (adr r2, 800d6b8 <USBD_LL_PrepareReceive+0x3c>)
 800d6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b8:	0800d6c9 	.word	0x0800d6c9
 800d6bc:	0800d6cf 	.word	0x0800d6cf
 800d6c0:	0800d6d5 	.word	0x0800d6d5
 800d6c4:	0800d6db 	.word	0x0800d6db
    case HAL_OK :
      usb_status = USBD_OK;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	75fb      	strb	r3, [r7, #23]
    break;
 800d6cc:	e00b      	b.n	800d6e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	75fb      	strb	r3, [r7, #23]
    break;
 800d6d2:	e008      	b.n	800d6e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	75fb      	strb	r3, [r7, #23]
    break;
 800d6d8:	e005      	b.n	800d6e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6da:	2302      	movs	r3, #2
 800d6dc:	75fb      	strb	r3, [r7, #23]
    break;
 800d6de:	e002      	b.n	800d6e6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6e4:	bf00      	nop
  }
  return usb_status; 
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d702:	78fa      	ldrb	r2, [r7, #3]
 800d704:	4611      	mov	r1, r2
 800d706:	4618      	mov	r0, r3
 800d708:	f7f6 f98c 	bl	8003a24 <HAL_PCD_EP_GetRxCount>
 800d70c:	4603      	mov	r3, r0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
	...

0800d718 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	460b      	mov	r3, r1
 800d722:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d724:	78fb      	ldrb	r3, [r7, #3]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d002      	beq.n	800d730 <HAL_PCDEx_LPM_Callback+0x18>
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d013      	beq.n	800d756 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800d72e:	e023      	b.n	800d778 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d738:	f000 f83c 	bl	800d7b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d73c:	4b10      	ldr	r3, [pc, #64]	; (800d780 <HAL_PCDEx_LPM_Callback+0x68>)
 800d73e:	691b      	ldr	r3, [r3, #16]
 800d740:	4a0f      	ldr	r2, [pc, #60]	; (800d780 <HAL_PCDEx_LPM_Callback+0x68>)
 800d742:	f023 0306 	bic.w	r3, r3, #6
 800d746:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fa ffbf 	bl	80086d2 <USBD_LL_Resume>
    break;
 800d754:	e010      	b.n	800d778 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fa ffa3 	bl	80086a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d76a:	4b05      	ldr	r3, [pc, #20]	; (800d780 <HAL_PCDEx_LPM_Callback+0x68>)
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	4a04      	ldr	r2, [pc, #16]	; (800d780 <HAL_PCDEx_LPM_Callback+0x68>)
 800d770:	f043 0306 	orr.w	r3, r3, #6
 800d774:	6113      	str	r3, [r2, #16]
    break;   
 800d776:	bf00      	nop
}
 800d778:	bf00      	nop
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	e000ed00 	.word	0xe000ed00

0800d784 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d78c:	4b03      	ldr	r3, [pc, #12]	; (800d79c <USBD_static_malloc+0x18>)
}
 800d78e:	4618      	mov	r0, r3
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop
 800d79c:	20001b00 	.word	0x20001b00

0800d7a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]

}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d7b8:	f7f3 fe06 	bl	80013c8 <SystemClock_Config>
}
 800d7bc:	bf00      	nop
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <__errno>:
 800d7c0:	4b01      	ldr	r3, [pc, #4]	; (800d7c8 <__errno+0x8>)
 800d7c2:	6818      	ldr	r0, [r3, #0]
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	200001b8 	.word	0x200001b8

0800d7cc <__libc_init_array>:
 800d7cc:	b570      	push	{r4, r5, r6, lr}
 800d7ce:	4e0d      	ldr	r6, [pc, #52]	; (800d804 <__libc_init_array+0x38>)
 800d7d0:	4c0d      	ldr	r4, [pc, #52]	; (800d808 <__libc_init_array+0x3c>)
 800d7d2:	1ba4      	subs	r4, r4, r6
 800d7d4:	10a4      	asrs	r4, r4, #2
 800d7d6:	2500      	movs	r5, #0
 800d7d8:	42a5      	cmp	r5, r4
 800d7da:	d109      	bne.n	800d7f0 <__libc_init_array+0x24>
 800d7dc:	4e0b      	ldr	r6, [pc, #44]	; (800d80c <__libc_init_array+0x40>)
 800d7de:	4c0c      	ldr	r4, [pc, #48]	; (800d810 <__libc_init_array+0x44>)
 800d7e0:	f000 fc42 	bl	800e068 <_init>
 800d7e4:	1ba4      	subs	r4, r4, r6
 800d7e6:	10a4      	asrs	r4, r4, #2
 800d7e8:	2500      	movs	r5, #0
 800d7ea:	42a5      	cmp	r5, r4
 800d7ec:	d105      	bne.n	800d7fa <__libc_init_array+0x2e>
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}
 800d7f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7f4:	4798      	blx	r3
 800d7f6:	3501      	adds	r5, #1
 800d7f8:	e7ee      	b.n	800d7d8 <__libc_init_array+0xc>
 800d7fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7fe:	4798      	blx	r3
 800d800:	3501      	adds	r5, #1
 800d802:	e7f2      	b.n	800d7ea <__libc_init_array+0x1e>
 800d804:	0800e338 	.word	0x0800e338
 800d808:	0800e338 	.word	0x0800e338
 800d80c:	0800e338 	.word	0x0800e338
 800d810:	0800e33c 	.word	0x0800e33c

0800d814 <memcpy>:
 800d814:	b510      	push	{r4, lr}
 800d816:	1e43      	subs	r3, r0, #1
 800d818:	440a      	add	r2, r1
 800d81a:	4291      	cmp	r1, r2
 800d81c:	d100      	bne.n	800d820 <memcpy+0xc>
 800d81e:	bd10      	pop	{r4, pc}
 800d820:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d824:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d828:	e7f7      	b.n	800d81a <memcpy+0x6>

0800d82a <memset>:
 800d82a:	4402      	add	r2, r0
 800d82c:	4603      	mov	r3, r0
 800d82e:	4293      	cmp	r3, r2
 800d830:	d100      	bne.n	800d834 <memset+0xa>
 800d832:	4770      	bx	lr
 800d834:	f803 1b01 	strb.w	r1, [r3], #1
 800d838:	e7f9      	b.n	800d82e <memset+0x4>

0800d83a <_vsniprintf_r>:
 800d83a:	b530      	push	{r4, r5, lr}
 800d83c:	1e14      	subs	r4, r2, #0
 800d83e:	4605      	mov	r5, r0
 800d840:	b09b      	sub	sp, #108	; 0x6c
 800d842:	4618      	mov	r0, r3
 800d844:	da05      	bge.n	800d852 <_vsniprintf_r+0x18>
 800d846:	238b      	movs	r3, #139	; 0x8b
 800d848:	602b      	str	r3, [r5, #0]
 800d84a:	f04f 30ff 	mov.w	r0, #4294967295
 800d84e:	b01b      	add	sp, #108	; 0x6c
 800d850:	bd30      	pop	{r4, r5, pc}
 800d852:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d856:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d85a:	bf14      	ite	ne
 800d85c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d860:	4623      	moveq	r3, r4
 800d862:	9302      	str	r3, [sp, #8]
 800d864:	9305      	str	r3, [sp, #20]
 800d866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d86a:	9100      	str	r1, [sp, #0]
 800d86c:	9104      	str	r1, [sp, #16]
 800d86e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d872:	4602      	mov	r2, r0
 800d874:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d876:	4669      	mov	r1, sp
 800d878:	4628      	mov	r0, r5
 800d87a:	f000 f873 	bl	800d964 <_svfiprintf_r>
 800d87e:	1c43      	adds	r3, r0, #1
 800d880:	bfbc      	itt	lt
 800d882:	238b      	movlt	r3, #139	; 0x8b
 800d884:	602b      	strlt	r3, [r5, #0]
 800d886:	2c00      	cmp	r4, #0
 800d888:	d0e1      	beq.n	800d84e <_vsniprintf_r+0x14>
 800d88a:	9b00      	ldr	r3, [sp, #0]
 800d88c:	2200      	movs	r2, #0
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	e7dd      	b.n	800d84e <_vsniprintf_r+0x14>
	...

0800d894 <vsniprintf>:
 800d894:	b507      	push	{r0, r1, r2, lr}
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	4613      	mov	r3, r2
 800d89a:	460a      	mov	r2, r1
 800d89c:	4601      	mov	r1, r0
 800d89e:	4803      	ldr	r0, [pc, #12]	; (800d8ac <vsniprintf+0x18>)
 800d8a0:	6800      	ldr	r0, [r0, #0]
 800d8a2:	f7ff ffca 	bl	800d83a <_vsniprintf_r>
 800d8a6:	b003      	add	sp, #12
 800d8a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8ac:	200001b8 	.word	0x200001b8

0800d8b0 <__ssputs_r>:
 800d8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b4:	688e      	ldr	r6, [r1, #8]
 800d8b6:	429e      	cmp	r6, r3
 800d8b8:	4682      	mov	sl, r0
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	4690      	mov	r8, r2
 800d8be:	4699      	mov	r9, r3
 800d8c0:	d837      	bhi.n	800d932 <__ssputs_r+0x82>
 800d8c2:	898a      	ldrh	r2, [r1, #12]
 800d8c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8c8:	d031      	beq.n	800d92e <__ssputs_r+0x7e>
 800d8ca:	6825      	ldr	r5, [r4, #0]
 800d8cc:	6909      	ldr	r1, [r1, #16]
 800d8ce:	1a6f      	subs	r7, r5, r1
 800d8d0:	6965      	ldr	r5, [r4, #20]
 800d8d2:	2302      	movs	r3, #2
 800d8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d8dc:	f109 0301 	add.w	r3, r9, #1
 800d8e0:	443b      	add	r3, r7
 800d8e2:	429d      	cmp	r5, r3
 800d8e4:	bf38      	it	cc
 800d8e6:	461d      	movcc	r5, r3
 800d8e8:	0553      	lsls	r3, r2, #21
 800d8ea:	d530      	bpl.n	800d94e <__ssputs_r+0x9e>
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	f000 fb21 	bl	800df34 <_malloc_r>
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	b950      	cbnz	r0, 800d90c <__ssputs_r+0x5c>
 800d8f6:	230c      	movs	r3, #12
 800d8f8:	f8ca 3000 	str.w	r3, [sl]
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d902:	81a3      	strh	r3, [r4, #12]
 800d904:	f04f 30ff 	mov.w	r0, #4294967295
 800d908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90c:	463a      	mov	r2, r7
 800d90e:	6921      	ldr	r1, [r4, #16]
 800d910:	f7ff ff80 	bl	800d814 <memcpy>
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	6126      	str	r6, [r4, #16]
 800d922:	6165      	str	r5, [r4, #20]
 800d924:	443e      	add	r6, r7
 800d926:	1bed      	subs	r5, r5, r7
 800d928:	6026      	str	r6, [r4, #0]
 800d92a:	60a5      	str	r5, [r4, #8]
 800d92c:	464e      	mov	r6, r9
 800d92e:	454e      	cmp	r6, r9
 800d930:	d900      	bls.n	800d934 <__ssputs_r+0x84>
 800d932:	464e      	mov	r6, r9
 800d934:	4632      	mov	r2, r6
 800d936:	4641      	mov	r1, r8
 800d938:	6820      	ldr	r0, [r4, #0]
 800d93a:	f000 fa93 	bl	800de64 <memmove>
 800d93e:	68a3      	ldr	r3, [r4, #8]
 800d940:	1b9b      	subs	r3, r3, r6
 800d942:	60a3      	str	r3, [r4, #8]
 800d944:	6823      	ldr	r3, [r4, #0]
 800d946:	441e      	add	r6, r3
 800d948:	6026      	str	r6, [r4, #0]
 800d94a:	2000      	movs	r0, #0
 800d94c:	e7dc      	b.n	800d908 <__ssputs_r+0x58>
 800d94e:	462a      	mov	r2, r5
 800d950:	f000 fb4a 	bl	800dfe8 <_realloc_r>
 800d954:	4606      	mov	r6, r0
 800d956:	2800      	cmp	r0, #0
 800d958:	d1e2      	bne.n	800d920 <__ssputs_r+0x70>
 800d95a:	6921      	ldr	r1, [r4, #16]
 800d95c:	4650      	mov	r0, sl
 800d95e:	f000 fa9b 	bl	800de98 <_free_r>
 800d962:	e7c8      	b.n	800d8f6 <__ssputs_r+0x46>

0800d964 <_svfiprintf_r>:
 800d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	461d      	mov	r5, r3
 800d96a:	898b      	ldrh	r3, [r1, #12]
 800d96c:	061f      	lsls	r7, r3, #24
 800d96e:	b09d      	sub	sp, #116	; 0x74
 800d970:	4680      	mov	r8, r0
 800d972:	460c      	mov	r4, r1
 800d974:	4616      	mov	r6, r2
 800d976:	d50f      	bpl.n	800d998 <_svfiprintf_r+0x34>
 800d978:	690b      	ldr	r3, [r1, #16]
 800d97a:	b96b      	cbnz	r3, 800d998 <_svfiprintf_r+0x34>
 800d97c:	2140      	movs	r1, #64	; 0x40
 800d97e:	f000 fad9 	bl	800df34 <_malloc_r>
 800d982:	6020      	str	r0, [r4, #0]
 800d984:	6120      	str	r0, [r4, #16]
 800d986:	b928      	cbnz	r0, 800d994 <_svfiprintf_r+0x30>
 800d988:	230c      	movs	r3, #12
 800d98a:	f8c8 3000 	str.w	r3, [r8]
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	e0c8      	b.n	800db26 <_svfiprintf_r+0x1c2>
 800d994:	2340      	movs	r3, #64	; 0x40
 800d996:	6163      	str	r3, [r4, #20]
 800d998:	2300      	movs	r3, #0
 800d99a:	9309      	str	r3, [sp, #36]	; 0x24
 800d99c:	2320      	movs	r3, #32
 800d99e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9a2:	2330      	movs	r3, #48	; 0x30
 800d9a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9a8:	9503      	str	r5, [sp, #12]
 800d9aa:	f04f 0b01 	mov.w	fp, #1
 800d9ae:	4637      	mov	r7, r6
 800d9b0:	463d      	mov	r5, r7
 800d9b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d9b6:	b10b      	cbz	r3, 800d9bc <_svfiprintf_r+0x58>
 800d9b8:	2b25      	cmp	r3, #37	; 0x25
 800d9ba:	d13e      	bne.n	800da3a <_svfiprintf_r+0xd6>
 800d9bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800d9c0:	d00b      	beq.n	800d9da <_svfiprintf_r+0x76>
 800d9c2:	4653      	mov	r3, sl
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	4640      	mov	r0, r8
 800d9ca:	f7ff ff71 	bl	800d8b0 <__ssputs_r>
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	f000 80a4 	beq.w	800db1c <_svfiprintf_r+0x1b8>
 800d9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d6:	4453      	add	r3, sl
 800d9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d9da:	783b      	ldrb	r3, [r7, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 809d 	beq.w	800db1c <_svfiprintf_r+0x1b8>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9ec:	9304      	str	r3, [sp, #16]
 800d9ee:	9307      	str	r3, [sp, #28]
 800d9f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9f4:	931a      	str	r3, [sp, #104]	; 0x68
 800d9f6:	462f      	mov	r7, r5
 800d9f8:	2205      	movs	r2, #5
 800d9fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d9fe:	4850      	ldr	r0, [pc, #320]	; (800db40 <_svfiprintf_r+0x1dc>)
 800da00:	f7f2 fbee 	bl	80001e0 <memchr>
 800da04:	9b04      	ldr	r3, [sp, #16]
 800da06:	b9d0      	cbnz	r0, 800da3e <_svfiprintf_r+0xda>
 800da08:	06d9      	lsls	r1, r3, #27
 800da0a:	bf44      	itt	mi
 800da0c:	2220      	movmi	r2, #32
 800da0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da12:	071a      	lsls	r2, r3, #28
 800da14:	bf44      	itt	mi
 800da16:	222b      	movmi	r2, #43	; 0x2b
 800da18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da1c:	782a      	ldrb	r2, [r5, #0]
 800da1e:	2a2a      	cmp	r2, #42	; 0x2a
 800da20:	d015      	beq.n	800da4e <_svfiprintf_r+0xea>
 800da22:	9a07      	ldr	r2, [sp, #28]
 800da24:	462f      	mov	r7, r5
 800da26:	2000      	movs	r0, #0
 800da28:	250a      	movs	r5, #10
 800da2a:	4639      	mov	r1, r7
 800da2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da30:	3b30      	subs	r3, #48	; 0x30
 800da32:	2b09      	cmp	r3, #9
 800da34:	d94d      	bls.n	800dad2 <_svfiprintf_r+0x16e>
 800da36:	b1b8      	cbz	r0, 800da68 <_svfiprintf_r+0x104>
 800da38:	e00f      	b.n	800da5a <_svfiprintf_r+0xf6>
 800da3a:	462f      	mov	r7, r5
 800da3c:	e7b8      	b.n	800d9b0 <_svfiprintf_r+0x4c>
 800da3e:	4a40      	ldr	r2, [pc, #256]	; (800db40 <_svfiprintf_r+0x1dc>)
 800da40:	1a80      	subs	r0, r0, r2
 800da42:	fa0b f000 	lsl.w	r0, fp, r0
 800da46:	4318      	orrs	r0, r3
 800da48:	9004      	str	r0, [sp, #16]
 800da4a:	463d      	mov	r5, r7
 800da4c:	e7d3      	b.n	800d9f6 <_svfiprintf_r+0x92>
 800da4e:	9a03      	ldr	r2, [sp, #12]
 800da50:	1d11      	adds	r1, r2, #4
 800da52:	6812      	ldr	r2, [r2, #0]
 800da54:	9103      	str	r1, [sp, #12]
 800da56:	2a00      	cmp	r2, #0
 800da58:	db01      	blt.n	800da5e <_svfiprintf_r+0xfa>
 800da5a:	9207      	str	r2, [sp, #28]
 800da5c:	e004      	b.n	800da68 <_svfiprintf_r+0x104>
 800da5e:	4252      	negs	r2, r2
 800da60:	f043 0302 	orr.w	r3, r3, #2
 800da64:	9207      	str	r2, [sp, #28]
 800da66:	9304      	str	r3, [sp, #16]
 800da68:	783b      	ldrb	r3, [r7, #0]
 800da6a:	2b2e      	cmp	r3, #46	; 0x2e
 800da6c:	d10c      	bne.n	800da88 <_svfiprintf_r+0x124>
 800da6e:	787b      	ldrb	r3, [r7, #1]
 800da70:	2b2a      	cmp	r3, #42	; 0x2a
 800da72:	d133      	bne.n	800dadc <_svfiprintf_r+0x178>
 800da74:	9b03      	ldr	r3, [sp, #12]
 800da76:	1d1a      	adds	r2, r3, #4
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	9203      	str	r2, [sp, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	bfb8      	it	lt
 800da80:	f04f 33ff 	movlt.w	r3, #4294967295
 800da84:	3702      	adds	r7, #2
 800da86:	9305      	str	r3, [sp, #20]
 800da88:	4d2e      	ldr	r5, [pc, #184]	; (800db44 <_svfiprintf_r+0x1e0>)
 800da8a:	7839      	ldrb	r1, [r7, #0]
 800da8c:	2203      	movs	r2, #3
 800da8e:	4628      	mov	r0, r5
 800da90:	f7f2 fba6 	bl	80001e0 <memchr>
 800da94:	b138      	cbz	r0, 800daa6 <_svfiprintf_r+0x142>
 800da96:	2340      	movs	r3, #64	; 0x40
 800da98:	1b40      	subs	r0, r0, r5
 800da9a:	fa03 f000 	lsl.w	r0, r3, r0
 800da9e:	9b04      	ldr	r3, [sp, #16]
 800daa0:	4303      	orrs	r3, r0
 800daa2:	3701      	adds	r7, #1
 800daa4:	9304      	str	r3, [sp, #16]
 800daa6:	7839      	ldrb	r1, [r7, #0]
 800daa8:	4827      	ldr	r0, [pc, #156]	; (800db48 <_svfiprintf_r+0x1e4>)
 800daaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daae:	2206      	movs	r2, #6
 800dab0:	1c7e      	adds	r6, r7, #1
 800dab2:	f7f2 fb95 	bl	80001e0 <memchr>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d038      	beq.n	800db2c <_svfiprintf_r+0x1c8>
 800daba:	4b24      	ldr	r3, [pc, #144]	; (800db4c <_svfiprintf_r+0x1e8>)
 800dabc:	bb13      	cbnz	r3, 800db04 <_svfiprintf_r+0x1a0>
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	3307      	adds	r3, #7
 800dac2:	f023 0307 	bic.w	r3, r3, #7
 800dac6:	3308      	adds	r3, #8
 800dac8:	9303      	str	r3, [sp, #12]
 800daca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dacc:	444b      	add	r3, r9
 800dace:	9309      	str	r3, [sp, #36]	; 0x24
 800dad0:	e76d      	b.n	800d9ae <_svfiprintf_r+0x4a>
 800dad2:	fb05 3202 	mla	r2, r5, r2, r3
 800dad6:	2001      	movs	r0, #1
 800dad8:	460f      	mov	r7, r1
 800dada:	e7a6      	b.n	800da2a <_svfiprintf_r+0xc6>
 800dadc:	2300      	movs	r3, #0
 800dade:	3701      	adds	r7, #1
 800dae0:	9305      	str	r3, [sp, #20]
 800dae2:	4619      	mov	r1, r3
 800dae4:	250a      	movs	r5, #10
 800dae6:	4638      	mov	r0, r7
 800dae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daec:	3a30      	subs	r2, #48	; 0x30
 800daee:	2a09      	cmp	r2, #9
 800daf0:	d903      	bls.n	800dafa <_svfiprintf_r+0x196>
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0c8      	beq.n	800da88 <_svfiprintf_r+0x124>
 800daf6:	9105      	str	r1, [sp, #20]
 800daf8:	e7c6      	b.n	800da88 <_svfiprintf_r+0x124>
 800dafa:	fb05 2101 	mla	r1, r5, r1, r2
 800dafe:	2301      	movs	r3, #1
 800db00:	4607      	mov	r7, r0
 800db02:	e7f0      	b.n	800dae6 <_svfiprintf_r+0x182>
 800db04:	ab03      	add	r3, sp, #12
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	4622      	mov	r2, r4
 800db0a:	4b11      	ldr	r3, [pc, #68]	; (800db50 <_svfiprintf_r+0x1ec>)
 800db0c:	a904      	add	r1, sp, #16
 800db0e:	4640      	mov	r0, r8
 800db10:	f3af 8000 	nop.w
 800db14:	f1b0 3fff 	cmp.w	r0, #4294967295
 800db18:	4681      	mov	r9, r0
 800db1a:	d1d6      	bne.n	800daca <_svfiprintf_r+0x166>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	065b      	lsls	r3, r3, #25
 800db20:	f53f af35 	bmi.w	800d98e <_svfiprintf_r+0x2a>
 800db24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db26:	b01d      	add	sp, #116	; 0x74
 800db28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2c:	ab03      	add	r3, sp, #12
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	4622      	mov	r2, r4
 800db32:	4b07      	ldr	r3, [pc, #28]	; (800db50 <_svfiprintf_r+0x1ec>)
 800db34:	a904      	add	r1, sp, #16
 800db36:	4640      	mov	r0, r8
 800db38:	f000 f882 	bl	800dc40 <_printf_i>
 800db3c:	e7ea      	b.n	800db14 <_svfiprintf_r+0x1b0>
 800db3e:	bf00      	nop
 800db40:	0800e304 	.word	0x0800e304
 800db44:	0800e30a 	.word	0x0800e30a
 800db48:	0800e30e 	.word	0x0800e30e
 800db4c:	00000000 	.word	0x00000000
 800db50:	0800d8b1 	.word	0x0800d8b1

0800db54 <_printf_common>:
 800db54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db58:	4691      	mov	r9, r2
 800db5a:	461f      	mov	r7, r3
 800db5c:	688a      	ldr	r2, [r1, #8]
 800db5e:	690b      	ldr	r3, [r1, #16]
 800db60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db64:	4293      	cmp	r3, r2
 800db66:	bfb8      	it	lt
 800db68:	4613      	movlt	r3, r2
 800db6a:	f8c9 3000 	str.w	r3, [r9]
 800db6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db72:	4606      	mov	r6, r0
 800db74:	460c      	mov	r4, r1
 800db76:	b112      	cbz	r2, 800db7e <_printf_common+0x2a>
 800db78:	3301      	adds	r3, #1
 800db7a:	f8c9 3000 	str.w	r3, [r9]
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	0699      	lsls	r1, r3, #26
 800db82:	bf42      	ittt	mi
 800db84:	f8d9 3000 	ldrmi.w	r3, [r9]
 800db88:	3302      	addmi	r3, #2
 800db8a:	f8c9 3000 	strmi.w	r3, [r9]
 800db8e:	6825      	ldr	r5, [r4, #0]
 800db90:	f015 0506 	ands.w	r5, r5, #6
 800db94:	d107      	bne.n	800dba6 <_printf_common+0x52>
 800db96:	f104 0a19 	add.w	sl, r4, #25
 800db9a:	68e3      	ldr	r3, [r4, #12]
 800db9c:	f8d9 2000 	ldr.w	r2, [r9]
 800dba0:	1a9b      	subs	r3, r3, r2
 800dba2:	42ab      	cmp	r3, r5
 800dba4:	dc28      	bgt.n	800dbf8 <_printf_common+0xa4>
 800dba6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dbaa:	6822      	ldr	r2, [r4, #0]
 800dbac:	3300      	adds	r3, #0
 800dbae:	bf18      	it	ne
 800dbb0:	2301      	movne	r3, #1
 800dbb2:	0692      	lsls	r2, r2, #26
 800dbb4:	d42d      	bmi.n	800dc12 <_printf_common+0xbe>
 800dbb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbba:	4639      	mov	r1, r7
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	47c0      	blx	r8
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	d020      	beq.n	800dc06 <_printf_common+0xb2>
 800dbc4:	6823      	ldr	r3, [r4, #0]
 800dbc6:	68e5      	ldr	r5, [r4, #12]
 800dbc8:	f8d9 2000 	ldr.w	r2, [r9]
 800dbcc:	f003 0306 	and.w	r3, r3, #6
 800dbd0:	2b04      	cmp	r3, #4
 800dbd2:	bf08      	it	eq
 800dbd4:	1aad      	subeq	r5, r5, r2
 800dbd6:	68a3      	ldr	r3, [r4, #8]
 800dbd8:	6922      	ldr	r2, [r4, #16]
 800dbda:	bf0c      	ite	eq
 800dbdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbe0:	2500      	movne	r5, #0
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	bfc4      	itt	gt
 800dbe6:	1a9b      	subgt	r3, r3, r2
 800dbe8:	18ed      	addgt	r5, r5, r3
 800dbea:	f04f 0900 	mov.w	r9, #0
 800dbee:	341a      	adds	r4, #26
 800dbf0:	454d      	cmp	r5, r9
 800dbf2:	d11a      	bne.n	800dc2a <_printf_common+0xd6>
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	e008      	b.n	800dc0a <_printf_common+0xb6>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	4652      	mov	r2, sl
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	4630      	mov	r0, r6
 800dc00:	47c0      	blx	r8
 800dc02:	3001      	adds	r0, #1
 800dc04:	d103      	bne.n	800dc0e <_printf_common+0xba>
 800dc06:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc0e:	3501      	adds	r5, #1
 800dc10:	e7c3      	b.n	800db9a <_printf_common+0x46>
 800dc12:	18e1      	adds	r1, r4, r3
 800dc14:	1c5a      	adds	r2, r3, #1
 800dc16:	2030      	movs	r0, #48	; 0x30
 800dc18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc1c:	4422      	add	r2, r4
 800dc1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc26:	3302      	adds	r3, #2
 800dc28:	e7c5      	b.n	800dbb6 <_printf_common+0x62>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	4639      	mov	r1, r7
 800dc30:	4630      	mov	r0, r6
 800dc32:	47c0      	blx	r8
 800dc34:	3001      	adds	r0, #1
 800dc36:	d0e6      	beq.n	800dc06 <_printf_common+0xb2>
 800dc38:	f109 0901 	add.w	r9, r9, #1
 800dc3c:	e7d8      	b.n	800dbf0 <_printf_common+0x9c>
	...

0800dc40 <_printf_i>:
 800dc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dc48:	460c      	mov	r4, r1
 800dc4a:	7e09      	ldrb	r1, [r1, #24]
 800dc4c:	b085      	sub	sp, #20
 800dc4e:	296e      	cmp	r1, #110	; 0x6e
 800dc50:	4617      	mov	r7, r2
 800dc52:	4606      	mov	r6, r0
 800dc54:	4698      	mov	r8, r3
 800dc56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc58:	f000 80b3 	beq.w	800ddc2 <_printf_i+0x182>
 800dc5c:	d822      	bhi.n	800dca4 <_printf_i+0x64>
 800dc5e:	2963      	cmp	r1, #99	; 0x63
 800dc60:	d036      	beq.n	800dcd0 <_printf_i+0x90>
 800dc62:	d80a      	bhi.n	800dc7a <_printf_i+0x3a>
 800dc64:	2900      	cmp	r1, #0
 800dc66:	f000 80b9 	beq.w	800dddc <_printf_i+0x19c>
 800dc6a:	2958      	cmp	r1, #88	; 0x58
 800dc6c:	f000 8083 	beq.w	800dd76 <_printf_i+0x136>
 800dc70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dc78:	e032      	b.n	800dce0 <_printf_i+0xa0>
 800dc7a:	2964      	cmp	r1, #100	; 0x64
 800dc7c:	d001      	beq.n	800dc82 <_printf_i+0x42>
 800dc7e:	2969      	cmp	r1, #105	; 0x69
 800dc80:	d1f6      	bne.n	800dc70 <_printf_i+0x30>
 800dc82:	6820      	ldr	r0, [r4, #0]
 800dc84:	6813      	ldr	r3, [r2, #0]
 800dc86:	0605      	lsls	r5, r0, #24
 800dc88:	f103 0104 	add.w	r1, r3, #4
 800dc8c:	d52a      	bpl.n	800dce4 <_printf_i+0xa4>
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6011      	str	r1, [r2, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	da03      	bge.n	800dc9e <_printf_i+0x5e>
 800dc96:	222d      	movs	r2, #45	; 0x2d
 800dc98:	425b      	negs	r3, r3
 800dc9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dc9e:	486f      	ldr	r0, [pc, #444]	; (800de5c <_printf_i+0x21c>)
 800dca0:	220a      	movs	r2, #10
 800dca2:	e039      	b.n	800dd18 <_printf_i+0xd8>
 800dca4:	2973      	cmp	r1, #115	; 0x73
 800dca6:	f000 809d 	beq.w	800dde4 <_printf_i+0x1a4>
 800dcaa:	d808      	bhi.n	800dcbe <_printf_i+0x7e>
 800dcac:	296f      	cmp	r1, #111	; 0x6f
 800dcae:	d020      	beq.n	800dcf2 <_printf_i+0xb2>
 800dcb0:	2970      	cmp	r1, #112	; 0x70
 800dcb2:	d1dd      	bne.n	800dc70 <_printf_i+0x30>
 800dcb4:	6823      	ldr	r3, [r4, #0]
 800dcb6:	f043 0320 	orr.w	r3, r3, #32
 800dcba:	6023      	str	r3, [r4, #0]
 800dcbc:	e003      	b.n	800dcc6 <_printf_i+0x86>
 800dcbe:	2975      	cmp	r1, #117	; 0x75
 800dcc0:	d017      	beq.n	800dcf2 <_printf_i+0xb2>
 800dcc2:	2978      	cmp	r1, #120	; 0x78
 800dcc4:	d1d4      	bne.n	800dc70 <_printf_i+0x30>
 800dcc6:	2378      	movs	r3, #120	; 0x78
 800dcc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dccc:	4864      	ldr	r0, [pc, #400]	; (800de60 <_printf_i+0x220>)
 800dcce:	e055      	b.n	800dd7c <_printf_i+0x13c>
 800dcd0:	6813      	ldr	r3, [r2, #0]
 800dcd2:	1d19      	adds	r1, r3, #4
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6011      	str	r1, [r2, #0]
 800dcd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dce0:	2301      	movs	r3, #1
 800dce2:	e08c      	b.n	800ddfe <_printf_i+0x1be>
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6011      	str	r1, [r2, #0]
 800dce8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dcec:	bf18      	it	ne
 800dcee:	b21b      	sxthne	r3, r3
 800dcf0:	e7cf      	b.n	800dc92 <_printf_i+0x52>
 800dcf2:	6813      	ldr	r3, [r2, #0]
 800dcf4:	6825      	ldr	r5, [r4, #0]
 800dcf6:	1d18      	adds	r0, r3, #4
 800dcf8:	6010      	str	r0, [r2, #0]
 800dcfa:	0628      	lsls	r0, r5, #24
 800dcfc:	d501      	bpl.n	800dd02 <_printf_i+0xc2>
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	e002      	b.n	800dd08 <_printf_i+0xc8>
 800dd02:	0668      	lsls	r0, r5, #25
 800dd04:	d5fb      	bpl.n	800dcfe <_printf_i+0xbe>
 800dd06:	881b      	ldrh	r3, [r3, #0]
 800dd08:	4854      	ldr	r0, [pc, #336]	; (800de5c <_printf_i+0x21c>)
 800dd0a:	296f      	cmp	r1, #111	; 0x6f
 800dd0c:	bf14      	ite	ne
 800dd0e:	220a      	movne	r2, #10
 800dd10:	2208      	moveq	r2, #8
 800dd12:	2100      	movs	r1, #0
 800dd14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd18:	6865      	ldr	r5, [r4, #4]
 800dd1a:	60a5      	str	r5, [r4, #8]
 800dd1c:	2d00      	cmp	r5, #0
 800dd1e:	f2c0 8095 	blt.w	800de4c <_printf_i+0x20c>
 800dd22:	6821      	ldr	r1, [r4, #0]
 800dd24:	f021 0104 	bic.w	r1, r1, #4
 800dd28:	6021      	str	r1, [r4, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d13d      	bne.n	800ddaa <_printf_i+0x16a>
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	f040 808e 	bne.w	800de50 <_printf_i+0x210>
 800dd34:	4665      	mov	r5, ip
 800dd36:	2a08      	cmp	r2, #8
 800dd38:	d10b      	bne.n	800dd52 <_printf_i+0x112>
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	07db      	lsls	r3, r3, #31
 800dd3e:	d508      	bpl.n	800dd52 <_printf_i+0x112>
 800dd40:	6923      	ldr	r3, [r4, #16]
 800dd42:	6862      	ldr	r2, [r4, #4]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	bfde      	ittt	le
 800dd48:	2330      	movle	r3, #48	; 0x30
 800dd4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd52:	ebac 0305 	sub.w	r3, ip, r5
 800dd56:	6123      	str	r3, [r4, #16]
 800dd58:	f8cd 8000 	str.w	r8, [sp]
 800dd5c:	463b      	mov	r3, r7
 800dd5e:	aa03      	add	r2, sp, #12
 800dd60:	4621      	mov	r1, r4
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7ff fef6 	bl	800db54 <_printf_common>
 800dd68:	3001      	adds	r0, #1
 800dd6a:	d14d      	bne.n	800de08 <_printf_i+0x1c8>
 800dd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd70:	b005      	add	sp, #20
 800dd72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd76:	4839      	ldr	r0, [pc, #228]	; (800de5c <_printf_i+0x21c>)
 800dd78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dd7c:	6813      	ldr	r3, [r2, #0]
 800dd7e:	6821      	ldr	r1, [r4, #0]
 800dd80:	1d1d      	adds	r5, r3, #4
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6015      	str	r5, [r2, #0]
 800dd86:	060a      	lsls	r2, r1, #24
 800dd88:	d50b      	bpl.n	800dda2 <_printf_i+0x162>
 800dd8a:	07ca      	lsls	r2, r1, #31
 800dd8c:	bf44      	itt	mi
 800dd8e:	f041 0120 	orrmi.w	r1, r1, #32
 800dd92:	6021      	strmi	r1, [r4, #0]
 800dd94:	b91b      	cbnz	r3, 800dd9e <_printf_i+0x15e>
 800dd96:	6822      	ldr	r2, [r4, #0]
 800dd98:	f022 0220 	bic.w	r2, r2, #32
 800dd9c:	6022      	str	r2, [r4, #0]
 800dd9e:	2210      	movs	r2, #16
 800dda0:	e7b7      	b.n	800dd12 <_printf_i+0xd2>
 800dda2:	064d      	lsls	r5, r1, #25
 800dda4:	bf48      	it	mi
 800dda6:	b29b      	uxthmi	r3, r3
 800dda8:	e7ef      	b.n	800dd8a <_printf_i+0x14a>
 800ddaa:	4665      	mov	r5, ip
 800ddac:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddb0:	fb02 3311 	mls	r3, r2, r1, r3
 800ddb4:	5cc3      	ldrb	r3, [r0, r3]
 800ddb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ddba:	460b      	mov	r3, r1
 800ddbc:	2900      	cmp	r1, #0
 800ddbe:	d1f5      	bne.n	800ddac <_printf_i+0x16c>
 800ddc0:	e7b9      	b.n	800dd36 <_printf_i+0xf6>
 800ddc2:	6813      	ldr	r3, [r2, #0]
 800ddc4:	6825      	ldr	r5, [r4, #0]
 800ddc6:	6961      	ldr	r1, [r4, #20]
 800ddc8:	1d18      	adds	r0, r3, #4
 800ddca:	6010      	str	r0, [r2, #0]
 800ddcc:	0628      	lsls	r0, r5, #24
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	d501      	bpl.n	800ddd6 <_printf_i+0x196>
 800ddd2:	6019      	str	r1, [r3, #0]
 800ddd4:	e002      	b.n	800dddc <_printf_i+0x19c>
 800ddd6:	066a      	lsls	r2, r5, #25
 800ddd8:	d5fb      	bpl.n	800ddd2 <_printf_i+0x192>
 800ddda:	8019      	strh	r1, [r3, #0]
 800dddc:	2300      	movs	r3, #0
 800ddde:	6123      	str	r3, [r4, #16]
 800dde0:	4665      	mov	r5, ip
 800dde2:	e7b9      	b.n	800dd58 <_printf_i+0x118>
 800dde4:	6813      	ldr	r3, [r2, #0]
 800dde6:	1d19      	adds	r1, r3, #4
 800dde8:	6011      	str	r1, [r2, #0]
 800ddea:	681d      	ldr	r5, [r3, #0]
 800ddec:	6862      	ldr	r2, [r4, #4]
 800ddee:	2100      	movs	r1, #0
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	f7f2 f9f5 	bl	80001e0 <memchr>
 800ddf6:	b108      	cbz	r0, 800ddfc <_printf_i+0x1bc>
 800ddf8:	1b40      	subs	r0, r0, r5
 800ddfa:	6060      	str	r0, [r4, #4]
 800ddfc:	6863      	ldr	r3, [r4, #4]
 800ddfe:	6123      	str	r3, [r4, #16]
 800de00:	2300      	movs	r3, #0
 800de02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de06:	e7a7      	b.n	800dd58 <_printf_i+0x118>
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	462a      	mov	r2, r5
 800de0c:	4639      	mov	r1, r7
 800de0e:	4630      	mov	r0, r6
 800de10:	47c0      	blx	r8
 800de12:	3001      	adds	r0, #1
 800de14:	d0aa      	beq.n	800dd6c <_printf_i+0x12c>
 800de16:	6823      	ldr	r3, [r4, #0]
 800de18:	079b      	lsls	r3, r3, #30
 800de1a:	d413      	bmi.n	800de44 <_printf_i+0x204>
 800de1c:	68e0      	ldr	r0, [r4, #12]
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	4298      	cmp	r0, r3
 800de22:	bfb8      	it	lt
 800de24:	4618      	movlt	r0, r3
 800de26:	e7a3      	b.n	800dd70 <_printf_i+0x130>
 800de28:	2301      	movs	r3, #1
 800de2a:	464a      	mov	r2, r9
 800de2c:	4639      	mov	r1, r7
 800de2e:	4630      	mov	r0, r6
 800de30:	47c0      	blx	r8
 800de32:	3001      	adds	r0, #1
 800de34:	d09a      	beq.n	800dd6c <_printf_i+0x12c>
 800de36:	3501      	adds	r5, #1
 800de38:	68e3      	ldr	r3, [r4, #12]
 800de3a:	9a03      	ldr	r2, [sp, #12]
 800de3c:	1a9b      	subs	r3, r3, r2
 800de3e:	42ab      	cmp	r3, r5
 800de40:	dcf2      	bgt.n	800de28 <_printf_i+0x1e8>
 800de42:	e7eb      	b.n	800de1c <_printf_i+0x1dc>
 800de44:	2500      	movs	r5, #0
 800de46:	f104 0919 	add.w	r9, r4, #25
 800de4a:	e7f5      	b.n	800de38 <_printf_i+0x1f8>
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1ac      	bne.n	800ddaa <_printf_i+0x16a>
 800de50:	7803      	ldrb	r3, [r0, #0]
 800de52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de5a:	e76c      	b.n	800dd36 <_printf_i+0xf6>
 800de5c:	0800e315 	.word	0x0800e315
 800de60:	0800e326 	.word	0x0800e326

0800de64 <memmove>:
 800de64:	4288      	cmp	r0, r1
 800de66:	b510      	push	{r4, lr}
 800de68:	eb01 0302 	add.w	r3, r1, r2
 800de6c:	d807      	bhi.n	800de7e <memmove+0x1a>
 800de6e:	1e42      	subs	r2, r0, #1
 800de70:	4299      	cmp	r1, r3
 800de72:	d00a      	beq.n	800de8a <memmove+0x26>
 800de74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de78:	f802 4f01 	strb.w	r4, [r2, #1]!
 800de7c:	e7f8      	b.n	800de70 <memmove+0xc>
 800de7e:	4283      	cmp	r3, r0
 800de80:	d9f5      	bls.n	800de6e <memmove+0xa>
 800de82:	1881      	adds	r1, r0, r2
 800de84:	1ad2      	subs	r2, r2, r3
 800de86:	42d3      	cmn	r3, r2
 800de88:	d100      	bne.n	800de8c <memmove+0x28>
 800de8a:	bd10      	pop	{r4, pc}
 800de8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800de94:	e7f7      	b.n	800de86 <memmove+0x22>
	...

0800de98 <_free_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4605      	mov	r5, r0
 800de9c:	2900      	cmp	r1, #0
 800de9e:	d045      	beq.n	800df2c <_free_r+0x94>
 800dea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dea4:	1f0c      	subs	r4, r1, #4
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	bfb8      	it	lt
 800deaa:	18e4      	addlt	r4, r4, r3
 800deac:	f000 f8d2 	bl	800e054 <__malloc_lock>
 800deb0:	4a1f      	ldr	r2, [pc, #124]	; (800df30 <_free_r+0x98>)
 800deb2:	6813      	ldr	r3, [r2, #0]
 800deb4:	4610      	mov	r0, r2
 800deb6:	b933      	cbnz	r3, 800dec6 <_free_r+0x2e>
 800deb8:	6063      	str	r3, [r4, #4]
 800deba:	6014      	str	r4, [r2, #0]
 800debc:	4628      	mov	r0, r5
 800debe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec2:	f000 b8c8 	b.w	800e056 <__malloc_unlock>
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	d90c      	bls.n	800dee4 <_free_r+0x4c>
 800deca:	6821      	ldr	r1, [r4, #0]
 800decc:	1862      	adds	r2, r4, r1
 800dece:	4293      	cmp	r3, r2
 800ded0:	bf04      	itt	eq
 800ded2:	681a      	ldreq	r2, [r3, #0]
 800ded4:	685b      	ldreq	r3, [r3, #4]
 800ded6:	6063      	str	r3, [r4, #4]
 800ded8:	bf04      	itt	eq
 800deda:	1852      	addeq	r2, r2, r1
 800dedc:	6022      	streq	r2, [r4, #0]
 800dede:	6004      	str	r4, [r0, #0]
 800dee0:	e7ec      	b.n	800debc <_free_r+0x24>
 800dee2:	4613      	mov	r3, r2
 800dee4:	685a      	ldr	r2, [r3, #4]
 800dee6:	b10a      	cbz	r2, 800deec <_free_r+0x54>
 800dee8:	42a2      	cmp	r2, r4
 800deea:	d9fa      	bls.n	800dee2 <_free_r+0x4a>
 800deec:	6819      	ldr	r1, [r3, #0]
 800deee:	1858      	adds	r0, r3, r1
 800def0:	42a0      	cmp	r0, r4
 800def2:	d10b      	bne.n	800df0c <_free_r+0x74>
 800def4:	6820      	ldr	r0, [r4, #0]
 800def6:	4401      	add	r1, r0
 800def8:	1858      	adds	r0, r3, r1
 800defa:	4282      	cmp	r2, r0
 800defc:	6019      	str	r1, [r3, #0]
 800defe:	d1dd      	bne.n	800debc <_free_r+0x24>
 800df00:	6810      	ldr	r0, [r2, #0]
 800df02:	6852      	ldr	r2, [r2, #4]
 800df04:	605a      	str	r2, [r3, #4]
 800df06:	4401      	add	r1, r0
 800df08:	6019      	str	r1, [r3, #0]
 800df0a:	e7d7      	b.n	800debc <_free_r+0x24>
 800df0c:	d902      	bls.n	800df14 <_free_r+0x7c>
 800df0e:	230c      	movs	r3, #12
 800df10:	602b      	str	r3, [r5, #0]
 800df12:	e7d3      	b.n	800debc <_free_r+0x24>
 800df14:	6820      	ldr	r0, [r4, #0]
 800df16:	1821      	adds	r1, r4, r0
 800df18:	428a      	cmp	r2, r1
 800df1a:	bf04      	itt	eq
 800df1c:	6811      	ldreq	r1, [r2, #0]
 800df1e:	6852      	ldreq	r2, [r2, #4]
 800df20:	6062      	str	r2, [r4, #4]
 800df22:	bf04      	itt	eq
 800df24:	1809      	addeq	r1, r1, r0
 800df26:	6021      	streq	r1, [r4, #0]
 800df28:	605c      	str	r4, [r3, #4]
 800df2a:	e7c7      	b.n	800debc <_free_r+0x24>
 800df2c:	bd38      	pop	{r3, r4, r5, pc}
 800df2e:	bf00      	nop
 800df30:	20001d20 	.word	0x20001d20

0800df34 <_malloc_r>:
 800df34:	b570      	push	{r4, r5, r6, lr}
 800df36:	1ccd      	adds	r5, r1, #3
 800df38:	f025 0503 	bic.w	r5, r5, #3
 800df3c:	3508      	adds	r5, #8
 800df3e:	2d0c      	cmp	r5, #12
 800df40:	bf38      	it	cc
 800df42:	250c      	movcc	r5, #12
 800df44:	2d00      	cmp	r5, #0
 800df46:	4606      	mov	r6, r0
 800df48:	db01      	blt.n	800df4e <_malloc_r+0x1a>
 800df4a:	42a9      	cmp	r1, r5
 800df4c:	d903      	bls.n	800df56 <_malloc_r+0x22>
 800df4e:	230c      	movs	r3, #12
 800df50:	6033      	str	r3, [r6, #0]
 800df52:	2000      	movs	r0, #0
 800df54:	bd70      	pop	{r4, r5, r6, pc}
 800df56:	f000 f87d 	bl	800e054 <__malloc_lock>
 800df5a:	4a21      	ldr	r2, [pc, #132]	; (800dfe0 <_malloc_r+0xac>)
 800df5c:	6814      	ldr	r4, [r2, #0]
 800df5e:	4621      	mov	r1, r4
 800df60:	b991      	cbnz	r1, 800df88 <_malloc_r+0x54>
 800df62:	4c20      	ldr	r4, [pc, #128]	; (800dfe4 <_malloc_r+0xb0>)
 800df64:	6823      	ldr	r3, [r4, #0]
 800df66:	b91b      	cbnz	r3, 800df70 <_malloc_r+0x3c>
 800df68:	4630      	mov	r0, r6
 800df6a:	f000 f863 	bl	800e034 <_sbrk_r>
 800df6e:	6020      	str	r0, [r4, #0]
 800df70:	4629      	mov	r1, r5
 800df72:	4630      	mov	r0, r6
 800df74:	f000 f85e 	bl	800e034 <_sbrk_r>
 800df78:	1c43      	adds	r3, r0, #1
 800df7a:	d124      	bne.n	800dfc6 <_malloc_r+0x92>
 800df7c:	230c      	movs	r3, #12
 800df7e:	6033      	str	r3, [r6, #0]
 800df80:	4630      	mov	r0, r6
 800df82:	f000 f868 	bl	800e056 <__malloc_unlock>
 800df86:	e7e4      	b.n	800df52 <_malloc_r+0x1e>
 800df88:	680b      	ldr	r3, [r1, #0]
 800df8a:	1b5b      	subs	r3, r3, r5
 800df8c:	d418      	bmi.n	800dfc0 <_malloc_r+0x8c>
 800df8e:	2b0b      	cmp	r3, #11
 800df90:	d90f      	bls.n	800dfb2 <_malloc_r+0x7e>
 800df92:	600b      	str	r3, [r1, #0]
 800df94:	50cd      	str	r5, [r1, r3]
 800df96:	18cc      	adds	r4, r1, r3
 800df98:	4630      	mov	r0, r6
 800df9a:	f000 f85c 	bl	800e056 <__malloc_unlock>
 800df9e:	f104 000b 	add.w	r0, r4, #11
 800dfa2:	1d23      	adds	r3, r4, #4
 800dfa4:	f020 0007 	bic.w	r0, r0, #7
 800dfa8:	1ac3      	subs	r3, r0, r3
 800dfaa:	d0d3      	beq.n	800df54 <_malloc_r+0x20>
 800dfac:	425a      	negs	r2, r3
 800dfae:	50e2      	str	r2, [r4, r3]
 800dfb0:	e7d0      	b.n	800df54 <_malloc_r+0x20>
 800dfb2:	428c      	cmp	r4, r1
 800dfb4:	684b      	ldr	r3, [r1, #4]
 800dfb6:	bf16      	itet	ne
 800dfb8:	6063      	strne	r3, [r4, #4]
 800dfba:	6013      	streq	r3, [r2, #0]
 800dfbc:	460c      	movne	r4, r1
 800dfbe:	e7eb      	b.n	800df98 <_malloc_r+0x64>
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	6849      	ldr	r1, [r1, #4]
 800dfc4:	e7cc      	b.n	800df60 <_malloc_r+0x2c>
 800dfc6:	1cc4      	adds	r4, r0, #3
 800dfc8:	f024 0403 	bic.w	r4, r4, #3
 800dfcc:	42a0      	cmp	r0, r4
 800dfce:	d005      	beq.n	800dfdc <_malloc_r+0xa8>
 800dfd0:	1a21      	subs	r1, r4, r0
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f000 f82e 	bl	800e034 <_sbrk_r>
 800dfd8:	3001      	adds	r0, #1
 800dfda:	d0cf      	beq.n	800df7c <_malloc_r+0x48>
 800dfdc:	6025      	str	r5, [r4, #0]
 800dfde:	e7db      	b.n	800df98 <_malloc_r+0x64>
 800dfe0:	20001d20 	.word	0x20001d20
 800dfe4:	20001d24 	.word	0x20001d24

0800dfe8 <_realloc_r>:
 800dfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfea:	4607      	mov	r7, r0
 800dfec:	4614      	mov	r4, r2
 800dfee:	460e      	mov	r6, r1
 800dff0:	b921      	cbnz	r1, 800dffc <_realloc_r+0x14>
 800dff2:	4611      	mov	r1, r2
 800dff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dff8:	f7ff bf9c 	b.w	800df34 <_malloc_r>
 800dffc:	b922      	cbnz	r2, 800e008 <_realloc_r+0x20>
 800dffe:	f7ff ff4b 	bl	800de98 <_free_r>
 800e002:	4625      	mov	r5, r4
 800e004:	4628      	mov	r0, r5
 800e006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e008:	f000 f826 	bl	800e058 <_malloc_usable_size_r>
 800e00c:	42a0      	cmp	r0, r4
 800e00e:	d20f      	bcs.n	800e030 <_realloc_r+0x48>
 800e010:	4621      	mov	r1, r4
 800e012:	4638      	mov	r0, r7
 800e014:	f7ff ff8e 	bl	800df34 <_malloc_r>
 800e018:	4605      	mov	r5, r0
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d0f2      	beq.n	800e004 <_realloc_r+0x1c>
 800e01e:	4631      	mov	r1, r6
 800e020:	4622      	mov	r2, r4
 800e022:	f7ff fbf7 	bl	800d814 <memcpy>
 800e026:	4631      	mov	r1, r6
 800e028:	4638      	mov	r0, r7
 800e02a:	f7ff ff35 	bl	800de98 <_free_r>
 800e02e:	e7e9      	b.n	800e004 <_realloc_r+0x1c>
 800e030:	4635      	mov	r5, r6
 800e032:	e7e7      	b.n	800e004 <_realloc_r+0x1c>

0800e034 <_sbrk_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	4c06      	ldr	r4, [pc, #24]	; (800e050 <_sbrk_r+0x1c>)
 800e038:	2300      	movs	r3, #0
 800e03a:	4605      	mov	r5, r0
 800e03c:	4608      	mov	r0, r1
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	f7f3 fd00 	bl	8001a44 <_sbrk>
 800e044:	1c43      	adds	r3, r0, #1
 800e046:	d102      	bne.n	800e04e <_sbrk_r+0x1a>
 800e048:	6823      	ldr	r3, [r4, #0]
 800e04a:	b103      	cbz	r3, 800e04e <_sbrk_r+0x1a>
 800e04c:	602b      	str	r3, [r5, #0]
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	2000d060 	.word	0x2000d060

0800e054 <__malloc_lock>:
 800e054:	4770      	bx	lr

0800e056 <__malloc_unlock>:
 800e056:	4770      	bx	lr

0800e058 <_malloc_usable_size_r>:
 800e058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e05c:	1f18      	subs	r0, r3, #4
 800e05e:	2b00      	cmp	r3, #0
 800e060:	bfbc      	itt	lt
 800e062:	580b      	ldrlt	r3, [r1, r0]
 800e064:	18c0      	addlt	r0, r0, r3
 800e066:	4770      	bx	lr

0800e068 <_init>:
 800e068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06a:	bf00      	nop
 800e06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e06e:	bc08      	pop	{r3}
 800e070:	469e      	mov	lr, r3
 800e072:	4770      	bx	lr

0800e074 <_fini>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	bf00      	nop
 800e078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07a:	bc08      	pop	{r3}
 800e07c:	469e      	mov	lr, r3
 800e07e:	4770      	bx	lr
